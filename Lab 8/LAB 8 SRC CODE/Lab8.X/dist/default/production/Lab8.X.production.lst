

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 07 17:32:26 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    94  0000                     
    95                           	psect	idataCOMRAM
    96  003B4E                     __pidataCOMRAM:
    97                           	opt stack 0
    98                           
    99                           ;initializer for _wrap
   100  003B4E  01                 	db	1
   101                           
   102                           	psect	idataBANK0
   103  00393E                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _array
   107  00393E  FF                 	db	255
   108  00393F  79                 	db	121
   109  003940  24                 	db	36
   110  003941  30                 	db	48
   111  003942  19                 	db	25
   112  003943  12                 	db	18
   113  003944  02                 	db	2
   114  003945  78                 	db	120
   115  003946  00                 	db	0
   116  003947  10                 	db	16
   117                           
   118                           ;initializer for _EWLT_Count
   119  003948  30                 	db	48
   120  003949  30                 	db	48
   121  00394A  00                 	db	0
   122                           
   123                           ;initializer for _EW_Count
   124  00394B  30                 	db	48
   125  00394C  30                 	db	48
   126  00394D  00                 	db	0
   127                           
   128                           ;initializer for _NSLT_Count
   129  00394E  30                 	db	48
   130  00394F  30                 	db	48
   131  003950  00                 	db	0
   132                           
   133                           ;initializer for _NS_Count
   134  003951  30                 	db	48
   135  003952  30                 	db	48
   136  003953  00                 	db	0
   137                           
   138                           ;initializer for _PED_EW_Count
   139  003954  30                 	db	48
   140  003955  30                 	db	48
   141  003956  00                 	db	0
   142                           
   143                           ;initializer for _PED_NS_Count
   144  003957  30                 	db	48
   145  003958  30                 	db	48
   146  003959  00                 	db	0
   147                           
   148                           ;initializer for _Act_Mode_Txt
   149  00395A  44                 	db	68
   150  00395B  00                 	db	0
   151                           
   152                           ;initializer for _FlashingR_Txt
   153  00395C  30                 	db	48
   154  00395D  00                 	db	0
   155                           
   156                           ;initializer for _FlashingS_Txt
   157  00395E  30                 	db	48
   158  00395F  00                 	db	0
   159                           
   160                           ;initializer for _SW_EWLT_Txt
   161  003960  30                 	db	48
   162  003961  00                 	db	0
   163                           
   164                           ;initializer for _SW_EWPED_Txt
   165  003962  30                 	db	48
   166  003963  00                 	db	0
   167                           
   168                           ;initializer for _SW_MODE_Txt
   169  003964  44                 	db	68
   170  003965  00                 	db	0
   171                           
   172                           ;initializer for _SW_NSLT_Txt
   173  003966  30                 	db	48
   174  003967  00                 	db	0
   175                           
   176                           ;initializer for _SW_NSPED_Txt
   177  003968  30                 	db	48
   178  003969  00                 	db	0
   179                           
   180                           	psect	mediumconst
   181  00FD34                     __pmediumconst:
   182                           	opt stack 0
   183  00FD34  00                 	db	0
   184  00FD35                     _font:
   185                           	opt stack 0
   186  00FD35  00                 	db	0
   187  00FD36  00                 	db	0
   188  00FD37  00                 	db	0
   189  00FD38  00                 	db	0
   190  00FD39  00                 	db	0
   191  00FD3A  00                 	db	0
   192  00FD3B  00                 	db	0
   193  00FD3C  5F                 	db	95
   194  00FD3D  00                 	db	0
   195  00FD3E  00                 	db	0
   196  00FD3F  00                 	db	0
   197  00FD40  07                 	db	7
   198  00FD41  00                 	db	0
   199  00FD42  07                 	db	7
   200  00FD43  00                 	db	0
   201  00FD44  14                 	db	20
   202  00FD45  7F                 	db	127
   203  00FD46  14                 	db	20
   204  00FD47  7F                 	db	127
   205  00FD48  14                 	db	20
   206  00FD49  24                 	db	36
   207  00FD4A  2A                 	db	42
   208  00FD4B  7F                 	db	127
   209  00FD4C  2A                 	db	42
   210  00FD4D  12                 	db	18
   211  00FD4E  23                 	db	35
   212  00FD4F  13                 	db	19
   213  00FD50  08                 	db	8
   214  00FD51  64                 	db	100
   215  00FD52  62                 	db	98
   216  00FD53  36                 	db	54
   217  00FD54  49                 	db	73
   218  00FD55  56                 	db	86
   219  00FD56  20                 	db	32
   220  00FD57  50                 	db	80
   221  00FD58  00                 	db	0
   222  00FD59  08                 	db	8
   223  00FD5A  07                 	db	7
   224  00FD5B  03                 	db	3
   225  00FD5C  00                 	db	0
   226  00FD5D  00                 	db	0
   227  00FD5E  1C                 	db	28
   228  00FD5F  22                 	db	34
   229  00FD60  41                 	db	65
   230  00FD61  00                 	db	0
   231  00FD62  00                 	db	0
   232  00FD63  41                 	db	65
   233  00FD64  22                 	db	34
   234  00FD65  1C                 	db	28
   235  00FD66  00                 	db	0
   236  00FD67  2A                 	db	42
   237  00FD68  1C                 	db	28
   238  00FD69  7F                 	db	127
   239  00FD6A  1C                 	db	28
   240  00FD6B  2A                 	db	42
   241  00FD6C  08                 	db	8
   242  00FD6D  08                 	db	8
   243  00FD6E  3E                 	db	62
   244  00FD6F  08                 	db	8
   245  00FD70  08                 	db	8
   246  00FD71  00                 	db	0
   247  00FD72  80                 	db	128
   248  00FD73  70                 	db	112
   249  00FD74  30                 	db	48
   250  00FD75  00                 	db	0
   251  00FD76  08                 	db	8
   252  00FD77  08                 	db	8
   253  00FD78  08                 	db	8
   254  00FD79  08                 	db	8
   255  00FD7A  08                 	db	8
   256  00FD7B  00                 	db	0
   257  00FD7C  00                 	db	0
   258  00FD7D  60                 	db	96
   259  00FD7E  60                 	db	96
   260  00FD7F  00                 	db	0
   261  00FD80  20                 	db	32
   262  00FD81  10                 	db	16
   263  00FD82  08                 	db	8
   264  00FD83  04                 	db	4
   265  00FD84  02                 	db	2
   266  00FD85  3E                 	db	62
   267  00FD86  51                 	db	81
   268  00FD87  49                 	db	73
   269  00FD88  45                 	db	69
   270  00FD89  3E                 	db	62
   271  00FD8A  00                 	db	0
   272  00FD8B  42                 	db	66
   273  00FD8C  7F                 	db	127
   274  00FD8D  40                 	db	64
   275  00FD8E  00                 	db	0
   276  00FD8F  72                 	db	114
   277  00FD90  49                 	db	73
   278  00FD91  49                 	db	73
   279  00FD92  49                 	db	73
   280  00FD93  46                 	db	70
   281  00FD94  21                 	db	33
   282  00FD95  41                 	db	65
   283  00FD96  49                 	db	73
   284  00FD97  4D                 	db	77
   285  00FD98  33                 	db	51
   286  00FD99  18                 	db	24
   287  00FD9A  14                 	db	20
   288  00FD9B  12                 	db	18
   289  00FD9C  7F                 	db	127
   290  00FD9D  10                 	db	16
   291  00FD9E  27                 	db	39
   292  00FD9F  45                 	db	69
   293  00FDA0  45                 	db	69
   294  00FDA1  45                 	db	69
   295  00FDA2  39                 	db	57
   296  00FDA3  3C                 	db	60
   297  00FDA4  4A                 	db	74
   298  00FDA5  49                 	db	73
   299  00FDA6  49                 	db	73
   300  00FDA7  31                 	db	49
   301  00FDA8  41                 	db	65
   302  00FDA9  21                 	db	33
   303  00FDAA  11                 	db	17
   304  00FDAB  09                 	db	9
   305  00FDAC  07                 	db	7
   306  00FDAD  36                 	db	54
   307  00FDAE  49                 	db	73
   308  00FDAF  49                 	db	73
   309  00FDB0  49                 	db	73
   310  00FDB1  36                 	db	54
   311  00FDB2  46                 	db	70
   312  00FDB3  49                 	db	73
   313  00FDB4  49                 	db	73
   314  00FDB5  29                 	db	41
   315  00FDB6  1E                 	db	30
   316  00FDB7  00                 	db	0
   317  00FDB8  00                 	db	0
   318  00FDB9  14                 	db	20
   319  00FDBA  00                 	db	0
   320  00FDBB  00                 	db	0
   321  00FDBC  00                 	db	0
   322  00FDBD  40                 	db	64
   323  00FDBE  34                 	db	52
   324  00FDBF  00                 	db	0
   325  00FDC0  00                 	db	0
   326  00FDC1  00                 	db	0
   327  00FDC2  08                 	db	8
   328  00FDC3  14                 	db	20
   329  00FDC4  22                 	db	34
   330  00FDC5  41                 	db	65
   331  00FDC6  14                 	db	20
   332  00FDC7  14                 	db	20
   333  00FDC8  14                 	db	20
   334  00FDC9  14                 	db	20
   335  00FDCA  14                 	db	20
   336  00FDCB  00                 	db	0
   337  00FDCC  41                 	db	65
   338  00FDCD  22                 	db	34
   339  00FDCE  14                 	db	20
   340  00FDCF  08                 	db	8
   341  00FDD0  02                 	db	2
   342  00FDD1  01                 	db	1
   343  00FDD2  59                 	db	89
   344  00FDD3  09                 	db	9
   345  00FDD4  06                 	db	6
   346  00FDD5  3E                 	db	62
   347  00FDD6  41                 	db	65
   348  00FDD7  5D                 	db	93
   349  00FDD8  59                 	db	89
   350  00FDD9  4E                 	db	78
   351  00FDDA  7C                 	db	124
   352  00FDDB  12                 	db	18
   353  00FDDC  11                 	db	17
   354  00FDDD  12                 	db	18
   355  00FDDE  7C                 	db	124
   356  00FDDF  7F                 	db	127
   357  00FDE0  49                 	db	73
   358  00FDE1  49                 	db	73
   359  00FDE2  49                 	db	73
   360  00FDE3  36                 	db	54
   361  00FDE4  3E                 	db	62
   362  00FDE5  41                 	db	65
   363  00FDE6  41                 	db	65
   364  00FDE7  41                 	db	65
   365  00FDE8  22                 	db	34
   366  00FDE9  7F                 	db	127
   367  00FDEA  41                 	db	65
   368  00FDEB  41                 	db	65
   369  00FDEC  41                 	db	65
   370  00FDED  3E                 	db	62
   371  00FDEE  7F                 	db	127
   372  00FDEF  49                 	db	73
   373  00FDF0  49                 	db	73
   374  00FDF1  49                 	db	73
   375  00FDF2  41                 	db	65
   376  00FDF3  7F                 	db	127
   377  00FDF4  09                 	db	9
   378  00FDF5  09                 	db	9
   379  00FDF6  09                 	db	9
   380  00FDF7  01                 	db	1
   381  00FDF8  3E                 	db	62
   382  00FDF9  41                 	db	65
   383  00FDFA  41                 	db	65
   384  00FDFB  51                 	db	81
   385  00FDFC  73                 	db	115
   386  00FDFD  7F                 	db	127
   387  00FDFE  08                 	db	8
   388  00FDFF  08                 	db	8
   389  00FE00  08                 	db	8
   390  00FE01  7F                 	db	127
   391  00FE02  00                 	db	0
   392  00FE03  41                 	db	65
   393  00FE04  7F                 	db	127
   394  00FE05  41                 	db	65
   395  00FE06  00                 	db	0
   396  00FE07  20                 	db	32
   397  00FE08  40                 	db	64
   398  00FE09  41                 	db	65
   399  00FE0A  3F                 	db	63
   400  00FE0B  01                 	db	1
   401  00FE0C  7F                 	db	127
   402  00FE0D  08                 	db	8
   403  00FE0E  14                 	db	20
   404  00FE0F  22                 	db	34
   405  00FE10  41                 	db	65
   406  00FE11  7F                 	db	127
   407  00FE12  40                 	db	64
   408  00FE13  40                 	db	64
   409  00FE14  40                 	db	64
   410  00FE15  40                 	db	64
   411  00FE16  7F                 	db	127
   412  00FE17  02                 	db	2
   413  00FE18  1C                 	db	28
   414  00FE19  02                 	db	2
   415  00FE1A  7F                 	db	127
   416  00FE1B  7F                 	db	127
   417  00FE1C  04                 	db	4
   418  00FE1D  08                 	db	8
   419  00FE1E  10                 	db	16
   420  00FE1F  7F                 	db	127
   421  00FE20  3E                 	db	62
   422  00FE21  41                 	db	65
   423  00FE22  41                 	db	65
   424  00FE23  41                 	db	65
   425  00FE24  3E                 	db	62
   426  00FE25  7F                 	db	127
   427  00FE26  09                 	db	9
   428  00FE27  09                 	db	9
   429  00FE28  09                 	db	9
   430  00FE29  06                 	db	6
   431  00FE2A  3E                 	db	62
   432  00FE2B  41                 	db	65
   433  00FE2C  51                 	db	81
   434  00FE2D  21                 	db	33
   435  00FE2E  5E                 	db	94
   436  00FE2F  7F                 	db	127
   437  00FE30  09                 	db	9
   438  00FE31  19                 	db	25
   439  00FE32  29                 	db	41
   440  00FE33  46                 	db	70
   441  00FE34                     __end_of_font:
   442                           	opt stack 0
   443  00FE34                     _font2:
   444                           	opt stack 0
   445  00FE34  26                 	db	38
   446  00FE35  49                 	db	73
   447  00FE36  49                 	db	73
   448  00FE37  49                 	db	73
   449  00FE38  32                 	db	50
   450  00FE39  03                 	db	3
   451  00FE3A  01                 	db	1
   452  00FE3B  7F                 	db	127
   453  00FE3C  01                 	db	1
   454  00FE3D  03                 	db	3
   455  00FE3E  3F                 	db	63
   456  00FE3F  40                 	db	64
   457  00FE40  40                 	db	64
   458  00FE41  40                 	db	64
   459  00FE42  3F                 	db	63
   460  00FE43  1F                 	db	31
   461  00FE44  20                 	db	32
   462  00FE45  40                 	db	64
   463  00FE46  20                 	db	32
   464  00FE47  1F                 	db	31
   465  00FE48  3F                 	db	63
   466  00FE49  40                 	db	64
   467  00FE4A  38                 	db	56
   468  00FE4B  40                 	db	64
   469  00FE4C  3F                 	db	63
   470  00FE4D  63                 	db	99
   471  00FE4E  14                 	db	20
   472  00FE4F  08                 	db	8
   473  00FE50  14                 	db	20
   474  00FE51  63                 	db	99
   475  00FE52  03                 	db	3
   476  00FE53  04                 	db	4
   477  00FE54  78                 	db	120
   478  00FE55  04                 	db	4
   479  00FE56  03                 	db	3
   480  00FE57  61                 	db	97
   481  00FE58  59                 	db	89
   482  00FE59  49                 	db	73
   483  00FE5A  4D                 	db	77
   484  00FE5B  43                 	db	67
   485  00FE5C  00                 	db	0
   486  00FE5D  7F                 	db	127
   487  00FE5E  41                 	db	65
   488  00FE5F  41                 	db	65
   489  00FE60  41                 	db	65
   490  00FE61  02                 	db	2
   491  00FE62  04                 	db	4
   492  00FE63  08                 	db	8
   493  00FE64  10                 	db	16
   494  00FE65  20                 	db	32
   495  00FE66  00                 	db	0
   496  00FE67  41                 	db	65
   497  00FE68  41                 	db	65
   498  00FE69  41                 	db	65
   499  00FE6A  7F                 	db	127
   500  00FE6B  04                 	db	4
   501  00FE6C  02                 	db	2
   502  00FE6D  01                 	db	1
   503  00FE6E  02                 	db	2
   504  00FE6F  04                 	db	4
   505  00FE70  40                 	db	64
   506  00FE71  40                 	db	64
   507  00FE72  40                 	db	64
   508  00FE73  40                 	db	64
   509  00FE74  40                 	db	64
   510  00FE75  00                 	db	0
   511  00FE76  03                 	db	3
   512  00FE77  07                 	db	7
   513  00FE78  08                 	db	8
   514  00FE79  00                 	db	0
   515  00FE7A  20                 	db	32
   516  00FE7B  54                 	db	84
   517  00FE7C  54                 	db	84
   518  00FE7D  78                 	db	120
   519  00FE7E  40                 	db	64
   520  00FE7F  7F                 	db	127
   521  00FE80  28                 	db	40
   522  00FE81  44                 	db	68
   523  00FE82  44                 	db	68
   524  00FE83  38                 	db	56
   525  00FE84  38                 	db	56
   526  00FE85  44                 	db	68
   527  00FE86  44                 	db	68
   528  00FE87  44                 	db	68
   529  00FE88  28                 	db	40
   530  00FE89  38                 	db	56
   531  00FE8A  44                 	db	68
   532  00FE8B  44                 	db	68
   533  00FE8C  28                 	db	40
   534  00FE8D  7F                 	db	127
   535  00FE8E  38                 	db	56
   536  00FE8F  54                 	db	84
   537  00FE90  54                 	db	84
   538  00FE91  54                 	db	84
   539  00FE92  18                 	db	24
   540  00FE93  00                 	db	0
   541  00FE94  08                 	db	8
   542  00FE95  7E                 	db	126
   543  00FE96  09                 	db	9
   544  00FE97  02                 	db	2
   545  00FE98  18                 	db	24
   546  00FE99  A4                 	db	164
   547  00FE9A  A4                 	db	164
   548  00FE9B  9C                 	db	156
   549  00FE9C  78                 	db	120
   550  00FE9D  7F                 	db	127
   551  00FE9E  08                 	db	8
   552  00FE9F  04                 	db	4
   553  00FEA0  04                 	db	4
   554  00FEA1  78                 	db	120
   555  00FEA2  00                 	db	0
   556  00FEA3  44                 	db	68
   557  00FEA4  7D                 	db	125
   558  00FEA5  40                 	db	64
   559  00FEA6  00                 	db	0
   560  00FEA7  20                 	db	32
   561  00FEA8  40                 	db	64
   562  00FEA9  40                 	db	64
   563  00FEAA  3D                 	db	61
   564  00FEAB  00                 	db	0
   565  00FEAC  7F                 	db	127
   566  00FEAD  10                 	db	16
   567  00FEAE  28                 	db	40
   568  00FEAF  44                 	db	68
   569  00FEB0  00                 	db	0
   570  00FEB1  00                 	db	0
   571  00FEB2  41                 	db	65
   572  00FEB3  7F                 	db	127
   573  00FEB4  40                 	db	64
   574  00FEB5  00                 	db	0
   575  00FEB6  7C                 	db	124
   576  00FEB7  04                 	db	4
   577  00FEB8  78                 	db	120
   578  00FEB9  04                 	db	4
   579  00FEBA  78                 	db	120
   580  00FEBB  7C                 	db	124
   581  00FEBC  08                 	db	8
   582  00FEBD  04                 	db	4
   583  00FEBE  04                 	db	4
   584  00FEBF  78                 	db	120
   585  00FEC0  38                 	db	56
   586  00FEC1  44                 	db	68
   587  00FEC2  44                 	db	68
   588  00FEC3  44                 	db	68
   589  00FEC4  38                 	db	56
   590  00FEC5  FC                 	db	252
   591  00FEC6  18                 	db	24
   592  00FEC7  24                 	db	36
   593  00FEC8  24                 	db	36
   594  00FEC9  18                 	db	24
   595  00FECA  18                 	db	24
   596  00FECB  24                 	db	36
   597  00FECC  24                 	db	36
   598  00FECD  18                 	db	24
   599  00FECE  FC                 	db	252
   600  00FECF  7C                 	db	124
   601  00FED0  08                 	db	8
   602  00FED1  04                 	db	4
   603  00FED2  04                 	db	4
   604  00FED3  08                 	db	8
   605  00FED4  48                 	db	72
   606  00FED5  54                 	db	84
   607  00FED6  54                 	db	84
   608  00FED7  54                 	db	84
   609  00FED8  24                 	db	36
   610  00FED9  04                 	db	4
   611  00FEDA  04                 	db	4
   612  00FEDB  3F                 	db	63
   613  00FEDC  44                 	db	68
   614  00FEDD  24                 	db	36
   615  00FEDE  3C                 	db	60
   616  00FEDF  40                 	db	64
   617  00FEE0  40                 	db	64
   618  00FEE1  20                 	db	32
   619  00FEE2  7C                 	db	124
   620  00FEE3  1C                 	db	28
   621  00FEE4  20                 	db	32
   622  00FEE5  40                 	db	64
   623  00FEE6  20                 	db	32
   624  00FEE7  1C                 	db	28
   625  00FEE8  3C                 	db	60
   626  00FEE9  40                 	db	64
   627  00FEEA  30                 	db	48
   628  00FEEB  40                 	db	64
   629  00FEEC  3C                 	db	60
   630  00FEED  44                 	db	68
   631  00FEEE  28                 	db	40
   632  00FEEF  10                 	db	16
   633  00FEF0  28                 	db	40
   634  00FEF1  44                 	db	68
   635  00FEF2  4C                 	db	76
   636  00FEF3  90                 	db	144
   637  00FEF4  90                 	db	144
   638  00FEF5  90                 	db	144
   639  00FEF6  7C                 	db	124
   640  00FEF7  44                 	db	68
   641  00FEF8  64                 	db	100
   642  00FEF9  54                 	db	84
   643  00FEFA  4C                 	db	76
   644  00FEFB  44                 	db	68
   645  00FEFC  00                 	db	0
   646  00FEFD  08                 	db	8
   647  00FEFE  36                 	db	54
   648  00FEFF  41                 	db	65
   649  00FF00  00                 	db	0
   650  00FF01  00                 	db	0
   651  00FF02  00                 	db	0
   652  00FF03  77                 	db	119
   653  00FF04  00                 	db	0
   654  00FF05  00                 	db	0
   655  00FF06  00                 	db	0
   656  00FF07  41                 	db	65
   657  00FF08  36                 	db	54
   658  00FF09  08                 	db	8
   659  00FF0A  00                 	db	0
   660  00FF0B  02                 	db	2
   661  00FF0C  01                 	db	1
   662  00FF0D  02                 	db	2
   663  00FF0E  04                 	db	4
   664  00FF0F  02                 	db	2
   665  00FF10                     __end_of_font2:
   666                           	opt stack 0
   667  00FF10                     _dpowers:
   668                           	opt stack 0
   669  00FF10  0001               	dw	1
   670  00FF12  0000               	dw	0
   671  00FF14  000A               	dw	10
   672  00FF16  0000               	dw	0
   673  00FF18  0064               	dw	100
   674  00FF1A  0000               	dw	0
   675  00FF1C  03E8               	dw	1000
   676  00FF1E  0000               	dw	0
   677  00FF20  2710               	dw	10000
   678  00FF22  0000               	dw	0
   679  00FF24  86A0               	dw	34464
   680  00FF26  0001               	dw	1
   681  00FF28  4240               	dw	16960
   682  00FF2A  000F               	dw	15
   683  00FF2C  9680               	dw	38528
   684  00FF2E  0098               	dw	152
   685  00FF30  E100               	dw	57600
   686  00FF32  05F5               	dw	1525
   687  00FF34  CA00               	dw	51712
   688  00FF36  3B9A               	dw	15258
   689  00FF38                     __end_of_dpowers:
   690                           	opt stack 0
   691  00FF38                     __npowers_:
   692                           	opt stack 0
   693  00FF38  00                 	db	0
   694  00FF39  80                 	db	128
   695  00FF3A  3F                 	db	63
   696  00FF3B  CD                 	db	205
   697  00FF3C  CC                 	db	204
   698  00FF3D  3D                 	db	61
   699  00FF3E  D7                 	db	215
   700  00FF3F  23                 	db	35
   701  00FF40  3C                 	db	60
   702  00FF41  12                 	db	18
   703  00FF42  83                 	db	131
   704  00FF43  3A                 	db	58
   705  00FF44  B7                 	db	183
   706  00FF45  D1                 	db	209
   707  00FF46  38                 	db	56
   708  00FF47  C6                 	db	198
   709  00FF48  27                 	db	39
   710  00FF49  37                 	db	55
   711  00FF4A  38                 	db	56
   712  00FF4B  86                 	db	134
   713  00FF4C  35                 	db	53
   714  00FF4D  C0                 	db	192
   715  00FF4E  D6                 	db	214
   716  00FF4F  33                 	db	51
   717  00FF50  CC                 	db	204
   718  00FF51  2B                 	db	43
   719  00FF52  32                 	db	50
   720  00FF53  70                 	db	112
   721  00FF54  89                 	db	137
   722  00FF55  30                 	db	48
   723  00FF56  E7                 	db	231
   724  00FF57  DB                 	db	219
   725  00FF58  2E                 	db	46
   726  00FF59  E5                 	db	229
   727  00FF5A  3C                 	db	60
   728  00FF5B  1E                 	db	30
   729  00FF5C  42                 	db	66
   730  00FF5D  A2                 	db	162
   731  00FF5E  0D                 	db	13
   732  00FF5F                     __end_of__npowers_:
   733                           	opt stack 0
   734  00FF5F                     __powers_:
   735                           	opt stack 0
   736  00FF5F  00                 	db	0
   737  00FF60  80                 	db	128
   738  00FF61  3F                 	db	63
   739  00FF62  00                 	db	0
   740  00FF63  20                 	db	32
   741  00FF64  41                 	db	65
   742  00FF65  00                 	db	0
   743  00FF66  C8                 	db	200
   744  00FF67  42                 	db	66
   745  00FF68  00                 	db	0
   746  00FF69  7A                 	db	122
   747  00FF6A  44                 	db	68
   748  00FF6B  40                 	db	64
   749  00FF6C  1C                 	db	28
   750  00FF6D  46                 	db	70
   751  00FF6E  50                 	db	80
   752  00FF6F  C3                 	db	195
   753  00FF70  47                 	db	71
   754  00FF71  24                 	db	36
   755  00FF72  74                 	db	116
   756  00FF73  49                 	db	73
   757  00FF74  97                 	db	151
   758  00FF75  18                 	db	24
   759  00FF76  4B                 	db	75
   760  00FF77  BC                 	db	188
   761  00FF78  BE                 	db	190
   762  00FF79  4C                 	db	76
   763  00FF7A  6B                 	db	107
   764  00FF7B  6E                 	db	110
   765  00FF7C  4E                 	db	78
   766  00FF7D  03                 	db	3
   767  00FF7E  15                 	db	21
   768  00FF7F  50                 	db	80
   769  00FF80  79                 	db	121
   770  00FF81  AD                 	db	173
   771  00FF82  60                 	db	96
   772  00FF83  F3                 	db	243
   773  00FF84  49                 	db	73
   774  00FF85  71                 	db	113
   775  00FF86                     __end_of__powers_:
   776                           	opt stack 0
   777  0000                     _ADCON0	set	4034
   778  0000                     _ADCON0bits	set	4034
   779  0000                     _ADCON1	set	4033
   780  0000                     _ADCON2	set	4032
   781  0000                     _ADRESH	set	4036
   782  0000                     _ADRESL	set	4035
   783  0000                     _CCP2CON	set	4026
   784  0000                     _CCPR2L	set	4027
   785  0000                     _INTCON2bits	set	4081
   786  0000                     _INTCON3bits	set	4080
   787  0000                     _INTCONbits	set	4082
   788  0000                     _OSCCON	set	4051
   789  0000                     _PIE1bits	set	3997
   790  0000                     _PIR1bits	set	3998
   791  0000                     _PIR2bits	set	4001
   792  0000                     _PORTAbits	set	3968
   793  0000                     _PORTBbits	set	3969
   794  0000                     _PORTC	set	3970
   795  0000                     _PORTCbits	set	3970
   796  0000                     _PORTD	set	3971
   797  0000                     _PORTDbits	set	3971
   798  0000                     _PORTEbits	set	3972
   799  0000                     _PR2	set	4043
   800  0000                     _RCSTA	set	4011
   801  0000                     _RCSTAbits	set	4011
   802  0000                     _SPBRG	set	4015
   803  0000                     _SPBRGH	set	4016
   804  0000                     _SSPBUF	set	4041
   805  0000                     _SSPCON1	set	4038
   806  0000                     _SSPSTAT	set	4039
   807  0000                     _SSPSTATbits	set	4039
   808  0000                     _T0CON	set	4053
   809  0000                     _T0CONbits	set	4053
   810  0000                     _T2CON	set	4042
   811  0000                     _T3CON	set	4017
   812  0000                     _T3CONbits	set	4017
   813  0000                     _TMR0H	set	4055
   814  0000                     _TMR0L	set	4054
   815  0000                     _TRISA	set	3986
   816  0000                     _TRISB	set	3987
   817  0000                     _TRISC	set	3988
   818  0000                     _TRISCbits	set	3988
   819  0000                     _TRISD	set	3989
   820  0000                     _TRISE	set	3990
   821  0000                     _TXREG	set	4013
   822  0000                     _TXSTA	set	4012
   823  0000                     _TXSTAbits	set	4012
   824  0000                     _RBPU	set	32655
   825  0000                     _TRMT	set	32097
   826  00FF86                     STR_5:
   827                           
   828                           ; BSR set to: 0
   829  00FF86  45                 	db	69	;'E'
   830  00FF87  43                 	db	67	;'C'
   831  00FF88  45                 	db	69	;'E'
   832  00FF89  33                 	db	51	;'3'
   833  00FF8A  33                 	db	51	;'3'
   834  00FF8B  30                 	db	48	;'0'
   835  00FF8C  31                 	db	49	;'1'
   836  00FF8D  4C                 	db	76	;'L'
   837  00FF8E  20                 	db	32
   838  00FF8F  53                 	db	83	;'S'
   839  00FF90  50                 	db	80	;'P'
   840  00FF91  52                 	db	82	;'R'
   841  00FF92  49                 	db	73	;'I'
   842  00FF93  4E                 	db	78	;'N'
   843  00FF94  47                 	db	71	;'G'
   844  00FF95  20                 	db	32
   845  00FF96  32                 	db	50	;'2'
   846  00FF97  32                 	db	50	;'2'
   847  00FF98  2D                 	db	45
   848  00FF99  53                 	db	83	;'S'
   849  00FF9A  33                 	db	51	;'3'
   850  00FF9B  00                 	db	0
   851  00FF9C                     STR_16:
   852                           
   853                           ; BSR set to: 0
   854  00FF9C  4E                 	db	78	;'N'
   855  00FF9D  53                 	db	83	;'S'
   856  00FF9E  50                 	db	80	;'P'
   857  00FF9F  20                 	db	32
   858  00FFA0  4E                 	db	78	;'N'
   859  00FFA1  53                 	db	83	;'S'
   860  00FFA2  4C                 	db	76	;'L'
   861  00FFA3  54                 	db	84	;'T'
   862  00FFA4  20                 	db	32
   863  00FFA5  45                 	db	69	;'E'
   864  00FFA6  57                 	db	87	;'W'
   865  00FFA7  50                 	db	80	;'P'
   866  00FFA8  20                 	db	32
   867  00FFA9  45                 	db	69	;'E'
   868  00FFAA  57                 	db	87	;'W'
   869  00FFAB  4C                 	db	76	;'L'
   870  00FFAC  54                 	db	84	;'T'
   871  00FFAD  20                 	db	32
   872  00FFAE  4D                 	db	77	;'M'
   873  00FFAF  52                 	db	82	;'R'
   874  00FFB0  00                 	db	0
   875  00FFB1                     STR_17:
   876                           
   877                           ; BSR set to: 0
   878  00FFB1  56                 	db	86	;'V'
   879  00FFB2  6F                 	db	111	;'o'
   880  00FFB3  6C                 	db	108	;'l'
   881  00FFB4  74                 	db	116	;'t'
   882  00FFB5  61                 	db	97	;'a'
   883  00FFB6  67                 	db	103	;'g'
   884  00FFB7  65                 	db	101	;'e'
   885  00FFB8  20                 	db	32
   886  00FFB9  3D                 	db	61	;'='
   887  00FFBA  20                 	db	32
   888  00FFBB  25                 	db	37
   889  00FFBC  66                 	db	102	;'f'
   890  00FFBD  20                 	db	32
   891  00FFBE  0D                 	db	13
   892  00FFBF  0A                 	db	10
   893  00FFC0  00                 	db	0
   894  00FFC1                     STR_10:
   895                           
   896                           ; BSR set to: 0
   897  00FFC1  4E                 	db	78	;'N'
   898  00FFC2  4F                 	db	79	;'O'
   899  00FFC3  52                 	db	82	;'R'
   900  00FFC4  54                 	db	84	;'T'
   901  00FFC5  48                 	db	72	;'H'
   902  00FFC6  2F                 	db	47
   903  00FFC7  53                 	db	83	;'S'
   904  00FFC8  4F                 	db	79	;'O'
   905  00FFC9  55                 	db	85	;'U'
   906  00FFCA  54                 	db	84	;'T'
   907  00FFCB  48                 	db	72	;'H'
   908  00FFCC  00                 	db	0
   909  00FFCD                     STR_12:
   910                           
   911                           ; BSR set to: 0
   912  00FFCD  45                 	db	69	;'E'
   913  00FFCE  41                 	db	65	;'A'
   914  00FFCF  53                 	db	83	;'S'
   915  00FFD0  54                 	db	84	;'T'
   916  00FFD1  2F                 	db	47
   917  00FFD2  57                 	db	87	;'W'
   918  00FFD3  45                 	db	69	;'E'
   919  00FFD4  53                 	db	83	;'S'
   920  00FFD5  54                 	db	84	;'T'
   921  00FFD6  00                 	db	0
   922  00FFD7                     STR_11:
   923                           
   924                           ; BSR set to: 0
   925  00FFD7  4E                 	db	78	;'N'
   926  00FFD8  2F                 	db	47
   927  00FFD9  53                 	db	83	;'S'
   928  00FFDA  20                 	db	32
   929  00FFDB  4C                 	db	76	;'L'
   930  00FFDC  54                 	db	84	;'T'
   931  00FFDD  00                 	db	0
   932  00FFDE                     STR_13:
   933                           
   934                           ; BSR set to: 0
   935  00FFDE  45                 	db	69	;'E'
   936  00FFDF  2F                 	db	47
   937  00FFE0  57                 	db	87	;'W'
   938  00FFE1  20                 	db	32
   939  00FFE2  4C                 	db	76	;'L'
   940  00FFE3  54                 	db	84	;'T'
   941  00FFE4  00                 	db	0
   942  00FFE5                     STR_6:
   943                           
   944                           ; BSR set to: 0
   945  00FFE5  4D                 	db	77	;'M'
   946  00FFE6  6F                 	db	111	;'o'
   947  00FFE7  64                 	db	100	;'d'
   948  00FFE8  65                 	db	101	;'e'
   949  00FFE9  3A                 	db	58	;':'
   950  00FFEA  00                 	db	0
   951  00FFEB                     STR_7:
   952                           
   953                           ; BSR set to: 0
   954  00FFEB  46                 	db	70	;'F'
   955  00FFEC  52                 	db	82	;'R'
   956  00FFED  3A                 	db	58	;':'
   957  00FFEE  00                 	db	0
   958  00FFEF                     STR_8:
   959                           
   960                           ; BSR set to: 0
   961  00FFEF  46                 	db	70	;'F'
   962  00FFF0  53                 	db	83	;'S'
   963  00FFF1  3A                 	db	58	;':'
   964  00FFF2  00                 	db	0
   965  00FFF3                     STR_14:
   966                           
   967                           ; BSR set to: 0
   968  00FFF3  50                 	db	80	;'P'
   969  00FFF4  4E                 	db	78	;'N'
   970  00FFF5  53                 	db	83	;'S'
   971  00FFF6  00                 	db	0
   972  00FFF7                     STR_15:
   973                           
   974                           ; BSR set to: 0
   975  00FFF7  50                 	db	80	;'P'
   976  00FFF8  45                 	db	69	;'E'
   977  00FFF9  57                 	db	87	;'W'
   978  00FFFA  00                 	db	0
   979  00FFFB                     STR_2:
   980                           
   981                           ; BSR set to: 0
   982  00FFFB  20                 	db	32
   983  00FFFC  00                 	db	0
   984  00FFFD                     STR_1:
   985                           
   986                           ; BSR set to: 0
   987  00FFFD  2A                 	db	42
   988  00FFFE  00                 	db	0
   989  0000                     
   990                           ; #config settings
   991  00FFFF  00                 	db	0	; dummy byte at the end
   992  0000                     
   993                           	psect	cinit
   994  0034B8                     __pcinit:
   995                           	opt stack 0
   996  0034B8                     start_initialization:
   997                           	opt stack 0
   998  0034B8                     __initialization:
   999                           	opt stack 0
  1000                           
  1001                           ; Clear objects allocated to BANK0 (44 bytes)
  1002  0034B8  EE00  F080         	lfsr	0,__pbssBANK0
  1003  0034BC  0E2C               	movlw	44
  1004  0034BE                     clear_0:
  1005  0034BE  6AEE               	clrf	postinc0,c
  1006  0034C0  06E8               	decf	wreg,f,c
  1007  0034C2  E1FD               	bnz	clear_0
  1008                           
  1009                           ; Clear objects allocated to COMRAM (18 bytes)
  1010  0034C4  EE00  F05F         	lfsr	0,__pbssCOMRAM
  1011  0034C8  0E12               	movlw	18
  1012  0034CA                     clear_1:
  1013  0034CA  6AEE               	clrf	postinc0,c
  1014  0034CC  06E8               	decf	wreg,f,c
  1015  0034CE  E1FD               	bnz	clear_1
  1016                           
  1017                           ; Initialize objects allocated to BANK0 (44 bytes)
  1018                           ; load TBLPTR registers with __pidataBANK0
  1019  0034D0  0E3E               	movlw	low __pidataBANK0
  1020  0034D2  6EF6               	movwf	tblptrl,c
  1021  0034D4  0E39               	movlw	high __pidataBANK0
  1022  0034D6  6EF7               	movwf	tblptrh,c
  1023  0034D8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1024  0034DA  6EF8               	movwf	tblptru,c
  1025  0034DC  EE00  F0AC         	lfsr	0,__pdataBANK0
  1026  0034E0  EE10 F02C          	lfsr	1,44
  1027  0034E4                     copy_data0:
  1028  0034E4  0009               	tblrd		*+
  1029  0034E6  CFF5 FFEE          	movff	tablat,postinc0
  1030  0034EA  50E5               	movf	postdec1,w,c
  1031  0034EC  50E1               	movf	fsr1l,w,c
  1032  0034EE  E1FA               	bnz	copy_data0
  1033                           
  1034                           ; Initialize objects allocated to COMRAM (1 bytes)
  1035                           ; load TBLPTR registers with __pidataCOMRAM
  1036  0034F0  0E4E               	movlw	low __pidataCOMRAM
  1037  0034F2  6EF6               	movwf	tblptrl,c
  1038  0034F4  0E3B               	movlw	high __pidataCOMRAM
  1039  0034F6  6EF7               	movwf	tblptrh,c
  1040  0034F8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1041  0034FA  6EF8               	movwf	tblptru,c
  1042  0034FC  0009               	tblrd		*+	;fetch initializer
  1043  0034FE  CFF5 F071          	movff	tablat,__pdataCOMRAM
  1044  003502                     end_of_initialization:
  1045                           	opt stack 0
  1046  003502                     __end_of__initialization:
  1047                           	opt stack 0
  1048  003502  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1049  003504  6EF8               	movwf	tblptru,c
  1050  003506  0100               	movlb	0
  1051  003508  EF2E  F016         	goto	_main	;jump to C main() function
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           postinc0	equ	0xFEE
  1057                           wreg	equ	0xFE8
  1058                           postdec1	equ	0xFE5
  1059                           fsr1l	equ	0xFE1
  1060                           
  1061                           	psect	bssCOMRAM
  1062  00005F                     __pbssCOMRAM:
  1063                           	opt stack 0
  1064  00005F                     _txt:
  1065                           	opt stack 0
  1066  00005F                     	ds	2
  1067  000061                     _Count:
  1068                           	opt stack 0
  1069  000061                     	ds	1
  1070  000062                     _EWPED_SW:
  1071                           	opt stack 0
  1072  000062                     	ds	1
  1073  000063                     _FLASHING:
  1074                           	opt stack 0
  1075  000063                     	ds	1
  1076  000064                     _FLASHING_REQUEST:
  1077                           	opt stack 0
  1078  000064                     	ds	1
  1079  000065                     _NSPED_SW:
  1080                           	opt stack 0
  1081  000065                     	ds	1
  1082  000066                     _PED_Count:
  1083                           	opt stack 0
  1084  000066                     	ds	1
  1085  000067                     _SW_EWLT:
  1086                           	opt stack 0
  1087  000067                     	ds	1
  1088  000068                     _SW_EWPED:
  1089                           	opt stack 0
  1090  000068                     	ds	1
  1091  000069                     _SW_MODE:
  1092                           	opt stack 0
  1093  000069                     	ds	1
  1094  00006A                     _SW_NSLT:
  1095                           	opt stack 0
  1096  00006A                     	ds	1
  1097  00006B                     _SW_NSPED:
  1098                           	opt stack 0
  1099  00006B                     	ds	1
  1100  00006C                     __tft_type:
  1101                           	opt stack 0
  1102  00006C                     	ds	1
  1103  00006D                     _colstart:
  1104                           	opt stack 0
  1105  00006D                     	ds	1
  1106  00006E                     _dir:
  1107                           	opt stack 0
  1108  00006E                     	ds	1
  1109  00006F                     _direction:
  1110                           	opt stack 0
  1111  00006F                     	ds	1
  1112  000070                     _rowstart:
  1113                           	opt stack 0
  1114  000070                     	ds	1
  1115                           tblptru	equ	0xFF8
  1116                           tblptrh	equ	0xFF7
  1117                           tblptrl	equ	0xFF6
  1118                           tablat	equ	0xFF5
  1119                           postinc0	equ	0xFEE
  1120                           wreg	equ	0xFE8
  1121                           postdec1	equ	0xFE5
  1122                           fsr1l	equ	0xFE1
  1123                           
  1124                           	psect	dataCOMRAM
  1125  000071                     __pdataCOMRAM:
  1126                           	opt stack 0
  1127  000071                     _wrap:
  1128                           	opt stack 0
  1129  000071                     	ds	1
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           postdec1	equ	0xFE5
  1137                           fsr1l	equ	0xFE1
  1138                           
  1139                           	psect	bssBANK0
  1140  000080                     __pbssBANK0:
  1141                           	opt stack 0
  1142  000080                     _volt:
  1143                           	opt stack 0
  1144  000080                     	ds	3
  1145  000083                     _INT0_flag:
  1146                           	opt stack 0
  1147  000083                     	ds	2
  1148  000085                     _INT1_flag:
  1149                           	opt stack 0
  1150  000085                     	ds	2
  1151  000087                     _INT2_flag:
  1152                           	opt stack 0
  1153  000087                     	ds	2
  1154  000089                     _MODE:
  1155                           	opt stack 0
  1156  000089                     	ds	2
  1157  00008B                     _nbr:
  1158                           	opt stack 0
  1159  00008B                     	ds	2
  1160  00008D                     _buffer:
  1161                           	opt stack 0
  1162  00008D                     	ds	31
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           postinc0	equ	0xFEE
  1168                           wreg	equ	0xFE8
  1169                           postdec1	equ	0xFE5
  1170                           fsr1l	equ	0xFE1
  1171                           
  1172                           	psect	dataBANK0
  1173  0000AC                     __pdataBANK0:
  1174                           	opt stack 0
  1175  0000AC                     _array:
  1176                           	opt stack 0
  1177  0000AC                     	ds	10
  1178  0000B6                     _EWLT_Count:
  1179                           	opt stack 0
  1180  0000B6                     	ds	3
  1181  0000B9                     _EW_Count:
  1182                           	opt stack 0
  1183  0000B9                     	ds	3
  1184  0000BC                     _NSLT_Count:
  1185                           	opt stack 0
  1186  0000BC                     	ds	3
  1187  0000BF                     _NS_Count:
  1188                           	opt stack 0
  1189  0000BF                     	ds	3
  1190  0000C2                     _PED_EW_Count:
  1191                           	opt stack 0
  1192  0000C2                     	ds	3
  1193  0000C5                     _PED_NS_Count:
  1194                           	opt stack 0
  1195  0000C5                     	ds	3
  1196  0000C8                     _Act_Mode_Txt:
  1197                           	opt stack 0
  1198  0000C8                     	ds	2
  1199  0000CA                     _FlashingR_Txt:
  1200                           	opt stack 0
  1201  0000CA                     	ds	2
  1202  0000CC                     _FlashingS_Txt:
  1203                           	opt stack 0
  1204  0000CC                     	ds	2
  1205  0000CE                     _SW_EWLT_Txt:
  1206                           	opt stack 0
  1207  0000CE                     	ds	2
  1208  0000D0                     _SW_EWPED_Txt:
  1209                           	opt stack 0
  1210  0000D0                     	ds	2
  1211  0000D2                     _SW_MODE_Txt:
  1212                           	opt stack 0
  1213  0000D2                     	ds	2
  1214  0000D4                     _SW_NSLT_Txt:
  1215                           	opt stack 0
  1216  0000D4                     	ds	2
  1217  0000D6                     _SW_NSPED_Txt:
  1218                           	opt stack 0
  1219  0000D6                     	ds	2
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1l	equ	0xFE1
  1228                           
  1229                           	psect	cstackBANK0
  1230  0000D8                     __pcstackBANK0:
  1231                           	opt stack 0
  1232  0000D8                     _printf$2524:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x0
  1236  0000D8                     	ds	3
  1237  0000DB                     printf@ap:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x3
  1241  0000DB                     	ds	2
  1242  0000DD                     printf@flag:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x5
  1246  0000DD                     	ds	2
  1247  0000DF                     printf@prec:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0x7
  1251  0000DF                     	ds	2
  1252  0000E1                     printf@val:
  1253                           	opt stack 0
  1254                           
  1255                           ; 4 bytes @ 0x9
  1256  0000E1                     	ds	4
  1257  0000E5                     printf@exp:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0xD
  1261  0000E5                     	ds	2
  1262  0000E7                     printf@tmpval:
  1263                           	opt stack 0
  1264                           
  1265                           ; 4 bytes @ 0xF
  1266  0000E7                     	ds	4
  1267  0000EB                     printf@fval:
  1268                           	opt stack 0
  1269                           
  1270                           ; 3 bytes @ 0x13
  1271  0000EB                     	ds	3
  1272  0000EE                     printf@c:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x16
  1276  0000EE                     	ds	1
  1277  0000EF                     Wait_N_Seconds@seconds:
  1278                           	opt stack 0
  1279  0000EF                     PED_Control@Num_Sec:
  1280                           	opt stack 0
  1281                           
  1282                           ; 1 bytes @ 0x17
  1283  0000EF                     	ds	1
  1284  0000F0                     Wait_N_Seconds@I:
  1285                           	opt stack 0
  1286  0000F0                     PED_Control@Direction:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x18
  1290  0000F0                     	ds	1
  1291  0000F1                     PED_Control@i:
  1292                           	opt stack 0
  1293                           
  1294                           ; 1 bytes @ 0x19
  1295  0000F1                     	ds	1
  1296  0000F2                     main@pvoltage_mv:
  1297                           	opt stack 0
  1298                           
  1299                           ; 3 bytes @ 0x1A
  1300  0000F2                     	ds	3
  1301  0000F5                     main@Pvoltage:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x1D
  1305  0000F5                     	ds	3
  1306  0000F8                     main@num_step:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x20
  1310  0000F8                     	ds	2
  1311  0000FA                     main@finalVoltage:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x22
  1315  0000FA                     	ds	2
  1316                           tblptru	equ	0xFF8
  1317                           tblptrh	equ	0xFF7
  1318                           tblptrl	equ	0xFF6
  1319                           tablat	equ	0xFF5
  1320                           postinc0	equ	0xFEE
  1321                           wreg	equ	0xFE8
  1322                           postdec1	equ	0xFE5
  1323                           fsr1l	equ	0xFE1
  1324                           
  1325                           	psect	cstackCOMRAM
  1326  000001                     __pcstackCOMRAM:
  1327                           	opt stack 0
  1328  000001                     ??_chkisr:
  1329  000001                     
  1330                           ; 0 bytes @ 0x0
  1331  000001                     	ds	14
  1332  00000F                     ?_strlen:
  1333                           	opt stack 0
  1334  00000F                     ?_get_full_ADC:
  1335                           	opt stack 0
  1336  00000F                     ?___awmod:
  1337                           	opt stack 0
  1338  00000F                     ?___ftpack:
  1339                           	opt stack 0
  1340  00000F                     ?___ftneg:
  1341                           	opt stack 0
  1342  00000F                     ?__tdiv_to_l_:
  1343                           	opt stack 0
  1344  00000F                     ?__div_to_l_:
  1345                           	opt stack 0
  1346  00000F                     ?___lldiv:
  1347                           	opt stack 0
  1348  00000F                     ?___llmod:
  1349                           	opt stack 0
  1350  00000F                     spiwrite@x:
  1351                           	opt stack 0
  1352  00000F                     putch@c:
  1353                           	opt stack 0
  1354  00000F                     Select_ADC_Channel@channel:
  1355                           	opt stack 0
  1356  00000F                     OpenUSART@spbrg:
  1357                           	opt stack 0
  1358  00000F                     ___awmod@dividend:
  1359                           	opt stack 0
  1360  00000F                     strcpy@to:
  1361                           	opt stack 0
  1362  00000F                     strlen@s:
  1363                           	opt stack 0
  1364  00000F                     __div_to_l_@f1:
  1365                           	opt stack 0
  1366  00000F                     ___ftpack@arg:
  1367                           	opt stack 0
  1368  00000F                     __tdiv_to_l_@f1:
  1369                           	opt stack 0
  1370  00000F                     ___ftge@ff1:
  1371                           	opt stack 0
  1372  00000F                     ___ftneg@f1:
  1373                           	opt stack 0
  1374  00000F                     ___lldiv@dividend:
  1375                           	opt stack 0
  1376  00000F                     ___llmod@dividend:
  1377                           	opt stack 0
  1378                           
  1379                           ; 4 bytes @ 0xE
  1380  00000F                     	ds	1
  1381  000010                     spiwrite@spidata:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0xF
  1385  000010                     	ds	1
  1386  000011                     ??_strlen:
  1387  000011                     ??_get_full_ADC:
  1388  000011                     write_command@cmd_:
  1389                           	opt stack 0
  1390  000011                     write_data@data_:
  1391                           	opt stack 0
  1392  000011                     OpenUSART@config:
  1393                           	opt stack 0
  1394  000011                     ___awmod@divisor:
  1395                           	opt stack 0
  1396  000011                     strcpy@from:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x10
  1400  000011                     	ds	1
  1401  000012                     setAddrWindow@y0:
  1402                           	opt stack 0
  1403  000012                     ___ftpack@exp:
  1404                           	opt stack 0
  1405  000012                     __div_to_l_@f2:
  1406                           	opt stack 0
  1407  000012                     __tdiv_to_l_@f2:
  1408                           	opt stack 0
  1409  000012                     ___ftge@ff2:
  1410                           	opt stack 0
  1411                           
  1412                           ; 3 bytes @ 0x11
  1413  000012                     	ds	1
  1414  000013                     setAddrWindow@x1:
  1415                           	opt stack 0
  1416  000013                     ___awmod@counter:
  1417                           	opt stack 0
  1418  000013                     ___ftpack@sign:
  1419                           	opt stack 0
  1420  000013                     get_full_ADC@result:
  1421                           	opt stack 0
  1422  000013                     strcpy@cp:
  1423                           	opt stack 0
  1424  000013                     strlen@cp:
  1425                           	opt stack 0
  1426  000013                     ___lldiv@divisor:
  1427                           	opt stack 0
  1428  000013                     ___llmod@divisor:
  1429                           	opt stack 0
  1430                           
  1431                           ; 4 bytes @ 0x12
  1432  000013                     	ds	1
  1433  000014                     ??___ftpack:
  1434  000014                     setAddrWindow@y1:
  1435                           	opt stack 0
  1436  000014                     ___awmod@sign:
  1437                           	opt stack 0
  1438                           
  1439                           ; 1 bytes @ 0x13
  1440  000014                     	ds	1
  1441  000015                     ??__tdiv_to_l_:
  1442  000015                     ??___ftge:
  1443  000015                     ?___awdiv:
  1444                           	opt stack 0
  1445  000015                     setAddrWindow@x0:
  1446                           	opt stack 0
  1447  000015                     ___awdiv@dividend:
  1448                           	opt stack 0
  1449  000015                     __div_to_l_@quot:
  1450                           	opt stack 0
  1451                           
  1452                           ; 4 bytes @ 0x14
  1453  000015                     	ds	1
  1454  000016                     drawPixel@y:
  1455                           	opt stack 0
  1456  000016                     drawFastVLine@y:
  1457                           	opt stack 0
  1458  000016                     fillRectangle@y:
  1459                           	opt stack 0
  1460  000016                     drawFastHLine@y:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x15
  1464  000016                     	ds	1
  1465  000017                     ?___lltoft:
  1466                           	opt stack 0
  1467  000017                     drawFastVLine@h:
  1468                           	opt stack 0
  1469  000017                     fillRectangle@w:
  1470                           	opt stack 0
  1471  000017                     drawFastHLine@w:
  1472                           	opt stack 0
  1473  000017                     ___llmod@counter:
  1474                           	opt stack 0
  1475  000017                     drawPixel@color:
  1476                           	opt stack 0
  1477  000017                     ___awdiv@divisor:
  1478                           	opt stack 0
  1479  000017                     ___lldiv@quotient:
  1480                           	opt stack 0
  1481  000017                     ___lltoft@c:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x16
  1485  000017                     	ds	1
  1486  000018                     fillRectangle@h:
  1487                           	opt stack 0
  1488  000018                     drawFastVLine@color:
  1489                           	opt stack 0
  1490  000018                     drawFastHLine@color:
  1491                           	opt stack 0
  1492  000018                     __tdiv_to_l_@quot:
  1493                           	opt stack 0
  1494                           
  1495                           ; 4 bytes @ 0x17
  1496  000018                     	ds	1
  1497  000019                     drawPixel@x:
  1498                           	opt stack 0
  1499  000019                     ___awdiv@counter:
  1500                           	opt stack 0
  1501  000019                     __div_to_l_@cntr:
  1502                           	opt stack 0
  1503  000019                     fillRectangle@color:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x18
  1507  000019                     	ds	1
  1508  00001A                     ??_drawFastVLine:
  1509  00001A                     ??_drawFastHLine:
  1510  00001A                     ___awdiv@sign:
  1511                           	opt stack 0
  1512  00001A                     __div_to_l_@exp1:
  1513                           	opt stack 0
  1514  00001A                     drawCircle@x0:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x19
  1518  00001A                     	ds	1
  1519  00001B                     ??_fillRectangle:
  1520  00001B                     ??___lltoft:
  1521  00001B                     ___lldiv@counter:
  1522                           	opt stack 0
  1523  00001B                     ___awdiv@quotient:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x1A
  1527  00001B                     	ds	1
  1528  00001C                     __tdiv_to_l_@cntr:
  1529                           	opt stack 0
  1530  00001C                     drawCircle@y0:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x1B
  1534  00001C                     	ds	1
  1535  00001D                     ?___wmul:
  1536                           	opt stack 0
  1537  00001D                     __tdiv_to_l_@exp1:
  1538                           	opt stack 0
  1539  00001D                     ___wmul@multiplier:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x1C
  1543  00001D                     	ds	1
  1544  00001E                     drawFastVLine@hi:
  1545                           	opt stack 0
  1546  00001E                     drawFastHLine@hi:
  1547                           	opt stack 0
  1548  00001E                     drawCircle@r:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x1D
  1552  00001E                     	ds	1
  1553  00001F                     drawFastVLine@lo:
  1554                           	opt stack 0
  1555  00001F                     fillRectangle@hi:
  1556                           	opt stack 0
  1557  00001F                     drawFastHLine@lo:
  1558                           	opt stack 0
  1559  00001F                     ___lltoft@exp:
  1560                           	opt stack 0
  1561  00001F                     ___wmul@multiplicand:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x1E
  1565  00001F                     	ds	1
  1566  000020                     drawFastVLine@x:
  1567                           	opt stack 0
  1568  000020                     fillRectangle@lo:
  1569                           	opt stack 0
  1570  000020                     drawFastHLine@x:
  1571                           	opt stack 0
  1572  000020                     drawCircle@color:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x1F
  1576  000020                     	ds	1
  1577  000021                     fillRect@y:
  1578                           	opt stack 0
  1579  000021                     fillRectangle@x:
  1580                           	opt stack 0
  1581  000021                     fillCircleHelper@x0:
  1582                           	opt stack 0
  1583  000021                     drawRect@x:
  1584                           	opt stack 0
  1585  000021                     ___wmul@product:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x20
  1589  000021                     	ds	1
  1590  000022                     ??_drawCircle:
  1591  000022                     fillRect@w:
  1592                           	opt stack 0
  1593  000022                     fillScreen@color:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x21
  1597  000022                     	ds	1
  1598  000023                     ?___awtoft:
  1599                           	opt stack 0
  1600  000023                     fillRect@h:
  1601                           	opt stack 0
  1602  000023                     delay_ms@ms:
  1603                           	opt stack 0
  1604  000023                     fillCircleHelper@y0:
  1605                           	opt stack 0
  1606  000023                     drawRect@y:
  1607                           	opt stack 0
  1608  000023                     ___awtoft@c:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x22
  1612  000023                     	ds	1
  1613  000024                     fillRect@color:
  1614                           	opt stack 0
  1615  000024                     drawCircle@ddF_x:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x23
  1619  000024                     	ds	1
  1620  000025                     ??_delay_ms:
  1621  000025                     fillCircleHelper@r:
  1622                           	opt stack 0
  1623  000025                     drawRect@w:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x24
  1627  000025                     	ds	1
  1628  000026                     ??_fillRect:
  1629  000026                     ___awtoft@sign:
  1630                           	opt stack 0
  1631  000026                     drawCircle@ddF_y:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x25
  1635  000026                     	ds	1
  1636  000027                     ?___ftdiv:
  1637                           	opt stack 0
  1638  000027                     ?___ftmul:
  1639                           	opt stack 0
  1640  000027                     delay_ms@count:
  1641                           	opt stack 0
  1642  000027                     fillCircleHelper@cornername:
  1643                           	opt stack 0
  1644  000027                     drawRect@h:
  1645                           	opt stack 0
  1646  000027                     ___ftdiv@f1:
  1647                           	opt stack 0
  1648  000027                     ___ftmul@f1:
  1649                           	opt stack 0
  1650                           
  1651                           ; 3 bytes @ 0x26
  1652  000027                     	ds	1
  1653  000028                     drawCircle@f:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x27
  1657  000028                     	ds	1
  1658  000029                     fillRect@x:
  1659                           	opt stack 0
  1660  000029                     fillCircleHelper@delta:
  1661                           	opt stack 0
  1662  000029                     drawRect@color:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x28
  1666  000029                     	ds	1
  1667  00002A                     fillRect@i:
  1668                           	opt stack 0
  1669  00002A                     drawCircle@x:
  1670                           	opt stack 0
  1671  00002A                     ___ftdiv@f2:
  1672                           	opt stack 0
  1673  00002A                     ___ftmul@f2:
  1674                           	opt stack 0
  1675                           
  1676                           ; 3 bytes @ 0x29
  1677  00002A                     	ds	1
  1678  00002B                     ??_drawRect:
  1679  00002B                     fillCircleHelper@color:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x2A
  1683  00002B                     	ds	1
  1684  00002C                     drawChar@y:
  1685                           	opt stack 0
  1686  00002C                     drawCircle@y:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x2B
  1690  00002C                     	ds	1
  1691  00002D                     ??___ftdiv:
  1692  00002D                     ??___ftmul:
  1693  00002D                     ??_fillCircleHelper:
  1694  00002D                     drawChar@c:
  1695                           	opt stack 0
  1696                           
  1697                           ; 1 bytes @ 0x2C
  1698  00002D                     	ds	1
  1699  00002E                     drawChar@color:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x2D
  1703  00002E                     	ds	1
  1704  00002F                     fillCircleHelper@ddF_x:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x2E
  1708  00002F                     	ds	1
  1709  000030                     ___ftdiv@cntr:
  1710                           	opt stack 0
  1711  000030                     ___ftmul@exp:
  1712                           	opt stack 0
  1713  000030                     drawChar@bg:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x2F
  1717  000030                     	ds	1
  1718  000031                     fillCircleHelper@ddF_y:
  1719                           	opt stack 0
  1720  000031                     ___ftdiv@f3:
  1721                           	opt stack 0
  1722  000031                     ___ftmul@f3_as_product:
  1723                           	opt stack 0
  1724                           
  1725                           ; 3 bytes @ 0x30
  1726  000031                     	ds	1
  1727  000032                     drawChar@size:
  1728                           	opt stack 0
  1729                           
  1730                           ; 1 bytes @ 0x31
  1731  000032                     	ds	1
  1732  000033                     drawChar@line:
  1733                           	opt stack 0
  1734  000033                     fillCircleHelper@f:
  1735                           	opt stack 0
  1736                           
  1737                           ; 2 bytes @ 0x32
  1738  000033                     	ds	1
  1739  000034                     drawChar@x:
  1740                           	opt stack 0
  1741  000034                     ___ftdiv@exp:
  1742                           	opt stack 0
  1743  000034                     ___ftmul@cntr:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0x33
  1747  000034                     	ds	1
  1748  000035                     drawChar@j:
  1749                           	opt stack 0
  1750  000035                     ___ftdiv@sign:
  1751                           	opt stack 0
  1752  000035                     ___ftmul@sign:
  1753                           	opt stack 0
  1754  000035                     fillCircleHelper@x:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x34
  1758  000035                     	ds	1
  1759  000036                     ?_fround:
  1760                           	opt stack 0
  1761  000036                     ?_scale:
  1762                           	opt stack 0
  1763  000036                     drawChar@i:
  1764                           	opt stack 0
  1765                           
  1766                           ; 1 bytes @ 0x35
  1767  000036                     	ds	1
  1768  000037                     drawtext@y:
  1769                           	opt stack 0
  1770  000037                     fillCircleHelper@y:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x36
  1774  000037                     	ds	1
  1775  000038                     drawtext@_text:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x37
  1779  000038                     	ds	1
  1780  000039                     fillCircle@x0:
  1781                           	opt stack 0
  1782  000039                     _fround$2522:
  1783                           	opt stack 0
  1784  000039                     _scale$2523:
  1785                           	opt stack 0
  1786                           
  1787                           ; 3 bytes @ 0x38
  1788  000039                     	ds	1
  1789  00003A                     drawtext@color:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x39
  1793  00003A                     	ds	1
  1794  00003B                     fillCircle@y0:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x3A
  1798  00003B                     	ds	1
  1799  00003C                     scale@scl:
  1800                           	opt stack 0
  1801  00003C                     drawtext@bg:
  1802                           	opt stack 0
  1803  00003C                     _fround$2521:
  1804                           	opt stack 0
  1805                           
  1806                           ; 3 bytes @ 0x3B
  1807  00003C                     	ds	1
  1808  00003D                     ?___fttol:
  1809                           	opt stack 0
  1810  00003D                     fillCircle@r:
  1811                           	opt stack 0
  1812  00003D                     ___fttol@f1:
  1813                           	opt stack 0
  1814                           
  1815                           ; 3 bytes @ 0x3C
  1816  00003D                     	ds	1
  1817  00003E                     drawtext@size:
  1818                           	opt stack 0
  1819                           
  1820                           ; 1 bytes @ 0x3D
  1821  00003E                     	ds	1
  1822  00003F                     ??_drawtext:
  1823  00003F                     fround@prec:
  1824                           	opt stack 0
  1825  00003F                     fillCircle@color:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x3E
  1829  00003F                     	ds	1
  1830  000040                     ?___ftadd:
  1831                           	opt stack 0
  1832  000040                     ___ftadd@f1:
  1833                           	opt stack 0
  1834                           
  1835                           ; 3 bytes @ 0x3F
  1836  000040                     	ds	1
  1837  000041                     ??___fttol:
  1838  000041                     drawtext@x:
  1839                           	opt stack 0
  1840  000041                     update_LCD_color@color:
  1841                           	opt stack 0
  1842                           
  1843                           ; 1 bytes @ 0x40
  1844  000041                     	ds	1
  1845  000042                     update_LCD_color@direction:
  1846                           	opt stack 0
  1847  000042                     drawtext@textsize:
  1848                           	opt stack 0
  1849                           
  1850                           ; 2 bytes @ 0x41
  1851  000042                     	ds	1
  1852  000043                     update_LCD_color@Circle_Y:
  1853                           	opt stack 0
  1854  000043                     ___ftadd@f2:
  1855                           	opt stack 0
  1856                           
  1857                           ; 3 bytes @ 0x42
  1858  000043                     	ds	1
  1859  000044                     Set_NS@color:
  1860                           	opt stack 0
  1861  000044                     Set_NSLT@color:
  1862                           	opt stack 0
  1863  000044                     Set_EW@color:
  1864                           	opt stack 0
  1865  000044                     Set_EWLT@color:
  1866                           	opt stack 0
  1867  000044                     drawtext@i:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x43
  1871  000044                     	ds	2
  1872  000046                     ??___ftadd:
  1873  000046                     drawtext@cursor_y:
  1874                           	opt stack 0
  1875  000046                     ___fttol@sign1:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x45
  1879  000046                     	ds	1
  1880  000047                     drawtext@cursor_x:
  1881                           	opt stack 0
  1882  000047                     ___fttol@lval:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x46
  1886  000047                     	ds	1
  1887  000048                     update_LCD_count@count:
  1888                           	opt stack 0
  1889  000048                     update_LCD_PED_Count@count:
  1890                           	opt stack 0
  1891                           
  1892                           ; 1 bytes @ 0x47
  1893  000048                     	ds	1
  1894  000049                     update_LCD_count@direction:
  1895                           	opt stack 0
  1896  000049                     update_LCD_PED_Count@direction:
  1897                           	opt stack 0
  1898  000049                     ___ftadd@sign:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0x48
  1902  000049                     	ds	1
  1903  00004A                     ___ftadd@exp2:
  1904                           	opt stack 0
  1905                           
  1906                           ; 1 bytes @ 0x49
  1907  00004A                     	ds	1
  1908  00004B                     ___ftadd@exp1:
  1909                           	opt stack 0
  1910  00004B                     ___fttol@exp1:
  1911                           	opt stack 0
  1912                           
  1913                           ; 1 bytes @ 0x4A
  1914  00004B                     	ds	1
  1915  00004C                     ?___ftsub:
  1916                           	opt stack 0
  1917  00004C                     ___ftsub@f1:
  1918                           	opt stack 0
  1919                           
  1920                           ; 3 bytes @ 0x4B
  1921  00004C                     	ds	3
  1922  00004F                     ___ftsub@f2:
  1923                           	opt stack 0
  1924                           
  1925                           ; 3 bytes @ 0x4E
  1926  00004F                     	ds	3
  1927  000052                     ?_printf:
  1928                           	opt stack 0
  1929  000052                     printf@f:
  1930                           	opt stack 0
  1931                           
  1932                           ; 2 bytes @ 0x51
  1933  000052                     	ds	5
  1934  000057                     ??_printf:
  1935                           
  1936                           ; 0 bytes @ 0x56
  1937  000057                     	ds	6
  1938  00005D                     update_LCD_misc@nStep:
  1939                           	opt stack 0
  1940                           
  1941                           ; 2 bytes @ 0x5C
  1942  00005D                     	ds	2
  1943  00005F                     tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           postdec1	equ	0xFE5
  1950                           fsr1l	equ	0xFE1
  1951                           
  1952                           ; 0 bytes @ 0x5E
  1953 ;;
  1954 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1955 ;;
  1956 ;; *************** function _main *****************
  1957 ;; Defined at:
  1958 ;;		line 176 in file "Lab8.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  Pvoltage        3   29[BANK0 ] float 
  1963 ;;  pvoltage_mv     3   26[BANK0 ] float 
  1964 ;;  finalVoltage    2   34[BANK0 ] int 
  1965 ;;  num_step        2   32[BANK0 ] int 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;Total ram usage:       10 bytes
  1980 ;; Hardware stack levels required when called:   13
  1981 ;; This function calls:
  1982 ;;		_Day_Mode
  1983 ;;		_Do_Flashing
  1984 ;;		_Do_Init
  1985 ;;		_Initialize_Screen
  1986 ;;		_Night_Mode
  1987 ;;		_Select_ADC_Channel
  1988 ;;		___awtoft
  1989 ;;		___ftmul
  1990 ;;		___fttol
  1991 ;;		_get_full_ADC
  1992 ;; This function is called by:
  1993 ;;		Startup code after reset
  1994 ;; This function uses a non-reentrant model
  1995 ;;
  1996                           
  1997                           	psect	text0
  1998  002C5C                     __ptext0:
  1999                           	opt stack 0
  2000  002C5C                     _main:
  2001                           	opt stack 18
  2002                           
  2003                           ;Lab8.c: 178: Do_Init();
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;incstack = 0
  2007  002C5C  ECCA  F01C         	call	_Do_Init	;wreg free
  2008                           
  2009                           ;Lab8.c: 180: Initialize_Screen();
  2010  002C60  EC0E  F000         	call	_Initialize_Screen	;wreg free
  2011  002C64  D000               	goto	l7512
  2012  002C66                     l7512:
  2013                           
  2014                           ;Lab8.c: 182: Select_ADC_Channel(0);
  2015  002C66  0E00               	movlw	0
  2016  002C68  EC94  F01D         	call	_Select_ADC_Channel
  2017                           
  2018                           ;Lab8.c: 183: int num_step = get_full_ADC();
  2019  002C6C  ECF2  F01C         	call	_get_full_ADC	;wreg free
  2020  002C70  C00F  F0F8         	movff	?_get_full_ADC,main@num_step
  2021  002C74  C010  F0F9         	movff	?_get_full_ADC+1,main@num_step+1
  2022                           
  2023                           ;Lab8.c: 184: float pvoltage_mv = num_step*4.0;
  2024  002C78  C0F8  F023         	movff	main@num_step,___awtoft@c
  2025  002C7C  C0F9  F024         	movff	main@num_step+1,___awtoft@c+1
  2026  002C80  EC35  F01C         	call	___awtoft	;wreg free
  2027  002C84  C023  F027         	movff	?___awtoft,___ftmul@f1
  2028  002C88  C024  F028         	movff	?___awtoft+1,___ftmul@f1+1
  2029  002C8C  C025  F029         	movff	?___awtoft+2,___ftmul@f1+2
  2030  002C90  0E00               	movlw	0
  2031  002C92  6E2A               	movwf	___ftmul@f2,c
  2032  002C94  0E80               	movlw	128
  2033  002C96  6E2B               	movwf	___ftmul@f2+1,c
  2034  002C98  0E40               	movlw	64
  2035  002C9A  6E2C               	movwf	___ftmul@f2+2,c
  2036  002C9C  EC44  F012         	call	___ftmul	;wreg free
  2037  002CA0  C027  F0F2         	movff	?___ftmul,main@pvoltage_mv
  2038  002CA4  C028  F0F3         	movff	?___ftmul+1,main@pvoltage_mv+1
  2039  002CA8  C029  F0F4         	movff	?___ftmul+2,main@pvoltage_mv+2
  2040                           
  2041                           ;Lab8.c: 185: float Pvoltage = pvoltage_mv;
  2042  002CAC  C0F2  F0F5         	movff	main@pvoltage_mv,main@Pvoltage
  2043  002CB0  C0F3  F0F6         	movff	main@pvoltage_mv+1,main@Pvoltage+1
  2044  002CB4  C0F4  F0F7         	movff	main@pvoltage_mv+2,main@Pvoltage+2
  2045                           
  2046                           ;Lab8.c: 186: int finalVoltage = (int)Pvoltage;
  2047  002CB8  C0F5  F03D         	movff	main@Pvoltage,___fttol@f1
  2048  002CBC  C0F6  F03E         	movff	main@Pvoltage+1,___fttol@f1+1
  2049  002CC0  C0F7  F03F         	movff	main@Pvoltage+2,___fttol@f1+2
  2050  002CC4  EC39  F013         	call	___fttol	;wreg free
  2051  002CC8  C03D  F0FA         	movff	?___fttol,main@finalVoltage
  2052  002CCC  C03E  F0FB         	movff	?___fttol+1,main@finalVoltage+1
  2053                           
  2054                           ;Lab8.c: 188: if(finalVoltage < 2250){
  2055  002CD0  0100               	movlb	0	; () banked
  2056  002CD2  BFFB               	btfsc	(main@finalVoltage+1)& (0+255),7,b
  2057  002CD4  D008               	goto	l7524
  2058  002CD6  0ECA               	movlw	202
  2059  002CD8  0100               	movlb	0	; () banked
  2060  002CDA  5DFA               	subwf	main@finalVoltage& (0+255),w,b
  2061  002CDC  0E08               	movlw	8
  2062  002CDE  0100               	movlb	0	; () banked
  2063  002CE0  59FB               	subwfb	(main@finalVoltage+1)& (0+255),w,b
  2064  002CE2  B0D8               	btfsc	status,0,c
  2065  002CE4  D009               	goto	l395
  2066  002CE6                     l7524:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;Lab8.c: 189: PORTBbits.RB7 = 1;
  2070  002CE6  8E81               	bsf	3969,7,c	;volatile
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;Lab8.c: 190: MODE = 1;
  2074  002CE8  0E00               	movlw	0
  2075  002CEA  0100               	movlb	0	; () banked
  2076  002CEC  6F8A               	movwf	(_MODE+1)& (0+255),b
  2077  002CEE  0E01               	movlw	1
  2078  002CF0  6F89               	movwf	_MODE& (0+255),b
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;Lab8.c: 191: Day_Mode();
  2082  002CF2  ECFA  F014         	call	_Day_Mode	;wreg free
  2083                           
  2084                           ;Lab8.c: 192: }else{
  2085  002CF6  D009               	goto	l7534
  2086  002CF8                     l395:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;Lab8.c: 193: PORTBbits.RB7 = 0;
  2090  002CF8  9E81               	bcf	3969,7,c	;volatile
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;Lab8.c: 194: MODE = 0;
  2094  002CFA  0E00               	movlw	0
  2095  002CFC  0100               	movlb	0	; () banked
  2096  002CFE  6F8A               	movwf	(_MODE+1)& (0+255),b
  2097  002D00  0E00               	movlw	0
  2098  002D02  6F89               	movwf	_MODE& (0+255),b
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;Lab8.c: 196: Night_Mode();
  2102  002D04  EC8F  F016         	call	_Night_Mode	;wreg free
  2103  002D08  D000               	goto	l7534
  2104  002D0A                     l7534:
  2105                           
  2106                           ;Lab8.c: 197: }
  2107                           ;Lab8.c: 198: if(FLASHING_REQUEST==1)
  2108  002D0A  0464               	decf	_FLASHING_REQUEST,w,c
  2109  002D0C  A4D8               	btfss	status,2,c
  2110  002D0E  D7AB               	goto	l7512
  2111                           
  2112                           ;Lab8.c: 199: {
  2113                           ;Lab8.c: 200: FLASHING_REQUEST=0;
  2114  002D10  0E00               	movlw	0
  2115  002D12  6E64               	movwf	_FLASHING_REQUEST,c
  2116                           
  2117                           ;Lab8.c: 201: Do_Flashing();
  2118  002D14  EC2E  F01A         	call	_Do_Flashing	;wreg free
  2119  002D18  D7A6               	goto	l7512
  2120  002D1A  EF0C  F000         	goto	start
  2121  002D1E                     __end_of_main:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           postinc0	equ	0xFEE
  2128                           wreg	equ	0xFE8
  2129                           postdec1	equ	0xFE5
  2130                           fsr1l	equ	0xFE1
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _Select_ADC_Channel *****************
  2134 ;; Defined at:
  2135 ;;		line 275 in file "Lab8.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  channel         1    wreg     unsigned char 
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;  channel         1   14[COMRAM] unsigned char 
  2140 ;; Return value:  Size  Location     Type
  2141 ;;		None               void
  2142 ;; Registers used:
  2143 ;;		wreg, status,2, status,0, prodl, prodh
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2153 ;;Total ram usage:        1 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; Hardware stack levels required when called:    2
  2156 ;; This function calls:
  2157 ;;		Nothing
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text1
  2164  003B28                     __ptext1:
  2165                           	opt stack 0
  2166  003B28                     _Select_ADC_Channel:
  2167                           	opt stack 28
  2168                           
  2169                           ;incstack = 0
  2170                           ;Select_ADC_Channel@channel stored from wreg
  2171  003B28  6E0F               	movwf	Select_ADC_Channel@channel,c
  2172                           
  2173                           ;Lab8.c: 277: ADCON0 = channel * 4 + 1;
  2174  003B2A  500F               	movf	Select_ADC_Channel@channel,w,c
  2175  003B2C  0D04               	mullw	4
  2176  003B2E  28F3               	incf	prodl,w,c
  2177  003B30  6EC2               	movwf	4034,c	;volatile
  2178  003B32  0012               	return		;funcret
  2179  003B34                     __end_of_Select_ADC_Channel:
  2180                           	opt stack 0
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           prodl	equ	0xFF3
  2186                           postinc0	equ	0xFEE
  2187                           wreg	equ	0xFE8
  2188                           postdec1	equ	0xFE5
  2189                           fsr1l	equ	0xFE1
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _Night_Mode *****************
  2193 ;; Defined at:
  2194 ;;		line 432 in file "Lab8.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;		None
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;		None
  2199 ;; Return value:  Size  Location     Type
  2200 ;;		None               void
  2201 ;; Registers used:
  2202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;Total ram usage:        0 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:   12
  2215 ;; This function calls:
  2216 ;;		_Set_EW
  2217 ;;		_Set_EWLT
  2218 ;;		_Set_NS
  2219 ;;		_Set_NSLT
  2220 ;;		_Wait_N_Seconds
  2221 ;; This function is called by:
  2222 ;;		_main
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text2
  2227  002D1E                     __ptext2:
  2228                           	opt stack 0
  2229  002D1E                     _Night_Mode:
  2230                           	opt stack 18
  2231                           
  2232                           ;Lab8.c: 433: MODE = 0;
  2233                           
  2234                           ;incstack = 0
  2235  002D1E  0E00               	movlw	0
  2236  002D20  0100               	movlb	0	; () banked
  2237  002D22  6F8A               	movwf	(_MODE+1)& (0+255),b
  2238  002D24  0E00               	movlw	0
  2239  002D26  6F89               	movwf	_MODE& (0+255),b
  2240                           
  2241                           ;Lab8.c: 434: NSPED_SW =0;
  2242  002D28  0E00               	movlw	0
  2243  002D2A  6E65               	movwf	_NSPED_SW,c
  2244                           
  2245                           ;Lab8.c: 435: EWPED_SW =0;
  2246  002D2C  0E00               	movlw	0
  2247  002D2E  6E62               	movwf	_EWPED_SW,c
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;Lab8.c: 436: PORTBbits.RB7 = 0;
  2251  002D30  9E81               	bcf	3969,7,c	;volatile
  2252                           
  2253                           ;Lab8.c: 437: Act_Mode_Txt[0] = 'N';
  2254  002D32  0E4E               	movlw	78
  2255  002D34  0100               	movlb	0	; () banked
  2256  002D36  6FC8               	movwf	_Act_Mode_Txt& (0+255),b
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;Lab8.c: 438: Set_NSLT(1);
  2260  002D38  0E01               	movlw	1
  2261  002D3A  EC4D  F01B         	call	_Set_NSLT
  2262                           
  2263                           ;Lab8.c: 439: Set_EW(1);
  2264  002D3E  0E01               	movlw	1
  2265  002D40  ECB3  F01B         	call	_Set_EW
  2266                           
  2267                           ;Lab8.c: 440: Set_EWLT(1);
  2268  002D44  0E01               	movlw	1
  2269  002D46  EC91  F01B         	call	_Set_EWLT
  2270                           
  2271                           ;Lab8.c: 441: Set_NS(2);
  2272  002D4A  0E02               	movlw	2
  2273  002D4C  EC6F  F01B         	call	_Set_NS
  2274                           
  2275                           ;Lab8.c: 442: Wait_N_Seconds(8);
  2276  002D50  0E08               	movlw	8
  2277  002D52  EC53  F01C         	call	_Wait_N_Seconds
  2278                           
  2279                           ;Lab8.c: 443: Set_NS(3);
  2280  002D56  0E03               	movlw	3
  2281  002D58  EC6F  F01B         	call	_Set_NS
  2282                           
  2283                           ;Lab8.c: 444: Wait_N_Seconds(3);
  2284  002D5C  0E03               	movlw	3
  2285  002D5E  EC53  F01C         	call	_Wait_N_Seconds
  2286                           
  2287                           ;Lab8.c: 445: Set_NS(1);
  2288  002D62  0E01               	movlw	1
  2289  002D64  EC6F  F01B         	call	_Set_NS
  2290                           
  2291                           ;Lab8.c: 446: if(PORTAbits.RA2){
  2292  002D68  A480               	btfss	3968,2,c	;volatile
  2293  002D6A  D010               	goto	l7228
  2294                           
  2295                           ;Lab8.c: 447: Set_EWLT(2);
  2296  002D6C  0E02               	movlw	2
  2297  002D6E  EC91  F01B         	call	_Set_EWLT
  2298                           
  2299                           ;Lab8.c: 448: Wait_N_Seconds(6);
  2300  002D72  0E06               	movlw	6
  2301  002D74  EC53  F01C         	call	_Wait_N_Seconds
  2302                           
  2303                           ;Lab8.c: 449: Set_EWLT(3);
  2304  002D78  0E03               	movlw	3
  2305  002D7A  EC91  F01B         	call	_Set_EWLT
  2306                           
  2307                           ;Lab8.c: 450: Wait_N_Seconds(3);
  2308  002D7E  0E03               	movlw	3
  2309  002D80  EC53  F01C         	call	_Wait_N_Seconds
  2310                           
  2311                           ;Lab8.c: 451: Set_EWLT(1);
  2312  002D84  0E01               	movlw	1
  2313  002D86  EC91  F01B         	call	_Set_EWLT
  2314                           
  2315                           ;Lab8.c: 452: }else{
  2316  002D8A  D010               	goto	l7236
  2317  002D8C                     l7228:
  2318                           
  2319                           ;Lab8.c: 453: Set_EW(2);
  2320  002D8C  0E02               	movlw	2
  2321  002D8E  ECB3  F01B         	call	_Set_EW
  2322                           
  2323                           ;Lab8.c: 454: Wait_N_Seconds(6);
  2324  002D92  0E06               	movlw	6
  2325  002D94  EC53  F01C         	call	_Wait_N_Seconds
  2326                           
  2327                           ;Lab8.c: 455: Set_EW(3);
  2328  002D98  0E03               	movlw	3
  2329  002D9A  ECB3  F01B         	call	_Set_EW
  2330                           
  2331                           ;Lab8.c: 456: Wait_N_Seconds(3);
  2332  002D9E  0E03               	movlw	3
  2333  002DA0  EC53  F01C         	call	_Wait_N_Seconds
  2334                           
  2335                           ;Lab8.c: 457: Set_EW(1);
  2336  002DA4  0E01               	movlw	1
  2337  002DA6  ECB3  F01B         	call	_Set_EW
  2338  002DAA  D000               	goto	l7236
  2339  002DAC                     l7236:
  2340                           
  2341                           ;Lab8.c: 458: }
  2342                           ;Lab8.c: 459: if(PORTAbits.RA1){
  2343  002DAC  A280               	btfss	3968,1,c	;volatile
  2344  002DAE  D010               	goto	l7246
  2345                           
  2346                           ;Lab8.c: 460: Set_NSLT(2);
  2347  002DB0  0E02               	movlw	2
  2348  002DB2  EC4D  F01B         	call	_Set_NSLT
  2349                           
  2350                           ;Lab8.c: 461: Wait_N_Seconds(8);
  2351  002DB6  0E08               	movlw	8
  2352  002DB8  EC53  F01C         	call	_Wait_N_Seconds
  2353                           
  2354                           ;Lab8.c: 462: Set_NSLT(3);
  2355  002DBC  0E03               	movlw	3
  2356  002DBE  EC4D  F01B         	call	_Set_NSLT
  2357                           
  2358                           ;Lab8.c: 463: Wait_N_Seconds(3);
  2359  002DC2  0E03               	movlw	3
  2360  002DC4  EC53  F01C         	call	_Wait_N_Seconds
  2361                           
  2362                           ;Lab8.c: 464: Set_NSLT(1);
  2363  002DC8  0E01               	movlw	1
  2364  002DCA  EC4D  F01B         	call	_Set_NSLT
  2365                           
  2366                           ;Lab8.c: 465: }else{
  2367  002DCE  D004               	goto	l534
  2368  002DD0                     l7246:
  2369                           
  2370                           ;Lab8.c: 466: Set_NSLT(1);
  2371  002DD0  0E01               	movlw	1
  2372  002DD2  EC4D  F01B         	call	_Set_NSLT
  2373  002DD6  D000               	goto	l534
  2374  002DD8                     l534:
  2375  002DD8  0012               	return		;funcret
  2376  002DDA                     __end_of_Night_Mode:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           prodl	equ	0xFF3
  2383                           postinc0	equ	0xFEE
  2384                           wreg	equ	0xFE8
  2385                           postdec1	equ	0xFE5
  2386                           fsr1l	equ	0xFE1
  2387                           status	equ	0xFD8
  2388                           
  2389 ;; *************** function _Initialize_Screen *****************
  2390 ;; Defined at:
  2391 ;;		line 565 in file "Lab8.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;		None               void
  2398 ;; Registers used:
  2399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;Total ram usage:        0 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    9
  2412 ;; This function calls:
  2413 ;;		_LCD_Reset
  2414 ;;		_TFT_GreenTab_Initialize
  2415 ;;		_drawCircle
  2416 ;;		_drawRect
  2417 ;;		_drawtext
  2418 ;;		_fillCircle
  2419 ;;		_fillScreen
  2420 ;;		_strcpy
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text3
  2427  00001C                     __ptext3:
  2428                           	opt stack 0
  2429  00001C                     _Initialize_Screen:
  2430                           	opt stack 21
  2431                           
  2432                           ;Lab8.c: 567: LCD_Reset();
  2433                           
  2434                           ;incstack = 0
  2435  00001C  EC6B  F01D         	call	_LCD_Reset	;wreg free
  2436                           
  2437                           ;Lab8.c: 568: TFT_GreenTab_Initialize();
  2438  000020  ECB5  F01C         	call	_TFT_GreenTab_Initialize	;wreg free
  2439                           
  2440                           ;Lab8.c: 569: fillScreen(0x0000);
  2441  000024  0E00               	movlw	0
  2442  000026  6E23               	movwf	fillScreen@color+1,c
  2443  000028  0E00               	movlw	0
  2444  00002A  6E22               	movwf	fillScreen@color,c
  2445  00002C  EC17  F01D         	call	_fillScreen	;wreg free
  2446                           
  2447                           ;Lab8.c: 572: txt = buffer;
  2448  000030  0E8D               	movlw	low _buffer
  2449  000032  6E5F               	movwf	_txt,c
  2450  000034  0E00               	movlw	high _buffer
  2451  000036  6E60               	movwf	_txt+1,c
  2452                           
  2453                           ;Lab8.c: 573: strcpy(txt, "ECE3301L SPRING 22-S3");
  2454  000038  C05F  F00F         	movff	_txt,strcpy@to
  2455  00003C  C060  F010         	movff	_txt+1,strcpy@to+1
  2456  000040  0E86               	movlw	low STR_5
  2457  000042  6E11               	movwf	strcpy@from,c
  2458  000044  0EFF               	movlw	high STR_5
  2459  000046  6E12               	movwf	strcpy@from+1,c
  2460  000048  EC6E  F01C         	call	_strcpy	;wreg free
  2461                           
  2462                           ;Lab8.c: 574: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2463  00004C  0E02               	movlw	2
  2464  00004E  6E37               	movwf	drawtext@y,c
  2465  000050  C05F  F038         	movff	_txt,drawtext@_text
  2466  000054  C060  F039         	movff	_txt+1,drawtext@_text+1
  2467  000058  0EFF               	movlw	255
  2468  00005A  6E3B               	movwf	drawtext@color+1,c
  2469  00005C  683A               	setf	drawtext@color,c
  2470  00005E  0E00               	movlw	0
  2471  000060  6E3D               	movwf	drawtext@bg+1,c
  2472  000062  0E00               	movlw	0
  2473  000064  6E3C               	movwf	drawtext@bg,c
  2474  000066  0E01               	movlw	1
  2475  000068  6E3E               	movwf	drawtext@size,c
  2476  00006A  0E02               	movlw	2
  2477  00006C  EC1D  F014         	call	_drawtext
  2478                           
  2479                           ;Lab8.c: 577: strcpy(txt, "Mode:");
  2480  000070  C05F  F00F         	movff	_txt,strcpy@to
  2481  000074  C060  F010         	movff	_txt+1,strcpy@to+1
  2482  000078  0EE5               	movlw	low STR_6
  2483  00007A  6E11               	movwf	strcpy@from,c
  2484  00007C  0EFF               	movlw	high STR_6
  2485  00007E  6E12               	movwf	strcpy@from+1,c
  2486  000080  EC6E  F01C         	call	_strcpy	;wreg free
  2487                           
  2488                           ;Lab8.c: 578: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2489  000084  0E0A               	movlw	10
  2490  000086  6E37               	movwf	drawtext@y,c
  2491  000088  C05F  F038         	movff	_txt,drawtext@_text
  2492  00008C  C060  F039         	movff	_txt+1,drawtext@_text+1
  2493  000090  0EFF               	movlw	255
  2494  000092  6E3B               	movwf	drawtext@color+1,c
  2495  000094  683A               	setf	drawtext@color,c
  2496  000096  0E00               	movlw	0
  2497  000098  6E3D               	movwf	drawtext@bg+1,c
  2498  00009A  0E00               	movlw	0
  2499  00009C  6E3C               	movwf	drawtext@bg,c
  2500  00009E  0E01               	movlw	1
  2501  0000A0  6E3E               	movwf	drawtext@size,c
  2502  0000A2  0E02               	movlw	2
  2503  0000A4  EC1D  F014         	call	_drawtext
  2504                           
  2505                           ;Lab8.c: 579: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2506  0000A8  0E0A               	movlw	10
  2507  0000AA  6E37               	movwf	drawtext@y,c
  2508  0000AC  0EC8               	movlw	low _Act_Mode_Txt
  2509  0000AE  6E38               	movwf	drawtext@_text,c
  2510  0000B0  0E00               	movlw	high _Act_Mode_Txt
  2511  0000B2  6E39               	movwf	drawtext@_text+1,c
  2512  0000B4  0EFF               	movlw	255
  2513  0000B6  6E3B               	movwf	drawtext@color+1,c
  2514  0000B8  683A               	setf	drawtext@color,c
  2515  0000BA  0E00               	movlw	0
  2516  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2517  0000BE  0E00               	movlw	0
  2518  0000C0  6E3C               	movwf	drawtext@bg,c
  2519  0000C2  0E01               	movlw	1
  2520  0000C4  6E3E               	movwf	drawtext@size,c
  2521  0000C6  0E23               	movlw	35
  2522  0000C8  EC1D  F014         	call	_drawtext
  2523                           
  2524                           ;Lab8.c: 582: strcpy(txt, "FR:");
  2525  0000CC  C05F  F00F         	movff	_txt,strcpy@to
  2526  0000D0  C060  F010         	movff	_txt+1,strcpy@to+1
  2527  0000D4  0EEB               	movlw	low STR_7
  2528  0000D6  6E11               	movwf	strcpy@from,c
  2529  0000D8  0EFF               	movlw	high STR_7
  2530  0000DA  6E12               	movwf	strcpy@from+1,c
  2531  0000DC  EC6E  F01C         	call	_strcpy	;wreg free
  2532                           
  2533                           ;Lab8.c: 583: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2534  0000E0  0E0A               	movlw	10
  2535  0000E2  6E37               	movwf	drawtext@y,c
  2536  0000E4  C05F  F038         	movff	_txt,drawtext@_text
  2537  0000E8  C060  F039         	movff	_txt+1,drawtext@_text+1
  2538  0000EC  0EFF               	movlw	255
  2539  0000EE  6E3B               	movwf	drawtext@color+1,c
  2540  0000F0  683A               	setf	drawtext@color,c
  2541  0000F2  0E00               	movlw	0
  2542  0000F4  6E3D               	movwf	drawtext@bg+1,c
  2543  0000F6  0E00               	movlw	0
  2544  0000F8  6E3C               	movwf	drawtext@bg,c
  2545  0000FA  0E01               	movlw	1
  2546  0000FC  6E3E               	movwf	drawtext@size,c
  2547  0000FE  0E32               	movlw	50
  2548  000100  EC1D  F014         	call	_drawtext
  2549                           
  2550                           ;Lab8.c: 584: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2551  000104  0E0A               	movlw	10
  2552  000106  6E37               	movwf	drawtext@y,c
  2553  000108  0ECA               	movlw	low _FlashingR_Txt
  2554  00010A  6E38               	movwf	drawtext@_text,c
  2555  00010C  0E00               	movlw	high _FlashingR_Txt
  2556  00010E  6E39               	movwf	drawtext@_text+1,c
  2557  000110  0EFF               	movlw	255
  2558  000112  6E3B               	movwf	drawtext@color+1,c
  2559  000114  683A               	setf	drawtext@color,c
  2560  000116  0E00               	movlw	0
  2561  000118  6E3D               	movwf	drawtext@bg+1,c
  2562  00011A  0E00               	movlw	0
  2563  00011C  6E3C               	movwf	drawtext@bg,c
  2564  00011E  0E01               	movlw	1
  2565  000120  6E3E               	movwf	drawtext@size,c
  2566  000122  0E46               	movlw	70
  2567  000124  EC1D  F014         	call	_drawtext
  2568                           
  2569                           ;Lab8.c: 587: strcpy(txt, "FS:");
  2570  000128  C05F  F00F         	movff	_txt,strcpy@to
  2571  00012C  C060  F010         	movff	_txt+1,strcpy@to+1
  2572  000130  0EEF               	movlw	low STR_8
  2573  000132  6E11               	movwf	strcpy@from,c
  2574  000134  0EFF               	movlw	high STR_8
  2575  000136  6E12               	movwf	strcpy@from+1,c
  2576  000138  EC6E  F01C         	call	_strcpy	;wreg free
  2577                           
  2578                           ;Lab8.c: 588: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2579  00013C  0E0A               	movlw	10
  2580  00013E  6E37               	movwf	drawtext@y,c
  2581  000140  C05F  F038         	movff	_txt,drawtext@_text
  2582  000144  C060  F039         	movff	_txt+1,drawtext@_text+1
  2583  000148  0EFF               	movlw	255
  2584  00014A  6E3B               	movwf	drawtext@color+1,c
  2585  00014C  683A               	setf	drawtext@color,c
  2586  00014E  0E00               	movlw	0
  2587  000150  6E3D               	movwf	drawtext@bg+1,c
  2588  000152  0E00               	movlw	0
  2589  000154  6E3C               	movwf	drawtext@bg,c
  2590  000156  0E01               	movlw	1
  2591  000158  6E3E               	movwf	drawtext@size,c
  2592  00015A  0E50               	movlw	80
  2593  00015C  EC1D  F014         	call	_drawtext
  2594                           
  2595                           ;Lab8.c: 589: drawtext(100, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2596  000160  0E0A               	movlw	10
  2597  000162  6E37               	movwf	drawtext@y,c
  2598  000164  0ECA               	movlw	low _FlashingR_Txt
  2599  000166  6E38               	movwf	drawtext@_text,c
  2600  000168  0E00               	movlw	high _FlashingR_Txt
  2601  00016A  6E39               	movwf	drawtext@_text+1,c
  2602  00016C  0EFF               	movlw	255
  2603  00016E  6E3B               	movwf	drawtext@color+1,c
  2604  000170  683A               	setf	drawtext@color,c
  2605  000172  0E00               	movlw	0
  2606  000174  6E3D               	movwf	drawtext@bg+1,c
  2607  000176  0E00               	movlw	0
  2608  000178  6E3C               	movwf	drawtext@bg,c
  2609  00017A  0E01               	movlw	1
  2610  00017C  6E3E               	movwf	drawtext@size,c
  2611  00017E  0E64               	movlw	100
  2612  000180  EC1D  F014         	call	_drawtext
  2613                           
  2614                           ;Lab8.c: 592: strcpy(txt, "*");
  2615  000184  C05F  F00F         	movff	_txt,strcpy@to
  2616  000188  C060  F010         	movff	_txt+1,strcpy@to+1
  2617  00018C  0EFD               	movlw	low STR_1
  2618  00018E  6E11               	movwf	strcpy@from,c
  2619  000190  0EFF               	movlw	high STR_1
  2620  000192  6E12               	movwf	strcpy@from+1,c
  2621  000194  EC6E  F01C         	call	_strcpy	;wreg free
  2622                           
  2623                           ;Lab8.c: 593: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2624  000198  0E0A               	movlw	10
  2625  00019A  6E37               	movwf	drawtext@y,c
  2626  00019C  C05F  F038         	movff	_txt,drawtext@_text
  2627  0001A0  C060  F039         	movff	_txt+1,drawtext@_text+1
  2628  0001A4  0EFF               	movlw	255
  2629  0001A6  6E3B               	movwf	drawtext@color+1,c
  2630  0001A8  683A               	setf	drawtext@color,c
  2631  0001AA  0E00               	movlw	0
  2632  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2633  0001AE  0E00               	movlw	0
  2634  0001B0  6E3C               	movwf	drawtext@bg,c
  2635  0001B2  0E01               	movlw	1
  2636  0001B4  6E3E               	movwf	drawtext@size,c
  2637  0001B6  0E78               	movlw	120
  2638  0001B8  EC1D  F014         	call	_drawtext
  2639                           
  2640                           ;Lab8.c: 596: strcpy(txt, "NORTH/SOUTH");
  2641  0001BC  C05F  F00F         	movff	_txt,strcpy@to
  2642  0001C0  C060  F010         	movff	_txt+1,strcpy@to+1
  2643  0001C4  0EC1               	movlw	low STR_10
  2644  0001C6  6E11               	movwf	strcpy@from,c
  2645  0001C8  0EFF               	movlw	high STR_10
  2646  0001CA  6E12               	movwf	strcpy@from+1,c
  2647  0001CC  EC6E  F01C         	call	_strcpy	;wreg free
  2648                           
  2649                           ;Lab8.c: 597: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  2650  0001D0  0E14               	movlw	20
  2651  0001D2  6E37               	movwf	drawtext@y,c
  2652  0001D4  C05F  F038         	movff	_txt,drawtext@_text
  2653  0001D8  C060  F039         	movff	_txt+1,drawtext@_text+1
  2654  0001DC  0E00               	movlw	0
  2655  0001DE  6E3B               	movwf	drawtext@color+1,c
  2656  0001E0  0E1F               	movlw	31
  2657  0001E2  6E3A               	movwf	drawtext@color,c
  2658  0001E4  0E00               	movlw	0
  2659  0001E6  6E3D               	movwf	drawtext@bg+1,c
  2660  0001E8  0E00               	movlw	0
  2661  0001EA  6E3C               	movwf	drawtext@bg,c
  2662  0001EC  0E01               	movlw	1
  2663  0001EE  6E3E               	movwf	drawtext@size,c
  2664  0001F0  0E1E               	movlw	30
  2665  0001F2  EC1D  F014         	call	_drawtext
  2666                           
  2667                           ;Lab8.c: 598: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  2668  0001F6  0E00               	movlw	0
  2669  0001F8  6E22               	movwf	drawRect@x+1,c
  2670  0001FA  0E1E               	movlw	30
  2671  0001FC  6E21               	movwf	drawRect@x,c
  2672  0001FE  0E00               	movlw	0
  2673  000200  6E24               	movwf	drawRect@y+1,c
  2674  000202  0E1B               	movlw	27
  2675  000204  6E23               	movwf	drawRect@y,c
  2676  000206  0E00               	movlw	0
  2677  000208  6E26               	movwf	drawRect@w+1,c
  2678  00020A  0E3C               	movlw	60
  2679  00020C  6E25               	movwf	drawRect@w,c
  2680  00020E  0E00               	movlw	0
  2681  000210  6E28               	movwf	drawRect@h+1,c
  2682  000212  0E12               	movlw	18
  2683  000214  6E27               	movwf	drawRect@h,c
  2684  000216  0E00               	movlw	0
  2685  000218  6E2A               	movwf	drawRect@color+1,c
  2686  00021A  0E1F               	movlw	31
  2687  00021C  6E29               	movwf	drawRect@color,c
  2688  00021E  ECCB  F019         	call	_drawRect	;wreg free
  2689                           
  2690                           ;Lab8.c: 599: drawCircle(40, 20 + 15 , 7, 0xF800);
  2691  000222  0E00               	movlw	0
  2692  000224  6E1B               	movwf	drawCircle@x0+1,c
  2693  000226  0E28               	movlw	40
  2694  000228  6E1A               	movwf	drawCircle@x0,c
  2695  00022A  0E00               	movlw	0
  2696  00022C  6E1D               	movwf	drawCircle@y0+1,c
  2697  00022E  0E23               	movlw	35
  2698  000230  6E1C               	movwf	drawCircle@y0,c
  2699  000232  0E00               	movlw	0
  2700  000234  6E1F               	movwf	drawCircle@r+1,c
  2701  000236  0E07               	movlw	7
  2702  000238  6E1E               	movwf	drawCircle@r,c
  2703  00023A  0EF8               	movlw	248
  2704  00023C  6E21               	movwf	drawCircle@color+1,c
  2705  00023E  0E00               	movlw	0
  2706  000240  6E20               	movwf	drawCircle@color,c
  2707  000242  ECCA  F00D         	call	_drawCircle	;wreg free
  2708                           
  2709                           ;Lab8.c: 600: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  2710  000246  0E00               	movlw	0
  2711  000248  6E1B               	movwf	drawCircle@x0+1,c
  2712  00024A  0E3C               	movlw	60
  2713  00024C  6E1A               	movwf	drawCircle@x0,c
  2714  00024E  0E00               	movlw	0
  2715  000250  6E1D               	movwf	drawCircle@y0+1,c
  2716  000252  0E23               	movlw	35
  2717  000254  6E1C               	movwf	drawCircle@y0,c
  2718  000256  0E00               	movlw	0
  2719  000258  6E1F               	movwf	drawCircle@r+1,c
  2720  00025A  0E07               	movlw	7
  2721  00025C  6E1E               	movwf	drawCircle@r,c
  2722  00025E  0EFF               	movlw	255
  2723  000260  6E21               	movwf	drawCircle@color+1,c
  2724  000262  0EE0               	movlw	224
  2725  000264  6E20               	movwf	drawCircle@color,c
  2726  000266  ECCA  F00D         	call	_drawCircle	;wreg free
  2727                           
  2728                           ;Lab8.c: 601: fillCircle(80, 20 + 15 , 7, 0x07E0);
  2729  00026A  0E00               	movlw	0
  2730  00026C  6E3A               	movwf	fillCircle@x0+1,c
  2731  00026E  0E50               	movlw	80
  2732  000270  6E39               	movwf	fillCircle@x0,c
  2733  000272  0E00               	movlw	0
  2734  000274  6E3C               	movwf	fillCircle@y0+1,c
  2735  000276  0E23               	movlw	35
  2736  000278  6E3B               	movwf	fillCircle@y0,c
  2737  00027A  0E00               	movlw	0
  2738  00027C  6E3E               	movwf	fillCircle@r+1,c
  2739  00027E  0E07               	movlw	7
  2740  000280  6E3D               	movwf	fillCircle@r,c
  2741  000282  0E07               	movlw	7
  2742  000284  6E40               	movwf	fillCircle@color+1,c
  2743  000286  0EE0               	movlw	224
  2744  000288  6E3F               	movwf	fillCircle@color,c
  2745  00028A  ECAF  F01A         	call	_fillCircle	;wreg free
  2746                           
  2747                           ;Lab8.c: 602: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  2748  00028E  0E1E               	movlw	30
  2749  000290  6E37               	movwf	drawtext@y,c
  2750  000292  0EBF               	movlw	low _NS_Count
  2751  000294  6E38               	movwf	drawtext@_text,c
  2752  000296  0E00               	movlw	high _NS_Count
  2753  000298  6E39               	movwf	drawtext@_text+1,c
  2754  00029A  0E00               	movlw	0
  2755  00029C  6E3B               	movwf	drawtext@color+1,c
  2756  00029E  0E1F               	movlw	31
  2757  0002A0  6E3A               	movwf	drawtext@color,c
  2758  0002A2  0E00               	movlw	0
  2759  0002A4  6E3D               	movwf	drawtext@bg+1,c
  2760  0002A6  0E00               	movlw	0
  2761  0002A8  6E3C               	movwf	drawtext@bg,c
  2762  0002AA  0E02               	movlw	2
  2763  0002AC  6E3E               	movwf	drawtext@size,c
  2764  0002AE  0E64               	movlw	100
  2765  0002B0  EC1D  F014         	call	_drawtext
  2766                           
  2767                           ;Lab8.c: 605: strcpy(txt, "N/S LT");
  2768  0002B4  C05F  F00F         	movff	_txt,strcpy@to
  2769  0002B8  C060  F010         	movff	_txt+1,strcpy@to+1
  2770  0002BC  0ED7               	movlw	low STR_11
  2771  0002BE  6E11               	movwf	strcpy@from,c
  2772  0002C0  0EFF               	movlw	high STR_11
  2773  0002C2  6E12               	movwf	strcpy@from+1,c
  2774  0002C4  EC6E  F01C         	call	_strcpy	;wreg free
  2775                           
  2776                           ;Lab8.c: 606: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  2777  0002C8  0E32               	movlw	50
  2778  0002CA  6E37               	movwf	drawtext@y,c
  2779  0002CC  C05F  F038         	movff	_txt,drawtext@_text
  2780  0002D0  C060  F039         	movff	_txt+1,drawtext@_text+1
  2781  0002D4  0EF8               	movlw	248
  2782  0002D6  6E3B               	movwf	drawtext@color+1,c
  2783  0002D8  0E1F               	movlw	31
  2784  0002DA  6E3A               	movwf	drawtext@color,c
  2785  0002DC  0E00               	movlw	0
  2786  0002DE  6E3D               	movwf	drawtext@bg+1,c
  2787  0002E0  0E00               	movlw	0
  2788  0002E2  6E3C               	movwf	drawtext@bg,c
  2789  0002E4  0E01               	movlw	1
  2790  0002E6  6E3E               	movwf	drawtext@size,c
  2791  0002E8  0E1E               	movlw	30
  2792  0002EA  EC1D  F014         	call	_drawtext
  2793                           
  2794                           ;Lab8.c: 607: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  2795  0002EE  0E00               	movlw	0
  2796  0002F0  6E22               	movwf	drawRect@x+1,c
  2797  0002F2  0E1E               	movlw	30
  2798  0002F4  6E21               	movwf	drawRect@x,c
  2799  0002F6  0E00               	movlw	0
  2800  0002F8  6E24               	movwf	drawRect@y+1,c
  2801  0002FA  0E39               	movlw	57
  2802  0002FC  6E23               	movwf	drawRect@y,c
  2803  0002FE  0E00               	movlw	0
  2804  000300  6E26               	movwf	drawRect@w+1,c
  2805  000302  0E3C               	movlw	60
  2806  000304  6E25               	movwf	drawRect@w,c
  2807  000306  0E00               	movlw	0
  2808  000308  6E28               	movwf	drawRect@h+1,c
  2809  00030A  0E12               	movlw	18
  2810  00030C  6E27               	movwf	drawRect@h,c
  2811  00030E  0EF8               	movlw	248
  2812  000310  6E2A               	movwf	drawRect@color+1,c
  2813  000312  0E1F               	movlw	31
  2814  000314  6E29               	movwf	drawRect@color,c
  2815  000316  ECCB  F019         	call	_drawRect	;wreg free
  2816                           
  2817                           ;Lab8.c: 608: fillCircle(40, 50 + 15, 7, 0xF800);
  2818  00031A  0E00               	movlw	0
  2819  00031C  6E3A               	movwf	fillCircle@x0+1,c
  2820  00031E  0E28               	movlw	40
  2821  000320  6E39               	movwf	fillCircle@x0,c
  2822  000322  0E00               	movlw	0
  2823  000324  6E3C               	movwf	fillCircle@y0+1,c
  2824  000326  0E41               	movlw	65
  2825  000328  6E3B               	movwf	fillCircle@y0,c
  2826  00032A  0E00               	movlw	0
  2827  00032C  6E3E               	movwf	fillCircle@r+1,c
  2828  00032E  0E07               	movlw	7
  2829  000330  6E3D               	movwf	fillCircle@r,c
  2830  000332  0EF8               	movlw	248
  2831  000334  6E40               	movwf	fillCircle@color+1,c
  2832  000336  0E00               	movlw	0
  2833  000338  6E3F               	movwf	fillCircle@color,c
  2834  00033A  ECAF  F01A         	call	_fillCircle	;wreg free
  2835                           
  2836                           ;Lab8.c: 609: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2837  00033E  0E00               	movlw	0
  2838  000340  6E1B               	movwf	drawCircle@x0+1,c
  2839  000342  0E3C               	movlw	60
  2840  000344  6E1A               	movwf	drawCircle@x0,c
  2841  000346  0E00               	movlw	0
  2842  000348  6E1D               	movwf	drawCircle@y0+1,c
  2843  00034A  0E41               	movlw	65
  2844  00034C  6E1C               	movwf	drawCircle@y0,c
  2845  00034E  0E00               	movlw	0
  2846  000350  6E1F               	movwf	drawCircle@r+1,c
  2847  000352  0E07               	movlw	7
  2848  000354  6E1E               	movwf	drawCircle@r,c
  2849  000356  0EFF               	movlw	255
  2850  000358  6E21               	movwf	drawCircle@color+1,c
  2851  00035A  0EE0               	movlw	224
  2852  00035C  6E20               	movwf	drawCircle@color,c
  2853  00035E  ECCA  F00D         	call	_drawCircle	;wreg free
  2854                           
  2855                           ;Lab8.c: 610: drawCircle(80, 50 + 15, 7, 0x07E0);
  2856  000362  0E00               	movlw	0
  2857  000364  6E1B               	movwf	drawCircle@x0+1,c
  2858  000366  0E50               	movlw	80
  2859  000368  6E1A               	movwf	drawCircle@x0,c
  2860  00036A  0E00               	movlw	0
  2861  00036C  6E1D               	movwf	drawCircle@y0+1,c
  2862  00036E  0E41               	movlw	65
  2863  000370  6E1C               	movwf	drawCircle@y0,c
  2864  000372  0E00               	movlw	0
  2865  000374  6E1F               	movwf	drawCircle@r+1,c
  2866  000376  0E07               	movlw	7
  2867  000378  6E1E               	movwf	drawCircle@r,c
  2868  00037A  0E07               	movlw	7
  2869  00037C  6E21               	movwf	drawCircle@color+1,c
  2870  00037E  0EE0               	movlw	224
  2871  000380  6E20               	movwf	drawCircle@color,c
  2872  000382  ECCA  F00D         	call	_drawCircle	;wreg free
  2873                           
  2874                           ;Lab8.c: 611: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2875  000386  0E3C               	movlw	60
  2876  000388  6E37               	movwf	drawtext@y,c
  2877  00038A  0EBC               	movlw	low _NSLT_Count
  2878  00038C  6E38               	movwf	drawtext@_text,c
  2879  00038E  0E00               	movlw	high _NSLT_Count
  2880  000390  6E39               	movwf	drawtext@_text+1,c
  2881  000392  0EF8               	movlw	248
  2882  000394  6E3B               	movwf	drawtext@color+1,c
  2883  000396  0E1F               	movlw	31
  2884  000398  6E3A               	movwf	drawtext@color,c
  2885  00039A  0E00               	movlw	0
  2886  00039C  6E3D               	movwf	drawtext@bg+1,c
  2887  00039E  0E00               	movlw	0
  2888  0003A0  6E3C               	movwf	drawtext@bg,c
  2889  0003A2  0E02               	movlw	2
  2890  0003A4  6E3E               	movwf	drawtext@size,c
  2891  0003A6  0E64               	movlw	100
  2892  0003A8  EC1D  F014         	call	_drawtext
  2893                           
  2894                           ;Lab8.c: 614: strcpy(txt, "EAST/WEST");
  2895  0003AC  C05F  F00F         	movff	_txt,strcpy@to
  2896  0003B0  C060  F010         	movff	_txt+1,strcpy@to+1
  2897  0003B4  0ECD               	movlw	low STR_12
  2898  0003B6  6E11               	movwf	strcpy@from,c
  2899  0003B8  0EFF               	movlw	high STR_12
  2900  0003BA  6E12               	movwf	strcpy@from+1,c
  2901  0003BC  EC6E  F01C         	call	_strcpy	;wreg free
  2902                           
  2903                           ;Lab8.c: 615: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  2904  0003C0  0E50               	movlw	80
  2905  0003C2  6E37               	movwf	drawtext@y,c
  2906  0003C4  C05F  F038         	movff	_txt,drawtext@_text
  2907  0003C8  C060  F039         	movff	_txt+1,drawtext@_text+1
  2908  0003CC  0E07               	movlw	7
  2909  0003CE  6E3B               	movwf	drawtext@color+1,c
  2910  0003D0  683A               	setf	drawtext@color,c
  2911  0003D2  0E00               	movlw	0
  2912  0003D4  6E3D               	movwf	drawtext@bg+1,c
  2913  0003D6  0E00               	movlw	0
  2914  0003D8  6E3C               	movwf	drawtext@bg,c
  2915  0003DA  0E01               	movlw	1
  2916  0003DC  6E3E               	movwf	drawtext@size,c
  2917  0003DE  0E1E               	movlw	30
  2918  0003E0  EC1D  F014         	call	_drawtext
  2919                           
  2920                           ;Lab8.c: 616: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  2921  0003E4  0E00               	movlw	0
  2922  0003E6  6E22               	movwf	drawRect@x+1,c
  2923  0003E8  0E1E               	movlw	30
  2924  0003EA  6E21               	movwf	drawRect@x,c
  2925  0003EC  0E00               	movlw	0
  2926  0003EE  6E24               	movwf	drawRect@y+1,c
  2927  0003F0  0E57               	movlw	87
  2928  0003F2  6E23               	movwf	drawRect@y,c
  2929  0003F4  0E00               	movlw	0
  2930  0003F6  6E26               	movwf	drawRect@w+1,c
  2931  0003F8  0E3C               	movlw	60
  2932  0003FA  6E25               	movwf	drawRect@w,c
  2933  0003FC  0E00               	movlw	0
  2934  0003FE  6E28               	movwf	drawRect@h+1,c
  2935  000400  0E12               	movlw	18
  2936  000402  6E27               	movwf	drawRect@h,c
  2937  000404  0E07               	movlw	7
  2938  000406  6E2A               	movwf	drawRect@color+1,c
  2939  000408  6829               	setf	drawRect@color,c
  2940  00040A  ECCB  F019         	call	_drawRect	;wreg free
  2941                           
  2942                           ;Lab8.c: 617: fillCircle(40, 80 + 15, 7, 0xF800);
  2943  00040E  0E00               	movlw	0
  2944  000410  6E3A               	movwf	fillCircle@x0+1,c
  2945  000412  0E28               	movlw	40
  2946  000414  6E39               	movwf	fillCircle@x0,c
  2947  000416  0E00               	movlw	0
  2948  000418  6E3C               	movwf	fillCircle@y0+1,c
  2949  00041A  0E5F               	movlw	95
  2950  00041C  6E3B               	movwf	fillCircle@y0,c
  2951  00041E  0E00               	movlw	0
  2952  000420  6E3E               	movwf	fillCircle@r+1,c
  2953  000422  0E07               	movlw	7
  2954  000424  6E3D               	movwf	fillCircle@r,c
  2955  000426  0EF8               	movlw	248
  2956  000428  6E40               	movwf	fillCircle@color+1,c
  2957  00042A  0E00               	movlw	0
  2958  00042C  6E3F               	movwf	fillCircle@color,c
  2959  00042E  ECAF  F01A         	call	_fillCircle	;wreg free
  2960                           
  2961                           ;Lab8.c: 618: drawCircle(60, 80 + 15, 7, 0xFFE0);
  2962  000432  0E00               	movlw	0
  2963  000434  6E1B               	movwf	drawCircle@x0+1,c
  2964  000436  0E3C               	movlw	60
  2965  000438  6E1A               	movwf	drawCircle@x0,c
  2966  00043A  0E00               	movlw	0
  2967  00043C  6E1D               	movwf	drawCircle@y0+1,c
  2968  00043E  0E5F               	movlw	95
  2969  000440  6E1C               	movwf	drawCircle@y0,c
  2970  000442  0E00               	movlw	0
  2971  000444  6E1F               	movwf	drawCircle@r+1,c
  2972  000446  0E07               	movlw	7
  2973  000448  6E1E               	movwf	drawCircle@r,c
  2974  00044A  0EFF               	movlw	255
  2975  00044C  6E21               	movwf	drawCircle@color+1,c
  2976  00044E  0EE0               	movlw	224
  2977  000450  6E20               	movwf	drawCircle@color,c
  2978  000452  ECCA  F00D         	call	_drawCircle	;wreg free
  2979                           
  2980                           ;Lab8.c: 619: drawCircle(80, 80 + 15, 7, 0x07E0);
  2981  000456  0E00               	movlw	0
  2982  000458  6E1B               	movwf	drawCircle@x0+1,c
  2983  00045A  0E50               	movlw	80
  2984  00045C  6E1A               	movwf	drawCircle@x0,c
  2985  00045E  0E00               	movlw	0
  2986  000460  6E1D               	movwf	drawCircle@y0+1,c
  2987  000462  0E5F               	movlw	95
  2988  000464  6E1C               	movwf	drawCircle@y0,c
  2989  000466  0E00               	movlw	0
  2990  000468  6E1F               	movwf	drawCircle@r+1,c
  2991  00046A  0E07               	movlw	7
  2992  00046C  6E1E               	movwf	drawCircle@r,c
  2993  00046E  0E07               	movlw	7
  2994  000470  6E21               	movwf	drawCircle@color+1,c
  2995  000472  0EE0               	movlw	224
  2996  000474  6E20               	movwf	drawCircle@color,c
  2997  000476  ECCA  F00D         	call	_drawCircle	;wreg free
  2998                           
  2999                           ;Lab8.c: 620: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  3000  00047A  0E5A               	movlw	90
  3001  00047C  6E37               	movwf	drawtext@y,c
  3002  00047E  0EB9               	movlw	low _EW_Count
  3003  000480  6E38               	movwf	drawtext@_text,c
  3004  000482  0E00               	movlw	high _EW_Count
  3005  000484  6E39               	movwf	drawtext@_text+1,c
  3006  000486  0E07               	movlw	7
  3007  000488  6E3B               	movwf	drawtext@color+1,c
  3008  00048A  683A               	setf	drawtext@color,c
  3009  00048C  0E00               	movlw	0
  3010  00048E  6E3D               	movwf	drawtext@bg+1,c
  3011  000490  0E00               	movlw	0
  3012  000492  6E3C               	movwf	drawtext@bg,c
  3013  000494  0E02               	movlw	2
  3014  000496  6E3E               	movwf	drawtext@size,c
  3015  000498  0E64               	movlw	100
  3016  00049A  EC1D  F014         	call	_drawtext
  3017                           
  3018                           ;Lab8.c: 623: strcpy(txt, "E/W LT");
  3019  00049E  C05F  F00F         	movff	_txt,strcpy@to
  3020  0004A2  C060  F010         	movff	_txt+1,strcpy@to+1
  3021  0004A6  0EDE               	movlw	low STR_13
  3022  0004A8  6E11               	movwf	strcpy@from,c
  3023  0004AA  0EFF               	movlw	high STR_13
  3024  0004AC  6E12               	movwf	strcpy@from+1,c
  3025  0004AE  EC6E  F01C         	call	_strcpy	;wreg free
  3026                           
  3027                           ;Lab8.c: 624: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  3028  0004B2  0E6E               	movlw	110
  3029  0004B4  6E37               	movwf	drawtext@y,c
  3030  0004B6  C05F  F038         	movff	_txt,drawtext@_text
  3031  0004BA  C060  F039         	movff	_txt+1,drawtext@_text+1
  3032  0004BE  0EFF               	movlw	255
  3033  0004C0  6E3B               	movwf	drawtext@color+1,c
  3034  0004C2  683A               	setf	drawtext@color,c
  3035  0004C4  0E00               	movlw	0
  3036  0004C6  6E3D               	movwf	drawtext@bg+1,c
  3037  0004C8  0E00               	movlw	0
  3038  0004CA  6E3C               	movwf	drawtext@bg,c
  3039  0004CC  0E01               	movlw	1
  3040  0004CE  6E3E               	movwf	drawtext@size,c
  3041  0004D0  0E1E               	movlw	30
  3042  0004D2  EC1D  F014         	call	_drawtext
  3043                           
  3044                           ;Lab8.c: 625: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  3045  0004D6  0E00               	movlw	0
  3046  0004D8  6E22               	movwf	drawRect@x+1,c
  3047  0004DA  0E1E               	movlw	30
  3048  0004DC  6E21               	movwf	drawRect@x,c
  3049  0004DE  0E00               	movlw	0
  3050  0004E0  6E24               	movwf	drawRect@y+1,c
  3051  0004E2  0E75               	movlw	117
  3052  0004E4  6E23               	movwf	drawRect@y,c
  3053  0004E6  0E00               	movlw	0
  3054  0004E8  6E26               	movwf	drawRect@w+1,c
  3055  0004EA  0E3C               	movlw	60
  3056  0004EC  6E25               	movwf	drawRect@w,c
  3057  0004EE  0E00               	movlw	0
  3058  0004F0  6E28               	movwf	drawRect@h+1,c
  3059  0004F2  0E12               	movlw	18
  3060  0004F4  6E27               	movwf	drawRect@h,c
  3061  0004F6  0EFF               	movlw	255
  3062  0004F8  6E2A               	movwf	drawRect@color+1,c
  3063  0004FA  6829               	setf	drawRect@color,c
  3064  0004FC  ECCB  F019         	call	_drawRect	;wreg free
  3065                           
  3066                           ;Lab8.c: 626: fillCircle(40, 110 + 15, 7, 0xF800);
  3067  000500  0E00               	movlw	0
  3068  000502  6E3A               	movwf	fillCircle@x0+1,c
  3069  000504  0E28               	movlw	40
  3070  000506  6E39               	movwf	fillCircle@x0,c
  3071  000508  0E00               	movlw	0
  3072  00050A  6E3C               	movwf	fillCircle@y0+1,c
  3073  00050C  0E7D               	movlw	125
  3074  00050E  6E3B               	movwf	fillCircle@y0,c
  3075  000510  0E00               	movlw	0
  3076  000512  6E3E               	movwf	fillCircle@r+1,c
  3077  000514  0E07               	movlw	7
  3078  000516  6E3D               	movwf	fillCircle@r,c
  3079  000518  0EF8               	movlw	248
  3080  00051A  6E40               	movwf	fillCircle@color+1,c
  3081  00051C  0E00               	movlw	0
  3082  00051E  6E3F               	movwf	fillCircle@color,c
  3083  000520  ECAF  F01A         	call	_fillCircle	;wreg free
  3084                           
  3085                           ;Lab8.c: 627: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3086  000524  0E00               	movlw	0
  3087  000526  6E1B               	movwf	drawCircle@x0+1,c
  3088  000528  0E3C               	movlw	60
  3089  00052A  6E1A               	movwf	drawCircle@x0,c
  3090  00052C  0E00               	movlw	0
  3091  00052E  6E1D               	movwf	drawCircle@y0+1,c
  3092  000530  0E7D               	movlw	125
  3093  000532  6E1C               	movwf	drawCircle@y0,c
  3094  000534  0E00               	movlw	0
  3095  000536  6E1F               	movwf	drawCircle@r+1,c
  3096  000538  0E07               	movlw	7
  3097  00053A  6E1E               	movwf	drawCircle@r,c
  3098  00053C  0EFF               	movlw	255
  3099  00053E  6E21               	movwf	drawCircle@color+1,c
  3100  000540  0EE0               	movlw	224
  3101  000542  6E20               	movwf	drawCircle@color,c
  3102  000544  ECCA  F00D         	call	_drawCircle	;wreg free
  3103                           
  3104                           ;Lab8.c: 628: drawCircle(80, 110 + 15, 7, 0x07E0);
  3105  000548  0E00               	movlw	0
  3106  00054A  6E1B               	movwf	drawCircle@x0+1,c
  3107  00054C  0E50               	movlw	80
  3108  00054E  6E1A               	movwf	drawCircle@x0,c
  3109  000550  0E00               	movlw	0
  3110  000552  6E1D               	movwf	drawCircle@y0+1,c
  3111  000554  0E7D               	movlw	125
  3112  000556  6E1C               	movwf	drawCircle@y0,c
  3113  000558  0E00               	movlw	0
  3114  00055A  6E1F               	movwf	drawCircle@r+1,c
  3115  00055C  0E07               	movlw	7
  3116  00055E  6E1E               	movwf	drawCircle@r,c
  3117  000560  0E07               	movlw	7
  3118  000562  6E21               	movwf	drawCircle@color+1,c
  3119  000564  0EE0               	movlw	224
  3120  000566  6E20               	movwf	drawCircle@color,c
  3121  000568  ECCA  F00D         	call	_drawCircle	;wreg free
  3122                           
  3123                           ;Lab8.c: 629: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  3124  00056C  0E78               	movlw	120
  3125  00056E  6E37               	movwf	drawtext@y,c
  3126  000570  0EB6               	movlw	low _EWLT_Count
  3127  000572  6E38               	movwf	drawtext@_text,c
  3128  000574  0E00               	movlw	high _EWLT_Count
  3129  000576  6E39               	movwf	drawtext@_text+1,c
  3130  000578  0EFF               	movlw	255
  3131  00057A  6E3B               	movwf	drawtext@color+1,c
  3132  00057C  683A               	setf	drawtext@color,c
  3133  00057E  0E00               	movlw	0
  3134  000580  6E3D               	movwf	drawtext@bg+1,c
  3135  000582  0E00               	movlw	0
  3136  000584  6E3C               	movwf	drawtext@bg,c
  3137  000586  0E02               	movlw	2
  3138  000588  6E3E               	movwf	drawtext@size,c
  3139  00058A  0E64               	movlw	100
  3140  00058C  EC1D  F014         	call	_drawtext
  3141                           
  3142                           ;Lab8.c: 632: strcpy(txt, "PNS");
  3143  000590  C05F  F00F         	movff	_txt,strcpy@to
  3144  000594  C060  F010         	movff	_txt+1,strcpy@to+1
  3145  000598  0EF3               	movlw	low STR_14
  3146  00059A  6E11               	movwf	strcpy@from,c
  3147  00059C  0EFF               	movlw	high STR_14
  3148  00059E  6E12               	movwf	strcpy@from+1,c
  3149  0005A0  EC6E  F01C         	call	_strcpy	;wreg free
  3150                           
  3151                           ;Lab8.c: 633: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  3152  0005A4  0E14               	movlw	20
  3153  0005A6  6E37               	movwf	drawtext@y,c
  3154  0005A8  C05F  F038         	movff	_txt,drawtext@_text
  3155  0005AC  C060  F039         	movff	_txt+1,drawtext@_text+1
  3156  0005B0  0E00               	movlw	0
  3157  0005B2  6E3B               	movwf	drawtext@color+1,c
  3158  0005B4  0E1F               	movlw	31
  3159  0005B6  6E3A               	movwf	drawtext@color,c
  3160  0005B8  0E00               	movlw	0
  3161  0005BA  6E3D               	movwf	drawtext@bg+1,c
  3162  0005BC  0E00               	movlw	0
  3163  0005BE  6E3C               	movwf	drawtext@bg,c
  3164  0005C0  0E01               	movlw	1
  3165  0005C2  6E3E               	movwf	drawtext@size,c
  3166  0005C4  0E03               	movlw	3
  3167  0005C6  EC1D  F014         	call	_drawtext
  3168                           
  3169                           ;Lab8.c: 634: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  3170  0005CA  0E1E               	movlw	30
  3171  0005CC  6E37               	movwf	drawtext@y,c
  3172  0005CE  0EC5               	movlw	low _PED_NS_Count
  3173  0005D0  6E38               	movwf	drawtext@_text,c
  3174  0005D2  0E00               	movlw	high _PED_NS_Count
  3175  0005D4  6E39               	movwf	drawtext@_text+1,c
  3176  0005D6  0E00               	movlw	0
  3177  0005D8  6E3B               	movwf	drawtext@color+1,c
  3178  0005DA  0E1F               	movlw	31
  3179  0005DC  6E3A               	movwf	drawtext@color,c
  3180  0005DE  0E00               	movlw	0
  3181  0005E0  6E3D               	movwf	drawtext@bg+1,c
  3182  0005E2  0E00               	movlw	0
  3183  0005E4  6E3C               	movwf	drawtext@bg,c
  3184  0005E6  0E02               	movlw	2
  3185  0005E8  6E3E               	movwf	drawtext@size,c
  3186  0005EA  0E02               	movlw	2
  3187  0005EC  EC1D  F014         	call	_drawtext
  3188                           
  3189                           ;Lab8.c: 637: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  3190  0005F0  0E5A               	movlw	90
  3191  0005F2  6E37               	movwf	drawtext@y,c
  3192  0005F4  0EC2               	movlw	low _PED_EW_Count
  3193  0005F6  6E38               	movwf	drawtext@_text,c
  3194  0005F8  0E00               	movlw	high _PED_EW_Count
  3195  0005FA  6E39               	movwf	drawtext@_text+1,c
  3196  0005FC  0E07               	movlw	7
  3197  0005FE  6E3B               	movwf	drawtext@color+1,c
  3198  000600  683A               	setf	drawtext@color,c
  3199  000602  0E00               	movlw	0
  3200  000604  6E3D               	movwf	drawtext@bg+1,c
  3201  000606  0E00               	movlw	0
  3202  000608  6E3C               	movwf	drawtext@bg,c
  3203  00060A  0E02               	movlw	2
  3204  00060C  6E3E               	movwf	drawtext@size,c
  3205  00060E  0E02               	movlw	2
  3206  000610  EC1D  F014         	call	_drawtext
  3207                           
  3208                           ;Lab8.c: 638: strcpy(txt, "PEW");
  3209  000614  C05F  F00F         	movff	_txt,strcpy@to
  3210  000618  C060  F010         	movff	_txt+1,strcpy@to+1
  3211  00061C  0EF7               	movlw	low STR_15
  3212  00061E  6E11               	movwf	strcpy@from,c
  3213  000620  0EFF               	movlw	high STR_15
  3214  000622  6E12               	movwf	strcpy@from+1,c
  3215  000624  EC6E  F01C         	call	_strcpy	;wreg free
  3216                           
  3217                           ;Lab8.c: 639: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  3218  000628  0E50               	movlw	80
  3219  00062A  6E37               	movwf	drawtext@y,c
  3220  00062C  C05F  F038         	movff	_txt,drawtext@_text
  3221  000630  C060  F039         	movff	_txt+1,drawtext@_text+1
  3222  000634  0E07               	movlw	7
  3223  000636  6E3B               	movwf	drawtext@color+1,c
  3224  000638  683A               	setf	drawtext@color,c
  3225  00063A  0E00               	movlw	0
  3226  00063C  6E3D               	movwf	drawtext@bg+1,c
  3227  00063E  0E00               	movlw	0
  3228  000640  6E3C               	movwf	drawtext@bg,c
  3229  000642  0E01               	movlw	1
  3230  000644  6E3E               	movwf	drawtext@size,c
  3231  000646  0E03               	movlw	3
  3232  000648  EC1D  F014         	call	_drawtext
  3233                           
  3234                           ;Lab8.c: 642: strcpy(txt, "NSP NSLT EWP EWLT MR");
  3235  00064C  C05F  F00F         	movff	_txt,strcpy@to
  3236  000650  C060  F010         	movff	_txt+1,strcpy@to+1
  3237  000654  0E9C               	movlw	low STR_16
  3238  000656  6E11               	movwf	strcpy@from,c
  3239  000658  0EFF               	movlw	high STR_16
  3240  00065A  6E12               	movwf	strcpy@from+1,c
  3241  00065C  EC6E  F01C         	call	_strcpy	;wreg free
  3242                           
  3243                           ;Lab8.c: 643: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3244  000660  0E8C               	movlw	140
  3245  000662  6E37               	movwf	drawtext@y,c
  3246  000664  C05F  F038         	movff	_txt,drawtext@_text
  3247  000668  C060  F039         	movff	_txt+1,drawtext@_text+1
  3248  00066C  0EFF               	movlw	255
  3249  00066E  6E3B               	movwf	drawtext@color+1,c
  3250  000670  683A               	setf	drawtext@color,c
  3251  000672  0E00               	movlw	0
  3252  000674  6E3D               	movwf	drawtext@bg+1,c
  3253  000676  0E00               	movlw	0
  3254  000678  6E3C               	movwf	drawtext@bg,c
  3255  00067A  0E01               	movlw	1
  3256  00067C  6E3E               	movwf	drawtext@size,c
  3257  00067E  0E01               	movlw	1
  3258  000680  EC1D  F014         	call	_drawtext
  3259                           
  3260                           ;Lab8.c: 644: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3261  000684  0E95               	movlw	149
  3262  000686  6E37               	movwf	drawtext@y,c
  3263  000688  0ED6               	movlw	low _SW_NSPED_Txt
  3264  00068A  6E38               	movwf	drawtext@_text,c
  3265  00068C  0E00               	movlw	high _SW_NSPED_Txt
  3266  00068E  6E39               	movwf	drawtext@_text+1,c
  3267  000690  0EFF               	movlw	255
  3268  000692  6E3B               	movwf	drawtext@color+1,c
  3269  000694  683A               	setf	drawtext@color,c
  3270  000696  0E00               	movlw	0
  3271  000698  6E3D               	movwf	drawtext@bg+1,c
  3272  00069A  0E00               	movlw	0
  3273  00069C  6E3C               	movwf	drawtext@bg,c
  3274  00069E  0E01               	movlw	1
  3275  0006A0  6E3E               	movwf	drawtext@size,c
  3276  0006A2  0E06               	movlw	6
  3277  0006A4  EC1D  F014         	call	_drawtext
  3278                           
  3279                           ;Lab8.c: 645: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3280  0006A8  0E95               	movlw	149
  3281  0006AA  6E37               	movwf	drawtext@y,c
  3282  0006AC  0ED4               	movlw	low _SW_NSLT_Txt
  3283  0006AE  6E38               	movwf	drawtext@_text,c
  3284  0006B0  0E00               	movlw	high _SW_NSLT_Txt
  3285  0006B2  6E39               	movwf	drawtext@_text+1,c
  3286  0006B4  0EFF               	movlw	255
  3287  0006B6  6E3B               	movwf	drawtext@color+1,c
  3288  0006B8  683A               	setf	drawtext@color,c
  3289  0006BA  0E00               	movlw	0
  3290  0006BC  6E3D               	movwf	drawtext@bg+1,c
  3291  0006BE  0E00               	movlw	0
  3292  0006C0  6E3C               	movwf	drawtext@bg,c
  3293  0006C2  0E01               	movlw	1
  3294  0006C4  6E3E               	movwf	drawtext@size,c
  3295  0006C6  0E20               	movlw	32
  3296  0006C8  EC1D  F014         	call	_drawtext
  3297                           
  3298                           ;Lab8.c: 646: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3299  0006CC  0E95               	movlw	149
  3300  0006CE  6E37               	movwf	drawtext@y,c
  3301  0006D0  0ED0               	movlw	low _SW_EWPED_Txt
  3302  0006D2  6E38               	movwf	drawtext@_text,c
  3303  0006D4  0E00               	movlw	high _SW_EWPED_Txt
  3304  0006D6  6E39               	movwf	drawtext@_text+1,c
  3305  0006D8  0EFF               	movlw	255
  3306  0006DA  6E3B               	movwf	drawtext@color+1,c
  3307  0006DC  683A               	setf	drawtext@color,c
  3308  0006DE  0E00               	movlw	0
  3309  0006E0  6E3D               	movwf	drawtext@bg+1,c
  3310  0006E2  0E00               	movlw	0
  3311  0006E4  6E3C               	movwf	drawtext@bg,c
  3312  0006E6  0E01               	movlw	1
  3313  0006E8  6E3E               	movwf	drawtext@size,c
  3314  0006EA  0E3A               	movlw	58
  3315  0006EC  EC1D  F014         	call	_drawtext
  3316                           
  3317                           ;Lab8.c: 647: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3318  0006F0  0E95               	movlw	149
  3319  0006F2  6E37               	movwf	drawtext@y,c
  3320  0006F4  0ECE               	movlw	low _SW_EWLT_Txt
  3321  0006F6  6E38               	movwf	drawtext@_text,c
  3322  0006F8  0E00               	movlw	high _SW_EWLT_Txt
  3323  0006FA  6E39               	movwf	drawtext@_text+1,c
  3324  0006FC  0EFF               	movlw	255
  3325  0006FE  6E3B               	movwf	drawtext@color+1,c
  3326  000700  683A               	setf	drawtext@color,c
  3327  000702  0E00               	movlw	0
  3328  000704  6E3D               	movwf	drawtext@bg+1,c
  3329  000706  0E00               	movlw	0
  3330  000708  6E3C               	movwf	drawtext@bg,c
  3331  00070A  0E01               	movlw	1
  3332  00070C  6E3E               	movwf	drawtext@size,c
  3333  00070E  0E57               	movlw	87
  3334  000710  EC1D  F014         	call	_drawtext
  3335                           
  3336                           ;Lab8.c: 648: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3337  000714  0E95               	movlw	149
  3338  000716  6E37               	movwf	drawtext@y,c
  3339  000718  0ED2               	movlw	low _SW_MODE_Txt
  3340  00071A  6E38               	movwf	drawtext@_text,c
  3341  00071C  0E00               	movlw	high _SW_MODE_Txt
  3342  00071E  6E39               	movwf	drawtext@_text+1,c
  3343  000720  0EFF               	movlw	255
  3344  000722  6E3B               	movwf	drawtext@color+1,c
  3345  000724  683A               	setf	drawtext@color,c
  3346  000726  0E00               	movlw	0
  3347  000728  6E3D               	movwf	drawtext@bg+1,c
  3348  00072A  0E00               	movlw	0
  3349  00072C  6E3C               	movwf	drawtext@bg,c
  3350  00072E  0E01               	movlw	1
  3351  000730  6E3E               	movwf	drawtext@size,c
  3352  000732  0E70               	movlw	112
  3353  000734  EC1D  F014         	call	_drawtext
  3354  000738  0012               	return		;funcret
  3355  00073A                     __end_of_Initialize_Screen:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodl	equ	0xFF3
  3362                           postinc0	equ	0xFEE
  3363                           wreg	equ	0xFE8
  3364                           postdec1	equ	0xFE5
  3365                           fsr1l	equ	0xFE1
  3366                           status	equ	0xFD8
  3367                           
  3368 ;; *************** function _fillScreen *****************
  3369 ;; Defined at:
  3370 ;;		line 652 in file "ST7735_TFT.c"
  3371 ;; Parameters:    Size  Location     Type
  3372 ;;  color           2   33[COMRAM] unsigned int 
  3373 ;; Auto vars:     Size  Location     Type
  3374 ;;		None
  3375 ;; Return value:  Size  Location     Type
  3376 ;;		None               void
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0, cstack
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3384 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;Total ram usage:        2 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; Hardware stack levels required when called:    6
  3391 ;; This function calls:
  3392 ;;		_fillRectangle
  3393 ;; This function is called by:
  3394 ;;		_Initialize_Screen
  3395 ;; This function uses a non-reentrant model
  3396 ;;
  3397                           
  3398                           	psect	text4
  3399  003A2E                     __ptext4:
  3400                           	opt stack 0
  3401  003A2E                     _fillScreen:
  3402                           	opt stack 23
  3403                           
  3404                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3405                           
  3406                           ;incstack = 0
  3407  003A2E  0E00               	movlw	0
  3408  003A30  6E16               	movwf	fillRectangle@y,c
  3409  003A32  0E80               	movlw	128
  3410  003A34  6E17               	movwf	fillRectangle@w,c
  3411  003A36  0EA0               	movlw	160
  3412  003A38  6E18               	movwf	fillRectangle@h,c
  3413  003A3A  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3414  003A3E  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3415  003A42  0E00               	movlw	0
  3416  003A44  EC8C  F014         	call	_fillRectangle
  3417  003A48  0012               	return		;funcret
  3418  003A4A                     __end_of_fillScreen:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodl	equ	0xFF3
  3425                           postinc0	equ	0xFEE
  3426                           wreg	equ	0xFE8
  3427                           postdec1	equ	0xFE5
  3428                           fsr1l	equ	0xFE1
  3429                           status	equ	0xFD8
  3430                           
  3431 ;; *************** function _fillRectangle *****************
  3432 ;; Defined at:
  3433 ;;		line 536 in file "ST7735_TFT.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  x               1    wreg     unsigned char 
  3436 ;;  y               1   21[COMRAM] unsigned char 
  3437 ;;  w               1   22[COMRAM] unsigned char 
  3438 ;;  h               1   23[COMRAM] unsigned char 
  3439 ;;  color           2   24[COMRAM] unsigned int 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  x               1   32[COMRAM] unsigned char 
  3442 ;;  lo              1   31[COMRAM] unsigned char 
  3443 ;;  hi              1   30[COMRAM] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;		None               void
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0, cstack
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3453 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;Total ram usage:       12 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    5
  3460 ;; This function calls:
  3461 ;;		_setAddrWindow
  3462 ;;		_spiwrite
  3463 ;; This function is called by:
  3464 ;;		_fillScreen
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text5
  3469  002918                     __ptext5:
  3470                           	opt stack 0
  3471  002918                     _fillRectangle:
  3472                           	opt stack 23
  3473                           
  3474                           ;incstack = 0
  3475                           ;fillRectangle@x stored from wreg
  3476  002918  6E21               	movwf	fillRectangle@x,c
  3477                           
  3478                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3479                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3480  00291A  0E80               	movlw	128
  3481  00291C  6021               	cpfslt	fillRectangle@x,c
  3482  00291E  D069               	goto	l330
  3483  002920  0E9F               	movlw	159
  3484  002922  6416               	cpfsgt	fillRectangle@y,c
  3485  002924  D001               	goto	l6708
  3486                           
  3487                           ;ST7735_TFT.c: 540: return;
  3488  002926  D065               	goto	l330
  3489  002928                     l6708:
  3490                           
  3491                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3492  002928  0EFF               	movlw	255
  3493  00292A  6E1B               	movwf	??_fillRectangle& (0+255),c
  3494  00292C  0EFF               	movlw	255
  3495  00292E  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3496  002930  5017               	movf	fillRectangle@w,w,c
  3497  002932  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3498  002936  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3499  002938  261D               	addwf	??_fillRectangle+2,f,c
  3500  00293A  0E00               	movlw	0
  3501  00293C  221E               	addwfc	??_fillRectangle+3,f,c
  3502  00293E  501B               	movf	??_fillRectangle,w,c
  3503  002940  261D               	addwf	??_fillRectangle+2,f,c
  3504  002942  501C               	movf	??_fillRectangle+1,w,c
  3505  002944  221E               	addwfc	??_fillRectangle+3,f,c
  3506  002946  BE1E               	btfsc	??_fillRectangle+3,7,c
  3507  002948  D00A               	goto	l331
  3508  00294A  501E               	movf	??_fillRectangle+3,w,c
  3509  00294C  E104               	bnz	u6360
  3510  00294E  0E80               	movlw	128
  3511  002950  5C1D               	subwf	??_fillRectangle+2,w,c
  3512  002952  A0D8               	btfss	status,0,c
  3513  002954  D004               	goto	l331
  3514  002956                     u6360:
  3515                           
  3516                           ;ST7735_TFT.c: 542: w = 128 - x;
  3517  002956  5021               	movf	fillRectangle@x,w,c
  3518  002958  0800               	sublw	0
  3519  00295A  0F80               	addlw	128
  3520  00295C  6E17               	movwf	fillRectangle@w,c
  3521  00295E                     l331:
  3522                           
  3523                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3524  00295E  0EFF               	movlw	255
  3525  002960  6E1B               	movwf	??_fillRectangle& (0+255),c
  3526  002962  0EFF               	movlw	255
  3527  002964  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3528  002966  5018               	movf	fillRectangle@h,w,c
  3529  002968  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3530  00296C  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3531  00296E  261D               	addwf	??_fillRectangle+2,f,c
  3532  002970  0E00               	movlw	0
  3533  002972  221E               	addwfc	??_fillRectangle+3,f,c
  3534  002974  501B               	movf	??_fillRectangle,w,c
  3535  002976  261D               	addwf	??_fillRectangle+2,f,c
  3536  002978  501C               	movf	??_fillRectangle+1,w,c
  3537  00297A  221E               	addwfc	??_fillRectangle+3,f,c
  3538  00297C  BE1E               	btfsc	??_fillRectangle+3,7,c
  3539  00297E  D00B               	goto	l6714
  3540  002980  501E               	movf	??_fillRectangle+3,w,c
  3541  002982  E104               	bnz	u6370
  3542  002984  0EA0               	movlw	160
  3543  002986  5C1D               	subwf	??_fillRectangle+2,w,c
  3544  002988  A0D8               	btfss	status,0,c
  3545  00298A  D005               	goto	l6714
  3546  00298C                     u6370:
  3547                           
  3548                           ;ST7735_TFT.c: 544: h = 160 - y;
  3549  00298C  5016               	movf	fillRectangle@y,w,c
  3550  00298E  0800               	sublw	0
  3551  002990  0FA0               	addlw	160
  3552  002992  6E18               	movwf	fillRectangle@h,c
  3553  002994  D000               	goto	l6714
  3554  002996                     l6714:
  3555                           
  3556                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3557  002996  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3558  00299A  5021               	movf	fillRectangle@x,w,c
  3559  00299C  2417               	addwf	fillRectangle@w,w,c
  3560  00299E  6E1B               	movwf	??_fillRectangle& (0+255),c
  3561  0029A0  041B               	decf	??_fillRectangle,w,c
  3562  0029A2  6E13               	movwf	setAddrWindow@x1,c
  3563  0029A4  5016               	movf	fillRectangle@y,w,c
  3564  0029A6  2418               	addwf	fillRectangle@h,w,c
  3565  0029A8  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3566  0029AA  041C               	decf	??_fillRectangle+1,w,c
  3567  0029AC  6E14               	movwf	setAddrWindow@y1,c
  3568  0029AE  5021               	movf	fillRectangle@x,w,c
  3569  0029B0  EC01  F01B         	call	_setAddrWindow
  3570                           
  3571                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3572  0029B4  501A               	movf	fillRectangle@color+1,w,c
  3573  0029B6  6E1F               	movwf	fillRectangle@hi,c
  3574  0029B8  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3575                           
  3576                           ;ST7735_TFT.c: 547: PORTCbits.RC0 = 1;
  3577  0029BC  8082               	bsf	3970,0,c	;volatile
  3578                           
  3579                           ;ST7735_TFT.c: 548: PORTCbits.RC2 = 0;
  3580  0029BE  9482               	bcf	3970,2,c	;volatile
  3581                           
  3582                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3583  0029C0  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3584  0029C4                     l6726:
  3585  0029C4  5016               	movf	fillRectangle@y,w,c
  3586  0029C6  B4D8               	btfsc	status,2,c
  3587  0029C8  D013               	goto	l334
  3588  0029CA  D001               	goto	l333
  3589  0029CC  D011               	goto	l334
  3590  0029CE                     l333:
  3591                           
  3592                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3593  0029CE  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3594  0029D2                     l6730:
  3595  0029D2  5021               	movf	fillRectangle@x,w,c
  3596  0029D4  B4D8               	btfsc	status,2,c
  3597  0029D6  D00A               	goto	l6740
  3598  0029D8  D001               	goto	l6734
  3599  0029DA  D008               	goto	l6740
  3600  0029DC                     l6734:
  3601                           
  3602                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3603  0029DC  501F               	movf	fillRectangle@hi,w,c
  3604  0029DE  EC61  F01D         	call	_spiwrite
  3605                           
  3606                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3607  0029E2  5020               	movf	fillRectangle@lo,w,c
  3608  0029E4  EC61  F01D         	call	_spiwrite
  3609  0029E8  0621               	decf	fillRectangle@x,f,c
  3610  0029EA  D7F3               	goto	l6730
  3611  0029EC                     l6740:
  3612  0029EC  0616               	decf	fillRectangle@y,f,c
  3613  0029EE  D7EA               	goto	l6726
  3614  0029F0                     l334:
  3615                           
  3616                           ;ST7735_TFT.c: 554: }
  3617                           ;ST7735_TFT.c: 555: }
  3618                           ;ST7735_TFT.c: 556: PORTCbits.RC2 = 1;
  3619  0029F0  8482               	bsf	3970,2,c	;volatile
  3620  0029F2                     l330:
  3621  0029F2  0012               	return		;funcret
  3622  0029F4                     __end_of_fillRectangle:
  3623                           	opt stack 0
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodl	equ	0xFF3
  3629                           postinc0	equ	0xFEE
  3630                           wreg	equ	0xFE8
  3631                           postdec1	equ	0xFE5
  3632                           fsr1l	equ	0xFE1
  3633                           status	equ	0xFD8
  3634                           
  3635 ;; *************** function _drawRect *****************
  3636 ;; Defined at:
  3637 ;;		line 718 in file "ST7735_TFT.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  x               2   32[COMRAM] unsigned int 
  3640 ;;  y               2   34[COMRAM] unsigned int 
  3641 ;;  w               2   36[COMRAM] unsigned int 
  3642 ;;  h               2   38[COMRAM] unsigned int 
  3643 ;;  color           2   40[COMRAM] unsigned int 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;		None               void
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:       11 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    6
  3662 ;; This function calls:
  3663 ;;		_drawFastHLine
  3664 ;;		_drawFastVLine
  3665 ;; This function is called by:
  3666 ;;		_Initialize_Screen
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text6
  3671  003396                     __ptext6:
  3672                           	opt stack 0
  3673  003396                     _drawRect:
  3674                           	opt stack 23
  3675                           
  3676                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3677                           
  3678                           ;incstack = 0
  3679  003396  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3680  00339A  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3681  00339E  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3682  0033A2  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3683  0033A6  5021               	movf	drawRect@x,w,c
  3684  0033A8  EC0E  F018         	call	_drawFastHLine
  3685                           
  3686                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3687  0033AC  5023               	movf	drawRect@y,w,c
  3688  0033AE  2427               	addwf	drawRect@h,w,c
  3689  0033B0  6E2B               	movwf	??_drawRect& (0+255),c
  3690  0033B2  042B               	decf	??_drawRect,w,c
  3691  0033B4  6E16               	movwf	drawFastHLine@y,c
  3692  0033B6  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3693  0033BA  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3694  0033BE  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3695  0033C2  5021               	movf	drawRect@x,w,c
  3696  0033C4  EC0E  F018         	call	_drawFastHLine
  3697                           
  3698                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3699  0033C8  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3700  0033CC  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3701  0033D0  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3702  0033D4  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3703  0033D8  5021               	movf	drawRect@x,w,c
  3704  0033DA  EC52  F018         	call	_drawFastVLine
  3705                           
  3706                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3707  0033DE  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3708  0033E2  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3709  0033E6  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3710  0033EA  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3711  0033EE  5021               	movf	drawRect@x,w,c
  3712  0033F0  2425               	addwf	drawRect@w,w,c
  3713  0033F2  6E2B               	movwf	??_drawRect& (0+255),c
  3714  0033F4  042B               	decf	??_drawRect,w,c
  3715  0033F6  EC52  F018         	call	_drawFastVLine
  3716  0033FA  0012               	return		;funcret
  3717  0033FC                     __end_of_drawRect:
  3718                           	opt stack 0
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodl	equ	0xFF3
  3724                           postinc0	equ	0xFEE
  3725                           wreg	equ	0xFE8
  3726                           postdec1	equ	0xFE5
  3727                           fsr1l	equ	0xFE1
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _drawFastHLine *****************
  3731 ;; Defined at:
  3732 ;;		line 657 in file "ST7735_TFT.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  x               1    wreg     unsigned char 
  3735 ;;  y               1   21[COMRAM] unsigned char 
  3736 ;;  w               1   22[COMRAM] unsigned char 
  3737 ;;  color           2   23[COMRAM] unsigned int 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  x               1   31[COMRAM] unsigned char 
  3740 ;;  lo              1   30[COMRAM] unsigned char 
  3741 ;;  hi              1   29[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;		None               void
  3744 ;; Registers used:
  3745 ;;		wreg, status,2, status,0, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3751 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;Total ram usage:       11 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    5
  3758 ;; This function calls:
  3759 ;;		_setAddrWindow
  3760 ;;		_spiwrite
  3761 ;; This function is called by:
  3762 ;;		_drawRect
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           	psect	text7
  3767  00301C                     __ptext7:
  3768                           	opt stack 0
  3769  00301C                     _drawFastHLine:
  3770                           	opt stack 23
  3771                           
  3772                           ;incstack = 0
  3773                           ;drawFastHLine@x stored from wreg
  3774  00301C  6E20               	movwf	drawFastHLine@x,c
  3775                           
  3776                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3777                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3778  00301E  0E80               	movlw	128
  3779  003020  6020               	cpfslt	drawFastHLine@x,c
  3780  003022  D03F               	goto	l375
  3781  003024  0E9F               	movlw	159
  3782  003026  6416               	cpfsgt	drawFastHLine@y,c
  3783  003028  D001               	goto	l6748
  3784                           
  3785                           ;ST7735_TFT.c: 661: return;
  3786  00302A  D03B               	goto	l375
  3787  00302C                     l6748:
  3788                           
  3789                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3790  00302C  0EFF               	movlw	255
  3791  00302E  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3792  003030  0EFF               	movlw	255
  3793  003032  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3794  003034  5017               	movf	drawFastHLine@w,w,c
  3795  003036  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3796  00303A  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3797  00303C  261C               	addwf	??_drawFastHLine+2,f,c
  3798  00303E  0E00               	movlw	0
  3799  003040  221D               	addwfc	??_drawFastHLine+3,f,c
  3800  003042  501A               	movf	??_drawFastHLine,w,c
  3801  003044  261C               	addwf	??_drawFastHLine+2,f,c
  3802  003046  501B               	movf	??_drawFastHLine+1,w,c
  3803  003048  221D               	addwfc	??_drawFastHLine+3,f,c
  3804  00304A  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3805  00304C  D00B               	goto	l6752
  3806  00304E  501D               	movf	??_drawFastHLine+3,w,c
  3807  003050  E104               	bnz	u6440
  3808  003052  0E80               	movlw	128
  3809  003054  5C1C               	subwf	??_drawFastHLine+2,w,c
  3810  003056  A0D8               	btfss	status,0,c
  3811  003058  D005               	goto	l6752
  3812  00305A                     u6440:
  3813                           
  3814                           ;ST7735_TFT.c: 663: w = 128 - x;
  3815  00305A  5020               	movf	drawFastHLine@x,w,c
  3816  00305C  0800               	sublw	0
  3817  00305E  0F80               	addlw	128
  3818  003060  6E17               	movwf	drawFastHLine@w,c
  3819  003062  D000               	goto	l6752
  3820  003064                     l6752:
  3821                           
  3822                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3823  003064  5019               	movf	drawFastHLine@color+1,w,c
  3824  003066  6E1E               	movwf	drawFastHLine@hi,c
  3825  003068  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3826                           
  3827                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3828  00306C  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3829  003070  5020               	movf	drawFastHLine@x,w,c
  3830  003072  2417               	addwf	drawFastHLine@w,w,c
  3831  003074  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3832  003076  041A               	decf	??_drawFastHLine,w,c
  3833  003078  6E13               	movwf	setAddrWindow@x1,c
  3834  00307A  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3835  00307E  5020               	movf	drawFastHLine@x,w,c
  3836  003080  EC01  F01B         	call	_setAddrWindow
  3837                           
  3838                           ;ST7735_TFT.c: 666: PORTCbits.RC0 = 1;
  3839  003084  8082               	bsf	3970,0,c	;volatile
  3840                           
  3841                           ;ST7735_TFT.c: 667: PORTCbits.RC2 = 0;
  3842  003086  9482               	bcf	3970,2,c	;volatile
  3843                           
  3844                           ;ST7735_TFT.c: 669: while (w--) {
  3845  003088  D007               	goto	l6764
  3846  00308A                     l6762:
  3847                           
  3848                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3849  00308A  501E               	movf	drawFastHLine@hi,w,c
  3850  00308C  EC61  F01D         	call	_spiwrite
  3851                           
  3852                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3853  003090  501F               	movf	drawFastHLine@lo,w,c
  3854  003092  EC61  F01D         	call	_spiwrite
  3855  003096  D000               	goto	l6764
  3856  003098                     l6764:
  3857  003098  0617               	decf	drawFastHLine@w,f,c
  3858  00309A  2817               	incf	drawFastHLine@w,w,c
  3859  00309C  A4D8               	btfss	status,2,c
  3860  00309E  D7F5               	goto	l6762
  3861                           
  3862                           ;ST7735_TFT.c: 672: }
  3863                           ;ST7735_TFT.c: 673: PORTCbits.RC2 = 1;
  3864  0030A0  8482               	bsf	3970,2,c	;volatile
  3865  0030A2                     l375:
  3866  0030A2  0012               	return		;funcret
  3867  0030A4                     __end_of_drawFastHLine:
  3868                           	opt stack 0
  3869                           tblptru	equ	0xFF8
  3870                           tblptrh	equ	0xFF7
  3871                           tblptrl	equ	0xFF6
  3872                           tablat	equ	0xFF5
  3873                           prodl	equ	0xFF3
  3874                           postinc0	equ	0xFEE
  3875                           wreg	equ	0xFE8
  3876                           postdec1	equ	0xFE5
  3877                           fsr1l	equ	0xFE1
  3878                           status	equ	0xFD8
  3879                           
  3880 ;; *************** function _TFT_GreenTab_Initialize *****************
  3881 ;; Defined at:
  3882 ;;		line 677 in file "ST7735_TFT.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;		None               void
  3889 ;; Registers used:
  3890 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;Total ram usage:        0 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; Hardware stack levels required when called:    5
  3903 ;; This function calls:
  3904 ;;		_Rcmd1
  3905 ;;		_Rcmd2red
  3906 ;;		_Rcmd3
  3907 ;;		_write_command
  3908 ;;		_write_data
  3909 ;; This function is called by:
  3910 ;;		_Initialize_Screen
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text8
  3915  00396A                     __ptext8:
  3916                           	opt stack 0
  3917  00396A                     _TFT_GreenTab_Initialize:
  3918                           	opt stack 24
  3919                           
  3920                           ;ST7735_TFT.c: 679: PORTCbits.RC2 = 1;
  3921                           
  3922                           ;incstack = 0
  3923  00396A  8482               	bsf	3970,2,c	;volatile
  3924                           
  3925                           ;ST7735_TFT.c: 680: PORTCbits.RC0 = 0;
  3926  00396C  9082               	bcf	3970,0,c	;volatile
  3927                           
  3928                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3929  00396E  0E80               	movlw	128
  3930  003970  6EC7               	movwf	4039,c	;volatile
  3931                           
  3932                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3933  003972  0E30               	movlw	48
  3934  003974  6EC6               	movwf	4038,c	;volatile
  3935                           
  3936                           ;ST7735_TFT.c: 686: Rcmd1();
  3937  003976  ECAF  F010         	call	_Rcmd1	;wreg free
  3938                           
  3939                           ;ST7735_TFT.c: 687: Rcmd2red();
  3940  00397A  ECF7  F01B         	call	_Rcmd2red	;wreg free
  3941                           
  3942                           ;ST7735_TFT.c: 688: Rcmd3();
  3943  00397E  ECC0  F012         	call	_Rcmd3	;wreg free
  3944                           
  3945                           ;ST7735_TFT.c: 689: write_command(0x36);
  3946  003982  0E36               	movlw	54
  3947  003984  EC85  F01D         	call	_write_command
  3948                           
  3949                           ;ST7735_TFT.c: 690: write_data(0xC0);
  3950  003988  0EC0               	movlw	192
  3951  00398A  EC7D  F01D         	call	_write_data
  3952                           
  3953                           ;ST7735_TFT.c: 691: _tft_type = 1;
  3954  00398E  0E01               	movlw	1
  3955  003990  6E6C               	movwf	__tft_type,c
  3956  003992  0012               	return		;funcret
  3957  003994                     __end_of_TFT_GreenTab_Initialize:
  3958                           	opt stack 0
  3959                           tblptru	equ	0xFF8
  3960                           tblptrh	equ	0xFF7
  3961                           tblptrl	equ	0xFF6
  3962                           tablat	equ	0xFF5
  3963                           prodl	equ	0xFF3
  3964                           postinc0	equ	0xFEE
  3965                           wreg	equ	0xFE8
  3966                           postdec1	equ	0xFE5
  3967                           fsr1l	equ	0xFE1
  3968                           status	equ	0xFD8
  3969                           
  3970 ;; *************** function _Rcmd3 *****************
  3971 ;; Defined at:
  3972 ;;		line 371 in file "ST7735_TFT.c"
  3973 ;; Parameters:    Size  Location     Type
  3974 ;;		None
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;		None
  3977 ;; Return value:  Size  Location     Type
  3978 ;;		None               void
  3979 ;; Registers used:
  3980 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3981 ;; Tracked objects:
  3982 ;;		On entry : 0/0
  3983 ;;		On exit  : 0/0
  3984 ;;		Unchanged: 0/0
  3985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;Total ram usage:        0 bytes
  3991 ;; Hardware stack levels used:    1
  3992 ;; Hardware stack levels required when called:    4
  3993 ;; This function calls:
  3994 ;;		_delay_ms
  3995 ;;		_write_command
  3996 ;;		_write_data
  3997 ;; This function is called by:
  3998 ;;		_TFT_GreenTab_Initialize
  3999 ;;		_TFT_BlackTab_Initialize
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text9
  4004  002580                     __ptext9:
  4005                           	opt stack 0
  4006  002580                     _Rcmd3:
  4007                           	opt stack 24
  4008                           
  4009                           ;ST7735_TFT.c: 373: write_command(0xE0);
  4010                           
  4011                           ;incstack = 0
  4012  002580  0EE0               	movlw	224
  4013  002582  EC85  F01D         	call	_write_command
  4014                           
  4015                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4016  002586  0E02               	movlw	2
  4017  002588  EC7D  F01D         	call	_write_data
  4018  00258C  0E1C               	movlw	28
  4019  00258E  EC7D  F01D         	call	_write_data
  4020  002592  0E07               	movlw	7
  4021  002594  EC7D  F01D         	call	_write_data
  4022  002598  0E12               	movlw	18
  4023  00259A  EC7D  F01D         	call	_write_data
  4024                           
  4025                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4026  00259E  0E37               	movlw	55
  4027  0025A0  EC7D  F01D         	call	_write_data
  4028  0025A4  0E32               	movlw	50
  4029  0025A6  EC7D  F01D         	call	_write_data
  4030  0025AA  0E29               	movlw	41
  4031  0025AC  EC7D  F01D         	call	_write_data
  4032  0025B0  0E2D               	movlw	45
  4033  0025B2  EC7D  F01D         	call	_write_data
  4034                           
  4035                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4036  0025B6  0E29               	movlw	41
  4037  0025B8  EC7D  F01D         	call	_write_data
  4038  0025BC  0E25               	movlw	37
  4039  0025BE  EC7D  F01D         	call	_write_data
  4040  0025C2  0E2B               	movlw	43
  4041  0025C4  EC7D  F01D         	call	_write_data
  4042  0025C8  0E39               	movlw	57
  4043  0025CA  EC7D  F01D         	call	_write_data
  4044                           
  4045                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4046  0025CE  0E00               	movlw	0
  4047  0025D0  EC7D  F01D         	call	_write_data
  4048  0025D4  0E01               	movlw	1
  4049  0025D6  EC7D  F01D         	call	_write_data
  4050  0025DA  0E03               	movlw	3
  4051  0025DC  EC7D  F01D         	call	_write_data
  4052  0025E0  0E10               	movlw	16
  4053  0025E2  EC7D  F01D         	call	_write_data
  4054                           
  4055                           ;ST7735_TFT.c: 378: write_command(0xE1);
  4056  0025E6  0EE1               	movlw	225
  4057  0025E8  EC85  F01D         	call	_write_command
  4058                           
  4059                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4060  0025EC  0E03               	movlw	3
  4061  0025EE  EC7D  F01D         	call	_write_data
  4062  0025F2  0E1D               	movlw	29
  4063  0025F4  EC7D  F01D         	call	_write_data
  4064  0025F8  0E07               	movlw	7
  4065  0025FA  EC7D  F01D         	call	_write_data
  4066  0025FE  0E06               	movlw	6
  4067  002600  EC7D  F01D         	call	_write_data
  4068                           
  4069                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4070  002604  0E2E               	movlw	46
  4071  002606  EC7D  F01D         	call	_write_data
  4072  00260A  0E2C               	movlw	44
  4073  00260C  EC7D  F01D         	call	_write_data
  4074  002610  0E29               	movlw	41
  4075  002612  EC7D  F01D         	call	_write_data
  4076  002616  0E2D               	movlw	45
  4077  002618  EC7D  F01D         	call	_write_data
  4078                           
  4079                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4080  00261C  0E2E               	movlw	46
  4081  00261E  EC7D  F01D         	call	_write_data
  4082  002622  0E2E               	movlw	46
  4083  002624  EC7D  F01D         	call	_write_data
  4084  002628  0E37               	movlw	55
  4085  00262A  EC7D  F01D         	call	_write_data
  4086  00262E  0E3F               	movlw	63
  4087  002630  EC7D  F01D         	call	_write_data
  4088                           
  4089                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4090  002634  0E00               	movlw	0
  4091  002636  EC7D  F01D         	call	_write_data
  4092  00263A  0E00               	movlw	0
  4093  00263C  EC7D  F01D         	call	_write_data
  4094  002640  0E02               	movlw	2
  4095  002642  EC7D  F01D         	call	_write_data
  4096  002646  0E10               	movlw	16
  4097  002648  EC7D  F01D         	call	_write_data
  4098                           
  4099                           ;ST7735_TFT.c: 383: write_command(0x13);
  4100  00264C  0E13               	movlw	19
  4101  00264E  EC85  F01D         	call	_write_command
  4102                           
  4103                           ;ST7735_TFT.c: 384: delay_ms(10);
  4104  002652  0E00               	movlw	0
  4105  002654  6E24               	movwf	delay_ms@ms+1,c
  4106  002656  0E0A               	movlw	10
  4107  002658  6E23               	movwf	delay_ms@ms,c
  4108  00265A  EC86  F01A         	call	_delay_ms	;wreg free
  4109                           
  4110                           ;ST7735_TFT.c: 385: write_command(0x29);
  4111  00265E  0E29               	movlw	41
  4112  002660  EC85  F01D         	call	_write_command
  4113                           
  4114                           ;ST7735_TFT.c: 386: delay_ms(100);
  4115  002664  0E00               	movlw	0
  4116  002666  6E24               	movwf	delay_ms@ms+1,c
  4117  002668  0E64               	movlw	100
  4118  00266A  6E23               	movwf	delay_ms@ms,c
  4119  00266C  EC86  F01A         	call	_delay_ms	;wreg free
  4120  002670  0012               	return		;funcret
  4121  002672                     __end_of_Rcmd3:
  4122                           	opt stack 0
  4123                           tblptru	equ	0xFF8
  4124                           tblptrh	equ	0xFF7
  4125                           tblptrl	equ	0xFF6
  4126                           tablat	equ	0xFF5
  4127                           prodl	equ	0xFF3
  4128                           postinc0	equ	0xFEE
  4129                           wreg	equ	0xFE8
  4130                           postdec1	equ	0xFE5
  4131                           fsr1l	equ	0xFE1
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function _Rcmd2red *****************
  4135 ;; Defined at:
  4136 ;;		line 361 in file "ST7735_TFT.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;		None
  4141 ;; Return value:  Size  Location     Type
  4142 ;;		None               void
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;Total ram usage:        0 bytes
  4155 ;; Hardware stack levels used:    1
  4156 ;; Hardware stack levels required when called:    4
  4157 ;; This function calls:
  4158 ;;		_write_command
  4159 ;;		_write_data
  4160 ;; This function is called by:
  4161 ;;		_TFT_GreenTab_Initialize
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text10
  4166  0037EE                     __ptext10:
  4167                           	opt stack 0
  4168  0037EE                     _Rcmd2red:
  4169                           	opt stack 24
  4170                           
  4171                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4172                           
  4173                           ;incstack = 0
  4174  0037EE  0E2A               	movlw	42
  4175  0037F0  EC85  F01D         	call	_write_command
  4176                           
  4177                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4178  0037F4  0E00               	movlw	0
  4179  0037F6  EC7D  F01D         	call	_write_data
  4180  0037FA  0E00               	movlw	0
  4181  0037FC  EC7D  F01D         	call	_write_data
  4182                           
  4183                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4184  003800  0E00               	movlw	0
  4185  003802  EC7D  F01D         	call	_write_data
  4186  003806  0E7F               	movlw	127
  4187  003808  EC7D  F01D         	call	_write_data
  4188                           
  4189                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4190  00380C  0E2B               	movlw	43
  4191  00380E  EC85  F01D         	call	_write_command
  4192                           
  4193                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4194  003812  0E00               	movlw	0
  4195  003814  EC7D  F01D         	call	_write_data
  4196  003818  0E00               	movlw	0
  4197  00381A  EC7D  F01D         	call	_write_data
  4198                           
  4199                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4200  00381E  0E00               	movlw	0
  4201  003820  EC7D  F01D         	call	_write_data
  4202  003824  0E9F               	movlw	159
  4203  003826  EC7D  F01D         	call	_write_data
  4204  00382A  0012               	return		;funcret
  4205  00382C                     __end_of_Rcmd2red:
  4206                           	opt stack 0
  4207                           tblptru	equ	0xFF8
  4208                           tblptrh	equ	0xFF7
  4209                           tblptrl	equ	0xFF6
  4210                           tablat	equ	0xFF5
  4211                           prodl	equ	0xFF3
  4212                           postinc0	equ	0xFEE
  4213                           wreg	equ	0xFE8
  4214                           postdec1	equ	0xFE5
  4215                           fsr1l	equ	0xFE1
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _Rcmd1 *****************
  4219 ;; Defined at:
  4220 ;;		line 314 in file "ST7735_TFT.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;		None
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;		None               void
  4227 ;; Registers used:
  4228 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;Total ram usage:        0 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    4
  4241 ;; This function calls:
  4242 ;;		_delay_ms
  4243 ;;		_write_command
  4244 ;;		_write_data
  4245 ;; This function is called by:
  4246 ;;		_TFT_GreenTab_Initialize
  4247 ;;		_TFT_BlackTab_Initialize
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text11
  4252  00215E                     __ptext11:
  4253                           	opt stack 0
  4254  00215E                     _Rcmd1:
  4255                           	opt stack 24
  4256                           
  4257                           ;ST7735_TFT.c: 316: write_command(0x01);
  4258                           
  4259                           ;incstack = 0
  4260  00215E  0E01               	movlw	1
  4261  002160  EC85  F01D         	call	_write_command
  4262                           
  4263                           ;ST7735_TFT.c: 317: delay_ms(150);
  4264  002164  0E00               	movlw	0
  4265  002166  6E24               	movwf	delay_ms@ms+1,c
  4266  002168  0E96               	movlw	150
  4267  00216A  6E23               	movwf	delay_ms@ms,c
  4268  00216C  EC86  F01A         	call	_delay_ms	;wreg free
  4269                           
  4270                           ;ST7735_TFT.c: 318: write_command(0x11);
  4271  002170  0E11               	movlw	17
  4272  002172  EC85  F01D         	call	_write_command
  4273                           
  4274                           ;ST7735_TFT.c: 319: delay_ms(500);
  4275  002176  0E01               	movlw	1
  4276  002178  6E24               	movwf	delay_ms@ms+1,c
  4277  00217A  0EF4               	movlw	244
  4278  00217C  6E23               	movwf	delay_ms@ms,c
  4279  00217E  EC86  F01A         	call	_delay_ms	;wreg free
  4280                           
  4281                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4282  002182  0EB1               	movlw	177
  4283  002184  EC85  F01D         	call	_write_command
  4284                           
  4285                           ;ST7735_TFT.c: 321: write_data(0x01);
  4286  002188  0E01               	movlw	1
  4287  00218A  EC7D  F01D         	call	_write_data
  4288                           
  4289                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4290  00218E  0E2C               	movlw	44
  4291  002190  EC7D  F01D         	call	_write_data
  4292                           
  4293                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4294  002194  0E2D               	movlw	45
  4295  002196  EC7D  F01D         	call	_write_data
  4296                           
  4297                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4298  00219A  0EB2               	movlw	178
  4299  00219C  EC85  F01D         	call	_write_command
  4300                           
  4301                           ;ST7735_TFT.c: 325: write_data(0x01);
  4302  0021A0  0E01               	movlw	1
  4303  0021A2  EC7D  F01D         	call	_write_data
  4304                           
  4305                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4306  0021A6  0E2C               	movlw	44
  4307  0021A8  EC7D  F01D         	call	_write_data
  4308                           
  4309                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4310  0021AC  0E2D               	movlw	45
  4311  0021AE  EC7D  F01D         	call	_write_data
  4312                           
  4313                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4314  0021B2  0EB3               	movlw	179
  4315  0021B4  EC85  F01D         	call	_write_command
  4316                           
  4317                           ;ST7735_TFT.c: 329: write_data(0x01);
  4318  0021B8  0E01               	movlw	1
  4319  0021BA  EC7D  F01D         	call	_write_data
  4320                           
  4321                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4322  0021BE  0E2C               	movlw	44
  4323  0021C0  EC7D  F01D         	call	_write_data
  4324                           
  4325                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4326  0021C4  0E2D               	movlw	45
  4327  0021C6  EC7D  F01D         	call	_write_data
  4328                           
  4329                           ;ST7735_TFT.c: 332: write_data(0x01);
  4330  0021CA  0E01               	movlw	1
  4331  0021CC  EC7D  F01D         	call	_write_data
  4332                           
  4333                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4334  0021D0  0E2C               	movlw	44
  4335  0021D2  EC7D  F01D         	call	_write_data
  4336                           
  4337                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4338  0021D6  0E2D               	movlw	45
  4339  0021D8  EC7D  F01D         	call	_write_data
  4340                           
  4341                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4342  0021DC  0EB4               	movlw	180
  4343  0021DE  EC85  F01D         	call	_write_command
  4344                           
  4345                           ;ST7735_TFT.c: 336: write_data(0x07);
  4346  0021E2  0E07               	movlw	7
  4347  0021E4  EC7D  F01D         	call	_write_data
  4348                           
  4349                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4350  0021E8  0EC0               	movlw	192
  4351  0021EA  EC85  F01D         	call	_write_command
  4352                           
  4353                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4354  0021EE  0EA2               	movlw	162
  4355  0021F0  EC7D  F01D         	call	_write_data
  4356                           
  4357                           ;ST7735_TFT.c: 339: write_data(0x02);
  4358  0021F4  0E02               	movlw	2
  4359  0021F6  EC7D  F01D         	call	_write_data
  4360                           
  4361                           ;ST7735_TFT.c: 340: write_data(0x84);
  4362  0021FA  0E84               	movlw	132
  4363  0021FC  EC7D  F01D         	call	_write_data
  4364                           
  4365                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4366  002200  0EC1               	movlw	193
  4367  002202  EC85  F01D         	call	_write_command
  4368                           
  4369                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4370  002206  0EC5               	movlw	197
  4371  002208  EC7D  F01D         	call	_write_data
  4372                           
  4373                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4374  00220C  0EC2               	movlw	194
  4375  00220E  EC85  F01D         	call	_write_command
  4376                           
  4377                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4378  002212  0E0A               	movlw	10
  4379  002214  EC7D  F01D         	call	_write_data
  4380                           
  4381                           ;ST7735_TFT.c: 345: write_data(0x00);
  4382  002218  0E00               	movlw	0
  4383  00221A  EC7D  F01D         	call	_write_data
  4384                           
  4385                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4386  00221E  0EC3               	movlw	195
  4387  002220  EC85  F01D         	call	_write_command
  4388                           
  4389                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4390  002224  0E8A               	movlw	138
  4391  002226  EC7D  F01D         	call	_write_data
  4392                           
  4393                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4394  00222A  0E2A               	movlw	42
  4395  00222C  EC7D  F01D         	call	_write_data
  4396                           
  4397                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4398  002230  0EC4               	movlw	196
  4399  002232  EC85  F01D         	call	_write_command
  4400                           
  4401                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4402  002236  0E8A               	movlw	138
  4403  002238  EC7D  F01D         	call	_write_data
  4404                           
  4405                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4406  00223C  0EEE               	movlw	238
  4407  00223E  EC7D  F01D         	call	_write_data
  4408                           
  4409                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4410  002242  0EC5               	movlw	197
  4411  002244  EC85  F01D         	call	_write_command
  4412                           
  4413                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4414  002248  0E0E               	movlw	14
  4415  00224A  EC7D  F01D         	call	_write_data
  4416                           
  4417                           ;ST7735_TFT.c: 354: write_command(0x20);
  4418  00224E  0E20               	movlw	32
  4419  002250  EC85  F01D         	call	_write_command
  4420                           
  4421                           ;ST7735_TFT.c: 355: write_command(0x36);
  4422  002254  0E36               	movlw	54
  4423  002256  EC85  F01D         	call	_write_command
  4424                           
  4425                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4426  00225A  0EC8               	movlw	200
  4427  00225C  EC7D  F01D         	call	_write_data
  4428                           
  4429                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4430  002260  0E3A               	movlw	58
  4431  002262  EC85  F01D         	call	_write_command
  4432                           
  4433                           ;ST7735_TFT.c: 358: write_data(0x05);
  4434  002266  0E05               	movlw	5
  4435  002268  EC7D  F01D         	call	_write_data
  4436  00226C  0012               	return		;funcret
  4437  00226E                     __end_of_Rcmd1:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodl	equ	0xFF3
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           postdec1	equ	0xFE5
  4447                           fsr1l	equ	0xFE1
  4448                           status	equ	0xFD8
  4449                           
  4450 ;; *************** function _LCD_Reset *****************
  4451 ;; Defined at:
  4452 ;;		line 250 in file "ST7735_TFT.c"
  4453 ;; Parameters:    Size  Location     Type
  4454 ;;		None
  4455 ;; Auto vars:     Size  Location     Type
  4456 ;;		None
  4457 ;; Return value:  Size  Location     Type
  4458 ;;		None               void
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4470 ;;Total ram usage:        0 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; Hardware stack levels required when called:    4
  4473 ;; This function calls:
  4474 ;;		_delay_ms
  4475 ;; This function is called by:
  4476 ;;		_Initialize_Screen
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text12
  4481  003AD6                     __ptext12:
  4482                           	opt stack 0
  4483  003AD6                     _LCD_Reset:
  4484                           	opt stack 25
  4485                           
  4486                           ;ST7735_TFT.c: 252: PORTCbits.RC4 = 0;
  4487                           
  4488                           ;incstack = 0
  4489  003AD6  9882               	bcf	3970,4,c	;volatile
  4490                           
  4491                           ;ST7735_TFT.c: 253: delay_ms(100);
  4492  003AD8  0E00               	movlw	0
  4493  003ADA  6E24               	movwf	delay_ms@ms+1,c
  4494  003ADC  0E64               	movlw	100
  4495  003ADE  6E23               	movwf	delay_ms@ms,c
  4496  003AE0  EC86  F01A         	call	_delay_ms	;wreg free
  4497                           
  4498                           ;ST7735_TFT.c: 254: PORTCbits.RC4 = 1;
  4499  003AE4  8882               	bsf	3970,4,c	;volatile
  4500  003AE6  0012               	return		;funcret
  4501  003AE8                     __end_of_LCD_Reset:
  4502                           	opt stack 0
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodl	equ	0xFF3
  4508                           postinc0	equ	0xFEE
  4509                           wreg	equ	0xFE8
  4510                           postdec1	equ	0xFE5
  4511                           fsr1l	equ	0xFE1
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _delay_ms *****************
  4515 ;; Defined at:
  4516 ;;		line 97 in file "ST7735_TFT.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  ms              2   34[COMRAM] int 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  count           2   38[COMRAM] int 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4530 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;Total ram usage:        6 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    3
  4537 ;; This function calls:
  4538 ;;		___wmul
  4539 ;; This function is called by:
  4540 ;;		_LCD_Reset
  4541 ;;		_Rcmd1
  4542 ;;		_Rcmd3
  4543 ;;		_Bcmd
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           	psect	text13
  4548  00350C                     __ptext13:
  4549                           	opt stack 0
  4550  00350C                     _delay_ms:
  4551                           	opt stack 24
  4552                           
  4553                           ;ST7735_TFT.c: 103: int count;
  4554                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4555                           
  4556                           ;incstack = 0
  4557  00350C  C023  F01D         	movff	delay_ms@ms,___wmul@multiplier
  4558  003510  C024  F01E         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4559  003514  0E00               	movlw	0
  4560  003516  6E20               	movwf	___wmul@multiplicand+1,c
  4561  003518  0EFA               	movlw	250
  4562  00351A  6E1F               	movwf	___wmul@multiplicand,c
  4563  00351C  ECDE  F01C         	call	___wmul	;wreg free
  4564  003520  C01D  F027         	movff	?___wmul,delay_ms@count
  4565  003524  C01E  F028         	movff	?___wmul+1,delay_ms@count+1
  4566                           
  4567                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4568  003528  C027  F025         	movff	delay_ms@count,??_delay_ms
  4569  00352C  C028  F026         	movff	delay_ms@count+1,??_delay_ms+1
  4570  003530  1E25               	comf	??_delay_ms,f,c
  4571  003532  1E26               	comf	??_delay_ms+1,f,c
  4572  003534  4A25               	infsnz	??_delay_ms,f,c
  4573  003536  2A26               	incf	??_delay_ms+1,f,c
  4574  003538  0EFF               	movlw	255
  4575  00353A  2425               	addwf	??_delay_ms,w,c
  4576  00353C  6E27               	movwf	delay_ms@count,c
  4577  00353E  0EFF               	movlw	255
  4578  003540  2026               	addwfc	??_delay_ms+1,w,c
  4579  003542  6E28               	movwf	delay_ms@count+1,c
  4580                           
  4581                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4582  003544  0EB8               	movlw	184
  4583  003546  6EB1               	movwf	4017,c	;volatile
  4584                           
  4585                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4586  003548  C027  FFD6         	movff	delay_ms@count,4054	;volatile
  4587                           
  4588                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4589  00354C  5028               	movf	delay_ms@count+1,w,c
  4590  00354E  6ED7               	movwf	4055,c	;volatile
  4591                           
  4592                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4593  003550  92A1               	bcf	4001,1,c	;volatile
  4594                           
  4595                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4596  003552  80B1               	bsf	4017,0,c	;volatile
  4597                           
  4598                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4599  003554  D000               	goto	l217
  4600  003556                     l217:
  4601  003556  A2A1               	btfss	4001,1,c	;volatile
  4602  003558  D7FE               	goto	l217
  4603                           
  4604                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4605  00355A  90B1               	bcf	4017,0,c	;volatile
  4606  00355C  0012               	return		;funcret
  4607  00355E                     __end_of_delay_ms:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodl	equ	0xFF3
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           postdec1	equ	0xFE5
  4617                           fsr1l	equ	0xFE1
  4618                           status	equ	0xFD8
  4619                           
  4620 ;; *************** function _Do_Init *****************
  4621 ;; Defined at:
  4622 ;;		line 205 in file "Lab8.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;		None
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;		None
  4627 ;; Return value:  Size  Location     Type
  4628 ;;		None               void
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;Total ram usage:        0 bytes
  4641 ;; Hardware stack levels used:    1
  4642 ;; Hardware stack levels required when called:    4
  4643 ;; This function calls:
  4644 ;;		_Init_ADC
  4645 ;;		_Init_Tris
  4646 ;;		_init_UART
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text14
  4653  003994                     __ptext14:
  4654                           	opt stack 0
  4655  003994                     _Do_Init:
  4656                           	opt stack 26
  4657                           
  4658                           ;Lab8.c: 206: Init_Tris();
  4659                           
  4660                           ;incstack = 0
  4661  003994  EC4C  F01D         	call	_Init_Tris	;wreg free
  4662                           
  4663                           ;Lab8.c: 207: Init_ADC();
  4664  003998  EC9A  F01D         	call	_Init_ADC	;wreg free
  4665                           
  4666                           ;Lab8.c: 208: init_UART();
  4667  00399C  EC57  F01D         	call	_init_UART	;wreg free
  4668                           
  4669                           ;Lab8.c: 209: OSCCON = 0x70;
  4670  0039A0  0E70               	movlw	112
  4671  0039A2  6ED3               	movwf	4051,c	;volatile
  4672                           
  4673                           ;Lab8.c: 210: RBPU = 0x00;
  4674  0039A4  9EF1               	bcf	intcon2,7,c	;volatile
  4675                           
  4676                           ;Lab8.c: 212: INTCONbits.INT0IF = 0 ;
  4677  0039A6  92F2               	bcf	intcon,1,c	;volatile
  4678                           
  4679                           ;Lab8.c: 213: INTCON3bits.INT1IF = 0;
  4680  0039A8  90F0               	bcf	intcon3,0,c	;volatile
  4681                           
  4682                           ;Lab8.c: 214: INTCON3bits.INT2IF =0;
  4683  0039AA  92F0               	bcf	intcon3,1,c	;volatile
  4684                           
  4685                           ;Lab8.c: 216: INTCON2bits.INTEDG0=0 ;
  4686  0039AC  9CF1               	bcf	intcon2,6,c	;volatile
  4687                           
  4688                           ;Lab8.c: 217: INTCON2bits.INTEDG1=0;
  4689  0039AE  9AF1               	bcf	intcon2,5,c	;volatile
  4690                           
  4691                           ;Lab8.c: 218: INTCON2bits.INTEDG2=1;
  4692  0039B0  88F1               	bsf	intcon2,4,c	;volatile
  4693                           
  4694                           ;Lab8.c: 220: INTCONbits.INT0IE =1;
  4695  0039B2  88F2               	bsf	intcon,4,c	;volatile
  4696                           
  4697                           ;Lab8.c: 221: INTCON3bits.INT1IE=1;
  4698  0039B4  86F0               	bsf	intcon3,3,c	;volatile
  4699                           
  4700                           ;Lab8.c: 222: INTCON3bits.INT2IE=1;
  4701  0039B6  88F0               	bsf	intcon3,4,c	;volatile
  4702                           
  4703                           ;Lab8.c: 224: INTCONbits.GIE=1;
  4704  0039B8  8EF2               	bsf	intcon,7,c	;volatile
  4705  0039BA  0012               	return		;funcret
  4706  0039BC                     __end_of_Do_Init:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodl	equ	0xFF3
  4713                           intcon	equ	0xFF2
  4714                           intcon2	equ	0xFF1
  4715                           intcon3	equ	0xFF0
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           postdec1	equ	0xFE5
  4719                           fsr1l	equ	0xFE1
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function _init_UART *****************
  4723 ;; Defined at:
  4724 ;;		line 230 in file "Lab8.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;		None
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;		None               void
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4742 ;;Total ram usage:        0 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    3
  4745 ;; This function calls:
  4746 ;;		_OpenUSART
  4747 ;; This function is called by:
  4748 ;;		_Do_Init
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           	psect	text15
  4753  003AAE                     __ptext15:
  4754                           	opt stack 0
  4755  003AAE                     _init_UART:
  4756                           	opt stack 26
  4757                           
  4758                           ;Lab8.c: 231: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  4759                           ;Lab8.c: 232: & 0b11111111 & 0b11111111, 25);
  4760                           
  4761                           ;incstack = 0
  4762  003AAE  0E00               	movlw	0
  4763  003AB0  6E10               	movwf	OpenUSART@spbrg+1,c
  4764  003AB2  0E19               	movlw	25
  4765  003AB4  6E0F               	movwf	OpenUSART@spbrg,c
  4766  003AB6  0E3C               	movlw	60
  4767  003AB8  EC5B  F019         	call	_OpenUSART
  4768                           
  4769                           ;Lab8.c: 233: OSCCON = 0x60;
  4770  003ABC  0E60               	movlw	96
  4771  003ABE  6ED3               	movwf	4051,c	;volatile
  4772  003AC0  0012               	return		;funcret
  4773  003AC2                     __end_of_init_UART:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           intcon2	equ	0xFF1
  4782                           intcon3	equ	0xFF0
  4783                           postinc0	equ	0xFEE
  4784                           wreg	equ	0xFE8
  4785                           postdec1	equ	0xFE5
  4786                           fsr1l	equ	0xFE1
  4787                           status	equ	0xFD8
  4788                           
  4789 ;; *************** function _OpenUSART *****************
  4790 ;; Defined at:
  4791 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  config          1    wreg     unsigned char 
  4794 ;;  spbrg           2   14[COMRAM] unsigned int 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  config          1   16[COMRAM] unsigned char 
  4797 ;; Return value:  Size  Location     Type
  4798 ;;		None               void
  4799 ;; Registers used:
  4800 ;;		wreg, status,2
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4806 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;Total ram usage:        3 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    2
  4813 ;; This function calls:
  4814 ;;		Nothing
  4815 ;; This function is called by:
  4816 ;;		_init_UART
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text16
  4821  0032B6                     __ptext16:
  4822                           	opt stack 0
  4823  0032B6                     _OpenUSART:
  4824                           	opt stack 26
  4825                           
  4826                           ;incstack = 0
  4827                           ;OpenUSART@config stored from wreg
  4828  0032B6  6E11               	movwf	OpenUSART@config,c
  4829  0032B8  0E00               	movlw	0
  4830  0032BA  6EAC               	movwf	4012,c	;volatile
  4831  0032BC  0E00               	movlw	0
  4832  0032BE  6EAB               	movwf	4011,c	;volatile
  4833  0032C0  A011               	btfss	OpenUSART@config,0,c
  4834  0032C2  D002               	goto	l6772
  4835  0032C4  88AC               	bsf	4012,4,c	;volatile
  4836  0032C6  D000               	goto	l6772
  4837  0032C8                     l6772:
  4838  0032C8  A211               	btfss	OpenUSART@config,1,c
  4839  0032CA  D003               	goto	l6776
  4840  0032CC  8CAC               	bsf	4012,6,c	;volatile
  4841  0032CE  8CAB               	bsf	4011,6,c	;volatile
  4842  0032D0  D000               	goto	l6776
  4843  0032D2                     l6776:
  4844  0032D2  A411               	btfss	OpenUSART@config,2,c
  4845  0032D4  D002               	goto	l6780
  4846  0032D6  8EAC               	bsf	4012,7,c	;volatile
  4847  0032D8  D000               	goto	l6780
  4848  0032DA                     l6780:
  4849  0032DA  A611               	btfss	OpenUSART@config,3,c
  4850  0032DC  D002               	goto	l691
  4851  0032DE  88AB               	bsf	4011,4,c	;volatile
  4852  0032E0  D002               	goto	l6784
  4853  0032E2                     l691:
  4854  0032E2  8AAB               	bsf	4011,5,c	;volatile
  4855  0032E4  D000               	goto	l6784
  4856  0032E6                     l6784:
  4857  0032E6  B811               	btfsc	OpenUSART@config,4,c
  4858  0032E8  84AC               	bsf	4012,2,c	;volatile
  4859  0032EA  989E               	bcf	3998,4,c	;volatile
  4860  0032EC  AA11               	btfss	OpenUSART@config,5,c
  4861  0032EE  D002               	goto	l6792
  4862  0032F0  86AB               	bsf	4011,3,c	;volatile
  4863  0032F2  D000               	goto	l6792
  4864  0032F4                     l6792:
  4865  0032F4  AC11               	btfss	OpenUSART@config,6,c
  4866  0032F6  D002               	goto	l695
  4867  0032F8  8A9D               	bsf	3997,5,c	;volatile
  4868  0032FA  D001               	goto	l696
  4869  0032FC                     l695:
  4870  0032FC  9A9D               	bcf	3997,5,c	;volatile
  4871  0032FE                     l696:
  4872  0032FE  9A9E               	bcf	3998,5,c	;volatile
  4873  003300  AE11               	btfss	OpenUSART@config,7,c
  4874  003302  D002               	goto	l697
  4875  003304  889D               	bsf	3997,4,c	;volatile
  4876  003306  D001               	goto	l698
  4877  003308                     l697:
  4878  003308  989D               	bcf	3997,4,c	;volatile
  4879  00330A                     l698:
  4880  00330A  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4881  00330E  5010               	movf	OpenUSART@spbrg+1,w,c
  4882  003310  6EB0               	movwf	4016,c	;volatile
  4883  003312  8AAC               	bsf	4012,5,c	;volatile
  4884  003314  8EAB               	bsf	4011,7,c	;volatile
  4885  003316  9C94               	bcf	3988,6,c	;volatile
  4886  003318  8E94               	bsf	3988,7,c	;volatile
  4887  00331A  B8AC               	btfsc	4012,4,c	;volatile
  4888  00331C  BEAC               	btfsc	4012,7,c	;volatile
  4889  00331E  D002               	goto	l700
  4890  003320  8C94               	bsf	3988,6,c	;volatile
  4891  003322  D000               	goto	l700
  4892  003324                     l700:
  4893  003324  0012               	return		;funcret
  4894  003326                     __end_of_OpenUSART:
  4895                           	opt stack 0
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodl	equ	0xFF3
  4901                           intcon	equ	0xFF2
  4902                           intcon2	equ	0xFF1
  4903                           intcon3	equ	0xFF0
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           postdec1	equ	0xFE5
  4907                           fsr1l	equ	0xFE1
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _Init_Tris *****************
  4911 ;; Defined at:
  4912 ;;		line 262 in file "Lab8.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;		None               void
  4919 ;; Registers used:
  4920 ;;		wreg, status,2
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;Total ram usage:        0 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    2
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_Do_Init
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text17
  4941  003A98                     __ptext17:
  4942                           	opt stack 0
  4943  003A98                     _Init_Tris:
  4944                           	opt stack 27
  4945                           
  4946                           ;Lab8.c: 263: TRISA = 0x07;
  4947                           
  4948                           ;incstack = 0
  4949  003A98  0E07               	movlw	7
  4950  003A9A  6E92               	movwf	3986,c	;volatile
  4951                           
  4952                           ;Lab8.c: 264: TRISB = 0x07;
  4953  003A9C  0E07               	movlw	7
  4954  003A9E  6E93               	movwf	3987,c	;volatile
  4955                           
  4956                           ;Lab8.c: 265: TRISC = 0x00;
  4957  003AA0  0E00               	movlw	0
  4958  003AA2  6E94               	movwf	3988,c	;volatile
  4959                           
  4960                           ;Lab8.c: 266: TRISD = 0x00;
  4961  003AA4  0E00               	movlw	0
  4962  003AA6  6E95               	movwf	3989,c	;volatile
  4963                           
  4964                           ;Lab8.c: 267: TRISE = 0x00;
  4965  003AA8  0E00               	movlw	0
  4966  003AAA  6E96               	movwf	3990,c	;volatile
  4967  003AAC  0012               	return		;funcret
  4968  003AAE                     __end_of_Init_Tris:
  4969                           	opt stack 0
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           intcon2	equ	0xFF1
  4977                           intcon3	equ	0xFF0
  4978                           postinc0	equ	0xFEE
  4979                           wreg	equ	0xFE8
  4980                           postdec1	equ	0xFE5
  4981                           fsr1l	equ	0xFE1
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function _Init_ADC *****************
  4985 ;; Defined at:
  4986 ;;		line 270 in file "Lab8.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;		None
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;		None               void
  4993 ;; Registers used:
  4994 ;;		wreg, status,2
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;Total ram usage:        0 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    2
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_Do_Init
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text18
  5015  003B34                     __ptext18:
  5016                           	opt stack 0
  5017  003B34                     _Init_ADC:
  5018                           	opt stack 27
  5019                           
  5020                           ;Lab8.c: 271: ADCON1=0x0E;
  5021                           
  5022                           ;incstack = 0
  5023  003B34  0E0E               	movlw	14
  5024  003B36  6EC1               	movwf	4033,c	;volatile
  5025                           
  5026                           ;Lab8.c: 272: ADCON2=0xA9;
  5027  003B38  0EA9               	movlw	169
  5028  003B3A  6EC0               	movwf	4032,c	;volatile
  5029  003B3C  0012               	return		;funcret
  5030  003B3E                     __end_of_Init_ADC:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodl	equ	0xFF3
  5037                           intcon	equ	0xFF2
  5038                           intcon2	equ	0xFF1
  5039                           intcon3	equ	0xFF0
  5040                           postinc0	equ	0xFEE
  5041                           wreg	equ	0xFE8
  5042                           postdec1	equ	0xFE5
  5043                           fsr1l	equ	0xFE1
  5044                           status	equ	0xFD8
  5045                           
  5046 ;; *************** function _Do_Flashing *****************
  5047 ;; Defined at:
  5048 ;;		line 335 in file "Lab8.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;		None
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;		None               void
  5055 ;; Registers used:
  5056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;Total ram usage:        0 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:   11
  5069 ;; This function calls:
  5070 ;;		_Set_EW
  5071 ;;		_Set_EWLT
  5072 ;;		_Set_NS
  5073 ;;		_Set_NSLT
  5074 ;;		_Wait_One_Second
  5075 ;; This function is called by:
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text19
  5081  00345C                     __ptext19:
  5082                           	opt stack 0
  5083  00345C                     _Do_Flashing:
  5084                           	opt stack 19
  5085                           
  5086                           ;Lab8.c: 336: FLASHING = 1;
  5087                           
  5088                           ;incstack = 0
  5089  00345C  0E01               	movlw	1
  5090  00345E  D006               	goto	L1
  5091  003460                     l7250:
  5092                           
  5093                           ;Lab8.c: 338: if(FLASHING_REQUEST){
  5094  003460  5064               	movf	_FLASHING_REQUEST,w,c
  5095  003462  B4D8               	btfsc	status,2,c
  5096  003464  D005               	goto	l7254
  5097                           
  5098                           ;Lab8.c: 339: FLASHING_REQUEST = 0;
  5099  003466  0E00               	movlw	0
  5100  003468  6E64               	movwf	_FLASHING_REQUEST,c
  5101                           
  5102                           ;Lab8.c: 340: FLASHING = 0;
  5103  00346A  0E00               	movlw	0
  5104  00346C                     L1:
  5105  00346C  6E63               	movwf	_FLASHING,c
  5106                           
  5107                           ;Lab8.c: 341: }else if(!FLASHING_REQUEST){
  5108  00346E  D020               	goto	l7270
  5109  003470                     l7254:
  5110  003470  5064               	movf	_FLASHING_REQUEST,w,c
  5111  003472  A4D8               	btfss	status,2,c
  5112  003474  D01D               	goto	l7270
  5113                           
  5114                           ;Lab8.c: 342: Set_NS(1);
  5115  003476  0E01               	movlw	1
  5116  003478  EC6F  F01B         	call	_Set_NS
  5117                           
  5118                           ;Lab8.c: 343: Set_NSLT(1);
  5119  00347C  0E01               	movlw	1
  5120  00347E  EC4D  F01B         	call	_Set_NSLT
  5121                           
  5122                           ;Lab8.c: 344: Set_EW(1);
  5123  003482  0E01               	movlw	1
  5124  003484  ECB3  F01B         	call	_Set_EW
  5125                           
  5126                           ;Lab8.c: 345: Set_EWLT(1);
  5127  003488  0E01               	movlw	1
  5128  00348A  EC91  F01B         	call	_Set_EWLT
  5129                           
  5130                           ;Lab8.c: 346: Wait_One_Second();
  5131  00348E  ECD9  F018         	call	_Wait_One_Second	;wreg free
  5132                           
  5133                           ;Lab8.c: 347: Set_NS(0);
  5134  003492  0E00               	movlw	0
  5135  003494  EC6F  F01B         	call	_Set_NS
  5136                           
  5137                           ;Lab8.c: 348: Set_NSLT(0);
  5138  003498  0E00               	movlw	0
  5139  00349A  EC4D  F01B         	call	_Set_NSLT
  5140                           
  5141                           ;Lab8.c: 349: Set_EW(0);
  5142  00349E  0E00               	movlw	0
  5143  0034A0  ECB3  F01B         	call	_Set_EW
  5144                           
  5145                           ;Lab8.c: 350: Set_EWLT(0);
  5146  0034A4  0E00               	movlw	0
  5147  0034A6  EC91  F01B         	call	_Set_EWLT
  5148                           
  5149                           ;Lab8.c: 351: Wait_One_Second();
  5150  0034AA  ECD9  F018         	call	_Wait_One_Second	;wreg free
  5151  0034AE  D000               	goto	l7270
  5152  0034B0                     l7270:
  5153  0034B0  5063               	movf	_FLASHING,w,c
  5154  0034B2  A4D8               	btfss	status,2,c
  5155  0034B4  D7D5               	goto	l7250
  5156  0034B6  0012               	return		;funcret
  5157  0034B8                     __end_of_Do_Flashing:
  5158                           	opt stack 0
  5159                           tblptru	equ	0xFF8
  5160                           tblptrh	equ	0xFF7
  5161                           tblptrl	equ	0xFF6
  5162                           tablat	equ	0xFF5
  5163                           prodl	equ	0xFF3
  5164                           intcon	equ	0xFF2
  5165                           intcon2	equ	0xFF1
  5166                           intcon3	equ	0xFF0
  5167                           postinc0	equ	0xFEE
  5168                           wreg	equ	0xFE8
  5169                           postdec1	equ	0xFE5
  5170                           fsr1l	equ	0xFE1
  5171                           status	equ	0xFD8
  5172                           
  5173 ;; *************** function _Day_Mode *****************
  5174 ;; Defined at:
  5175 ;;		line 470 in file "Lab8.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;		None
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;		None
  5180 ;; Return value:  Size  Location     Type
  5181 ;;		None               void
  5182 ;; Registers used:
  5183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;Total ram usage:        0 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:   12
  5196 ;; This function calls:
  5197 ;;		_PED_Control
  5198 ;;		_Set_EW
  5199 ;;		_Set_EWLT
  5200 ;;		_Set_NS
  5201 ;;		_Set_NSLT
  5202 ;;		_Wait_N_Seconds
  5203 ;; This function is called by:
  5204 ;;		_main
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text20
  5209  0029F4                     __ptext20:
  5210                           	opt stack 0
  5211  0029F4                     _Day_Mode:
  5212                           	opt stack 18
  5213                           
  5214                           ;Lab8.c: 471: MODE = 1;
  5215                           
  5216                           ;incstack = 0
  5217  0029F4  0E00               	movlw	0
  5218  0029F6  0100               	movlb	0	; () banked
  5219  0029F8  6F8A               	movwf	(_MODE+1)& (0+255),b
  5220  0029FA  0E01               	movlw	1
  5221  0029FC  6F89               	movwf	_MODE& (0+255),b
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;Lab8.c: 472: PORTBbits.RB7 = 1;
  5225  0029FE  8E81               	bsf	3969,7,c	;volatile
  5226                           
  5227                           ;Lab8.c: 473: Act_Mode_Txt[0] = 'D';
  5228  002A00  0E44               	movlw	68
  5229  002A02  0100               	movlb	0	; () banked
  5230  002A04  6FC8               	movwf	_Act_Mode_Txt& (0+255),b
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;Lab8.c: 474: Set_NSLT(1);
  5234  002A06  0E01               	movlw	1
  5235  002A08  EC4D  F01B         	call	_Set_NSLT
  5236                           
  5237                           ;Lab8.c: 475: Set_EW(1);
  5238  002A0C  0E01               	movlw	1
  5239  002A0E  ECB3  F01B         	call	_Set_EW
  5240                           
  5241                           ;Lab8.c: 476: Set_EWLT(1);
  5242  002A12  0E01               	movlw	1
  5243  002A14  EC91  F01B         	call	_Set_EWLT
  5244                           
  5245                           ;Lab8.c: 477: Set_NS(2);
  5246  002A18  0E02               	movlw	2
  5247  002A1A  EC6F  F01B         	call	_Set_NS
  5248                           
  5249                           ;Lab8.c: 479: if(NSPED_SW){
  5250  002A1E  5065               	movf	_NSPED_SW,w,c
  5251  002A20  B4D8               	btfsc	status,2,c
  5252  002A22  D006               	goto	l537
  5253                           
  5254                           ;Lab8.c: 480: PED_Control(0,8);
  5255  002A24  0E08               	movlw	8
  5256  002A26  0100               	movlb	0	; () banked
  5257  002A28  6FEF               	movwf	PED_Control@Num_Sec& (0+255),b
  5258  002A2A  0E00               	movlw	0
  5259  002A2C  ECD8  F01A         	call	_PED_Control
  5260  002A30                     l537:
  5261                           
  5262                           ;Lab8.c: 481: }
  5263                           ;Lab8.c: 483: Wait_N_Seconds(7);
  5264  002A30  0E07               	movlw	7
  5265  002A32  EC53  F01C         	call	_Wait_N_Seconds
  5266                           
  5267                           ;Lab8.c: 484: Set_NS(3);
  5268  002A36  0E03               	movlw	3
  5269  002A38  EC6F  F01B         	call	_Set_NS
  5270                           
  5271                           ;Lab8.c: 485: Wait_N_Seconds(3);
  5272  002A3C  0E03               	movlw	3
  5273  002A3E  EC53  F01C         	call	_Wait_N_Seconds
  5274                           
  5275                           ;Lab8.c: 486: Set_NS(1);
  5276  002A42  0E01               	movlw	1
  5277  002A44  EC6F  F01B         	call	_Set_NS
  5278                           
  5279                           ;Lab8.c: 488: if(PORTAbits.RA2){
  5280  002A48  A480               	btfss	3968,2,c	;volatile
  5281  002A4A  D010               	goto	l7174
  5282                           
  5283                           ;Lab8.c: 489: Set_EWLT(2);
  5284  002A4C  0E02               	movlw	2
  5285  002A4E  EC91  F01B         	call	_Set_EWLT
  5286                           
  5287                           ;Lab8.c: 490: Wait_N_Seconds(8);
  5288  002A52  0E08               	movlw	8
  5289  002A54  EC53  F01C         	call	_Wait_N_Seconds
  5290                           
  5291                           ;Lab8.c: 491: Set_EWLT(3);
  5292  002A58  0E03               	movlw	3
  5293  002A5A  EC91  F01B         	call	_Set_EWLT
  5294                           
  5295                           ;Lab8.c: 492: Wait_N_Seconds(3);
  5296  002A5E  0E03               	movlw	3
  5297  002A60  EC53  F01C         	call	_Wait_N_Seconds
  5298                           
  5299                           ;Lab8.c: 493: Set_EWLT(1);
  5300  002A64  0E01               	movlw	1
  5301  002A66  EC91  F01B         	call	_Set_EWLT
  5302  002A6A  D000               	goto	l7174
  5303  002A6C                     l7174:
  5304                           
  5305                           ;Lab8.c: 494: }
  5306                           ;Lab8.c: 496: Set_EW(2);
  5307  002A6C  0E02               	movlw	2
  5308  002A6E  ECB3  F01B         	call	_Set_EW
  5309                           
  5310                           ;Lab8.c: 497: if(EWPED_SW){
  5311  002A72  5062               	movf	_EWPED_SW,w,c
  5312  002A74  B4D8               	btfsc	status,2,c
  5313  002A76  D007               	goto	l7180
  5314                           
  5315                           ;Lab8.c: 498: PED_Control(1,9);
  5316  002A78  0E09               	movlw	9
  5317  002A7A  0100               	movlb	0	; () banked
  5318  002A7C  6FEF               	movwf	PED_Control@Num_Sec& (0+255),b
  5319  002A7E  0E01               	movlw	1
  5320  002A80  ECD8  F01A         	call	_PED_Control
  5321  002A84  D000               	goto	l7180
  5322  002A86                     l7180:
  5323                           
  5324                           ;Lab8.c: 499: }
  5325                           ;Lab8.c: 502: Set_EW(2);
  5326  002A86  0E02               	movlw	2
  5327  002A88  ECB3  F01B         	call	_Set_EW
  5328                           
  5329                           ;Lab8.c: 503: Wait_N_Seconds(9);
  5330  002A8C  0E09               	movlw	9
  5331  002A8E  EC53  F01C         	call	_Wait_N_Seconds
  5332                           
  5333                           ;Lab8.c: 504: Set_EW(3);
  5334  002A92  0E03               	movlw	3
  5335  002A94  ECB3  F01B         	call	_Set_EW
  5336                           
  5337                           ;Lab8.c: 505: Wait_N_Seconds(3);
  5338  002A98  0E03               	movlw	3
  5339  002A9A  EC53  F01C         	call	_Wait_N_Seconds
  5340                           
  5341                           ;Lab8.c: 506: Set_EW(1);
  5342  002A9E  0E01               	movlw	1
  5343  002AA0  ECB3  F01B         	call	_Set_EW
  5344                           
  5345                           ;Lab8.c: 508: if(PORTAbits.RA1){
  5346  002AA4  A280               	btfss	3968,1,c	;volatile
  5347  002AA6  D00D               	goto	l7196
  5348                           
  5349                           ;Lab8.c: 509: Set_NSLT(2);
  5350  002AA8  0E02               	movlw	2
  5351  002AAA  EC4D  F01B         	call	_Set_NSLT
  5352                           
  5353                           ;Lab8.c: 510: Wait_N_Seconds(8);
  5354  002AAE  0E08               	movlw	8
  5355  002AB0  EC53  F01C         	call	_Wait_N_Seconds
  5356                           
  5357                           ;Lab8.c: 511: Set_NSLT(3);
  5358  002AB4  0E03               	movlw	3
  5359  002AB6  EC4D  F01B         	call	_Set_NSLT
  5360                           
  5361                           ;Lab8.c: 512: Wait_N_Seconds(3);
  5362  002ABA  0E03               	movlw	3
  5363  002ABC  EC53  F01C         	call	_Wait_N_Seconds
  5364  002AC0  D000               	goto	l7196
  5365  002AC2                     l7196:
  5366                           
  5367                           ;Lab8.c: 513: }
  5368                           ;Lab8.c: 514: Set_NSLT(1);
  5369  002AC2  0E01               	movlw	1
  5370  002AC4  EC4D  F01B         	call	_Set_NSLT
  5371  002AC8  0012               	return		;funcret
  5372  002ACA                     __end_of_Day_Mode:
  5373                           	opt stack 0
  5374                           tblptru	equ	0xFF8
  5375                           tblptrh	equ	0xFF7
  5376                           tblptrl	equ	0xFF6
  5377                           tablat	equ	0xFF5
  5378                           prodl	equ	0xFF3
  5379                           intcon	equ	0xFF2
  5380                           intcon2	equ	0xFF1
  5381                           intcon3	equ	0xFF0
  5382                           postinc0	equ	0xFEE
  5383                           wreg	equ	0xFE8
  5384                           postdec1	equ	0xFE5
  5385                           fsr1l	equ	0xFE1
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _Wait_N_Seconds *****************
  5389 ;; Defined at:
  5390 ;;		line 325 in file "Lab8.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  seconds         1    wreg     unsigned char 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  seconds         1   23[BANK0 ] unsigned char 
  5395 ;;  I               1   24[BANK0 ] unsigned char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;		None               void
  5398 ;; Registers used:
  5399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;Total ram usage:        2 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:   11
  5412 ;; This function calls:
  5413 ;;		_Wait_One_Second
  5414 ;;		_update_LCD_count
  5415 ;; This function is called by:
  5416 ;;		_Night_Mode
  5417 ;;		_Day_Mode
  5418 ;; This function uses a non-reentrant model
  5419 ;;
  5420                           
  5421                           	psect	text21
  5422  0038A6                     __ptext21:
  5423                           	opt stack 0
  5424  0038A6                     _Wait_N_Seconds:
  5425                           	opt stack 18
  5426                           
  5427                           ;incstack = 0
  5428                           ;Wait_N_Seconds@seconds stored from wreg
  5429  0038A6  0100               	movlb	0	; () banked
  5430  0038A8  6FEF               	movwf	Wait_N_Seconds@seconds& (0+255),b
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;Lab8.c: 327: char I;
  5434                           ;Lab8.c: 328: for (I = seconds; I> 0; I--)
  5435  0038AA  C0EF  F0F0         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  5436  0038AE                     l6940:
  5437                           
  5438                           ; BSR set to: 0
  5439  0038AE  0100               	movlb	0	; () banked
  5440  0038B0  51F0               	movf	Wait_N_Seconds@I& (0+255),w,b
  5441  0038B2  0100               	movlb	0	; () banked
  5442  0038B4  B4D8               	btfsc	status,2,c
  5443  0038B6  D00C               	goto	l6950
  5444  0038B8  D001               	goto	l6944
  5445                           
  5446                           ; BSR set to: 0
  5447  0038BA  D00A               	goto	l6950
  5448  0038BC                     l6944:
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;Lab8.c: 329: {
  5452                           ;Lab8.c: 330: update_LCD_count(direction, I);
  5453  0038BC  C0F0  F048         	movff	Wait_N_Seconds@I,update_LCD_count@count
  5454  0038C0  506F               	movf	_direction,w,c
  5455  0038C2  ECA1  F00E         	call	_update_LCD_count
  5456                           
  5457                           ;Lab8.c: 331: Wait_One_Second();
  5458  0038C6  ECD9  F018         	call	_Wait_One_Second	;wreg free
  5459  0038CA  0100               	movlb	0	; () banked
  5460  0038CC  07F0               	decf	Wait_N_Seconds@I& (0+255),f,b
  5461  0038CE  D7EF               	goto	l6940
  5462  0038D0                     l6950:
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;Lab8.c: 332: }
  5466                           ;Lab8.c: 333: update_LCD_count(direction, 0);
  5467  0038D0  0E00               	movlw	0
  5468  0038D2  6E48               	movwf	update_LCD_count@count,c
  5469  0038D4  506F               	movf	_direction,w,c
  5470  0038D6  ECA1  F00E         	call	_update_LCD_count
  5471  0038DA  0012               	return		;funcret
  5472  0038DC                     __end_of_Wait_N_Seconds:
  5473                           	opt stack 0
  5474                           tblptru	equ	0xFF8
  5475                           tblptrh	equ	0xFF7
  5476                           tblptrl	equ	0xFF6
  5477                           tablat	equ	0xFF5
  5478                           prodl	equ	0xFF3
  5479                           intcon	equ	0xFF2
  5480                           intcon2	equ	0xFF1
  5481                           intcon3	equ	0xFF0
  5482                           postinc0	equ	0xFEE
  5483                           wreg	equ	0xFE8
  5484                           postdec1	equ	0xFE5
  5485                           fsr1l	equ	0xFE1
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function _update_LCD_count *****************
  5489 ;; Defined at:
  5490 ;;		line 651 in file "Lab8.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  direction       1    wreg     unsigned char 
  5493 ;;  count           1   71[COMRAM] unsigned char 
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  direction       1   72[COMRAM] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5505 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;Total ram usage:        2 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    9
  5512 ;; This function calls:
  5513 ;;		___awdiv
  5514 ;;		___awmod
  5515 ;;		_drawtext
  5516 ;; This function is called by:
  5517 ;;		_Wait_N_Seconds
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text22
  5522  001D42                     __ptext22:
  5523                           	opt stack 0
  5524  001D42                     _update_LCD_count:
  5525                           	opt stack 19
  5526                           
  5527                           ;incstack = 0
  5528                           ;update_LCD_count@direction stored from wreg
  5529  001D42  6E49               	movwf	update_LCD_count@direction,c
  5530                           
  5531                           ;Lab8.c: 652: switch (direction)
  5532  001D44  D0B6               	goto	l6852
  5533  001D46                     l6834:
  5534                           
  5535                           ;Lab8.c: 655: NS_Count[0] = count/10 + '0';
  5536  001D46  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5537  001D4A  6A16               	clrf	___awdiv@dividend+1,c
  5538  001D4C  0E00               	movlw	0
  5539  001D4E  6E18               	movwf	___awdiv@divisor+1,c
  5540  001D50  0E0A               	movlw	10
  5541  001D52  6E17               	movwf	___awdiv@divisor,c
  5542  001D54  ECED  F016         	call	___awdiv	;wreg free
  5543  001D58  5015               	movf	?___awdiv,w,c
  5544  001D5A  0F30               	addlw	48
  5545  001D5C  0100               	movlb	0	; () banked
  5546  001D5E  6FBF               	movwf	_NS_Count& (0+255),b
  5547                           
  5548                           ;Lab8.c: 656: NS_Count[1] = count%10 + '0';
  5549  001D60  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5550  001D64  6A10               	clrf	___awmod@dividend+1,c
  5551  001D66  0E00               	movlw	0
  5552  001D68  6E12               	movwf	___awmod@divisor+1,c
  5553  001D6A  0E0A               	movlw	10
  5554  001D6C  6E11               	movwf	___awmod@divisor,c
  5555  001D6E  EC1A  F019         	call	___awmod	;wreg free
  5556  001D72  500F               	movf	?___awmod,w,c
  5557  001D74  0F30               	addlw	48
  5558  001D76  0100               	movlb	0	; () banked
  5559  001D78  6FC0               	movwf	(_NS_Count+1)& (0+255),b
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;Lab8.c: 657: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  5563  001D7A  0E1E               	movlw	30
  5564  001D7C  6E37               	movwf	drawtext@y,c
  5565  001D7E  0EBF               	movlw	low _NS_Count
  5566  001D80  6E38               	movwf	drawtext@_text,c
  5567  001D82  0E00               	movlw	high _NS_Count
  5568  001D84  6E39               	movwf	drawtext@_text+1,c
  5569  001D86  0E00               	movlw	0
  5570  001D88  6E3B               	movwf	drawtext@color+1,c
  5571  001D8A  0E1F               	movlw	31
  5572  001D8C  6E3A               	movwf	drawtext@color,c
  5573  001D8E  0E00               	movlw	0
  5574  001D90  6E3D               	movwf	drawtext@bg+1,c
  5575  001D92  0E00               	movlw	0
  5576  001D94  6E3C               	movwf	drawtext@bg,c
  5577  001D96  0E02               	movlw	2
  5578  001D98  6E3E               	movwf	drawtext@size,c
  5579  001D9A  0E64               	movlw	100
  5580  001D9C  EC1D  F014         	call	_drawtext
  5581                           
  5582                           ;Lab8.c: 658: break;
  5583  001DA0  D096               	goto	l560
  5584  001DA2                     l6838:
  5585                           
  5586                           ;Lab8.c: 661: NSLT_Count[0] = count/10 + '0';
  5587  001DA2  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5588  001DA6  6A16               	clrf	___awdiv@dividend+1,c
  5589  001DA8  0E00               	movlw	0
  5590  001DAA  6E18               	movwf	___awdiv@divisor+1,c
  5591  001DAC  0E0A               	movlw	10
  5592  001DAE  6E17               	movwf	___awdiv@divisor,c
  5593  001DB0  ECED  F016         	call	___awdiv	;wreg free
  5594  001DB4  5015               	movf	?___awdiv,w,c
  5595  001DB6  0F30               	addlw	48
  5596  001DB8  0100               	movlb	0	; () banked
  5597  001DBA  6FBC               	movwf	_NSLT_Count& (0+255),b
  5598                           
  5599                           ;Lab8.c: 662: NSLT_Count[1] = count%10 + '0';
  5600  001DBC  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5601  001DC0  6A10               	clrf	___awmod@dividend+1,c
  5602  001DC2  0E00               	movlw	0
  5603  001DC4  6E12               	movwf	___awmod@divisor+1,c
  5604  001DC6  0E0A               	movlw	10
  5605  001DC8  6E11               	movwf	___awmod@divisor,c
  5606  001DCA  EC1A  F019         	call	___awmod	;wreg free
  5607  001DCE  500F               	movf	?___awmod,w,c
  5608  001DD0  0F30               	addlw	48
  5609  001DD2  0100               	movlb	0	; () banked
  5610  001DD4  6FBD               	movwf	(_NSLT_Count+1)& (0+255),b
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;Lab8.c: 663: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5614  001DD6  0E3C               	movlw	60
  5615  001DD8  6E37               	movwf	drawtext@y,c
  5616  001DDA  0EBC               	movlw	low _NSLT_Count
  5617  001DDC  6E38               	movwf	drawtext@_text,c
  5618  001DDE  0E00               	movlw	high _NSLT_Count
  5619  001DE0  6E39               	movwf	drawtext@_text+1,c
  5620  001DE2  0EF8               	movlw	248
  5621  001DE4  6E3B               	movwf	drawtext@color+1,c
  5622  001DE6  0E1F               	movlw	31
  5623  001DE8  6E3A               	movwf	drawtext@color,c
  5624  001DEA  0E00               	movlw	0
  5625  001DEC  6E3D               	movwf	drawtext@bg+1,c
  5626  001DEE  0E00               	movlw	0
  5627  001DF0  6E3C               	movwf	drawtext@bg,c
  5628  001DF2  0E02               	movlw	2
  5629  001DF4  6E3E               	movwf	drawtext@size,c
  5630  001DF6  0E64               	movlw	100
  5631  001DF8  EC1D  F014         	call	_drawtext
  5632                           
  5633                           ;Lab8.c: 664: break;
  5634  001DFC  D068               	goto	l560
  5635  001DFE                     l6842:
  5636                           
  5637                           ;Lab8.c: 667: EW_Count[0] = count/10 + '0';
  5638  001DFE  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5639  001E02  6A16               	clrf	___awdiv@dividend+1,c
  5640  001E04  0E00               	movlw	0
  5641  001E06  6E18               	movwf	___awdiv@divisor+1,c
  5642  001E08  0E0A               	movlw	10
  5643  001E0A  6E17               	movwf	___awdiv@divisor,c
  5644  001E0C  ECED  F016         	call	___awdiv	;wreg free
  5645  001E10  5015               	movf	?___awdiv,w,c
  5646  001E12  0F30               	addlw	48
  5647  001E14  0100               	movlb	0	; () banked
  5648  001E16  6FB9               	movwf	_EW_Count& (0+255),b
  5649                           
  5650                           ;Lab8.c: 668: EW_Count[1] = count%10 + '0';
  5651  001E18  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5652  001E1C  6A10               	clrf	___awmod@dividend+1,c
  5653  001E1E  0E00               	movlw	0
  5654  001E20  6E12               	movwf	___awmod@divisor+1,c
  5655  001E22  0E0A               	movlw	10
  5656  001E24  6E11               	movwf	___awmod@divisor,c
  5657  001E26  EC1A  F019         	call	___awmod	;wreg free
  5658  001E2A  500F               	movf	?___awmod,w,c
  5659  001E2C  0F30               	addlw	48
  5660  001E2E  0100               	movlb	0	; () banked
  5661  001E30  6FBA               	movwf	(_EW_Count+1)& (0+255),b
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;Lab8.c: 669: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5665  001E32  0E5A               	movlw	90
  5666  001E34  6E37               	movwf	drawtext@y,c
  5667  001E36  0EB9               	movlw	low _EW_Count
  5668  001E38  6E38               	movwf	drawtext@_text,c
  5669  001E3A  0E00               	movlw	high _EW_Count
  5670  001E3C  6E39               	movwf	drawtext@_text+1,c
  5671  001E3E  0E07               	movlw	7
  5672  001E40  6E3B               	movwf	drawtext@color+1,c
  5673  001E42  683A               	setf	drawtext@color,c
  5674  001E44  0E00               	movlw	0
  5675  001E46  6E3D               	movwf	drawtext@bg+1,c
  5676  001E48  0E00               	movlw	0
  5677  001E4A  6E3C               	movwf	drawtext@bg,c
  5678  001E4C  0E02               	movlw	2
  5679  001E4E  6E3E               	movwf	drawtext@size,c
  5680  001E50  0E64               	movlw	100
  5681  001E52  EC1D  F014         	call	_drawtext
  5682                           
  5683                           ;Lab8.c: 670: break;
  5684  001E56  D03B               	goto	l560
  5685  001E58                     l6846:
  5686                           
  5687                           ;Lab8.c: 673: EWLT_Count[0] = count/10 + '0';
  5688  001E58  C048  F015         	movff	update_LCD_count@count,___awdiv@dividend
  5689  001E5C  6A16               	clrf	___awdiv@dividend+1,c
  5690  001E5E  0E00               	movlw	0
  5691  001E60  6E18               	movwf	___awdiv@divisor+1,c
  5692  001E62  0E0A               	movlw	10
  5693  001E64  6E17               	movwf	___awdiv@divisor,c
  5694  001E66  ECED  F016         	call	___awdiv	;wreg free
  5695  001E6A  5015               	movf	?___awdiv,w,c
  5696  001E6C  0F30               	addlw	48
  5697  001E6E  0100               	movlb	0	; () banked
  5698  001E70  6FB6               	movwf	_EWLT_Count& (0+255),b
  5699                           
  5700                           ;Lab8.c: 674: EWLT_Count[1] = count%10 + '0';
  5701  001E72  C048  F00F         	movff	update_LCD_count@count,___awmod@dividend
  5702  001E76  6A10               	clrf	___awmod@dividend+1,c
  5703  001E78  0E00               	movlw	0
  5704  001E7A  6E12               	movwf	___awmod@divisor+1,c
  5705  001E7C  0E0A               	movlw	10
  5706  001E7E  6E11               	movwf	___awmod@divisor,c
  5707  001E80  EC1A  F019         	call	___awmod	;wreg free
  5708  001E84  500F               	movf	?___awmod,w,c
  5709  001E86  0F30               	addlw	48
  5710  001E88  0100               	movlb	0	; () banked
  5711  001E8A  6FB7               	movwf	(_EWLT_Count+1)& (0+255),b
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;Lab8.c: 675: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5715  001E8C  0E78               	movlw	120
  5716  001E8E  6E37               	movwf	drawtext@y,c
  5717  001E90  0EB6               	movlw	low _EWLT_Count
  5718  001E92  6E38               	movwf	drawtext@_text,c
  5719  001E94  0E00               	movlw	high _EWLT_Count
  5720  001E96  6E39               	movwf	drawtext@_text+1,c
  5721  001E98  0EFF               	movlw	255
  5722  001E9A  6E3B               	movwf	drawtext@color+1,c
  5723  001E9C  683A               	setf	drawtext@color,c
  5724  001E9E  0E00               	movlw	0
  5725  001EA0  6E3D               	movwf	drawtext@bg+1,c
  5726  001EA2  0E00               	movlw	0
  5727  001EA4  6E3C               	movwf	drawtext@bg,c
  5728  001EA6  0E02               	movlw	2
  5729  001EA8  6E3E               	movwf	drawtext@size,c
  5730  001EAA  0E64               	movlw	100
  5731  001EAC  EC1D  F014         	call	_drawtext
  5732                           
  5733                           ;Lab8.c: 677: }
  5734                           
  5735                           ;Lab8.c: 676: break;
  5736  001EB0  D00E               	goto	l560
  5737  001EB2                     l6852:
  5738  001EB2  5049               	movf	update_LCD_count@direction,w,c
  5739                           
  5740                           ; Switch size 1, requested type "space"
  5741                           ; Number of cases is 4, Range of values is 0 to 3
  5742                           ; switch strategies available:
  5743                           ; Name         Instructions Cycles
  5744                           ; simple_byte           13     7 (average)
  5745                           ;	Chosen strategy is simple_byte
  5746  001EB4  0A00               	xorlw	0	; case 0
  5747  001EB6  B4D8               	btfsc	status,2,c
  5748  001EB8  D746               	goto	l6834
  5749  001EBA  0A01               	xorlw	1	; case 1
  5750  001EBC  B4D8               	btfsc	status,2,c
  5751  001EBE  D771               	goto	l6838
  5752  001EC0  0A03               	xorlw	3	; case 2
  5753  001EC2  B4D8               	btfsc	status,2,c
  5754  001EC4  D79C               	goto	l6842
  5755  001EC6  0A01               	xorlw	1	; case 3
  5756  001EC8  B4D8               	btfsc	status,2,c
  5757  001ECA  D7C6               	goto	l6846
  5758  001ECC  D000               	goto	l560
  5759  001ECE                     l560:
  5760  001ECE  0012               	return		;funcret
  5761  001ED0                     __end_of_update_LCD_count:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           intcon2	equ	0xFF1
  5770                           intcon3	equ	0xFF0
  5771                           postinc0	equ	0xFEE
  5772                           wreg	equ	0xFE8
  5773                           postdec1	equ	0xFE5
  5774                           fsr1l	equ	0xFE1
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function _Wait_One_Second *****************
  5778 ;; Defined at:
  5779 ;;		line 301 in file "Lab8.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;		None
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;		None
  5784 ;; Return value:  Size  Location     Type
  5785 ;;		None               void
  5786 ;; Registers used:
  5787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;Total ram usage:        0 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:   10
  5800 ;; This function calls:
  5801 ;;		_Wait_Half_Second
  5802 ;;		_drawtext
  5803 ;;		_strcpy
  5804 ;;		_update_LCD_misc
  5805 ;; This function is called by:
  5806 ;;		_Wait_N_Seconds
  5807 ;;		_Do_Flashing
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text23
  5812  0031B2                     __ptext23:
  5813                           	opt stack 0
  5814  0031B2                     _Wait_One_Second:
  5815                           	opt stack 18
  5816                           
  5817                           ;Lab8.c: 303: PORTDbits.RD7 = 1;
  5818                           
  5819                           ;incstack = 0
  5820  0031B2  8E83               	bsf	3971,7,c	;volatile
  5821                           
  5822                           ;Lab8.c: 304: strcpy(txt,"*");
  5823  0031B4  C05F  F00F         	movff	_txt,strcpy@to
  5824  0031B8  C060  F010         	movff	_txt+1,strcpy@to+1
  5825  0031BC  0EFD               	movlw	low STR_1
  5826  0031BE  6E11               	movwf	strcpy@from,c
  5827  0031C0  0EFF               	movlw	high STR_1
  5828  0031C2  6E12               	movwf	strcpy@from+1,c
  5829  0031C4  EC6E  F01C         	call	_strcpy	;wreg free
  5830                           
  5831                           ;Lab8.c: 305: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5832  0031C8  0E0A               	movlw	10
  5833  0031CA  6E37               	movwf	drawtext@y,c
  5834  0031CC  C05F  F038         	movff	_txt,drawtext@_text
  5835  0031D0  C060  F039         	movff	_txt+1,drawtext@_text+1
  5836  0031D4  0EFF               	movlw	255
  5837  0031D6  6E3B               	movwf	drawtext@color+1,c
  5838  0031D8  683A               	setf	drawtext@color,c
  5839  0031DA  0E00               	movlw	0
  5840  0031DC  6E3D               	movwf	drawtext@bg+1,c
  5841  0031DE  0E00               	movlw	0
  5842  0031E0  6E3C               	movwf	drawtext@bg,c
  5843  0031E2  0E01               	movlw	1
  5844  0031E4  6E3E               	movwf	drawtext@size,c
  5845  0031E6  0E78               	movlw	120
  5846  0031E8  EC1D  F014         	call	_drawtext
  5847                           
  5848                           ;Lab8.c: 306: Wait_Half_Second();
  5849  0031EC  EC25  F01D         	call	_Wait_Half_Second	;wreg free
  5850                           
  5851                           ;Lab8.c: 308: PORTDbits.RD7 = 0;
  5852  0031F0  9E83               	bcf	3971,7,c	;volatile
  5853                           
  5854                           ;Lab8.c: 309: strcpy(txt," ");
  5855  0031F2  C05F  F00F         	movff	_txt,strcpy@to
  5856  0031F6  C060  F010         	movff	_txt+1,strcpy@to+1
  5857  0031FA  0EFB               	movlw	low STR_2
  5858  0031FC  6E11               	movwf	strcpy@from,c
  5859  0031FE  0EFF               	movlw	high STR_2
  5860  003200  6E12               	movwf	strcpy@from+1,c
  5861  003202  EC6E  F01C         	call	_strcpy	;wreg free
  5862                           
  5863                           ;Lab8.c: 310: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5864  003206  0E0A               	movlw	10
  5865  003208  6E37               	movwf	drawtext@y,c
  5866  00320A  C05F  F038         	movff	_txt,drawtext@_text
  5867  00320E  C060  F039         	movff	_txt+1,drawtext@_text+1
  5868  003212  0EFF               	movlw	255
  5869  003214  6E3B               	movwf	drawtext@color+1,c
  5870  003216  683A               	setf	drawtext@color,c
  5871  003218  0E00               	movlw	0
  5872  00321A  6E3D               	movwf	drawtext@bg+1,c
  5873  00321C  0E00               	movlw	0
  5874  00321E  6E3C               	movwf	drawtext@bg,c
  5875  003220  0E01               	movlw	1
  5876  003222  6E3E               	movwf	drawtext@size,c
  5877  003224  0E78               	movlw	120
  5878  003226  EC1D  F014         	call	_drawtext
  5879                           
  5880                           ;Lab8.c: 311: Wait_Half_Second();
  5881  00322A  EC25  F01D         	call	_Wait_Half_Second	;wreg free
  5882                           
  5883                           ;Lab8.c: 312: update_LCD_misc();
  5884  00322E  ECC8  F00B         	call	_update_LCD_misc	;wreg free
  5885  003232  0012               	return		;funcret
  5886  003234                     __end_of_Wait_One_Second:
  5887                           	opt stack 0
  5888                           tblptru	equ	0xFF8
  5889                           tblptrh	equ	0xFF7
  5890                           tblptrl	equ	0xFF6
  5891                           tablat	equ	0xFF5
  5892                           prodl	equ	0xFF3
  5893                           intcon	equ	0xFF2
  5894                           intcon2	equ	0xFF1
  5895                           intcon3	equ	0xFF0
  5896                           postinc0	equ	0xFEE
  5897                           wreg	equ	0xFE8
  5898                           postdec1	equ	0xFE5
  5899                           fsr1l	equ	0xFE1
  5900                           status	equ	0xFD8
  5901                           
  5902 ;; *************** function _Set_NSLT *****************
  5903 ;; Defined at:
  5904 ;;		line 365 in file "Lab8.c"
  5905 ;; Parameters:    Size  Location     Type
  5906 ;;  color           1    wreg     unsigned char 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  color           1   67[COMRAM] unsigned char 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;		None               void
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;Total ram usage:        1 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    9
  5925 ;; This function calls:
  5926 ;;		_update_LCD_color
  5927 ;; This function is called by:
  5928 ;;		_Do_Flashing
  5929 ;;		_Night_Mode
  5930 ;;		_Day_Mode
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text24
  5935  00369A                     __ptext24:
  5936                           	opt stack 0
  5937  00369A                     _Set_NSLT:
  5938                           	opt stack 20
  5939                           
  5940                           ;incstack = 0
  5941                           ;Set_NSLT@color stored from wreg
  5942  00369A  6E44               	movwf	Set_NSLT@color,c
  5943                           
  5944                           ;Lab8.c: 366: direction = 1;
  5945  00369C  0E01               	movlw	1
  5946  00369E  6E6F               	movwf	_direction,c
  5947                           
  5948                           ;Lab8.c: 367: update_LCD_color(direction, color);
  5949  0036A0  C044  F041         	movff	Set_NSLT@color,update_LCD_color@color
  5950  0036A4  506F               	movf	_direction,w,c
  5951  0036A6  ECF5  F008         	call	_update_LCD_color
  5952                           
  5953                           ;Lab8.c: 368: switch(color){
  5954  0036AA  D00A               	goto	l6966
  5955  0036AC                     l490:
  5956  0036AC  9683               	bcf	3971,3,c	;volatile
  5957  0036AE  D001               	goto	L2
  5958  0036B0                     l492:
  5959  0036B0  8683               	bsf	3971,3,c	;volatile
  5960  0036B2                     L2:
  5961  0036B2  9883               	bcf	3971,4,c	;volatile
  5962  0036B4  D013               	goto	l495
  5963  0036B6                     l493:
  5964  0036B6  9683               	bcf	3971,3,c	;volatile
  5965  0036B8  D001               	goto	L3
  5966  0036BA                     l494:
  5967  0036BA  8683               	bsf	3971,3,c	;volatile
  5968  0036BC                     L3:
  5969  0036BC  8883               	bsf	3971,4,c	;volatile
  5970                           
  5971                           ;Lab8.c: 373: }
  5972  0036BE  D00E               	goto	l495
  5973  0036C0                     l6966:
  5974  0036C0  5044               	movf	Set_NSLT@color,w,c
  5975                           
  5976                           ; Switch size 1, requested type "space"
  5977                           ; Number of cases is 4, Range of values is 0 to 3
  5978                           ; switch strategies available:
  5979                           ; Name         Instructions Cycles
  5980                           ; simple_byte           13     7 (average)
  5981                           ;	Chosen strategy is simple_byte
  5982  0036C2  0A00               	xorlw	0	; case 0
  5983  0036C4  B4D8               	btfsc	status,2,c
  5984  0036C6  D7F2               	goto	l490
  5985  0036C8  0A01               	xorlw	1	; case 1
  5986  0036CA  B4D8               	btfsc	status,2,c
  5987  0036CC  D7F1               	goto	l492
  5988  0036CE  0A03               	xorlw	3	; case 2
  5989  0036D0  B4D8               	btfsc	status,2,c
  5990  0036D2  D7F1               	goto	l493
  5991  0036D4  0A01               	xorlw	1	; case 3
  5992  0036D6  B4D8               	btfsc	status,2,c
  5993  0036D8  D7F0               	goto	l494
  5994  0036DA  D000               	goto	l495
  5995  0036DC                     l495:
  5996  0036DC  0012               	return		;funcret
  5997  0036DE                     __end_of_Set_NSLT:
  5998                           	opt stack 0
  5999                           tblptru	equ	0xFF8
  6000                           tblptrh	equ	0xFF7
  6001                           tblptrl	equ	0xFF6
  6002                           tablat	equ	0xFF5
  6003                           prodl	equ	0xFF3
  6004                           intcon	equ	0xFF2
  6005                           intcon2	equ	0xFF1
  6006                           intcon3	equ	0xFF0
  6007                           postinc0	equ	0xFEE
  6008                           wreg	equ	0xFE8
  6009                           postdec1	equ	0xFE5
  6010                           fsr1l	equ	0xFE1
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _Set_NS *****************
  6014 ;; Defined at:
  6015 ;;		line 355 in file "Lab8.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  color           1    wreg     unsigned char 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;  color           1   67[COMRAM] unsigned char 
  6020 ;; Return value:  Size  Location     Type
  6021 ;;		None               void
  6022 ;; Registers used:
  6023 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : 0/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;Total ram usage:        1 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    9
  6036 ;; This function calls:
  6037 ;;		_update_LCD_color
  6038 ;; This function is called by:
  6039 ;;		_Do_Flashing
  6040 ;;		_Night_Mode
  6041 ;;		_Day_Mode
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           	psect	text25
  6046  0036DE                     __ptext25:
  6047                           	opt stack 0
  6048  0036DE                     _Set_NS:
  6049                           	opt stack 20
  6050                           
  6051                           ;incstack = 0
  6052                           ;Set_NS@color stored from wreg
  6053  0036DE  6E44               	movwf	Set_NS@color,c
  6054                           
  6055                           ;Lab8.c: 356: direction = 0;
  6056  0036E0  0E00               	movlw	0
  6057  0036E2  6E6F               	movwf	_direction,c
  6058                           
  6059                           ;Lab8.c: 357: update_LCD_color(direction, color);
  6060  0036E4  C044  F041         	movff	Set_NS@color,update_LCD_color@color
  6061  0036E8  506F               	movf	_direction,w,c
  6062  0036EA  ECF5  F008         	call	_update_LCD_color
  6063                           
  6064                           ;Lab8.c: 358: switch(color){
  6065  0036EE  D00A               	goto	l6958
  6066  0036F0                     l481:
  6067  0036F0  9880               	bcf	3968,4,c	;volatile
  6068  0036F2  D001               	goto	L4
  6069  0036F4                     l483:
  6070  0036F4  8880               	bsf	3968,4,c	;volatile
  6071  0036F6                     L4:
  6072  0036F6  9A80               	bcf	3968,5,c	;volatile
  6073  0036F8  D013               	goto	l486
  6074  0036FA                     l484:
  6075  0036FA  9880               	bcf	3968,4,c	;volatile
  6076  0036FC  D001               	goto	L5
  6077  0036FE                     l485:
  6078  0036FE  8880               	bsf	3968,4,c	;volatile
  6079  003700                     L5:
  6080  003700  8A80               	bsf	3968,5,c	;volatile
  6081                           
  6082                           ;Lab8.c: 363: }
  6083  003702  D00E               	goto	l486
  6084  003704                     l6958:
  6085  003704  5044               	movf	Set_NS@color,w,c
  6086                           
  6087                           ; Switch size 1, requested type "space"
  6088                           ; Number of cases is 4, Range of values is 0 to 3
  6089                           ; switch strategies available:
  6090                           ; Name         Instructions Cycles
  6091                           ; simple_byte           13     7 (average)
  6092                           ;	Chosen strategy is simple_byte
  6093  003706  0A00               	xorlw	0	; case 0
  6094  003708  B4D8               	btfsc	status,2,c
  6095  00370A  D7F2               	goto	l481
  6096  00370C  0A01               	xorlw	1	; case 1
  6097  00370E  B4D8               	btfsc	status,2,c
  6098  003710  D7F1               	goto	l483
  6099  003712  0A03               	xorlw	3	; case 2
  6100  003714  B4D8               	btfsc	status,2,c
  6101  003716  D7F1               	goto	l484
  6102  003718  0A01               	xorlw	1	; case 3
  6103  00371A  B4D8               	btfsc	status,2,c
  6104  00371C  D7F0               	goto	l485
  6105  00371E  D000               	goto	l486
  6106  003720                     l486:
  6107  003720  0012               	return		;funcret
  6108  003722                     __end_of_Set_NS:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodl	equ	0xFF3
  6115                           intcon	equ	0xFF2
  6116                           intcon2	equ	0xFF1
  6117                           intcon3	equ	0xFF0
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function _Set_EWLT *****************
  6125 ;; Defined at:
  6126 ;;		line 385 in file "Lab8.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  color           1    wreg     unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  color           1   67[COMRAM] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;		None               void
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;Total ram usage:        1 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    9
  6147 ;; This function calls:
  6148 ;;		_update_LCD_color
  6149 ;; This function is called by:
  6150 ;;		_Do_Flashing
  6151 ;;		_Night_Mode
  6152 ;;		_Day_Mode
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text26
  6157  003722                     __ptext26:
  6158                           	opt stack 0
  6159  003722                     _Set_EWLT:
  6160                           	opt stack 20
  6161                           
  6162                           ;incstack = 0
  6163                           ;Set_EWLT@color stored from wreg
  6164  003722  6E44               	movwf	Set_EWLT@color,c
  6165                           
  6166                           ;Lab8.c: 386: direction = 3;
  6167  003724  0E03               	movlw	3
  6168  003726  6E6F               	movwf	_direction,c
  6169                           
  6170                           ;Lab8.c: 387: update_LCD_color(direction, color);
  6171  003728  C044  F041         	movff	Set_EWLT@color,update_LCD_color@color
  6172  00372C  506F               	movf	_direction,w,c
  6173  00372E  ECF5  F008         	call	_update_LCD_color
  6174                           
  6175                           ;Lab8.c: 388: switch(color){
  6176  003732  D00A               	goto	l6982
  6177  003734                     l508:
  6178  003734  9084               	bcf	3972,0,c	;volatile
  6179  003736  D001               	goto	L6
  6180  003738                     l510:
  6181  003738  8084               	bsf	3972,0,c	;volatile
  6182  00373A                     L6:
  6183  00373A  9484               	bcf	3972,2,c	;volatile
  6184  00373C  D013               	goto	l513
  6185  00373E                     l511:
  6186  00373E  9084               	bcf	3972,0,c	;volatile
  6187  003740  D001               	goto	L7
  6188  003742                     l512:
  6189  003742  8084               	bsf	3972,0,c	;volatile
  6190  003744                     L7:
  6191  003744  8484               	bsf	3972,2,c	;volatile
  6192                           
  6193                           ;Lab8.c: 393: }
  6194  003746  D00E               	goto	l513
  6195  003748                     l6982:
  6196  003748  5044               	movf	Set_EWLT@color,w,c
  6197                           
  6198                           ; Switch size 1, requested type "space"
  6199                           ; Number of cases is 4, Range of values is 0 to 3
  6200                           ; switch strategies available:
  6201                           ; Name         Instructions Cycles
  6202                           ; simple_byte           13     7 (average)
  6203                           ;	Chosen strategy is simple_byte
  6204  00374A  0A00               	xorlw	0	; case 0
  6205  00374C  B4D8               	btfsc	status,2,c
  6206  00374E  D7F2               	goto	l508
  6207  003750  0A01               	xorlw	1	; case 1
  6208  003752  B4D8               	btfsc	status,2,c
  6209  003754  D7F1               	goto	l510
  6210  003756  0A03               	xorlw	3	; case 2
  6211  003758  B4D8               	btfsc	status,2,c
  6212  00375A  D7F1               	goto	l511
  6213  00375C  0A01               	xorlw	1	; case 3
  6214  00375E  B4D8               	btfsc	status,2,c
  6215  003760  D7F0               	goto	l512
  6216  003762  D000               	goto	l513
  6217  003764                     l513:
  6218  003764  0012               	return		;funcret
  6219  003766                     __end_of_Set_EWLT:
  6220                           	opt stack 0
  6221                           tblptru	equ	0xFF8
  6222                           tblptrh	equ	0xFF7
  6223                           tblptrl	equ	0xFF6
  6224                           tablat	equ	0xFF5
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           intcon2	equ	0xFF1
  6228                           intcon3	equ	0xFF0
  6229                           postinc0	equ	0xFEE
  6230                           wreg	equ	0xFE8
  6231                           postdec1	equ	0xFE5
  6232                           fsr1l	equ	0xFE1
  6233                           status	equ	0xFD8
  6234                           
  6235 ;; *************** function _Set_EW *****************
  6236 ;; Defined at:
  6237 ;;		line 375 in file "Lab8.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  color           1    wreg     unsigned char 
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  color           1   67[COMRAM] unsigned char 
  6242 ;; Return value:  Size  Location     Type
  6243 ;;		None               void
  6244 ;; Registers used:
  6245 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/0
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;Total ram usage:        1 bytes
  6256 ;; Hardware stack levels used:    1
  6257 ;; Hardware stack levels required when called:    9
  6258 ;; This function calls:
  6259 ;;		_update_LCD_color
  6260 ;; This function is called by:
  6261 ;;		_Do_Flashing
  6262 ;;		_Night_Mode
  6263 ;;		_Day_Mode
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	text27
  6268  003766                     __ptext27:
  6269                           	opt stack 0
  6270  003766                     _Set_EW:
  6271                           	opt stack 20
  6272                           
  6273                           ;incstack = 0
  6274                           ;Set_EW@color stored from wreg
  6275  003766  6E44               	movwf	Set_EW@color,c
  6276                           
  6277                           ;Lab8.c: 376: direction = 2;
  6278  003768  0E02               	movlw	2
  6279  00376A  6E6F               	movwf	_direction,c
  6280                           
  6281                           ;Lab8.c: 377: update_LCD_color(direction, color);
  6282  00376C  C044  F041         	movff	Set_EW@color,update_LCD_color@color
  6283  003770  506F               	movf	_direction,w,c
  6284  003772  ECF5  F008         	call	_update_LCD_color
  6285                           
  6286                           ;Lab8.c: 378: switch(color){
  6287  003776  D00A               	goto	l6974
  6288  003778                     l499:
  6289  003778  9881               	bcf	3969,4,c	;volatile
  6290  00377A  D001               	goto	L8
  6291  00377C                     l501:
  6292  00377C  8881               	bsf	3969,4,c	;volatile
  6293  00377E                     L8:
  6294  00377E  9A81               	bcf	3969,5,c	;volatile
  6295  003780  D013               	goto	l504
  6296  003782                     l502:
  6297  003782  9881               	bcf	3969,4,c	;volatile
  6298  003784  D001               	goto	L9
  6299  003786                     l503:
  6300  003786  8881               	bsf	3969,4,c	;volatile
  6301  003788                     L9:
  6302  003788  8A81               	bsf	3969,5,c	;volatile
  6303                           
  6304                           ;Lab8.c: 383: }
  6305  00378A  D00E               	goto	l504
  6306  00378C                     l6974:
  6307  00378C  5044               	movf	Set_EW@color,w,c
  6308                           
  6309                           ; Switch size 1, requested type "space"
  6310                           ; Number of cases is 4, Range of values is 0 to 3
  6311                           ; switch strategies available:
  6312                           ; Name         Instructions Cycles
  6313                           ; simple_byte           13     7 (average)
  6314                           ;	Chosen strategy is simple_byte
  6315  00378E  0A00               	xorlw	0	; case 0
  6316  003790  B4D8               	btfsc	status,2,c
  6317  003792  D7F2               	goto	l499
  6318  003794  0A01               	xorlw	1	; case 1
  6319  003796  B4D8               	btfsc	status,2,c
  6320  003798  D7F1               	goto	l501
  6321  00379A  0A03               	xorlw	3	; case 2
  6322  00379C  B4D8               	btfsc	status,2,c
  6323  00379E  D7F1               	goto	l502
  6324  0037A0  0A01               	xorlw	1	; case 3
  6325  0037A2  B4D8               	btfsc	status,2,c
  6326  0037A4  D7F0               	goto	l503
  6327  0037A6  D000               	goto	l504
  6328  0037A8                     l504:
  6329  0037A8  0012               	return		;funcret
  6330  0037AA                     __end_of_Set_EW:
  6331                           	opt stack 0
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodl	equ	0xFF3
  6337                           intcon	equ	0xFF2
  6338                           intcon2	equ	0xFF1
  6339                           intcon3	equ	0xFF0
  6340                           postinc0	equ	0xFEE
  6341                           wreg	equ	0xFE8
  6342                           postdec1	equ	0xFE5
  6343                           fsr1l	equ	0xFE1
  6344                           status	equ	0xFD8
  6345                           
  6346 ;; *************** function _update_LCD_color *****************
  6347 ;; Defined at:
  6348 ;;		line 517 in file "Lab8.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;  direction       1    wreg     unsigned char 
  6351 ;;  color           1   64[COMRAM] unsigned char 
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;  direction       1   65[COMRAM] unsigned char 
  6354 ;;  Circle_Y        1   66[COMRAM] unsigned char 
  6355 ;; Return value:  Size  Location     Type
  6356 ;;		None               void
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6364 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;Total ram usage:        3 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    8
  6371 ;; This function calls:
  6372 ;;		_drawCircle
  6373 ;;		_fillCircle
  6374 ;; This function is called by:
  6375 ;;		_Set_NS
  6376 ;;		_Set_NSLT
  6377 ;;		_Set_EW
  6378 ;;		_Set_EWLT
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text28
  6383  0011EA                     __ptext28:
  6384                           	opt stack 0
  6385  0011EA                     _update_LCD_color:
  6386                           	opt stack 20
  6387                           
  6388                           ;incstack = 0
  6389                           ;update_LCD_color@direction stored from wreg
  6390  0011EA  6E42               	movwf	update_LCD_color@direction,c
  6391                           
  6392                           ;Lab8.c: 518: char Circle_Y;
  6393                           ;Lab8.c: 519: Circle_Y = 20 + 15 + direction * 30;
  6394  0011EC  5042               	movf	update_LCD_color@direction,w,c
  6395  0011EE  0D1E               	mullw	30
  6396  0011F0  50F3               	movf	prodl,w,c
  6397  0011F2  0F23               	addlw	35
  6398  0011F4  6E43               	movwf	update_LCD_color@Circle_Y,c
  6399                           
  6400                           ;Lab8.c: 521: if (color == 0){
  6401  0011F6  5041               	movf	update_LCD_color@color,w,c
  6402  0011F8  A4D8               	btfss	status,2,c
  6403  0011FA  D067               	goto	l6860
  6404                           
  6405                           ;Lab8.c: 523: fillCircle(40, Circle_Y, 7, 0x0000);
  6406  0011FC  0E00               	movlw	0
  6407  0011FE  6E3A               	movwf	fillCircle@x0+1,c
  6408  001200  0E28               	movlw	40
  6409  001202  6E39               	movwf	fillCircle@x0,c
  6410  001204  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6411  001208  6A3C               	clrf	fillCircle@y0+1,c
  6412  00120A  0E00               	movlw	0
  6413  00120C  6E3E               	movwf	fillCircle@r+1,c
  6414  00120E  0E07               	movlw	7
  6415  001210  6E3D               	movwf	fillCircle@r,c
  6416  001212  0E00               	movlw	0
  6417  001214  6E40               	movwf	fillCircle@color+1,c
  6418  001216  0E00               	movlw	0
  6419  001218  6E3F               	movwf	fillCircle@color,c
  6420  00121A  ECAF  F01A         	call	_fillCircle	;wreg free
  6421                           
  6422                           ;Lab8.c: 524: fillCircle(60, Circle_Y, 7, 0x0000);
  6423  00121E  0E00               	movlw	0
  6424  001220  6E3A               	movwf	fillCircle@x0+1,c
  6425  001222  0E3C               	movlw	60
  6426  001224  6E39               	movwf	fillCircle@x0,c
  6427  001226  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6428  00122A  6A3C               	clrf	fillCircle@y0+1,c
  6429  00122C  0E00               	movlw	0
  6430  00122E  6E3E               	movwf	fillCircle@r+1,c
  6431  001230  0E07               	movlw	7
  6432  001232  6E3D               	movwf	fillCircle@r,c
  6433  001234  0E00               	movlw	0
  6434  001236  6E40               	movwf	fillCircle@color+1,c
  6435  001238  0E00               	movlw	0
  6436  00123A  6E3F               	movwf	fillCircle@color,c
  6437  00123C  ECAF  F01A         	call	_fillCircle	;wreg free
  6438                           
  6439                           ;Lab8.c: 525: fillCircle(80, Circle_Y, 7, 0x0000);
  6440  001240  0E00               	movlw	0
  6441  001242  6E3A               	movwf	fillCircle@x0+1,c
  6442  001244  0E50               	movlw	80
  6443  001246  6E39               	movwf	fillCircle@x0,c
  6444  001248  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6445  00124C  6A3C               	clrf	fillCircle@y0+1,c
  6446  00124E  0E00               	movlw	0
  6447  001250  6E3E               	movwf	fillCircle@r+1,c
  6448  001252  0E07               	movlw	7
  6449  001254  6E3D               	movwf	fillCircle@r,c
  6450  001256  0E00               	movlw	0
  6451  001258  6E40               	movwf	fillCircle@color+1,c
  6452  00125A  0E00               	movlw	0
  6453  00125C  6E3F               	movwf	fillCircle@color,c
  6454  00125E  ECAF  F01A         	call	_fillCircle	;wreg free
  6455                           
  6456                           ;Lab8.c: 527: drawCircle(40, Circle_Y, 7, 0xF800);
  6457  001262  0E00               	movlw	0
  6458  001264  6E1B               	movwf	drawCircle@x0+1,c
  6459  001266  0E28               	movlw	40
  6460  001268  6E1A               	movwf	drawCircle@x0,c
  6461  00126A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6462  00126E  6A1D               	clrf	drawCircle@y0+1,c
  6463  001270  0E00               	movlw	0
  6464  001272  6E1F               	movwf	drawCircle@r+1,c
  6465  001274  0E07               	movlw	7
  6466  001276  6E1E               	movwf	drawCircle@r,c
  6467  001278  0EF8               	movlw	248
  6468  00127A  6E21               	movwf	drawCircle@color+1,c
  6469  00127C  0E00               	movlw	0
  6470  00127E  6E20               	movwf	drawCircle@color,c
  6471  001280  ECCA  F00D         	call	_drawCircle	;wreg free
  6472                           
  6473                           ;Lab8.c: 528: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6474  001284  0E00               	movlw	0
  6475  001286  6E1B               	movwf	drawCircle@x0+1,c
  6476  001288  0E3C               	movlw	60
  6477  00128A  6E1A               	movwf	drawCircle@x0,c
  6478  00128C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6479  001290  6A1D               	clrf	drawCircle@y0+1,c
  6480  001292  0E00               	movlw	0
  6481  001294  6E1F               	movwf	drawCircle@r+1,c
  6482  001296  0E07               	movlw	7
  6483  001298  6E1E               	movwf	drawCircle@r,c
  6484  00129A  0EFF               	movlw	255
  6485  00129C  6E21               	movwf	drawCircle@color+1,c
  6486  00129E  0EE0               	movlw	224
  6487  0012A0  6E20               	movwf	drawCircle@color,c
  6488  0012A2  ECCA  F00D         	call	_drawCircle	;wreg free
  6489                           
  6490                           ;Lab8.c: 529: drawCircle(80, Circle_Y, 7, 0x07E0);
  6491  0012A6  0E00               	movlw	0
  6492  0012A8  6E1B               	movwf	drawCircle@x0+1,c
  6493  0012AA  0E50               	movlw	80
  6494  0012AC  6E1A               	movwf	drawCircle@x0,c
  6495  0012AE  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6496  0012B2  6A1D               	clrf	drawCircle@y0+1,c
  6497  0012B4  0E00               	movlw	0
  6498  0012B6  6E1F               	movwf	drawCircle@r+1,c
  6499  0012B8  0E07               	movlw	7
  6500  0012BA  6E1E               	movwf	drawCircle@r,c
  6501  0012BC  0E07               	movlw	7
  6502  0012BE  6E21               	movwf	drawCircle@color+1,c
  6503  0012C0  0EE0               	movlw	224
  6504  0012C2  6E20               	movwf	drawCircle@color,c
  6505  0012C4  ECCA  F00D         	call	_drawCircle	;wreg free
  6506  0012C8  D000               	goto	l6860
  6507  0012CA                     l6860:
  6508                           
  6509                           ;Lab8.c: 530: }
  6510                           ;Lab8.c: 532: if(color == 1){
  6511  0012CA  0441               	decf	update_LCD_color@color,w,c
  6512  0012CC  A4D8               	btfss	status,2,c
  6513  0012CE  D067               	goto	l6864
  6514                           
  6515                           ;Lab8.c: 534: fillCircle(40, Circle_Y, 7, 0xF800);
  6516  0012D0  0E00               	movlw	0
  6517  0012D2  6E3A               	movwf	fillCircle@x0+1,c
  6518  0012D4  0E28               	movlw	40
  6519  0012D6  6E39               	movwf	fillCircle@x0,c
  6520  0012D8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6521  0012DC  6A3C               	clrf	fillCircle@y0+1,c
  6522  0012DE  0E00               	movlw	0
  6523  0012E0  6E3E               	movwf	fillCircle@r+1,c
  6524  0012E2  0E07               	movlw	7
  6525  0012E4  6E3D               	movwf	fillCircle@r,c
  6526  0012E6  0EF8               	movlw	248
  6527  0012E8  6E40               	movwf	fillCircle@color+1,c
  6528  0012EA  0E00               	movlw	0
  6529  0012EC  6E3F               	movwf	fillCircle@color,c
  6530  0012EE  ECAF  F01A         	call	_fillCircle	;wreg free
  6531                           
  6532                           ;Lab8.c: 535: fillCircle(60, Circle_Y, 7, 0x0000);
  6533  0012F2  0E00               	movlw	0
  6534  0012F4  6E3A               	movwf	fillCircle@x0+1,c
  6535  0012F6  0E3C               	movlw	60
  6536  0012F8  6E39               	movwf	fillCircle@x0,c
  6537  0012FA  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6538  0012FE  6A3C               	clrf	fillCircle@y0+1,c
  6539  001300  0E00               	movlw	0
  6540  001302  6E3E               	movwf	fillCircle@r+1,c
  6541  001304  0E07               	movlw	7
  6542  001306  6E3D               	movwf	fillCircle@r,c
  6543  001308  0E00               	movlw	0
  6544  00130A  6E40               	movwf	fillCircle@color+1,c
  6545  00130C  0E00               	movlw	0
  6546  00130E  6E3F               	movwf	fillCircle@color,c
  6547  001310  ECAF  F01A         	call	_fillCircle	;wreg free
  6548                           
  6549                           ;Lab8.c: 536: fillCircle(80, Circle_Y, 7, 0x0000);
  6550  001314  0E00               	movlw	0
  6551  001316  6E3A               	movwf	fillCircle@x0+1,c
  6552  001318  0E50               	movlw	80
  6553  00131A  6E39               	movwf	fillCircle@x0,c
  6554  00131C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6555  001320  6A3C               	clrf	fillCircle@y0+1,c
  6556  001322  0E00               	movlw	0
  6557  001324  6E3E               	movwf	fillCircle@r+1,c
  6558  001326  0E07               	movlw	7
  6559  001328  6E3D               	movwf	fillCircle@r,c
  6560  00132A  0E00               	movlw	0
  6561  00132C  6E40               	movwf	fillCircle@color+1,c
  6562  00132E  0E00               	movlw	0
  6563  001330  6E3F               	movwf	fillCircle@color,c
  6564  001332  ECAF  F01A         	call	_fillCircle	;wreg free
  6565                           
  6566                           ;Lab8.c: 538: drawCircle(40, Circle_Y, 7, 0xF800);
  6567  001336  0E00               	movlw	0
  6568  001338  6E1B               	movwf	drawCircle@x0+1,c
  6569  00133A  0E28               	movlw	40
  6570  00133C  6E1A               	movwf	drawCircle@x0,c
  6571  00133E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6572  001342  6A1D               	clrf	drawCircle@y0+1,c
  6573  001344  0E00               	movlw	0
  6574  001346  6E1F               	movwf	drawCircle@r+1,c
  6575  001348  0E07               	movlw	7
  6576  00134A  6E1E               	movwf	drawCircle@r,c
  6577  00134C  0EF8               	movlw	248
  6578  00134E  6E21               	movwf	drawCircle@color+1,c
  6579  001350  0E00               	movlw	0
  6580  001352  6E20               	movwf	drawCircle@color,c
  6581  001354  ECCA  F00D         	call	_drawCircle	;wreg free
  6582                           
  6583                           ;Lab8.c: 539: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6584  001358  0E00               	movlw	0
  6585  00135A  6E1B               	movwf	drawCircle@x0+1,c
  6586  00135C  0E3C               	movlw	60
  6587  00135E  6E1A               	movwf	drawCircle@x0,c
  6588  001360  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6589  001364  6A1D               	clrf	drawCircle@y0+1,c
  6590  001366  0E00               	movlw	0
  6591  001368  6E1F               	movwf	drawCircle@r+1,c
  6592  00136A  0E07               	movlw	7
  6593  00136C  6E1E               	movwf	drawCircle@r,c
  6594  00136E  0EFF               	movlw	255
  6595  001370  6E21               	movwf	drawCircle@color+1,c
  6596  001372  0EE0               	movlw	224
  6597  001374  6E20               	movwf	drawCircle@color,c
  6598  001376  ECCA  F00D         	call	_drawCircle	;wreg free
  6599                           
  6600                           ;Lab8.c: 540: drawCircle(80, Circle_Y, 7, 0x07E0);
  6601  00137A  0E00               	movlw	0
  6602  00137C  6E1B               	movwf	drawCircle@x0+1,c
  6603  00137E  0E50               	movlw	80
  6604  001380  6E1A               	movwf	drawCircle@x0,c
  6605  001382  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6606  001386  6A1D               	clrf	drawCircle@y0+1,c
  6607  001388  0E00               	movlw	0
  6608  00138A  6E1F               	movwf	drawCircle@r+1,c
  6609  00138C  0E07               	movlw	7
  6610  00138E  6E1E               	movwf	drawCircle@r,c
  6611  001390  0E07               	movlw	7
  6612  001392  6E21               	movwf	drawCircle@color+1,c
  6613  001394  0EE0               	movlw	224
  6614  001396  6E20               	movwf	drawCircle@color,c
  6615  001398  ECCA  F00D         	call	_drawCircle	;wreg free
  6616  00139C  D000               	goto	l6864
  6617  00139E                     l6864:
  6618                           
  6619                           ;Lab8.c: 541: }
  6620                           ;Lab8.c: 543: if(color == 3){
  6621  00139E  0E03               	movlw	3
  6622  0013A0  1841               	xorwf	update_LCD_color@color,w,c
  6623  0013A2  A4D8               	btfss	status,2,c
  6624  0013A4  D067               	goto	l6868
  6625                           
  6626                           ;Lab8.c: 545: fillCircle(40, Circle_Y, 7, 0x0000);
  6627  0013A6  0E00               	movlw	0
  6628  0013A8  6E3A               	movwf	fillCircle@x0+1,c
  6629  0013AA  0E28               	movlw	40
  6630  0013AC  6E39               	movwf	fillCircle@x0,c
  6631  0013AE  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6632  0013B2  6A3C               	clrf	fillCircle@y0+1,c
  6633  0013B4  0E00               	movlw	0
  6634  0013B6  6E3E               	movwf	fillCircle@r+1,c
  6635  0013B8  0E07               	movlw	7
  6636  0013BA  6E3D               	movwf	fillCircle@r,c
  6637  0013BC  0E00               	movlw	0
  6638  0013BE  6E40               	movwf	fillCircle@color+1,c
  6639  0013C0  0E00               	movlw	0
  6640  0013C2  6E3F               	movwf	fillCircle@color,c
  6641  0013C4  ECAF  F01A         	call	_fillCircle	;wreg free
  6642                           
  6643                           ;Lab8.c: 546: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6644  0013C8  0E00               	movlw	0
  6645  0013CA  6E3A               	movwf	fillCircle@x0+1,c
  6646  0013CC  0E3C               	movlw	60
  6647  0013CE  6E39               	movwf	fillCircle@x0,c
  6648  0013D0  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6649  0013D4  6A3C               	clrf	fillCircle@y0+1,c
  6650  0013D6  0E00               	movlw	0
  6651  0013D8  6E3E               	movwf	fillCircle@r+1,c
  6652  0013DA  0E07               	movlw	7
  6653  0013DC  6E3D               	movwf	fillCircle@r,c
  6654  0013DE  0EFF               	movlw	255
  6655  0013E0  6E40               	movwf	fillCircle@color+1,c
  6656  0013E2  0EE0               	movlw	224
  6657  0013E4  6E3F               	movwf	fillCircle@color,c
  6658  0013E6  ECAF  F01A         	call	_fillCircle	;wreg free
  6659                           
  6660                           ;Lab8.c: 547: fillCircle(80, Circle_Y, 7, 0x0000);
  6661  0013EA  0E00               	movlw	0
  6662  0013EC  6E3A               	movwf	fillCircle@x0+1,c
  6663  0013EE  0E50               	movlw	80
  6664  0013F0  6E39               	movwf	fillCircle@x0,c
  6665  0013F2  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6666  0013F6  6A3C               	clrf	fillCircle@y0+1,c
  6667  0013F8  0E00               	movlw	0
  6668  0013FA  6E3E               	movwf	fillCircle@r+1,c
  6669  0013FC  0E07               	movlw	7
  6670  0013FE  6E3D               	movwf	fillCircle@r,c
  6671  001400  0E00               	movlw	0
  6672  001402  6E40               	movwf	fillCircle@color+1,c
  6673  001404  0E00               	movlw	0
  6674  001406  6E3F               	movwf	fillCircle@color,c
  6675  001408  ECAF  F01A         	call	_fillCircle	;wreg free
  6676                           
  6677                           ;Lab8.c: 549: drawCircle(40, Circle_Y, 7, 0xF800);
  6678  00140C  0E00               	movlw	0
  6679  00140E  6E1B               	movwf	drawCircle@x0+1,c
  6680  001410  0E28               	movlw	40
  6681  001412  6E1A               	movwf	drawCircle@x0,c
  6682  001414  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6683  001418  6A1D               	clrf	drawCircle@y0+1,c
  6684  00141A  0E00               	movlw	0
  6685  00141C  6E1F               	movwf	drawCircle@r+1,c
  6686  00141E  0E07               	movlw	7
  6687  001420  6E1E               	movwf	drawCircle@r,c
  6688  001422  0EF8               	movlw	248
  6689  001424  6E21               	movwf	drawCircle@color+1,c
  6690  001426  0E00               	movlw	0
  6691  001428  6E20               	movwf	drawCircle@color,c
  6692  00142A  ECCA  F00D         	call	_drawCircle	;wreg free
  6693                           
  6694                           ;Lab8.c: 550: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6695  00142E  0E00               	movlw	0
  6696  001430  6E1B               	movwf	drawCircle@x0+1,c
  6697  001432  0E3C               	movlw	60
  6698  001434  6E1A               	movwf	drawCircle@x0,c
  6699  001436  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6700  00143A  6A1D               	clrf	drawCircle@y0+1,c
  6701  00143C  0E00               	movlw	0
  6702  00143E  6E1F               	movwf	drawCircle@r+1,c
  6703  001440  0E07               	movlw	7
  6704  001442  6E1E               	movwf	drawCircle@r,c
  6705  001444  0EFF               	movlw	255
  6706  001446  6E21               	movwf	drawCircle@color+1,c
  6707  001448  0EE0               	movlw	224
  6708  00144A  6E20               	movwf	drawCircle@color,c
  6709  00144C  ECCA  F00D         	call	_drawCircle	;wreg free
  6710                           
  6711                           ;Lab8.c: 551: drawCircle(80, Circle_Y, 7, 0x07E0);
  6712  001450  0E00               	movlw	0
  6713  001452  6E1B               	movwf	drawCircle@x0+1,c
  6714  001454  0E50               	movlw	80
  6715  001456  6E1A               	movwf	drawCircle@x0,c
  6716  001458  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6717  00145C  6A1D               	clrf	drawCircle@y0+1,c
  6718  00145E  0E00               	movlw	0
  6719  001460  6E1F               	movwf	drawCircle@r+1,c
  6720  001462  0E07               	movlw	7
  6721  001464  6E1E               	movwf	drawCircle@r,c
  6722  001466  0E07               	movlw	7
  6723  001468  6E21               	movwf	drawCircle@color+1,c
  6724  00146A  0EE0               	movlw	224
  6725  00146C  6E20               	movwf	drawCircle@color,c
  6726  00146E  ECCA  F00D         	call	_drawCircle	;wreg free
  6727  001472  D000               	goto	l6868
  6728  001474                     l6868:
  6729                           
  6730                           ;Lab8.c: 552: }
  6731                           ;Lab8.c: 553: if(color == 2){
  6732  001474  0E02               	movlw	2
  6733  001476  1841               	xorwf	update_LCD_color@color,w,c
  6734  001478  A4D8               	btfss	status,2,c
  6735  00147A  D067               	goto	l548
  6736                           
  6737                           ;Lab8.c: 555: fillCircle(40, Circle_Y, 7, 0x0000);
  6738  00147C  0E00               	movlw	0
  6739  00147E  6E3A               	movwf	fillCircle@x0+1,c
  6740  001480  0E28               	movlw	40
  6741  001482  6E39               	movwf	fillCircle@x0,c
  6742  001484  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6743  001488  6A3C               	clrf	fillCircle@y0+1,c
  6744  00148A  0E00               	movlw	0
  6745  00148C  6E3E               	movwf	fillCircle@r+1,c
  6746  00148E  0E07               	movlw	7
  6747  001490  6E3D               	movwf	fillCircle@r,c
  6748  001492  0E00               	movlw	0
  6749  001494  6E40               	movwf	fillCircle@color+1,c
  6750  001496  0E00               	movlw	0
  6751  001498  6E3F               	movwf	fillCircle@color,c
  6752  00149A  ECAF  F01A         	call	_fillCircle	;wreg free
  6753                           
  6754                           ;Lab8.c: 556: fillCircle(60, Circle_Y, 7, 0x0000);
  6755  00149E  0E00               	movlw	0
  6756  0014A0  6E3A               	movwf	fillCircle@x0+1,c
  6757  0014A2  0E3C               	movlw	60
  6758  0014A4  6E39               	movwf	fillCircle@x0,c
  6759  0014A6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6760  0014AA  6A3C               	clrf	fillCircle@y0+1,c
  6761  0014AC  0E00               	movlw	0
  6762  0014AE  6E3E               	movwf	fillCircle@r+1,c
  6763  0014B0  0E07               	movlw	7
  6764  0014B2  6E3D               	movwf	fillCircle@r,c
  6765  0014B4  0E00               	movlw	0
  6766  0014B6  6E40               	movwf	fillCircle@color+1,c
  6767  0014B8  0E00               	movlw	0
  6768  0014BA  6E3F               	movwf	fillCircle@color,c
  6769  0014BC  ECAF  F01A         	call	_fillCircle	;wreg free
  6770                           
  6771                           ;Lab8.c: 557: fillCircle(80, Circle_Y, 7, 0x07E0);
  6772  0014C0  0E00               	movlw	0
  6773  0014C2  6E3A               	movwf	fillCircle@x0+1,c
  6774  0014C4  0E50               	movlw	80
  6775  0014C6  6E39               	movwf	fillCircle@x0,c
  6776  0014C8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6777  0014CC  6A3C               	clrf	fillCircle@y0+1,c
  6778  0014CE  0E00               	movlw	0
  6779  0014D0  6E3E               	movwf	fillCircle@r+1,c
  6780  0014D2  0E07               	movlw	7
  6781  0014D4  6E3D               	movwf	fillCircle@r,c
  6782  0014D6  0E07               	movlw	7
  6783  0014D8  6E40               	movwf	fillCircle@color+1,c
  6784  0014DA  0EE0               	movlw	224
  6785  0014DC  6E3F               	movwf	fillCircle@color,c
  6786  0014DE  ECAF  F01A         	call	_fillCircle	;wreg free
  6787                           
  6788                           ;Lab8.c: 559: drawCircle(40, Circle_Y, 7, 0xF800);
  6789  0014E2  0E00               	movlw	0
  6790  0014E4  6E1B               	movwf	drawCircle@x0+1,c
  6791  0014E6  0E28               	movlw	40
  6792  0014E8  6E1A               	movwf	drawCircle@x0,c
  6793  0014EA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6794  0014EE  6A1D               	clrf	drawCircle@y0+1,c
  6795  0014F0  0E00               	movlw	0
  6796  0014F2  6E1F               	movwf	drawCircle@r+1,c
  6797  0014F4  0E07               	movlw	7
  6798  0014F6  6E1E               	movwf	drawCircle@r,c
  6799  0014F8  0EF8               	movlw	248
  6800  0014FA  6E21               	movwf	drawCircle@color+1,c
  6801  0014FC  0E00               	movlw	0
  6802  0014FE  6E20               	movwf	drawCircle@color,c
  6803  001500  ECCA  F00D         	call	_drawCircle	;wreg free
  6804                           
  6805                           ;Lab8.c: 560: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6806  001504  0E00               	movlw	0
  6807  001506  6E1B               	movwf	drawCircle@x0+1,c
  6808  001508  0E3C               	movlw	60
  6809  00150A  6E1A               	movwf	drawCircle@x0,c
  6810  00150C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6811  001510  6A1D               	clrf	drawCircle@y0+1,c
  6812  001512  0E00               	movlw	0
  6813  001514  6E1F               	movwf	drawCircle@r+1,c
  6814  001516  0E07               	movlw	7
  6815  001518  6E1E               	movwf	drawCircle@r,c
  6816  00151A  0EFF               	movlw	255
  6817  00151C  6E21               	movwf	drawCircle@color+1,c
  6818  00151E  0EE0               	movlw	224
  6819  001520  6E20               	movwf	drawCircle@color,c
  6820  001522  ECCA  F00D         	call	_drawCircle	;wreg free
  6821                           
  6822                           ;Lab8.c: 561: drawCircle(80, Circle_Y, 7, 0x07E0);
  6823  001526  0E00               	movlw	0
  6824  001528  6E1B               	movwf	drawCircle@x0+1,c
  6825  00152A  0E50               	movlw	80
  6826  00152C  6E1A               	movwf	drawCircle@x0,c
  6827  00152E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6828  001532  6A1D               	clrf	drawCircle@y0+1,c
  6829  001534  0E00               	movlw	0
  6830  001536  6E1F               	movwf	drawCircle@r+1,c
  6831  001538  0E07               	movlw	7
  6832  00153A  6E1E               	movwf	drawCircle@r,c
  6833  00153C  0E07               	movlw	7
  6834  00153E  6E21               	movwf	drawCircle@color+1,c
  6835  001540  0EE0               	movlw	224
  6836  001542  6E20               	movwf	drawCircle@color,c
  6837  001544  ECCA  F00D         	call	_drawCircle	;wreg free
  6838  001548  D000               	goto	l548
  6839  00154A                     l548:
  6840  00154A  0012               	return		;funcret
  6841  00154C                     __end_of_update_LCD_color:
  6842                           	opt stack 0
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           prodl	equ	0xFF3
  6848                           intcon	equ	0xFF2
  6849                           intcon2	equ	0xFF1
  6850                           intcon3	equ	0xFF0
  6851                           postinc0	equ	0xFEE
  6852                           wreg	equ	0xFE8
  6853                           postdec1	equ	0xFE5
  6854                           fsr1l	equ	0xFE1
  6855                           status	equ	0xFD8
  6856                           
  6857 ;; *************** function _fillCircle *****************
  6858 ;; Defined at:
  6859 ;;		line 647 in file "ST7735_TFT.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;  x0              2   56[COMRAM] int 
  6862 ;;  y0              2   58[COMRAM] int 
  6863 ;;  r               2   60[COMRAM] int 
  6864 ;;  color           2   62[COMRAM] unsigned int 
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;		None               void
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, status,0, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6876 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;Total ram usage:        8 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    7
  6883 ;; This function calls:
  6884 ;;		_drawFastVLine
  6885 ;;		_fillCircleHelper
  6886 ;; This function is called by:
  6887 ;;		_update_LCD_color
  6888 ;;		_Initialize_Screen
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text29
  6893  00355E                     __ptext29:
  6894                           	opt stack 0
  6895  00355E                     _fillCircle:
  6896                           	opt stack 20
  6897                           
  6898                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6899                           
  6900                           ;incstack = 0
  6901  00355E  503D               	movf	fillCircle@r,w,c
  6902  003560  0800               	sublw	0
  6903  003562  243B               	addwf	fillCircle@y0,w,c
  6904  003564  6E16               	movwf	drawFastVLine@y,c
  6905  003566  80D8               	bsf	status,0,c
  6906  003568  343D               	rlcf	fillCircle@r,w,c
  6907  00356A  6E17               	movwf	drawFastVLine@h,c
  6908  00356C  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  6909  003570  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  6910  003574  5039               	movf	fillCircle@x0,w,c
  6911  003576  EC52  F018         	call	_drawFastVLine
  6912                           
  6913                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  6914  00357A  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  6915  00357E  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6916  003582  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  6917  003586  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6918  00358A  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  6919  00358E  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6920  003592  0E00               	movlw	0
  6921  003594  6E28               	movwf	fillCircleHelper@cornername+1,c
  6922  003596  0E03               	movlw	3
  6923  003598  6E27               	movwf	fillCircleHelper@cornername,c
  6924  00359A  0E00               	movlw	0
  6925  00359C  6E2A               	movwf	fillCircleHelper@delta+1,c
  6926  00359E  0E00               	movlw	0
  6927  0035A0  6E29               	movwf	fillCircleHelper@delta,c
  6928  0035A2  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  6929  0035A6  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6930  0035AA  EC13  F010         	call	_fillCircleHelper	;wreg free
  6931  0035AE  0012               	return		;funcret
  6932  0035B0                     __end_of_fillCircle:
  6933                           	opt stack 0
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           prodl	equ	0xFF3
  6939                           intcon	equ	0xFF2
  6940                           intcon2	equ	0xFF1
  6941                           intcon3	equ	0xFF0
  6942                           postinc0	equ	0xFEE
  6943                           wreg	equ	0xFE8
  6944                           postdec1	equ	0xFE5
  6945                           fsr1l	equ	0xFE1
  6946                           status	equ	0xFD8
  6947                           
  6948 ;; *************** function _fillCircleHelper *****************
  6949 ;; Defined at:
  6950 ;;		line 622 in file "ST7735_TFT.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  x0              2   32[COMRAM] int 
  6953 ;;  y0              2   34[COMRAM] int 
  6954 ;;  r               2   36[COMRAM] int 
  6955 ;;  cornername      2   38[COMRAM] unsigned int 
  6956 ;;  delta           2   40[COMRAM] int 
  6957 ;;  color           2   42[COMRAM] unsigned int 
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;  y               2   54[COMRAM] int 
  6960 ;;  x               2   52[COMRAM] int 
  6961 ;;  f               2   50[COMRAM] int 
  6962 ;;  ddF_y           2   48[COMRAM] int 
  6963 ;;  ddF_x           2   46[COMRAM] int 
  6964 ;; Return value:  Size  Location     Type
  6965 ;;		None               void
  6966 ;; Registers used:
  6967 ;;		wreg, status,2, status,0, cstack
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6973 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;Total ram usage:       24 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    6
  6980 ;; This function calls:
  6981 ;;		_drawFastVLine
  6982 ;; This function is called by:
  6983 ;;		_fillCircle
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           	psect	text30
  6988  002026                     __ptext30:
  6989                           	opt stack 0
  6990  002026                     _fillCircleHelper:
  6991                           	opt stack 20
  6992                           
  6993                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  6994                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6995                           
  6996                           ;incstack = 0
  6997  002026  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6998  00202A  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6999  00202E  1E2D               	comf	??_fillCircleHelper,f,c
  7000  002030  1E2E               	comf	??_fillCircleHelper+1,f,c
  7001  002032  4A2D               	infsnz	??_fillCircleHelper,f,c
  7002  002034  2A2E               	incf	??_fillCircleHelper+1,f,c
  7003  002036  0E01               	movlw	1
  7004  002038  242D               	addwf	??_fillCircleHelper,w,c
  7005  00203A  6E33               	movwf	fillCircleHelper@f,c
  7006  00203C  0E00               	movlw	0
  7007  00203E  202E               	addwfc	??_fillCircleHelper+1,w,c
  7008  002040  6E34               	movwf	fillCircleHelper@f+1,c
  7009  002042  0E00               	movlw	0
  7010  002044  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  7011  002046  0E01               	movlw	1
  7012  002048  6E2F               	movwf	fillCircleHelper@ddF_x,c
  7013  00204A  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  7014  00204E  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  7015  002052  90D8               	bcf	status,0,c
  7016  002054  362D               	rlcf	??_fillCircleHelper,f,c
  7017  002056  362E               	rlcf	??_fillCircleHelper+1,f,c
  7018  002058  1E2D               	comf	??_fillCircleHelper,f,c
  7019  00205A  1E2E               	comf	??_fillCircleHelper+1,f,c
  7020  00205C  4A2D               	infsnz	??_fillCircleHelper,f,c
  7021  00205E  2A2E               	incf	??_fillCircleHelper+1,f,c
  7022  002060  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  7023  002064  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  7024  002068  0E00               	movlw	0
  7025  00206A  6E36               	movwf	fillCircleHelper@x+1,c
  7026  00206C  0E00               	movlw	0
  7027  00206E  6E35               	movwf	fillCircleHelper@x,c
  7028  002070  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  7029  002074  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  7030                           
  7031                           ;ST7735_TFT.c: 626: while (x<y) {
  7032  002078  D067               	goto	l6248
  7033  00207A                     l6228:
  7034                           
  7035                           ;ST7735_TFT.c: 627: if (f >= 0) {
  7036  00207A  BE34               	btfsc	fillCircleHelper@f+1,7,c
  7037  00207C  D00B               	goto	l359
  7038                           
  7039                           ;ST7735_TFT.c: 628: y--;
  7040  00207E  0637               	decf	fillCircleHelper@y,f,c
  7041  002080  A0D8               	btfss	status,0,c
  7042  002082  0638               	decf	fillCircleHelper@y+1,f,c
  7043                           
  7044                           ;ST7735_TFT.c: 629: ddF_y += 2;
  7045  002084  0E02               	movlw	2
  7046  002086  2631               	addwf	fillCircleHelper@ddF_y,f,c
  7047  002088  0E00               	movlw	0
  7048  00208A  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  7049                           
  7050                           ;ST7735_TFT.c: 630: f += ddF_y;
  7051  00208C  5031               	movf	fillCircleHelper@ddF_y,w,c
  7052  00208E  2633               	addwf	fillCircleHelper@f,f,c
  7053  002090  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  7054  002092  2234               	addwfc	fillCircleHelper@f+1,f,c
  7055  002094                     l359:
  7056                           
  7057                           ;ST7735_TFT.c: 631: }
  7058                           ;ST7735_TFT.c: 632: x++;
  7059  002094  4A35               	infsnz	fillCircleHelper@x,f,c
  7060  002096  2A36               	incf	fillCircleHelper@x+1,f,c
  7061                           
  7062                           ;ST7735_TFT.c: 633: ddF_x += 2;
  7063  002098  0E02               	movlw	2
  7064  00209A  262F               	addwf	fillCircleHelper@ddF_x,f,c
  7065  00209C  0E00               	movlw	0
  7066  00209E  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  7067                           
  7068                           ;ST7735_TFT.c: 634: f += ddF_x;
  7069  0020A0  502F               	movf	fillCircleHelper@ddF_x,w,c
  7070  0020A2  2633               	addwf	fillCircleHelper@f,f,c
  7071  0020A4  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  7072  0020A6  2234               	addwfc	fillCircleHelper@f+1,f,c
  7073                           
  7074                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  7075  0020A8  A027               	btfss	fillCircleHelper@cornername,0,c
  7076  0020AA  D025               	goto	l6244
  7077                           
  7078                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  7079  0020AC  5037               	movf	fillCircleHelper@y,w,c
  7080  0020AE  0800               	sublw	0
  7081  0020B0  2423               	addwf	fillCircleHelper@y0,w,c
  7082  0020B2  6E16               	movwf	drawFastVLine@y,c
  7083  0020B4  5037               	movf	fillCircleHelper@y,w,c
  7084  0020B6  2437               	addwf	fillCircleHelper@y,w,c
  7085  0020B8  2429               	addwf	fillCircleHelper@delta,w,c
  7086  0020BA  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7087  0020BC  282D               	incf	??_fillCircleHelper,w,c
  7088  0020BE  6E17               	movwf	drawFastVLine@h,c
  7089  0020C0  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7090  0020C4  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7091  0020C8  5021               	movf	fillCircleHelper@x0,w,c
  7092  0020CA  2435               	addwf	fillCircleHelper@x,w,c
  7093  0020CC  EC52  F018         	call	_drawFastVLine
  7094                           
  7095                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  7096  0020D0  5035               	movf	fillCircleHelper@x,w,c
  7097  0020D2  0800               	sublw	0
  7098  0020D4  2423               	addwf	fillCircleHelper@y0,w,c
  7099  0020D6  6E16               	movwf	drawFastVLine@y,c
  7100  0020D8  5035               	movf	fillCircleHelper@x,w,c
  7101  0020DA  2435               	addwf	fillCircleHelper@x,w,c
  7102  0020DC  2429               	addwf	fillCircleHelper@delta,w,c
  7103  0020DE  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7104  0020E0  282D               	incf	??_fillCircleHelper,w,c
  7105  0020E2  6E17               	movwf	drawFastVLine@h,c
  7106  0020E4  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7107  0020E8  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7108  0020EC  5021               	movf	fillCircleHelper@x0,w,c
  7109  0020EE  2437               	addwf	fillCircleHelper@y,w,c
  7110  0020F0  EC52  F018         	call	_drawFastVLine
  7111  0020F4  D000               	goto	l6244
  7112  0020F6                     l6244:
  7113                           
  7114                           ;ST7735_TFT.c: 639: }
  7115                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  7116  0020F6  A227               	btfss	fillCircleHelper@cornername,1,c
  7117  0020F8  D027               	goto	l6248
  7118                           
  7119                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  7120  0020FA  5037               	movf	fillCircleHelper@y,w,c
  7121  0020FC  0800               	sublw	0
  7122  0020FE  2423               	addwf	fillCircleHelper@y0,w,c
  7123  002100  6E16               	movwf	drawFastVLine@y,c
  7124  002102  5037               	movf	fillCircleHelper@y,w,c
  7125  002104  2437               	addwf	fillCircleHelper@y,w,c
  7126  002106  2429               	addwf	fillCircleHelper@delta,w,c
  7127  002108  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7128  00210A  282D               	incf	??_fillCircleHelper,w,c
  7129  00210C  6E17               	movwf	drawFastVLine@h,c
  7130  00210E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7131  002112  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7132  002116  5035               	movf	fillCircleHelper@x,w,c
  7133  002118  0800               	sublw	0
  7134  00211A  2421               	addwf	fillCircleHelper@x0,w,c
  7135  00211C  EC52  F018         	call	_drawFastVLine
  7136                           
  7137                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  7138  002120  5035               	movf	fillCircleHelper@x,w,c
  7139  002122  0800               	sublw	0
  7140  002124  2423               	addwf	fillCircleHelper@y0,w,c
  7141  002126  6E16               	movwf	drawFastVLine@y,c
  7142  002128  5035               	movf	fillCircleHelper@x,w,c
  7143  00212A  2435               	addwf	fillCircleHelper@x,w,c
  7144  00212C  2429               	addwf	fillCircleHelper@delta,w,c
  7145  00212E  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7146  002130  282D               	incf	??_fillCircleHelper,w,c
  7147  002132  6E17               	movwf	drawFastVLine@h,c
  7148  002134  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  7149  002138  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  7150  00213C  5037               	movf	fillCircleHelper@y,w,c
  7151  00213E  0800               	sublw	0
  7152  002140  2421               	addwf	fillCircleHelper@x0,w,c
  7153  002142  EC52  F018         	call	_drawFastVLine
  7154  002146  D000               	goto	l6248
  7155  002148                     l6248:
  7156  002148  5037               	movf	fillCircleHelper@y,w,c
  7157  00214A  5C35               	subwf	fillCircleHelper@x,w,c
  7158  00214C  5036               	movf	fillCircleHelper@x+1,w,c
  7159  00214E  0A80               	xorlw	128
  7160  002150  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  7161  002152  5038               	movf	fillCircleHelper@y+1,w,c
  7162  002154  0A80               	xorlw	128
  7163  002156  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  7164  002158  A0D8               	btfss	status,0,c
  7165  00215A  D78F               	goto	l6228
  7166  00215C  0012               	return		;funcret
  7167  00215E                     __end_of_fillCircleHelper:
  7168                           	opt stack 0
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodl	equ	0xFF3
  7174                           intcon	equ	0xFF2
  7175                           intcon2	equ	0xFF1
  7176                           intcon3	equ	0xFF0
  7177                           postinc0	equ	0xFEE
  7178                           wreg	equ	0xFE8
  7179                           postdec1	equ	0xFE5
  7180                           fsr1l	equ	0xFE1
  7181                           status	equ	0xFD8
  7182                           
  7183 ;; *************** function _drawCircle *****************
  7184 ;; Defined at:
  7185 ;;		line 561 in file "ST7735_TFT.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;  x0              2   25[COMRAM] int 
  7188 ;;  y0              2   27[COMRAM] int 
  7189 ;;  r               2   29[COMRAM] int 
  7190 ;;  color           2   31[COMRAM] unsigned int 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  y               2   43[COMRAM] int 
  7193 ;;  x               2   41[COMRAM] int 
  7194 ;;  f               2   39[COMRAM] int 
  7195 ;;  ddF_y           2   37[COMRAM] int 
  7196 ;;  ddF_x           2   35[COMRAM] int 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		wreg, status,2, status,0, cstack
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:       20 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    6
  7213 ;; This function calls:
  7214 ;;		_drawPixel
  7215 ;; This function is called by:
  7216 ;;		_update_LCD_color
  7217 ;;		_Initialize_Screen
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text31
  7222  001B94                     __ptext31:
  7223                           	opt stack 0
  7224  001B94                     _drawCircle:
  7225                           	opt stack 21
  7226                           
  7227                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  7228                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  7229                           
  7230                           ;incstack = 0
  7231  001B94  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7232  001B98  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7233  001B9C  1E22               	comf	??_drawCircle,f,c
  7234  001B9E  1E23               	comf	??_drawCircle+1,f,c
  7235  001BA0  4A22               	infsnz	??_drawCircle,f,c
  7236  001BA2  2A23               	incf	??_drawCircle+1,f,c
  7237  001BA4  0E01               	movlw	1
  7238  001BA6  2422               	addwf	??_drawCircle,w,c
  7239  001BA8  6E28               	movwf	drawCircle@f,c
  7240  001BAA  0E00               	movlw	0
  7241  001BAC  2023               	addwfc	??_drawCircle+1,w,c
  7242  001BAE  6E29               	movwf	drawCircle@f+1,c
  7243  001BB0  0E00               	movlw	0
  7244  001BB2  6E25               	movwf	drawCircle@ddF_x+1,c
  7245  001BB4  0E01               	movlw	1
  7246  001BB6  6E24               	movwf	drawCircle@ddF_x,c
  7247  001BB8  C01E  F022         	movff	drawCircle@r,??_drawCircle
  7248  001BBC  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  7249  001BC0  90D8               	bcf	status,0,c
  7250  001BC2  3622               	rlcf	??_drawCircle,f,c
  7251  001BC4  3623               	rlcf	??_drawCircle+1,f,c
  7252  001BC6  1E22               	comf	??_drawCircle,f,c
  7253  001BC8  1E23               	comf	??_drawCircle+1,f,c
  7254  001BCA  4A22               	infsnz	??_drawCircle,f,c
  7255  001BCC  2A23               	incf	??_drawCircle+1,f,c
  7256  001BCE  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  7257  001BD2  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  7258  001BD6  0E00               	movlw	0
  7259  001BD8  6E2B               	movwf	drawCircle@x+1,c
  7260  001BDA  0E00               	movlw	0
  7261  001BDC  6E2A               	movwf	drawCircle@x,c
  7262  001BDE  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  7263  001BE2  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  7264                           
  7265                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  7266  001BE6  501C               	movf	drawCircle@y0,w,c
  7267  001BE8  241E               	addwf	drawCircle@r,w,c
  7268  001BEA  6E16               	movwf	drawPixel@y,c
  7269  001BEC  C020  F017         	movff	drawCircle@color,drawPixel@color
  7270  001BF0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7271  001BF4  501A               	movf	drawCircle@x0,w,c
  7272  001BF6  EC87  F01C         	call	_drawPixel
  7273                           
  7274                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  7275  001BFA  501E               	movf	drawCircle@r,w,c
  7276  001BFC  0800               	sublw	0
  7277  001BFE  241C               	addwf	drawCircle@y0,w,c
  7278  001C00  6E16               	movwf	drawPixel@y,c
  7279  001C02  C020  F017         	movff	drawCircle@color,drawPixel@color
  7280  001C06  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7281  001C0A  501A               	movf	drawCircle@x0,w,c
  7282  001C0C  EC87  F01C         	call	_drawPixel
  7283                           
  7284                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  7285  001C10  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7286  001C14  C020  F017         	movff	drawCircle@color,drawPixel@color
  7287  001C18  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7288  001C1C  501A               	movf	drawCircle@x0,w,c
  7289  001C1E  241E               	addwf	drawCircle@r,w,c
  7290  001C20  EC87  F01C         	call	_drawPixel
  7291                           
  7292                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  7293  001C24  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  7294  001C28  C020  F017         	movff	drawCircle@color,drawPixel@color
  7295  001C2C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7296  001C30  501E               	movf	drawCircle@r,w,c
  7297  001C32  0800               	sublw	0
  7298  001C34  241A               	addwf	drawCircle@x0,w,c
  7299  001C36  EC87  F01C         	call	_drawPixel
  7300                           
  7301                           ;ST7735_TFT.c: 569: while (x < y) {
  7302  001C3A  D078               	goto	l6528
  7303  001C3C                     l6500:
  7304                           
  7305                           ;ST7735_TFT.c: 570: if (f >= 0) {
  7306  001C3C  BE29               	btfsc	drawCircle@f+1,7,c
  7307  001C3E  D00B               	goto	l341
  7308                           
  7309                           ;ST7735_TFT.c: 571: y--;
  7310  001C40  062C               	decf	drawCircle@y,f,c
  7311  001C42  A0D8               	btfss	status,0,c
  7312  001C44  062D               	decf	drawCircle@y+1,f,c
  7313                           
  7314                           ;ST7735_TFT.c: 572: ddF_y += 2;
  7315  001C46  0E02               	movlw	2
  7316  001C48  2626               	addwf	drawCircle@ddF_y,f,c
  7317  001C4A  0E00               	movlw	0
  7318  001C4C  2227               	addwfc	drawCircle@ddF_y+1,f,c
  7319                           
  7320                           ;ST7735_TFT.c: 573: f += ddF_y;
  7321  001C4E  5026               	movf	drawCircle@ddF_y,w,c
  7322  001C50  2628               	addwf	drawCircle@f,f,c
  7323  001C52  5027               	movf	drawCircle@ddF_y+1,w,c
  7324  001C54  2229               	addwfc	drawCircle@f+1,f,c
  7325  001C56                     l341:
  7326                           
  7327                           ;ST7735_TFT.c: 574: }
  7328                           ;ST7735_TFT.c: 575: x++;
  7329  001C56  4A2A               	infsnz	drawCircle@x,f,c
  7330  001C58  2A2B               	incf	drawCircle@x+1,f,c
  7331                           
  7332                           ;ST7735_TFT.c: 576: ddF_x += 2;
  7333  001C5A  0E02               	movlw	2
  7334  001C5C  2624               	addwf	drawCircle@ddF_x,f,c
  7335  001C5E  0E00               	movlw	0
  7336  001C60  2225               	addwfc	drawCircle@ddF_x+1,f,c
  7337                           
  7338                           ;ST7735_TFT.c: 577: f += ddF_x;
  7339  001C62  5024               	movf	drawCircle@ddF_x,w,c
  7340  001C64  2628               	addwf	drawCircle@f,f,c
  7341  001C66  5025               	movf	drawCircle@ddF_x+1,w,c
  7342  001C68  2229               	addwfc	drawCircle@f+1,f,c
  7343                           
  7344                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  7345  001C6A  501C               	movf	drawCircle@y0,w,c
  7346  001C6C  242C               	addwf	drawCircle@y,w,c
  7347  001C6E  6E16               	movwf	drawPixel@y,c
  7348  001C70  C020  F017         	movff	drawCircle@color,drawPixel@color
  7349  001C74  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7350  001C78  501A               	movf	drawCircle@x0,w,c
  7351  001C7A  242A               	addwf	drawCircle@x,w,c
  7352  001C7C  EC87  F01C         	call	_drawPixel
  7353                           
  7354                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  7355  001C80  501C               	movf	drawCircle@y0,w,c
  7356  001C82  242C               	addwf	drawCircle@y,w,c
  7357  001C84  6E16               	movwf	drawPixel@y,c
  7358  001C86  C020  F017         	movff	drawCircle@color,drawPixel@color
  7359  001C8A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7360  001C8E  502A               	movf	drawCircle@x,w,c
  7361  001C90  0800               	sublw	0
  7362  001C92  241A               	addwf	drawCircle@x0,w,c
  7363  001C94  EC87  F01C         	call	_drawPixel
  7364                           
  7365                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  7366  001C98  502C               	movf	drawCircle@y,w,c
  7367  001C9A  0800               	sublw	0
  7368  001C9C  241C               	addwf	drawCircle@y0,w,c
  7369  001C9E  6E16               	movwf	drawPixel@y,c
  7370  001CA0  C020  F017         	movff	drawCircle@color,drawPixel@color
  7371  001CA4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7372  001CA8  501A               	movf	drawCircle@x0,w,c
  7373  001CAA  242A               	addwf	drawCircle@x,w,c
  7374  001CAC  EC87  F01C         	call	_drawPixel
  7375                           
  7376                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  7377  001CB0  502C               	movf	drawCircle@y,w,c
  7378  001CB2  0800               	sublw	0
  7379  001CB4  241C               	addwf	drawCircle@y0,w,c
  7380  001CB6  6E16               	movwf	drawPixel@y,c
  7381  001CB8  C020  F017         	movff	drawCircle@color,drawPixel@color
  7382  001CBC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7383  001CC0  502A               	movf	drawCircle@x,w,c
  7384  001CC2  0800               	sublw	0
  7385  001CC4  241A               	addwf	drawCircle@x0,w,c
  7386  001CC6  EC87  F01C         	call	_drawPixel
  7387                           
  7388                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  7389  001CCA  501C               	movf	drawCircle@y0,w,c
  7390  001CCC  242A               	addwf	drawCircle@x,w,c
  7391  001CCE  6E16               	movwf	drawPixel@y,c
  7392  001CD0  C020  F017         	movff	drawCircle@color,drawPixel@color
  7393  001CD4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7394  001CD8  501A               	movf	drawCircle@x0,w,c
  7395  001CDA  242C               	addwf	drawCircle@y,w,c
  7396  001CDC  EC87  F01C         	call	_drawPixel
  7397                           
  7398                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  7399  001CE0  501C               	movf	drawCircle@y0,w,c
  7400  001CE2  242A               	addwf	drawCircle@x,w,c
  7401  001CE4  6E16               	movwf	drawPixel@y,c
  7402  001CE6  C020  F017         	movff	drawCircle@color,drawPixel@color
  7403  001CEA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7404  001CEE  502C               	movf	drawCircle@y,w,c
  7405  001CF0  0800               	sublw	0
  7406  001CF2  241A               	addwf	drawCircle@x0,w,c
  7407  001CF4  EC87  F01C         	call	_drawPixel
  7408                           
  7409                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7410  001CF8  502A               	movf	drawCircle@x,w,c
  7411  001CFA  0800               	sublw	0
  7412  001CFC  241C               	addwf	drawCircle@y0,w,c
  7413  001CFE  6E16               	movwf	drawPixel@y,c
  7414  001D00  C020  F017         	movff	drawCircle@color,drawPixel@color
  7415  001D04  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7416  001D08  501A               	movf	drawCircle@x0,w,c
  7417  001D0A  242C               	addwf	drawCircle@y,w,c
  7418  001D0C  EC87  F01C         	call	_drawPixel
  7419                           
  7420                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7421  001D10  502A               	movf	drawCircle@x,w,c
  7422  001D12  0800               	sublw	0
  7423  001D14  241C               	addwf	drawCircle@y0,w,c
  7424  001D16  6E16               	movwf	drawPixel@y,c
  7425  001D18  C020  F017         	movff	drawCircle@color,drawPixel@color
  7426  001D1C  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7427  001D20  502C               	movf	drawCircle@y,w,c
  7428  001D22  0800               	sublw	0
  7429  001D24  241A               	addwf	drawCircle@x0,w,c
  7430  001D26  EC87  F01C         	call	_drawPixel
  7431  001D2A  D000               	goto	l6528
  7432  001D2C                     l6528:
  7433  001D2C  502C               	movf	drawCircle@y,w,c
  7434  001D2E  5C2A               	subwf	drawCircle@x,w,c
  7435  001D30  502B               	movf	drawCircle@x+1,w,c
  7436  001D32  0A80               	xorlw	128
  7437  001D34  6E22               	movwf	??_drawCircle& (0+255),c
  7438  001D36  502D               	movf	drawCircle@y+1,w,c
  7439  001D38  0A80               	xorlw	128
  7440  001D3A  5822               	subwfb	??_drawCircle& (0+255),w,c
  7441  001D3C  A0D8               	btfss	status,0,c
  7442  001D3E  D77E               	goto	l6500
  7443  001D40  0012               	return		;funcret
  7444  001D42                     __end_of_drawCircle:
  7445                           	opt stack 0
  7446                           tblptru	equ	0xFF8
  7447                           tblptrh	equ	0xFF7
  7448                           tblptrl	equ	0xFF6
  7449                           tablat	equ	0xFF5
  7450                           prodl	equ	0xFF3
  7451                           intcon	equ	0xFF2
  7452                           intcon2	equ	0xFF1
  7453                           intcon3	equ	0xFF0
  7454                           postinc0	equ	0xFEE
  7455                           wreg	equ	0xFE8
  7456                           postdec1	equ	0xFE5
  7457                           fsr1l	equ	0xFE1
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function _PED_Control *****************
  7461 ;; Defined at:
  7462 ;;		line 420 in file "Lab8.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;  Direction       1    wreg     unsigned char 
  7465 ;;  Num_Sec         1   23[BANK0 ] unsigned char 
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;  Direction       1   24[BANK0 ] unsigned char 
  7468 ;;  i               1   25[BANK0 ] unsigned char 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;		None               void
  7471 ;; Registers used:
  7472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7478 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;Total ram usage:        3 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:   11
  7485 ;; This function calls:
  7486 ;;		_Wait_One_Second_With_Beep
  7487 ;;		_update_LCD_PED_Count
  7488 ;; This function is called by:
  7489 ;;		_Day_Mode
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text32
  7494  0035B0                     __ptext32:
  7495                           	opt stack 0
  7496  0035B0                     _PED_Control:
  7497                           	opt stack 18
  7498                           
  7499                           ;incstack = 0
  7500                           ;PED_Control@Direction stored from wreg
  7501  0035B0  0100               	movlb	0	; () banked
  7502  0035B2  6FF0               	movwf	PED_Control@Direction& (0+255),b
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;Lab8.c: 421: for(char i = Num_Sec - 1; i >0 ; i--){
  7506  0035B4  0100               	movlb	0	; () banked
  7507  0035B6  05EF               	decf	PED_Control@Num_Sec& (0+255),w,b
  7508  0035B8  0100               	movlb	0	; () banked
  7509  0035BA  6FF1               	movwf	PED_Control@i& (0+255),b
  7510  0035BC                     l6986:
  7511                           
  7512                           ; BSR set to: 0
  7513  0035BC  0100               	movlb	0	; () banked
  7514  0035BE  51F1               	movf	PED_Control@i& (0+255),w,b
  7515  0035C0  0100               	movlb	0	; () banked
  7516  0035C2  B4D8               	btfsc	status,2,c
  7517  0035C4  D00D               	goto	l6996
  7518  0035C6  D001               	goto	l6990
  7519                           
  7520                           ; BSR set to: 0
  7521  0035C8  D00B               	goto	l6996
  7522  0035CA                     l6990:
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;Lab8.c: 422: update_LCD_PED_Count(Direction, i);
  7526  0035CA  C0F1  F048         	movff	PED_Control@i,update_LCD_PED_Count@count
  7527  0035CE  0100               	movlb	0	; () banked
  7528  0035D0  51F0               	movf	PED_Control@Direction& (0+255),w,b
  7529  0035D2  EC65  F015         	call	_update_LCD_PED_Count
  7530                           
  7531                           ;Lab8.c: 423: Wait_One_Second_With_Beep();
  7532  0035D6  ECC9  F017         	call	_Wait_One_Second_With_Beep	;wreg free
  7533  0035DA  0100               	movlb	0	; () banked
  7534  0035DC  07F1               	decf	PED_Control@i& (0+255),f,b
  7535  0035DE  D7EE               	goto	l6986
  7536  0035E0                     l6996:
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;Lab8.c: 424: }
  7540                           ;Lab8.c: 425: update_LCD_PED_Count(direction, 0);
  7541  0035E0  0E00               	movlw	0
  7542  0035E2  6E48               	movwf	update_LCD_PED_Count@count,c
  7543  0035E4  506F               	movf	_direction,w,c
  7544  0035E6  EC65  F015         	call	_update_LCD_PED_Count
  7545                           
  7546                           ;Lab8.c: 426: update_LCD_PED_Count(1, 0);
  7547  0035EA  0E00               	movlw	0
  7548  0035EC  6E48               	movwf	update_LCD_PED_Count@count,c
  7549  0035EE  0E01               	movlw	1
  7550  0035F0  EC65  F015         	call	_update_LCD_PED_Count
  7551                           
  7552                           ;Lab8.c: 427: Wait_One_Second_With_Beep();
  7553  0035F4  ECC9  F017         	call	_Wait_One_Second_With_Beep	;wreg free
  7554                           
  7555                           ;Lab8.c: 428: NSPED_SW = 0;
  7556  0035F8  0E00               	movlw	0
  7557  0035FA  6E65               	movwf	_NSPED_SW,c
  7558                           
  7559                           ;Lab8.c: 429: EWPED_SW = 0;
  7560  0035FC  0E00               	movlw	0
  7561  0035FE  6E62               	movwf	_EWPED_SW,c
  7562  003600  0012               	return		;funcret
  7563  003602                     __end_of_PED_Control:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           intcon2	equ	0xFF1
  7572                           intcon3	equ	0xFF0
  7573                           postinc0	equ	0xFEE
  7574                           wreg	equ	0xFE8
  7575                           postdec1	equ	0xFE5
  7576                           fsr1l	equ	0xFE1
  7577                           status	equ	0xFD8
  7578                           
  7579 ;; *************** function _update_LCD_PED_Count *****************
  7580 ;; Defined at:
  7581 ;;		line 679 in file "Lab8.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  direction       1    wreg     unsigned char 
  7584 ;;  count           1   71[COMRAM] unsigned char 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;  direction       1   72[COMRAM] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;		None               void
  7589 ;; Registers used:
  7590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7596 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7597 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;Total ram usage:        2 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    9
  7603 ;; This function calls:
  7604 ;;		___awdiv
  7605 ;;		___awmod
  7606 ;;		_drawtext
  7607 ;; This function is called by:
  7608 ;;		_PED_Control
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text33
  7613  002ACA                     __ptext33:
  7614                           	opt stack 0
  7615  002ACA                     _update_LCD_PED_Count:
  7616                           	opt stack 19
  7617                           
  7618                           ;incstack = 0
  7619                           ;update_LCD_PED_Count@direction stored from wreg
  7620  002ACA  6E49               	movwf	update_LCD_PED_Count@direction,c
  7621                           
  7622                           ;Lab8.c: 681: switch (direction)
  7623  002ACC  D05B               	goto	l6902
  7624  002ACE                     l6892:
  7625                           
  7626                           ;Lab8.c: 684: PED_EW_Count[0] = count/10 + '0';
  7627  002ACE  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7628  002AD2  6A16               	clrf	___awdiv@dividend+1,c
  7629  002AD4  0E00               	movlw	0
  7630  002AD6  6E18               	movwf	___awdiv@divisor+1,c
  7631  002AD8  0E0A               	movlw	10
  7632  002ADA  6E17               	movwf	___awdiv@divisor,c
  7633  002ADC  ECED  F016         	call	___awdiv	;wreg free
  7634  002AE0  5015               	movf	?___awdiv,w,c
  7635  002AE2  0F30               	addlw	48
  7636  002AE4  0100               	movlb	0	; () banked
  7637  002AE6  6FC2               	movwf	_PED_EW_Count& (0+255),b
  7638                           
  7639                           ;Lab8.c: 685: PED_EW_Count[1] = count%10 + '0';
  7640  002AE8  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7641  002AEC  6A10               	clrf	___awmod@dividend+1,c
  7642  002AEE  0E00               	movlw	0
  7643  002AF0  6E12               	movwf	___awmod@divisor+1,c
  7644  002AF2  0E0A               	movlw	10
  7645  002AF4  6E11               	movwf	___awmod@divisor,c
  7646  002AF6  EC1A  F019         	call	___awmod	;wreg free
  7647  002AFA  500F               	movf	?___awmod,w,c
  7648  002AFC  0F30               	addlw	48
  7649  002AFE  0100               	movlb	0	; () banked
  7650  002B00  6FC3               	movwf	(_PED_EW_Count+1)& (0+255),b
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;Lab8.c: 686: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  7654  002B02  0E5A               	movlw	90
  7655  002B04  6E37               	movwf	drawtext@y,c
  7656  002B06  0EC2               	movlw	low _PED_EW_Count
  7657  002B08  6E38               	movwf	drawtext@_text,c
  7658  002B0A  0E00               	movlw	high _PED_EW_Count
  7659  002B0C  6E39               	movwf	drawtext@_text+1,c
  7660  002B0E  0E07               	movlw	7
  7661  002B10  6E3B               	movwf	drawtext@color+1,c
  7662  002B12  683A               	setf	drawtext@color,c
  7663  002B14  0E00               	movlw	0
  7664  002B16  6E3D               	movwf	drawtext@bg+1,c
  7665  002B18  0E00               	movlw	0
  7666  002B1A  6E3C               	movwf	drawtext@bg,c
  7667  002B1C  0E02               	movlw	2
  7668  002B1E  6E3E               	movwf	drawtext@size,c
  7669  002B20  0E02               	movlw	2
  7670  002B22  EC1D  F014         	call	_drawtext
  7671                           
  7672                           ;Lab8.c: 687: break;
  7673  002B26  D036               	goto	l567
  7674  002B28                     l6896:
  7675                           
  7676                           ;Lab8.c: 689: PED_NS_Count[0] = count/10 + '0';
  7677  002B28  C048  F015         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7678  002B2C  6A16               	clrf	___awdiv@dividend+1,c
  7679  002B2E  0E00               	movlw	0
  7680  002B30  6E18               	movwf	___awdiv@divisor+1,c
  7681  002B32  0E0A               	movlw	10
  7682  002B34  6E17               	movwf	___awdiv@divisor,c
  7683  002B36  ECED  F016         	call	___awdiv	;wreg free
  7684  002B3A  5015               	movf	?___awdiv,w,c
  7685  002B3C  0F30               	addlw	48
  7686  002B3E  0100               	movlb	0	; () banked
  7687  002B40  6FC5               	movwf	_PED_NS_Count& (0+255),b
  7688                           
  7689                           ;Lab8.c: 690: PED_NS_Count[1] = count%10 + '0';
  7690  002B42  C048  F00F         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7691  002B46  6A10               	clrf	___awmod@dividend+1,c
  7692  002B48  0E00               	movlw	0
  7693  002B4A  6E12               	movwf	___awmod@divisor+1,c
  7694  002B4C  0E0A               	movlw	10
  7695  002B4E  6E11               	movwf	___awmod@divisor,c
  7696  002B50  EC1A  F019         	call	___awmod	;wreg free
  7697  002B54  500F               	movf	?___awmod,w,c
  7698  002B56  0F30               	addlw	48
  7699  002B58  0100               	movlb	0	; () banked
  7700  002B5A  6FC6               	movwf	(_PED_NS_Count+1)& (0+255),b
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;Lab8.c: 691: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  7704  002B5C  0E1E               	movlw	30
  7705  002B5E  6E37               	movwf	drawtext@y,c
  7706  002B60  0EC5               	movlw	low _PED_NS_Count
  7707  002B62  6E38               	movwf	drawtext@_text,c
  7708  002B64  0E00               	movlw	high _PED_NS_Count
  7709  002B66  6E39               	movwf	drawtext@_text+1,c
  7710  002B68  0E00               	movlw	0
  7711  002B6A  6E3B               	movwf	drawtext@color+1,c
  7712  002B6C  0E1F               	movlw	31
  7713  002B6E  6E3A               	movwf	drawtext@color,c
  7714  002B70  0E00               	movlw	0
  7715  002B72  6E3D               	movwf	drawtext@bg+1,c
  7716  002B74  0E00               	movlw	0
  7717  002B76  6E3C               	movwf	drawtext@bg,c
  7718  002B78  0E02               	movlw	2
  7719  002B7A  6E3E               	movwf	drawtext@size,c
  7720  002B7C  0E02               	movlw	2
  7721  002B7E  EC1D  F014         	call	_drawtext
  7722                           
  7723                           ;Lab8.c: 693: }
  7724                           
  7725                           ;Lab8.c: 692: break;
  7726  002B82  D008               	goto	l567
  7727  002B84                     l6902:
  7728  002B84  5049               	movf	update_LCD_PED_Count@direction,w,c
  7729                           
  7730                           ; Switch size 1, requested type "space"
  7731                           ; Number of cases is 2, Range of values is 0 to 1
  7732                           ; switch strategies available:
  7733                           ; Name         Instructions Cycles
  7734                           ; simple_byte            7     4 (average)
  7735                           ;	Chosen strategy is simple_byte
  7736  002B86  0A00               	xorlw	0	; case 0
  7737  002B88  B4D8               	btfsc	status,2,c
  7738  002B8A  D7CE               	goto	l6896
  7739  002B8C  0A01               	xorlw	1	; case 1
  7740  002B8E  B4D8               	btfsc	status,2,c
  7741  002B90  D79E               	goto	l6892
  7742  002B92  D000               	goto	l567
  7743  002B94                     l567:
  7744  002B94  0012               	return		;funcret
  7745  002B96                     __end_of_update_LCD_PED_Count:
  7746                           	opt stack 0
  7747                           tblptru	equ	0xFF8
  7748                           tblptrh	equ	0xFF7
  7749                           tblptrl	equ	0xFF6
  7750                           tablat	equ	0xFF5
  7751                           prodl	equ	0xFF3
  7752                           intcon	equ	0xFF2
  7753                           intcon2	equ	0xFF1
  7754                           intcon3	equ	0xFF0
  7755                           postinc0	equ	0xFEE
  7756                           wreg	equ	0xFE8
  7757                           postdec1	equ	0xFE5
  7758                           fsr1l	equ	0xFE1
  7759                           status	equ	0xFD8
  7760                           
  7761 ;; *************** function _Wait_One_Second_With_Beep *****************
  7762 ;; Defined at:
  7763 ;;		line 405 in file "Lab8.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;		None
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;		None
  7768 ;; Return value:  Size  Location     Type
  7769 ;;		None               void
  7770 ;; Registers used:
  7771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7781 ;;Total ram usage:        0 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:   10
  7784 ;; This function calls:
  7785 ;;		_Activate_Buzzer
  7786 ;;		_Deactivate_Buzzer
  7787 ;;		_Wait_Half_Second
  7788 ;;		_drawtext
  7789 ;;		_strcpy
  7790 ;;		_update_LCD_misc
  7791 ;; This function is called by:
  7792 ;;		_PED_Control
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text34
  7797  002F92                     __ptext34:
  7798                           	opt stack 0
  7799  002F92                     _Wait_One_Second_With_Beep:
  7800                           	opt stack 18
  7801                           
  7802                           ;Lab8.c: 407: PORTDbits.RD7 = 1;
  7803                           
  7804                           ;incstack = 0
  7805  002F92  8E83               	bsf	3971,7,c	;volatile
  7806                           
  7807                           ;Lab8.c: 408: strcpy(txt,"*");
  7808  002F94  C05F  F00F         	movff	_txt,strcpy@to
  7809  002F98  C060  F010         	movff	_txt+1,strcpy@to+1
  7810  002F9C  0EFD               	movlw	low STR_1
  7811  002F9E  6E11               	movwf	strcpy@from,c
  7812  002FA0  0EFF               	movlw	high STR_1
  7813  002FA2  6E12               	movwf	strcpy@from+1,c
  7814  002FA4  EC6E  F01C         	call	_strcpy	;wreg free
  7815                           
  7816                           ;Lab8.c: 409: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7817  002FA8  0E0A               	movlw	10
  7818  002FAA  6E37               	movwf	drawtext@y,c
  7819  002FAC  C05F  F038         	movff	_txt,drawtext@_text
  7820  002FB0  C060  F039         	movff	_txt+1,drawtext@_text+1
  7821  002FB4  0EFF               	movlw	255
  7822  002FB6  6E3B               	movwf	drawtext@color+1,c
  7823  002FB8  683A               	setf	drawtext@color,c
  7824  002FBA  0E00               	movlw	0
  7825  002FBC  6E3D               	movwf	drawtext@bg+1,c
  7826  002FBE  0E00               	movlw	0
  7827  002FC0  6E3C               	movwf	drawtext@bg,c
  7828  002FC2  0E01               	movlw	1
  7829  002FC4  6E3E               	movwf	drawtext@size,c
  7830  002FC6  0E78               	movlw	120
  7831  002FC8  EC1D  F014         	call	_drawtext
  7832                           
  7833                           ;Lab8.c: 410: Activate_Buzzer();
  7834  002FCC  EC74  F01D         	call	_Activate_Buzzer	;wreg free
  7835                           
  7836                           ;Lab8.c: 411: Wait_Half_Second();
  7837  002FD0  EC25  F01D         	call	_Wait_Half_Second	;wreg free
  7838                           
  7839                           ;Lab8.c: 412: PORTDbits.RD7 = 0;
  7840  002FD4  9E83               	bcf	3971,7,c	;volatile
  7841                           
  7842                           ;Lab8.c: 413: strcpy(txt," ");
  7843  002FD6  C05F  F00F         	movff	_txt,strcpy@to
  7844  002FDA  C060  F010         	movff	_txt+1,strcpy@to+1
  7845  002FDE  0EFB               	movlw	low STR_2
  7846  002FE0  6E11               	movwf	strcpy@from,c
  7847  002FE2  0EFF               	movlw	high STR_2
  7848  002FE4  6E12               	movwf	strcpy@from+1,c
  7849  002FE6  EC6E  F01C         	call	_strcpy	;wreg free
  7850                           
  7851                           ;Lab8.c: 414: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7852  002FEA  0E0A               	movlw	10
  7853  002FEC  6E37               	movwf	drawtext@y,c
  7854  002FEE  C05F  F038         	movff	_txt,drawtext@_text
  7855  002FF2  C060  F039         	movff	_txt+1,drawtext@_text+1
  7856  002FF6  0EFF               	movlw	255
  7857  002FF8  6E3B               	movwf	drawtext@color+1,c
  7858  002FFA  683A               	setf	drawtext@color,c
  7859  002FFC  0E00               	movlw	0
  7860  002FFE  6E3D               	movwf	drawtext@bg+1,c
  7861  003000  0E00               	movlw	0
  7862  003002  6E3C               	movwf	drawtext@bg,c
  7863  003004  0E01               	movlw	1
  7864  003006  6E3E               	movwf	drawtext@size,c
  7865  003008  0E78               	movlw	120
  7866  00300A  EC1D  F014         	call	_drawtext
  7867                           
  7868                           ;Lab8.c: 415: Deactivate_Buzzer();
  7869  00300E  EC9F  F01D         	call	_Deactivate_Buzzer	;wreg free
  7870                           
  7871                           ;Lab8.c: 416: Wait_Half_Second();
  7872  003012  EC25  F01D         	call	_Wait_Half_Second	;wreg free
  7873                           
  7874                           ;Lab8.c: 417: update_LCD_misc();
  7875  003016  ECC8  F00B         	call	_update_LCD_misc	;wreg free
  7876  00301A  0012               	return		;funcret
  7877  00301C                     __end_of_Wait_One_Second_With_Beep:
  7878                           	opt stack 0
  7879                           tblptru	equ	0xFF8
  7880                           tblptrh	equ	0xFF7
  7881                           tblptrl	equ	0xFF6
  7882                           tablat	equ	0xFF5
  7883                           prodl	equ	0xFF3
  7884                           intcon	equ	0xFF2
  7885                           intcon2	equ	0xFF1
  7886                           intcon3	equ	0xFF0
  7887                           postinc0	equ	0xFEE
  7888                           wreg	equ	0xFE8
  7889                           postdec1	equ	0xFE5
  7890                           fsr1l	equ	0xFE1
  7891                           status	equ	0xFD8
  7892                           
  7893 ;; *************** function _update_LCD_misc *****************
  7894 ;; Defined at:
  7895 ;;		line 696 in file "Lab8.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;		None
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  nStep           2   92[COMRAM] int 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;		None               void
  7902 ;; Registers used:
  7903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;Total ram usage:        2 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    9
  7916 ;; This function calls:
  7917 ;;		___awtoft
  7918 ;;		___ftdiv
  7919 ;;		___ftge
  7920 ;;		___wmul
  7921 ;;		_drawtext
  7922 ;;		_get_full_ADC
  7923 ;;		_printf
  7924 ;; This function is called by:
  7925 ;;		_Wait_One_Second
  7926 ;;		_Wait_One_Second_With_Beep
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           	psect	text35
  7931  001790                     __ptext35:
  7932                           	opt stack 0
  7933  001790                     _update_LCD_misc:
  7934                           	opt stack 18
  7935                           
  7936                           ;Lab8.c: 698: int nStep = get_full_ADC();
  7937                           
  7938                           ;incstack = 0
  7939  001790  ECF2  F01C         	call	_get_full_ADC	;wreg free
  7940  001794  C00F  F05D         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7941  001798  C010  F05E         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7942                           
  7943                           ;Lab8.c: 699: volt = nStep * 5 /1024.0;
  7944  00179C  C05D  F01D         	movff	update_LCD_misc@nStep,___wmul@multiplier
  7945  0017A0  C05E  F01E         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  7946  0017A4  0E00               	movlw	0
  7947  0017A6  6E20               	movwf	___wmul@multiplicand+1,c
  7948  0017A8  0E05               	movlw	5
  7949  0017AA  6E1F               	movwf	___wmul@multiplicand,c
  7950  0017AC  ECDE  F01C         	call	___wmul	;wreg free
  7951  0017B0  C01D  F023         	movff	?___wmul,___awtoft@c
  7952  0017B4  C01E  F024         	movff	?___wmul+1,___awtoft@c+1
  7953  0017B8  EC35  F01C         	call	___awtoft	;wreg free
  7954  0017BC  C023  F027         	movff	?___awtoft,___ftdiv@f1
  7955  0017C0  C024  F028         	movff	?___awtoft+1,___ftdiv@f1+1
  7956  0017C4  C025  F029         	movff	?___awtoft+2,___ftdiv@f1+2
  7957  0017C8  0E00               	movlw	0
  7958  0017CA  6E2A               	movwf	___ftdiv@f2,c
  7959  0017CC  0E80               	movlw	128
  7960  0017CE  6E2B               	movwf	___ftdiv@f2+1,c
  7961  0017D0  0E44               	movlw	68
  7962  0017D2  6E2C               	movwf	___ftdiv@f2+2,c
  7963  0017D4  ECAC  F013         	call	___ftdiv	;wreg free
  7964  0017D8  C027  F080         	movff	?___ftdiv,_volt
  7965  0017DC  C028  F081         	movff	?___ftdiv+1,_volt+1
  7966  0017E0  C029  F082         	movff	?___ftdiv+2,_volt+2
  7967                           
  7968                           ;Lab8.c: 700: SW_MODE = volt < 2.25 ? 1:0;
  7969  0017E4  C080  F00F         	movff	_volt,___ftge@ff1
  7970  0017E8  C081  F010         	movff	_volt+1,___ftge@ff1+1
  7971  0017EC  C082  F011         	movff	_volt+2,___ftge@ff1+2
  7972  0017F0  0E00               	movlw	0
  7973  0017F2  6E12               	movwf	___ftge@ff2,c
  7974  0017F4  0E10               	movlw	16
  7975  0017F6  6E13               	movwf	___ftge@ff2+1,c
  7976  0017F8  0E40               	movlw	64
  7977  0017FA  6E14               	movwf	___ftge@ff2+2,c
  7978  0017FC  EC38  F017         	call	___ftge	;wreg free
  7979  001800  B0D8               	btfsc	status,0,c
  7980  001802  D002               	goto	u6250
  7981  001804  0E01               	movlw	1
  7982  001806  D001               	goto	u6260
  7983  001808                     u6250:
  7984  001808  0E00               	movlw	0
  7985  00180A                     u6260:
  7986  00180A  6E69               	movwf	_SW_MODE,c
  7987                           
  7988                           ;Lab8.c: 701: printf("Voltage = %f \r\n", volt);
  7989  00180C  0EB1               	movlw	low STR_17
  7990  00180E  6E52               	movwf	printf@f,c
  7991  001810  0EFF               	movlw	high STR_17
  7992  001812  6E53               	movwf	printf@f+1,c
  7993  001814  C080  F054         	movff	_volt,?_printf+2
  7994  001818  C081  F055         	movff	_volt+1,?_printf+3
  7995  00181C  C082  F056         	movff	_volt+2,?_printf+4
  7996  001820  EC9D  F003         	call	_printf	;wreg free
  7997                           
  7998                           ;Lab8.c: 702: SW_EWPED = EWPED_SW;
  7999  001824  C062  F068         	movff	_EWPED_SW,_SW_EWPED
  8000                           
  8001                           ;Lab8.c: 703: SW_EWLT = PORTAbits.RA2;
  8002  001828  0E00               	movlw	0
  8003  00182A  B480               	btfsc	3968,2,c	;volatile
  8004  00182C  0E01               	movlw	1
  8005  00182E  6E67               	movwf	_SW_EWLT,c
  8006                           
  8007                           ;Lab8.c: 704: SW_NSPED = NSPED_SW;
  8008  001830  C065  F06B         	movff	_NSPED_SW,_SW_NSPED
  8009                           
  8010                           ;Lab8.c: 705: SW_NSLT = PORTAbits.RA1;
  8011  001834  0E00               	movlw	0
  8012  001836  B280               	btfsc	3968,1,c	;volatile
  8013  001838  0E01               	movlw	1
  8014  00183A  6E6A               	movwf	_SW_NSLT,c
  8015                           
  8016                           ;Lab8.c: 707: if (SW_MODE == 0) SW_MODE_Txt[0]= 'N'; else SW_MODE_Txt[0] = 'D';
  8017  00183C  5069               	movf	_SW_MODE,w,c
  8018  00183E  A4D8               	btfss	status,2,c
  8019  001840  D002               	goto	l6564
  8020  001842  0E4E               	movlw	78
  8021  001844  D001               	goto	L10
  8022  001846                     l6564:
  8023  001846  0E44               	movlw	68
  8024  001848                     L10:
  8025  001848  0100               	movlb	0	; () banked
  8026  00184A  6FD2               	movwf	_SW_MODE_Txt& (0+255),b
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;Lab8.c: 708: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  8030  00184C  5068               	movf	_SW_EWPED,w,c
  8031  00184E  A4D8               	btfss	status,2,c
  8032  001850  D002               	goto	l6568
  8033                           
  8034                           ; BSR set to: 0
  8035  001852  0E30               	movlw	48
  8036  001854  D001               	goto	L11
  8037  001856                     l6568:
  8038                           
  8039                           ; BSR set to: 0
  8040  001856  0E31               	movlw	49
  8041  001858                     L11:
  8042  001858  0100               	movlb	0	; () banked
  8043  00185A  6FD0               	movwf	_SW_EWPED_Txt& (0+255),b
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;Lab8.c: 709: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  8047  00185C  5067               	movf	_SW_EWLT,w,c
  8048  00185E  A4D8               	btfss	status,2,c
  8049  001860  D002               	goto	l6572
  8050                           
  8051                           ; BSR set to: 0
  8052  001862  0E30               	movlw	48
  8053  001864  D001               	goto	L12
  8054  001866                     l6572:
  8055                           
  8056                           ; BSR set to: 0
  8057  001866  0E31               	movlw	49
  8058  001868                     L12:
  8059  001868  0100               	movlb	0	; () banked
  8060  00186A  6FCE               	movwf	_SW_EWLT_Txt& (0+255),b
  8061                           
  8062                           ; BSR set to: 0
  8063                           ;Lab8.c: 710: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  8064  00186C  506B               	movf	_SW_NSPED,w,c
  8065  00186E  A4D8               	btfss	status,2,c
  8066  001870  D002               	goto	l6576
  8067                           
  8068                           ; BSR set to: 0
  8069  001872  0E30               	movlw	48
  8070  001874  D001               	goto	L13
  8071  001876                     l6576:
  8072                           
  8073                           ; BSR set to: 0
  8074  001876  0E31               	movlw	49
  8075  001878                     L13:
  8076  001878  0100               	movlb	0	; () banked
  8077  00187A  6FD6               	movwf	_SW_NSPED_Txt& (0+255),b
  8078                           
  8079                           ; BSR set to: 0
  8080                           ;Lab8.c: 711: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  8081  00187C  506A               	movf	_SW_NSLT,w,c
  8082  00187E  A4D8               	btfss	status,2,c
  8083  001880  D002               	goto	l6580
  8084                           
  8085                           ; BSR set to: 0
  8086  001882  0E30               	movlw	48
  8087  001884  D001               	goto	L14
  8088  001886                     l6580:
  8089                           
  8090                           ; BSR set to: 0
  8091  001886  0E31               	movlw	49
  8092  001888                     L14:
  8093  001888  0100               	movlb	0	; () banked
  8094  00188A  6FD4               	movwf	_SW_NSLT_Txt& (0+255),b
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;Lab8.c: 712: if (FLASHING_REQUEST == 0) FlashingR_Txt[0] = '0'; else FlashingR_Txt[0] =
      +                           '1';
  8098  00188C  5064               	movf	_FLASHING_REQUEST,w,c
  8099  00188E  A4D8               	btfss	status,2,c
  8100  001890  D002               	goto	l6584
  8101                           
  8102                           ; BSR set to: 0
  8103  001892  0E30               	movlw	48
  8104  001894  D001               	goto	L15
  8105  001896                     l6584:
  8106                           
  8107                           ; BSR set to: 0
  8108  001896  0E31               	movlw	49
  8109  001898                     L15:
  8110  001898  0100               	movlb	0	; () banked
  8111  00189A  6FCA               	movwf	_FlashingR_Txt& (0+255),b
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;Lab8.c: 713: if (FLASHING == 0) FlashingS_Txt[0] = '0'; else FlashingS_Txt[0] = '1';
  8115  00189C  5063               	movf	_FLASHING,w,c
  8116  00189E  A4D8               	btfss	status,2,c
  8117  0018A0  D002               	goto	l6588
  8118                           
  8119                           ; BSR set to: 0
  8120  0018A2  0E30               	movlw	48
  8121  0018A4  D001               	goto	L16
  8122  0018A6                     l6588:
  8123                           
  8124                           ; BSR set to: 0
  8125  0018A6  0E31               	movlw	49
  8126  0018A8                     L16:
  8127  0018A8  0100               	movlb	0	; () banked
  8128  0018AA  6FCC               	movwf	_FlashingS_Txt& (0+255),b
  8129  0018AC  D000               	goto	l6590
  8130  0018AE                     l6590:
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;Lab8.c: 715: drawtext(70,10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  8134  0018AE  0E0A               	movlw	10
  8135  0018B0  6E37               	movwf	drawtext@y,c
  8136  0018B2  0ECA               	movlw	low _FlashingR_Txt
  8137  0018B4  6E38               	movwf	drawtext@_text,c
  8138  0018B6  0E00               	movlw	high _FlashingR_Txt
  8139  0018B8  6E39               	movwf	drawtext@_text+1,c
  8140  0018BA  0EFF               	movlw	255
  8141  0018BC  6E3B               	movwf	drawtext@color+1,c
  8142  0018BE  683A               	setf	drawtext@color,c
  8143  0018C0  0E00               	movlw	0
  8144  0018C2  6E3D               	movwf	drawtext@bg+1,c
  8145  0018C4  0E00               	movlw	0
  8146  0018C6  6E3C               	movwf	drawtext@bg,c
  8147  0018C8  0E01               	movlw	1
  8148  0018CA  6E3E               	movwf	drawtext@size,c
  8149  0018CC  0E46               	movlw	70
  8150  0018CE  EC1D  F014         	call	_drawtext
  8151                           
  8152                           ;Lab8.c: 716: drawtext(100,10, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  8153  0018D2  0E0A               	movlw	10
  8154  0018D4  6E37               	movwf	drawtext@y,c
  8155  0018D6  0ECC               	movlw	low _FlashingS_Txt
  8156  0018D8  6E38               	movwf	drawtext@_text,c
  8157  0018DA  0E00               	movlw	high _FlashingS_Txt
  8158  0018DC  6E39               	movwf	drawtext@_text+1,c
  8159  0018DE  0EFF               	movlw	255
  8160  0018E0  6E3B               	movwf	drawtext@color+1,c
  8161  0018E2  683A               	setf	drawtext@color,c
  8162  0018E4  0E00               	movlw	0
  8163  0018E6  6E3D               	movwf	drawtext@bg+1,c
  8164  0018E8  0E00               	movlw	0
  8165  0018EA  6E3C               	movwf	drawtext@bg,c
  8166  0018EC  0E01               	movlw	1
  8167  0018EE  6E3E               	movwf	drawtext@size,c
  8168  0018F0  0E64               	movlw	100
  8169  0018F2  EC1D  F014         	call	_drawtext
  8170                           
  8171                           ;Lab8.c: 717: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  8172  0018F6  0E0A               	movlw	10
  8173  0018F8  6E37               	movwf	drawtext@y,c
  8174  0018FA  0EC8               	movlw	low _Act_Mode_Txt
  8175  0018FC  6E38               	movwf	drawtext@_text,c
  8176  0018FE  0E00               	movlw	high _Act_Mode_Txt
  8177  001900  6E39               	movwf	drawtext@_text+1,c
  8178  001902  0EFF               	movlw	255
  8179  001904  6E3B               	movwf	drawtext@color+1,c
  8180  001906  683A               	setf	drawtext@color,c
  8181  001908  0E00               	movlw	0
  8182  00190A  6E3D               	movwf	drawtext@bg+1,c
  8183  00190C  0E00               	movlw	0
  8184  00190E  6E3C               	movwf	drawtext@bg,c
  8185  001910  0E01               	movlw	1
  8186  001912  6E3E               	movwf	drawtext@size,c
  8187  001914  0E23               	movlw	35
  8188  001916  EC1D  F014         	call	_drawtext
  8189                           
  8190                           ;Lab8.c: 718: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  8191  00191A  0E95               	movlw	149
  8192  00191C  6E37               	movwf	drawtext@y,c
  8193  00191E  0ED0               	movlw	low _SW_EWPED_Txt
  8194  001920  6E38               	movwf	drawtext@_text,c
  8195  001922  0E00               	movlw	high _SW_EWPED_Txt
  8196  001924  6E39               	movwf	drawtext@_text+1,c
  8197  001926  0EFF               	movlw	255
  8198  001928  6E3B               	movwf	drawtext@color+1,c
  8199  00192A  683A               	setf	drawtext@color,c
  8200  00192C  0E00               	movlw	0
  8201  00192E  6E3D               	movwf	drawtext@bg+1,c
  8202  001930  0E00               	movlw	0
  8203  001932  6E3C               	movwf	drawtext@bg,c
  8204  001934  0E01               	movlw	1
  8205  001936  6E3E               	movwf	drawtext@size,c
  8206  001938  0E06               	movlw	6
  8207  00193A  EC1D  F014         	call	_drawtext
  8208                           
  8209                           ;Lab8.c: 719: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  8210  00193E  0E95               	movlw	149
  8211  001940  6E37               	movwf	drawtext@y,c
  8212  001942  0ECE               	movlw	low _SW_EWLT_Txt
  8213  001944  6E38               	movwf	drawtext@_text,c
  8214  001946  0E00               	movlw	high _SW_EWLT_Txt
  8215  001948  6E39               	movwf	drawtext@_text+1,c
  8216  00194A  0EFF               	movlw	255
  8217  00194C  6E3B               	movwf	drawtext@color+1,c
  8218  00194E  683A               	setf	drawtext@color,c
  8219  001950  0E00               	movlw	0
  8220  001952  6E3D               	movwf	drawtext@bg+1,c
  8221  001954  0E00               	movlw	0
  8222  001956  6E3C               	movwf	drawtext@bg,c
  8223  001958  0E01               	movlw	1
  8224  00195A  6E3E               	movwf	drawtext@size,c
  8225  00195C  0E20               	movlw	32
  8226  00195E  EC1D  F014         	call	_drawtext
  8227                           
  8228                           ;Lab8.c: 720: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  8229  001962  0E95               	movlw	149
  8230  001964  6E37               	movwf	drawtext@y,c
  8231  001966  0ED6               	movlw	low _SW_NSPED_Txt
  8232  001968  6E38               	movwf	drawtext@_text,c
  8233  00196A  0E00               	movlw	high _SW_NSPED_Txt
  8234  00196C  6E39               	movwf	drawtext@_text+1,c
  8235  00196E  0EFF               	movlw	255
  8236  001970  6E3B               	movwf	drawtext@color+1,c
  8237  001972  683A               	setf	drawtext@color,c
  8238  001974  0E00               	movlw	0
  8239  001976  6E3D               	movwf	drawtext@bg+1,c
  8240  001978  0E00               	movlw	0
  8241  00197A  6E3C               	movwf	drawtext@bg,c
  8242  00197C  0E01               	movlw	1
  8243  00197E  6E3E               	movwf	drawtext@size,c
  8244  001980  0E3A               	movlw	58
  8245  001982  EC1D  F014         	call	_drawtext
  8246                           
  8247                           ;Lab8.c: 721: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  8248  001986  0E95               	movlw	149
  8249  001988  6E37               	movwf	drawtext@y,c
  8250  00198A  0ED4               	movlw	low _SW_NSLT_Txt
  8251  00198C  6E38               	movwf	drawtext@_text,c
  8252  00198E  0E00               	movlw	high _SW_NSLT_Txt
  8253  001990  6E39               	movwf	drawtext@_text+1,c
  8254  001992  0EFF               	movlw	255
  8255  001994  6E3B               	movwf	drawtext@color+1,c
  8256  001996  683A               	setf	drawtext@color,c
  8257  001998  0E00               	movlw	0
  8258  00199A  6E3D               	movwf	drawtext@bg+1,c
  8259  00199C  0E00               	movlw	0
  8260  00199E  6E3C               	movwf	drawtext@bg,c
  8261  0019A0  0E01               	movlw	1
  8262  0019A2  6E3E               	movwf	drawtext@size,c
  8263  0019A4  0E57               	movlw	87
  8264  0019A6  EC1D  F014         	call	_drawtext
  8265                           
  8266                           ;Lab8.c: 722: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  8267  0019AA  0E95               	movlw	149
  8268  0019AC  6E37               	movwf	drawtext@y,c
  8269  0019AE  0ED2               	movlw	low _SW_MODE_Txt
  8270  0019B0  6E38               	movwf	drawtext@_text,c
  8271  0019B2  0E00               	movlw	high _SW_MODE_Txt
  8272  0019B4  6E39               	movwf	drawtext@_text+1,c
  8273  0019B6  0EFF               	movlw	255
  8274  0019B8  6E3B               	movwf	drawtext@color+1,c
  8275  0019BA  683A               	setf	drawtext@color,c
  8276  0019BC  0E00               	movlw	0
  8277  0019BE  6E3D               	movwf	drawtext@bg+1,c
  8278  0019C0  0E00               	movlw	0
  8279  0019C2  6E3C               	movwf	drawtext@bg,c
  8280  0019C4  0E01               	movlw	1
  8281  0019C6  6E3E               	movwf	drawtext@size,c
  8282  0019C8  0E70               	movlw	112
  8283  0019CA  EC1D  F014         	call	_drawtext
  8284  0019CE  0012               	return		;funcret
  8285  0019D0                     __end_of_update_LCD_misc:
  8286                           	opt stack 0
  8287                           tblptru	equ	0xFF8
  8288                           tblptrh	equ	0xFF7
  8289                           tblptrl	equ	0xFF6
  8290                           tablat	equ	0xFF5
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           intcon2	equ	0xFF1
  8294                           intcon3	equ	0xFF0
  8295                           postinc0	equ	0xFEE
  8296                           wreg	equ	0xFE8
  8297                           postdec1	equ	0xFE5
  8298                           fsr1l	equ	0xFE1
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function _printf *****************
  8302 ;; Defined at:
  8303 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  f               2   81[COMRAM] PTR const unsigned char 
  8306 ;;		 -> STR_17(16), 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  tmpval          4   15[BANK0 ] struct .
  8309 ;;  val             4    9[BANK0 ] unsigned long 
  8310 ;;  fval            3   19[BANK0 ] unsigned long 
  8311 ;;  cp              3    0        PTR const unsigned char 
  8312 ;;  exp             2   13[BANK0 ] int 
  8313 ;;  prec            2    7[BANK0 ] int 
  8314 ;;  flag            2    5[BANK0 ] unsigned short 
  8315 ;;  ap              2    3[BANK0 ] PTR void [1]
  8316 ;;		 -> ?_printf(2), 
  8317 ;;  len             2    0        unsigned int 
  8318 ;;  width           2    0        int 
  8319 ;;  c               1   22[BANK0 ] char 
  8320 ;;  d               1    0        unsigned char 
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  2   81[COMRAM] int 
  8323 ;; Registers used:
  8324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8330 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;      Totals:        11      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8334 ;;Total ram usage:       34 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    5
  8337 ;; This function calls:
  8338 ;;		___awdiv
  8339 ;;		___ftadd
  8340 ;;		___ftge
  8341 ;;		___ftmul
  8342 ;;		___ftneg
  8343 ;;		___ftsub
  8344 ;;		___fttol
  8345 ;;		___lldiv
  8346 ;;		___llmod
  8347 ;;		___lltoft
  8348 ;;		___wmul
  8349 ;;		__div_to_l_
  8350 ;;		__tdiv_to_l_
  8351 ;;		_fround
  8352 ;;		_putch
  8353 ;;		_scale
  8354 ;; This function is called by:
  8355 ;;		_update_LCD_misc
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text36
  8360  00073A                     __ptext36:
  8361                           	opt stack 0
  8362  00073A                     _printf:
  8363                           	opt stack 21
  8364                           
  8365                           ;doprnt.c: 466: va_list ap;
  8366                           ;doprnt.c: 499: signed char c;
  8367                           ;doprnt.c: 501: int width;
  8368                           ;doprnt.c: 504: int prec;
  8369                           ;doprnt.c: 508: unsigned short flag;
  8370                           ;doprnt.c: 515: char d;
  8371                           ;doprnt.c: 516: double fval;
  8372                           ;doprnt.c: 517: int exp;
  8373                           ;doprnt.c: 523: union {
  8374                           ;doprnt.c: 524: unsigned long vd;
  8375                           ;doprnt.c: 525: double integ;
  8376                           ;doprnt.c: 526: } tmpval;
  8377                           ;doprnt.c: 528: unsigned long val;
  8378                           ;doprnt.c: 529: unsigned len;
  8379                           ;doprnt.c: 530: const char * cp;
  8380                           ;doprnt.c: 533: *ap = __va_start();
  8381                           
  8382                           ;incstack = 0
  8383  00073A  0E54               	movlw	low (?_printf+2)
  8384  00073C  0100               	movlb	0	; () banked
  8385  00073E  6FDB               	movwf	printf@ap& (0+255),b
  8386  000740  0E00               	movlw	high (?_printf+2)
  8387  000742  0100               	movlb	0	; () banked
  8388  000744  6FDC               	movwf	(printf@ap+1)& (0+255),b
  8389                           
  8390                           ;doprnt.c: 536: while(c = *f++) {
  8391  000746  D351               	goto	l6408
  8392  000748                     l6260:
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;doprnt.c: 538: if(c != '%')
  8396  000748  0E25               	movlw	37
  8397  00074A  0100               	movlb	0	; () banked
  8398  00074C  19EE               	xorwf	printf@c& (0+255),w,b
  8399  00074E  B4D8               	btfsc	status,2,c
  8400  000750  D005               	goto	l6264
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;doprnt.c: 540: {
  8404                           ;doprnt.c: 541: (putch(c) );
  8405  000752  0100               	movlb	0	; () banked
  8406  000754  51EE               	movf	printf@c& (0+255),w,b
  8407  000756  EC8D  F01D         	call	_putch
  8408                           
  8409                           ;doprnt.c: 542: continue;
  8410  00075A  D347               	goto	l6408
  8411  00075C                     l6264:
  8412                           
  8413                           ;doprnt.c: 543: }
  8414                           ;doprnt.c: 548: flag = 0;
  8415  00075C  0E00               	movlw	0
  8416  00075E  0100               	movlb	0	; () banked
  8417  000760  6FDE               	movwf	(printf@flag+1)& (0+255),b
  8418  000762  0E00               	movlw	0
  8419  000764  6FDD               	movwf	printf@flag& (0+255),b
  8420                           
  8421                           ;doprnt.c: 635: switch(c = *f++) {
  8422  000766  D006               	goto	l6270
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;doprnt.c: 638: goto alldone;
  8426                           
  8427                           ;doprnt.c: 637: case 0:
  8428  000768  D34F               	goto	l667
  8429  00076A                     l6266:
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;doprnt.c: 663: flag |= 0x400;
  8433  00076A  0100               	movlb	0	; () banked
  8434  00076C  85DE               	bsf	(printf@flag+1)& (0+255),2,b
  8435                           
  8436                           ;doprnt.c: 664: break;
  8437  00076E  D014               	goto	l6272
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;doprnt.c: 813: continue;
  8441                           
  8442                           ;doprnt.c: 802: default:
  8443  000770  D33C               	goto	l6408
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;doprnt.c: 822: }
  8447  000772  D012               	goto	l6272
  8448  000774                     l6270:
  8449                           
  8450                           ; BSR set to: 0
  8451  000774  C052  FFF6         	movff	printf@f,tblptrl
  8452  000778  C053  FFF7         	movff	printf@f+1,tblptrh
  8453  00077C  4A52               	infsnz	printf@f,f,c
  8454  00077E  2A53               	incf	printf@f+1,f,c
  8455  000780                     	if	0	;tblptru may be non-zero
  8456  000780                     	endif
  8457  000780                     	if	0	;tblptru may be non-zero
  8458  000780                     	endif
  8459  000780  0008               	tblrd		*
  8460  000782  CFF5 F0EE          	movff	tablat,printf@c
  8461  000786  0100               	movlb	0	; () banked
  8462  000788  51EE               	movf	printf@c& (0+255),w,b
  8463                           
  8464                           ; Switch size 1, requested type "space"
  8465                           ; Number of cases is 2, Range of values is 0 to 102
  8466                           ; switch strategies available:
  8467                           ; Name         Instructions Cycles
  8468                           ; simple_byte            7     4 (average)
  8469                           ;	Chosen strategy is simple_byte
  8470  00078A  0A00               	xorlw	0	; case 0
  8471  00078C  B4D8               	btfsc	status,2,c
  8472  00078E  D33C               	goto	l667
  8473  000790  0A66               	xorlw	102	; case 102
  8474  000792  B4D8               	btfsc	status,2,c
  8475  000794  D7EA               	goto	l6266
  8476  000796  D329               	goto	l6408
  8477  000798                     l6272:
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;doprnt.c: 825: if(flag & (0x700)) {
  8481  000798  0E07               	movlw	7
  8482  00079A  0100               	movlb	0	; () banked
  8483  00079C  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  8484  00079E  B4D8               	btfsc	status,2,c
  8485  0007A0  D314               	goto	l6404
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;doprnt.c: 829: prec = 6;
  8489  0007A2  0E00               	movlw	0
  8490  0007A4  0100               	movlb	0	; () banked
  8491  0007A6  6FE0               	movwf	(printf@prec+1)& (0+255),b
  8492  0007A8  0E06               	movlw	6
  8493  0007AA  6FDF               	movwf	printf@prec& (0+255),b
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8497  0007AC  C0DB  FFD9         	movff	printf@ap,fsr2l
  8498  0007B0  C0DC  FFDA         	movff	printf@ap+1,fsr2h
  8499  0007B4  CFDE F0EB          	movff	postinc2,printf@fval
  8500  0007B8  CFDE F0EC          	movff	postinc2,printf@fval+1
  8501  0007BC  CFDD F0ED          	movff	postdec2,printf@fval+2
  8502                           
  8503                           ; BSR set to: 0
  8504  0007C0  0E03               	movlw	3
  8505  0007C2  0100               	movlb	0	; () banked
  8506  0007C4  27DB               	addwf	printf@ap& (0+255),f,b
  8507  0007C6  0E00               	movlw	0
  8508  0007C8  23DC               	addwfc	(printf@ap+1)& (0+255),f,b
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;doprnt.c: 831: if(fval < 0.0) {
  8512  0007CA  0100               	movlb	0	; () banked
  8513  0007CC  AFED               	btfss	(printf@fval+2)& (0+255),7,b
  8514  0007CE  D012               	goto	l6286
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;doprnt.c: 832: fval = -fval;
  8518  0007D0  C0EB  F00F         	movff	printf@fval,___ftneg@f1
  8519  0007D4  C0EC  F010         	movff	printf@fval+1,___ftneg@f1+1
  8520  0007D8  C0ED  F011         	movff	printf@fval+2,___ftneg@f1+2
  8521  0007DC  EC05  F01D         	call	___ftneg	;wreg free
  8522  0007E0  C00F  F0EB         	movff	?___ftneg,printf@fval
  8523  0007E4  C010  F0EC         	movff	?___ftneg+1,printf@fval+1
  8524  0007E8  C011  F0ED         	movff	?___ftneg+2,printf@fval+2
  8525                           
  8526                           ;doprnt.c: 833: flag |= 0x03;
  8527  0007EC  0E03               	movlw	3
  8528  0007EE  0100               	movlb	0	; () banked
  8529  0007F0  13DD               	iorwf	printf@flag& (0+255),f,b
  8530  0007F2  D000               	goto	l6286
  8531  0007F4                     l6286:
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;doprnt.c: 834: }
  8535                           ;doprnt.c: 835: exp = 0;
  8536  0007F4  0E00               	movlw	0
  8537  0007F6  0100               	movlb	0	; () banked
  8538  0007F8  6FE6               	movwf	(printf@exp+1)& (0+255),b
  8539  0007FA  0E00               	movlw	0
  8540  0007FC  6FE5               	movwf	printf@exp& (0+255),b
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;doprnt.c: 836: if( fval!=0) {
  8544  0007FE  0100               	movlb	0	; () banked
  8545  000800  51EB               	movf	printf@fval& (0+255),w,b
  8546  000802  0100               	movlb	0	; () banked
  8547  000804  11EC               	iorwf	(printf@fval+1)& (0+255),w,b
  8548  000806  0100               	movlb	0	; () banked
  8549  000808  11ED               	iorwf	(printf@fval+2)& (0+255),w,b
  8550  00080A  B4D8               	btfsc	status,2,c
  8551  00080C  D08D               	goto	l6314
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  8555  00080E  0E82               	movlw	130
  8556  000810  6E57               	movwf	??_printf& (0+255),c
  8557  000812  0EFF               	movlw	255
  8558  000814  6E58               	movwf	(??_printf+1)& (0+255),c
  8559  000816  C0EB  F059         	movff	printf@fval,??_printf+2
  8560  00081A  C0EC  F05A         	movff	printf@fval+1,??_printf+3
  8561  00081E  C0ED  F05B         	movff	printf@fval+2,??_printf+4
  8562  000822  C0EE  F05C         	movff	printf@fval+3,??_printf+5
  8563  000826  0E10               	movlw	16
  8564  000828  D005               	goto	u5920
  8565  00082A                     u5925:
  8566  00082A  90D8               	bcf	status,0,c
  8567  00082C  325C               	rrcf	??_printf+5,f,c
  8568  00082E  325B               	rrcf	??_printf+4,f,c
  8569  000830  325A               	rrcf	??_printf+3,f,c
  8570  000832  3259               	rrcf	??_printf+2,f,c
  8571  000834                     u5920:
  8572  000834  2EE8               	decfsz	wreg,f,c
  8573  000836  D7F9               	goto	u5925
  8574  000838  5059               	movf	??_printf+2,w,c
  8575  00083A  2457               	addwf	??_printf,w,c
  8576  00083C  0100               	movlb	0	; () banked
  8577  00083E  6FE5               	movwf	printf@exp& (0+255),b
  8578  000840  0E00               	movlw	0
  8579  000842  2058               	addwfc	??_printf+1,w,c
  8580  000844  0100               	movlb	0	; () banked
  8581  000846  6FE6               	movwf	(printf@exp+1)& (0+255),b
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;doprnt.c: 838: exp--;
  8585  000848  0100               	movlb	0	; () banked
  8586  00084A  07E5               	decf	printf@exp& (0+255),f,b
  8587  00084C  A0D8               	btfss	status,0,c
  8588  00084E  07E6               	decf	(printf@exp+1)& (0+255),f,b
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;doprnt.c: 839: exp *= 3;
  8592  000850  C0E5  F01D         	movff	printf@exp,___wmul@multiplier
  8593  000854  C0E6  F01E         	movff	printf@exp+1,___wmul@multiplier+1
  8594  000858  0E00               	movlw	0
  8595  00085A  6E20               	movwf	___wmul@multiplicand+1,c
  8596  00085C  0E03               	movlw	3
  8597  00085E  6E1F               	movwf	___wmul@multiplicand,c
  8598  000860  ECDE  F01C         	call	___wmul	;wreg free
  8599  000864  C01D  F0E5         	movff	?___wmul,printf@exp
  8600  000868  C01E  F0E6         	movff	?___wmul+1,printf@exp+1
  8601                           
  8602                           ;doprnt.c: 840: exp /= 10;
  8603  00086C  C0E5  F015         	movff	printf@exp,___awdiv@dividend
  8604  000870  C0E6  F016         	movff	printf@exp+1,___awdiv@dividend+1
  8605  000874  0E00               	movlw	0
  8606  000876  6E18               	movwf	___awdiv@divisor+1,c
  8607  000878  0E0A               	movlw	10
  8608  00087A  6E17               	movwf	___awdiv@divisor,c
  8609  00087C  ECED  F016         	call	___awdiv	;wreg free
  8610  000880  C015  F0E5         	movff	?___awdiv,printf@exp
  8611  000884  C016  F0E6         	movff	?___awdiv+1,printf@exp+1
  8612                           
  8613                           ;doprnt.c: 841: if(exp < 0)
  8614  000888  0100               	movlb	0	; () banked
  8615  00088A  AFE6               	btfss	(printf@exp+1)& (0+255),7,b
  8616  00088C  D005               	goto	l6302
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;doprnt.c: 842: exp--;
  8620  00088E  0100               	movlb	0	; () banked
  8621  000890  07E5               	decf	printf@exp& (0+255),f,b
  8622  000892  A0D8               	btfss	status,0,c
  8623  000894  07E6               	decf	(printf@exp+1)& (0+255),f,b
  8624  000896  D000               	goto	l6302
  8625  000898                     l6302:
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  8629  000898  0100               	movlb	0	; () banked
  8630  00089A  51E5               	movf	printf@exp& (0+255),w,b
  8631  00089C  0800               	sublw	0
  8632  00089E  EC05  F007         	call	_scale
  8633  0008A2  C036  F0E7         	movff	?_scale,printf@tmpval
  8634  0008A6  C037  F0E8         	movff	?_scale+1,printf@tmpval+1
  8635  0008AA  C038  F0E9         	movff	?_scale+2,printf@tmpval+2
  8636                           
  8637                           ;doprnt.c: 847: tmpval.integ *= fval;
  8638  0008AE  C0E7  F027         	movff	printf@tmpval,___ftmul@f1
  8639  0008B2  C0E8  F028         	movff	printf@tmpval+1,___ftmul@f1+1
  8640  0008B6  C0E9  F029         	movff	printf@tmpval+2,___ftmul@f1+2
  8641  0008BA  C0EB  F02A         	movff	printf@fval,___ftmul@f2
  8642  0008BE  C0EC  F02B         	movff	printf@fval+1,___ftmul@f2+1
  8643  0008C2  C0ED  F02C         	movff	printf@fval+2,___ftmul@f2+2
  8644  0008C6  EC44  F012         	call	___ftmul	;wreg free
  8645  0008CA  C027  F0E7         	movff	?___ftmul,printf@tmpval
  8646  0008CE  C028  F0E8         	movff	?___ftmul+1,printf@tmpval+1
  8647  0008D2  C029  F0E9         	movff	?___ftmul+2,printf@tmpval+2
  8648                           
  8649                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  8650  0008D6  C0E7  F00F         	movff	printf@tmpval,___ftge@ff1
  8651  0008DA  C0E8  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  8652  0008DE  C0E9  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  8653  0008E2  0E00               	movlw	0
  8654  0008E4  6E12               	movwf	___ftge@ff2,c
  8655  0008E6  0E80               	movlw	128
  8656  0008E8  6E13               	movwf	___ftge@ff2+1,c
  8657  0008EA  0E3F               	movlw	63
  8658  0008EC  6E14               	movwf	___ftge@ff2+2,c
  8659  0008EE  EC38  F017         	call	___ftge	;wreg free
  8660  0008F2  B0D8               	btfsc	status,0,c
  8661  0008F4  D005               	goto	l6310
  8662                           
  8663                           ;doprnt.c: 849: exp--;
  8664  0008F6  0100               	movlb	0	; () banked
  8665  0008F8  07E5               	decf	printf@exp& (0+255),f,b
  8666  0008FA  A0D8               	btfss	status,0,c
  8667  0008FC  07E6               	decf	(printf@exp+1)& (0+255),f,b
  8668  0008FE  D014               	goto	l6314
  8669  000900                     l6310:
  8670                           
  8671                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  8672  000900  C0E7  F00F         	movff	printf@tmpval,___ftge@ff1
  8673  000904  C0E8  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  8674  000908  C0E9  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  8675  00090C  0E00               	movlw	0
  8676  00090E  6E12               	movwf	___ftge@ff2,c
  8677  000910  0E20               	movlw	32
  8678  000912  6E13               	movwf	___ftge@ff2+1,c
  8679  000914  0E41               	movlw	65
  8680  000916  6E14               	movwf	___ftge@ff2+2,c
  8681  000918  EC38  F017         	call	___ftge	;wreg free
  8682  00091C  A0D8               	btfss	status,0,c
  8683  00091E  D004               	goto	l6314
  8684                           
  8685                           ;doprnt.c: 851: exp++;
  8686  000920  0100               	movlb	0	; () banked
  8687  000922  4BE5               	infsnz	printf@exp& (0+255),f,b
  8688  000924  2BE6               	incf	(printf@exp+1)& (0+255),f,b
  8689                           
  8690                           ; BSR set to: 0
  8691                           
  8692                           ; BSR set to: 0
  8693  000926  D000               	goto	l6314
  8694  000928                     l6314:
  8695                           
  8696                           ;doprnt.c: 852: }
  8697                           ;doprnt.c: 1112: if(prec <= 12)
  8698  000928  0100               	movlb	0	; () banked
  8699  00092A  BFE0               	btfsc	(printf@prec+1)& (0+255),7,b
  8700  00092C  D008               	goto	l6316
  8701  00092E  0100               	movlb	0	; () banked
  8702  000930  51E0               	movf	(printf@prec+1)& (0+255),w,b
  8703  000932  E11E               	bnz	l6318
  8704  000934  0E0D               	movlw	13
  8705  000936  0100               	movlb	0	; () banked
  8706  000938  5DDF               	subwf	printf@prec& (0+255),w,b
  8707  00093A  B0D8               	btfsc	status,0,c
  8708  00093C  D019               	goto	l6318
  8709  00093E                     l6316:
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;doprnt.c: 1113: fval += fround(prec);
  8713  00093E  C0EB  F040         	movff	printf@fval,___ftadd@f1
  8714  000942  C0EC  F041         	movff	printf@fval+1,___ftadd@f1+1
  8715  000946  C0ED  F042         	movff	printf@fval+2,___ftadd@f1+2
  8716  00094A  0100               	movlb	0	; () banked
  8717  00094C  51DF               	movf	printf@prec& (0+255),w,b
  8718  00094E  ECA6  F00A         	call	_fround
  8719  000952  C036  F043         	movff	?_fround,___ftadd@f2
  8720  000956  C037  F044         	movff	?_fround+1,___ftadd@f2+1
  8721  00095A  C038  F045         	movff	?_fround+2,___ftadd@f2+2
  8722  00095E  ECE8  F00C         	call	___ftadd	;wreg free
  8723  000962  C040  F0EB         	movff	?___ftadd,printf@fval
  8724  000966  C041  F0EC         	movff	?___ftadd+1,printf@fval+1
  8725  00096A  C042  F0ED         	movff	?___ftadd+2,printf@fval+2
  8726  00096E  D000               	goto	l6318
  8727  000970                     l6318:
  8728                           
  8729                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8730  000970  0100               	movlb	0	; () banked
  8731  000972  BFE6               	btfsc	(printf@exp+1)& (0+255),7,b
  8732  000974  D008               	goto	l6320
  8733  000976  0100               	movlb	0	; () banked
  8734  000978  51E6               	movf	(printf@exp+1)& (0+255),w,b
  8735  00097A  E128               	bnz	l6326
  8736  00097C  0E0A               	movlw	10
  8737  00097E  0100               	movlb	0	; () banked
  8738  000980  5DE5               	subwf	printf@exp& (0+255),w,b
  8739  000982  B0D8               	btfsc	status,0,c
  8740  000984  D023               	goto	l6326
  8741  000986                     l6320:
  8742                           
  8743                           ; BSR set to: 0
  8744  000986  0100               	movlb	0	; () banked
  8745  000988  51EB               	movf	printf@fval& (0+255),w,b
  8746  00098A  0100               	movlb	0	; () banked
  8747  00098C  11EC               	iorwf	(printf@fval+1)& (0+255),w,b
  8748  00098E  0100               	movlb	0	; () banked
  8749  000990  11ED               	iorwf	(printf@fval+2)& (0+255),w,b
  8750  000992  B4D8               	btfsc	status,2,c
  8751  000994  D077               	goto	l6340
  8752                           
  8753                           ; BSR set to: 0
  8754  000996  C0EB  F03D         	movff	printf@fval,___fttol@f1
  8755  00099A  C0EC  F03E         	movff	printf@fval+1,___fttol@f1+1
  8756  00099E  C0ED  F03F         	movff	printf@fval+2,___fttol@f1+2
  8757  0009A2  EC39  F013         	call	___fttol	;wreg free
  8758  0009A6  503D               	movf	?___fttol,w,c
  8759  0009A8  103E               	iorwf	?___fttol+1,w,c
  8760  0009AA  103F               	iorwf	?___fttol+2,w,c
  8761  0009AC  1040               	iorwf	?___fttol+3,w,c
  8762  0009AE  A4D8               	btfss	status,2,c
  8763  0009B0  D069               	goto	l6340
  8764  0009B2  0100               	movlb	0	; () banked
  8765  0009B4  BFE6               	btfsc	(printf@exp+1)& (0+255),7,b
  8766  0009B6  D066               	goto	l6340
  8767  0009B8  0100               	movlb	0	; () banked
  8768  0009BA  51E6               	movf	(printf@exp+1)& (0+255),w,b
  8769  0009BC  E107               	bnz	l6326
  8770  0009BE  0E02               	movlw	2
  8771  0009C0  0100               	movlb	0	; () banked
  8772  0009C2  5DE5               	subwf	printf@exp& (0+255),w,b
  8773  0009C4  B0D8               	btfsc	status,0,c
  8774  0009C6  D002               	goto	l6326
  8775  0009C8  D05D               	goto	l6340
  8776  0009CA  D000               	goto	l6326
  8777  0009CC                     l6326:
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  8781  0009CC  C0E7  F00F         	movff	printf@tmpval,___ftge@ff1
  8782  0009D0  C0E8  F010         	movff	printf@tmpval+1,___ftge@ff1+1
  8783  0009D4  C0E9  F011         	movff	printf@tmpval+2,___ftge@ff1+2
  8784  0009D8  0E70               	movlw	112
  8785  0009DA  6E12               	movwf	___ftge@ff2,c
  8786  0009DC  0E89               	movlw	137
  8787  0009DE  6E13               	movwf	___ftge@ff2+1,c
  8788  0009E0  0E40               	movlw	64
  8789  0009E2  6E14               	movwf	___ftge@ff2+2,c
  8790  0009E4  EC38  F017         	call	___ftge	;wreg free
  8791  0009E8  B0D8               	btfsc	status,0,c
  8792  0009EA  D003               	goto	l6330
  8793                           
  8794                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8795  0009EC  0100               	movlb	0	; () banked
  8796  0009EE  0EF7               	movlw	247
  8797  0009F0  D002               	goto	L17
  8798  0009F2                     l6330:
  8799                           
  8800                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8801  0009F2  0100               	movlb	0	; () banked
  8802  0009F4  0EF8               	movlw	248
  8803  0009F6                     L17:
  8804  0009F6  27E5               	addwf	printf@exp& (0+255),f,b
  8805  0009F8  0EFF               	movlw	255
  8806  0009FA  23E6               	addwfc	(printf@exp+1)& (0+255),f,b
  8807  0009FC  D000               	goto	l6332
  8808  0009FE                     l6332:
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;doprnt.c: 1124: }
  8812                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  8813  0009FE  0100               	movlb	0	; () banked
  8814  000A00  51E5               	movf	printf@exp& (0+255),w,b
  8815  000A02  EC05  F007         	call	_scale
  8816  000A06  C036  F0E7         	movff	?_scale,printf@tmpval
  8817  000A0A  C037  F0E8         	movff	?_scale+1,printf@tmpval+1
  8818  000A0E  C038  F0E9         	movff	?_scale+2,printf@tmpval+2
  8819                           
  8820                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  8821  000A12  D017               	goto	l6336
  8822  000A14  C0EB  F00F         	movff	printf@fval,__div_to_l_@f1
  8823  000A18  C0EC  F010         	movff	printf@fval+1,__div_to_l_@f1+1
  8824  000A1C  C0ED  F011         	movff	printf@fval+2,__div_to_l_@f1+2
  8825  000A20  C0E7  F012         	movff	printf@tmpval,__div_to_l_@f2
  8826  000A24  C0E8  F013         	movff	printf@tmpval+1,__div_to_l_@f2+1
  8827  000A28  C0E9  F014         	movff	printf@tmpval+2,__div_to_l_@f2+2
  8828  000A2C  ECBF  F011         	call	__div_to_l_	;wreg free
  8829  000A30  C00F  F0E1         	movff	?__div_to_l_,printf@val
  8830  000A34  C010  F0E2         	movff	?__div_to_l_+1,printf@val+1
  8831  000A38  C011  F0E3         	movff	?__div_to_l_+2,printf@val+2
  8832  000A3C  C012  F0E4         	movff	?__div_to_l_+3,printf@val+3
  8833  000A40  D017               	goto	l6338
  8834  000A42                     l6336:
  8835  000A42  C0EB  F00F         	movff	printf@fval,__tdiv_to_l_@f1
  8836  000A46  C0EC  F010         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  8837  000A4A  C0ED  F011         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  8838  000A4E  C0E7  F012         	movff	printf@tmpval,__tdiv_to_l_@f2
  8839  000A52  C0E8  F013         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  8840  000A56  C0E9  F014         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  8841  000A5A  EC37  F011         	call	__tdiv_to_l_	;wreg free
  8842  000A5E  C00F  F0E1         	movff	?__tdiv_to_l_,printf@val
  8843  000A62  C010  F0E2         	movff	?__tdiv_to_l_+1,printf@val+1
  8844  000A66  C011  F0E3         	movff	?__tdiv_to_l_+2,printf@val+2
  8845  000A6A  C012  F0E4         	movff	?__tdiv_to_l_+3,printf@val+3
  8846  000A6E  D000               	goto	l6338
  8847  000A70                     l6338:
  8848                           
  8849                           ;doprnt.c: 1129: fval = 0.0;
  8850  000A70  0E00               	movlw	0
  8851  000A72  0100               	movlb	0	; () banked
  8852  000A74  6FEB               	movwf	printf@fval& (0+255),b
  8853  000A76  0E00               	movlw	0
  8854  000A78  0100               	movlb	0	; () banked
  8855  000A7A  6FEC               	movwf	(printf@fval+1)& (0+255),b
  8856  000A7C  0E00               	movlw	0
  8857  000A7E  0100               	movlb	0	; () banked
  8858  000A80  6FED               	movwf	(printf@fval+2)& (0+255),b
  8859                           
  8860                           ;doprnt.c: 1130: } else {
  8861  000A82  D034               	goto	l6344
  8862  000A84                     l6340:
  8863                           
  8864                           ;doprnt.c: 1131: val = (unsigned long)fval;
  8865  000A84  C0EB  F03D         	movff	printf@fval,___fttol@f1
  8866  000A88  C0EC  F03E         	movff	printf@fval+1,___fttol@f1+1
  8867  000A8C  C0ED  F03F         	movff	printf@fval+2,___fttol@f1+2
  8868  000A90  EC39  F013         	call	___fttol	;wreg free
  8869  000A94  C03D  F0E1         	movff	?___fttol,printf@val
  8870  000A98  C03E  F0E2         	movff	?___fttol+1,printf@val+1
  8871  000A9C  C03F  F0E3         	movff	?___fttol+2,printf@val+2
  8872  000AA0  C040  F0E4         	movff	?___fttol+3,printf@val+3
  8873                           
  8874                           ;doprnt.c: 1132: fval -= (double)val;
  8875  000AA4  C0EB  F04C         	movff	printf@fval,___ftsub@f1
  8876  000AA8  C0EC  F04D         	movff	printf@fval+1,___ftsub@f1+1
  8877  000AAC  C0ED  F04E         	movff	printf@fval+2,___ftsub@f1+2
  8878  000AB0  C0E1  F017         	movff	printf@val,___lltoft@c
  8879  000AB4  C0E2  F018         	movff	printf@val+1,___lltoft@c+1
  8880  000AB8  C0E3  F019         	movff	printf@val+2,___lltoft@c+2
  8881  000ABC  C0E4  F01A         	movff	printf@val+3,___lltoft@c+3
  8882  000AC0  ECFE  F019         	call	___lltoft	;wreg free
  8883  000AC4  C017  F04F         	movff	?___lltoft,___ftsub@f2
  8884  000AC8  C018  F050         	movff	?___lltoft+1,___ftsub@f2+1
  8885  000ACC  C019  F051         	movff	?___lltoft+2,___ftsub@f2+2
  8886  000AD0  ECD5  F01B         	call	___ftsub	;wreg free
  8887  000AD4  C04C  F0EB         	movff	?___ftsub,printf@fval
  8888  000AD8  C04D  F0EC         	movff	?___ftsub+1,printf@fval+1
  8889  000ADC  C04E  F0ED         	movff	?___ftsub+2,printf@fval+2
  8890                           
  8891                           ;doprnt.c: 1133: exp = 0;
  8892  000AE0  0E00               	movlw	0
  8893  000AE2  0100               	movlb	0	; () banked
  8894  000AE4  6FE6               	movwf	(printf@exp+1)& (0+255),b
  8895  000AE6  0E00               	movlw	0
  8896  000AE8  6FE5               	movwf	printf@exp& (0+255),b
  8897  000AEA  D000               	goto	l6344
  8898  000AEC                     l6344:
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;doprnt.c: 1134: }
  8902                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  8903  000AEC  0E01               	movlw	1
  8904  000AEE  0100               	movlb	0	; () banked
  8905  000AF0  6FEE               	movwf	printf@c& (0+255),b
  8906  000AF2                     l6346:
  8907                           
  8908                           ; BSR set to: 0
  8909  000AF2  0E0A               	movlw	10
  8910  000AF4  0100               	movlb	0	; () banked
  8911  000AF6  19EE               	xorwf	printf@c& (0+255),w,b
  8912  000AF8  B4D8               	btfsc	status,2,c
  8913  000AFA  D022               	goto	l6358
  8914  000AFC  D001               	goto	l6350
  8915                           
  8916                           ; BSR set to: 0
  8917  000AFE  D020               	goto	l6358
  8918  000B00                     l6350:
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;doprnt.c: 1137: if(val < dpowers[c])
  8922  000B00  0100               	movlb	0	; () banked
  8923  000B02  51EE               	movf	printf@c& (0+255),w,b
  8924  000B04  0D04               	mullw	4
  8925  000B06  0E10               	movlw	low _dpowers
  8926  000B08  24F3               	addwf	prodl,w,c
  8927  000B0A  6EF6               	movwf	tblptrl,c
  8928  000B0C  0EFF               	movlw	high _dpowers
  8929  000B0E  20F4               	addwfc	prodh,w,c
  8930  000B10  6EF7               	movwf	tblptrh,c
  8931  000B12                     	if	0	;There are less than 3 active tblptr bytes
  8932  000B12                     	endif
  8933  000B12  0009               	tblrd		*+
  8934  000B14  50F5               	movf	tablat,w,c
  8935  000B16  0100               	movlb	0	; () banked
  8936  000B18  5DE1               	subwf	printf@val& (0+255),w,b
  8937  000B1A  0009               	tblrd		*+
  8938  000B1C  50F5               	movf	tablat,w,c
  8939  000B1E  0100               	movlb	0	; () banked
  8940  000B20  59E2               	subwfb	(printf@val+1)& (0+255),w,b
  8941  000B22  0009               	tblrd		*+
  8942  000B24  50F5               	movf	tablat,w,c
  8943  000B26  0100               	movlb	0	; () banked
  8944  000B28  59E3               	subwfb	(printf@val+2)& (0+255),w,b
  8945  000B2A  0009               	tblrd		*+
  8946  000B2C  50F5               	movf	tablat,w,c
  8947  000B2E  0100               	movlb	0	; () banked
  8948  000B30  59E4               	subwfb	(printf@val+3)& (0+255),w,b
  8949  000B32  A0D8               	btfss	status,0,c
  8950  000B34  D005               	goto	l6358
  8951  000B36  D001               	goto	l6354
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;doprnt.c: 1138: break;
  8955  000B38  D003               	goto	l6358
  8956  000B3A                     l6354:
  8957                           
  8958                           ; BSR set to: 0
  8959  000B3A  0100               	movlb	0	; () banked
  8960  000B3C  2BEE               	incf	printf@c& (0+255),f,b
  8961  000B3E  D7D9               	goto	l6346
  8962  000B40                     l6358:
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;doprnt.c: 1175: {
  8966                           ;doprnt.c: 1188: if(flag & 0x03)
  8967  000B40  0E03               	movlw	3
  8968  000B42  0100               	movlb	0	; () banked
  8969  000B44  15DD               	andwf	printf@flag& (0+255),w,b
  8970  000B46  6E57               	movwf	??_printf& (0+255),c
  8971  000B48  0E00               	movlw	0
  8972  000B4A  0100               	movlb	0	; () banked
  8973  000B4C  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  8974  000B4E  6E58               	movwf	(??_printf+1)& (0+255),c
  8975  000B50  5057               	movf	??_printf,w,c
  8976  000B52  1058               	iorwf	??_printf+1,w,c
  8977  000B54  B4D8               	btfsc	status,2,c
  8978  000B56  D04B               	goto	l6368
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;doprnt.c: 1190: (putch('-') );
  8982  000B58  0E2D               	movlw	45
  8983  000B5A  EC8D  F01D         	call	_putch
  8984                           
  8985                           ;doprnt.c: 1195: }
  8986                           ;doprnt.c: 1196: while(c--) {
  8987  000B5E  D047               	goto	l6368
  8988  000B60                     l6362:
  8989                           
  8990                           ;doprnt.c: 1200: {
  8991                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  8992  000B60  C0E1  F00F         	movff	printf@val,___lldiv@dividend
  8993  000B64  C0E2  F010         	movff	printf@val+1,___lldiv@dividend+1
  8994  000B68  C0E3  F011         	movff	printf@val+2,___lldiv@dividend+2
  8995  000B6C  C0E4  F012         	movff	printf@val+3,___lldiv@dividend+3
  8996  000B70  0100               	movlb	0	; () banked
  8997  000B72  51EE               	movf	printf@c& (0+255),w,b
  8998  000B74  0D04               	mullw	4
  8999  000B76  0E10               	movlw	low _dpowers
  9000  000B78  24F3               	addwf	prodl,w,c
  9001  000B7A  6EF6               	movwf	tblptrl,c
  9002  000B7C  0EFF               	movlw	high _dpowers
  9003  000B7E  20F4               	addwfc	prodh,w,c
  9004  000B80  6EF7               	movwf	tblptrh,c
  9005  000B82                     	if	0	;There are less than 3 active tblptr bytes
  9006  000B82                     	endif
  9007  000B82  0009               	tblrd		*+
  9008  000B84  CFF5 F013          	movff	tablat,___lldiv@divisor
  9009  000B88  0009               	tblrd		*+
  9010  000B8A  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  9011  000B8E  0009               	tblrd		*+
  9012  000B90  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  9013  000B94  000A               	tblrd		*-
  9014  000B96  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  9015  000B9A  EC83  F017         	call	___lldiv	;wreg free
  9016  000B9E  C00F  F0E7         	movff	?___lldiv,printf@tmpval
  9017  000BA2  C010  F0E8         	movff	?___lldiv+1,printf@tmpval+1
  9018  000BA6  C011  F0E9         	movff	?___lldiv+2,printf@tmpval+2
  9019  000BAA  C012  F0EA         	movff	?___lldiv+3,printf@tmpval+3
  9020                           
  9021                           ;doprnt.c: 1202: tmpval.vd %= 10;
  9022  000BAE  C0E7  F00F         	movff	printf@tmpval,___llmod@dividend
  9023  000BB2  C0E8  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  9024  000BB6  C0E9  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  9025  000BBA  C0EA  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  9026  000BBE  0E0A               	movlw	10
  9027  000BC0  6E13               	movwf	___llmod@divisor,c
  9028  000BC2  0E00               	movlw	0
  9029  000BC4  6E14               	movwf	___llmod@divisor+1,c
  9030  000BC6  0E00               	movlw	0
  9031  000BC8  6E15               	movwf	___llmod@divisor+2,c
  9032  000BCA  0E00               	movlw	0
  9033  000BCC  6E16               	movwf	___llmod@divisor+3,c
  9034  000BCE  EC93  F019         	call	___llmod	;wreg free
  9035  000BD2  C00F  F0E7         	movff	?___llmod,printf@tmpval
  9036  000BD6  C010  F0E8         	movff	?___llmod+1,printf@tmpval+1
  9037  000BDA  C011  F0E9         	movff	?___llmod+2,printf@tmpval+2
  9038  000BDE  C012  F0EA         	movff	?___llmod+3,printf@tmpval+3
  9039                           
  9040                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  9041  000BE2  0100               	movlb	0	; () banked
  9042  000BE4  51E7               	movf	printf@tmpval& (0+255),w,b
  9043  000BE6  0F30               	addlw	48
  9044  000BE8  EC8D  F01D         	call	_putch
  9045  000BEC  D000               	goto	l6368
  9046  000BEE                     l6368:
  9047  000BEE  0100               	movlb	0	; () banked
  9048  000BF0  07EE               	decf	printf@c& (0+255),f,b
  9049  000BF2  0100               	movlb	0	; () banked
  9050  000BF4  29EE               	incf	printf@c& (0+255),w,b
  9051  000BF6  B4D8               	btfsc	status,2,c
  9052  000BF8  D00A               	goto	l6374
  9053  000BFA  D7B2               	goto	l6362
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;doprnt.c: 1204: }
  9057                           ;doprnt.c: 1206: }
  9058                           ;doprnt.c: 1207: while(exp > 0) {
  9059  000BFC  D008               	goto	l6374
  9060  000BFE                     l6370:
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;doprnt.c: 1208: (putch('0') );
  9064  000BFE  0E30               	movlw	48
  9065  000C00  EC8D  F01D         	call	_putch
  9066                           
  9067                           ;doprnt.c: 1209: exp--;
  9068  000C04  0100               	movlb	0	; () banked
  9069  000C06  07E5               	decf	printf@exp& (0+255),f,b
  9070  000C08  A0D8               	btfss	status,0,c
  9071  000C0A  07E6               	decf	(printf@exp+1)& (0+255),f,b
  9072  000C0C  D000               	goto	l6374
  9073  000C0E                     l6374:
  9074                           
  9075                           ; BSR set to: 0
  9076  000C0E  0100               	movlb	0	; () banked
  9077  000C10  BFE6               	btfsc	(printf@exp+1)& (0+255),7,b
  9078  000C12  D007               	goto	l6376
  9079  000C14  0100               	movlb	0	; () banked
  9080  000C16  51E6               	movf	(printf@exp+1)& (0+255),w,b
  9081  000C18  E1F2               	bnz	l6370
  9082  000C1A  0100               	movlb	0	; () banked
  9083  000C1C  05E5               	decf	printf@exp& (0+255),w,b
  9084  000C1E  B0D8               	btfsc	status,0,c
  9085  000C20  D7EE               	goto	l6370
  9086  000C22                     l6376:
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;doprnt.c: 1210: }
  9090                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  9091  000C22  0100               	movlb	0	; () banked
  9092  000C24  BFE0               	btfsc	(printf@prec+1)& (0+255),7,b
  9093  000C26  D00C               	goto	l656
  9094  000C28  0100               	movlb	0	; () banked
  9095  000C2A  51E0               	movf	(printf@prec+1)& (0+255),w,b
  9096  000C2C  E105               	bnz	u6080
  9097  000C2E  0E09               	movlw	9
  9098  000C30  0100               	movlb	0	; () banked
  9099  000C32  5DDF               	subwf	printf@prec& (0+255),w,b
  9100  000C34  A0D8               	btfss	status,0,c
  9101  000C36  D004               	goto	l656
  9102  000C38                     u6080:
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  9106  000C38  0E08               	movlw	8
  9107  000C3A  0100               	movlb	0	; () banked
  9108  000C3C  6FEE               	movwf	printf@c& (0+255),b
  9109  000C3E  D003               	goto	l6380
  9110  000C40                     l656:
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;doprnt.c: 1213: else
  9114                           ;doprnt.c: 1214: c = prec;
  9115  000C40  C0DF  F0EE         	movff	printf@prec,printf@c
  9116  000C44  D000               	goto	l6380
  9117  000C46                     l6380:
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;doprnt.c: 1215: prec -= c;
  9121  000C46  0100               	movlb	0	; () banked
  9122  000C48  51EE               	movf	printf@c& (0+255),w,b
  9123  000C4A  0100               	movlb	0	; () banked
  9124  000C4C  5FDF               	subwf	printf@prec& (0+255),f,b
  9125  000C4E  0E00               	movlw	0
  9126  000C50  0100               	movlb	0	; () banked
  9127  000C52  BFEE               	btfsc	printf@c& (0+255),7,b
  9128  000C54  0EFF               	movlw	255
  9129  000C56  0100               	movlb	0	; () banked
  9130  000C58  5BE0               	subwfb	(printf@prec+1)& (0+255),f,b
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;doprnt.c: 1219: if(c)
  9134  000C5A  0100               	movlb	0	; () banked
  9135  000C5C  51EE               	movf	printf@c& (0+255),w,b
  9136  000C5E  0100               	movlb	0	; () banked
  9137  000C60  B4D8               	btfsc	status,2,c
  9138  000C62  D004               	goto	l6386
  9139                           
  9140                           ; BSR set to: 0
  9141                           ;doprnt.c: 1221: (putch('.') );
  9142  000C64  0E2E               	movlw	46
  9143  000C66  EC8D  F01D         	call	_putch
  9144  000C6A  D000               	goto	l6386
  9145  000C6C                     l6386:
  9146                           
  9147                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9148  000C6C  0100               	movlb	0	; () banked
  9149  000C6E  51EE               	movf	printf@c& (0+255),w,b
  9150  000C70  EC05  F007         	call	_scale
  9151  000C74  C036  F0D8         	movff	?_scale,_printf$2524
  9152  000C78  C037  F0D9         	movff	?_scale+1,_printf$2524+1
  9153  000C7C  C038  F0DA         	movff	?_scale+2,_printf$2524+2
  9154                           
  9155                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9156  000C80  C0EB  F02A         	movff	printf@fval,___ftmul@f2
  9157  000C84  C0EC  F02B         	movff	printf@fval+1,___ftmul@f2+1
  9158  000C88  C0ED  F02C         	movff	printf@fval+2,___ftmul@f2+2
  9159  000C8C  C0D8  F027         	movff	_printf$2524,___ftmul@f1
  9160  000C90  C0D9  F028         	movff	_printf$2524+1,___ftmul@f1+1
  9161  000C94  C0DA  F029         	movff	_printf$2524+2,___ftmul@f1+2
  9162  000C98  EC44  F012         	call	___ftmul	;wreg free
  9163  000C9C  C027  F03D         	movff	?___ftmul,___fttol@f1
  9164  000CA0  C028  F03E         	movff	?___ftmul+1,___fttol@f1+1
  9165  000CA4  C029  F03F         	movff	?___ftmul+2,___fttol@f1+2
  9166  000CA8  EC39  F013         	call	___fttol	;wreg free
  9167  000CAC  C03D  F0E1         	movff	?___fttol,printf@val
  9168  000CB0  C03E  F0E2         	movff	?___fttol+1,printf@val+1
  9169  000CB4  C03F  F0E3         	movff	?___fttol+2,printf@val+2
  9170  000CB8  C040  F0E4         	movff	?___fttol+3,printf@val+3
  9171                           
  9172                           ;doprnt.c: 1228: while(c--) {
  9173  000CBC  D06E               	goto	l6396
  9174  000CBE                     l6390:
  9175                           
  9176                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  9177  000CBE  C0E1  F00F         	movff	printf@val,___lldiv@dividend
  9178  000CC2  C0E2  F010         	movff	printf@val+1,___lldiv@dividend+1
  9179  000CC6  C0E3  F011         	movff	printf@val+2,___lldiv@dividend+2
  9180  000CCA  C0E4  F012         	movff	printf@val+3,___lldiv@dividend+3
  9181  000CCE  0100               	movlb	0	; () banked
  9182  000CD0  51EE               	movf	printf@c& (0+255),w,b
  9183  000CD2  0D04               	mullw	4
  9184  000CD4  0E10               	movlw	low _dpowers
  9185  000CD6  24F3               	addwf	prodl,w,c
  9186  000CD8  6EF6               	movwf	tblptrl,c
  9187  000CDA  0EFF               	movlw	high _dpowers
  9188  000CDC  20F4               	addwfc	prodh,w,c
  9189  000CDE  6EF7               	movwf	tblptrh,c
  9190  000CE0                     	if	0	;There are less than 3 active tblptr bytes
  9191  000CE0                     	endif
  9192  000CE0  0009               	tblrd		*+
  9193  000CE2  CFF5 F013          	movff	tablat,___lldiv@divisor
  9194  000CE6  0009               	tblrd		*+
  9195  000CE8  CFF5 F014          	movff	tablat,___lldiv@divisor+1
  9196  000CEC  0009               	tblrd		*+
  9197  000CEE  CFF5 F015          	movff	tablat,___lldiv@divisor+2
  9198  000CF2  000A               	tblrd		*-
  9199  000CF4  CFF5 F016          	movff	tablat,___lldiv@divisor+3
  9200  000CF8  EC83  F017         	call	___lldiv	;wreg free
  9201  000CFC  C00F  F0E7         	movff	?___lldiv,printf@tmpval
  9202  000D00  C010  F0E8         	movff	?___lldiv+1,printf@tmpval+1
  9203  000D04  C011  F0E9         	movff	?___lldiv+2,printf@tmpval+2
  9204  000D08  C012  F0EA         	movff	?___lldiv+3,printf@tmpval+3
  9205                           
  9206                           ;doprnt.c: 1230: tmpval.vd %= 10;
  9207  000D0C  C0E7  F00F         	movff	printf@tmpval,___llmod@dividend
  9208  000D10  C0E8  F010         	movff	printf@tmpval+1,___llmod@dividend+1
  9209  000D14  C0E9  F011         	movff	printf@tmpval+2,___llmod@dividend+2
  9210  000D18  C0EA  F012         	movff	printf@tmpval+3,___llmod@dividend+3
  9211  000D1C  0E0A               	movlw	10
  9212  000D1E  6E13               	movwf	___llmod@divisor,c
  9213  000D20  0E00               	movlw	0
  9214  000D22  6E14               	movwf	___llmod@divisor+1,c
  9215  000D24  0E00               	movlw	0
  9216  000D26  6E15               	movwf	___llmod@divisor+2,c
  9217  000D28  0E00               	movlw	0
  9218  000D2A  6E16               	movwf	___llmod@divisor+3,c
  9219  000D2C  EC93  F019         	call	___llmod	;wreg free
  9220  000D30  C00F  F0E7         	movff	?___llmod,printf@tmpval
  9221  000D34  C010  F0E8         	movff	?___llmod+1,printf@tmpval+1
  9222  000D38  C011  F0E9         	movff	?___llmod+2,printf@tmpval+2
  9223  000D3C  C012  F0EA         	movff	?___llmod+3,printf@tmpval+3
  9224                           
  9225                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  9226  000D40  0100               	movlb	0	; () banked
  9227  000D42  51E7               	movf	printf@tmpval& (0+255),w,b
  9228  000D44  0F30               	addlw	48
  9229  000D46  EC8D  F01D         	call	_putch
  9230                           
  9231                           ;doprnt.c: 1232: val %= dpowers[c];
  9232  000D4A  C0E1  F00F         	movff	printf@val,___llmod@dividend
  9233  000D4E  C0E2  F010         	movff	printf@val+1,___llmod@dividend+1
  9234  000D52  C0E3  F011         	movff	printf@val+2,___llmod@dividend+2
  9235  000D56  C0E4  F012         	movff	printf@val+3,___llmod@dividend+3
  9236  000D5A  0100               	movlb	0	; () banked
  9237  000D5C  51EE               	movf	printf@c& (0+255),w,b
  9238  000D5E  0D04               	mullw	4
  9239  000D60  0E10               	movlw	low _dpowers
  9240  000D62  24F3               	addwf	prodl,w,c
  9241  000D64  6EF6               	movwf	tblptrl,c
  9242  000D66  0EFF               	movlw	high _dpowers
  9243  000D68  20F4               	addwfc	prodh,w,c
  9244  000D6A  6EF7               	movwf	tblptrh,c
  9245  000D6C                     	if	0	;There are less than 3 active tblptr bytes
  9246  000D6C                     	endif
  9247  000D6C  0009               	tblrd		*+
  9248  000D6E  CFF5 F013          	movff	tablat,___llmod@divisor
  9249  000D72  0009               	tblrd		*+
  9250  000D74  CFF5 F014          	movff	tablat,___llmod@divisor+1
  9251  000D78  0009               	tblrd		*+
  9252  000D7A  CFF5 F015          	movff	tablat,___llmod@divisor+2
  9253  000D7E  000A               	tblrd		*-
  9254  000D80  CFF5 F016          	movff	tablat,___llmod@divisor+3
  9255  000D84  EC93  F019         	call	___llmod	;wreg free
  9256  000D88  C00F  F0E1         	movff	?___llmod,printf@val
  9257  000D8C  C010  F0E2         	movff	?___llmod+1,printf@val+1
  9258  000D90  C011  F0E3         	movff	?___llmod+2,printf@val+2
  9259  000D94  C012  F0E4         	movff	?___llmod+3,printf@val+3
  9260  000D98  D000               	goto	l6396
  9261  000D9A                     l6396:
  9262  000D9A  0100               	movlb	0	; () banked
  9263  000D9C  07EE               	decf	printf@c& (0+255),f,b
  9264  000D9E  0100               	movlb	0	; () banked
  9265  000DA0  29EE               	incf	printf@c& (0+255),w,b
  9266  000DA2  B4D8               	btfsc	status,2,c
  9267  000DA4  D00A               	goto	l6402
  9268  000DA6  D78B               	goto	l6390
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;doprnt.c: 1233: }
  9272                           ;doprnt.c: 1235: while(prec) {
  9273  000DA8  D008               	goto	l6402
  9274  000DAA                     l6398:
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;doprnt.c: 1236: (putch('0') );
  9278  000DAA  0E30               	movlw	48
  9279  000DAC  EC8D  F01D         	call	_putch
  9280                           
  9281                           ;doprnt.c: 1237: prec--;
  9282  000DB0  0100               	movlb	0	; () banked
  9283  000DB2  07DF               	decf	printf@prec& (0+255),f,b
  9284  000DB4  A0D8               	btfss	status,0,c
  9285  000DB6  07E0               	decf	(printf@prec+1)& (0+255),f,b
  9286  000DB8  D000               	goto	l6402
  9287  000DBA                     l6402:
  9288                           
  9289                           ; BSR set to: 0
  9290  000DBA  0100               	movlb	0	; () banked
  9291  000DBC  51DF               	movf	printf@prec& (0+255),w,b
  9292  000DBE  0100               	movlb	0	; () banked
  9293  000DC0  11E0               	iorwf	(printf@prec+1)& (0+255),w,b
  9294  000DC2  B4D8               	btfsc	status,2,c
  9295  000DC4  D012               	goto	l6408
  9296  000DC6  D7F1               	goto	l6398
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;doprnt.c: 1238: }
  9300                           ;doprnt.c: 1245: continue;
  9301  000DC8  D010               	goto	l6408
  9302  000DCA                     l6404:
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;doprnt.c: 1246: }
  9306                           ;doprnt.c: 1422: {
  9307                           ;doprnt.c: 1438: if(flag & 0x03)
  9308  000DCA  0E03               	movlw	3
  9309  000DCC  0100               	movlb	0	; () banked
  9310  000DCE  15DD               	andwf	printf@flag& (0+255),w,b
  9311  000DD0  6E57               	movwf	??_printf& (0+255),c
  9312  000DD2  0E00               	movlw	0
  9313  000DD4  0100               	movlb	0	; () banked
  9314  000DD6  15DE               	andwf	(printf@flag+1)& (0+255),w,b
  9315  000DD8  6E58               	movwf	(??_printf+1)& (0+255),c
  9316  000DDA  5057               	movf	??_printf,w,c
  9317  000DDC  1058               	iorwf	??_printf+1,w,c
  9318  000DDE  B4D8               	btfsc	status,2,c
  9319  000DE0  D004               	goto	l6408
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;doprnt.c: 1439: (putch('-') );
  9323  000DE2  0E2D               	movlw	45
  9324  000DE4  EC8D  F01D         	call	_putch
  9325  000DE8  D000               	goto	l6408
  9326  000DEA                     l6408:
  9327  000DEA  C052  FFF6         	movff	printf@f,tblptrl
  9328  000DEE  C053  FFF7         	movff	printf@f+1,tblptrh
  9329  000DF2  4A52               	infsnz	printf@f,f,c
  9330  000DF4  2A53               	incf	printf@f+1,f,c
  9331  000DF6                     	if	0	;tblptru may be non-zero
  9332  000DF6                     	endif
  9333  000DF6                     	if	0	;tblptru may be non-zero
  9334  000DF6                     	endif
  9335  000DF6  0008               	tblrd		*
  9336  000DF8  CFF5 F0EE          	movff	tablat,printf@c
  9337  000DFC  0100               	movlb	0	; () banked
  9338  000DFE  51EE               	movf	printf@c& (0+255),w,b
  9339  000E00  B4D8               	btfsc	status,2,c
  9340  000E02  D002               	goto	l667
  9341  000E04  D4A1               	goto	l6260
  9342                           
  9343                           ; BSR set to: 0
  9344  000E06  D000               	goto	l667
  9345  000E08                     l667:
  9346                           
  9347                           ; BSR set to: 0
  9348  000E08  0012               	return		;funcret
  9349  000E0A                     __end_of_printf:
  9350                           	opt stack 0
  9351                           tblptru	equ	0xFF8
  9352                           tblptrh	equ	0xFF7
  9353                           tblptrl	equ	0xFF6
  9354                           tablat	equ	0xFF5
  9355                           prodh	equ	0xFF4
  9356                           prodl	equ	0xFF3
  9357                           intcon	equ	0xFF2
  9358                           intcon2	equ	0xFF1
  9359                           intcon3	equ	0xFF0
  9360                           postinc0	equ	0xFEE
  9361                           wreg	equ	0xFE8
  9362                           postdec1	equ	0xFE5
  9363                           fsr1l	equ	0xFE1
  9364                           postinc2	equ	0xFDE
  9365                           postdec2	equ	0xFDD
  9366                           fsr2h	equ	0xFDA
  9367                           fsr2l	equ	0xFD9
  9368                           status	equ	0xFD8
  9369                           
  9370 ;; *************** function _scale *****************
  9371 ;; Defined at:
  9372 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;  scl             1    wreg     char 
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;  scl             1   59[COMRAM] char 
  9377 ;; Return value:  Size  Location     Type
  9378 ;;                  3   53[COMRAM] char 
  9379 ;; Registers used:
  9380 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9381 ;; Tracked objects:
  9382 ;;		On entry : 0/0
  9383 ;;		On exit  : 0/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9386 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9389 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;Total ram usage:        7 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    4
  9393 ;; This function calls:
  9394 ;;		___awdiv
  9395 ;;		___awmod
  9396 ;;		___ftmul
  9397 ;;		___wmul
  9398 ;; This function is called by:
  9399 ;;		_printf
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           	psect	text37
  9404  000E0A                     __ptext37:
  9405                           	opt stack 0
  9406  000E0A                     _scale:
  9407                           	opt stack 21
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;incstack = 0
  9411                           ;scale@scl stored from wreg
  9412  000E0A  6E3C               	movwf	scale@scl,c
  9413                           
  9414                           ;doprnt.c: 428: if(scl < 0) {
  9415  000E0C  AE3C               	btfss	scale@scl,7,c
  9416  000E0E  D0EF               	goto	l5924
  9417                           
  9418                           ;doprnt.c: 429: scl = -scl;
  9419  000E10  6C3C               	negf	scale@scl,c
  9420                           
  9421                           ;doprnt.c: 430: if(scl>=110)
  9422  000E12  503C               	movf	scale@scl,w,c
  9423  000E14  0A80               	xorlw	128
  9424  000E16  0F12               	addlw	-238
  9425  000E18  A0D8               	btfss	status,0,c
  9426  000E1A  D08D               	goto	l5914
  9427                           
  9428                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9429  000E1C  0E00               	movlw	0
  9430  000E1E  6E20               	movwf	___wmul@multiplicand+1,c
  9431  000E20  0E03               	movlw	3
  9432  000E22  6E1F               	movwf	___wmul@multiplicand,c
  9433  000E24  0E00               	movlw	0
  9434  000E26  6E18               	movwf	___awdiv@divisor+1,c
  9435  000E28  0E0A               	movlw	10
  9436  000E2A  6E17               	movwf	___awdiv@divisor,c
  9437  000E2C  0E00               	movlw	0
  9438  000E2E  6E12               	movwf	___awmod@divisor+1,c
  9439  000E30  0E64               	movlw	100
  9440  000E32  6E11               	movwf	___awmod@divisor,c
  9441  000E34  503C               	movf	scale@scl,w,c
  9442  000E36  6E0F               	movwf	___awmod@dividend,c
  9443  000E38  6A10               	clrf	___awmod@dividend+1,c
  9444  000E3A  BE0F               	btfsc	___awmod@dividend,7,c
  9445  000E3C  0610               	decf	___awmod@dividend+1,f,c
  9446  000E3E  EC1A  F019         	call	___awmod	;wreg free
  9447  000E42  C00F  F015         	movff	?___awmod,___awdiv@dividend
  9448  000E46  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  9449  000E4A  ECED  F016         	call	___awdiv	;wreg free
  9450  000E4E  0E09               	movlw	9
  9451  000E50  2415               	addwf	?___awdiv,w,c
  9452  000E52  6E1D               	movwf	___wmul@multiplier,c
  9453  000E54  0E00               	movlw	0
  9454  000E56  2016               	addwfc	?___awdiv+1,w,c
  9455  000E58  6E1E               	movwf	___wmul@multiplier+1,c
  9456  000E5A  ECDE  F01C         	call	___wmul	;wreg free
  9457  000E5E  0E38               	movlw	low __npowers_
  9458  000E60  241D               	addwf	?___wmul,w,c
  9459  000E62  6EF6               	movwf	tblptrl,c
  9460  000E64  0EFF               	movlw	high __npowers_
  9461  000E66  201E               	addwfc	?___wmul+1,w,c
  9462  000E68  6EF7               	movwf	tblptrh,c
  9463  000E6A                     	if	0	;There are less than 3 active tblptr bytes
  9464  000E6A                     	endif
  9465  000E6A  0009               	tblrd		*+
  9466  000E6C  CFF5 F02A          	movff	tablat,___ftmul@f2
  9467  000E70  0009               	tblrd		*+
  9468  000E72  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  9469  000E76  000A               	tblrd		*-
  9470  000E78  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  9471  000E7C  0E00               	movlw	0
  9472  000E7E  6E18               	movwf	___awdiv@divisor+1,c
  9473  000E80  0E64               	movlw	100
  9474  000E82  6E17               	movwf	___awdiv@divisor,c
  9475  000E84  503C               	movf	scale@scl,w,c
  9476  000E86  6E15               	movwf	___awdiv@dividend,c
  9477  000E88  6A16               	clrf	___awdiv@dividend+1,c
  9478  000E8A  BE15               	btfsc	___awdiv@dividend,7,c
  9479  000E8C  0616               	decf	___awdiv@dividend+1,f,c
  9480  000E8E  ECED  F016         	call	___awdiv	;wreg free
  9481  000E92  0E12               	movlw	18
  9482  000E94  2415               	addwf	?___awdiv,w,c
  9483  000E96  6E1D               	movwf	___wmul@multiplier,c
  9484  000E98  0E00               	movlw	0
  9485  000E9A  2016               	addwfc	?___awdiv+1,w,c
  9486  000E9C  6E1E               	movwf	___wmul@multiplier+1,c
  9487  000E9E  0E00               	movlw	0
  9488  000EA0  6E20               	movwf	___wmul@multiplicand+1,c
  9489  000EA2  0E03               	movlw	3
  9490  000EA4  6E1F               	movwf	___wmul@multiplicand,c
  9491  000EA6  ECDE  F01C         	call	___wmul	;wreg free
  9492  000EAA  0E38               	movlw	low __npowers_
  9493  000EAC  241D               	addwf	?___wmul,w,c
  9494  000EAE  6EF6               	movwf	tblptrl,c
  9495  000EB0  0EFF               	movlw	high __npowers_
  9496  000EB2  201E               	addwfc	?___wmul+1,w,c
  9497  000EB4  6EF7               	movwf	tblptrh,c
  9498  000EB6                     	if	0	;There are less than 3 active tblptr bytes
  9499  000EB6                     	endif
  9500  000EB6  0009               	tblrd		*+
  9501  000EB8  CFF5 F027          	movff	tablat,___ftmul@f1
  9502  000EBC  0009               	tblrd		*+
  9503  000EBE  CFF5 F028          	movff	tablat,___ftmul@f1+1
  9504  000EC2  000A               	tblrd		*-
  9505  000EC4  CFF5 F029          	movff	tablat,___ftmul@f1+2
  9506  000EC8  EC44  F012         	call	___ftmul	;wreg free
  9507  000ECC  C027  F039         	movff	?___ftmul,_scale$2523
  9508  000ED0  C028  F03A         	movff	?___ftmul+1,_scale$2523+1
  9509  000ED4  C029  F03B         	movff	?___ftmul+2,_scale$2523+2
  9510                           
  9511                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9512  000ED8  C039  F027         	movff	_scale$2523,___ftmul@f1
  9513  000EDC  C03A  F028         	movff	_scale$2523+1,___ftmul@f1+1
  9514  000EE0  C03B  F029         	movff	_scale$2523+2,___ftmul@f1+2
  9515  000EE4  0E00               	movlw	0
  9516  000EE6  6E20               	movwf	___wmul@multiplicand+1,c
  9517  000EE8  0E03               	movlw	3
  9518  000EEA  6E1F               	movwf	___wmul@multiplicand,c
  9519  000EEC  0E00               	movlw	0
  9520  000EEE  6E12               	movwf	___awmod@divisor+1,c
  9521  000EF0  0E0A               	movlw	10
  9522  000EF2  6E11               	movwf	___awmod@divisor,c
  9523  000EF4  503C               	movf	scale@scl,w,c
  9524  000EF6  6E0F               	movwf	___awmod@dividend,c
  9525  000EF8  6A10               	clrf	___awmod@dividend+1,c
  9526  000EFA  BE0F               	btfsc	___awmod@dividend,7,c
  9527  000EFC  0610               	decf	___awmod@dividend+1,f,c
  9528  000EFE  EC1A  F019         	call	___awmod	;wreg free
  9529  000F02  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  9530  000F06  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  9531  000F0A  ECDE  F01C         	call	___wmul	;wreg free
  9532  000F0E  0E38               	movlw	low __npowers_
  9533  000F10  241D               	addwf	?___wmul,w,c
  9534  000F12  6EF6               	movwf	tblptrl,c
  9535  000F14  0EFF               	movlw	high __npowers_
  9536  000F16  201E               	addwfc	?___wmul+1,w,c
  9537  000F18  6EF7               	movwf	tblptrh,c
  9538  000F1A                     	if	0	;There are less than 3 active tblptr bytes
  9539  000F1A                     	endif
  9540  000F1A  0009               	tblrd		*+
  9541  000F1C  CFF5 F02A          	movff	tablat,___ftmul@f2
  9542  000F20  0009               	tblrd		*+
  9543  000F22  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  9544  000F26  000A               	tblrd		*-
  9545  000F28  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  9546  000F2C  EC44  F012         	call	___ftmul	;wreg free
  9547  000F30  D141               	goto	L21
  9548  000F32  D15A               	goto	l611
  9549  000F34  D054               	goto	l5920
  9550  000F36                     l5914:
  9551                           
  9552                           ;doprnt.c: 432: else if(scl > 10)
  9553  000F36  503C               	movf	scale@scl,w,c
  9554  000F38  0A80               	xorlw	128
  9555  000F3A  0F75               	addlw	-139
  9556  000F3C  A0D8               	btfss	status,0,c
  9557  000F3E  D04F               	goto	l5920
  9558                           
  9559                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9560  000F40  0E00               	movlw	0
  9561  000F42  6E18               	movwf	___awdiv@divisor+1,c
  9562  000F44  0E0A               	movlw	10
  9563  000F46  6E17               	movwf	___awdiv@divisor,c
  9564  000F48  503C               	movf	scale@scl,w,c
  9565  000F4A  6E15               	movwf	___awdiv@dividend,c
  9566  000F4C  6A16               	clrf	___awdiv@dividend+1,c
  9567  000F4E  BE15               	btfsc	___awdiv@dividend,7,c
  9568  000F50  0616               	decf	___awdiv@dividend+1,f,c
  9569  000F52  ECED  F016         	call	___awdiv	;wreg free
  9570  000F56  0E09               	movlw	9
  9571  000F58  2415               	addwf	?___awdiv,w,c
  9572  000F5A  6E1D               	movwf	___wmul@multiplier,c
  9573  000F5C  0E00               	movlw	0
  9574  000F5E  2016               	addwfc	?___awdiv+1,w,c
  9575  000F60  6E1E               	movwf	___wmul@multiplier+1,c
  9576  000F62  0E00               	movlw	0
  9577  000F64  6E20               	movwf	___wmul@multiplicand+1,c
  9578  000F66  0E03               	movlw	3
  9579  000F68  6E1F               	movwf	___wmul@multiplicand,c
  9580  000F6A  ECDE  F01C         	call	___wmul	;wreg free
  9581  000F6E  0E38               	movlw	low __npowers_
  9582  000F70  241D               	addwf	?___wmul,w,c
  9583  000F72  6EF6               	movwf	tblptrl,c
  9584  000F74  0EFF               	movlw	high __npowers_
  9585  000F76  201E               	addwfc	?___wmul+1,w,c
  9586  000F78  6EF7               	movwf	tblptrh,c
  9587  000F7A                     	if	0	;There are less than 3 active tblptr bytes
  9588  000F7A                     	endif
  9589  000F7A  0009               	tblrd		*+
  9590  000F7C  CFF5 F027          	movff	tablat,___ftmul@f1
  9591  000F80  0009               	tblrd		*+
  9592  000F82  CFF5 F028          	movff	tablat,___ftmul@f1+1
  9593  000F86  000A               	tblrd		*-
  9594  000F88  CFF5 F029          	movff	tablat,___ftmul@f1+2
  9595  000F8C  0E00               	movlw	0
  9596  000F8E  6E20               	movwf	___wmul@multiplicand+1,c
  9597  000F90  0E03               	movlw	3
  9598  000F92  6E1F               	movwf	___wmul@multiplicand,c
  9599  000F94  0E00               	movlw	0
  9600  000F96  6E12               	movwf	___awmod@divisor+1,c
  9601  000F98  0E0A               	movlw	10
  9602  000F9A  6E11               	movwf	___awmod@divisor,c
  9603  000F9C  503C               	movf	scale@scl,w,c
  9604  000F9E  6E0F               	movwf	___awmod@dividend,c
  9605  000FA0  6A10               	clrf	___awmod@dividend+1,c
  9606  000FA2  BE0F               	btfsc	___awmod@dividend,7,c
  9607  000FA4  0610               	decf	___awmod@dividend+1,f,c
  9608  000FA6  EC1A  F019         	call	___awmod	;wreg free
  9609  000FAA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  9610  000FAE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  9611  000FB2  ECDE  F01C         	call	___wmul	;wreg free
  9612  000FB6  0E38               	movlw	low __npowers_
  9613  000FB8  241D               	addwf	?___wmul,w,c
  9614  000FBA  6EF6               	movwf	tblptrl,c
  9615  000FBC  0EFF               	movlw	high __npowers_
  9616  000FBE  201E               	addwfc	?___wmul+1,w,c
  9617  000FC0  6EF7               	movwf	tblptrh,c
  9618  000FC2                     	if	0	;There are less than 3 active tblptr bytes
  9619  000FC2                     	endif
  9620  000FC2  0009               	tblrd		*+
  9621  000FC4  CFF5 F02A          	movff	tablat,___ftmul@f2
  9622  000FC8  0009               	tblrd		*+
  9623  000FCA  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  9624  000FCE  000A               	tblrd		*-
  9625  000FD0  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  9626  000FD4  EC44  F012         	call	___ftmul	;wreg free
  9627  000FD8  D0ED               	goto	L21
  9628  000FDA  D106               	goto	l611
  9629  000FDC  D000               	goto	l5920
  9630  000FDE                     l5920:
  9631                           
  9632                           ;doprnt.c: 434: return _npowers_[scl];
  9633  000FDE  503C               	movf	scale@scl,w,c
  9634  000FE0  0D03               	mullw	3
  9635  000FE2  0E38               	movlw	low __npowers_
  9636  000FE4  24F3               	addwf	prodl,w,c
  9637  000FE6  6EF6               	movwf	tblptrl,c
  9638  000FE8  0EFF               	movlw	high __npowers_
  9639  000FEA  D0F2               	goto	L20
  9640  000FEC  D0FD               	goto	l611
  9641  000FEE                     l5924:
  9642                           
  9643                           ;doprnt.c: 435: }
  9644                           ;doprnt.c: 436: if(scl>=110)
  9645  000FEE  503C               	movf	scale@scl,w,c
  9646  000FF0  0A80               	xorlw	128
  9647  000FF2  0F12               	addlw	-238
  9648  000FF4  A0D8               	btfss	status,0,c
  9649  000FF6  D08D               	goto	l5932
  9650                           
  9651                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9652  000FF8  0E00               	movlw	0
  9653  000FFA  6E20               	movwf	___wmul@multiplicand+1,c
  9654  000FFC  0E03               	movlw	3
  9655  000FFE  6E1F               	movwf	___wmul@multiplicand,c
  9656  001000  0E00               	movlw	0
  9657  001002  6E18               	movwf	___awdiv@divisor+1,c
  9658  001004  0E0A               	movlw	10
  9659  001006  6E17               	movwf	___awdiv@divisor,c
  9660  001008  0E00               	movlw	0
  9661  00100A  6E12               	movwf	___awmod@divisor+1,c
  9662  00100C  0E64               	movlw	100
  9663  00100E  6E11               	movwf	___awmod@divisor,c
  9664  001010  503C               	movf	scale@scl,w,c
  9665  001012  6E0F               	movwf	___awmod@dividend,c
  9666  001014  6A10               	clrf	___awmod@dividend+1,c
  9667  001016  BE0F               	btfsc	___awmod@dividend,7,c
  9668  001018  0610               	decf	___awmod@dividend+1,f,c
  9669  00101A  EC1A  F019         	call	___awmod	;wreg free
  9670  00101E  C00F  F015         	movff	?___awmod,___awdiv@dividend
  9671  001022  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
  9672  001026  ECED  F016         	call	___awdiv	;wreg free
  9673  00102A  0E09               	movlw	9
  9674  00102C  2415               	addwf	?___awdiv,w,c
  9675  00102E  6E1D               	movwf	___wmul@multiplier,c
  9676  001030  0E00               	movlw	0
  9677  001032  2016               	addwfc	?___awdiv+1,w,c
  9678  001034  6E1E               	movwf	___wmul@multiplier+1,c
  9679  001036  ECDE  F01C         	call	___wmul	;wreg free
  9680  00103A  0E5F               	movlw	low __powers_
  9681  00103C  241D               	addwf	?___wmul,w,c
  9682  00103E  6EF6               	movwf	tblptrl,c
  9683  001040  0EFF               	movlw	high __powers_
  9684  001042  201E               	addwfc	?___wmul+1,w,c
  9685  001044  6EF7               	movwf	tblptrh,c
  9686  001046                     	if	0	;There are less than 3 active tblptr bytes
  9687  001046                     	endif
  9688  001046  0009               	tblrd		*+
  9689  001048  CFF5 F02A          	movff	tablat,___ftmul@f2
  9690  00104C  0009               	tblrd		*+
  9691  00104E  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  9692  001052  000A               	tblrd		*-
  9693  001054  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  9694  001058  0E00               	movlw	0
  9695  00105A  6E18               	movwf	___awdiv@divisor+1,c
  9696  00105C  0E64               	movlw	100
  9697  00105E  6E17               	movwf	___awdiv@divisor,c
  9698  001060  503C               	movf	scale@scl,w,c
  9699  001062  6E15               	movwf	___awdiv@dividend,c
  9700  001064  6A16               	clrf	___awdiv@dividend+1,c
  9701  001066  BE15               	btfsc	___awdiv@dividend,7,c
  9702  001068  0616               	decf	___awdiv@dividend+1,f,c
  9703  00106A  ECED  F016         	call	___awdiv	;wreg free
  9704  00106E  0E12               	movlw	18
  9705  001070  2415               	addwf	?___awdiv,w,c
  9706  001072  6E1D               	movwf	___wmul@multiplier,c
  9707  001074  0E00               	movlw	0
  9708  001076  2016               	addwfc	?___awdiv+1,w,c
  9709  001078  6E1E               	movwf	___wmul@multiplier+1,c
  9710  00107A  0E00               	movlw	0
  9711  00107C  6E20               	movwf	___wmul@multiplicand+1,c
  9712  00107E  0E03               	movlw	3
  9713  001080  6E1F               	movwf	___wmul@multiplicand,c
  9714  001082  ECDE  F01C         	call	___wmul	;wreg free
  9715  001086  0E5F               	movlw	low __powers_
  9716  001088  241D               	addwf	?___wmul,w,c
  9717  00108A  6EF6               	movwf	tblptrl,c
  9718  00108C  0EFF               	movlw	high __powers_
  9719  00108E  201E               	addwfc	?___wmul+1,w,c
  9720  001090  6EF7               	movwf	tblptrh,c
  9721  001092                     	if	0	;There are less than 3 active tblptr bytes
  9722  001092                     	endif
  9723  001092  0009               	tblrd		*+
  9724  001094  CFF5 F027          	movff	tablat,___ftmul@f1
  9725  001098  0009               	tblrd		*+
  9726  00109A  CFF5 F028          	movff	tablat,___ftmul@f1+1
  9727  00109E  000A               	tblrd		*-
  9728  0010A0  CFF5 F029          	movff	tablat,___ftmul@f1+2
  9729  0010A4  EC44  F012         	call	___ftmul	;wreg free
  9730  0010A8  C027  F039         	movff	?___ftmul,_scale$2523
  9731  0010AC  C028  F03A         	movff	?___ftmul+1,_scale$2523+1
  9732  0010B0  C029  F03B         	movff	?___ftmul+2,_scale$2523+2
  9733                           
  9734                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9735  0010B4  C039  F027         	movff	_scale$2523,___ftmul@f1
  9736  0010B8  C03A  F028         	movff	_scale$2523+1,___ftmul@f1+1
  9737  0010BC  C03B  F029         	movff	_scale$2523+2,___ftmul@f1+2
  9738  0010C0  0E00               	movlw	0
  9739  0010C2  6E20               	movwf	___wmul@multiplicand+1,c
  9740  0010C4  0E03               	movlw	3
  9741  0010C6  6E1F               	movwf	___wmul@multiplicand,c
  9742  0010C8  0E00               	movlw	0
  9743  0010CA  6E12               	movwf	___awmod@divisor+1,c
  9744  0010CC  0E0A               	movlw	10
  9745  0010CE  6E11               	movwf	___awmod@divisor,c
  9746  0010D0  503C               	movf	scale@scl,w,c
  9747  0010D2  6E0F               	movwf	___awmod@dividend,c
  9748  0010D4  6A10               	clrf	___awmod@dividend+1,c
  9749  0010D6  BE0F               	btfsc	___awmod@dividend,7,c
  9750  0010D8  0610               	decf	___awmod@dividend+1,f,c
  9751  0010DA  EC1A  F019         	call	___awmod	;wreg free
  9752  0010DE  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  9753  0010E2  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  9754  0010E6  ECDE  F01C         	call	___wmul	;wreg free
  9755  0010EA  0E5F               	movlw	low __powers_
  9756  0010EC  241D               	addwf	?___wmul,w,c
  9757  0010EE  6EF6               	movwf	tblptrl,c
  9758  0010F0  0EFF               	movlw	high __powers_
  9759  0010F2  201E               	addwfc	?___wmul+1,w,c
  9760  0010F4  6EF7               	movwf	tblptrh,c
  9761  0010F6                     	if	0	;There are less than 3 active tblptr bytes
  9762  0010F6                     	endif
  9763  0010F6  0009               	tblrd		*+
  9764  0010F8  CFF5 F02A          	movff	tablat,___ftmul@f2
  9765  0010FC  0009               	tblrd		*+
  9766  0010FE  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  9767  001102  000A               	tblrd		*-
  9768  001104  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  9769  001108  EC44  F012         	call	___ftmul	;wreg free
  9770  00110C  D053               	goto	L21
  9771  00110E  D06C               	goto	l611
  9772  001110  D059               	goto	l5938
  9773  001112                     l5932:
  9774                           
  9775                           ;doprnt.c: 438: else if(scl > 10)
  9776  001112  503C               	movf	scale@scl,w,c
  9777  001114  0A80               	xorlw	128
  9778  001116  0F75               	addlw	-139
  9779  001118  A0D8               	btfss	status,0,c
  9780  00111A  D054               	goto	l5938
  9781                           
  9782                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9783  00111C  0E00               	movlw	0
  9784  00111E  6E18               	movwf	___awdiv@divisor+1,c
  9785  001120  0E0A               	movlw	10
  9786  001122  6E17               	movwf	___awdiv@divisor,c
  9787  001124  503C               	movf	scale@scl,w,c
  9788  001126  6E15               	movwf	___awdiv@dividend,c
  9789  001128  6A16               	clrf	___awdiv@dividend+1,c
  9790  00112A  BE15               	btfsc	___awdiv@dividend,7,c
  9791  00112C  0616               	decf	___awdiv@dividend+1,f,c
  9792  00112E  ECED  F016         	call	___awdiv	;wreg free
  9793  001132  0E09               	movlw	9
  9794  001134  2415               	addwf	?___awdiv,w,c
  9795  001136  6E1D               	movwf	___wmul@multiplier,c
  9796  001138  0E00               	movlw	0
  9797  00113A  2016               	addwfc	?___awdiv+1,w,c
  9798  00113C  6E1E               	movwf	___wmul@multiplier+1,c
  9799  00113E  0E00               	movlw	0
  9800  001140  6E20               	movwf	___wmul@multiplicand+1,c
  9801  001142  0E03               	movlw	3
  9802  001144  6E1F               	movwf	___wmul@multiplicand,c
  9803  001146  ECDE  F01C         	call	___wmul	;wreg free
  9804  00114A  0E5F               	movlw	low __powers_
  9805  00114C  241D               	addwf	?___wmul,w,c
  9806  00114E  6EF6               	movwf	tblptrl,c
  9807  001150  0EFF               	movlw	high __powers_
  9808  001152  201E               	addwfc	?___wmul+1,w,c
  9809  001154  6EF7               	movwf	tblptrh,c
  9810  001156                     	if	0	;There are less than 3 active tblptr bytes
  9811  001156                     	endif
  9812  001156  0009               	tblrd		*+
  9813  001158  CFF5 F027          	movff	tablat,___ftmul@f1
  9814  00115C  0009               	tblrd		*+
  9815  00115E  CFF5 F028          	movff	tablat,___ftmul@f1+1
  9816  001162  000A               	tblrd		*-
  9817  001164  CFF5 F029          	movff	tablat,___ftmul@f1+2
  9818  001168  0E00               	movlw	0
  9819  00116A  6E20               	movwf	___wmul@multiplicand+1,c
  9820  00116C  0E03               	movlw	3
  9821  00116E  6E1F               	movwf	___wmul@multiplicand,c
  9822  001170  0E00               	movlw	0
  9823  001172  6E12               	movwf	___awmod@divisor+1,c
  9824  001174  0E0A               	movlw	10
  9825  001176  6E11               	movwf	___awmod@divisor,c
  9826  001178  503C               	movf	scale@scl,w,c
  9827  00117A  6E0F               	movwf	___awmod@dividend,c
  9828  00117C  6A10               	clrf	___awmod@dividend+1,c
  9829  00117E  BE0F               	btfsc	___awmod@dividend,7,c
  9830  001180  0610               	decf	___awmod@dividend+1,f,c
  9831  001182  EC1A  F019         	call	___awmod	;wreg free
  9832  001186  C00F  F01D         	movff	?___awmod,___wmul@multiplier
  9833  00118A  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
  9834  00118E  ECDE  F01C         	call	___wmul	;wreg free
  9835  001192  0E5F               	movlw	low __powers_
  9836  001194  241D               	addwf	?___wmul,w,c
  9837  001196  6EF6               	movwf	tblptrl,c
  9838  001198  0EFF               	movlw	high __powers_
  9839  00119A  201E               	addwfc	?___wmul+1,w,c
  9840  00119C  6EF7               	movwf	tblptrh,c
  9841  00119E                     	if	0	;There are less than 3 active tblptr bytes
  9842  00119E                     	endif
  9843  00119E  0009               	tblrd		*+
  9844  0011A0  CFF5 F02A          	movff	tablat,___ftmul@f2
  9845  0011A4  0009               	tblrd		*+
  9846  0011A6  CFF5 F02B          	movff	tablat,___ftmul@f2+1
  9847  0011AA  000A               	tblrd		*-
  9848  0011AC  CFF5 F02C          	movff	tablat,___ftmul@f2+2
  9849  0011B0  EC44  F012         	call	___ftmul	;wreg free
  9850  0011B4                     L21:
  9851  0011B4  C027  F036         	movff	?___ftmul,?_scale
  9852  0011B8  C028  F037         	movff	?___ftmul+1,?_scale+1
  9853  0011BC  C029  F038         	movff	?___ftmul+2,?_scale+2
  9854  0011C0  D013               	goto	l611
  9855  0011C2  D000               	goto	l5938
  9856  0011C4                     l5938:
  9857                           
  9858                           ;doprnt.c: 440: return _powers_[scl];
  9859  0011C4  503C               	movf	scale@scl,w,c
  9860  0011C6  0D03               	mullw	3
  9861  0011C8  0E5F               	movlw	low __powers_
  9862  0011CA  24F3               	addwf	prodl,w,c
  9863  0011CC  6EF6               	movwf	tblptrl,c
  9864  0011CE  0EFF               	movlw	high __powers_
  9865  0011D0                     L20:
  9866  0011D0  20F4               	addwfc	prodh,w,c
  9867  0011D2  6EF7               	movwf	tblptrh,c
  9868  0011D4                     	if	0	;There are less than 3 active tblptr bytes
  9869  0011D4                     	endif
  9870  0011D4  0009               	tblrd		*+
  9871  0011D6  CFF5 F036          	movff	tablat,?_scale
  9872  0011DA  0009               	tblrd		*+
  9873  0011DC  CFF5 F037          	movff	tablat,?_scale+1
  9874  0011E0  000A               	tblrd		*-
  9875  0011E2  CFF5 F038          	movff	tablat,?_scale+2
  9876  0011E6  D000               	goto	l611
  9877  0011E8                     l611:
  9878  0011E8  0012               	return		;funcret
  9879  0011EA                     __end_of_scale:
  9880                           	opt stack 0
  9881                           tblptru	equ	0xFF8
  9882                           tblptrh	equ	0xFF7
  9883                           tblptrl	equ	0xFF6
  9884                           tablat	equ	0xFF5
  9885                           prodh	equ	0xFF4
  9886                           prodl	equ	0xFF3
  9887                           intcon	equ	0xFF2
  9888                           intcon2	equ	0xFF1
  9889                           intcon3	equ	0xFF0
  9890                           postinc0	equ	0xFEE
  9891                           wreg	equ	0xFE8
  9892                           postdec1	equ	0xFE5
  9893                           fsr1l	equ	0xFE1
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           fsr2h	equ	0xFDA
  9897                           fsr2l	equ	0xFD9
  9898                           status	equ	0xFD8
  9899                           
  9900 ;; *************** function _putch *****************
  9901 ;; Defined at:
  9902 ;;		line 226 in file "Lab8.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;  c               1    wreg     unsigned char 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  c               1   14[COMRAM] unsigned char 
  9907 ;; Return value:  Size  Location     Type
  9908 ;;		None               void
  9909 ;; Registers used:
  9910 ;;		wreg
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;Total ram usage:        1 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    2
  9923 ;; This function calls:
  9924 ;;		Nothing
  9925 ;; This function is called by:
  9926 ;;		_printf
  9927 ;; This function uses a non-reentrant model
  9928 ;;
  9929                           
  9930                           	psect	text38
  9931  003B1A                     __ptext38:
  9932                           	opt stack 0
  9933  003B1A                     _putch:
  9934                           	opt stack 23
  9935                           
  9936                           ;incstack = 0
  9937                           ;putch@c stored from wreg
  9938  003B1A  6E0F               	movwf	putch@c,c
  9939                           
  9940                           ;Lab8.c: 227: while (!TRMT);
  9941  003B1C  D000               	goto	l406
  9942  003B1E                     l406:
  9943  003B1E  A2AC               	btfss	4012,1,c	;volatile
  9944  003B20  D7FE               	goto	l406
  9945                           
  9946                           ;Lab8.c: 228: TXREG = c;
  9947  003B22  C00F  FFAD         	movff	putch@c,4013	;volatile
  9948  003B26  0012               	return		;funcret
  9949  003B28                     __end_of_putch:
  9950                           	opt stack 0
  9951                           tblptru	equ	0xFF8
  9952                           tblptrh	equ	0xFF7
  9953                           tblptrl	equ	0xFF6
  9954                           tablat	equ	0xFF5
  9955                           prodh	equ	0xFF4
  9956                           prodl	equ	0xFF3
  9957                           intcon	equ	0xFF2
  9958                           intcon2	equ	0xFF1
  9959                           intcon3	equ	0xFF0
  9960                           postinc0	equ	0xFEE
  9961                           wreg	equ	0xFE8
  9962                           postdec1	equ	0xFE5
  9963                           fsr1l	equ	0xFE1
  9964                           postinc2	equ	0xFDE
  9965                           postdec2	equ	0xFDD
  9966                           fsr2h	equ	0xFDA
  9967                           fsr2l	equ	0xFD9
  9968                           status	equ	0xFD8
  9969                           
  9970 ;; *************** function _fround *****************
  9971 ;; Defined at:
  9972 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;  prec            1    wreg     unsigned char 
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;  prec            1   62[COMRAM] unsigned char 
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  3   53[COMRAM] unsigned char 
  9979 ;; Registers used:
  9980 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9986 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;Total ram usage:       10 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    4
  9993 ;; This function calls:
  9994 ;;		___awdiv
  9995 ;;		___awmod
  9996 ;;		___ftmul
  9997 ;;		___wmul
  9998 ;; This function is called by:
  9999 ;;		_printf
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           	psect	text39
 10004  00154C                     __ptext39:
 10005                           	opt stack 0
 10006  00154C                     _fround:
 10007                           	opt stack 21
 10008                           
 10009                           ;incstack = 0
 10010                           ;fround@prec stored from wreg
 10011  00154C  6E3F               	movwf	fround@prec,c
 10012                           
 10013                           ;doprnt.c: 413: if(prec>=110)
 10014  00154E  0E6D               	movlw	109
 10015  001550  643F               	cpfsgt	fround@prec,c
 10016  001552  D09B               	goto	l5892
 10017                           
 10018                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10019  001554  0E00               	movlw	0
 10020  001556  6E20               	movwf	___wmul@multiplicand+1,c
 10021  001558  0E03               	movlw	3
 10022  00155A  6E1F               	movwf	___wmul@multiplicand,c
 10023  00155C  0E00               	movlw	0
 10024  00155E  6E18               	movwf	___awdiv@divisor+1,c
 10025  001560  0E0A               	movlw	10
 10026  001562  6E17               	movwf	___awdiv@divisor,c
 10027  001564  0E00               	movlw	0
 10028  001566  6E12               	movwf	___awmod@divisor+1,c
 10029  001568  0E64               	movlw	100
 10030  00156A  6E11               	movwf	___awmod@divisor,c
 10031  00156C  C03F  F00F         	movff	fround@prec,___awmod@dividend
 10032  001570  6A10               	clrf	___awmod@dividend+1,c
 10033  001572  EC1A  F019         	call	___awmod	;wreg free
 10034  001576  C00F  F015         	movff	?___awmod,___awdiv@dividend
 10035  00157A  C010  F016         	movff	?___awmod+1,___awdiv@dividend+1
 10036  00157E  ECED  F016         	call	___awdiv	;wreg free
 10037  001582  0E09               	movlw	9
 10038  001584  2415               	addwf	?___awdiv,w,c
 10039  001586  6E1D               	movwf	___wmul@multiplier,c
 10040  001588  0E00               	movlw	0
 10041  00158A  2016               	addwfc	?___awdiv+1,w,c
 10042  00158C  6E1E               	movwf	___wmul@multiplier+1,c
 10043  00158E  ECDE  F01C         	call	___wmul	;wreg free
 10044  001592  0E38               	movlw	low __npowers_
 10045  001594  241D               	addwf	?___wmul,w,c
 10046  001596  6EF6               	movwf	tblptrl,c
 10047  001598  0EFF               	movlw	high __npowers_
 10048  00159A  201E               	addwfc	?___wmul+1,w,c
 10049  00159C  6EF7               	movwf	tblptrh,c
 10050  00159E                     	if	0	;There are less than 3 active tblptr bytes
 10051  00159E                     	endif
 10052  00159E  0009               	tblrd		*+
 10053  0015A0  CFF5 F02A          	movff	tablat,___ftmul@f2
 10054  0015A4  0009               	tblrd		*+
 10055  0015A6  CFF5 F02B          	movff	tablat,___ftmul@f2+1
 10056  0015AA  000A               	tblrd		*-
 10057  0015AC  CFF5 F02C          	movff	tablat,___ftmul@f2+2
 10058  0015B0  0E00               	movlw	0
 10059  0015B2  6E18               	movwf	___awdiv@divisor+1,c
 10060  0015B4  0E64               	movlw	100
 10061  0015B6  6E17               	movwf	___awdiv@divisor,c
 10062  0015B8  C03F  F015         	movff	fround@prec,___awdiv@dividend
 10063  0015BC  6A16               	clrf	___awdiv@dividend+1,c
 10064  0015BE  ECED  F016         	call	___awdiv	;wreg free
 10065  0015C2  0E12               	movlw	18
 10066  0015C4  2415               	addwf	?___awdiv,w,c
 10067  0015C6  6E1D               	movwf	___wmul@multiplier,c
 10068  0015C8  0E00               	movlw	0
 10069  0015CA  2016               	addwfc	?___awdiv+1,w,c
 10070  0015CC  6E1E               	movwf	___wmul@multiplier+1,c
 10071  0015CE  0E00               	movlw	0
 10072  0015D0  6E20               	movwf	___wmul@multiplicand+1,c
 10073  0015D2  0E03               	movlw	3
 10074  0015D4  6E1F               	movwf	___wmul@multiplicand,c
 10075  0015D6  ECDE  F01C         	call	___wmul	;wreg free
 10076  0015DA  0E38               	movlw	low __npowers_
 10077  0015DC  241D               	addwf	?___wmul,w,c
 10078  0015DE  6EF6               	movwf	tblptrl,c
 10079  0015E0  0EFF               	movlw	high __npowers_
 10080  0015E2  201E               	addwfc	?___wmul+1,w,c
 10081  0015E4  6EF7               	movwf	tblptrh,c
 10082  0015E6                     	if	0	;There are less than 3 active tblptr bytes
 10083  0015E6                     	endif
 10084  0015E6  0009               	tblrd		*+
 10085  0015E8  CFF5 F027          	movff	tablat,___ftmul@f1
 10086  0015EC  0009               	tblrd		*+
 10087  0015EE  CFF5 F028          	movff	tablat,___ftmul@f1+1
 10088  0015F2  000A               	tblrd		*-
 10089  0015F4  CFF5 F029          	movff	tablat,___ftmul@f1+2
 10090  0015F8  EC44  F012         	call	___ftmul	;wreg free
 10091  0015FC  C027  F03C         	movff	?___ftmul,_fround$2521
 10092  001600  C028  F03D         	movff	?___ftmul+1,_fround$2521+1
 10093  001604  C029  F03E         	movff	?___ftmul+2,_fround$2521+2
 10094                           
 10095                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10096  001608  0E00               	movlw	0
 10097  00160A  6E20               	movwf	___wmul@multiplicand+1,c
 10098  00160C  0E03               	movlw	3
 10099  00160E  6E1F               	movwf	___wmul@multiplicand,c
 10100  001610  0E00               	movlw	0
 10101  001612  6E12               	movwf	___awmod@divisor+1,c
 10102  001614  0E0A               	movlw	10
 10103  001616  6E11               	movwf	___awmod@divisor,c
 10104  001618  C03F  F00F         	movff	fround@prec,___awmod@dividend
 10105  00161C  6A10               	clrf	___awmod@dividend+1,c
 10106  00161E  EC1A  F019         	call	___awmod	;wreg free
 10107  001622  C00F  F01D         	movff	?___awmod,___wmul@multiplier
 10108  001626  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
 10109  00162A  ECDE  F01C         	call	___wmul	;wreg free
 10110  00162E  0E38               	movlw	low __npowers_
 10111  001630  241D               	addwf	?___wmul,w,c
 10112  001632  6EF6               	movwf	tblptrl,c
 10113  001634  0EFF               	movlw	high __npowers_
 10114  001636  201E               	addwfc	?___wmul+1,w,c
 10115  001638  6EF7               	movwf	tblptrh,c
 10116  00163A                     	if	0	;There are less than 3 active tblptr bytes
 10117  00163A                     	endif
 10118  00163A  0009               	tblrd		*+
 10119  00163C  CFF5 F02A          	movff	tablat,___ftmul@f2
 10120  001640  0009               	tblrd		*+
 10121  001642  CFF5 F02B          	movff	tablat,___ftmul@f2+1
 10122  001646  000A               	tblrd		*-
 10123  001648  CFF5 F02C          	movff	tablat,___ftmul@f2+2
 10124  00164C  C03C  F027         	movff	_fround$2521,___ftmul@f1
 10125  001650  C03D  F028         	movff	_fround$2521+1,___ftmul@f1+1
 10126  001654  C03E  F029         	movff	_fround$2521+2,___ftmul@f1+2
 10127  001658  EC44  F012         	call	___ftmul	;wreg free
 10128  00165C  C027  F039         	movff	?___ftmul,_fround$2522
 10129  001660  C028  F03A         	movff	?___ftmul+1,_fround$2522+1
 10130  001664  C029  F03B         	movff	?___ftmul+2,_fround$2522+2
 10131                           
 10132                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10133  001668  C039  F027         	movff	_fround$2522,___ftmul@f1
 10134  00166C  C03A  F028         	movff	_fround$2522+1,___ftmul@f1+1
 10135  001670  C03B  F029         	movff	_fround$2522+2,___ftmul@f1+2
 10136  001674  0E00               	movlw	0
 10137  001676  6E2A               	movwf	___ftmul@f2,c
 10138  001678  0E00               	movlw	0
 10139  00167A  6E2B               	movwf	___ftmul@f2+1,c
 10140  00167C  0E3F               	movlw	63
 10141  00167E  6E2C               	movwf	___ftmul@f2+2,c
 10142  001680  EC44  F012         	call	___ftmul	;wreg free
 10143  001684  D07D               	goto	L23
 10144  001686  D083               	goto	l604
 10145  001688  D062               	goto	l5900
 10146  00168A                     l5892:
 10147                           
 10148                           ;doprnt.c: 415: else if(prec > 10)
 10149  00168A  0E0A               	movlw	10
 10150  00168C  643F               	cpfsgt	fround@prec,c
 10151  00168E  D05F               	goto	l5900
 10152                           
 10153                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10154  001690  0E00               	movlw	0
 10155  001692  6E20               	movwf	___wmul@multiplicand+1,c
 10156  001694  0E03               	movlw	3
 10157  001696  6E1F               	movwf	___wmul@multiplicand,c
 10158  001698  0E00               	movlw	0
 10159  00169A  6E12               	movwf	___awmod@divisor+1,c
 10160  00169C  0E0A               	movlw	10
 10161  00169E  6E11               	movwf	___awmod@divisor,c
 10162  0016A0  C03F  F00F         	movff	fround@prec,___awmod@dividend
 10163  0016A4  6A10               	clrf	___awmod@dividend+1,c
 10164  0016A6  EC1A  F019         	call	___awmod	;wreg free
 10165  0016AA  C00F  F01D         	movff	?___awmod,___wmul@multiplier
 10166  0016AE  C010  F01E         	movff	?___awmod+1,___wmul@multiplier+1
 10167  0016B2  ECDE  F01C         	call	___wmul	;wreg free
 10168  0016B6  0E38               	movlw	low __npowers_
 10169  0016B8  241D               	addwf	?___wmul,w,c
 10170  0016BA  6EF6               	movwf	tblptrl,c
 10171  0016BC  0EFF               	movlw	high __npowers_
 10172  0016BE  201E               	addwfc	?___wmul+1,w,c
 10173  0016C0  6EF7               	movwf	tblptrh,c
 10174  0016C2                     	if	0	;There are less than 3 active tblptr bytes
 10175  0016C2                     	endif
 10176  0016C2  0009               	tblrd		*+
 10177  0016C4  CFF5 F02A          	movff	tablat,___ftmul@f2
 10178  0016C8  0009               	tblrd		*+
 10179  0016CA  CFF5 F02B          	movff	tablat,___ftmul@f2+1
 10180  0016CE  000A               	tblrd		*-
 10181  0016D0  CFF5 F02C          	movff	tablat,___ftmul@f2+2
 10182  0016D4  0E00               	movlw	0
 10183  0016D6  6E18               	movwf	___awdiv@divisor+1,c
 10184  0016D8  0E0A               	movlw	10
 10185  0016DA  6E17               	movwf	___awdiv@divisor,c
 10186  0016DC  C03F  F015         	movff	fround@prec,___awdiv@dividend
 10187  0016E0  6A16               	clrf	___awdiv@dividend+1,c
 10188  0016E2  ECED  F016         	call	___awdiv	;wreg free
 10189  0016E6  0E09               	movlw	9
 10190  0016E8  2415               	addwf	?___awdiv,w,c
 10191  0016EA  6E1D               	movwf	___wmul@multiplier,c
 10192  0016EC  0E00               	movlw	0
 10193  0016EE  2016               	addwfc	?___awdiv+1,w,c
 10194  0016F0  6E1E               	movwf	___wmul@multiplier+1,c
 10195  0016F2  0E00               	movlw	0
 10196  0016F4  6E20               	movwf	___wmul@multiplicand+1,c
 10197  0016F6  0E03               	movlw	3
 10198  0016F8  6E1F               	movwf	___wmul@multiplicand,c
 10199  0016FA  ECDE  F01C         	call	___wmul	;wreg free
 10200  0016FE  0E38               	movlw	low __npowers_
 10201  001700  241D               	addwf	?___wmul,w,c
 10202  001702  6EF6               	movwf	tblptrl,c
 10203  001704  0EFF               	movlw	high __npowers_
 10204  001706  201E               	addwfc	?___wmul+1,w,c
 10205  001708  6EF7               	movwf	tblptrh,c
 10206  00170A                     	if	0	;There are less than 3 active tblptr bytes
 10207  00170A                     	endif
 10208  00170A  0009               	tblrd		*+
 10209  00170C  CFF5 F027          	movff	tablat,___ftmul@f1
 10210  001710  0009               	tblrd		*+
 10211  001712  CFF5 F028          	movff	tablat,___ftmul@f1+1
 10212  001716  000A               	tblrd		*-
 10213  001718  CFF5 F029          	movff	tablat,___ftmul@f1+2
 10214  00171C  EC44  F012         	call	___ftmul	;wreg free
 10215  001720  C027  F03C         	movff	?___ftmul,_fround$2521
 10216  001724  C028  F03D         	movff	?___ftmul+1,_fround$2521+1
 10217  001728  C029  F03E         	movff	?___ftmul+2,_fround$2521+2
 10218                           
 10219                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10220  00172C  C03C  F027         	movff	_fround$2521,___ftmul@f1
 10221  001730  C03D  F028         	movff	_fround$2521+1,___ftmul@f1+1
 10222  001734  C03E  F029         	movff	_fround$2521+2,___ftmul@f1+2
 10223  001738  0E00               	movlw	0
 10224  00173A  6E2A               	movwf	___ftmul@f2,c
 10225  00173C  0E00               	movlw	0
 10226  00173E  6E2B               	movwf	___ftmul@f2+1,c
 10227  001740  0E3F               	movlw	63
 10228  001742  6E2C               	movwf	___ftmul@f2+2,c
 10229  001744  EC44  F012         	call	___ftmul	;wreg free
 10230  001748  D01B               	goto	L23
 10231  00174A  D021               	goto	l604
 10232  00174C  D000               	goto	l5900
 10233  00174E                     l5900:
 10234                           
 10235                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10236  00174E  503F               	movf	fround@prec,w,c
 10237  001750  0D03               	mullw	3
 10238  001752  0E38               	movlw	low __npowers_
 10239  001754  24F3               	addwf	prodl,w,c
 10240  001756  6EF6               	movwf	tblptrl,c
 10241  001758  0EFF               	movlw	high __npowers_
 10242  00175A  20F4               	addwfc	prodh,w,c
 10243  00175C  6EF7               	movwf	tblptrh,c
 10244  00175E                     	if	0	;There are less than 3 active tblptr bytes
 10245  00175E                     	endif
 10246  00175E  0009               	tblrd		*+
 10247  001760  CFF5 F027          	movff	tablat,___ftmul@f1
 10248  001764  0009               	tblrd		*+
 10249  001766  CFF5 F028          	movff	tablat,___ftmul@f1+1
 10250  00176A  000A               	tblrd		*-
 10251  00176C  CFF5 F029          	movff	tablat,___ftmul@f1+2
 10252  001770  0E00               	movlw	0
 10253  001772  6E2A               	movwf	___ftmul@f2,c
 10254  001774  0E00               	movlw	0
 10255  001776  6E2B               	movwf	___ftmul@f2+1,c
 10256  001778  0E3F               	movlw	63
 10257  00177A  6E2C               	movwf	___ftmul@f2+2,c
 10258  00177C  EC44  F012         	call	___ftmul	;wreg free
 10259  001780                     L23:
 10260  001780  C027  F036         	movff	?___ftmul,?_fround
 10261  001784  C028  F037         	movff	?___ftmul+1,?_fround+1
 10262  001788  C029  F038         	movff	?___ftmul+2,?_fround+2
 10263  00178C  D000               	goto	l604
 10264  00178E                     l604:
 10265  00178E  0012               	return		;funcret
 10266  001790                     __end_of_fround:
 10267                           	opt stack 0
 10268                           tblptru	equ	0xFF8
 10269                           tblptrh	equ	0xFF7
 10270                           tblptrl	equ	0xFF6
 10271                           tablat	equ	0xFF5
 10272                           prodh	equ	0xFF4
 10273                           prodl	equ	0xFF3
 10274                           intcon	equ	0xFF2
 10275                           intcon2	equ	0xFF1
 10276                           intcon3	equ	0xFF0
 10277                           postinc0	equ	0xFEE
 10278                           wreg	equ	0xFE8
 10279                           postdec1	equ	0xFE5
 10280                           fsr1l	equ	0xFE1
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function ___ftmul *****************
 10288 ;; Defined at:
 10289 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;  f1              3   38[COMRAM] float 
 10292 ;;  f2              3   41[COMRAM] float 
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;  f3_as_produc    3   48[COMRAM] unsigned um
 10295 ;;  sign            1   52[COMRAM] unsigned char 
 10296 ;;  cntr            1   51[COMRAM] unsigned char 
 10297 ;;  exp             1   47[COMRAM] unsigned char 
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  3   38[COMRAM] float 
 10300 ;; Registers used:
 10301 ;;		wreg, status,2, status,0, cstack
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10307 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;Total ram usage:       15 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:    3
 10314 ;; This function calls:
 10315 ;;		___ftpack
 10316 ;; This function is called by:
 10317 ;;		_main
 10318 ;;		_fround
 10319 ;;		_scale
 10320 ;;		_printf
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text40
 10325  002488                     __ptext40:
 10326                           	opt stack 0
 10327  002488                     ___ftmul:
 10328                           	opt stack 27
 10329                           
 10330                           ;incstack = 0
 10331  002488  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
 10332  00248C  6A2E               	clrf	(??___ftmul+1)& (0+255),c
 10333  00248E  6A2F               	clrf	(??___ftmul+2)& (0+255),c
 10334  002490  3428               	rlcf	___ftmul@f1+1,w,c
 10335  002492  362D               	rlcf	??___ftmul& (0+255),f,c
 10336  002494  E301               	bnc	u5001
 10337  002496  802E               	bsf	(??___ftmul+1)& (0+255),0,c
 10338  002498                     u5001:
 10339  002498  502D               	movf	??___ftmul,w,c
 10340  00249A  6E30               	movwf	___ftmul@exp,c
 10341  00249C  5030               	movf	___ftmul@exp,w,c
 10342  00249E  A4D8               	btfss	status,2,c
 10343  0024A0  D002               	goto	l5692
 10344  0024A2  D00E               	goto	l5694
 10345  0024A4  D06C               	goto	l1132
 10346  0024A6                     l5692:
 10347  0024A6  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
 10348  0024AA  6A2E               	clrf	(??___ftmul+1)& (0+255),c
 10349  0024AC  6A2F               	clrf	(??___ftmul+2)& (0+255),c
 10350  0024AE  342B               	rlcf	___ftmul@f2+1,w,c
 10351  0024B0  362D               	rlcf	??___ftmul& (0+255),f,c
 10352  0024B2  E301               	bnc	u5021
 10353  0024B4  802E               	bsf	(??___ftmul+1)& (0+255),0,c
 10354  0024B6                     u5021:
 10355  0024B6  502D               	movf	??___ftmul,w,c
 10356  0024B8  6E35               	movwf	___ftmul@sign,c
 10357  0024BA  5035               	movf	___ftmul@sign,w,c
 10358  0024BC  A4D8               	btfss	status,2,c
 10359  0024BE  D007               	goto	l5698
 10360  0024C0                     l5694:
 10361  0024C0  0E00               	movlw	0
 10362  0024C2  6E27               	movwf	?___ftmul,c
 10363  0024C4  0E00               	movlw	0
 10364  0024C6  6E28               	movwf	?___ftmul+1,c
 10365  0024C8  0E00               	movlw	0
 10366  0024CA  6E29               	movwf	?___ftmul+2,c
 10367  0024CC  D058               	goto	l1132
 10368  0024CE                     l5698:
 10369  0024CE  5035               	movf	___ftmul@sign,w,c
 10370  0024D0  0F7B               	addlw	123
 10371  0024D2  2630               	addwf	___ftmul@exp,f,c
 10372  0024D4  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
 10373  0024D8  502C               	movf	___ftmul@f2+2,w,c
 10374  0024DA  1A35               	xorwf	___ftmul@sign,f,c
 10375  0024DC  0E80               	movlw	128
 10376  0024DE  1635               	andwf	___ftmul@sign,f,c
 10377  0024E0  8E28               	bsf	___ftmul@f1+1,7,c
 10378  0024E2  8E2B               	bsf	___ftmul@f2+1,7,c
 10379  0024E4  0EFF               	movlw	255
 10380  0024E6  162A               	andwf	___ftmul@f2,f,c
 10381  0024E8  0EFF               	movlw	255
 10382  0024EA  162B               	andwf	___ftmul@f2+1,f,c
 10383  0024EC  0E00               	movlw	0
 10384  0024EE  162C               	andwf	___ftmul@f2+2,f,c
 10385  0024F0  0E00               	movlw	0
 10386  0024F2  6E31               	movwf	___ftmul@f3_as_product,c
 10387  0024F4  0E00               	movlw	0
 10388  0024F6  6E32               	movwf	___ftmul@f3_as_product+1,c
 10389  0024F8  0E00               	movlw	0
 10390  0024FA  6E33               	movwf	___ftmul@f3_as_product+2,c
 10391  0024FC  0E07               	movlw	7
 10392  0024FE  6E34               	movwf	___ftmul@cntr,c
 10393  002500  D000               	goto	l5712
 10394  002502                     l5712:
 10395  002502  A027               	btfss	___ftmul@f1,0,c
 10396  002504  D007               	goto	l5716
 10397  002506  502A               	movf	___ftmul@f2,w,c
 10398  002508  2631               	addwf	___ftmul@f3_as_product,f,c
 10399  00250A  502B               	movf	___ftmul@f2+1,w,c
 10400  00250C  2232               	addwfc	___ftmul@f3_as_product+1,f,c
 10401  00250E  502C               	movf	___ftmul@f2+2,w,c
 10402  002510  2233               	addwfc	___ftmul@f3_as_product+2,f,c
 10403  002512  D000               	goto	l5716
 10404  002514                     l5716:
 10405  002514  90D8               	bcf	status,0,c
 10406  002516  3229               	rrcf	___ftmul@f1+2,f,c
 10407  002518  3228               	rrcf	___ftmul@f1+1,f,c
 10408  00251A  3227               	rrcf	___ftmul@f1,f,c
 10409  00251C  90D8               	bcf	status,0,c
 10410  00251E  362A               	rlcf	___ftmul@f2,f,c
 10411  002520  362B               	rlcf	___ftmul@f2+1,f,c
 10412  002522  362C               	rlcf	___ftmul@f2+2,f,c
 10413  002524  2E34               	decfsz	___ftmul@cntr,f,c
 10414  002526  D7ED               	goto	l5712
 10415  002528  D000               	goto	l5720
 10416  00252A                     l5720:
 10417  00252A  0E09               	movlw	9
 10418  00252C  6E34               	movwf	___ftmul@cntr,c
 10419  00252E  D000               	goto	l5722
 10420  002530                     l5722:
 10421  002530  A027               	btfss	___ftmul@f1,0,c
 10422  002532  D007               	goto	l5726
 10423  002534  502A               	movf	___ftmul@f2,w,c
 10424  002536  2631               	addwf	___ftmul@f3_as_product,f,c
 10425  002538  502B               	movf	___ftmul@f2+1,w,c
 10426  00253A  2232               	addwfc	___ftmul@f3_as_product+1,f,c
 10427  00253C  502C               	movf	___ftmul@f2+2,w,c
 10428  00253E  2233               	addwfc	___ftmul@f3_as_product+2,f,c
 10429  002540  D000               	goto	l5726
 10430  002542                     l5726:
 10431  002542  90D8               	bcf	status,0,c
 10432  002544  3229               	rrcf	___ftmul@f1+2,f,c
 10433  002546  3228               	rrcf	___ftmul@f1+1,f,c
 10434  002548  3227               	rrcf	___ftmul@f1,f,c
 10435  00254A  90D8               	bcf	status,0,c
 10436  00254C  3233               	rrcf	___ftmul@f3_as_product+2,f,c
 10437  00254E  3232               	rrcf	___ftmul@f3_as_product+1,f,c
 10438  002550  3231               	rrcf	___ftmul@f3_as_product,f,c
 10439  002552  2E34               	decfsz	___ftmul@cntr,f,c
 10440  002554  D7ED               	goto	l5722
 10441  002556  D000               	goto	l5730
 10442  002558                     l5730:
 10443  002558  C031  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
 10444  00255C  C032  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10445  002560  C033  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10446  002564  C030  F012         	movff	___ftmul@exp,___ftpack@exp
 10447  002568  C035  F013         	movff	___ftmul@sign,___ftpack@sign
 10448  00256C  ECCB  F015         	call	___ftpack	;wreg free
 10449  002570  C00F  F027         	movff	?___ftpack,?___ftmul
 10450  002574  C010  F028         	movff	?___ftpack+1,?___ftmul+1
 10451  002578  C011  F029         	movff	?___ftpack+2,?___ftmul+2
 10452  00257C  D000               	goto	l1132
 10453  00257E                     l1132:
 10454  00257E  0012               	return		;funcret
 10455  002580                     __end_of___ftmul:
 10456                           	opt stack 0
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           prodh	equ	0xFF4
 10462                           prodl	equ	0xFF3
 10463                           intcon	equ	0xFF2
 10464                           intcon2	equ	0xFF1
 10465                           intcon3	equ	0xFF0
 10466                           postinc0	equ	0xFEE
 10467                           wreg	equ	0xFE8
 10468                           postdec1	equ	0xFE5
 10469                           fsr1l	equ	0xFE1
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function ___awmod *****************
 10477 ;; Defined at:
 10478 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  dividend        2   14[COMRAM] int 
 10481 ;;  divisor         2   16[COMRAM] int 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  sign            1   19[COMRAM] unsigned char 
 10484 ;;  counter         1   18[COMRAM] unsigned char 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  2   14[COMRAM] int 
 10487 ;; Registers used:
 10488 ;;		wreg, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10494 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;Total ram usage:        6 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    2
 10501 ;; This function calls:
 10502 ;;		Nothing
 10503 ;; This function is called by:
 10504 ;;		_update_LCD_count
 10505 ;;		_update_LCD_PED_Count
 10506 ;;		_fround
 10507 ;;		_scale
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511                           	psect	text41
 10512  003234                     __ptext41:
 10513                           	opt stack 0
 10514  003234                     ___awmod:
 10515                           	opt stack 25
 10516                           
 10517                           ;incstack = 0
 10518  003234  0E00               	movlw	0
 10519  003236  6E14               	movwf	___awmod@sign,c
 10520  003238  AE10               	btfss	___awmod@dividend+1,7,c
 10521  00323A  D007               	goto	l5786
 10522  00323C  6C0F               	negf	___awmod@dividend,c
 10523  00323E  1E10               	comf	___awmod@dividend+1,f,c
 10524  003240  B0D8               	btfsc	status,0,c
 10525  003242  2A10               	incf	___awmod@dividend+1,f,c
 10526  003244  0E01               	movlw	1
 10527  003246  6E14               	movwf	___awmod@sign,c
 10528  003248  D000               	goto	l5786
 10529  00324A                     l5786:
 10530  00324A  AE12               	btfss	___awmod@divisor+1,7,c
 10531  00324C  D005               	goto	l5790
 10532  00324E  6C11               	negf	___awmod@divisor,c
 10533  003250  1E12               	comf	___awmod@divisor+1,f,c
 10534  003252  B0D8               	btfsc	status,0,c
 10535  003254  2A12               	incf	___awmod@divisor+1,f,c
 10536  003256  D000               	goto	l5790
 10537  003258                     l5790:
 10538  003258  5011               	movf	___awmod@divisor,w,c
 10539  00325A  1012               	iorwf	___awmod@divisor+1,w,c
 10540  00325C  B4D8               	btfsc	status,2,c
 10541  00325E  D01D               	goto	l5806
 10542  003260  0E01               	movlw	1
 10543  003262  6E13               	movwf	___awmod@counter,c
 10544  003264  D005               	goto	l5796
 10545  003266                     l5794:
 10546  003266  90D8               	bcf	status,0,c
 10547  003268  3611               	rlcf	___awmod@divisor,f,c
 10548  00326A  3612               	rlcf	___awmod@divisor+1,f,c
 10549  00326C  2A13               	incf	___awmod@counter,f,c
 10550  00326E  D000               	goto	l5796
 10551  003270                     l5796:
 10552  003270  BE12               	btfsc	___awmod@divisor+1,7,c
 10553  003272  D002               	goto	l5798
 10554  003274  D7F8               	goto	l5794
 10555  003276  D000               	goto	l5798
 10556  003278                     l5798:
 10557  003278  5011               	movf	___awmod@divisor,w,c
 10558  00327A  5C0F               	subwf	___awmod@dividend,w,c
 10559  00327C  5012               	movf	___awmod@divisor+1,w,c
 10560  00327E  5810               	subwfb	___awmod@dividend+1,w,c
 10561  003280  A0D8               	btfss	status,0,c
 10562  003282  D005               	goto	l5802
 10563  003284  5011               	movf	___awmod@divisor,w,c
 10564  003286  5E0F               	subwf	___awmod@dividend,f,c
 10565  003288  5012               	movf	___awmod@divisor+1,w,c
 10566  00328A  5A10               	subwfb	___awmod@dividend+1,f,c
 10567  00328C  D000               	goto	l5802
 10568  00328E                     l5802:
 10569  00328E  90D8               	bcf	status,0,c
 10570  003290  3212               	rrcf	___awmod@divisor+1,f,c
 10571  003292  3211               	rrcf	___awmod@divisor,f,c
 10572  003294  2E13               	decfsz	___awmod@counter,f,c
 10573  003296  D7F0               	goto	l5798
 10574  003298  D000               	goto	l5806
 10575  00329A                     l5806:
 10576  00329A  5014               	movf	___awmod@sign,w,c
 10577  00329C  B4D8               	btfsc	status,2,c
 10578  00329E  D005               	goto	l5810
 10579  0032A0  6C0F               	negf	___awmod@dividend,c
 10580  0032A2  1E10               	comf	___awmod@dividend+1,f,c
 10581  0032A4  B0D8               	btfsc	status,0,c
 10582  0032A6  2A10               	incf	___awmod@dividend+1,f,c
 10583  0032A8  D000               	goto	l5810
 10584  0032AA                     l5810:
 10585  0032AA  C00F  F00F         	movff	___awmod@dividend,?___awmod
 10586  0032AE  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 10587  0032B2  D000               	goto	l909
 10588  0032B4                     l909:
 10589  0032B4  0012               	return		;funcret
 10590  0032B6                     __end_of___awmod:
 10591                           	opt stack 0
 10592                           tblptru	equ	0xFF8
 10593                           tblptrh	equ	0xFF7
 10594                           tblptrl	equ	0xFF6
 10595                           tablat	equ	0xFF5
 10596                           prodh	equ	0xFF4
 10597                           prodl	equ	0xFF3
 10598                           intcon	equ	0xFF2
 10599                           intcon2	equ	0xFF1
 10600                           intcon3	equ	0xFF0
 10601                           postinc0	equ	0xFEE
 10602                           wreg	equ	0xFE8
 10603                           postdec1	equ	0xFE5
 10604                           fsr1l	equ	0xFE1
 10605                           postinc2	equ	0xFDE
 10606                           postdec2	equ	0xFDD
 10607                           fsr2h	equ	0xFDA
 10608                           fsr2l	equ	0xFD9
 10609                           status	equ	0xFD8
 10610                           
 10611 ;; *************** function ___awdiv *****************
 10612 ;; Defined at:
 10613 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;  dividend        2   20[COMRAM] int 
 10616 ;;  divisor         2   22[COMRAM] int 
 10617 ;; Auto vars:     Size  Location     Type
 10618 ;;  quotient        2   26[COMRAM] int 
 10619 ;;  sign            1   25[COMRAM] unsigned char 
 10620 ;;  counter         1   24[COMRAM] unsigned char 
 10621 ;; Return value:  Size  Location     Type
 10622 ;;                  2   20[COMRAM] int 
 10623 ;; Registers used:
 10624 ;;		wreg, status,2, status,0
 10625 ;; Tracked objects:
 10626 ;;		On entry : 0/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10630 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;Total ram usage:        8 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; Hardware stack levels required when called:    2
 10637 ;; This function calls:
 10638 ;;		Nothing
 10639 ;; This function is called by:
 10640 ;;		_update_LCD_count
 10641 ;;		_update_LCD_PED_Count
 10642 ;;		_fround
 10643 ;;		_scale
 10644 ;;		_printf
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           	psect	text42
 10649  002DDA                     __ptext42:
 10650                           	opt stack 0
 10651  002DDA                     ___awdiv:
 10652                           	opt stack 25
 10653                           
 10654                           ;incstack = 0
 10655  002DDA  0E00               	movlw	0
 10656  002DDC  6E1A               	movwf	___awdiv@sign,c
 10657  002DDE  AE18               	btfss	___awdiv@divisor+1,7,c
 10658  002DE0  D007               	goto	l5742
 10659  002DE2  6C17               	negf	___awdiv@divisor,c
 10660  002DE4  1E18               	comf	___awdiv@divisor+1,f,c
 10661  002DE6  B0D8               	btfsc	status,0,c
 10662  002DE8  2A18               	incf	___awdiv@divisor+1,f,c
 10663  002DEA  0E01               	movlw	1
 10664  002DEC  6E1A               	movwf	___awdiv@sign,c
 10665  002DEE  D000               	goto	l5742
 10666  002DF0                     l5742:
 10667  002DF0  AE16               	btfss	___awdiv@dividend+1,7,c
 10668  002DF2  D007               	goto	l5748
 10669  002DF4  6C15               	negf	___awdiv@dividend,c
 10670  002DF6  1E16               	comf	___awdiv@dividend+1,f,c
 10671  002DF8  B0D8               	btfsc	status,0,c
 10672  002DFA  2A16               	incf	___awdiv@dividend+1,f,c
 10673  002DFC  0E01               	movlw	1
 10674  002DFE  1A1A               	xorwf	___awdiv@sign,f,c
 10675  002E00  D000               	goto	l5748
 10676  002E02                     l5748:
 10677  002E02  0E00               	movlw	0
 10678  002E04  6E1C               	movwf	___awdiv@quotient+1,c
 10679  002E06  0E00               	movlw	0
 10680  002E08  6E1B               	movwf	___awdiv@quotient,c
 10681  002E0A  5017               	movf	___awdiv@divisor,w,c
 10682  002E0C  1018               	iorwf	___awdiv@divisor+1,w,c
 10683  002E0E  B4D8               	btfsc	status,2,c
 10684  002E10  D021               	goto	l5770
 10685  002E12  0E01               	movlw	1
 10686  002E14  6E19               	movwf	___awdiv@counter,c
 10687  002E16  D005               	goto	l5756
 10688  002E18                     l5754:
 10689  002E18  90D8               	bcf	status,0,c
 10690  002E1A  3617               	rlcf	___awdiv@divisor,f,c
 10691  002E1C  3618               	rlcf	___awdiv@divisor+1,f,c
 10692  002E1E  2A19               	incf	___awdiv@counter,f,c
 10693  002E20  D000               	goto	l5756
 10694  002E22                     l5756:
 10695  002E22  BE18               	btfsc	___awdiv@divisor+1,7,c
 10696  002E24  D002               	goto	l5758
 10697  002E26  D7F8               	goto	l5754
 10698  002E28  D000               	goto	l5758
 10699  002E2A                     l5758:
 10700  002E2A  90D8               	bcf	status,0,c
 10701  002E2C  361B               	rlcf	___awdiv@quotient,f,c
 10702  002E2E  361C               	rlcf	___awdiv@quotient+1,f,c
 10703  002E30  5017               	movf	___awdiv@divisor,w,c
 10704  002E32  5C15               	subwf	___awdiv@dividend,w,c
 10705  002E34  5018               	movf	___awdiv@divisor+1,w,c
 10706  002E36  5816               	subwfb	___awdiv@dividend+1,w,c
 10707  002E38  A0D8               	btfss	status,0,c
 10708  002E3A  D006               	goto	l5766
 10709  002E3C  5017               	movf	___awdiv@divisor,w,c
 10710  002E3E  5E15               	subwf	___awdiv@dividend,f,c
 10711  002E40  5018               	movf	___awdiv@divisor+1,w,c
 10712  002E42  5A16               	subwfb	___awdiv@dividend+1,f,c
 10713  002E44  801B               	bsf	___awdiv@quotient,0,c
 10714  002E46  D000               	goto	l5766
 10715  002E48                     l5766:
 10716  002E48  90D8               	bcf	status,0,c
 10717  002E4A  3218               	rrcf	___awdiv@divisor+1,f,c
 10718  002E4C  3217               	rrcf	___awdiv@divisor,f,c
 10719  002E4E  2E19               	decfsz	___awdiv@counter,f,c
 10720  002E50  D7EC               	goto	l5758
 10721  002E52  D000               	goto	l5770
 10722  002E54                     l5770:
 10723  002E54  501A               	movf	___awdiv@sign,w,c
 10724  002E56  B4D8               	btfsc	status,2,c
 10725  002E58  D005               	goto	l5774
 10726  002E5A  6C1B               	negf	___awdiv@quotient,c
 10727  002E5C  1E1C               	comf	___awdiv@quotient+1,f,c
 10728  002E5E  B0D8               	btfsc	status,0,c
 10729  002E60  2A1C               	incf	___awdiv@quotient+1,f,c
 10730  002E62  D000               	goto	l5774
 10731  002E64                     l5774:
 10732  002E64  C01B  F015         	movff	___awdiv@quotient,?___awdiv
 10733  002E68  C01C  F016         	movff	___awdiv@quotient+1,?___awdiv+1
 10734  002E6C  D000               	goto	l896
 10735  002E6E                     l896:
 10736  002E6E  0012               	return		;funcret
 10737  002E70                     __end_of___awdiv:
 10738                           	opt stack 0
 10739                           tblptru	equ	0xFF8
 10740                           tblptrh	equ	0xFF7
 10741                           tblptrl	equ	0xFF6
 10742                           tablat	equ	0xFF5
 10743                           prodh	equ	0xFF4
 10744                           prodl	equ	0xFF3
 10745                           intcon	equ	0xFF2
 10746                           intcon2	equ	0xFF1
 10747                           intcon3	equ	0xFF0
 10748                           postinc0	equ	0xFEE
 10749                           wreg	equ	0xFE8
 10750                           postdec1	equ	0xFE5
 10751                           fsr1l	equ	0xFE1
 10752                           postinc2	equ	0xFDE
 10753                           postdec2	equ	0xFDD
 10754                           fsr2h	equ	0xFDA
 10755                           fsr2l	equ	0xFD9
 10756                           status	equ	0xFD8
 10757                           
 10758 ;; *************** function __tdiv_to_l_ *****************
 10759 ;; Defined at:
 10760 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;  f1              3   14[COMRAM] float 
 10763 ;;  f2              3   17[COMRAM] float 
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;  quot            4   23[COMRAM] unsigned long 
 10766 ;;  exp1            1   28[COMRAM] unsigned char 
 10767 ;;  cntr            1   27[COMRAM] unsigned char 
 10768 ;; Return value:  Size  Location     Type
 10769 ;;                  4   14[COMRAM] unsigned long 
 10770 ;; Registers used:
 10771 ;;		wreg, status,2, status,0
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10777 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;Total ram usage:       15 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; Hardware stack levels required when called:    2
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		_printf
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text43
 10792  00226E                     __ptext43:
 10793                           	opt stack 0
 10794  00226E                     __tdiv_to_l_:
 10795                           	opt stack 23
 10796                           
 10797                           ;incstack = 0
 10798  00226E  C011  F015         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10799  002272  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10800  002274  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10801  002276  3410               	rlcf	__tdiv_to_l_@f1+1,w,c
 10802  002278  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10803  00227A  E301               	bnc	u5411
 10804  00227C  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10805  00227E                     u5411:
 10806  00227E  5015               	movf	??__tdiv_to_l_,w,c
 10807  002280  6E1D               	movwf	__tdiv_to_l_@exp1,c
 10808  002282  501D               	movf	__tdiv_to_l_@exp1,w,c
 10809  002284  A4D8               	btfss	status,2,c
 10810  002286  D002               	goto	l5948
 10811  002288  D05D               	goto	l5990
 10812  00228A  D078               	goto	l1108
 10813  00228C                     l5948:
 10814  00228C  C014  F015         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10815  002290  6A16               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10816  002292  6A17               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10817  002294  3413               	rlcf	__tdiv_to_l_@f2+1,w,c
 10818  002296  3615               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10819  002298  E301               	bnc	u5431
 10820  00229A  8016               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10821  00229C                     u5431:
 10822  00229C  5015               	movf	??__tdiv_to_l_,w,c
 10823  00229E  6E1C               	movwf	__tdiv_to_l_@cntr,c
 10824  0022A0  501C               	movf	__tdiv_to_l_@cntr,w,c
 10825  0022A2  A4D8               	btfss	status,2,c
 10826  0022A4  D002               	goto	l5954
 10827  0022A6  D04E               	goto	l5990
 10828  0022A8  D069               	goto	l1108
 10829  0022AA                     l5954:
 10830  0022AA  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
 10831  0022AC  0EFF               	movlw	255
 10832  0022AE  160F               	andwf	__tdiv_to_l_@f1,f,c
 10833  0022B0  0EFF               	movlw	255
 10834  0022B2  1610               	andwf	__tdiv_to_l_@f1+1,f,c
 10835  0022B4  0E00               	movlw	0
 10836  0022B6  1611               	andwf	__tdiv_to_l_@f1+2,f,c
 10837  0022B8  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
 10838  0022BA  0EFF               	movlw	255
 10839  0022BC  1612               	andwf	__tdiv_to_l_@f2,f,c
 10840  0022BE  0EFF               	movlw	255
 10841  0022C0  1613               	andwf	__tdiv_to_l_@f2+1,f,c
 10842  0022C2  0E00               	movlw	0
 10843  0022C4  1614               	andwf	__tdiv_to_l_@f2+2,f,c
 10844  0022C6  0E00               	movlw	0
 10845  0022C8  6E18               	movwf	__tdiv_to_l_@quot,c
 10846  0022CA  0E00               	movlw	0
 10847  0022CC  6E19               	movwf	__tdiv_to_l_@quot+1,c
 10848  0022CE  0E00               	movlw	0
 10849  0022D0  6E1A               	movwf	__tdiv_to_l_@quot+2,c
 10850  0022D2  0E00               	movlw	0
 10851  0022D4  6E1B               	movwf	__tdiv_to_l_@quot+3,c
 10852  0022D6  0E7F               	movlw	127
 10853  0022D8  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
 10854  0022DA  501C               	movf	__tdiv_to_l_@cntr,w,c
 10855  0022DC  0F98               	addlw	152
 10856  0022DE  5E1D               	subwf	__tdiv_to_l_@exp1,f,c
 10857  0022E0  0E18               	movlw	24
 10858  0022E2  6E1C               	movwf	__tdiv_to_l_@cntr,c
 10859  0022E4                     l1110:
 10860  0022E4  90D8               	bcf	status,0,c
 10861  0022E6  3618               	rlcf	__tdiv_to_l_@quot,f,c
 10862  0022E8  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
 10863  0022EA  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
 10864  0022EC  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
 10865  0022EE  5012               	movf	__tdiv_to_l_@f2,w,c
 10866  0022F0  5C0F               	subwf	__tdiv_to_l_@f1,w,c
 10867  0022F2  5013               	movf	__tdiv_to_l_@f2+1,w,c
 10868  0022F4  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
 10869  0022F6  5014               	movf	__tdiv_to_l_@f2+2,w,c
 10870  0022F8  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
 10871  0022FA  A0D8               	btfss	status,0,c
 10872  0022FC  D007               	goto	l1111
 10873  0022FE  5012               	movf	__tdiv_to_l_@f2,w,c
 10874  002300  5E0F               	subwf	__tdiv_to_l_@f1,f,c
 10875  002302  5013               	movf	__tdiv_to_l_@f2+1,w,c
 10876  002304  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
 10877  002306  5014               	movf	__tdiv_to_l_@f2+2,w,c
 10878  002308  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
 10879  00230A  8018               	bsf	__tdiv_to_l_@quot,0,c
 10880  00230C                     l1111:
 10881  00230C  90D8               	bcf	status,0,c
 10882  00230E  360F               	rlcf	__tdiv_to_l_@f1,f,c
 10883  002310  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
 10884  002312  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
 10885  002314  2E1C               	decfsz	__tdiv_to_l_@cntr,f,c
 10886  002316  D7E6               	goto	l1110
 10887  002318  D000               	goto	l5976
 10888  00231A                     l5976:
 10889  00231A  AE1D               	btfss	__tdiv_to_l_@exp1,7,c
 10890  00231C  D010               	goto	l5988
 10891  00231E  501D               	movf	__tdiv_to_l_@exp1,w,c
 10892  002320  0A80               	xorlw	128
 10893  002322  0F97               	addlw	151
 10894  002324  B0D8               	btfsc	status,0,c
 10895  002326  D003               	goto	l5984
 10896  002328  D00D               	goto	l5990
 10897  00232A  D028               	goto	l1108
 10898  00232C  D000               	goto	l5984
 10899  00232E                     l5984:
 10900  00232E  90D8               	bcf	status,0,c
 10901  002330  321B               	rrcf	__tdiv_to_l_@quot+3,f,c
 10902  002332  321A               	rrcf	__tdiv_to_l_@quot+2,f,c
 10903  002334  3219               	rrcf	__tdiv_to_l_@quot+1,f,c
 10904  002336  3218               	rrcf	__tdiv_to_l_@quot,f,c
 10905  002338  3E1D               	incfsz	__tdiv_to_l_@exp1,f,c
 10906  00233A  D7F9               	goto	l5984
 10907  00233C  D017               	goto	l1117
 10908  00233E                     l5988:
 10909  00233E  0E17               	movlw	23
 10910  002340  641D               	cpfsgt	__tdiv_to_l_@exp1,c
 10911  002342  D011               	goto	l5996
 10912  002344                     l5990:
 10913  002344  0E00               	movlw	0
 10914  002346  6E0F               	movwf	?__tdiv_to_l_,c
 10915  002348  0E00               	movlw	0
 10916  00234A  6E10               	movwf	?__tdiv_to_l_+1,c
 10917  00234C  0E00               	movlw	0
 10918  00234E  6E11               	movwf	?__tdiv_to_l_+2,c
 10919  002350  0E00               	movlw	0
 10920  002352  6E12               	movwf	?__tdiv_to_l_+3,c
 10921  002354  D013               	goto	l1108
 10922  002356  D007               	goto	l5996
 10923  002358                     l5994:
 10924  002358  90D8               	bcf	status,0,c
 10925  00235A  3618               	rlcf	__tdiv_to_l_@quot,f,c
 10926  00235C  3619               	rlcf	__tdiv_to_l_@quot+1,f,c
 10927  00235E  361A               	rlcf	__tdiv_to_l_@quot+2,f,c
 10928  002360  361B               	rlcf	__tdiv_to_l_@quot+3,f,c
 10929  002362  061D               	decf	__tdiv_to_l_@exp1,f,c
 10930  002364  D000               	goto	l5996
 10931  002366                     l5996:
 10932  002366  501D               	movf	__tdiv_to_l_@exp1,w,c
 10933  002368  A4D8               	btfss	status,2,c
 10934  00236A  D7F6               	goto	l5994
 10935  00236C                     l1117:
 10936  00236C  C018  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10937  002370  C019  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10938  002374  C01A  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10939  002378  C01B  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10940  00237C                     l1108:
 10941  00237C  0012               	return		;funcret
 10942  00237E                     __end_of__tdiv_to_l_:
 10943                           	opt stack 0
 10944                           tblptru	equ	0xFF8
 10945                           tblptrh	equ	0xFF7
 10946                           tblptrl	equ	0xFF6
 10947                           tablat	equ	0xFF5
 10948                           prodh	equ	0xFF4
 10949                           prodl	equ	0xFF3
 10950                           intcon	equ	0xFF2
 10951                           intcon2	equ	0xFF1
 10952                           intcon3	equ	0xFF0
 10953                           postinc0	equ	0xFEE
 10954                           wreg	equ	0xFE8
 10955                           postdec1	equ	0xFE5
 10956                           fsr1l	equ	0xFE1
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function __div_to_l_ *****************
 10964 ;; Defined at:
 10965 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;  f1              3   14[COMRAM] unsigned long 
 10968 ;;  f2              3   17[COMRAM] unsigned long 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;  quot            4   20[COMRAM] unsigned long 
 10971 ;;  exp1            1   25[COMRAM] unsigned char 
 10972 ;;  cntr            1   24[COMRAM] unsigned char 
 10973 ;; Return value:  Size  Location     Type
 10974 ;;                  4   14[COMRAM] unsigned long 
 10975 ;; Registers used:
 10976 ;;		wreg, status,2, status,0
 10977 ;; Tracked objects:
 10978 ;;		On entry : 0/0
 10979 ;;		On exit  : 0/0
 10980 ;;		Unchanged: 0/0
 10981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10982 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;Total ram usage:       12 bytes
 10987 ;; Hardware stack levels used:    1
 10988 ;; Hardware stack levels required when called:    2
 10989 ;; This function calls:
 10990 ;;		Nothing
 10991 ;; This function is called by:
 10992 ;;		_printf
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           	psect	text44
 10997  00237E                     __ptext44:
 10998                           	opt stack 0
 10999  00237E                     __div_to_l_:
 11000                           	opt stack 23
 11001                           
 11002                           ;incstack = 0
 11003  00237E  3411               	rlcf	__div_to_l_@f1+2,w,c
 11004  002380  3412               	rlcf	__div_to_l_@f1+3,w,c
 11005  002382  6E1A               	movwf	__div_to_l_@exp1,c
 11006  002384  501A               	movf	__div_to_l_@exp1,w,c
 11007  002386  A4D8               	btfss	status,2,c
 11008  002388  D002               	goto	l6004
 11009  00238A  D061               	goto	l6050
 11010  00238C  D07C               	goto	l987
 11011  00238E                     l6004:
 11012  00238E  3414               	rlcf	__div_to_l_@f2+2,w,c
 11013  002390  3415               	rlcf	__div_to_l_@f2+3,w,c
 11014  002392  6E19               	movwf	__div_to_l_@cntr,c
 11015  002394  5019               	movf	__div_to_l_@cntr,w,c
 11016  002396  A4D8               	btfss	status,2,c
 11017  002398  D002               	goto	l6010
 11018  00239A  D059               	goto	l6050
 11019  00239C  D074               	goto	l987
 11020  00239E                     l6010:
 11021  00239E  8E11               	bsf	__div_to_l_@f1+2,7,c
 11022  0023A0  0EFF               	movlw	255
 11023  0023A2  160F               	andwf	__div_to_l_@f1,f,c
 11024  0023A4  0EFF               	movlw	255
 11025  0023A6  1610               	andwf	__div_to_l_@f1+1,f,c
 11026  0023A8  0EFF               	movlw	255
 11027  0023AA  1611               	andwf	__div_to_l_@f1+2,f,c
 11028  0023AC  0E00               	movlw	0
 11029  0023AE  1612               	andwf	__div_to_l_@f1+3,f,c
 11030  0023B0  8E14               	bsf	__div_to_l_@f2+2,7,c
 11031  0023B2  0EFF               	movlw	255
 11032  0023B4  1612               	andwf	__div_to_l_@f2,f,c
 11033  0023B6  0EFF               	movlw	255
 11034  0023B8  1613               	andwf	__div_to_l_@f2+1,f,c
 11035  0023BA  0EFF               	movlw	255
 11036  0023BC  1614               	andwf	__div_to_l_@f2+2,f,c
 11037  0023BE  0E00               	movlw	0
 11038  0023C0  1615               	andwf	__div_to_l_@f2+3,f,c
 11039  0023C2  0E00               	movlw	0
 11040  0023C4  6E15               	movwf	__div_to_l_@quot,c
 11041  0023C6  0E00               	movlw	0
 11042  0023C8  6E16               	movwf	__div_to_l_@quot+1,c
 11043  0023CA  0E00               	movlw	0
 11044  0023CC  6E17               	movwf	__div_to_l_@quot+2,c
 11045  0023CE  0E00               	movlw	0
 11046  0023D0  6E18               	movwf	__div_to_l_@quot+3,c
 11047  0023D2  0E7F               	movlw	127
 11048  0023D4  5E1A               	subwf	__div_to_l_@exp1,f,c
 11049  0023D6  5019               	movf	__div_to_l_@cntr,w,c
 11050  0023D8  0FA0               	addlw	160
 11051  0023DA  5E1A               	subwf	__div_to_l_@exp1,f,c
 11052  0023DC  0E20               	movlw	32
 11053  0023DE  6E19               	movwf	__div_to_l_@cntr,c
 11054  0023E0  D000               	goto	l6024
 11055  0023E2                     l6024:
 11056  0023E2  90D8               	bcf	status,0,c
 11057  0023E4  3615               	rlcf	__div_to_l_@quot,f,c
 11058  0023E6  3616               	rlcf	__div_to_l_@quot+1,f,c
 11059  0023E8  3617               	rlcf	__div_to_l_@quot+2,f,c
 11060  0023EA  3618               	rlcf	__div_to_l_@quot+3,f,c
 11061  0023EC  5012               	movf	__div_to_l_@f2,w,c
 11062  0023EE  5C0F               	subwf	__div_to_l_@f1,w,c
 11063  0023F0  5013               	movf	__div_to_l_@f2+1,w,c
 11064  0023F2  5810               	subwfb	__div_to_l_@f1+1,w,c
 11065  0023F4  5014               	movf	__div_to_l_@f2+2,w,c
 11066  0023F6  5811               	subwfb	__div_to_l_@f1+2,w,c
 11067  0023F8  5015               	movf	__div_to_l_@f2+3,w,c
 11068  0023FA  5812               	subwfb	__div_to_l_@f1+3,w,c
 11069  0023FC  A0D8               	btfss	status,0,c
 11070  0023FE  D00A               	goto	l6032
 11071  002400  5012               	movf	__div_to_l_@f2,w,c
 11072  002402  5E0F               	subwf	__div_to_l_@f1,f,c
 11073  002404  5013               	movf	__div_to_l_@f2+1,w,c
 11074  002406  5A10               	subwfb	__div_to_l_@f1+1,f,c
 11075  002408  5014               	movf	__div_to_l_@f2+2,w,c
 11076  00240A  5A11               	subwfb	__div_to_l_@f1+2,f,c
 11077  00240C  5015               	movf	__div_to_l_@f2+3,w,c
 11078  00240E  5A12               	subwfb	__div_to_l_@f1+3,f,c
 11079  002410  8015               	bsf	__div_to_l_@quot,0,c
 11080  002412  D000               	goto	l6032
 11081  002414                     l6032:
 11082  002414  90D8               	bcf	status,0,c
 11083  002416  360F               	rlcf	__div_to_l_@f1,f,c
 11084  002418  3610               	rlcf	__div_to_l_@f1+1,f,c
 11085  00241A  3611               	rlcf	__div_to_l_@f1+2,f,c
 11086  00241C  3612               	rlcf	__div_to_l_@f1+3,f,c
 11087  00241E  2E19               	decfsz	__div_to_l_@cntr,f,c
 11088  002420  D7E0               	goto	l6024
 11089  002422  D000               	goto	l6036
 11090  002424                     l6036:
 11091  002424  AE1A               	btfss	__div_to_l_@exp1,7,c
 11092  002426  D010               	goto	l6048
 11093  002428  501A               	movf	__div_to_l_@exp1,w,c
 11094  00242A  0A80               	xorlw	128
 11095  00242C  0F9F               	addlw	159
 11096  00242E  B0D8               	btfsc	status,0,c
 11097  002430  D003               	goto	l6044
 11098  002432  D00D               	goto	l6050
 11099  002434  D028               	goto	l987
 11100  002436  D000               	goto	l6044
 11101  002438                     l6044:
 11102  002438  90D8               	bcf	status,0,c
 11103  00243A  3218               	rrcf	__div_to_l_@quot+3,f,c
 11104  00243C  3217               	rrcf	__div_to_l_@quot+2,f,c
 11105  00243E  3216               	rrcf	__div_to_l_@quot+1,f,c
 11106  002440  3215               	rrcf	__div_to_l_@quot,f,c
 11107  002442  3E1A               	incfsz	__div_to_l_@exp1,f,c
 11108  002444  D7F9               	goto	l6044
 11109  002446  D017               	goto	l996
 11110  002448                     l6048:
 11111  002448  0E1F               	movlw	31
 11112  00244A  641A               	cpfsgt	__div_to_l_@exp1,c
 11113  00244C  D011               	goto	l6056
 11114  00244E                     l6050:
 11115  00244E  0E00               	movlw	0
 11116  002450  6E0F               	movwf	?__div_to_l_,c
 11117  002452  0E00               	movlw	0
 11118  002454  6E10               	movwf	?__div_to_l_+1,c
 11119  002456  0E00               	movlw	0
 11120  002458  6E11               	movwf	?__div_to_l_+2,c
 11121  00245A  0E00               	movlw	0
 11122  00245C  6E12               	movwf	?__div_to_l_+3,c
 11123  00245E  D013               	goto	l987
 11124  002460  D007               	goto	l6056
 11125  002462                     l6054:
 11126  002462  90D8               	bcf	status,0,c
 11127  002464  3615               	rlcf	__div_to_l_@quot,f,c
 11128  002466  3616               	rlcf	__div_to_l_@quot+1,f,c
 11129  002468  3617               	rlcf	__div_to_l_@quot+2,f,c
 11130  00246A  3618               	rlcf	__div_to_l_@quot+3,f,c
 11131  00246C  061A               	decf	__div_to_l_@exp1,f,c
 11132  00246E  D000               	goto	l6056
 11133  002470                     l6056:
 11134  002470  501A               	movf	__div_to_l_@exp1,w,c
 11135  002472  A4D8               	btfss	status,2,c
 11136  002474  D7F6               	goto	l6054
 11137  002476                     l996:
 11138  002476  C015  F00F         	movff	__div_to_l_@quot,?__div_to_l_
 11139  00247A  C016  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 11140  00247E  C017  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 11141  002482  C018  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 11142  002486                     l987:
 11143  002486  0012               	return		;funcret
 11144  002488                     __end_of__div_to_l_:
 11145                           	opt stack 0
 11146                           tblptru	equ	0xFF8
 11147                           tblptrh	equ	0xFF7
 11148                           tblptrl	equ	0xFF6
 11149                           tablat	equ	0xFF5
 11150                           prodh	equ	0xFF4
 11151                           prodl	equ	0xFF3
 11152                           intcon	equ	0xFF2
 11153                           intcon2	equ	0xFF1
 11154                           intcon3	equ	0xFF0
 11155                           postinc0	equ	0xFEE
 11156                           wreg	equ	0xFE8
 11157                           postdec1	equ	0xFE5
 11158                           fsr1l	equ	0xFE1
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           fsr2h	equ	0xFDA
 11162                           fsr2l	equ	0xFD9
 11163                           status	equ	0xFD8
 11164                           
 11165 ;; *************** function ___lltoft *****************
 11166 ;; Defined at:
 11167 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  c               4   22[COMRAM] unsigned long 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  exp             1   30[COMRAM] unsigned char 
 11172 ;; Return value:  Size  Location     Type
 11173 ;;                  3   22[COMRAM] float 
 11174 ;; Registers used:
 11175 ;;		wreg, status,2, status,0, cstack
 11176 ;; Tracked objects:
 11177 ;;		On entry : 0/0
 11178 ;;		On exit  : 0/0
 11179 ;;		Unchanged: 0/0
 11180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11181 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11183 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;Total ram usage:        9 bytes
 11186 ;; Hardware stack levels used:    1
 11187 ;; Hardware stack levels required when called:    3
 11188 ;; This function calls:
 11189 ;;		___ftpack
 11190 ;; This function is called by:
 11191 ;;		_printf
 11192 ;; This function uses a non-reentrant model
 11193 ;;
 11194                           
 11195                           	psect	text45
 11196  0033FC                     __ptext45:
 11197                           	opt stack 0
 11198  0033FC                     ___lltoft:
 11199                           	opt stack 22
 11200                           
 11201                           ;incstack = 0
 11202  0033FC  0E8E               	movlw	142
 11203  0033FE  6E1F               	movwf	___lltoft@exp,c
 11204  003400  D007               	goto	l6176
 11205  003402                     l6174:
 11206  003402  90D8               	bcf	status,0,c
 11207  003404  321A               	rrcf	___lltoft@c+3,f,c
 11208  003406  3219               	rrcf	___lltoft@c+2,f,c
 11209  003408  3218               	rrcf	___lltoft@c+1,f,c
 11210  00340A  3217               	rrcf	___lltoft@c,f,c
 11211  00340C  2A1F               	incf	___lltoft@exp,f,c
 11212  00340E  D000               	goto	l6176
 11213  003410                     l6176:
 11214  003410  0E00               	movlw	0
 11215  003412  1417               	andwf	___lltoft@c,w,c
 11216  003414  6E1B               	movwf	??___lltoft& (0+255),c
 11217  003416  0E00               	movlw	0
 11218  003418  1418               	andwf	___lltoft@c+1,w,c
 11219  00341A  6E1C               	movwf	(??___lltoft+1)& (0+255),c
 11220  00341C  0E00               	movlw	0
 11221  00341E  1419               	andwf	___lltoft@c+2,w,c
 11222  003420  6E1D               	movwf	(??___lltoft+2)& (0+255),c
 11223  003422  0EFF               	movlw	255
 11224  003424  141A               	andwf	___lltoft@c+3,w,c
 11225  003426  6E1E               	movwf	(??___lltoft+3)& (0+255),c
 11226  003428  501B               	movf	??___lltoft,w,c
 11227  00342A  101C               	iorwf	??___lltoft+1,w,c
 11228  00342C  101D               	iorwf	??___lltoft+2,w,c
 11229  00342E  101E               	iorwf	??___lltoft+3,w,c
 11230  003430  A4D8               	btfss	status,2,c
 11231  003432  D7E7               	goto	l6174
 11232  003434  C017  F00F         	movff	___lltoft@c,___ftpack@arg
 11233  003438  C018  F010         	movff	___lltoft@c+1,___ftpack@arg+1
 11234  00343C  C019  F011         	movff	___lltoft@c+2,___ftpack@arg+2
 11235  003440  C01F  F012         	movff	___lltoft@exp,___ftpack@exp
 11236  003444  0E00               	movlw	0
 11237  003446  6E13               	movwf	___ftpack@sign,c
 11238  003448  ECCB  F015         	call	___ftpack	;wreg free
 11239  00344C  C00F  F017         	movff	?___ftpack,?___lltoft
 11240  003450  C010  F018         	movff	?___ftpack+1,?___lltoft+1
 11241  003454  C011  F019         	movff	?___ftpack+2,?___lltoft+2
 11242  003458  D000               	goto	l1222
 11243  00345A                     l1222:
 11244  00345A  0012               	return		;funcret
 11245  00345C                     __end_of___lltoft:
 11246                           	opt stack 0
 11247                           tblptru	equ	0xFF8
 11248                           tblptrh	equ	0xFF7
 11249                           tblptrl	equ	0xFF6
 11250                           tablat	equ	0xFF5
 11251                           prodh	equ	0xFF4
 11252                           prodl	equ	0xFF3
 11253                           intcon	equ	0xFF2
 11254                           intcon2	equ	0xFF1
 11255                           intcon3	equ	0xFF0
 11256                           postinc0	equ	0xFEE
 11257                           wreg	equ	0xFE8
 11258                           postdec1	equ	0xFE5
 11259                           fsr1l	equ	0xFE1
 11260                           postinc2	equ	0xFDE
 11261                           postdec2	equ	0xFDD
 11262                           fsr2h	equ	0xFDA
 11263                           fsr2l	equ	0xFD9
 11264                           status	equ	0xFD8
 11265                           
 11266 ;; *************** function ___llmod *****************
 11267 ;; Defined at:
 11268 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 11269 ;; Parameters:    Size  Location     Type
 11270 ;;  dividend        4   14[COMRAM] unsigned long 
 11271 ;;  divisor         4   18[COMRAM] unsigned long 
 11272 ;; Auto vars:     Size  Location     Type
 11273 ;;  counter         1   22[COMRAM] unsigned char 
 11274 ;; Return value:  Size  Location     Type
 11275 ;;                  4   14[COMRAM] unsigned long 
 11276 ;; Registers used:
 11277 ;;		wreg, status,2, status,0
 11278 ;; Tracked objects:
 11279 ;;		On entry : 0/0
 11280 ;;		On exit  : 0/0
 11281 ;;		Unchanged: 0/0
 11282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11283 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11284 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11286 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11287 ;;Total ram usage:        9 bytes
 11288 ;; Hardware stack levels used:    1
 11289 ;; Hardware stack levels required when called:    2
 11290 ;; This function calls:
 11291 ;;		Nothing
 11292 ;; This function is called by:
 11293 ;;		_printf
 11294 ;; This function uses a non-reentrant model
 11295 ;;
 11296                           
 11297                           	psect	text46
 11298  003326                     __ptext46:
 11299                           	opt stack 0
 11300  003326                     ___llmod:
 11301                           	opt stack 23
 11302                           
 11303                           ;incstack = 0
 11304  003326  5013               	movf	___llmod@divisor,w,c
 11305  003328  1014               	iorwf	___llmod@divisor+1,w,c
 11306  00332A  1015               	iorwf	___llmod@divisor+2,w,c
 11307  00332C  1016               	iorwf	___llmod@divisor+3,w,c
 11308  00332E  B4D8               	btfsc	status,2,c
 11309  003330  D029               	goto	l1202
 11310  003332  0E01               	movlw	1
 11311  003334  6E17               	movwf	___llmod@counter,c
 11312  003336  D007               	goto	l6162
 11313  003338                     l6160:
 11314  003338  90D8               	bcf	status,0,c
 11315  00333A  3613               	rlcf	___llmod@divisor,f,c
 11316  00333C  3614               	rlcf	___llmod@divisor+1,f,c
 11317  00333E  3615               	rlcf	___llmod@divisor+2,f,c
 11318  003340  3616               	rlcf	___llmod@divisor+3,f,c
 11319  003342  2A17               	incf	___llmod@counter,f,c
 11320  003344  D000               	goto	l6162
 11321  003346                     l6162:
 11322  003346  BE16               	btfsc	___llmod@divisor+3,7,c
 11323  003348  D002               	goto	l6164
 11324  00334A  D7F6               	goto	l6160
 11325  00334C  D000               	goto	l6164
 11326  00334E                     l6164:
 11327  00334E  5013               	movf	___llmod@divisor,w,c
 11328  003350  5C0F               	subwf	___llmod@dividend,w,c
 11329  003352  5014               	movf	___llmod@divisor+1,w,c
 11330  003354  5810               	subwfb	___llmod@dividend+1,w,c
 11331  003356  5015               	movf	___llmod@divisor+2,w,c
 11332  003358  5811               	subwfb	___llmod@dividend+2,w,c
 11333  00335A  5016               	movf	___llmod@divisor+3,w,c
 11334  00335C  5812               	subwfb	___llmod@dividend+3,w,c
 11335  00335E  A0D8               	btfss	status,0,c
 11336  003360  D009               	goto	l6168
 11337  003362  5013               	movf	___llmod@divisor,w,c
 11338  003364  5E0F               	subwf	___llmod@dividend,f,c
 11339  003366  5014               	movf	___llmod@divisor+1,w,c
 11340  003368  5A10               	subwfb	___llmod@dividend+1,f,c
 11341  00336A  5015               	movf	___llmod@divisor+2,w,c
 11342  00336C  5A11               	subwfb	___llmod@dividend+2,f,c
 11343  00336E  5016               	movf	___llmod@divisor+3,w,c
 11344  003370  5A12               	subwfb	___llmod@dividend+3,f,c
 11345  003372  D000               	goto	l6168
 11346  003374                     l6168:
 11347  003374  90D8               	bcf	status,0,c
 11348  003376  3216               	rrcf	___llmod@divisor+3,f,c
 11349  003378  3215               	rrcf	___llmod@divisor+2,f,c
 11350  00337A  3214               	rrcf	___llmod@divisor+1,f,c
 11351  00337C  3213               	rrcf	___llmod@divisor,f,c
 11352  00337E  2E17               	decfsz	___llmod@counter,f,c
 11353  003380  D7E6               	goto	l6164
 11354  003382  D000               	goto	l1202
 11355  003384                     l1202:
 11356  003384  C00F  F00F         	movff	___llmod@dividend,?___llmod
 11357  003388  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
 11358  00338C  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
 11359  003390  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
 11360  003394  0012               	return		;funcret
 11361  003396                     __end_of___llmod:
 11362                           	opt stack 0
 11363                           tblptru	equ	0xFF8
 11364                           tblptrh	equ	0xFF7
 11365                           tblptrl	equ	0xFF6
 11366                           tablat	equ	0xFF5
 11367                           prodh	equ	0xFF4
 11368                           prodl	equ	0xFF3
 11369                           intcon	equ	0xFF2
 11370                           intcon2	equ	0xFF1
 11371                           intcon3	equ	0xFF0
 11372                           postinc0	equ	0xFEE
 11373                           wreg	equ	0xFE8
 11374                           postdec1	equ	0xFE5
 11375                           fsr1l	equ	0xFE1
 11376                           postinc2	equ	0xFDE
 11377                           postdec2	equ	0xFDD
 11378                           fsr2h	equ	0xFDA
 11379                           fsr2l	equ	0xFD9
 11380                           status	equ	0xFD8
 11381                           
 11382 ;; *************** function ___lldiv *****************
 11383 ;; Defined at:
 11384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;  dividend        4   14[COMRAM] unsigned long 
 11387 ;;  divisor         4   18[COMRAM] unsigned long 
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  quotient        4   22[COMRAM] unsigned long 
 11390 ;;  counter         1   26[COMRAM] unsigned char 
 11391 ;; Return value:  Size  Location     Type
 11392 ;;                  4   14[COMRAM] unsigned long 
 11393 ;; Registers used:
 11394 ;;		wreg, status,2, status,0
 11395 ;; Tracked objects:
 11396 ;;		On entry : 0/0
 11397 ;;		On exit  : 0/0
 11398 ;;		Unchanged: 0/0
 11399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11400 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11403 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11404 ;;Total ram usage:       13 bytes
 11405 ;; Hardware stack levels used:    1
 11406 ;; Hardware stack levels required when called:    2
 11407 ;; This function calls:
 11408 ;;		Nothing
 11409 ;; This function is called by:
 11410 ;;		_printf
 11411 ;; This function uses a non-reentrant model
 11412 ;;
 11413                           
 11414                           	psect	text47
 11415  002F06                     __ptext47:
 11416                           	opt stack 0
 11417  002F06                     ___lldiv:
 11418                           	opt stack 23
 11419                           
 11420                           ;incstack = 0
 11421  002F06  0E00               	movlw	0
 11422  002F08  6E17               	movwf	___lldiv@quotient,c
 11423  002F0A  0E00               	movlw	0
 11424  002F0C  6E18               	movwf	___lldiv@quotient+1,c
 11425  002F0E  0E00               	movlw	0
 11426  002F10  6E19               	movwf	___lldiv@quotient+2,c
 11427  002F12  0E00               	movlw	0
 11428  002F14  6E1A               	movwf	___lldiv@quotient+3,c
 11429  002F16  5013               	movf	___lldiv@divisor,w,c
 11430  002F18  1014               	iorwf	___lldiv@divisor+1,w,c
 11431  002F1A  1015               	iorwf	___lldiv@divisor+2,w,c
 11432  002F1C  1016               	iorwf	___lldiv@divisor+3,w,c
 11433  002F1E  B4D8               	btfsc	status,2,c
 11434  002F20  D02F               	goto	l1192
 11435  002F22  0E01               	movlw	1
 11436  002F24  6E1B               	movwf	___lldiv@counter,c
 11437  002F26  D007               	goto	l6142
 11438  002F28                     l6140:
 11439  002F28  90D8               	bcf	status,0,c
 11440  002F2A  3613               	rlcf	___lldiv@divisor,f,c
 11441  002F2C  3614               	rlcf	___lldiv@divisor+1,f,c
 11442  002F2E  3615               	rlcf	___lldiv@divisor+2,f,c
 11443  002F30  3616               	rlcf	___lldiv@divisor+3,f,c
 11444  002F32  2A1B               	incf	___lldiv@counter,f,c
 11445  002F34  D000               	goto	l6142
 11446  002F36                     l6142:
 11447  002F36  BE16               	btfsc	___lldiv@divisor+3,7,c
 11448  002F38  D002               	goto	l6144
 11449  002F3A  D7F6               	goto	l6140
 11450  002F3C  D000               	goto	l6144
 11451  002F3E                     l6144:
 11452  002F3E  90D8               	bcf	status,0,c
 11453  002F40  3617               	rlcf	___lldiv@quotient,f,c
 11454  002F42  3618               	rlcf	___lldiv@quotient+1,f,c
 11455  002F44  3619               	rlcf	___lldiv@quotient+2,f,c
 11456  002F46  361A               	rlcf	___lldiv@quotient+3,f,c
 11457  002F48  5013               	movf	___lldiv@divisor,w,c
 11458  002F4A  5C0F               	subwf	___lldiv@dividend,w,c
 11459  002F4C  5014               	movf	___lldiv@divisor+1,w,c
 11460  002F4E  5810               	subwfb	___lldiv@dividend+1,w,c
 11461  002F50  5015               	movf	___lldiv@divisor+2,w,c
 11462  002F52  5811               	subwfb	___lldiv@dividend+2,w,c
 11463  002F54  5016               	movf	___lldiv@divisor+3,w,c
 11464  002F56  5812               	subwfb	___lldiv@dividend+3,w,c
 11465  002F58  A0D8               	btfss	status,0,c
 11466  002F5A  D00A               	goto	l6152
 11467  002F5C  5013               	movf	___lldiv@divisor,w,c
 11468  002F5E  5E0F               	subwf	___lldiv@dividend,f,c
 11469  002F60  5014               	movf	___lldiv@divisor+1,w,c
 11470  002F62  5A10               	subwfb	___lldiv@dividend+1,f,c
 11471  002F64  5015               	movf	___lldiv@divisor+2,w,c
 11472  002F66  5A11               	subwfb	___lldiv@dividend+2,f,c
 11473  002F68  5016               	movf	___lldiv@divisor+3,w,c
 11474  002F6A  5A12               	subwfb	___lldiv@dividend+3,f,c
 11475  002F6C  8017               	bsf	___lldiv@quotient,0,c
 11476  002F6E  D000               	goto	l6152
 11477  002F70                     l6152:
 11478  002F70  90D8               	bcf	status,0,c
 11479  002F72  3216               	rrcf	___lldiv@divisor+3,f,c
 11480  002F74  3215               	rrcf	___lldiv@divisor+2,f,c
 11481  002F76  3214               	rrcf	___lldiv@divisor+1,f,c
 11482  002F78  3213               	rrcf	___lldiv@divisor,f,c
 11483  002F7A  2E1B               	decfsz	___lldiv@counter,f,c
 11484  002F7C  D7E0               	goto	l6144
 11485  002F7E  D000               	goto	l1192
 11486  002F80                     l1192:
 11487  002F80  C017  F00F         	movff	___lldiv@quotient,?___lldiv
 11488  002F84  C018  F010         	movff	___lldiv@quotient+1,?___lldiv+1
 11489  002F88  C019  F011         	movff	___lldiv@quotient+2,?___lldiv+2
 11490  002F8C  C01A  F012         	movff	___lldiv@quotient+3,?___lldiv+3
 11491  002F90  0012               	return		;funcret
 11492  002F92                     __end_of___lldiv:
 11493                           	opt stack 0
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           intcon2	equ	0xFF1
 11502                           intcon3	equ	0xFF0
 11503                           postinc0	equ	0xFEE
 11504                           wreg	equ	0xFE8
 11505                           postdec1	equ	0xFE5
 11506                           fsr1l	equ	0xFE1
 11507                           postinc2	equ	0xFDE
 11508                           postdec2	equ	0xFDD
 11509                           fsr2h	equ	0xFDA
 11510                           fsr2l	equ	0xFD9
 11511                           status	equ	0xFD8
 11512                           
 11513 ;; *************** function ___fttol *****************
 11514 ;; Defined at:
 11515 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 11516 ;; Parameters:    Size  Location     Type
 11517 ;;  f1              3   60[COMRAM] float 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;  lval            4   70[COMRAM] unsigned long 
 11520 ;;  exp1            1   74[COMRAM] unsigned char 
 11521 ;;  sign1           1   69[COMRAM] unsigned char 
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  4   60[COMRAM] long 
 11524 ;; Registers used:
 11525 ;;		wreg, status,2, status,0
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11531 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11534 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;Total ram usage:       15 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    2
 11538 ;; This function calls:
 11539 ;;		Nothing
 11540 ;; This function is called by:
 11541 ;;		_main
 11542 ;;		_printf
 11543 ;; This function uses a non-reentrant model
 11544 ;;
 11545                           
 11546                           	psect	text48
 11547  002672                     __ptext48:
 11548                           	opt stack 0
 11549  002672                     ___fttol:
 11550                           	opt stack 28
 11551                           
 11552                           ;incstack = 0
 11553  002672  C03F  F041         	movff	___fttol@f1+2,??___fttol
 11554  002676  6A42               	clrf	(??___fttol+1)& (0+255),c
 11555  002678  6A43               	clrf	(??___fttol+2)& (0+255),c
 11556  00267A  343E               	rlcf	___fttol@f1+1,w,c
 11557  00267C  3641               	rlcf	??___fttol& (0+255),f,c
 11558  00267E  E301               	bnc	u5621
 11559  002680  8042               	bsf	(??___fttol+1)& (0+255),0,c
 11560  002682                     u5621:
 11561  002682  5041               	movf	??___fttol,w,c
 11562  002684  6E4B               	movwf	___fttol@exp1,c
 11563  002686  504B               	movf	___fttol@exp1,w,c
 11564  002688  A4D8               	btfss	status,2,c
 11565  00268A  D002               	goto	l6094
 11566  00268C  D039               	goto	l6118
 11567  00268E  D063               	goto	l1153
 11568  002690                     l6094:
 11569  002690  0E17               	movlw	23
 11570  002692  6E41               	movwf	??___fttol& (0+255),c
 11571  002694  C03D  F042         	movff	___fttol@f1,??___fttol+1
 11572  002698  C03E  F043         	movff	___fttol@f1+1,??___fttol+2
 11573  00269C  C03F  F044         	movff	___fttol@f1+2,??___fttol+3
 11574  0026A0  2841               	incf	??___fttol,w,c
 11575  0026A2  6E45               	movwf	(??___fttol+4)& (0+255),c
 11576  0026A4  D004               	goto	u5640
 11577  0026A6                     u5645:
 11578  0026A6  90D8               	bcf	status,0,c
 11579  0026A8  3244               	rrcf	??___fttol+3,f,c
 11580  0026AA  3243               	rrcf	??___fttol+2,f,c
 11581  0026AC  3242               	rrcf	??___fttol+1,f,c
 11582  0026AE                     u5640:
 11583  0026AE  2E45               	decfsz	(??___fttol+4)& (0+255),f,c
 11584  0026B0  D7FA               	goto	u5645
 11585  0026B2  5042               	movf	??___fttol+1,w,c
 11586  0026B4  6E46               	movwf	___fttol@sign1,c
 11587  0026B6  8E3E               	bsf	___fttol@f1+1,7,c
 11588  0026B8  0EFF               	movlw	255
 11589  0026BA  163D               	andwf	___fttol@f1,f,c
 11590  0026BC  0EFF               	movlw	255
 11591  0026BE  163E               	andwf	___fttol@f1+1,f,c
 11592  0026C0  0E00               	movlw	0
 11593  0026C2  163F               	andwf	___fttol@f1+2,f,c
 11594  0026C4  503D               	movf	___fttol@f1,w,c
 11595  0026C6  6E47               	movwf	___fttol@lval,c
 11596  0026C8  503E               	movf	___fttol@f1+1,w,c
 11597  0026CA  6E48               	movwf	___fttol@lval+1,c
 11598  0026CC  503F               	movf	___fttol@f1+2,w,c
 11599  0026CE  6E49               	movwf	___fttol@lval+2,c
 11600  0026D0  6A4A               	clrf	___fttol@lval+3,c
 11601  0026D2  0E8E               	movlw	142
 11602  0026D4  5E4B               	subwf	___fttol@exp1,f,c
 11603  0026D6  AE4B               	btfss	___fttol@exp1,7,c
 11604  0026D8  D010               	goto	l6116
 11605  0026DA  504B               	movf	___fttol@exp1,w,c
 11606  0026DC  0A80               	xorlw	128
 11607  0026DE  0F8F               	addlw	143
 11608  0026E0  B0D8               	btfsc	status,0,c
 11609  0026E2  D003               	goto	l6112
 11610  0026E4  D00D               	goto	l6118
 11611  0026E6  D037               	goto	l1153
 11612  0026E8  D000               	goto	l6112
 11613  0026EA                     l6112:
 11614  0026EA  90D8               	bcf	status,0,c
 11615  0026EC  324A               	rrcf	___fttol@lval+3,f,c
 11616  0026EE  3249               	rrcf	___fttol@lval+2,f,c
 11617  0026F0  3248               	rrcf	___fttol@lval+1,f,c
 11618  0026F2  3247               	rrcf	___fttol@lval,f,c
 11619  0026F4  3E4B               	incfsz	___fttol@exp1,f,c
 11620  0026F6  D7F9               	goto	l6112
 11621  0026F8  D019               	goto	l6126
 11622  0026FA                     l6116:
 11623  0026FA  0E17               	movlw	23
 11624  0026FC  644B               	cpfsgt	___fttol@exp1,c
 11625  0026FE  D011               	goto	l6124
 11626  002700                     l6118:
 11627  002700  0E00               	movlw	0
 11628  002702  6E3D               	movwf	?___fttol,c
 11629  002704  0E00               	movlw	0
 11630  002706  6E3E               	movwf	?___fttol+1,c
 11631  002708  0E00               	movlw	0
 11632  00270A  6E3F               	movwf	?___fttol+2,c
 11633  00270C  0E00               	movlw	0
 11634  00270E  6E40               	movwf	?___fttol+3,c
 11635  002710  D022               	goto	l1153
 11636  002712  D007               	goto	l6124
 11637  002714                     l6122:
 11638  002714  90D8               	bcf	status,0,c
 11639  002716  3647               	rlcf	___fttol@lval,f,c
 11640  002718  3648               	rlcf	___fttol@lval+1,f,c
 11641  00271A  3649               	rlcf	___fttol@lval+2,f,c
 11642  00271C  364A               	rlcf	___fttol@lval+3,f,c
 11643  00271E  064B               	decf	___fttol@exp1,f,c
 11644  002720  D000               	goto	l6124
 11645  002722                     l6124:
 11646  002722  504B               	movf	___fttol@exp1,w,c
 11647  002724  B4D8               	btfsc	status,2,c
 11648  002726  D002               	goto	l6126
 11649  002728  D7F5               	goto	l6122
 11650  00272A  D000               	goto	l6126
 11651  00272C                     l6126:
 11652  00272C  5046               	movf	___fttol@sign1,w,c
 11653  00272E  B4D8               	btfsc	status,2,c
 11654  002730  D009               	goto	l6130
 11655  002732  1E4A               	comf	___fttol@lval+3,f,c
 11656  002734  1E49               	comf	___fttol@lval+2,f,c
 11657  002736  1E48               	comf	___fttol@lval+1,f,c
 11658  002738  6C47               	negf	___fttol@lval,c
 11659  00273A  0E00               	movlw	0
 11660  00273C  2248               	addwfc	___fttol@lval+1,f,c
 11661  00273E  2249               	addwfc	___fttol@lval+2,f,c
 11662  002740  224A               	addwfc	___fttol@lval+3,f,c
 11663  002742  D000               	goto	l6130
 11664  002744                     l6130:
 11665  002744  C047  F03D         	movff	___fttol@lval,?___fttol
 11666  002748  C048  F03E         	movff	___fttol@lval+1,?___fttol+1
 11667  00274C  C049  F03F         	movff	___fttol@lval+2,?___fttol+2
 11668  002750  C04A  F040         	movff	___fttol@lval+3,?___fttol+3
 11669  002754  D000               	goto	l1153
 11670  002756                     l1153:
 11671  002756  0012               	return		;funcret
 11672  002758                     __end_of___fttol:
 11673                           	opt stack 0
 11674                           tblptru	equ	0xFF8
 11675                           tblptrh	equ	0xFF7
 11676                           tblptrl	equ	0xFF6
 11677                           tablat	equ	0xFF5
 11678                           prodh	equ	0xFF4
 11679                           prodl	equ	0xFF3
 11680                           intcon	equ	0xFF2
 11681                           intcon2	equ	0xFF1
 11682                           intcon3	equ	0xFF0
 11683                           postinc0	equ	0xFEE
 11684                           wreg	equ	0xFE8
 11685                           postdec1	equ	0xFE5
 11686                           fsr1l	equ	0xFE1
 11687                           postinc2	equ	0xFDE
 11688                           postdec2	equ	0xFDD
 11689                           fsr2h	equ	0xFDA
 11690                           fsr2l	equ	0xFD9
 11691                           status	equ	0xFD8
 11692                           
 11693 ;; *************** function ___ftsub *****************
 11694 ;; Defined at:
 11695 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;  f1              3   75[COMRAM] float 
 11698 ;;  f2              3   78[COMRAM] float 
 11699 ;; Auto vars:     Size  Location     Type
 11700 ;;		None
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  3   75[COMRAM] float 
 11703 ;; Registers used:
 11704 ;;		wreg, status,2, status,0, cstack
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11710 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11714 ;;Total ram usage:        6 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    4
 11717 ;; This function calls:
 11718 ;;		___ftadd
 11719 ;; This function is called by:
 11720 ;;		_printf
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           	psect	text49
 11725  0037AA                     __ptext49:
 11726                           	opt stack 0
 11727  0037AA                     ___ftsub:
 11728                           	opt stack 21
 11729                           
 11730                           ;incstack = 0
 11731  0037AA  504F               	movf	___ftsub@f2,w,c
 11732  0037AC  1050               	iorwf	___ftsub@f2+1,w,c
 11733  0037AE  1051               	iorwf	___ftsub@f2+2,w,c
 11734  0037B0  B4D8               	btfsc	status,2,c
 11735  0037B2  D007               	goto	l6062
 11736  0037B4  0E00               	movlw	0
 11737  0037B6  1A4F               	xorwf	___ftsub@f2,f,c
 11738  0037B8  0E00               	movlw	0
 11739  0037BA  1A50               	xorwf	___ftsub@f2+1,f,c
 11740  0037BC  0E80               	movlw	128
 11741  0037BE  1A51               	xorwf	___ftsub@f2+2,f,c
 11742  0037C0  D000               	goto	l6062
 11743  0037C2                     l6062:
 11744  0037C2  C04C  F040         	movff	___ftsub@f1,___ftadd@f1
 11745  0037C6  C04D  F041         	movff	___ftsub@f1+1,___ftadd@f1+1
 11746  0037CA  C04E  F042         	movff	___ftsub@f1+2,___ftadd@f1+2
 11747  0037CE  C04F  F043         	movff	___ftsub@f2,___ftadd@f2
 11748  0037D2  C050  F044         	movff	___ftsub@f2+1,___ftadd@f2+1
 11749  0037D6  C051  F045         	movff	___ftsub@f2+2,___ftadd@f2+2
 11750  0037DA  ECE8  F00C         	call	___ftadd	;wreg free
 11751  0037DE  C040  F04C         	movff	?___ftadd,?___ftsub
 11752  0037E2  C041  F04D         	movff	?___ftadd+1,?___ftsub+1
 11753  0037E6  C042  F04E         	movff	?___ftadd+2,?___ftsub+2
 11754  0037EA  D000               	goto	l1149
 11755  0037EC                     l1149:
 11756  0037EC  0012               	return		;funcret
 11757  0037EE                     __end_of___ftsub:
 11758                           	opt stack 0
 11759                           tblptru	equ	0xFF8
 11760                           tblptrh	equ	0xFF7
 11761                           tblptrl	equ	0xFF6
 11762                           tablat	equ	0xFF5
 11763                           prodh	equ	0xFF4
 11764                           prodl	equ	0xFF3
 11765                           intcon	equ	0xFF2
 11766                           intcon2	equ	0xFF1
 11767                           intcon3	equ	0xFF0
 11768                           postinc0	equ	0xFEE
 11769                           wreg	equ	0xFE8
 11770                           postdec1	equ	0xFE5
 11771                           fsr1l	equ	0xFE1
 11772                           postinc2	equ	0xFDE
 11773                           postdec2	equ	0xFDD
 11774                           fsr2h	equ	0xFDA
 11775                           fsr2l	equ	0xFD9
 11776                           status	equ	0xFD8
 11777                           
 11778 ;; *************** function ___ftadd *****************
 11779 ;; Defined at:
 11780 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 11781 ;; Parameters:    Size  Location     Type
 11782 ;;  f1              3   63[COMRAM] float 
 11783 ;;  f2              3   66[COMRAM] float 
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;  exp1            1   74[COMRAM] unsigned char 
 11786 ;;  exp2            1   73[COMRAM] unsigned char 
 11787 ;;  sign            1   72[COMRAM] unsigned char 
 11788 ;; Return value:  Size  Location     Type
 11789 ;;                  3   63[COMRAM] float 
 11790 ;; Registers used:
 11791 ;;		wreg, status,2, status,0, cstack
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11797 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11801 ;;Total ram usage:       12 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:    3
 11804 ;; This function calls:
 11805 ;;		___ftpack
 11806 ;; This function is called by:
 11807 ;;		_printf
 11808 ;;		___ftsub
 11809 ;; This function uses a non-reentrant model
 11810 ;;
 11811                           
 11812                           	psect	text50
 11813  0019D0                     __ptext50:
 11814                           	opt stack 0
 11815  0019D0                     ___ftadd:
 11816                           	opt stack 21
 11817                           
 11818                           ;incstack = 0
 11819  0019D0  C042  F046         	movff	___ftadd@f1+2,??___ftadd
 11820  0019D4  6A47               	clrf	(??___ftadd+1)& (0+255),c
 11821  0019D6  6A48               	clrf	(??___ftadd+2)& (0+255),c
 11822  0019D8  3441               	rlcf	___ftadd@f1+1,w,c
 11823  0019DA  3646               	rlcf	??___ftadd& (0+255),f,c
 11824  0019DC  E301               	bnc	u4791
 11825  0019DE  8047               	bsf	(??___ftadd+1)& (0+255),0,c
 11826  0019E0                     u4791:
 11827  0019E0  5046               	movf	??___ftadd,w,c
 11828  0019E2  6E4B               	movwf	___ftadd@exp1,c
 11829  0019E4  C045  F046         	movff	___ftadd@f2+2,??___ftadd
 11830  0019E8  6A47               	clrf	(??___ftadd+1)& (0+255),c
 11831  0019EA  6A48               	clrf	(??___ftadd+2)& (0+255),c
 11832  0019EC  3444               	rlcf	___ftadd@f2+1,w,c
 11833  0019EE  3646               	rlcf	??___ftadd& (0+255),f,c
 11834  0019F0  E301               	bnc	u4801
 11835  0019F2  8047               	bsf	(??___ftadd+1)& (0+255),0,c
 11836  0019F4                     u4801:
 11837  0019F4  5046               	movf	??___ftadd,w,c
 11838  0019F6  6E4A               	movwf	___ftadd@exp2,c
 11839  0019F8  504B               	movf	___ftadd@exp1,w,c
 11840  0019FA  B4D8               	btfsc	status,2,c
 11841  0019FC  D00B               	goto	l1068
 11842  0019FE  504A               	movf	___ftadd@exp2,w,c
 11843  001A00  5C4B               	subwf	___ftadd@exp1,w,c
 11844  001A02  B0D8               	btfsc	status,0,c
 11845  001A04  D00E               	goto	l5624
 11846  001A06  504B               	movf	___ftadd@exp1,w,c
 11847  001A08  0800               	sublw	0
 11848  001A0A  244A               	addwf	___ftadd@exp2,w,c
 11849  001A0C  6E46               	movwf	??___ftadd& (0+255),c
 11850  001A0E  0E18               	movlw	24
 11851  001A10  6446               	cpfsgt	??___ftadd,c
 11852  001A12  D007               	goto	l5624
 11853  001A14                     l1068:
 11854  001A14  C043  F040         	movff	___ftadd@f2,?___ftadd
 11855  001A18  C044  F041         	movff	___ftadd@f2+1,?___ftadd+1
 11856  001A1C  C045  F042         	movff	___ftadd@f2+2,?___ftadd+2
 11857  001A20  D0B8               	goto	l1069
 11858  001A22                     l5624:
 11859  001A22  504A               	movf	___ftadd@exp2,w,c
 11860  001A24  B4D8               	btfsc	status,2,c
 11861  001A26  D00B               	goto	l1072
 11862  001A28  504B               	movf	___ftadd@exp1,w,c
 11863  001A2A  5C4A               	subwf	___ftadd@exp2,w,c
 11864  001A2C  B0D8               	btfsc	status,0,c
 11865  001A2E  D00E               	goto	l5630
 11866  001A30  504A               	movf	___ftadd@exp2,w,c
 11867  001A32  0800               	sublw	0
 11868  001A34  244B               	addwf	___ftadd@exp1,w,c
 11869  001A36  6E46               	movwf	??___ftadd& (0+255),c
 11870  001A38  0E18               	movlw	24
 11871  001A3A  6446               	cpfsgt	??___ftadd,c
 11872  001A3C  D007               	goto	l5630
 11873  001A3E                     l1072:
 11874  001A3E  C040  F040         	movff	___ftadd@f1,?___ftadd
 11875  001A42  C041  F041         	movff	___ftadd@f1+1,?___ftadd+1
 11876  001A46  C042  F042         	movff	___ftadd@f1+2,?___ftadd+2
 11877  001A4A  D0A3               	goto	l1069
 11878  001A4C                     l5630:
 11879  001A4C  0E06               	movlw	6
 11880  001A4E  6E49               	movwf	___ftadd@sign,c
 11881  001A50  AE42               	btfss	___ftadd@f1+2,7,c
 11882  001A52  D002               	goto	l5636
 11883  001A54  8E49               	bsf	___ftadd@sign,7,c
 11884  001A56  D000               	goto	l5636
 11885  001A58                     l5636:
 11886  001A58  BE45               	btfsc	___ftadd@f2+2,7,c
 11887  001A5A  8C49               	bsf	___ftadd@sign,6,c
 11888  001A5C  8E41               	bsf	___ftadd@f1+1,7,c
 11889  001A5E  0EFF               	movlw	255
 11890  001A60  1640               	andwf	___ftadd@f1,f,c
 11891  001A62  0EFF               	movlw	255
 11892  001A64  1641               	andwf	___ftadd@f1+1,f,c
 11893  001A66  0E00               	movlw	0
 11894  001A68  1642               	andwf	___ftadd@f1+2,f,c
 11895  001A6A  8E44               	bsf	___ftadd@f2+1,7,c
 11896  001A6C  0EFF               	movlw	255
 11897  001A6E  1643               	andwf	___ftadd@f2,f,c
 11898  001A70  0EFF               	movlw	255
 11899  001A72  1644               	andwf	___ftadd@f2+1,f,c
 11900  001A74  0E00               	movlw	0
 11901  001A76  1645               	andwf	___ftadd@f2+2,f,c
 11902  001A78  504A               	movf	___ftadd@exp2,w,c
 11903  001A7A  5C4B               	subwf	___ftadd@exp1,w,c
 11904  001A7C  B0D8               	btfsc	status,0,c
 11905  001A7E  D01E               	goto	l5656
 11906  001A80                     l5646:
 11907  001A80  90D8               	bcf	status,0,c
 11908  001A82  3643               	rlcf	___ftadd@f2,f,c
 11909  001A84  3644               	rlcf	___ftadd@f2+1,f,c
 11910  001A86  3645               	rlcf	___ftadd@f2+2,f,c
 11911  001A88  064A               	decf	___ftadd@exp2,f,c
 11912  001A8A  504B               	movf	___ftadd@exp1,w,c
 11913  001A8C  184A               	xorwf	___ftadd@exp2,w,c
 11914  001A8E  B4D8               	btfsc	status,2,c
 11915  001A90  D00F               	goto	l5654
 11916  001A92  0649               	decf	___ftadd@sign,f,c
 11917  001A94  C049  F046         	movff	___ftadd@sign,??___ftadd
 11918  001A98  0E07               	movlw	7
 11919  001A9A  1646               	andwf	??___ftadd,f,c
 11920  001A9C  B4D8               	btfsc	status,2,c
 11921  001A9E  D008               	goto	l5654
 11922  001AA0  D7EF               	goto	l5646
 11923  001AA2  D006               	goto	l5654
 11924  001AA4                     l5652:
 11925  001AA4  90D8               	bcf	status,0,c
 11926  001AA6  3242               	rrcf	___ftadd@f1+2,f,c
 11927  001AA8  3241               	rrcf	___ftadd@f1+1,f,c
 11928  001AAA  3240               	rrcf	___ftadd@f1,f,c
 11929  001AAC  2A4B               	incf	___ftadd@exp1,f,c
 11930  001AAE  D000               	goto	l5654
 11931  001AB0                     l5654:
 11932  001AB0  504A               	movf	___ftadd@exp2,w,c
 11933  001AB2  184B               	xorwf	___ftadd@exp1,w,c
 11934  001AB4  B4D8               	btfsc	status,2,c
 11935  001AB6  D024               	goto	l1083
 11936  001AB8  D7F5               	goto	l5652
 11937  001ABA  D022               	goto	l1083
 11938  001ABC                     l5656:
 11939  001ABC  504B               	movf	___ftadd@exp1,w,c
 11940  001ABE  5C4A               	subwf	___ftadd@exp2,w,c
 11941  001AC0  B0D8               	btfsc	status,0,c
 11942  001AC2  D01E               	goto	l1083
 11943  001AC4                     l5658:
 11944  001AC4  90D8               	bcf	status,0,c
 11945  001AC6  3640               	rlcf	___ftadd@f1,f,c
 11946  001AC8  3641               	rlcf	___ftadd@f1+1,f,c
 11947  001ACA  3642               	rlcf	___ftadd@f1+2,f,c
 11948  001ACC  064B               	decf	___ftadd@exp1,f,c
 11949  001ACE  504B               	movf	___ftadd@exp1,w,c
 11950  001AD0  184A               	xorwf	___ftadd@exp2,w,c
 11951  001AD2  B4D8               	btfsc	status,2,c
 11952  001AD4  D00F               	goto	l5666
 11953  001AD6  0649               	decf	___ftadd@sign,f,c
 11954  001AD8  C049  F046         	movff	___ftadd@sign,??___ftadd
 11955  001ADC  0E07               	movlw	7
 11956  001ADE  1646               	andwf	??___ftadd,f,c
 11957  001AE0  B4D8               	btfsc	status,2,c
 11958  001AE2  D008               	goto	l5666
 11959  001AE4  D7EF               	goto	l5658
 11960  001AE6  D006               	goto	l5666
 11961  001AE8                     l5664:
 11962  001AE8  90D8               	bcf	status,0,c
 11963  001AEA  3245               	rrcf	___ftadd@f2+2,f,c
 11964  001AEC  3244               	rrcf	___ftadd@f2+1,f,c
 11965  001AEE  3243               	rrcf	___ftadd@f2,f,c
 11966  001AF0  2A4A               	incf	___ftadd@exp2,f,c
 11967  001AF2  D000               	goto	l5666
 11968  001AF4                     l5666:
 11969  001AF4  504A               	movf	___ftadd@exp2,w,c
 11970  001AF6  184B               	xorwf	___ftadd@exp1,w,c
 11971  001AF8  B4D8               	btfsc	status,2,c
 11972  001AFA  D002               	goto	l1083
 11973  001AFC  D7F5               	goto	l5664
 11974  001AFE  D000               	goto	l1083
 11975  001B00                     l1083:
 11976  001B00  AE49               	btfss	___ftadd@sign,7,c
 11977  001B02  D00C               	goto	l1092
 11978  001B04  0EFF               	movlw	255
 11979  001B06  1A40               	xorwf	___ftadd@f1,f,c
 11980  001B08  0EFF               	movlw	255
 11981  001B0A  1A41               	xorwf	___ftadd@f1+1,f,c
 11982  001B0C  0EFF               	movlw	255
 11983  001B0E  1A42               	xorwf	___ftadd@f1+2,f,c
 11984  001B10  0E01               	movlw	1
 11985  001B12  2640               	addwf	___ftadd@f1,f,c
 11986  001B14  0E00               	movlw	0
 11987  001B16  2241               	addwfc	___ftadd@f1+1,f,c
 11988  001B18  0E00               	movlw	0
 11989  001B1A  2242               	addwfc	___ftadd@f1+2,f,c
 11990  001B1C                     l1092:
 11991  001B1C  AC49               	btfss	___ftadd@sign,6,c
 11992  001B1E  D00D               	goto	l5672
 11993  001B20  0EFF               	movlw	255
 11994  001B22  1A43               	xorwf	___ftadd@f2,f,c
 11995  001B24  0EFF               	movlw	255
 11996  001B26  1A44               	xorwf	___ftadd@f2+1,f,c
 11997  001B28  0EFF               	movlw	255
 11998  001B2A  1A45               	xorwf	___ftadd@f2+2,f,c
 11999  001B2C  0E01               	movlw	1
 12000  001B2E  2643               	addwf	___ftadd@f2,f,c
 12001  001B30  0E00               	movlw	0
 12002  001B32  2244               	addwfc	___ftadd@f2+1,f,c
 12003  001B34  0E00               	movlw	0
 12004  001B36  2245               	addwfc	___ftadd@f2+2,f,c
 12005  001B38  D000               	goto	l5672
 12006  001B3A                     l5672:
 12007  001B3A  0E00               	movlw	0
 12008  001B3C  6E49               	movwf	___ftadd@sign,c
 12009  001B3E  5040               	movf	___ftadd@f1,w,c
 12010  001B40  2643               	addwf	___ftadd@f2,f,c
 12011  001B42  5041               	movf	___ftadd@f1+1,w,c
 12012  001B44  2244               	addwfc	___ftadd@f2+1,f,c
 12013  001B46  5042               	movf	___ftadd@f1+2,w,c
 12014  001B48  2245               	addwfc	___ftadd@f2+2,f,c
 12015  001B4A  AE45               	btfss	___ftadd@f2+2,7,c
 12016  001B4C  D00F               	goto	l5682
 12017  001B4E  0EFF               	movlw	255
 12018  001B50  1A43               	xorwf	___ftadd@f2,f,c
 12019  001B52  0EFF               	movlw	255
 12020  001B54  1A44               	xorwf	___ftadd@f2+1,f,c
 12021  001B56  0EFF               	movlw	255
 12022  001B58  1A45               	xorwf	___ftadd@f2+2,f,c
 12023  001B5A  0E01               	movlw	1
 12024  001B5C  2643               	addwf	___ftadd@f2,f,c
 12025  001B5E  0E00               	movlw	0
 12026  001B60  2244               	addwfc	___ftadd@f2+1,f,c
 12027  001B62  0E00               	movlw	0
 12028  001B64  2245               	addwfc	___ftadd@f2+2,f,c
 12029  001B66  0E01               	movlw	1
 12030  001B68  6E49               	movwf	___ftadd@sign,c
 12031  001B6A  D000               	goto	l5682
 12032  001B6C                     l5682:
 12033  001B6C  C043  F00F         	movff	___ftadd@f2,___ftpack@arg
 12034  001B70  C044  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
 12035  001B74  C045  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
 12036  001B78  C04B  F012         	movff	___ftadd@exp1,___ftpack@exp
 12037  001B7C  C049  F013         	movff	___ftadd@sign,___ftpack@sign
 12038  001B80  ECCB  F015         	call	___ftpack	;wreg free
 12039  001B84  C00F  F040         	movff	?___ftpack,?___ftadd
 12040  001B88  C010  F041         	movff	?___ftpack+1,?___ftadd+1
 12041  001B8C  C011  F042         	movff	?___ftpack+2,?___ftadd+2
 12042  001B90  D000               	goto	l1069
 12043  001B92                     l1069:
 12044  001B92  0012               	return		;funcret
 12045  001B94                     __end_of___ftadd:
 12046                           	opt stack 0
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           intcon	equ	0xFF2
 12054                           intcon2	equ	0xFF1
 12055                           intcon3	equ	0xFF0
 12056                           postinc0	equ	0xFEE
 12057                           wreg	equ	0xFE8
 12058                           postdec1	equ	0xFE5
 12059                           fsr1l	equ	0xFE1
 12060                           postinc2	equ	0xFDE
 12061                           postdec2	equ	0xFDD
 12062                           fsr2h	equ	0xFDA
 12063                           fsr2l	equ	0xFD9
 12064                           status	equ	0xFD8
 12065                           
 12066 ;; *************** function ___ftneg *****************
 12067 ;; Defined at:
 12068 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 12069 ;; Parameters:    Size  Location     Type
 12070 ;;  f1              3   14[COMRAM] float 
 12071 ;; Auto vars:     Size  Location     Type
 12072 ;;		None
 12073 ;; Return value:  Size  Location     Type
 12074 ;;                  3   14[COMRAM] float 
 12075 ;; Registers used:
 12076 ;;		wreg, status,2, status,0
 12077 ;; Tracked objects:
 12078 ;;		On entry : 0/0
 12079 ;;		On exit  : 0/0
 12080 ;;		Unchanged: 0/0
 12081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12082 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12085 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12086 ;;Total ram usage:        3 bytes
 12087 ;; Hardware stack levels used:    1
 12088 ;; Hardware stack levels required when called:    2
 12089 ;; This function calls:
 12090 ;;		Nothing
 12091 ;; This function is called by:
 12092 ;;		_printf
 12093 ;; This function uses a non-reentrant model
 12094 ;;
 12095                           
 12096                           	psect	text51
 12097  003A0A                     __ptext51:
 12098                           	opt stack 0
 12099  003A0A                     ___ftneg:
 12100                           	opt stack 23
 12101                           
 12102                           ;incstack = 0
 12103  003A0A  500F               	movf	___ftneg@f1,w,c
 12104  003A0C  1010               	iorwf	___ftneg@f1+1,w,c
 12105  003A0E  1011               	iorwf	___ftneg@f1+2,w,c
 12106  003A10  B4D8               	btfsc	status,2,c
 12107  003A12  D006               	goto	l1142
 12108  003A14  0E00               	movlw	0
 12109  003A16  1A0F               	xorwf	___ftneg@f1,f,c
 12110  003A18  0E00               	movlw	0
 12111  003A1A  1A10               	xorwf	___ftneg@f1+1,f,c
 12112  003A1C  0E80               	movlw	128
 12113  003A1E  1A11               	xorwf	___ftneg@f1+2,f,c
 12114  003A20                     l1142:
 12115  003A20  C00F  F00F         	movff	___ftneg@f1,?___ftneg
 12116  003A24  C010  F010         	movff	___ftneg@f1+1,?___ftneg+1
 12117  003A28  C011  F011         	movff	___ftneg@f1+2,?___ftneg+2
 12118  003A2C  0012               	return		;funcret
 12119  003A2E                     __end_of___ftneg:
 12120                           	opt stack 0
 12121                           tblptru	equ	0xFF8
 12122                           tblptrh	equ	0xFF7
 12123                           tblptrl	equ	0xFF6
 12124                           tablat	equ	0xFF5
 12125                           prodh	equ	0xFF4
 12126                           prodl	equ	0xFF3
 12127                           intcon	equ	0xFF2
 12128                           intcon2	equ	0xFF1
 12129                           intcon3	equ	0xFF0
 12130                           postinc0	equ	0xFEE
 12131                           wreg	equ	0xFE8
 12132                           postdec1	equ	0xFE5
 12133                           fsr1l	equ	0xFE1
 12134                           postinc2	equ	0xFDE
 12135                           postdec2	equ	0xFDD
 12136                           fsr2h	equ	0xFDA
 12137                           fsr2l	equ	0xFD9
 12138                           status	equ	0xFD8
 12139                           
 12140 ;; *************** function ___ftge *****************
 12141 ;; Defined at:
 12142 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 12143 ;; Parameters:    Size  Location     Type
 12144 ;;  ff1             3   14[COMRAM] float 
 12145 ;;  ff2             3   17[COMRAM] float 
 12146 ;; Auto vars:     Size  Location     Type
 12147 ;;		None
 12148 ;; Return value:  Size  Location     Type
 12149 ;;		None               void
 12150 ;; Registers used:
 12151 ;;		wreg, status,2, status,0
 12152 ;; Tracked objects:
 12153 ;;		On entry : 0/0
 12154 ;;		On exit  : 0/0
 12155 ;;		Unchanged: 0/0
 12156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12157 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12159 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12160 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12161 ;;Total ram usage:        9 bytes
 12162 ;; Hardware stack levels used:    1
 12163 ;; Hardware stack levels required when called:    2
 12164 ;; This function calls:
 12165 ;;		Nothing
 12166 ;; This function is called by:
 12167 ;;		_update_LCD_misc
 12168 ;;		_printf
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           	psect	text52
 12173  002E70                     __ptext52:
 12174                           	opt stack 0
 12175  002E70                     ___ftge:
 12176                           	opt stack 23
 12177                           
 12178                           ;incstack = 0
 12179  002E70  AE11               	btfss	___ftge@ff1+2,7,c
 12180  002E72  D017               	goto	l6070
 12181  002E74  C00F  F015         	movff	___ftge@ff1,??___ftge
 12182  002E78  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
 12183  002E7C  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
 12184  002E80  1E15               	comf	??___ftge,f,c
 12185  002E82  1E16               	comf	??___ftge+1,f,c
 12186  002E84  1E17               	comf	??___ftge+2,f,c
 12187  002E86  2A15               	incf	??___ftge,f,c
 12188  002E88  0E00               	movlw	0
 12189  002E8A  2216               	addwfc	??___ftge+1,f,c
 12190  002E8C  2217               	addwfc	??___ftge+2,f,c
 12191  002E8E  0E00               	movlw	0
 12192  002E90  2415               	addwf	??___ftge,w,c
 12193  002E92  6E0F               	movwf	___ftge@ff1,c
 12194  002E94  0E00               	movlw	0
 12195  002E96  2016               	addwfc	??___ftge+1,w,c
 12196  002E98  6E10               	movwf	___ftge@ff1+1,c
 12197  002E9A  0E80               	movlw	128
 12198  002E9C  2017               	addwfc	??___ftge+2,w,c
 12199  002E9E  6E11               	movwf	___ftge@ff1+2,c
 12200  002EA0  D000               	goto	l6070
 12201  002EA2                     l6070:
 12202  002EA2  AE14               	btfss	___ftge@ff2+2,7,c
 12203  002EA4  D017               	goto	l6074
 12204  002EA6  C012  F015         	movff	___ftge@ff2,??___ftge
 12205  002EAA  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
 12206  002EAE  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
 12207  002EB2  1E15               	comf	??___ftge,f,c
 12208  002EB4  1E16               	comf	??___ftge+1,f,c
 12209  002EB6  1E17               	comf	??___ftge+2,f,c
 12210  002EB8  2A15               	incf	??___ftge,f,c
 12211  002EBA  0E00               	movlw	0
 12212  002EBC  2216               	addwfc	??___ftge+1,f,c
 12213  002EBE  2217               	addwfc	??___ftge+2,f,c
 12214  002EC0  0E00               	movlw	0
 12215  002EC2  2415               	addwf	??___ftge,w,c
 12216  002EC4  6E12               	movwf	___ftge@ff2,c
 12217  002EC6  0E00               	movlw	0
 12218  002EC8  2016               	addwfc	??___ftge+1,w,c
 12219  002ECA  6E13               	movwf	___ftge@ff2+1,c
 12220  002ECC  0E80               	movlw	128
 12221  002ECE  2017               	addwfc	??___ftge+2,w,c
 12222  002ED0  6E14               	movwf	___ftge@ff2+2,c
 12223  002ED2  D000               	goto	l6074
 12224  002ED4                     l6074:
 12225  002ED4  0E00               	movlw	0
 12226  002ED6  1A0F               	xorwf	___ftge@ff1,f,c
 12227  002ED8  0E00               	movlw	0
 12228  002EDA  1A10               	xorwf	___ftge@ff1+1,f,c
 12229  002EDC  0E80               	movlw	128
 12230  002EDE  1A11               	xorwf	___ftge@ff1+2,f,c
 12231  002EE0  0E00               	movlw	0
 12232  002EE2  1A12               	xorwf	___ftge@ff2,f,c
 12233  002EE4  0E00               	movlw	0
 12234  002EE6  1A13               	xorwf	___ftge@ff2+1,f,c
 12235  002EE8  0E80               	movlw	128
 12236  002EEA  1A14               	xorwf	___ftge@ff2+2,f,c
 12237  002EEC  5012               	movf	___ftge@ff2,w,c
 12238  002EEE  5C0F               	subwf	___ftge@ff1,w,c
 12239  002EF0  5013               	movf	___ftge@ff2+1,w,c
 12240  002EF2  5810               	subwfb	___ftge@ff1+1,w,c
 12241  002EF4  5014               	movf	___ftge@ff2+2,w,c
 12242  002EF6  5811               	subwfb	___ftge@ff1+2,w,c
 12243  002EF8  B0D8               	btfsc	status,0,c
 12244  002EFA  D002               	goto	l6080
 12245  002EFC  90D8               	bcf	status,0,c
 12246  002EFE  D002               	goto	l1126
 12247  002F00                     l6080:
 12248  002F00  80D8               	bsf	status,0,c
 12249  002F02  D000               	goto	l1126
 12250  002F04                     l1126:
 12251  002F04  0012               	return		;funcret
 12252  002F06                     __end_of___ftge:
 12253                           	opt stack 0
 12254                           tblptru	equ	0xFF8
 12255                           tblptrh	equ	0xFF7
 12256                           tblptrl	equ	0xFF6
 12257                           tablat	equ	0xFF5
 12258                           prodh	equ	0xFF4
 12259                           prodl	equ	0xFF3
 12260                           intcon	equ	0xFF2
 12261                           intcon2	equ	0xFF1
 12262                           intcon3	equ	0xFF0
 12263                           postinc0	equ	0xFEE
 12264                           wreg	equ	0xFE8
 12265                           postdec1	equ	0xFE5
 12266                           fsr1l	equ	0xFE1
 12267                           postinc2	equ	0xFDE
 12268                           postdec2	equ	0xFDD
 12269                           fsr2h	equ	0xFDA
 12270                           fsr2l	equ	0xFD9
 12271                           status	equ	0xFD8
 12272                           
 12273 ;; *************** function _get_full_ADC *****************
 12274 ;; Defined at:
 12275 ;;		line 279 in file "Lab8.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;		None
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;  result          2   18[COMRAM] int 
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  2   14[COMRAM] unsigned int 
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12291 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12292 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12293 ;;Total ram usage:        6 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    2
 12296 ;; This function calls:
 12297 ;;		Nothing
 12298 ;; This function is called by:
 12299 ;;		_main
 12300 ;;		_update_LCD_misc
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           	psect	text53
 12305  0039E4                     __ptext53:
 12306                           	opt stack 0
 12307  0039E4                     _get_full_ADC:
 12308                           	opt stack 28
 12309                           
 12310                           ;Lab8.c: 280: int result;
 12311                           ;Lab8.c: 281: ADCON0bits.GO=1;
 12312                           
 12313                           ;incstack = 0
 12314  0039E4  82C2               	bsf	4034,1,c	;volatile
 12315                           
 12316                           ;Lab8.c: 283: while(ADCON0bits.DONE==1);
 12317  0039E6  D000               	goto	l443
 12318  0039E8                     l443:
 12319  0039E8  B2C2               	btfsc	4034,1,c	;volatile
 12320  0039EA  D7FE               	goto	l443
 12321                           
 12322                           ;Lab8.c: 285: result = (ADRESH * 0x100) + ADRESL;
 12323  0039EC  50C4               	movf	4036,w,c	;volatile
 12324  0039EE  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
 12325  0039F0  6A11               	clrf	??_get_full_ADC& (0+255),c
 12326  0039F2  50C3               	movf	4035,w,c	;volatile
 12327  0039F4  2411               	addwf	??_get_full_ADC,w,c
 12328  0039F6  6E13               	movwf	get_full_ADC@result,c
 12329  0039F8  0E00               	movlw	0
 12330  0039FA  2012               	addwfc	??_get_full_ADC+1,w,c
 12331  0039FC  6E14               	movwf	get_full_ADC@result+1,c
 12332                           
 12333                           ;Lab8.c: 288: return result;
 12334  0039FE  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
 12335  003A02  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
 12336  003A06  D000               	goto	l446
 12337  003A08                     l446:
 12338  003A08  0012               	return		;funcret
 12339  003A0A                     __end_of_get_full_ADC:
 12340                           	opt stack 0
 12341                           tblptru	equ	0xFF8
 12342                           tblptrh	equ	0xFF7
 12343                           tblptrl	equ	0xFF6
 12344                           tablat	equ	0xFF5
 12345                           prodh	equ	0xFF4
 12346                           prodl	equ	0xFF3
 12347                           intcon	equ	0xFF2
 12348                           intcon2	equ	0xFF1
 12349                           intcon3	equ	0xFF0
 12350                           postinc0	equ	0xFEE
 12351                           wreg	equ	0xFE8
 12352                           postdec1	equ	0xFE5
 12353                           fsr1l	equ	0xFE1
 12354                           postinc2	equ	0xFDE
 12355                           postdec2	equ	0xFDD
 12356                           fsr2h	equ	0xFDA
 12357                           fsr2l	equ	0xFD9
 12358                           status	equ	0xFD8
 12359                           
 12360 ;; *************** function _drawtext *****************
 12361 ;; Defined at:
 12362 ;;		line 507 in file "ST7735_TFT.c"
 12363 ;; Parameters:    Size  Location     Type
 12364 ;;  x               1    wreg     unsigned char 
 12365 ;;  y               1   54[COMRAM] unsigned char 
 12366 ;;  _text           2   55[COMRAM] PTR unsigned char 
 12367 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
 12368 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
 12369 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
 12370 ;;		 -> NS_Count(3), FlashingR_Txt(2), buffer(31), Act_Mode_Txt(2), 
 12371 ;;  color           2   57[COMRAM] unsigned int 
 12372 ;;  bg              2   59[COMRAM] unsigned int 
 12373 ;;  size            1   61[COMRAM] unsigned char 
 12374 ;; Auto vars:     Size  Location     Type
 12375 ;;  x               1   64[COMRAM] unsigned char 
 12376 ;;  i               2   67[COMRAM] unsigned int 
 12377 ;;  textsize        2   65[COMRAM] unsigned int 
 12378 ;;  cursor_x        1   70[COMRAM] unsigned char 
 12379 ;;  cursor_y        1   69[COMRAM] unsigned char 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;		None               void
 12382 ;; Registers used:
 12383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12389 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12390 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12391 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12392 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12393 ;;Total ram usage:       17 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; Hardware stack levels required when called:    8
 12396 ;; This function calls:
 12397 ;;		_drawChar
 12398 ;;		_strlen
 12399 ;; This function is called by:
 12400 ;;		_Wait_One_Second
 12401 ;;		_Wait_One_Second_With_Beep
 12402 ;;		_Initialize_Screen
 12403 ;;		_update_LCD_count
 12404 ;;		_update_LCD_PED_Count
 12405 ;;		_update_LCD_misc
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           	psect	text54
 12410  00283A                     __ptext54:
 12411                           	opt stack 0
 12412  00283A                     _drawtext:
 12413                           	opt stack 19
 12414                           
 12415                           ;incstack = 0
 12416                           ;drawtext@x stored from wreg
 12417  00283A  6E41               	movwf	drawtext@x,c
 12418                           
 12419                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 12420                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 12421                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 12422  00283C  C041  F047         	movff	drawtext@x,drawtext@cursor_x
 12423  002840  C037  F046         	movff	drawtext@y,drawtext@cursor_y
 12424                           
 12425                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 12426  002844  C038  F00F         	movff	drawtext@_text,strlen@s
 12427  002848  C039  F010         	movff	drawtext@_text+1,strlen@s+1
 12428  00284C  EC16  F01C         	call	_strlen	;wreg free
 12429  002850  C00F  F042         	movff	?_strlen,drawtext@textsize
 12430  002854  C010  F043         	movff	?_strlen+1,drawtext@textsize+1
 12431                           
 12432                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 12433  002858  0E00               	movlw	0
 12434  00285A  6E45               	movwf	drawtext@i+1,c
 12435  00285C  0E00               	movlw	0
 12436  00285E  6E44               	movwf	drawtext@i,c
 12437  002860  D054               	goto	l6216
 12438  002862                     l6190:
 12439                           
 12440                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 12441  002862  5071               	movf	_wrap,w,c
 12442  002864  B4D8               	btfsc	status,2,c
 12443  002866  D02C               	goto	l6206
 12444  002868  503E               	movf	drawtext@size,w,c
 12445  00286A  0D05               	mullw	5
 12446  00286C  5047               	movf	drawtext@cursor_x,w,c
 12447  00286E  6E3F               	movwf	??_drawtext& (0+255),c
 12448  002870  6A40               	clrf	(??_drawtext+1)& (0+255),c
 12449  002872  50F3               	movf	prodl,w,c
 12450  002874  263F               	addwf	??_drawtext,f,c
 12451  002876  50F4               	movf	prodh,w,c
 12452  002878  2240               	addwfc	??_drawtext+1,f,c
 12453  00287A  BE40               	btfsc	??_drawtext+1,7,c
 12454  00287C  D021               	goto	l6206
 12455  00287E  5040               	movf	??_drawtext+1,w,c
 12456  002880  E104               	bnz	u5780
 12457  002882  0E81               	movlw	129
 12458  002884  5C3F               	subwf	??_drawtext,w,c
 12459  002886  A0D8               	btfss	status,0,c
 12460  002888  D01B               	goto	l6206
 12461  00288A                     u5780:
 12462                           
 12463                           ;ST7735_TFT.c: 515: cursor_x = 0;
 12464  00288A  0E00               	movlw	0
 12465  00288C  6E47               	movwf	drawtext@cursor_x,c
 12466                           
 12467                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 12468  00288E  503E               	movf	drawtext@size,w,c
 12469  002890  0D07               	mullw	7
 12470  002892  50F3               	movf	prodl,w,c
 12471  002894  2446               	addwf	drawtext@cursor_y,w,c
 12472  002896  0F03               	addlw	3
 12473  002898  6E46               	movwf	drawtext@cursor_y,c
 12474                           
 12475                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 12476  00289A  0EA0               	movlw	160
 12477  00289C  6446               	cpfsgt	drawtext@cursor_y,c
 12478  00289E  D003               	goto	l6202
 12479  0028A0  0EA0               	movlw	160
 12480  0028A2  6E46               	movwf	drawtext@cursor_y,c
 12481  0028A4  D000               	goto	l6202
 12482  0028A6                     l6202:
 12483                           
 12484                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 12485  0028A6  5044               	movf	drawtext@i,w,c
 12486  0028A8  2438               	addwf	drawtext@_text,w,c
 12487  0028AA  6ED9               	movwf	fsr2l,c
 12488  0028AC  5045               	movf	drawtext@i+1,w,c
 12489  0028AE  2039               	addwfc	drawtext@_text+1,w,c
 12490  0028B0  6EDA               	movwf	fsr2h,c
 12491  0028B2  0E20               	movlw	32
 12492  0028B4  18DE               	xorwf	postinc2,w,c
 12493  0028B6  B4D8               	btfsc	status,2,c
 12494  0028B8  D025               	goto	l6214
 12495  0028BA  D002               	goto	l6206
 12496  0028BC  D023               	goto	l6214
 12497  0028BE  D000               	goto	l6206
 12498  0028C0                     l6206:
 12499                           
 12500                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 12501  0028C0  C046  F02C         	movff	drawtext@cursor_y,drawChar@y
 12502  0028C4  5044               	movf	drawtext@i,w,c
 12503  0028C6  2438               	addwf	drawtext@_text,w,c
 12504  0028C8  6ED9               	movwf	fsr2l,c
 12505  0028CA  5045               	movf	drawtext@i+1,w,c
 12506  0028CC  2039               	addwfc	drawtext@_text+1,w,c
 12507  0028CE  6EDA               	movwf	fsr2h,c
 12508  0028D0  50DF               	movf	indf2,w,c
 12509  0028D2  6E2D               	movwf	drawChar@c,c
 12510  0028D4  C03A  F02E         	movff	drawtext@color,drawChar@color
 12511  0028D8  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
 12512  0028DC  C03C  F030         	movff	drawtext@bg,drawChar@bg
 12513  0028E0  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
 12514  0028E4  C03E  F032         	movff	drawtext@size,drawChar@size
 12515  0028E8  5047               	movf	drawtext@cursor_x,w,c
 12516  0028EA  EC68  F00F         	call	_drawChar
 12517                           
 12518                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 12519  0028EE  503E               	movf	drawtext@size,w,c
 12520  0028F0  0D06               	mullw	6
 12521  0028F2  50F3               	movf	prodl,w,c
 12522  0028F4  2447               	addwf	drawtext@cursor_x,w,c
 12523  0028F6  6E47               	movwf	drawtext@cursor_x,c
 12524                           
 12525                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 12526  0028F8  0E80               	movlw	128
 12527  0028FA  6447               	cpfsgt	drawtext@cursor_x,c
 12528  0028FC  D003               	goto	l6214
 12529  0028FE  0E80               	movlw	128
 12530  002900  6E47               	movwf	drawtext@cursor_x,c
 12531  002902  D000               	goto	l6214
 12532  002904                     l6214:
 12533  002904  4A44               	infsnz	drawtext@i,f,c
 12534  002906  2A45               	incf	drawtext@i+1,f,c
 12535  002908  D000               	goto	l6216
 12536  00290A                     l6216:
 12537  00290A  5042               	movf	drawtext@textsize,w,c
 12538  00290C  5C44               	subwf	drawtext@i,w,c
 12539  00290E  5043               	movf	drawtext@textsize+1,w,c
 12540  002910  5845               	subwfb	drawtext@i+1,w,c
 12541  002912  A0D8               	btfss	status,0,c
 12542  002914  D7A6               	goto	l6190
 12543  002916  0012               	return		;funcret
 12544  002918                     __end_of_drawtext:
 12545                           	opt stack 0
 12546                           tblptru	equ	0xFF8
 12547                           tblptrh	equ	0xFF7
 12548                           tblptrl	equ	0xFF6
 12549                           tablat	equ	0xFF5
 12550                           prodh	equ	0xFF4
 12551                           prodl	equ	0xFF3
 12552                           intcon	equ	0xFF2
 12553                           intcon2	equ	0xFF1
 12554                           intcon3	equ	0xFF0
 12555                           postinc0	equ	0xFEE
 12556                           wreg	equ	0xFE8
 12557                           postdec1	equ	0xFE5
 12558                           fsr1l	equ	0xFE1
 12559                           indf2	equ	0xFDF
 12560                           postinc2	equ	0xFDE
 12561                           postdec2	equ	0xFDD
 12562                           fsr2h	equ	0xFDA
 12563                           fsr2l	equ	0xFD9
 12564                           status	equ	0xFD8
 12565                           
 12566 ;; *************** function _strlen *****************
 12567 ;; Defined at:
 12568 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 12569 ;; Parameters:    Size  Location     Type
 12570 ;;  s               2   14[COMRAM] PTR const unsigned char 
 12571 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
 12572 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
 12573 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
 12574 ;;		 -> NS_Count(3), FlashingR_Txt(2), buffer(31), Act_Mode_Txt(2), 
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;  cp              2   18[COMRAM] PTR const unsigned char 
 12577 ;;		 -> NULL(0), FlashingS_Txt(2), SW_MODE_Txt(2), SW_EWLT_Txt(2), 
 12578 ;;		 -> SW_EWPED_Txt(2), SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), 
 12579 ;;		 -> PED_NS_Count(3), EWLT_Count(3), EW_Count(3), NSLT_Count(3), 
 12580 ;;		 -> NS_Count(3), FlashingR_Txt(2), buffer(31), Act_Mode_Txt(2), 
 12581 ;; Return value:  Size  Location     Type
 12582 ;;                  2   14[COMRAM] unsigned int 
 12583 ;; Registers used:
 12584 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12585 ;; Tracked objects:
 12586 ;;		On entry : 0/0
 12587 ;;		On exit  : 0/0
 12588 ;;		Unchanged: 0/0
 12589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12590 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12592 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12593 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12594 ;;Total ram usage:        6 bytes
 12595 ;; Hardware stack levels used:    1
 12596 ;; Hardware stack levels required when called:    2
 12597 ;; This function calls:
 12598 ;;		Nothing
 12599 ;; This function is called by:
 12600 ;;		_drawtext
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           	psect	text55
 12605  00382C                     __ptext55:
 12606                           	opt stack 0
 12607  00382C                     _strlen:
 12608                           	opt stack 24
 12609                           
 12610                           ;incstack = 0
 12611  00382C  C00F  F013         	movff	strlen@s,strlen@cp
 12612  003830  C010  F014         	movff	strlen@s+1,strlen@cp+1
 12613  003834  D003               	goto	l5872
 12614  003836                     l5870:
 12615  003836  4A13               	infsnz	strlen@cp,f,c
 12616  003838  2A14               	incf	strlen@cp+1,f,c
 12617  00383A  D000               	goto	l5872
 12618  00383C                     l5872:
 12619  00383C  C013  FFD9         	movff	strlen@cp,fsr2l
 12620  003840  C014  FFDA         	movff	strlen@cp+1,fsr2h
 12621  003844  50DF               	movf	indf2,w,c
 12622  003846  A4D8               	btfss	status,2,c
 12623  003848  D7F6               	goto	l5870
 12624  00384A  C00F  F011         	movff	strlen@s,??_strlen
 12625  00384E  C010  F012         	movff	strlen@s+1,??_strlen+1
 12626  003852  1E11               	comf	??_strlen,f,c
 12627  003854  1E12               	comf	??_strlen+1,f,c
 12628  003856  4A11               	infsnz	??_strlen,f,c
 12629  003858  2A12               	incf	??_strlen+1,f,c
 12630  00385A  5013               	movf	strlen@cp,w,c
 12631  00385C  2411               	addwf	??_strlen,w,c
 12632  00385E  6E0F               	movwf	?_strlen,c
 12633  003860  5014               	movf	strlen@cp+1,w,c
 12634  003862  2012               	addwfc	??_strlen+1,w,c
 12635  003864  6E10               	movwf	?_strlen+1,c
 12636  003866  D000               	goto	l1298
 12637  003868                     l1298:
 12638  003868  0012               	return		;funcret
 12639  00386A                     __end_of_strlen:
 12640                           	opt stack 0
 12641                           tblptru	equ	0xFF8
 12642                           tblptrh	equ	0xFF7
 12643                           tblptrl	equ	0xFF6
 12644                           tablat	equ	0xFF5
 12645                           prodh	equ	0xFF4
 12646                           prodl	equ	0xFF3
 12647                           intcon	equ	0xFF2
 12648                           intcon2	equ	0xFF1
 12649                           intcon3	equ	0xFF0
 12650                           postinc0	equ	0xFEE
 12651                           wreg	equ	0xFE8
 12652                           postdec1	equ	0xFE5
 12653                           fsr1l	equ	0xFE1
 12654                           indf2	equ	0xFDF
 12655                           postinc2	equ	0xFDE
 12656                           postdec2	equ	0xFDD
 12657                           fsr2h	equ	0xFDA
 12658                           fsr2l	equ	0xFD9
 12659                           status	equ	0xFD8
 12660                           
 12661 ;; *************** function _drawChar *****************
 12662 ;; Defined at:
 12663 ;;		line 480 in file "ST7735_TFT.c"
 12664 ;; Parameters:    Size  Location     Type
 12665 ;;  x               1    wreg     unsigned char 
 12666 ;;  y               1   43[COMRAM] unsigned char 
 12667 ;;  c               1   44[COMRAM] unsigned char 
 12668 ;;  color           2   45[COMRAM] unsigned int 
 12669 ;;  bg              2   47[COMRAM] unsigned int 
 12670 ;;  size            1   49[COMRAM] unsigned char 
 12671 ;; Auto vars:     Size  Location     Type
 12672 ;;  x               1   51[COMRAM] unsigned char 
 12673 ;;  line            1   50[COMRAM] unsigned char 
 12674 ;;  i               1   53[COMRAM] unsigned char 
 12675 ;;  j               1   52[COMRAM] unsigned char 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;		None               void
 12678 ;; Registers used:
 12679 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12685 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12686 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12688 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12689 ;;Total ram usage:       11 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    7
 12692 ;; This function calls:
 12693 ;;		___wmul
 12694 ;;		_drawPixel
 12695 ;;		_fillRect
 12696 ;; This function is called by:
 12697 ;;		_drawtext
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           	psect	text56
 12702  001ED0                     __ptext56:
 12703                           	opt stack 0
 12704  001ED0                     _drawChar:
 12705                           	opt stack 19
 12706                           
 12707                           ;incstack = 0
 12708                           ;drawChar@x stored from wreg
 12709  001ED0  6E34               	movwf	drawChar@x,c
 12710                           
 12711                           ;ST7735_TFT.c: 482: char i, j;
 12712                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 12713  001ED2  0E80               	movlw	128
 12714  001ED4  6034               	cpfslt	drawChar@x,c
 12715  001ED6  D0A6               	goto	l293
 12716  001ED8  0E9F               	movlw	159
 12717  001EDA  642C               	cpfsgt	drawChar@y,c
 12718  001EDC  D001               	goto	l5818
 12719                           
 12720                           ;ST7735_TFT.c: 484: return;
 12721  001EDE  D0A2               	goto	l293
 12722  001EE0                     l5818:
 12723                           
 12724                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 12725  001EE0  5032               	movf	drawChar@size,w,c
 12726  001EE2  A4D8               	btfss	status,2,c
 12727  001EE4  D003               	goto	l5822
 12728  001EE6  0E01               	movlw	1
 12729  001EE8  6E32               	movwf	drawChar@size,c
 12730  001EEA  D000               	goto	l5822
 12731  001EEC                     l5822:
 12732                           
 12733                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 12734  001EEC  0E1F               	movlw	31
 12735  001EEE  642D               	cpfsgt	drawChar@c,c
 12736  001EF0  D004               	goto	l5826
 12737  001EF2  0E7E               	movlw	126
 12738  001EF4  642D               	cpfsgt	drawChar@c,c
 12739  001EF6  D003               	goto	l295
 12740  001EF8  D000               	goto	l5826
 12741  001EFA                     l5826:
 12742                           
 12743                           ;ST7735_TFT.c: 487: c = '?';
 12744  001EFA  0E3F               	movlw	63
 12745  001EFC  6E2D               	movwf	drawChar@c,c
 12746  001EFE                     l295:
 12747                           
 12748                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 12749  001EFE  0E00               	movlw	0
 12750  001F00  6E36               	movwf	drawChar@i,c
 12751  001F02                     l5828:
 12752  001F02  0E04               	movlw	4
 12753  001F04  6436               	cpfsgt	drawChar@i,c
 12754  001F06  D001               	goto	l5832
 12755  001F08  D08D               	goto	l293
 12756  001F0A                     l5832:
 12757                           
 12758                           ;ST7735_TFT.c: 489: unsigned char line;
 12759                           ;ST7735_TFT.c: 490: if(c < 'S')
 12760  001F0A  0E53               	movlw	83
 12761  001F0C  602D               	cpfslt	drawChar@c,c
 12762  001F0E  D015               	goto	l5836
 12763                           
 12764                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 12765  001F10  0EE0               	movlw	224
 12766  001F12  242D               	addwf	drawChar@c,w,c
 12767  001F14  6E1D               	movwf	___wmul@multiplier,c
 12768  001F16  6A1E               	clrf	___wmul@multiplier+1,c
 12769  001F18  0EFF               	movlw	255
 12770  001F1A  221E               	addwfc	___wmul@multiplier+1,f,c
 12771  001F1C  0E00               	movlw	0
 12772  001F1E  6E20               	movwf	___wmul@multiplicand+1,c
 12773  001F20  0E05               	movlw	5
 12774  001F22  6E1F               	movwf	___wmul@multiplicand,c
 12775  001F24  ECDE  F01C         	call	___wmul	;wreg free
 12776  001F28  5036               	movf	drawChar@i,w,c
 12777  001F2A  261D               	addwf	?___wmul,f,c
 12778  001F2C  0E00               	movlw	0
 12779  001F2E  221E               	addwfc	?___wmul+1,f,c
 12780  001F30  0E35               	movlw	low _font
 12781  001F32  241D               	addwf	?___wmul,w,c
 12782  001F34  6EF6               	movwf	tblptrl,c
 12783  001F36  0EFD               	movlw	high _font
 12784  001F38  D014               	goto	L24
 12785  001F3A                     l5836:
 12786                           
 12787                           ;ST7735_TFT.c: 492: else
 12788                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 12789  001F3A  0EAD               	movlw	173
 12790  001F3C  242D               	addwf	drawChar@c,w,c
 12791  001F3E  6E1D               	movwf	___wmul@multiplier,c
 12792  001F40  6A1E               	clrf	___wmul@multiplier+1,c
 12793  001F42  0EFF               	movlw	255
 12794  001F44  221E               	addwfc	___wmul@multiplier+1,f,c
 12795  001F46  0E00               	movlw	0
 12796  001F48  6E20               	movwf	___wmul@multiplicand+1,c
 12797  001F4A  0E05               	movlw	5
 12798  001F4C  6E1F               	movwf	___wmul@multiplicand,c
 12799  001F4E  ECDE  F01C         	call	___wmul	;wreg free
 12800  001F52  5036               	movf	drawChar@i,w,c
 12801  001F54  261D               	addwf	?___wmul,f,c
 12802  001F56  0E00               	movlw	0
 12803  001F58  221E               	addwfc	?___wmul+1,f,c
 12804  001F5A  0E34               	movlw	low _font2
 12805  001F5C  241D               	addwf	?___wmul,w,c
 12806  001F5E  6EF6               	movwf	tblptrl,c
 12807  001F60  0EFE               	movlw	high _font2
 12808  001F62                     L24:
 12809  001F62  201E               	addwfc	?___wmul+1,w,c
 12810  001F64  6EF7               	movwf	tblptrh,c
 12811  001F66                     	if	0	;There are less than 3 active tblptr bytes
 12812  001F66                     	endif
 12813  001F66  0008               	tblrd		*
 12814  001F68  CFF5 F033          	movff	tablat,drawChar@line
 12815  001F6C  D000               	goto	l5838
 12816  001F6E                     l5838:
 12817                           
 12818                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 12819  001F6E  0E00               	movlw	0
 12820  001F70  6E35               	movwf	drawChar@j,c
 12821  001F72                     l5840:
 12822  001F72  0E06               	movlw	6
 12823  001F74  6435               	cpfsgt	drawChar@j,c
 12824  001F76  D001               	goto	l302
 12825  001F78  D053               	goto	l5864
 12826  001F7A                     l302:
 12827                           
 12828                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 12829  001F7A  A033               	btfss	drawChar@line,0,c
 12830  001F7C  D023               	goto	l5850
 12831                           
 12832                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 12833  001F7E  0432               	decf	drawChar@size,w,c
 12834  001F80  A4D8               	btfss	status,2,c
 12835  001F82  D00C               	goto	l5848
 12836  001F84  502C               	movf	drawChar@y,w,c
 12837  001F86  2435               	addwf	drawChar@j,w,c
 12838  001F88  6E16               	movwf	drawPixel@y,c
 12839  001F8A  C02E  F017         	movff	drawChar@color,drawPixel@color
 12840  001F8E  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
 12841  001F92  5034               	movf	drawChar@x,w,c
 12842  001F94  2436               	addwf	drawChar@i,w,c
 12843  001F96  EC87  F01C         	call	_drawPixel
 12844  001F9A  D03E               	goto	l5858
 12845  001F9C                     l5848:
 12846                           
 12847                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 12848  001F9C  5035               	movf	drawChar@j,w,c
 12849  001F9E  0232               	mulwf	drawChar@size,c
 12850  001FA0  50F3               	movf	prodl,w,c
 12851  001FA2  242C               	addwf	drawChar@y,w,c
 12852  001FA4  6E21               	movwf	fillRect@y,c
 12853  001FA6  C032  F022         	movff	drawChar@size,fillRect@w
 12854  001FAA  C032  F023         	movff	drawChar@size,fillRect@h
 12855  001FAE  C02E  F024         	movff	drawChar@color,fillRect@color
 12856  001FB2  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
 12857  001FB6  5036               	movf	drawChar@i,w,c
 12858  001FB8  0232               	mulwf	drawChar@size,c
 12859  001FBA  50F3               	movf	prodl,w,c
 12860  001FBC  2434               	addwf	drawChar@x,w,c
 12861  001FBE  EC28  F01B         	call	_fillRect
 12862                           
 12863                           ;ST7735_TFT.c: 498: }
 12864  001FC2  D02A               	goto	l5858
 12865  001FC4                     l5850:
 12866                           
 12867                           ;ST7735_TFT.c: 499: else if(bg != color) {
 12868  001FC4  502E               	movf	drawChar@color,w,c
 12869  001FC6  1830               	xorwf	drawChar@bg,w,c
 12870  001FC8  E104               	bnz	u5280
 12871  001FCA  502F               	movf	drawChar@color+1,w,c
 12872  001FCC  1831               	xorwf	drawChar@bg+1,w,c
 12873  001FCE  B4D8               	btfsc	status,2,c
 12874  001FD0  D023               	goto	l5858
 12875  001FD2                     u5280:
 12876                           
 12877                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 12878  001FD2  0432               	decf	drawChar@size,w,c
 12879  001FD4  A4D8               	btfss	status,2,c
 12880  001FD6  D00C               	goto	l5856
 12881  001FD8  502C               	movf	drawChar@y,w,c
 12882  001FDA  2435               	addwf	drawChar@j,w,c
 12883  001FDC  6E16               	movwf	drawPixel@y,c
 12884  001FDE  C030  F017         	movff	drawChar@bg,drawPixel@color
 12885  001FE2  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 12886  001FE6  5034               	movf	drawChar@x,w,c
 12887  001FE8  2436               	addwf	drawChar@i,w,c
 12888  001FEA  EC87  F01C         	call	_drawPixel
 12889  001FEE  D014               	goto	l5858
 12890  001FF0                     l5856:
 12891                           
 12892                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 12893  001FF0  5035               	movf	drawChar@j,w,c
 12894  001FF2  0232               	mulwf	drawChar@size,c
 12895  001FF4  50F3               	movf	prodl,w,c
 12896  001FF6  242C               	addwf	drawChar@y,w,c
 12897  001FF8  6E21               	movwf	fillRect@y,c
 12898  001FFA  C032  F022         	movff	drawChar@size,fillRect@w
 12899  001FFE  C032  F023         	movff	drawChar@size,fillRect@h
 12900  002002  C030  F024         	movff	drawChar@bg,fillRect@color
 12901  002006  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 12902  00200A  5036               	movf	drawChar@i,w,c
 12903  00200C  0232               	mulwf	drawChar@size,c
 12904  00200E  50F3               	movf	prodl,w,c
 12905  002010  2434               	addwf	drawChar@x,w,c
 12906  002012  EC28  F01B         	call	_fillRect
 12907  002016  D000               	goto	l5858
 12908  002018                     l5858:
 12909  002018  2A35               	incf	drawChar@j,f,c
 12910  00201A  90D8               	bcf	status,0,c
 12911  00201C  3233               	rrcf	drawChar@line,f,c
 12912  00201E  D7A9               	goto	l5840
 12913  002020                     l5864:
 12914  002020  2A36               	incf	drawChar@i,f,c
 12915  002022  D76F               	goto	l5828
 12916  002024                     l293:
 12917  002024  0012               	return		;funcret
 12918  002026                     __end_of_drawChar:
 12919                           	opt stack 0
 12920                           tblptru	equ	0xFF8
 12921                           tblptrh	equ	0xFF7
 12922                           tblptrl	equ	0xFF6
 12923                           tablat	equ	0xFF5
 12924                           prodh	equ	0xFF4
 12925                           prodl	equ	0xFF3
 12926                           intcon	equ	0xFF2
 12927                           intcon2	equ	0xFF1
 12928                           intcon3	equ	0xFF0
 12929                           postinc0	equ	0xFEE
 12930                           wreg	equ	0xFE8
 12931                           postdec1	equ	0xFE5
 12932                           fsr1l	equ	0xFE1
 12933                           indf2	equ	0xFDF
 12934                           postinc2	equ	0xFDE
 12935                           postdec2	equ	0xFDD
 12936                           fsr2h	equ	0xFDA
 12937                           fsr2l	equ	0xFD9
 12938                           status	equ	0xFD8
 12939                           
 12940 ;; *************** function _fillRect *****************
 12941 ;; Defined at:
 12942 ;;		line 470 in file "ST7735_TFT.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;  x               1    wreg     unsigned char 
 12945 ;;  y               1   32[COMRAM] unsigned char 
 12946 ;;  w               1   33[COMRAM] unsigned char 
 12947 ;;  h               1   34[COMRAM] unsigned char 
 12948 ;;  color           2   35[COMRAM] unsigned int 
 12949 ;; Auto vars:     Size  Location     Type
 12950 ;;  x               1   40[COMRAM] unsigned char 
 12951 ;;  i               2   41[COMRAM] int 
 12952 ;; Return value:  Size  Location     Type
 12953 ;;		None               void
 12954 ;; Registers used:
 12955 ;;		wreg, status,2, status,0, cstack
 12956 ;; Tracked objects:
 12957 ;;		On entry : 0/0
 12958 ;;		On exit  : 0/0
 12959 ;;		Unchanged: 0/0
 12960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12961 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12962 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12963 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12964 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12965 ;;Total ram usage:       11 bytes
 12966 ;; Hardware stack levels used:    1
 12967 ;; Hardware stack levels required when called:    6
 12968 ;; This function calls:
 12969 ;;		_drawFastVLine
 12970 ;; This function is called by:
 12971 ;;		_drawChar
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           	psect	text57
 12976  003650                     __ptext57:
 12977                           	opt stack 0
 12978  003650                     _fillRect:
 12979                           	opt stack 19
 12980                           
 12981                           ;incstack = 0
 12982                           ;fillRect@x stored from wreg
 12983  003650  6E29               	movwf	fillRect@x,c
 12984                           
 12985                           ;ST7735_TFT.c: 472: signed int i;
 12986                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 12987  003652  C029  F02A         	movff	fillRect@x,fillRect@i
 12988  003656  6A2B               	clrf	fillRect@i+1,c
 12989  003658  D00E               	goto	l5608
 12990  00365A                     l5604:
 12991                           
 12992                           ;ST7735_TFT.c: 475: {
 12993                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 12994  00365A  C021  F016         	movff	fillRect@y,drawFastVLine@y
 12995  00365E  C023  F017         	movff	fillRect@h,drawFastVLine@h
 12996  003662  C024  F018         	movff	fillRect@color,drawFastVLine@color
 12997  003666  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 12998  00366A  502A               	movf	fillRect@i,w,c
 12999  00366C  EC52  F018         	call	_drawFastVLine
 13000  003670  4A2A               	infsnz	fillRect@i,f,c
 13001  003672  2A2B               	incf	fillRect@i+1,f,c
 13002  003674  D000               	goto	l5608
 13003  003676                     l5608:
 13004  003676  5022               	movf	fillRect@w,w,c
 13005  003678  C029  F026         	movff	fillRect@x,??_fillRect
 13006  00367C  6A27               	clrf	(??_fillRect+1)& (0+255),c
 13007  00367E  2626               	addwf	??_fillRect,f,c
 13008  003680  0E00               	movlw	0
 13009  003682  2227               	addwfc	??_fillRect+1,f,c
 13010  003684  5026               	movf	??_fillRect,w,c
 13011  003686  5C2A               	subwf	fillRect@i,w,c
 13012  003688  502B               	movf	fillRect@i+1,w,c
 13013  00368A  0A80               	xorlw	128
 13014  00368C  6E28               	movwf	(??_fillRect+2)& (0+255),c
 13015  00368E  5027               	movf	??_fillRect+1,w,c
 13016  003690  0A80               	xorlw	128
 13017  003692  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 13018  003694  A0D8               	btfss	status,0,c
 13019  003696  D7E1               	goto	l5604
 13020  003698  0012               	return		;funcret
 13021  00369A                     __end_of_fillRect:
 13022                           	opt stack 0
 13023                           tblptru	equ	0xFF8
 13024                           tblptrh	equ	0xFF7
 13025                           tblptrl	equ	0xFF6
 13026                           tablat	equ	0xFF5
 13027                           prodh	equ	0xFF4
 13028                           prodl	equ	0xFF3
 13029                           intcon	equ	0xFF2
 13030                           intcon2	equ	0xFF1
 13031                           intcon3	equ	0xFF0
 13032                           postinc0	equ	0xFEE
 13033                           wreg	equ	0xFE8
 13034                           postdec1	equ	0xFE5
 13035                           fsr1l	equ	0xFE1
 13036                           indf2	equ	0xFDF
 13037                           postinc2	equ	0xFDE
 13038                           postdec2	equ	0xFDD
 13039                           fsr2h	equ	0xFDA
 13040                           fsr2l	equ	0xFD9
 13041                           status	equ	0xFD8
 13042                           
 13043 ;; *************** function _drawFastVLine *****************
 13044 ;; Defined at:
 13045 ;;		line 449 in file "ST7735_TFT.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  x               1    wreg     unsigned char 
 13048 ;;  y               1   21[COMRAM] unsigned char 
 13049 ;;  h               1   22[COMRAM] unsigned char 
 13050 ;;  color           2   23[COMRAM] unsigned int 
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;  x               1   31[COMRAM] unsigned char 
 13053 ;;  lo              1   30[COMRAM] unsigned char 
 13054 ;;  hi              1   29[COMRAM] unsigned char 
 13055 ;; Return value:  Size  Location     Type
 13056 ;;		None               void
 13057 ;; Registers used:
 13058 ;;		wreg, status,2, status,0, cstack
 13059 ;; Tracked objects:
 13060 ;;		On entry : 0/0
 13061 ;;		On exit  : 0/0
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13068 ;;Total ram usage:       11 bytes
 13069 ;; Hardware stack levels used:    1
 13070 ;; Hardware stack levels required when called:    5
 13071 ;; This function calls:
 13072 ;;		_setAddrWindow
 13073 ;;		_spiwrite
 13074 ;; This function is called by:
 13075 ;;		_fillRect
 13076 ;;		_fillCircleHelper
 13077 ;;		_fillCircle
 13078 ;;		_drawRect
 13079 ;; This function uses a non-reentrant model
 13080 ;;
 13081                           
 13082                           	psect	text58
 13083  0030A4                     __ptext58:
 13084                           	opt stack 0
 13085  0030A4                     _drawFastVLine:
 13086                           	opt stack 19
 13087                           
 13088                           ;incstack = 0
 13089                           ;drawFastVLine@x stored from wreg
 13090  0030A4  6E20               	movwf	drawFastVLine@x,c
 13091                           
 13092                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 13093                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 13094  0030A6  0E80               	movlw	128
 13095  0030A8  6020               	cpfslt	drawFastVLine@x,c
 13096  0030AA  D03F               	goto	l277
 13097  0030AC  0E9F               	movlw	159
 13098  0030AE  6416               	cpfsgt	drawFastVLine@y,c
 13099  0030B0  D001               	goto	l5538
 13100                           
 13101                           ;ST7735_TFT.c: 453: return;
 13102  0030B2  D03B               	goto	l277
 13103  0030B4                     l5538:
 13104                           
 13105                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 13106  0030B4  0EFF               	movlw	255
 13107  0030B6  6E1A               	movwf	??_drawFastVLine& (0+255),c
 13108  0030B8  0EFF               	movlw	255
 13109  0030BA  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 13110  0030BC  5017               	movf	drawFastVLine@h,w,c
 13111  0030BE  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 13112  0030C2  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 13113  0030C4  261C               	addwf	??_drawFastVLine+2,f,c
 13114  0030C6  0E00               	movlw	0
 13115  0030C8  221D               	addwfc	??_drawFastVLine+3,f,c
 13116  0030CA  501A               	movf	??_drawFastVLine,w,c
 13117  0030CC  261C               	addwf	??_drawFastVLine+2,f,c
 13118  0030CE  501B               	movf	??_drawFastVLine+1,w,c
 13119  0030D0  221D               	addwfc	??_drawFastVLine+3,f,c
 13120  0030D2  BE1D               	btfsc	??_drawFastVLine+3,7,c
 13121  0030D4  D00B               	goto	l5542
 13122  0030D6  501D               	movf	??_drawFastVLine+3,w,c
 13123  0030D8  E104               	bnz	u4660
 13124  0030DA  0EA0               	movlw	160
 13125  0030DC  5C1C               	subwf	??_drawFastVLine+2,w,c
 13126  0030DE  A0D8               	btfss	status,0,c
 13127  0030E0  D005               	goto	l5542
 13128  0030E2                     u4660:
 13129                           
 13130                           ;ST7735_TFT.c: 455: h = 160 - y;
 13131  0030E2  5016               	movf	drawFastVLine@y,w,c
 13132  0030E4  0800               	sublw	0
 13133  0030E6  0FA0               	addlw	160
 13134  0030E8  6E17               	movwf	drawFastVLine@h,c
 13135  0030EA  D000               	goto	l5542
 13136  0030EC                     l5542:
 13137                           
 13138                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 13139  0030EC  5019               	movf	drawFastVLine@color+1,w,c
 13140  0030EE  6E1E               	movwf	drawFastVLine@hi,c
 13141  0030F0  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 13142                           
 13143                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 13144  0030F4  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 13145  0030F8  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 13146  0030FC  5016               	movf	drawFastVLine@y,w,c
 13147  0030FE  2417               	addwf	drawFastVLine@h,w,c
 13148  003100  6E1A               	movwf	??_drawFastVLine& (0+255),c
 13149  003102  041A               	decf	??_drawFastVLine,w,c
 13150  003104  6E14               	movwf	setAddrWindow@y1,c
 13151  003106  5020               	movf	drawFastVLine@x,w,c
 13152  003108  EC01  F01B         	call	_setAddrWindow
 13153                           
 13154                           ;ST7735_TFT.c: 458: PORTCbits.RC0 = 1;
 13155  00310C  8082               	bsf	3970,0,c	;volatile
 13156                           
 13157                           ;ST7735_TFT.c: 459: PORTCbits.RC2 = 0;
 13158  00310E  9482               	bcf	3970,2,c	;volatile
 13159                           
 13160                           ;ST7735_TFT.c: 461: while (h--) {
 13161  003110  D007               	goto	l5554
 13162  003112                     l5552:
 13163                           
 13164                           ;ST7735_TFT.c: 462: spiwrite(hi);
 13165  003112  501E               	movf	drawFastVLine@hi,w,c
 13166  003114  EC61  F01D         	call	_spiwrite
 13167                           
 13168                           ;ST7735_TFT.c: 463: spiwrite(lo);
 13169  003118  501F               	movf	drawFastVLine@lo,w,c
 13170  00311A  EC61  F01D         	call	_spiwrite
 13171  00311E  D000               	goto	l5554
 13172  003120                     l5554:
 13173  003120  0617               	decf	drawFastVLine@h,f,c
 13174  003122  2817               	incf	drawFastVLine@h,w,c
 13175  003124  A4D8               	btfss	status,2,c
 13176  003126  D7F5               	goto	l5552
 13177                           
 13178                           ;ST7735_TFT.c: 464: }
 13179                           ;ST7735_TFT.c: 465: PORTCbits.RC2 = 1;
 13180  003128  8482               	bsf	3970,2,c	;volatile
 13181  00312A                     l277:
 13182  00312A  0012               	return		;funcret
 13183  00312C                     __end_of_drawFastVLine:
 13184                           	opt stack 0
 13185                           tblptru	equ	0xFF8
 13186                           tblptrh	equ	0xFF7
 13187                           tblptrl	equ	0xFF6
 13188                           tablat	equ	0xFF5
 13189                           prodh	equ	0xFF4
 13190                           prodl	equ	0xFF3
 13191                           intcon	equ	0xFF2
 13192                           intcon2	equ	0xFF1
 13193                           intcon3	equ	0xFF0
 13194                           postinc0	equ	0xFEE
 13195                           wreg	equ	0xFE8
 13196                           postdec1	equ	0xFE5
 13197                           fsr1l	equ	0xFE1
 13198                           indf2	equ	0xFDF
 13199                           postinc2	equ	0xFDE
 13200                           postdec2	equ	0xFDD
 13201                           fsr2h	equ	0xFDA
 13202                           fsr2l	equ	0xFD9
 13203                           status	equ	0xFD8
 13204                           
 13205 ;; *************** function _drawPixel *****************
 13206 ;; Defined at:
 13207 ;;		line 440 in file "ST7735_TFT.c"
 13208 ;; Parameters:    Size  Location     Type
 13209 ;;  x               1    wreg     unsigned char 
 13210 ;;  y               1   21[COMRAM] unsigned char 
 13211 ;;  color           2   22[COMRAM] unsigned int 
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;  x               1   24[COMRAM] unsigned char 
 13214 ;; Return value:  Size  Location     Type
 13215 ;;		None               void
 13216 ;; Registers used:
 13217 ;;		wreg, status,2, status,0, cstack
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13223 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13226 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13227 ;;Total ram usage:        4 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    5
 13230 ;; This function calls:
 13231 ;;		_setAddrWindow
 13232 ;;		_write_data
 13233 ;; This function is called by:
 13234 ;;		_drawChar
 13235 ;;		_drawCircle
 13236 ;;		_drawCircleHelper
 13237 ;; This function uses a non-reentrant model
 13238 ;;
 13239                           
 13240                           	psect	text59
 13241  00390E                     __ptext59:
 13242                           	opt stack 0
 13243  00390E                     _drawPixel:
 13244                           	opt stack 20
 13245                           
 13246                           ;incstack = 0
 13247                           ;drawPixel@x stored from wreg
 13248  00390E  6E19               	movwf	drawPixel@x,c
 13249                           
 13250                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 13251  003910  0E80               	movlw	128
 13252  003912  6019               	cpfslt	drawPixel@x,c
 13253  003914  D013               	goto	l271
 13254  003916  0E9F               	movlw	159
 13255  003918  6416               	cpfsgt	drawPixel@y,c
 13256  00391A  D001               	goto	l5596
 13257                           
 13258                           ;ST7735_TFT.c: 443: return;
 13259  00391C  D00F               	goto	l271
 13260  00391E                     l5596:
 13261                           
 13262                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 13263  00391E  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 13264  003922  2819               	incf	drawPixel@x,w,c
 13265  003924  6E13               	movwf	setAddrWindow@x1,c
 13266  003926  2816               	incf	drawPixel@y,w,c
 13267  003928  6E14               	movwf	setAddrWindow@y1,c
 13268  00392A  5019               	movf	drawPixel@x,w,c
 13269  00392C  EC01  F01B         	call	_setAddrWindow
 13270                           
 13271                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 13272  003930  5018               	movf	drawPixel@color+1,w,c
 13273  003932  EC7D  F01D         	call	_write_data
 13274                           
 13275                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 13276  003936  5017               	movf	drawPixel@color,w,c
 13277  003938  EC7D  F01D         	call	_write_data
 13278  00393C                     l271:
 13279  00393C  0012               	return		;funcret
 13280  00393E                     __end_of_drawPixel:
 13281                           	opt stack 0
 13282                           tblptru	equ	0xFF8
 13283                           tblptrh	equ	0xFF7
 13284                           tblptrl	equ	0xFF6
 13285                           tablat	equ	0xFF5
 13286                           prodh	equ	0xFF4
 13287                           prodl	equ	0xFF3
 13288                           intcon	equ	0xFF2
 13289                           intcon2	equ	0xFF1
 13290                           intcon3	equ	0xFF0
 13291                           postinc0	equ	0xFEE
 13292                           wreg	equ	0xFE8
 13293                           postdec1	equ	0xFE5
 13294                           fsr1l	equ	0xFE1
 13295                           indf2	equ	0xFDF
 13296                           postinc2	equ	0xFDE
 13297                           postdec2	equ	0xFDD
 13298                           fsr2h	equ	0xFDA
 13299                           fsr2l	equ	0xFD9
 13300                           status	equ	0xFD8
 13301                           
 13302 ;; *************** function _setAddrWindow *****************
 13303 ;; Defined at:
 13304 ;;		line 425 in file "ST7735_TFT.c"
 13305 ;; Parameters:    Size  Location     Type
 13306 ;;  x0              1    wreg     unsigned char 
 13307 ;;  y0              1   17[COMRAM] unsigned char 
 13308 ;;  x1              1   18[COMRAM] unsigned char 
 13309 ;;  y1              1   19[COMRAM] unsigned char 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;  x0              1   20[COMRAM] unsigned char 
 13312 ;; Return value:  Size  Location     Type
 13313 ;;		None               void
 13314 ;; Registers used:
 13315 ;;		wreg, status,2, status,0, cstack
 13316 ;; Tracked objects:
 13317 ;;		On entry : 0/0
 13318 ;;		On exit  : 0/0
 13319 ;;		Unchanged: 0/0
 13320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13321 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13322 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13324 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13325 ;;Total ram usage:        4 bytes
 13326 ;; Hardware stack levels used:    1
 13327 ;; Hardware stack levels required when called:    4
 13328 ;; This function calls:
 13329 ;;		_write_command
 13330 ;;		_write_data
 13331 ;; This function is called by:
 13332 ;;		_drawPixel
 13333 ;;		_drawFastVLine
 13334 ;;		_fillRectangle
 13335 ;;		_drawFastHLine
 13336 ;; This function uses a non-reentrant model
 13337 ;;
 13338                           
 13339                           	psect	text60
 13340  003602                     __ptext60:
 13341                           	opt stack 0
 13342  003602                     _setAddrWindow:
 13343                           	opt stack 19
 13344                           
 13345                           ;incstack = 0
 13346                           ;setAddrWindow@x0 stored from wreg
 13347  003602  6E15               	movwf	setAddrWindow@x0,c
 13348                           
 13349                           ;ST7735_TFT.c: 427: write_command(0x2A);
 13350  003604  0E2A               	movlw	42
 13351  003606  EC85  F01D         	call	_write_command
 13352                           
 13353                           ;ST7735_TFT.c: 428: write_data(0);
 13354  00360A  0E00               	movlw	0
 13355  00360C  EC7D  F01D         	call	_write_data
 13356                           
 13357                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 13358  003610  5015               	movf	setAddrWindow@x0,w,c
 13359  003612  246D               	addwf	_colstart,w,c
 13360  003614  EC7D  F01D         	call	_write_data
 13361                           
 13362                           ;ST7735_TFT.c: 430: write_data(0);
 13363  003618  0E00               	movlw	0
 13364  00361A  EC7D  F01D         	call	_write_data
 13365                           
 13366                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 13367  00361E  5013               	movf	setAddrWindow@x1,w,c
 13368  003620  246D               	addwf	_colstart,w,c
 13369  003622  EC7D  F01D         	call	_write_data
 13370                           
 13371                           ;ST7735_TFT.c: 432: write_command(0x2B);
 13372  003626  0E2B               	movlw	43
 13373  003628  EC85  F01D         	call	_write_command
 13374                           
 13375                           ;ST7735_TFT.c: 433: write_data(0);
 13376  00362C  0E00               	movlw	0
 13377  00362E  EC7D  F01D         	call	_write_data
 13378                           
 13379                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 13380  003632  5012               	movf	setAddrWindow@y0,w,c
 13381  003634  2470               	addwf	_rowstart,w,c
 13382  003636  EC7D  F01D         	call	_write_data
 13383                           
 13384                           ;ST7735_TFT.c: 435: write_data(0);
 13385  00363A  0E00               	movlw	0
 13386  00363C  EC7D  F01D         	call	_write_data
 13387                           
 13388                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 13389  003640  5014               	movf	setAddrWindow@y1,w,c
 13390  003642  2470               	addwf	_rowstart,w,c
 13391  003644  EC7D  F01D         	call	_write_data
 13392                           
 13393                           ;ST7735_TFT.c: 437: write_command(0x2C);
 13394  003648  0E2C               	movlw	44
 13395  00364A  EC85  F01D         	call	_write_command
 13396  00364E  0012               	return		;funcret
 13397  003650                     __end_of_setAddrWindow:
 13398                           	opt stack 0
 13399                           tblptru	equ	0xFF8
 13400                           tblptrh	equ	0xFF7
 13401                           tblptrl	equ	0xFF6
 13402                           tablat	equ	0xFF5
 13403                           prodh	equ	0xFF4
 13404                           prodl	equ	0xFF3
 13405                           intcon	equ	0xFF2
 13406                           intcon2	equ	0xFF1
 13407                           intcon3	equ	0xFF0
 13408                           postinc0	equ	0xFEE
 13409                           wreg	equ	0xFE8
 13410                           postdec1	equ	0xFE5
 13411                           fsr1l	equ	0xFE1
 13412                           indf2	equ	0xFDF
 13413                           postinc2	equ	0xFDE
 13414                           postdec2	equ	0xFDD
 13415                           fsr2h	equ	0xFDA
 13416                           fsr2l	equ	0xFD9
 13417                           status	equ	0xFD8
 13418                           
 13419 ;; *************** function _write_data *****************
 13420 ;; Defined at:
 13421 ;;		line 242 in file "ST7735_TFT.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;  data_           1    wreg     unsigned char 
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;  data_           1   16[COMRAM] unsigned char 
 13426 ;; Return value:  Size  Location     Type
 13427 ;;		None               void
 13428 ;; Registers used:
 13429 ;;		wreg, status,2, cstack
 13430 ;; Tracked objects:
 13431 ;;		On entry : 0/0
 13432 ;;		On exit  : 0/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13439 ;;Total ram usage:        1 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; Hardware stack levels required when called:    3
 13442 ;; This function calls:
 13443 ;;		_spiwrite
 13444 ;; This function is called by:
 13445 ;;		_Rcmd1
 13446 ;;		_Rcmd2red
 13447 ;;		_Rcmd3
 13448 ;;		_setAddrWindow
 13449 ;;		_drawPixel
 13450 ;;		_TFT_GreenTab_Initialize
 13451 ;;		_Bcmd
 13452 ;;		_setScrollDefinition
 13453 ;;		_Rcmd2green
 13454 ;;		_VerticalScroll
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458                           	psect	text61
 13459  003AFA                     __ptext61:
 13460                           	opt stack 0
 13461  003AFA                     _write_data:
 13462                           	opt stack 19
 13463                           
 13464                           ;incstack = 0
 13465                           ;write_data@data_ stored from wreg
 13466  003AFA  6E11               	movwf	write_data@data_,c
 13467                           
 13468                           ;ST7735_TFT.c: 244: PORTCbits.RC2 = 0;
 13469  003AFC  9482               	bcf	3970,2,c	;volatile
 13470                           
 13471                           ;ST7735_TFT.c: 245: PORTCbits.RC0 = 1;
 13472  003AFE  8082               	bsf	3970,0,c	;volatile
 13473                           
 13474                           ;ST7735_TFT.c: 246: spiwrite(data_);
 13475  003B00  5011               	movf	write_data@data_,w,c
 13476  003B02  EC61  F01D         	call	_spiwrite
 13477                           
 13478                           ;ST7735_TFT.c: 247: PORTCbits.RC2 = 1;
 13479  003B06  8482               	bsf	3970,2,c	;volatile
 13480  003B08  0012               	return		;funcret
 13481  003B0A                     __end_of_write_data:
 13482                           	opt stack 0
 13483                           tblptru	equ	0xFF8
 13484                           tblptrh	equ	0xFF7
 13485                           tblptrl	equ	0xFF6
 13486                           tablat	equ	0xFF5
 13487                           prodh	equ	0xFF4
 13488                           prodl	equ	0xFF3
 13489                           intcon	equ	0xFF2
 13490                           intcon2	equ	0xFF1
 13491                           intcon3	equ	0xFF0
 13492                           postinc0	equ	0xFEE
 13493                           wreg	equ	0xFE8
 13494                           postdec1	equ	0xFE5
 13495                           fsr1l	equ	0xFE1
 13496                           indf2	equ	0xFDF
 13497                           postinc2	equ	0xFDE
 13498                           postdec2	equ	0xFDD
 13499                           fsr2h	equ	0xFDA
 13500                           fsr2l	equ	0xFD9
 13501                           status	equ	0xFD8
 13502                           
 13503 ;; *************** function _write_command *****************
 13504 ;; Defined at:
 13505 ;;		line 231 in file "ST7735_TFT.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;  cmd_            1    wreg     unsigned char 
 13508 ;; Auto vars:     Size  Location     Type
 13509 ;;  cmd_            1   16[COMRAM] unsigned char 
 13510 ;; Return value:  Size  Location     Type
 13511 ;;		None               void
 13512 ;; Registers used:
 13513 ;;		wreg, status,2, cstack
 13514 ;; Tracked objects:
 13515 ;;		On entry : 0/0
 13516 ;;		On exit  : 0/0
 13517 ;;		Unchanged: 0/0
 13518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13522 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13523 ;;Total ram usage:        1 bytes
 13524 ;; Hardware stack levels used:    1
 13525 ;; Hardware stack levels required when called:    3
 13526 ;; This function calls:
 13527 ;;		_spiwrite
 13528 ;; This function is called by:
 13529 ;;		_Rcmd1
 13530 ;;		_Rcmd2red
 13531 ;;		_Rcmd3
 13532 ;;		_setAddrWindow
 13533 ;;		_TFT_GreenTab_Initialize
 13534 ;;		_Bcmd
 13535 ;;		_setScrollDefinition
 13536 ;;		_Rcmd2green
 13537 ;;		_VerticalScroll
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           	psect	text62
 13542  003B0A                     __ptext62:
 13543                           	opt stack 0
 13544  003B0A                     _write_command:
 13545                           	opt stack 19
 13546                           
 13547                           ;incstack = 0
 13548                           ;write_command@cmd_ stored from wreg
 13549  003B0A  6E11               	movwf	write_command@cmd_,c
 13550                           
 13551                           ;ST7735_TFT.c: 233: PORTCbits.RC2 = 0;
 13552  003B0C  9482               	bcf	3970,2,c	;volatile
 13553                           
 13554                           ;ST7735_TFT.c: 235: PORTCbits.RC0 = 0;
 13555  003B0E  9082               	bcf	3970,0,c	;volatile
 13556                           
 13557                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 13558  003B10  5011               	movf	write_command@cmd_,w,c
 13559  003B12  EC61  F01D         	call	_spiwrite
 13560                           
 13561                           ;ST7735_TFT.c: 238: PORTCbits.RC2 = 1;
 13562  003B16  8482               	bsf	3970,2,c	;volatile
 13563  003B18  0012               	return		;funcret
 13564  003B1A                     __end_of_write_command:
 13565                           	opt stack 0
 13566                           tblptru	equ	0xFF8
 13567                           tblptrh	equ	0xFF7
 13568                           tblptrl	equ	0xFF6
 13569                           tablat	equ	0xFF5
 13570                           prodh	equ	0xFF4
 13571                           prodl	equ	0xFF3
 13572                           intcon	equ	0xFF2
 13573                           intcon2	equ	0xFF1
 13574                           intcon3	equ	0xFF0
 13575                           postinc0	equ	0xFEE
 13576                           wreg	equ	0xFE8
 13577                           postdec1	equ	0xFE5
 13578                           fsr1l	equ	0xFE1
 13579                           indf2	equ	0xFDF
 13580                           postinc2	equ	0xFDE
 13581                           postdec2	equ	0xFDD
 13582                           fsr2h	equ	0xFDA
 13583                           fsr2l	equ	0xFD9
 13584                           status	equ	0xFD8
 13585                           
 13586 ;; *************** function _spiwrite *****************
 13587 ;; Defined at:
 13588 ;;		line 222 in file "ST7735_TFT.c"
 13589 ;; Parameters:    Size  Location     Type
 13590 ;;  spidata         1    wreg     unsigned char 
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;  spidata         1   15[COMRAM] unsigned char 
 13593 ;;  x               1   14[COMRAM] unsigned char 
 13594 ;; Return value:  Size  Location     Type
 13595 ;;		None               void
 13596 ;; Registers used:
 13597 ;;		wreg
 13598 ;; Tracked objects:
 13599 ;;		On entry : 0/0
 13600 ;;		On exit  : 0/0
 13601 ;;		Unchanged: 0/0
 13602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13604 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13606 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13607 ;;Total ram usage:        2 bytes
 13608 ;; Hardware stack levels used:    1
 13609 ;; Hardware stack levels required when called:    2
 13610 ;; This function calls:
 13611 ;;		Nothing
 13612 ;; This function is called by:
 13613 ;;		_write_command
 13614 ;;		_write_data
 13615 ;;		_drawFastVLine
 13616 ;;		_fillRectangle
 13617 ;;		_drawFastHLine
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621                           	psect	text63
 13622  003AC2                     __ptext63:
 13623                           	opt stack 0
 13624  003AC2                     _spiwrite:
 13625                           	opt stack 21
 13626                           
 13627                           ;incstack = 0
 13628                           ;spiwrite@spidata stored from wreg
 13629  003AC2  6E10               	movwf	spiwrite@spidata,c
 13630                           
 13631                           ;ST7735_TFT.c: 224: char x;
 13632                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 13633  003AC4  969E               	bcf	3998,3,c	;volatile
 13634                           
 13635                           ;ST7735_TFT.c: 226: x = SSPBUF;
 13636  003AC6  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 13637                           
 13638                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 13639  003ACA  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 13640                           
 13641                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 13642  003ACE  D000               	goto	l227
 13643  003AD0                     l227:
 13644  003AD0  A0C7               	btfss	4039,0,c	;volatile
 13645  003AD2  D7FE               	goto	l227
 13646  003AD4  0012               	return		;funcret
 13647  003AD6                     __end_of_spiwrite:
 13648                           	opt stack 0
 13649                           tblptru	equ	0xFF8
 13650                           tblptrh	equ	0xFF7
 13651                           tblptrl	equ	0xFF6
 13652                           tablat	equ	0xFF5
 13653                           prodh	equ	0xFF4
 13654                           prodl	equ	0xFF3
 13655                           intcon	equ	0xFF2
 13656                           intcon2	equ	0xFF1
 13657                           intcon3	equ	0xFF0
 13658                           postinc0	equ	0xFEE
 13659                           wreg	equ	0xFE8
 13660                           postdec1	equ	0xFE5
 13661                           fsr1l	equ	0xFE1
 13662                           indf2	equ	0xFDF
 13663                           postinc2	equ	0xFDE
 13664                           postdec2	equ	0xFDD
 13665                           fsr2h	equ	0xFDA
 13666                           fsr2l	equ	0xFD9
 13667                           status	equ	0xFD8
 13668                           
 13669 ;; *************** function ___wmul *****************
 13670 ;; Defined at:
 13671 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  multiplier      2   28[COMRAM] unsigned int 
 13674 ;;  multiplicand    2   30[COMRAM] unsigned int 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;  product         2   32[COMRAM] unsigned int 
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  2   28[COMRAM] unsigned int 
 13679 ;; Registers used:
 13680 ;;		wreg, status,2, status,0, prodl, prodh
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13690 ;;Total ram usage:        6 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; Hardware stack levels required when called:    2
 13693 ;; This function calls:
 13694 ;;		Nothing
 13695 ;; This function is called by:
 13696 ;;		_delay_ms
 13697 ;;		_drawChar
 13698 ;;		_update_LCD_misc
 13699 ;;		_fround
 13700 ;;		_scale
 13701 ;;		_printf
 13702 ;; This function uses a non-reentrant model
 13703 ;;
 13704                           
 13705                           	psect	text64
 13706  0039BC                     __ptext64:
 13707                           	opt stack 0
 13708  0039BC                     ___wmul:
 13709                           	opt stack 23
 13710                           
 13711                           ;incstack = 0
 13712  0039BC  501D               	movf	___wmul@multiplier,w,c
 13713  0039BE  021F               	mulwf	___wmul@multiplicand,c
 13714  0039C0  CFF3 F021          	movff	prodl,___wmul@product
 13715  0039C4  CFF4 F022          	movff	prodh,___wmul@product+1
 13716  0039C8  501D               	movf	___wmul@multiplier,w,c
 13717  0039CA  0220               	mulwf	___wmul@multiplicand+1,c
 13718  0039CC  50F3               	movf	prodl,w,c
 13719  0039CE  2622               	addwf	___wmul@product+1,f,c
 13720  0039D0  501E               	movf	___wmul@multiplier+1,w,c
 13721  0039D2  021F               	mulwf	___wmul@multiplicand,c
 13722  0039D4  50F3               	movf	prodl,w,c
 13723  0039D6  2622               	addwf	___wmul@product+1,f,c
 13724  0039D8  C021  F01D         	movff	___wmul@product,?___wmul
 13725  0039DC  C022  F01E         	movff	___wmul@product+1,?___wmul+1
 13726  0039E0  D000               	goto	l703
 13727  0039E2                     l703:
 13728  0039E2  0012               	return		;funcret
 13729  0039E4                     __end_of___wmul:
 13730                           	opt stack 0
 13731                           tblptru	equ	0xFF8
 13732                           tblptrh	equ	0xFF7
 13733                           tblptrl	equ	0xFF6
 13734                           tablat	equ	0xFF5
 13735                           prodh	equ	0xFF4
 13736                           prodl	equ	0xFF3
 13737                           intcon	equ	0xFF2
 13738                           intcon2	equ	0xFF1
 13739                           intcon3	equ	0xFF0
 13740                           postinc0	equ	0xFEE
 13741                           wreg	equ	0xFE8
 13742                           postdec1	equ	0xFE5
 13743                           fsr1l	equ	0xFE1
 13744                           indf2	equ	0xFDF
 13745                           postinc2	equ	0xFDE
 13746                           postdec2	equ	0xFDD
 13747                           fsr2h	equ	0xFDA
 13748                           fsr2l	equ	0xFD9
 13749                           status	equ	0xFD8
 13750                           
 13751 ;; *************** function ___ftdiv *****************
 13752 ;; Defined at:
 13753 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13754 ;; Parameters:    Size  Location     Type
 13755 ;;  f1              3   38[COMRAM] float 
 13756 ;;  f2              3   41[COMRAM] float 
 13757 ;; Auto vars:     Size  Location     Type
 13758 ;;  f3              3   48[COMRAM] float 
 13759 ;;  sign            1   52[COMRAM] unsigned char 
 13760 ;;  exp             1   51[COMRAM] unsigned char 
 13761 ;;  cntr            1   47[COMRAM] unsigned char 
 13762 ;; Return value:  Size  Location     Type
 13763 ;;                  3   38[COMRAM] float 
 13764 ;; Registers used:
 13765 ;;		wreg, status,2, status,0, cstack
 13766 ;; Tracked objects:
 13767 ;;		On entry : 0/0
 13768 ;;		On exit  : 0/0
 13769 ;;		Unchanged: 0/0
 13770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13771 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13772 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13773 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13774 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13775 ;;Total ram usage:       15 bytes
 13776 ;; Hardware stack levels used:    1
 13777 ;; Hardware stack levels required when called:    3
 13778 ;; This function calls:
 13779 ;;		___ftpack
 13780 ;; This function is called by:
 13781 ;;		_update_LCD_misc
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784                           
 13785                           	psect	text65
 13786  002758                     __ptext65:
 13787                           	opt stack 0
 13788  002758                     ___ftdiv:
 13789                           	opt stack 23
 13790                           
 13791                           ;incstack = 0
 13792  002758  C029  F02D         	movff	___ftdiv@f1+2,??___ftdiv
 13793  00275C  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 13794  00275E  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 13795  002760  3428               	rlcf	___ftdiv@f1+1,w,c
 13796  002762  362D               	rlcf	??___ftdiv& (0+255),f,c
 13797  002764  E301               	bnc	u6141
 13798  002766  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 13799  002768                     u6141:
 13800  002768  502D               	movf	??___ftdiv,w,c
 13801  00276A  6E34               	movwf	___ftdiv@exp,c
 13802  00276C  5034               	movf	___ftdiv@exp,w,c
 13803  00276E  A4D8               	btfss	status,2,c
 13804  002770  D002               	goto	l6416
 13805  002772  D00E               	goto	l6418
 13806  002774  D061               	goto	l1100
 13807  002776                     l6416:
 13808  002776  C02C  F02D         	movff	___ftdiv@f2+2,??___ftdiv
 13809  00277A  6A2E               	clrf	(??___ftdiv+1)& (0+255),c
 13810  00277C  6A2F               	clrf	(??___ftdiv+2)& (0+255),c
 13811  00277E  342B               	rlcf	___ftdiv@f2+1,w,c
 13812  002780  362D               	rlcf	??___ftdiv& (0+255),f,c
 13813  002782  E301               	bnc	u6161
 13814  002784  802E               	bsf	(??___ftdiv+1)& (0+255),0,c
 13815  002786                     u6161:
 13816  002786  502D               	movf	??___ftdiv,w,c
 13817  002788  6E35               	movwf	___ftdiv@sign,c
 13818  00278A  5035               	movf	___ftdiv@sign,w,c
 13819  00278C  A4D8               	btfss	status,2,c
 13820  00278E  D007               	goto	l6422
 13821  002790                     l6418:
 13822  002790  0E00               	movlw	0
 13823  002792  6E27               	movwf	?___ftdiv,c
 13824  002794  0E00               	movlw	0
 13825  002796  6E28               	movwf	?___ftdiv+1,c
 13826  002798  0E00               	movlw	0
 13827  00279A  6E29               	movwf	?___ftdiv+2,c
 13828  00279C  D04D               	goto	l1100
 13829  00279E                     l6422:
 13830  00279E  0E00               	movlw	0
 13831  0027A0  6E31               	movwf	___ftdiv@f3,c
 13832  0027A2  0E00               	movlw	0
 13833  0027A4  6E32               	movwf	___ftdiv@f3+1,c
 13834  0027A6  0E00               	movlw	0
 13835  0027A8  6E33               	movwf	___ftdiv@f3+2,c
 13836  0027AA  5035               	movf	___ftdiv@sign,w,c
 13837  0027AC  0F89               	addlw	137
 13838  0027AE  5E34               	subwf	___ftdiv@exp,f,c
 13839  0027B0  C029  F035         	movff	___ftdiv@f1+2,___ftdiv@sign
 13840  0027B4  502C               	movf	___ftdiv@f2+2,w,c
 13841  0027B6  1A35               	xorwf	___ftdiv@sign,f,c
 13842  0027B8  0E80               	movlw	128
 13843  0027BA  1635               	andwf	___ftdiv@sign,f,c
 13844  0027BC  8E28               	bsf	___ftdiv@f1+1,7,c
 13845  0027BE  0EFF               	movlw	255
 13846  0027C0  1627               	andwf	___ftdiv@f1,f,c
 13847  0027C2  0EFF               	movlw	255
 13848  0027C4  1628               	andwf	___ftdiv@f1+1,f,c
 13849  0027C6  0E00               	movlw	0
 13850  0027C8  1629               	andwf	___ftdiv@f1+2,f,c
 13851  0027CA  8E2B               	bsf	___ftdiv@f2+1,7,c
 13852  0027CC  0EFF               	movlw	255
 13853  0027CE  162A               	andwf	___ftdiv@f2,f,c
 13854  0027D0  0EFF               	movlw	255
 13855  0027D2  162B               	andwf	___ftdiv@f2+1,f,c
 13856  0027D4  0E00               	movlw	0
 13857  0027D6  162C               	andwf	___ftdiv@f2+2,f,c
 13858  0027D8  0E18               	movlw	24
 13859  0027DA  6E30               	movwf	___ftdiv@cntr,c
 13860  0027DC  D000               	goto	l6442
 13861  0027DE                     l6442:
 13862  0027DE  90D8               	bcf	status,0,c
 13863  0027E0  3631               	rlcf	___ftdiv@f3,f,c
 13864  0027E2  3632               	rlcf	___ftdiv@f3+1,f,c
 13865  0027E4  3633               	rlcf	___ftdiv@f3+2,f,c
 13866  0027E6  502A               	movf	___ftdiv@f2,w,c
 13867  0027E8  5C27               	subwf	___ftdiv@f1,w,c
 13868  0027EA  502B               	movf	___ftdiv@f2+1,w,c
 13869  0027EC  5828               	subwfb	___ftdiv@f1+1,w,c
 13870  0027EE  502C               	movf	___ftdiv@f2+2,w,c
 13871  0027F0  5829               	subwfb	___ftdiv@f1+2,w,c
 13872  0027F2  A0D8               	btfss	status,0,c
 13873  0027F4  D007               	goto	l1103
 13874  0027F6  502A               	movf	___ftdiv@f2,w,c
 13875  0027F8  5E27               	subwf	___ftdiv@f1,f,c
 13876  0027FA  502B               	movf	___ftdiv@f2+1,w,c
 13877  0027FC  5A28               	subwfb	___ftdiv@f1+1,f,c
 13878  0027FE  502C               	movf	___ftdiv@f2+2,w,c
 13879  002800  5A29               	subwfb	___ftdiv@f1+2,f,c
 13880  002802  8031               	bsf	___ftdiv@f3,0,c
 13881  002804                     l1103:
 13882  002804  90D8               	bcf	status,0,c
 13883  002806  3627               	rlcf	___ftdiv@f1,f,c
 13884  002808  3628               	rlcf	___ftdiv@f1+1,f,c
 13885  00280A  3629               	rlcf	___ftdiv@f1+2,f,c
 13886  00280C  2E30               	decfsz	___ftdiv@cntr,f,c
 13887  00280E  D7E7               	goto	l6442
 13888  002810  D000               	goto	l6452
 13889  002812                     l6452:
 13890  002812  C031  F00F         	movff	___ftdiv@f3,___ftpack@arg
 13891  002816  C032  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13892  00281A  C033  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13893  00281E  C034  F012         	movff	___ftdiv@exp,___ftpack@exp
 13894  002822  C035  F013         	movff	___ftdiv@sign,___ftpack@sign
 13895  002826  ECCB  F015         	call	___ftpack	;wreg free
 13896  00282A  C00F  F027         	movff	?___ftpack,?___ftdiv
 13897  00282E  C010  F028         	movff	?___ftpack+1,?___ftdiv+1
 13898  002832  C011  F029         	movff	?___ftpack+2,?___ftdiv+2
 13899  002836  D000               	goto	l1100
 13900  002838                     l1100:
 13901  002838  0012               	return		;funcret
 13902  00283A                     __end_of___ftdiv:
 13903                           	opt stack 0
 13904                           tblptru	equ	0xFF8
 13905                           tblptrh	equ	0xFF7
 13906                           tblptrl	equ	0xFF6
 13907                           tablat	equ	0xFF5
 13908                           prodh	equ	0xFF4
 13909                           prodl	equ	0xFF3
 13910                           intcon	equ	0xFF2
 13911                           intcon2	equ	0xFF1
 13912                           intcon3	equ	0xFF0
 13913                           postinc0	equ	0xFEE
 13914                           wreg	equ	0xFE8
 13915                           postdec1	equ	0xFE5
 13916                           fsr1l	equ	0xFE1
 13917                           indf2	equ	0xFDF
 13918                           postinc2	equ	0xFDE
 13919                           postdec2	equ	0xFDD
 13920                           fsr2h	equ	0xFDA
 13921                           fsr2l	equ	0xFD9
 13922                           status	equ	0xFD8
 13923                           
 13924 ;; *************** function ___awtoft *****************
 13925 ;; Defined at:
 13926 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;  c               2   34[COMRAM] int 
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;  sign            1   37[COMRAM] unsigned char 
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  3   34[COMRAM] float 
 13933 ;; Registers used:
 13934 ;;		wreg, status,2, status,0, cstack
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 0/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13940 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13941 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;Total ram usage:        4 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; Hardware stack levels required when called:    3
 13947 ;; This function calls:
 13948 ;;		___ftpack
 13949 ;; This function is called by:
 13950 ;;		_main
 13951 ;;		_update_LCD_misc
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           	psect	text66
 13956  00386A                     __ptext66:
 13957                           	opt stack 0
 13958  00386A                     ___awtoft:
 13959                           	opt stack 27
 13960                           
 13961                           ;incstack = 0
 13962  00386A  0E00               	movlw	0
 13963  00386C  6E26               	movwf	___awtoft@sign,c
 13964  00386E  AE24               	btfss	___awtoft@c+1,7,c
 13965  003870  D007               	goto	l6464
 13966  003872  6C23               	negf	___awtoft@c,c
 13967  003874  1E24               	comf	___awtoft@c+1,f,c
 13968  003876  B0D8               	btfsc	status,0,c
 13969  003878  2A24               	incf	___awtoft@c+1,f,c
 13970  00387A  0E01               	movlw	1
 13971  00387C  6E26               	movwf	___awtoft@sign,c
 13972  00387E  D000               	goto	l6464
 13973  003880                     l6464:
 13974  003880  C023  F00F         	movff	___awtoft@c,___ftpack@arg
 13975  003884  C024  F010         	movff	___awtoft@c+1,___ftpack@arg+1
 13976  003888  6A11               	clrf	___ftpack@arg+2,c
 13977  00388A  0E8E               	movlw	142
 13978  00388C  6E12               	movwf	___ftpack@exp,c
 13979  00388E  C026  F013         	movff	___awtoft@sign,___ftpack@sign
 13980  003892  ECCB  F015         	call	___ftpack	;wreg free
 13981  003896  C00F  F023         	movff	?___ftpack,?___awtoft
 13982  00389A  C010  F024         	movff	?___ftpack+1,?___awtoft+1
 13983  00389E  C011  F025         	movff	?___ftpack+2,?___awtoft+2
 13984  0038A2  D000               	goto	l921
 13985  0038A4                     l921:
 13986  0038A4  0012               	return		;funcret
 13987  0038A6                     __end_of___awtoft:
 13988                           	opt stack 0
 13989                           tblptru	equ	0xFF8
 13990                           tblptrh	equ	0xFF7
 13991                           tblptrl	equ	0xFF6
 13992                           tablat	equ	0xFF5
 13993                           prodh	equ	0xFF4
 13994                           prodl	equ	0xFF3
 13995                           intcon	equ	0xFF2
 13996                           intcon2	equ	0xFF1
 13997                           intcon3	equ	0xFF0
 13998                           postinc0	equ	0xFEE
 13999                           wreg	equ	0xFE8
 14000                           postdec1	equ	0xFE5
 14001                           fsr1l	equ	0xFE1
 14002                           indf2	equ	0xFDF
 14003                           postinc2	equ	0xFDE
 14004                           postdec2	equ	0xFDD
 14005                           fsr2h	equ	0xFDA
 14006                           fsr2l	equ	0xFD9
 14007                           status	equ	0xFD8
 14008                           
 14009 ;; *************** function ___ftpack *****************
 14010 ;; Defined at:
 14011 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 14012 ;; Parameters:    Size  Location     Type
 14013 ;;  arg             3   14[COMRAM] unsigned um
 14014 ;;  exp             1   17[COMRAM] unsigned char 
 14015 ;;  sign            1   18[COMRAM] unsigned char 
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;		None
 14018 ;; Return value:  Size  Location     Type
 14019 ;;                  3   14[COMRAM] float 
 14020 ;; Registers used:
 14021 ;;		wreg, status,2, status,0
 14022 ;; Tracked objects:
 14023 ;;		On entry : 0/0
 14024 ;;		On exit  : 0/0
 14025 ;;		Unchanged: 0/0
 14026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14027 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14029 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;Total ram usage:        8 bytes
 14032 ;; Hardware stack levels used:    1
 14033 ;; Hardware stack levels required when called:    2
 14034 ;; This function calls:
 14035 ;;		Nothing
 14036 ;; This function is called by:
 14037 ;;		___awtoft
 14038 ;;		___ftadd
 14039 ;;		___ftdiv
 14040 ;;		___ftmul
 14041 ;;		___lltoft
 14042 ;; This function uses a non-reentrant model
 14043 ;;
 14044                           
 14045                           	psect	text67
 14046  002B96                     __ptext67:
 14047                           	opt stack 0
 14048  002B96                     ___ftpack:
 14049                           	opt stack 27
 14050                           
 14051                           ;incstack = 0
 14052  002B96  5012               	movf	___ftpack@exp,w,c
 14053  002B98  B4D8               	btfsc	status,2,c
 14054  002B9A  D005               	goto	l5560
 14055  002B9C  500F               	movf	___ftpack@arg,w,c
 14056  002B9E  1010               	iorwf	___ftpack@arg+1,w,c
 14057  002BA0  1011               	iorwf	___ftpack@arg+2,w,c
 14058  002BA2  A4D8               	btfss	status,2,c
 14059  002BA4  D00E               	goto	l5566
 14060  002BA6                     l5560:
 14061  002BA6  0E00               	movlw	0
 14062  002BA8  6E0F               	movwf	?___ftpack,c
 14063  002BAA  0E00               	movlw	0
 14064  002BAC  6E10               	movwf	?___ftpack+1,c
 14065  002BAE  0E00               	movlw	0
 14066  002BB0  6E11               	movwf	?___ftpack+2,c
 14067  002BB2  D053               	goto	l1028
 14068  002BB4  D006               	goto	l5566
 14069  002BB6                     l5564:
 14070  002BB6  2A12               	incf	___ftpack@exp,f,c
 14071  002BB8  90D8               	bcf	status,0,c
 14072  002BBA  3211               	rrcf	___ftpack@arg+2,f,c
 14073  002BBC  3210               	rrcf	___ftpack@arg+1,f,c
 14074  002BBE  320F               	rrcf	___ftpack@arg,f,c
 14075  002BC0  D000               	goto	l5566
 14076  002BC2                     l5566:
 14077  002BC2  0E00               	movlw	0
 14078  002BC4  140F               	andwf	___ftpack@arg,w,c
 14079  002BC6  6E14               	movwf	??___ftpack& (0+255),c
 14080  002BC8  0E00               	movlw	0
 14081  002BCA  1410               	andwf	___ftpack@arg+1,w,c
 14082  002BCC  6E15               	movwf	(??___ftpack+1)& (0+255),c
 14083  002BCE  0EFE               	movlw	254
 14084  002BD0  1411               	andwf	___ftpack@arg+2,w,c
 14085  002BD2  6E16               	movwf	(??___ftpack+2)& (0+255),c
 14086  002BD4  5014               	movf	??___ftpack,w,c
 14087  002BD6  1015               	iorwf	??___ftpack+1,w,c
 14088  002BD8  1016               	iorwf	??___ftpack+2,w,c
 14089  002BDA  B4D8               	btfsc	status,2,c
 14090  002BDC  D00E               	goto	l5572
 14091  002BDE  D7EB               	goto	l5564
 14092  002BE0  D00C               	goto	l5572
 14093  002BE2                     l5568:
 14094  002BE2  2A12               	incf	___ftpack@exp,f,c
 14095  002BE4  0E01               	movlw	1
 14096  002BE6  260F               	addwf	___ftpack@arg,f,c
 14097  002BE8  0E00               	movlw	0
 14098  002BEA  2210               	addwfc	___ftpack@arg+1,f,c
 14099  002BEC  0E00               	movlw	0
 14100  002BEE  2211               	addwfc	___ftpack@arg+2,f,c
 14101  002BF0  90D8               	bcf	status,0,c
 14102  002BF2  3211               	rrcf	___ftpack@arg+2,f,c
 14103  002BF4  3210               	rrcf	___ftpack@arg+1,f,c
 14104  002BF6  320F               	rrcf	___ftpack@arg,f,c
 14105  002BF8  D000               	goto	l5572
 14106  002BFA                     l5572:
 14107  002BFA  0E00               	movlw	0
 14108  002BFC  140F               	andwf	___ftpack@arg,w,c
 14109  002BFE  6E14               	movwf	??___ftpack& (0+255),c
 14110  002C00  0E00               	movlw	0
 14111  002C02  1410               	andwf	___ftpack@arg+1,w,c
 14112  002C04  6E15               	movwf	(??___ftpack+1)& (0+255),c
 14113  002C06  0EFF               	movlw	255
 14114  002C08  1411               	andwf	___ftpack@arg+2,w,c
 14115  002C0A  6E16               	movwf	(??___ftpack+2)& (0+255),c
 14116  002C0C  5014               	movf	??___ftpack,w,c
 14117  002C0E  1015               	iorwf	??___ftpack+1,w,c
 14118  002C10  1016               	iorwf	??___ftpack+2,w,c
 14119  002C12  B4D8               	btfsc	status,2,c
 14120  002C14  D008               	goto	l5576
 14121  002C16  D7E5               	goto	l5568
 14122  002C18  D006               	goto	l5576
 14123  002C1A                     l5574:
 14124  002C1A  0612               	decf	___ftpack@exp,f,c
 14125  002C1C  90D8               	bcf	status,0,c
 14126  002C1E  360F               	rlcf	___ftpack@arg,f,c
 14127  002C20  3610               	rlcf	___ftpack@arg+1,f,c
 14128  002C22  3611               	rlcf	___ftpack@arg+2,f,c
 14129  002C24  D000               	goto	l5576
 14130  002C26                     l5576:
 14131  002C26  BE10               	btfsc	___ftpack@arg+1,7,c
 14132  002C28  D004               	goto	l1039
 14133  002C2A  0E02               	movlw	2
 14134  002C2C  6012               	cpfslt	___ftpack@exp,c
 14135  002C2E  D7F5               	goto	l5574
 14136  002C30  D000               	goto	l1039
 14137  002C32                     l1039:
 14138  002C32  B012               	btfsc	___ftpack@exp,0,c
 14139  002C34  D002               	goto	l5582
 14140  002C36  9E10               	bcf	___ftpack@arg+1,7,c
 14141  002C38  D000               	goto	l5582
 14142  002C3A                     l5582:
 14143  002C3A  90D8               	bcf	status,0,c
 14144  002C3C  3212               	rrcf	___ftpack@exp,f,c
 14145  002C3E  5012               	movf	___ftpack@exp,w,c
 14146  002C40  1211               	iorwf	___ftpack@arg+2,f,c
 14147  002C42  5013               	movf	___ftpack@sign,w,c
 14148  002C44  B4D8               	btfsc	status,2,c
 14149  002C46  D002               	goto	l5588
 14150  002C48  8E11               	bsf	___ftpack@arg+2,7,c
 14151  002C4A  D000               	goto	l5588
 14152  002C4C                     l5588:
 14153  002C4C  C00F  F00F         	movff	___ftpack@arg,?___ftpack
 14154  002C50  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
 14155  002C54  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
 14156  002C58  D000               	goto	l1028
 14157  002C5A                     l1028:
 14158  002C5A  0012               	return		;funcret
 14159  002C5C                     __end_of___ftpack:
 14160                           	opt stack 0
 14161                           tblptru	equ	0xFF8
 14162                           tblptrh	equ	0xFF7
 14163                           tblptrl	equ	0xFF6
 14164                           tablat	equ	0xFF5
 14165                           prodh	equ	0xFF4
 14166                           prodl	equ	0xFF3
 14167                           intcon	equ	0xFF2
 14168                           intcon2	equ	0xFF1
 14169                           intcon3	equ	0xFF0
 14170                           postinc0	equ	0xFEE
 14171                           wreg	equ	0xFE8
 14172                           postdec1	equ	0xFE5
 14173                           fsr1l	equ	0xFE1
 14174                           indf2	equ	0xFDF
 14175                           postinc2	equ	0xFDE
 14176                           postdec2	equ	0xFDD
 14177                           fsr2h	equ	0xFDA
 14178                           fsr2l	equ	0xFD9
 14179                           status	equ	0xFD8
 14180                           
 14181 ;; *************** function _strcpy *****************
 14182 ;; Defined at:
 14183 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  to              2   14[COMRAM] PTR unsigned char 
 14186 ;;		 -> NULL(0), buffer(31), 
 14187 ;;  from            2   16[COMRAM] PTR const unsigned char 
 14188 ;;		 -> STR_16(21), STR_15(4), STR_14(4), STR_13(7), 
 14189 ;;		 -> STR_12(10), STR_11(7), STR_10(12), STR_9(2), 
 14190 ;;		 -> STR_8(4), STR_7(4), STR_6(6), STR_5(22), 
 14191 ;;		 -> STR_4(2), STR_3(2), STR_2(2), STR_1(2), 
 14192 ;; Auto vars:     Size  Location     Type
 14193 ;;  cp              2   18[COMRAM] PTR unsigned char 
 14194 ;;		 -> NULL(0), buffer(31), 
 14195 ;; Return value:  Size  Location     Type
 14196 ;;                  2   14[COMRAM] PTR unsigned char 
 14197 ;; Registers used:
 14198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14204 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14208 ;;Total ram usage:        6 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    2
 14211 ;; This function calls:
 14212 ;;		Nothing
 14213 ;; This function is called by:
 14214 ;;		_Wait_One_Second
 14215 ;;		_Wait_One_Second_With_Beep
 14216 ;;		_Initialize_Screen
 14217 ;; This function uses a non-reentrant model
 14218 ;;
 14219                           
 14220                           	psect	text68
 14221  0038DC                     __ptext68:
 14222                           	opt stack 0
 14223  0038DC                     _strcpy:
 14224                           	opt stack 25
 14225                           
 14226                           ;incstack = 0
 14227  0038DC  C00F  F013         	movff	strcpy@to,strcpy@cp
 14228  0038E0  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
 14229  0038E4  D005               	goto	l6536
 14230  0038E6                     l6534:
 14231  0038E6  4A13               	infsnz	strcpy@cp,f,c
 14232  0038E8  2A14               	incf	strcpy@cp+1,f,c
 14233  0038EA  4A11               	infsnz	strcpy@from,f,c
 14234  0038EC  2A12               	incf	strcpy@from+1,f,c
 14235  0038EE  D000               	goto	l6536
 14236  0038F0                     l6536:
 14237  0038F0  C011  FFF6         	movff	strcpy@from,tblptrl
 14238  0038F4  C012  FFF7         	movff	strcpy@from+1,tblptrh
 14239  0038F8                     	if	0	;tblptru may be non-zero
 14240  0038F8                     	endif
 14241  0038F8                     	if	0	;tblptru may be non-zero
 14242  0038F8                     	endif
 14243  0038F8  C013  FFD9         	movff	strcpy@cp,fsr2l
 14244  0038FC  C014  FFDA         	movff	strcpy@cp+1,fsr2h
 14245  003900  0008               	tblrd		*
 14246  003902  CFF5 FFDF          	movff	tablat,indf2
 14247  003906  50DF               	movf	indf2,w,c
 14248  003908  A4D8               	btfss	status,2,c
 14249  00390A  D7ED               	goto	l6534
 14250                           
 14251                           ;	Return value of _strcpy is never used
 14252  00390C  0012               	return		;funcret
 14253  00390E                     __end_of_strcpy:
 14254                           	opt stack 0
 14255                           tblptru	equ	0xFF8
 14256                           tblptrh	equ	0xFF7
 14257                           tblptrl	equ	0xFF6
 14258                           tablat	equ	0xFF5
 14259                           prodh	equ	0xFF4
 14260                           prodl	equ	0xFF3
 14261                           intcon	equ	0xFF2
 14262                           intcon2	equ	0xFF1
 14263                           intcon3	equ	0xFF0
 14264                           postinc0	equ	0xFEE
 14265                           wreg	equ	0xFE8
 14266                           postdec1	equ	0xFE5
 14267                           fsr1l	equ	0xFE1
 14268                           indf2	equ	0xFDF
 14269                           postinc2	equ	0xFDE
 14270                           postdec2	equ	0xFDD
 14271                           fsr2h	equ	0xFDA
 14272                           fsr2l	equ	0xFD9
 14273                           status	equ	0xFD8
 14274                           
 14275 ;; *************** function _Wait_Half_Second *****************
 14276 ;; Defined at:
 14277 ;;		line 314 in file "Lab8.c"
 14278 ;; Parameters:    Size  Location     Type
 14279 ;;		None
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;		None
 14282 ;; Return value:  Size  Location     Type
 14283 ;;		None               void
 14284 ;; Registers used:
 14285 ;;		wreg, status,2
 14286 ;; Tracked objects:
 14287 ;;		On entry : 0/0
 14288 ;;		On exit  : 0/0
 14289 ;;		Unchanged: 0/0
 14290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14295 ;;Total ram usage:        0 bytes
 14296 ;; Hardware stack levels used:    1
 14297 ;; Hardware stack levels required when called:    2
 14298 ;; This function calls:
 14299 ;;		Nothing
 14300 ;; This function is called by:
 14301 ;;		_Wait_One_Second
 14302 ;;		_Wait_One_Second_With_Beep
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           	psect	text69
 14307  003A4A                     __ptext69:
 14308                           	opt stack 0
 14309  003A4A                     _Wait_Half_Second:
 14310                           	opt stack 25
 14311                           
 14312                           ;Lab8.c: 316: T0CON = 0x03;
 14313                           
 14314                           ;incstack = 0
 14315  003A4A  0E03               	movlw	3
 14316  003A4C  6ED5               	movwf	4053,c	;volatile
 14317                           
 14318                           ;Lab8.c: 317: TMR0L = 0xDB;
 14319  003A4E  0EDB               	movlw	219
 14320  003A50  6ED6               	movwf	4054,c	;volatile
 14321                           
 14322                           ;Lab8.c: 318: TMR0H = 0x0B;
 14323  003A52  0E0B               	movlw	11
 14324  003A54  6ED7               	movwf	4055,c	;volatile
 14325                           
 14326                           ;Lab8.c: 319: INTCONbits.TMR0IF = 0;
 14327  003A56  94F2               	bcf	intcon,2,c	;volatile
 14328                           
 14329                           ;Lab8.c: 320: T0CONbits.TMR0ON = 1;
 14330  003A58  8ED5               	bsf	4053,7,c	;volatile
 14331                           
 14332                           ;Lab8.c: 321: while (INTCONbits.TMR0IF == 0);
 14333  003A5A  D000               	goto	l460
 14334  003A5C                     l460:
 14335  003A5C  A4F2               	btfss	intcon,2,c	;volatile
 14336  003A5E  D7FE               	goto	l460
 14337                           
 14338                           ;Lab8.c: 322: T0CONbits.TMR0ON = 0;
 14339  003A60  9ED5               	bcf	4053,7,c	;volatile
 14340  003A62  0012               	return		;funcret
 14341  003A64                     __end_of_Wait_Half_Second:
 14342                           	opt stack 0
 14343                           tblptru	equ	0xFF8
 14344                           tblptrh	equ	0xFF7
 14345                           tblptrl	equ	0xFF6
 14346                           tablat	equ	0xFF5
 14347                           prodh	equ	0xFF4
 14348                           prodl	equ	0xFF3
 14349                           intcon	equ	0xFF2
 14350                           intcon2	equ	0xFF1
 14351                           intcon3	equ	0xFF0
 14352                           postinc0	equ	0xFEE
 14353                           wreg	equ	0xFE8
 14354                           postdec1	equ	0xFE5
 14355                           fsr1l	equ	0xFE1
 14356                           indf2	equ	0xFDF
 14357                           postinc2	equ	0xFDE
 14358                           postdec2	equ	0xFDD
 14359                           fsr2h	equ	0xFDA
 14360                           fsr2l	equ	0xFD9
 14361                           status	equ	0xFD8
 14362                           
 14363 ;; *************** function _Deactivate_Buzzer *****************
 14364 ;; Defined at:
 14365 ;;		line 401 in file "Lab8.c"
 14366 ;; Parameters:    Size  Location     Type
 14367 ;;		None
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;		None
 14370 ;; Return value:  Size  Location     Type
 14371 ;;		None               void
 14372 ;; Registers used:
 14373 ;;		wreg, status,2
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/0
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14383 ;;Total ram usage:        0 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    2
 14386 ;; This function calls:
 14387 ;;		Nothing
 14388 ;; This function is called by:
 14389 ;;		_Wait_One_Second_With_Beep
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           	psect	text70
 14394  003B3E                     __ptext70:
 14395                           	opt stack 0
 14396  003B3E                     _Deactivate_Buzzer:
 14397                           	opt stack 25
 14398                           
 14399                           ;Lab8.c: 402: CCP2CON = 0x0;
 14400                           
 14401                           ;incstack = 0
 14402  003B3E  0E00               	movlw	0
 14403  003B40  6EBA               	movwf	4026,c	;volatile
 14404                           
 14405                           ;Lab8.c: 403: PORTBbits.RB3 = 0;
 14406  003B42  9681               	bcf	3969,3,c	;volatile
 14407  003B44  0012               	return		;funcret
 14408  003B46                     __end_of_Deactivate_Buzzer:
 14409                           	opt stack 0
 14410                           tblptru	equ	0xFF8
 14411                           tblptrh	equ	0xFF7
 14412                           tblptrl	equ	0xFF6
 14413                           tablat	equ	0xFF5
 14414                           prodh	equ	0xFF4
 14415                           prodl	equ	0xFF3
 14416                           intcon	equ	0xFF2
 14417                           intcon2	equ	0xFF1
 14418                           intcon3	equ	0xFF0
 14419                           postinc0	equ	0xFEE
 14420                           wreg	equ	0xFE8
 14421                           postdec1	equ	0xFE5
 14422                           fsr1l	equ	0xFE1
 14423                           indf2	equ	0xFDF
 14424                           postinc2	equ	0xFDE
 14425                           postdec2	equ	0xFDD
 14426                           fsr2h	equ	0xFDA
 14427                           fsr2l	equ	0xFD9
 14428                           status	equ	0xFD8
 14429                           
 14430 ;; *************** function _Activate_Buzzer *****************
 14431 ;; Defined at:
 14432 ;;		line 395 in file "Lab8.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;		None
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;		None
 14437 ;; Return value:  Size  Location     Type
 14438 ;;		None               void
 14439 ;; Registers used:
 14440 ;;		wreg, status,2
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14450 ;;Total ram usage:        0 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; Hardware stack levels required when called:    2
 14453 ;; This function calls:
 14454 ;;		Nothing
 14455 ;; This function is called by:
 14456 ;;		_Wait_One_Second_With_Beep
 14457 ;; This function uses a non-reentrant model
 14458 ;;
 14459                           
 14460                           	psect	text71
 14461  003AE8                     __ptext71:
 14462                           	opt stack 0
 14463  003AE8                     _Activate_Buzzer:
 14464                           	opt stack 25
 14465                           
 14466                           ;Lab8.c: 396: PR2 = 0b11111001 ;
 14467                           
 14468                           ;incstack = 0
 14469  003AE8  0EF9               	movlw	249
 14470  003AEA  6ECB               	movwf	4043,c	;volatile
 14471                           
 14472                           ;Lab8.c: 397: T2CON = 0b00000101 ;
 14473  003AEC  0E05               	movlw	5
 14474  003AEE  6ECA               	movwf	4042,c	;volatile
 14475                           
 14476                           ;Lab8.c: 398: CCPR2L = 0b01001010 ;
 14477  003AF0  0E4A               	movlw	74
 14478  003AF2  6EBB               	movwf	4027,c	;volatile
 14479                           
 14480                           ;Lab8.c: 399: CCP2CON = 0b00111100 ;
 14481  003AF4  0E3C               	movlw	60
 14482  003AF6  6EBA               	movwf	4026,c	;volatile
 14483  003AF8  0012               	return		;funcret
 14484  003AFA                     __end_of_Activate_Buzzer:
 14485                           	opt stack 0
 14486                           tblptru	equ	0xFF8
 14487                           tblptrh	equ	0xFF7
 14488                           tblptrl	equ	0xFF6
 14489                           tablat	equ	0xFF5
 14490                           prodh	equ	0xFF4
 14491                           prodl	equ	0xFF3
 14492                           intcon	equ	0xFF2
 14493                           intcon2	equ	0xFF1
 14494                           intcon3	equ	0xFF0
 14495                           postinc0	equ	0xFEE
 14496                           wreg	equ	0xFE8
 14497                           postdec1	equ	0xFE5
 14498                           fsr1l	equ	0xFE1
 14499                           indf2	equ	0xFDF
 14500                           postinc2	equ	0xFDE
 14501                           postdec2	equ	0xFDD
 14502                           fsr2h	equ	0xFDA
 14503                           fsr2l	equ	0xFD9
 14504                           status	equ	0xFD8
 14505                           
 14506 ;; *************** function _chkisr *****************
 14507 ;; Defined at:
 14508 ;;		line 236 in file "Lab8.c"
 14509 ;; Parameters:    Size  Location     Type
 14510 ;;		None
 14511 ;; Auto vars:     Size  Location     Type
 14512 ;;		None
 14513 ;; Return value:  Size  Location     Type
 14514 ;;		None               void
 14515 ;; Registers used:
 14516 ;;		wreg, status,2, status,0, cstack
 14517 ;; Tracked objects:
 14518 ;;		On entry : 0/0
 14519 ;;		On exit  : 0/0
 14520 ;;		Unchanged: 0/0
 14521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14524 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14525 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14526 ;;Total ram usage:       14 bytes
 14527 ;; Hardware stack levels used:    1
 14528 ;; Hardware stack levels required when called:    1
 14529 ;; This function calls:
 14530 ;;		_INT0_ISR
 14531 ;;		_INT1_ISR
 14532 ;;		_INT2_ISR
 14533 ;; This function is called by:
 14534 ;;		Interrupt level 2
 14535 ;; This function uses a non-reentrant model
 14536 ;;
 14537                           
 14538                           	psect	intcode
 14539  000008                     __pintcode:
 14540                           	opt stack 0
 14541  000008                     _chkisr:
 14542                           	opt stack 18
 14543                           
 14544                           ;incstack = 0
 14545  000008  CFFA F001          	movff	pclath,??_chkisr
 14546  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 14547  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 14548  000014  ED96  F018         	call	int_func,f	;refresh shadow registers
 14549                           pclatu	equ	0xFFB
 14550                           pclath	equ	0xFFA
 14551                           tblptru	equ	0xFF8
 14552                           tblptrh	equ	0xFF7
 14553                           tblptrl	equ	0xFF6
 14554                           tablat	equ	0xFF5
 14555                           prodh	equ	0xFF4
 14556                           prodl	equ	0xFF3
 14557                           intcon	equ	0xFF2
 14558                           intcon2	equ	0xFF1
 14559                           intcon3	equ	0xFF0
 14560                           postinc0	equ	0xFEE
 14561                           fsr0l	equ	0xFE9
 14562                           wreg	equ	0xFE8
 14563                           postdec1	equ	0xFE5
 14564                           fsr1l	equ	0xFE1
 14565                           indf2	equ	0xFDF
 14566                           postinc2	equ	0xFDE
 14567                           postdec2	equ	0xFDD
 14568                           fsr2h	equ	0xFDA
 14569                           fsr2l	equ	0xFD9
 14570                           status	equ	0xFD8
 14571                           
 14572                           	psect	intcode_body
 14573  00312C                     __pintcode_body:
 14574                           	opt stack 18
 14575  00312C                     int_func:
 14576                           	opt stack 18
 14577  00312C  0006               	pop		; remove dummy address from shadow register refresh
 14578  00312E  CFEA F004          	movff	fsr0h,??_chkisr+3
 14579  003132  CFE1 F005          	movff	fsr1l,??_chkisr+4
 14580  003136  CFE2 F006          	movff	fsr1h,??_chkisr+5
 14581  00313A  CFD9 F007          	movff	fsr2l,??_chkisr+6
 14582  00313E  CFDA F008          	movff	fsr2h,??_chkisr+7
 14583  003142  CFF3 F009          	movff	prodl,??_chkisr+8
 14584  003146  CFF4 F00A          	movff	prodh,??_chkisr+9
 14585  00314A  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 14586  00314E  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 14587  003152  CFF8 F00D          	movff	tblptru,??_chkisr+12
 14588  003156  CFF5 F00E          	movff	tablat,??_chkisr+13
 14589                           
 14590                           ;Lab8.c: 237: if (INTCONbits.INT0IF == 1) INT0_ISR();
 14591  00315A  A2F2               	btfss	intcon,1,c	;volatile
 14592  00315C  D003               	goto	i2l5486
 14593  00315E  EC3F  F01D         	call	_INT0_ISR	;wreg free
 14594  003162  D000               	goto	i2l5486
 14595  003164                     i2l5486:
 14596                           
 14597                           ;Lab8.c: 239: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 14598  003164  A0F0               	btfss	intcon3,0,c	;volatile
 14599  003166  D003               	goto	i2l5490
 14600  003168  EC32  F01D         	call	_INT1_ISR	;wreg free
 14601  00316C  D000               	goto	i2l5490
 14602  00316E                     i2l5490:
 14603                           
 14604                           ;Lab8.c: 240: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 14605  00316E  A2F0               	btfss	intcon3,1,c	;volatile
 14606  003170  D003               	goto	i2l418
 14607  003172  ECA3  F01D         	call	_INT2_ISR	;wreg free
 14608  003176  D000               	goto	i2l418
 14609  003178                     i2l418:
 14610  003178  C00E  FFF5         	movff	??_chkisr+13,tablat
 14611  00317C  C00D  FFF8         	movff	??_chkisr+12,tblptru
 14612  003180  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 14613  003184  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 14614  003188  C00A  FFF4         	movff	??_chkisr+9,prodh
 14615  00318C  C009  FFF3         	movff	??_chkisr+8,prodl
 14616  003190  C008  FFDA         	movff	??_chkisr+7,fsr2h
 14617  003194  C007  FFD9         	movff	??_chkisr+6,fsr2l
 14618  003198  C006  FFE2         	movff	??_chkisr+5,fsr1h
 14619  00319C  C005  FFE1         	movff	??_chkisr+4,fsr1l
 14620  0031A0  C004  FFEA         	movff	??_chkisr+3,fsr0h
 14621  0031A4  C003  FFE9         	movff	??_chkisr+2,fsr0l
 14622  0031A8  C002  FFFB         	movff	??_chkisr+1,pclatu
 14623  0031AC  C001  FFFA         	movff	??_chkisr,pclath
 14624  0031B0  0011               	retfie		f
 14625  0031B2                     __end_of_chkisr:
 14626                           	opt stack 0
 14627                           pclatu	equ	0xFFB
 14628                           pclath	equ	0xFFA
 14629                           tblptru	equ	0xFF8
 14630                           tblptrh	equ	0xFF7
 14631                           tblptrl	equ	0xFF6
 14632                           tablat	equ	0xFF5
 14633                           prodh	equ	0xFF4
 14634                           prodl	equ	0xFF3
 14635                           intcon	equ	0xFF2
 14636                           intcon2	equ	0xFF1
 14637                           intcon3	equ	0xFF0
 14638                           postinc0	equ	0xFEE
 14639                           fsr0h	equ	0xFEA
 14640                           fsr0l	equ	0xFE9
 14641                           wreg	equ	0xFE8
 14642                           postdec1	equ	0xFE5
 14643                           fsr1h	equ	0xFE2
 14644                           fsr1l	equ	0xFE1
 14645                           indf2	equ	0xFDF
 14646                           postinc2	equ	0xFDE
 14647                           postdec2	equ	0xFDD
 14648                           fsr2h	equ	0xFDA
 14649                           fsr2l	equ	0xFD9
 14650                           status	equ	0xFD8
 14651                           
 14652 ;; *************** function _INT2_ISR *****************
 14653 ;; Defined at:
 14654 ;;		line 258 in file "Lab8.c"
 14655 ;; Parameters:    Size  Location     Type
 14656 ;;		None
 14657 ;; Auto vars:     Size  Location     Type
 14658 ;;		None
 14659 ;; Return value:  Size  Location     Type
 14660 ;;		None               void
 14661 ;; Registers used:
 14662 ;;		wreg, status,2
 14663 ;; Tracked objects:
 14664 ;;		On entry : 0/0
 14665 ;;		On exit  : 0/0
 14666 ;;		Unchanged: 0/0
 14667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14672 ;;Total ram usage:        0 bytes
 14673 ;; Hardware stack levels used:    1
 14674 ;; This function calls:
 14675 ;;		Nothing
 14676 ;; This function is called by:
 14677 ;;		_chkisr
 14678 ;; This function uses a non-reentrant model
 14679 ;;
 14680                           
 14681                           	psect	text73
 14682  003B46                     __ptext73:
 14683                           	opt stack 0
 14684  003B46                     _INT2_ISR:
 14685                           	opt stack 18
 14686                           
 14687                           ;Lab8.c: 259: INTCON3bits.INT2IF=0;
 14688                           
 14689                           ;incstack = 0
 14690  003B46  92F0               	bcf	intcon3,1,c	;volatile
 14691                           
 14692                           ;Lab8.c: 260: FLASHING_REQUEST = 1;
 14693  003B48  0E01               	movlw	1
 14694  003B4A  6E64               	movwf	_FLASHING_REQUEST,c
 14695  003B4C  0012               	return		;funcret
 14696  003B4E                     __end_of_INT2_ISR:
 14697                           	opt stack 0
 14698                           pclatu	equ	0xFFB
 14699                           pclath	equ	0xFFA
 14700                           tblptru	equ	0xFF8
 14701                           tblptrh	equ	0xFF7
 14702                           tblptrl	equ	0xFF6
 14703                           tablat	equ	0xFF5
 14704                           prodh	equ	0xFF4
 14705                           prodl	equ	0xFF3
 14706                           intcon	equ	0xFF2
 14707                           intcon2	equ	0xFF1
 14708                           intcon3	equ	0xFF0
 14709                           postinc0	equ	0xFEE
 14710                           fsr0h	equ	0xFEA
 14711                           fsr0l	equ	0xFE9
 14712                           wreg	equ	0xFE8
 14713                           postdec1	equ	0xFE5
 14714                           fsr1h	equ	0xFE2
 14715                           fsr1l	equ	0xFE1
 14716                           indf2	equ	0xFDF
 14717                           postinc2	equ	0xFDE
 14718                           postdec2	equ	0xFDD
 14719                           fsr2h	equ	0xFDA
 14720                           fsr2l	equ	0xFD9
 14721                           status	equ	0xFD8
 14722                           
 14723 ;; *************** function _INT1_ISR *****************
 14724 ;; Defined at:
 14725 ;;		line 250 in file "Lab8.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;		None
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;		None
 14730 ;; Return value:  Size  Location     Type
 14731 ;;		None               void
 14732 ;; Registers used:
 14733 ;;		wreg, status,2, status,0
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14743 ;;Total ram usage:        0 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; This function calls:
 14746 ;;		Nothing
 14747 ;; This function is called by:
 14748 ;;		_chkisr
 14749 ;; This function uses a non-reentrant model
 14750 ;;
 14751                           
 14752                           	psect	text74
 14753  003A64                     __ptext74:
 14754                           	opt stack 0
 14755  003A64                     _INT1_ISR:
 14756                           	opt stack 18
 14757                           
 14758                           ;Lab8.c: 251: INTCON3bits.INT1IF=0;
 14759                           
 14760                           ;incstack = 0
 14761  003A64  90F0               	bcf	intcon3,0,c	;volatile
 14762                           
 14763                           ;Lab8.c: 252: if(MODE == 1){
 14764  003A66  0100               	movlb	0	; () banked
 14765  003A68  0589               	decf	_MODE& (0+255),w,b
 14766  003A6A  0100               	movlb	0	; () banked
 14767  003A6C  118A               	iorwf	(_MODE+1)& (0+255),w,b
 14768  003A6E  A4D8               	btfss	status,2,c
 14769  003A70  D002               	goto	i2l5212
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;Lab8.c: 253: EWPED_SW = 1;
 14773  003A72  0E01               	movlw	1
 14774  003A74  D001               	goto	L25
 14775  003A76                     i2l5212:
 14776                           
 14777                           ; BSR set to: 0
 14778                           ;Lab8.c: 255: EWPED_SW = 0;
 14779  003A76  0E00               	movlw	0
 14780  003A78                     L25:
 14781  003A78  6E62               	movwf	_EWPED_SW,c
 14782  003A7A  D000               	goto	i2l428
 14783  003A7C                     i2l428:
 14784                           
 14785                           ; BSR set to: 0
 14786  003A7C  0012               	return		;funcret
 14787  003A7E                     __end_of_INT1_ISR:
 14788                           	opt stack 0
 14789                           pclatu	equ	0xFFB
 14790                           pclath	equ	0xFFA
 14791                           tblptru	equ	0xFF8
 14792                           tblptrh	equ	0xFF7
 14793                           tblptrl	equ	0xFF6
 14794                           tablat	equ	0xFF5
 14795                           prodh	equ	0xFF4
 14796                           prodl	equ	0xFF3
 14797                           intcon	equ	0xFF2
 14798                           intcon2	equ	0xFF1
 14799                           intcon3	equ	0xFF0
 14800                           postinc0	equ	0xFEE
 14801                           fsr0h	equ	0xFEA
 14802                           fsr0l	equ	0xFE9
 14803                           wreg	equ	0xFE8
 14804                           postdec1	equ	0xFE5
 14805                           fsr1h	equ	0xFE2
 14806                           fsr1l	equ	0xFE1
 14807                           indf2	equ	0xFDF
 14808                           postinc2	equ	0xFDE
 14809                           postdec2	equ	0xFDD
 14810                           fsr2h	equ	0xFDA
 14811                           fsr2l	equ	0xFD9
 14812                           status	equ	0xFD8
 14813                           
 14814 ;; *************** function _INT0_ISR *****************
 14815 ;; Defined at:
 14816 ;;		line 242 in file "Lab8.c"
 14817 ;; Parameters:    Size  Location     Type
 14818 ;;		None
 14819 ;; Auto vars:     Size  Location     Type
 14820 ;;		None
 14821 ;; Return value:  Size  Location     Type
 14822 ;;		None               void
 14823 ;; Registers used:
 14824 ;;		wreg, status,2, status,0
 14825 ;; Tracked objects:
 14826 ;;		On entry : 0/0
 14827 ;;		On exit  : 0/0
 14828 ;;		Unchanged: 0/0
 14829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14834 ;;Total ram usage:        0 bytes
 14835 ;; Hardware stack levels used:    1
 14836 ;; This function calls:
 14837 ;;		Nothing
 14838 ;; This function is called by:
 14839 ;;		_chkisr
 14840 ;; This function uses a non-reentrant model
 14841 ;;
 14842                           
 14843                           	psect	text75
 14844  003A7E                     __ptext75:
 14845                           	opt stack 0
 14846  003A7E                     _INT0_ISR:
 14847                           	opt stack 18
 14848                           
 14849                           ;Lab8.c: 243: INTCONbits.INT0IF=0;
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;incstack = 0
 14853  003A7E  92F2               	bcf	intcon,1,c	;volatile
 14854                           
 14855                           ;Lab8.c: 244: if(MODE == 1){
 14856  003A80  0100               	movlb	0	; () banked
 14857  003A82  0589               	decf	_MODE& (0+255),w,b
 14858  003A84  0100               	movlb	0	; () banked
 14859  003A86  118A               	iorwf	(_MODE+1)& (0+255),w,b
 14860  003A88  A4D8               	btfss	status,2,c
 14861  003A8A  D002               	goto	i2l5204
 14862                           
 14863                           ; BSR set to: 0
 14864                           ;Lab8.c: 245: NSPED_SW = 1;
 14865  003A8C  0E01               	movlw	1
 14866  003A8E  D001               	goto	L26
 14867  003A90                     i2l5204:
 14868                           
 14869                           ; BSR set to: 0
 14870                           ;Lab8.c: 247: NSPED_SW = 0;
 14871  003A90  0E00               	movlw	0
 14872  003A92                     L26:
 14873  003A92  6E65               	movwf	_NSPED_SW,c
 14874  003A94  D000               	goto	i2l423
 14875  003A96                     i2l423:
 14876                           
 14877                           ; BSR set to: 0
 14878  003A96  0012               	return		;funcret
 14879  003A98                     __end_of_INT0_ISR:
 14880                           	opt stack 0
 14881                           pclatu	equ	0xFFB
 14882                           pclath	equ	0xFFA
 14883                           tblptru	equ	0xFF8
 14884                           tblptrh	equ	0xFF7
 14885                           tblptrl	equ	0xFF6
 14886                           tablat	equ	0xFF5
 14887                           prodh	equ	0xFF4
 14888                           prodl	equ	0xFF3
 14889                           intcon	equ	0xFF2
 14890                           intcon2	equ	0xFF1
 14891                           intcon3	equ	0xFF0
 14892                           postinc0	equ	0xFEE
 14893                           fsr0h	equ	0xFEA
 14894                           fsr0l	equ	0xFE9
 14895                           wreg	equ	0xFE8
 14896                           postdec1	equ	0xFE5
 14897                           fsr1h	equ	0xFE2
 14898                           fsr1l	equ	0xFE1
 14899                           indf2	equ	0xFDF
 14900                           postinc2	equ	0xFDE
 14901                           postdec2	equ	0xFDD
 14902                           fsr2h	equ	0xFDA
 14903                           fsr2l	equ	0xFD9
 14904                           status	equ	0xFD8
 14905                           pclatu	equ	0xFFB
 14906                           pclath	equ	0xFFA
 14907                           tblptru	equ	0xFF8
 14908                           tblptrh	equ	0xFF7
 14909                           tblptrl	equ	0xFF6
 14910                           tablat	equ	0xFF5
 14911                           prodh	equ	0xFF4
 14912                           prodl	equ	0xFF3
 14913                           intcon	equ	0xFF2
 14914                           intcon2	equ	0xFF1
 14915                           intcon3	equ	0xFF0
 14916                           postinc0	equ	0xFEE
 14917                           fsr0h	equ	0xFEA
 14918                           fsr0l	equ	0xFE9
 14919                           wreg	equ	0xFE8
 14920                           postdec1	equ	0xFE5
 14921                           fsr1h	equ	0xFE2
 14922                           fsr1l	equ	0xFE1
 14923                           indf2	equ	0xFDF
 14924                           postinc2	equ	0xFDE
 14925                           postdec2	equ	0xFDD
 14926                           fsr2h	equ	0xFDA
 14927                           fsr2l	equ	0xFD9
 14928                           status	equ	0xFD8
 14929                           
 14930                           	psect	rparam
 14931  0000                     pclatu	equ	0xFFB
 14932                           pclath	equ	0xFFA
 14933                           tblptru	equ	0xFF8
 14934                           tblptrh	equ	0xFF7
 14935                           tblptrl	equ	0xFF6
 14936                           tablat	equ	0xFF5
 14937                           prodh	equ	0xFF4
 14938                           prodl	equ	0xFF3
 14939                           intcon	equ	0xFF2
 14940                           intcon2	equ	0xFF1
 14941                           intcon3	equ	0xFF0
 14942                           postinc0	equ	0xFEE
 14943                           fsr0h	equ	0xFEA
 14944                           fsr0l	equ	0xFE9
 14945                           wreg	equ	0xFE8
 14946                           postdec1	equ	0xFE5
 14947                           fsr1h	equ	0xFE2
 14948                           fsr1l	equ	0xFE1
 14949                           indf2	equ	0xFDF
 14950                           postinc2	equ	0xFDE
 14951                           postdec2	equ	0xFDD
 14952                           fsr2h	equ	0xFDA
 14953                           fsr2l	equ	0xFD9
 14954                           status	equ	0xFD8


Data Sizes:
    Strings     121
    Constant    593
    Data        45
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     94     113
    BANK0           128     36     124
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(BANK0[2]), SW_MODE_Txt(BANK0[2]), SW_EWLT_Txt(BANK0[2]), 
		 -> SW_EWPED_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(BANK0[3]), 
		 -> NS_Count(BANK0[3]), FlashingR_Txt(BANK0[2]), buffer(BANK0[31]), Act_Mode_Txt(BANK0[2]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(BANK0[2]), SW_MODE_Txt(BANK0[2]), SW_EWLT_Txt(BANK0[2]), 
		 -> SW_EWPED_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(BANK0[3]), 
		 -> NS_Count(BANK0[3]), FlashingR_Txt(BANK0[2]), buffer(BANK0[31]), Act_Mode_Txt(BANK0[2]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_16(CODE[21]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[7]), 
		 -> STR_12(CODE[10]), STR_11(CODE[7]), STR_10(CODE[12]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[6]), STR_5(CODE[22]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_17(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), FlashingS_Txt(BANK0[2]), SW_MODE_Txt(BANK0[2]), SW_EWLT_Txt(BANK0[2]), 
		 -> SW_EWPED_Txt(BANK0[2]), SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), PED_EW_Count(BANK0[3]), 
		 -> PED_NS_Count(BANK0[3]), EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(BANK0[3]), 
		 -> NS_Count(BANK0[3]), FlashingR_Txt(BANK0[2]), buffer(BANK0[31]), Act_Mode_Txt(BANK0[2]), 


Critical Paths under _main in COMRAM

    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _init_UART->_OpenUSART
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___awtoft
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Day_Mode->_PED_Control
    _update_LCD_misc->_printf

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  957706
                                             26 BANK0     10    10      0
                           _Day_Mode
                        _Do_Flashing
                            _Do_Init
                  _Initialize_Screen
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftmul
                            ___fttol
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  251822
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   75008
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    8264
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    4002
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    4002
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    3872
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    3872
                                             34 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     375
                           _Init_ADC
                          _Init_Tris
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Init_Tris                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  218444
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  404178
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0  152254
                                             23 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   33248
                                             71 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0  118876
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                             67 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1  152356
                                             23 BANK0      3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   33189
                                             71 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0  118876
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      2     2      0   88756
                                             92 COMRAM     2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              42    37      5   52048
                                             81 COMRAM    11     6      5
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   13093
                                             53 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3   12814
                                             53 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    4656
                                             38 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2383
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2525
                                             20 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     584
                                             14 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     803
                                             14 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    2295
                                             22 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     622
                                             14 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     501
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     631
                                             60 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4019
                                             75 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    3703
                                             63 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     130
                                             14 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     718
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   27931
                                             54 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   12724
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2832
                                             28 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    2768
                                             38 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2391
                                             34 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2128
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    2189
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Wait_Half_Second
       _drawtext
         _drawChar
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
           _fillRect
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
         _strlen
       _strcpy
       _update_LCD_misc
         ___awtoft
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftge
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _putch
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _Do_Init
     _Init_ADC
     _Init_Tris
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _get_full_ADC

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     24      7C       5       96.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5E      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      ED      34        0.0%
DATA                 0      0      ED       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 07 17:32:26 2022

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 2F92                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 001A                 ___wmul@multiplicand 001F  
          update_LCD_color@Circle_Y 0043                        ___ftadd@exp1 004B  
                      ___ftadd@exp2 004A                        ___ftadd@sign 0049  
                               l302 1F7A                                 l217 3556  
                               l330 29F2                                 l227 3AD0  
                               l331 295E                                 l341 1C56  
                               l501 377C                                 l333 29CE  
                               l406 3B1E                                 l502 3782  
                               l510 3738                                 l334 29F0  
                               l271 393C                                 l503 3786  
                               l511 373E                                 l504 37A8  
                               l512 3742                                 l513 3764  
                               l443 39E8                                 l611 11E8  
                               l460 3A5C                                 l604 178E  
                               l508 3734                                 l700 3324  
                               l277 312A                                 l293 2024  
                               l446 3A08                                 l534 2DD8  
                               l703 39E2                                 l295 1EFE  
                               l359 2094                                 l375 30A2  
                               l560 1ECE                                 l481 36F0  
                               l537 2A30                                 l490 36AC  
                               l483 36F4                                 l395 2CF8  
                               l548 154A                                 l484 36FA  
                               l492 36B0                                 l485 36FE  
                               l493 36B6                                 l486 3720  
                               l494 36BA                                 l567 2B94  
                               l495 36DC                                 l656 0C40  
                               l921 38A4                                 l667 0E08  
                               l499 3778                                 l691 32E2  
                               l909 32B4                                 l695 32FC  
                               l696 32FE                                 l697 3308  
                               l698 330A                                 l896 2E6E  
                               l987 2486                                 l996 2476  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 0049  
                               _PR2 000FCB                   _Deactivate_Buzzer 3B3E  
                               _dir 006E                                 _nbr 008B  
                               _txt 005F                      drawFastHLine@w 0017  
                    drawFastHLine@x 0020                      drawFastHLine@y 0016  
                      ___awmod@sign 0014             __end_of_update_LCD_misc 19D0  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 396A  
              PED_Control@Direction 00F0                        ___ftdiv@cntr 0030  
                      ___ftdiv@sign 0035                        __CFG_WDT$OFF 000000  
                              l1100 2838                                l1110 22E4  
                              l1103 2804                                l1111 230C  
                              l1202 3384                                l1028 2C5A  
                              l1108 237C                                l1132 257E  
                    drawFastVLine@h 0017                                l1117 236C  
                              l1126 2F04                                l1142 3A20  
                              l1222 345A                                l1039 2C32  
                              l1072 1A3E                                l1153 2756  
                              l1083 1B00                                l1092 1B1C  
                              l1068 1A14                                l1069 1B92  
                              l1149 37EC                                l1192 2F80  
                    drawFastVLine@x 0020                      drawFastVLine@y 0016  
                              l1298 3868                                l6010 239E  
                              l6004 238E                                l6112 26EA  
                              l6032 2414                                l6024 23E2  
                              l6202 28A6                                l6130 2744  
                              l6122 2714                                l6050 244E  
                              l6124 2722                                l6116 26FA  
                              l6140 2F28                                l6044 2438  
                              l6036 2424                                l6214 2904  
                              l6206 28C0                                l6070 2EA2  
                              l6062 37C2                                l6118 2700  
                              l6126 272C                                l6142 2F36  
                              l6054 2462                                l6310 0900  
                              l6302 0898                                l6216 290A  
                              l6080 2F00                                l6152 2F70  
                              l6144 2F3E                                l6160 3338  
                              l6056 2470                                l6048 2448  
                              l6320 0986                                l6074 2ED4  
                              l6162 3346                                l6402 0DBA  
                              l6330 09F2                                l6314 0928  
                              l5604 365A                                l6164 334E  
                              l6332 09FE                                l6340 0A84  
                              l6316 093E                                l6404 0DCA  
                              l6260 0748                                l6500 1C3C  
                              l6244 20F6                                l6228 207A  
                              l6422 279E                                l5542 30EC  
                              l6190 2862                                l5630 1A4C  
                              l6094 2690                                l6174 3402  
                              l6350 0B00                                l6326 09CC  
                              l6318 0970                                l6270 0774  
                              l5560 2BA6                                l6416 2776  
                              l5552 3112                                l5608 3676  
                              l5624 1A22                                l6168 3374  
                              l6176 3410                                l5720 252A  
                              l5712 2502                                l6344 0AEC  
                              l6336 0A42                                l6272 0798  
                              l6264 075C                                l6408 0DEA  
                              l6248 2148                                l6442 27DE  
                              l6418 2790                                l5554 3120  
                              l5538 30B4                                l5810 32AA  
                              l5802 328E                                l5730 2558  
                              l5722 2530                                l6370 0BFE  
                              l6362 0B60                                l6354 0B3A  
                              l6346 0AF2                                l6338 0A70  
                              l6266 076A                                l7250 3460  
                              l5572 2BFA                                l5564 2BB6  
                              l6452 2812                                l5652 1AA4  
                              l5636 1A58                                l5716 2514  
                              l5900 174E                                l6380 0C46  
                              l7180 2A86                                l7236 2DAC  
                              l7228 2D8C                                l6534 38E6  
                              l5582 2C3A                                l5574 2C1A  
                              l5566 2BC2                                l5822 1EEC  
                              l5654 1AB0                                l5646 1A80  
                              l5742 2DF0                                l5806 329A  
                              l5726 2542                                l6390 0CBE  
                              l6374 0C0E                                l6358 0B40  
                              l6286 07F4                                l7174 2A6C  
                              l7254 3470                                l7270 34B0  
                              l7246 2DD0                                l6536 38F0  
                              l5576 2C26                                l5568 2BE2  
                              l6464 3880                                l5840 1F72  
                              l5832 1F0A                                l5672 1B3A  
                              l5664 1AE8                                l5656 1ABC  
                              l5920 0FDE                                l6376 0C22  
                              l6368 0BEE                                l6528 1D2C  
                              l7512 2C66                                l5850 1FC4  
                              l5826 1EFA                                l5818 1EE0  
                              l5682 1B6C                                l5666 1AF4  
                              l5658 1AC4                                l5754 2E18  
                              l5770 2E54                                l5914 0F36  
                              l6386 0C6C                                l6730 29D2  
                              l6714 2996                                l5588 2C4C  
                              l5596 391E                                l5836 1F3A  
                              l5828 1F02                                l5756 2E22  
                              l5748 2E02                                l5692 24A6  
                              l5932 1112                                l5924 0FEE  
                              l6396 0D9A                                l6580 1886  
                              l6572 1866                                l6564 1846  
                              l7196 2AC2                                l6740 29EC  
                              l6708 2928                                l7524 2CE6  
                              l5838 1F6E                                l5870 3836  
                              l5774 2E64                                l5766 2E48  
                              l5758 2E2A                                l5790 3258  
                              l5694 24C0                                l6398 0DAA  
                              l6590 18AE                                l6902 2B84  
                              l6734 29DC                                l6726 29C4  
                              l7534 2D0A                                l5856 1FF0  
                              l5848 1F9C                                l5864 2020  
                              l5872 383C                                l6584 1896  
                              l6576 1876                                l6568 1856  
                              l6752 3064                                l5858 2018  
                              l5954 22AA                                l5794 3266  
                              l5786 324A                                l5698 24CE  
                              l5938 11C4                                l6842 1DFE  
                              l6834 1D46                                l6762 308A  
                              l5948 228C                                l5796 3270  
                              l5892 168A                                l6588 18A6  
                              l6860 12CA                                l6852 1EB2  
                              l6940 38AE                                l6780 32DA  
                              l6772 32C8                                l6764 3098  
                              l6748 302C                                l5990 2344  
                              l5798 3278                                l6846 1E58  
                              l6838 1DA2                                l6950 38D0  
                              l5984 232E                                l5976 231A  
                              l6864 139E                                l6944 38BC  
                              l6792 32F4                                l6784 32E6  
                              l6776 32D2                                l5994 2358  
                              l5996 2366                                l5988 233E  
                              l6892 2ACE                                l6868 1474  
                              l6990 35CA                                l6974 378C  
                              l6982 3748                                l6958 3704  
                              l6966 36C0                                l6896 2B28  
                              l6986 35BC                                l6996 35E0  
                              STR_1 FFFD                                STR_2 FFFB  
                              STR_3 FFFD                                STR_4 FFFB  
                              STR_5 FF86                                STR_6 FFE5  
                              STR_7 FFEB                                STR_8 FFEF  
                              STR_9 FFFD                                u5001 2498  
                              u5021 24B6                        printf@tmpval 00E7  
                              u5411 227E                                u6141 2768  
                              u5431 229C                                u5280 1FD2  
                              u6080 0C38                                u6161 2786  
                              u4801 19F4                                _MODE 0089  
                              u6250 1808                                u4660 30E2  
                              u6260 180A                                u5621 2682  
                              u5640 26AE                                u6440 305A  
                              u6360 2956                                u6370 298C  
                              u5645 26A6                                u4791 19E0  
                              u5920 0834                                u5780 288A  
                              u5925 082A                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 2C5C                                _font FD35  
                      ___ftpack@arg 000F                        main@Pvoltage 00F5  
                      ___ftpack@exp 0012                                fsr0h 000FEA  
                              fsr1h 000FE2                      ??_get_full_ADC 0011  
                              fsr0l 000FE9                                fsr2h 000FDA  
                              fsr1l 000FE1                                indf2 000FDF  
                              fsr2l 000FD9                                _wrap 0071  
                              _volt 0080                     drawFastHLine@hi 001E  
                   drawFastHLine@lo 001F            __end_of_update_LCD_color 154C  
                              pclat 000FFA            __end_of_update_LCD_count 1ED0  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0018  
                   __end_of_Do_Init 39BC                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___ftmul@cntr 0034  
                      ___param_bank 000010                        ___ftmul@sign 0035  
                      ___fttol@exp1 004B                        ___fttol@lval 0047  
                      _Act_Mode_Txt 00C8                    __end_of_INT0_ISR 3A98  
                  __end_of_INT1_ISR 3A7E                    __end_of_INT2_ISR 3B4E  
                       _Do_Flashing 345C           __end_of_Deactivate_Buzzer 3B46  
                   drawFastVLine@hi 001E                     drawFastVLine@lo 001F  
                       _SW_EWLT_Txt 00CE                         _SW_MODE_Txt 00D2  
                             ?_main 0001                     __end_of___awdiv 2E70  
                   __end_of___ftadd 1B94                     drawCircle@ddF_x 0024  
                             STR_10 FFC1                     drawCircle@ddF_y 0026  
                             STR_11 FFD7                               STR_12 FFCD  
                             STR_13 FFDE                               STR_14 FFF3  
                             STR_15 FFF7                               STR_16 FF9C  
                             STR_17 FFB1                     __end_of___awmod 32B6  
                   __end_of___ftdiv 283A                     __end_of___ftneg 3A2E  
                   __end_of___lldiv 2F92                     __end_of___ftmul 2580  
                             _T0CON 000FD5                     ___awdiv@divisor 0017  
                   __end_of___llmod 3396                     __end_of___ftsub 37EE  
                   __end_of___fttol 2758                               _T2CON 000FCA  
                             _T3CON 000FB1                               i2l423 3A96  
                             i2l418 3178                               i2l428 3A7C  
                   ___awdiv@counter 0019                     drawCircle@color 0020  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _PORTC 000F82                               _PORTD 000F83  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 0061  
                      ?_PED_Control 00EF                               _Rcmd1 215E  
                             _Rcmd3 2580                        ___lltoft@exp 001F  
                       _SW_NSLT_Txt 00D4                       drawRect@color 0029  
                     ___awtoft@sign 0026                     __end_of_dpowers FF38  
                             _array 00AC                               _font2 FE34  
             fillCircleHelper@ddF_x 002F               fillCircleHelper@ddF_y 0031  
                 ??_Wait_One_Second 005F                               _scale 0E0A  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
                             _putch 3B1A               fillCircleHelper@color 002B  
                      main@num_step 00F8                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 0049                    __end_of_Day_Mode 2ACA  
                    _Wait_N_Seconds 38A6                     write_data@data_ 0011  
                   __initialization 34B8                        __end_of_main 2D1E  
                      __end_of_font FE34                    __end_of_Init_ADC 3B3E  
                  __end_of_Rcmd2red 382C                          _Night_Mode 2D1E  
                  __end_of_Set_EWLT 3766                    __end_of_Set_NSLT 36DE  
                            ??_main 005F                       ___fttol@sign1 0046  
                     __activetblptr 000002               Wait_N_Seconds@seconds 00EF  
                 __end_of_LCD_Reset 3AE8                        _SW_EWPED_Txt 00D0  
              __size_of__tdiv_to_l_ 0110           ??_TFT_GreenTab_Initialize 0029  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                  ___llmod@dividend 000F                              ?_scale 0036  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                    ___awdiv@dividend 0015  
                  __end_of___awtoft 38A6                              ?_putch 0001  
                  __end_of___ftpack 2C5C                    __end_of___lltoft 345C  
                            i2l5204 3A90                              i2l5212 3A76  
                         ??_Do_Init 0012                              i2l5490 316E  
                            i2l5486 3164                              _OSCCON 000FD3  
                            _SPBRGH 000FB0                              _SSPBUF 000FC9  
            __end_of_Wait_N_Seconds 38DC                  __size_of_Init_Tris 0016  
                      _SW_NSPED_Txt 00D6                    __end_of_delay_ms 355E  
                            _Set_EW 3766                              _Set_NS 36DE  
                  __end_of_fillRect 369A                    __end_of_drawChar 2026  
                  __end_of__powers_ FF86                    __end_of_drawRect 33FC  
                __size_of_OpenUSART 0070                              ___ftge 2E70  
          __size_of_Activate_Buzzer 0012                              ___wmul 39BC  
                         ??___awdiv 0019           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 2918                           ??___ftadd 0046  
                         ??___awmod 0013                           ??___ftdiv 002D  
                         ??___ftneg 0012                           ??___lldiv 0017  
                         ??___ftmul 002D                           ??___llmod 0017  
                         ??___ftsub 0052                           ??___fttol 0041  
                            _chkisr 0008                              _buffer 008D  
                            _fround 154C                              clear_0 34BE  
                            clear_1 34CA                    ___awdiv@quotient 001B  
                   ___awmod@divisor 0011          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0013                              _printf 073A  
                      drawtext@size 003E                              _strcpy 38DC  
                            _strlen 382C               ___ftmul@f3_as_product 0031  
              __end_of_get_full_ADC 3A0A                        __pdataCOMRAM 0071  
__size_of_Wait_One_Second_With_Beep 008A                         Set_EW@color 0044  
                      __mediumconst FD34                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                            putch@c 000F                    __end_of_spiwrite 3AD6  
                       Set_NS@color 0044                          __accesstop 0080  
           __end_of__initialization 3502                           ?_INT0_ISR 0001  
                         ?_INT1_ISR 0001                           ?_INT2_ISR 0001  
                        ___ftadd@f1 0040                          ___ftadd@f2 0043  
                        ___ftge@ff1 000F                          ___ftge@ff2 0012  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 0027                          ___ftdiv@f2 002A  
                        ___ftdiv@f3 0031                          ___ftneg@f1 000F  
                        ___awtoft@c 0023                          ___ftmul@f1 0027  
                        ___ftmul@f2 002A                          ___ftsub@f1 004C  
                        ___ftsub@f2 004F                          ___fttol@f1 003D  
                     __end_of_Rcmd1 226E                       __end_of_Rcmd3 2672  
                    __pcstackCOMRAM 0001                        __pidataBANK0 393E  
                        ___lltoft@c 0017                       __end_of_font2 FF10  
                     __end_of_scale 11EA                       __end_of_putch 3B28  
                       ?_Night_Mode 0001                      drawPixel@color 0017  
                 __end_of_Init_Tris 3AAE              __size_of_write_command 0010  
                        __div_to_l_ 237E                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 0029  
                           ??_Rcmd3 0029                  __size_of_drawPixel 0030  
                 __end_of_OpenUSART 3326                    main@finalVoltage 00FA  
                   __div_to_l_@exp1 001A                     __div_to_l_@cntr 0019  
                           ??_scale 0039                __size_of_PED_Control 0052  
                   __div_to_l_@quot 0015                             ??_putch 000F  
                        __pbssBANK0 0080                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
        __end_of_Select_ADC_Channel 3B34                          ??_INT0_ISR 0001  
                        ??_INT1_ISR 0001           __size_of_Wait_Half_Second 001A  
                        ??_INT2_ISR 0001                     spiwrite@spidata 0010  
                         ?_Set_EWLT 0001                       __div_to_l_@f1 000F  
                     __div_to_l_@f2 0012                           ?_Set_NSLT 0001  
                 ?_update_LCD_color 0041                   ?_update_LCD_count 0048  
                           ?_Set_EW 0001                             ?_Set_NS 0001  
                __CFG_CCP2MX$PORTBE 000000                  ??_update_LCD_color 0042  
                ??_update_LCD_count 0049                             ?___ftge 000F  
                           ?___wmul 001D                             ?_chkisr 0001  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
                      ?_Do_Flashing 0001           update_LCD_PED_Count@count 0048  
                           ?_fround 0036                           ?___awtoft 0023  
                         ?___ftpack 000F                     _Wait_One_Second 31B2  
                        _fillCircle 355E                             ?_printf 0052  
         Select_ADC_Channel@channel 000F                           ?___lltoft 0017  
                           ?_strcpy 000F                             ?_strlen 000F  
                 ??_Activate_Buzzer 000F                          _fillScreen 3A2E  
                        _drawCircle 1B94                          ??_Day_Mode 005F  
                         ?_delay_ms 0023                           ?_fillRect 0021  
         update_LCD_count@direction 0049                           ?_drawChar 002C  
                           _SSPCON1 000FC6                           ?_drawRect 0021  
                           _SSPSTAT 000FC7               __end_of_fillRectangle 29F4  
                         ?_drawtext 0037                             _SW_EWLT 0067  
                           _SW_MODE 0069                          ??_Init_ADC 000F  
                           _Do_Init 3994                             _SW_NSLT 006A  
                        ??_Rcmd2red 0012                 __size_of_Night_Mode 00BC  
                     _write_command 3B0A                          ??_Set_EWLT 0044  
                        ??_Set_NSLT 0044                   __end_of__npowers_ FF5F  
                           __Hparam 0000                          _scale$2523 0039  
                           __Lparam 0000                     __size_of_Set_EW 0044  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine 30A4  
                 __end_of_drawPixel 393E               __end_of_drawFastVLine 312C  
                  _fillCircleHelper 2026                     __size_of___ftge 0096  
                           ___awdiv 2DDA                             ___ftadd 19D0  
                           ___awmod 3234                             ___ftdiv 2758  
                           ___ftneg 3A0A                             ___lldiv 2F06  
                   __size_of___wmul 0028                             ___ftmul 2488  
                           ___llmod 3326                             ___ftsub 37AA  
                           ___fttol 2672               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 31AA                           ?_spiwrite 0001  
                           __pcinit 34B8                          ??___awtoft 0026  
                        ??___ftpack 0014                     __size_of_fround 0244  
                           __ramtop 1000                          ??___lltoft 001B  
                           __ptext0 2C5C                             __ptext1 3B28  
                           __ptext2 2D1E                             __ptext3 001C  
                           __ptext4 3A2E                             __ptext5 2918  
                           __ptext6 3396                             __ptext7 301C  
                           __ptext8 396A                             __ptext9 2580  
                   __size_of_printf 06D0                   __end_of_init_UART 3AC2  
                         _T0CONbits 000FD5                     __size_of_strcpy 0032  
                   __size_of_strlen 003E                         ?__div_to_l_ 000F  
                           _dpowers FF10                           _T3CONbits 000FB1  
                  ___awmod@dividend 000F                          ??_delay_ms 0025  
                     drawtext@_text 0038                       drawtext@color 003A  
                        ??_fillRect 0026                          ??_drawChar 0033  
                         _LCD_Reset 3AD6                          ??_drawRect 002B  
                     _setAddrWindow 3602                      __pintcode_body 312C  
                drawFastHLine@color 0018                          delay_ms@ms 0023  
              end_of_initialization 3502                           _INT0_flag 0083  
                         _INT1_flag 0085                           _INT2_flag 0087  
                        ??_drawtext 003F                      ?_write_command 0001  
                     __Lmediumconst FD34                             int_func 312C  
                         _PED_Count 0066                        _get_full_ADC 39E4  
                   ___lldiv@divisor 0013                        PED_Control@i 00F1  
     __size_of_update_LCD_PED_Count 00CC                     ___lldiv@counter 001B  
           __end_of_Wait_One_Second 3234                           _RCSTAbits 000FAB  
                           printf@c 00EE                             printf@f 0052  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc2 000FDE  
                    __tdiv_to_l_@f1 000F                      __tdiv_to_l_@f2 0012  
                        ??_spiwrite 000F                             strlen@s 000F  
                   fillCircle@color 003F                       ??__tdiv_to_l_ 0015  
                       ?_fillCircle 0039                           _PORTAbits 000F80  
                  drawtext@cursor_x 0047                    drawtext@cursor_y 0046  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0022                         ?_drawCircle 001A  
                        drawChar@bg 0030                           _TRISCbits 000F94  
                    ?_setAddrWindow 0012                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 005F                    drawtext@textsize 0042  
          __size_of_update_LCD_misc 0240                          drawPixel@x 0019  
                        drawPixel@y 0016                    _Wait_Half_Second 3A4A  
                       ___ftdiv@exp 0034                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 00EF                  get_full_ADC@result 0013  
                 __size_of_INT0_ISR 001A                 __size_of__div_to_l_ 010A  
                 __size_of_INT1_ISR 001A                   __size_of_INT2_ISR 0008  
                       ___ftmul@exp 0030                      __end_of_Set_EW 37AA  
                    __end_of_Set_NS 3722                      __end_of___ftge 2F06  
                    __end_of___wmul 39E4                       delay_ms@count 0027  
                        _write_data 3AFA                       __pidataCOMRAM 3B4E  
                    __end_of_chkisr 31B2                        ??_Night_Mode 005F  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 003C  
                    __end_of_fround 1790                __size_of_Do_Flashing 005C  
                    __end_of_printf 0E0A                      __end_of_strcpy 390E  
                    __end_of_strlen 386A                 start_initialization 34B8  
               __end_of__tdiv_to_l_ 237E                           _Init_Tris 3A98  
                 __size_of_Day_Mode 00D6                     ??_write_command 0011  
                         _OpenUSART 32B6                 __size_of_fillCircle 0052  
                   ___llmod@divisor 0013                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000A                     ___llmod@counter 0017  
                __end_of_Night_Mode 2DDA                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 00F0  
               __size_of_drawCircle 01AE                            ??_Set_EW 0044  
                          ??_Set_NS 0044                   __size_of_Set_EWLT 0044  
                   _Activate_Buzzer 3AE8                   __size_of_Set_NSLT 0044  
                  ?_Wait_One_Second 0001                            ??___ftge 0015  
                          ??___wmul 0021                            ??_chkisr 0001  
                       __pdataBANK0 00AC                  _Select_ADC_Channel 3B28  
                          ??_fround 0039                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_printf 0057  
                          ??_strcpy 0013                            ??_strlen 0011  
                      _PED_EW_Count 00C2           __size_of_update_LCD_color 0362  
         __size_of_update_LCD_count 018E                          fround@prec 003F  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
               ?_Select_ADC_Channel 0001                   __size_of___lltoft 0060  
                       __pbssCOMRAM 005F                       ??_PED_Control 005F  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00D8  
                        ?_Init_Tris 0001                        _PED_NS_Count 00C5  
                       ??_LCD_Reset 0029            __end_of_fillCircleHelper 215E  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                          ?_Do_Init 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_OpenUSART 000F  
                 __size_of_drawRect 0066                   __size_of_drawtext 00DE  
              ??_Select_ADC_Channel 000F                   ??_update_LCD_misc 005D  
                         __pintcode 0008     __end_of_TFT_GreenTab_Initialize 3994  
                     __pmediumconst FD34                            ?___awdiv 0015  
                          ?___ftadd 0040                            ?___awmod 000F  
                          ?___ftdiv 0027                            ?___ftneg 000F  
                          ?___lldiv 000F                            ?___ftmul 0027  
                          ?___llmod 000F                            ?___ftsub 004C  
                         __npowers_ FF38                            ?___fttol 003D  
                         __tft_type 006C                           _direction 006F  
                drawFastVLine@color 0018                         ?_write_data 0001  
                         _drawPixel 390E                         __tdiv_to_l_ 226E  
                 __size_of_spiwrite 0014                        ??__div_to_l_ 0015  
                 _Initialize_Screen 001C                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART 3AAE  
                ?_Initialize_Screen 0001                            _FLASHING 0063  
                    __size_of_scale 03E0                      __size_of_putch 000E  
 __end_of_Wait_One_Second_With_Beep 301C                 __end_of_PED_Control 3602  
           __end_of_Activate_Buzzer 3AFA                            _INT0_ISR 3A7E  
                          _INT1_ISR 3A64                            _INT2_ISR 3B46  
                    ___wmul@product 0021                 ??_Initialize_Screen 0048  
                          _EWPED_SW 0062                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                  __end_of__div_to_l_ 2488  
                          _PIR2bits 000FA1                            _NSPED_SW 0065  
                          _EW_Count 00B9                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                         drawChar@c 002D                           drawChar@i 0036  
                         drawChar@j 0035                        ??_fillCircle 0041  
                         drawChar@x 0034                           drawChar@y 002C  
                        ?_drawPixel 0016              __size_of_fillRectangle 00DC  
                          _NS_Count 00BF                          _ADCON0bits 000FC2  
          __end_of_Wait_Half_Second 3A64                   ___wmul@multiplier 001D  
         __end_of_Initialize_Screen 073A                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 00CA                       _FlashingS_Txt 00CC  
                      ??_drawCircle 0022                          printf@flag 00DD  
      __end_of_update_LCD_PED_Count 2B96                          printf@fval 00EB  
                          _SW_EWPED 0068                          printf@prec 00DF  
             update_LCD_color@color 0041                            _Day_Mode 29F4  
                          _SW_NSPED 006B           update_LCD_color@direction 0042  
                        ?_init_UART 0001                         ??_Init_Tris 000F  
            __size_of_drawFastHLine 0088                         _INTCON2bits 000FF1  
                       _INTCON3bits 000FF0                           copy_data0 34E4  
                         drawtext@i 0044              __size_of_drawFastVLine 0088  
                         drawtext@x 0041                           drawtext@y 0037  
                          _Init_ADC 3B34                   write_command@cmd_ 0011  
                       ??_OpenUSART 0011                            _Rcmd2red 37EE  
                  __size_of_Do_Init 0028                 __size_of_write_data 0010  
                   OpenUSART@config 0011                            _Set_EWLT 3722  
                __end_of_fillCircle 35B0                            _Set_NSLT 369A  
                          __Hrparam 0000                  __end_of_fillScreen 3A4A  
             update_LCD_count@count 0048                            __Lrparam 0000  
                __end_of_drawCircle 1D42                    __size_of___awdiv 0096  
                  __size_of___ftadd 01C4                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                    __size_of___ftneg 0024  
                  __size_of___lldiv 008C                    __size_of___ftmul 00F8  
                  __size_of___llmod 0070                    __size_of___ftsub 0044  
                  __size_of___fttol 00E6                            ___awtoft 386A  
                          ___ftpack 2B96                         _fround$2521 003C  
                       _fround$2522 0039                            ___lltoft 33FC  
                  _update_LCD_color 11EA                    _update_LCD_count 1D42  
                       _PED_Control 35B0                            _delay_ms 350C  
                          __ptext10 37EE                            __ptext11 215E  
                          __ptext20 29F4                            __ptext12 3AD6  
                          __ptext21 38A6                            __ptext13 350C  
                          __ptext30 2026                            __ptext22 1D42  
                          __ptext14 3994                            __ptext31 1B94  
                          __ptext23 31B2                            __ptext15 3AAE  
                          __ptext40 2488                            __ptext32 35B0  
                          __ptext24 369A                            __ptext16 32B6  
                          __ptext41 3234                            __ptext33 2ACA  
                          __ptext25 36DE                            __ptext17 3A98  
                          __ptext50 19D0                            __ptext42 2DDA  
                          __ptext34 2F92                            __ptext26 3722  
                          __ptext18 3B34                            __ptext51 3A0A  
                          __ptext43 226E                            __ptext35 1790  
                          __ptext27 3766                            __ptext19 345C  
                          __ptext60 3602                            __ptext52 2E70  
                          __ptext44 237E                            __ptext36 073A  
                          __ptext28 11EA                            __ptext61 3AFA  
                          __ptext53 39E4                            __ptext45 33FC  
                          __ptext37 0E0A                            __ptext29 355E  
                          __ptext70 3B3E                            __ptext62 3B0A  
                          __ptext54 283A                            __ptext46 3326  
                          __ptext38 3B1A                            __ptext71 3AE8  
                          __ptext63 3AC2                            __ptext55 382C  
                          __ptext47 2F06                            __ptext39 154C  
                          __ptext64 39BC                            __ptext56 1ED0  
                          __ptext48 2672                            __ptext73 3B46  
                          __ptext65 2758                            __ptext57 3650  
                          __ptext49 37AA                            __ptext74 3A64  
                          __ptext66 386A                            __ptext58 30A4  
                          __ptext75 3A7E                            __ptext67 2B96  
                          __ptext59 390E                            __ptext68 38DC  
                          __ptext69 3A4A                            _fillRect 3650  
                          _drawChar 1ED0                            __powers_ FF5F  
                          _drawRect 3396    __size_of_TFT_GreenTab_Initialize 002A  
                  _FLASHING_REQUEST 0064                            _colstart 006D  
                          _drawtext 283A                          strcpy@from 0011  
                     _fillRectangle 2918                    ?_Activate_Buzzer 0001  
                     __size_of_main 00C2                     fillRectangle@hi 001F  
                   fillRectangle@lo 0020                       _drawFastHLine 301C  
                     _drawFastVLine 30A4                       ??_Do_Flashing 005F  
                         printf@exp 00E5                            _spiwrite 3AC2  
                         printf@val 00E1                         ??_drawPixel 0019  
                          _rowstart 0070                  fillCircleHelper@x0 0021  
                fillCircleHelper@y0 0023          __size_of_Initialize_Screen 071E  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 000F  
                       ??_init_UART 0012                       Set_EWLT@color 0044  
                          scale@scl 003C                          _EWLT_Count 00B6  
                 ?_fillCircleHelper 0021                           spiwrite@x 000F  
       ??_Wait_One_Second_With_Beep 005F                            intlevel2 0000  
                   _update_LCD_misc 1790                      ?_fillRectangle 0016  
                  __tdiv_to_l_@exp1 001D                    __tdiv_to_l_@cntr 001C  
                  __tdiv_to_l_@quot 0018                  ??_fillCircleHelper 002D  
             __end_of_write_command 3B1A                    ___lldiv@dividend 000F  
                   fillScreen@color 0022                update_LCD_misc@nStep 005D  
              _update_LCD_PED_Count 2ACA             __size_of_Wait_N_Seconds 0036  
                      fillCircle@x0 0039                        fillCircle@y0 003B  
                    ?_drawFastHLine 0016                      fillRectangle@h 0018  
                    fillRectangle@w 0017                      fillRectangle@x 0021  
                    fillRectangle@y 0016                      ?_drawFastVLine 0016  
                          printf@ap 00DB                   fillCircleHelper@f 0033  
                 fillCircleHelper@r 0025                   fillCircleHelper@x 0035  
                 fillCircleHelper@y 0037                        ??_write_data 0011  
                     fillRect@color 0024                        ?__tdiv_to_l_ 000F  
                       _printf$2524 00D8            __size_of_Wait_One_Second 0082  
                  ___lldiv@quotient 0017                            strcpy@cp 0013  
                          strlen@cp 0013                            strcpy@to 000F  
               __end_of_Do_Flashing 34B8                       Set_NSLT@color 0044  
                        _NSLT_Count 00BC                         fillCircle@r 003D  
                   main@pvoltage_mv 00F2               __end_of_setAddrWindow 3650  
                fillRectangle@color 0019                       drawChar@color 002E  
                __end_of_write_data 3B0A                        drawChar@line 0033  
                     ?_get_full_ADC 000F                        drawChar@size 0032  
             ?_update_LCD_PED_Count 0048         __size_of_Select_ADC_Channel 000C  
