

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Mar 24 17:09:30 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           	psect	idataBANK0
    86  00C629                     __pidataBANK0:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _array
    90  00C629  FF                 	db	255
    91  00C62A  79                 	db	121
    92  00C62B  24                 	db	36
    93  00C62C  30                 	db	48
    94  00C62D  19                 	db	25
    95  00C62E  12                 	db	18
    96  00C62F  02                 	db	2
    97  00C630  78                 	db	120
    98  00C631  00                 	db	0
    99  00C632  10                 	db	16
   100                           
   101                           ;initializer for _FlashingS_Txt
   102  00C633  30                 	db	48
   103  00C634  00                 	db	0
   104                           
   105                           ;initializer for _wrap
   106  00C635  01                 	db	1
   107                           
   108                           ;initializer for _EWLT_Count
   109  00C636  30                 	db	48
   110  00C637  30                 	db	48
   111  00C638  00                 	db	0
   112                           
   113                           ;initializer for _EW_Count
   114  00C639  30                 	db	48
   115  00C63A  30                 	db	48
   116  00C63B  00                 	db	0
   117                           
   118                           ;initializer for _NSLT_Count
   119  00C63C  30                 	db	48
   120  00C63D  30                 	db	48
   121  00C63E  00                 	db	0
   122                           
   123                           ;initializer for _NS_Count
   124  00C63F  30                 	db	48
   125  00C640  30                 	db	48
   126  00C641  00                 	db	0
   127                           
   128                           ;initializer for _PED_EW_Count
   129  00C642  30                 	db	48
   130  00C643  30                 	db	48
   131  00C644  00                 	db	0
   132                           
   133                           ;initializer for _PED_NS_Count
   134  00C645  30                 	db	48
   135  00C646  30                 	db	48
   136  00C647  00                 	db	0
   137                           
   138                           ;initializer for _Act_Mode_Txt
   139  00C648  44                 	db	68
   140  00C649  00                 	db	0
   141                           
   142                           ;initializer for _FlashingR_Txt
   143  00C64A  30                 	db	48
   144  00C64B  00                 	db	0
   145                           
   146                           ;initializer for _SW_EWLT_Txt
   147  00C64C  30                 	db	48
   148  00C64D  00                 	db	0
   149                           
   150                           ;initializer for _SW_EWPED_Txt
   151  00C64E  30                 	db	48
   152  00C64F  00                 	db	0
   153                           
   154                           ;initializer for _SW_MODE_Txt
   155  00C650  44                 	db	68
   156  00C651  00                 	db	0
   157                           
   158                           ;initializer for _SW_NSLT_Txt
   159  00C652  30                 	db	48
   160  00C653  00                 	db	0
   161                           
   162                           ;initializer for _SW_NSPED_Txt
   163  00C654  30                 	db	48
   164  00C655  00                 	db	0
   165                           
   166                           	psect	mediumconst
   167  00FD34                     __pmediumconst:
   168                           	opt stack 0
   169  00FD34  00                 	db	0
   170  00FD35                     _font:
   171                           	opt stack 0
   172  00FD35  00                 	db	0
   173  00FD36  00                 	db	0
   174  00FD37  00                 	db	0
   175  00FD38  00                 	db	0
   176  00FD39  00                 	db	0
   177  00FD3A  00                 	db	0
   178  00FD3B  00                 	db	0
   179  00FD3C  5F                 	db	95
   180  00FD3D  00                 	db	0
   181  00FD3E  00                 	db	0
   182  00FD3F  00                 	db	0
   183  00FD40  07                 	db	7
   184  00FD41  00                 	db	0
   185  00FD42  07                 	db	7
   186  00FD43  00                 	db	0
   187  00FD44  14                 	db	20
   188  00FD45  7F                 	db	127
   189  00FD46  14                 	db	20
   190  00FD47  7F                 	db	127
   191  00FD48  14                 	db	20
   192  00FD49  24                 	db	36
   193  00FD4A  2A                 	db	42
   194  00FD4B  7F                 	db	127
   195  00FD4C  2A                 	db	42
   196  00FD4D  12                 	db	18
   197  00FD4E  23                 	db	35
   198  00FD4F  13                 	db	19
   199  00FD50  08                 	db	8
   200  00FD51  64                 	db	100
   201  00FD52  62                 	db	98
   202  00FD53  36                 	db	54
   203  00FD54  49                 	db	73
   204  00FD55  56                 	db	86
   205  00FD56  20                 	db	32
   206  00FD57  50                 	db	80
   207  00FD58  00                 	db	0
   208  00FD59  08                 	db	8
   209  00FD5A  07                 	db	7
   210  00FD5B  03                 	db	3
   211  00FD5C  00                 	db	0
   212  00FD5D  00                 	db	0
   213  00FD5E  1C                 	db	28
   214  00FD5F  22                 	db	34
   215  00FD60  41                 	db	65
   216  00FD61  00                 	db	0
   217  00FD62  00                 	db	0
   218  00FD63  41                 	db	65
   219  00FD64  22                 	db	34
   220  00FD65  1C                 	db	28
   221  00FD66  00                 	db	0
   222  00FD67  2A                 	db	42
   223  00FD68  1C                 	db	28
   224  00FD69  7F                 	db	127
   225  00FD6A  1C                 	db	28
   226  00FD6B  2A                 	db	42
   227  00FD6C  08                 	db	8
   228  00FD6D  08                 	db	8
   229  00FD6E  3E                 	db	62
   230  00FD6F  08                 	db	8
   231  00FD70  08                 	db	8
   232  00FD71  00                 	db	0
   233  00FD72  80                 	db	128
   234  00FD73  70                 	db	112
   235  00FD74  30                 	db	48
   236  00FD75  00                 	db	0
   237  00FD76  08                 	db	8
   238  00FD77  08                 	db	8
   239  00FD78  08                 	db	8
   240  00FD79  08                 	db	8
   241  00FD7A  08                 	db	8
   242  00FD7B  00                 	db	0
   243  00FD7C  00                 	db	0
   244  00FD7D  60                 	db	96
   245  00FD7E  60                 	db	96
   246  00FD7F  00                 	db	0
   247  00FD80  20                 	db	32
   248  00FD81  10                 	db	16
   249  00FD82  08                 	db	8
   250  00FD83  04                 	db	4
   251  00FD84  02                 	db	2
   252  00FD85  3E                 	db	62
   253  00FD86  51                 	db	81
   254  00FD87  49                 	db	73
   255  00FD88  45                 	db	69
   256  00FD89  3E                 	db	62
   257  00FD8A  00                 	db	0
   258  00FD8B  42                 	db	66
   259  00FD8C  7F                 	db	127
   260  00FD8D  40                 	db	64
   261  00FD8E  00                 	db	0
   262  00FD8F  72                 	db	114
   263  00FD90  49                 	db	73
   264  00FD91  49                 	db	73
   265  00FD92  49                 	db	73
   266  00FD93  46                 	db	70
   267  00FD94  21                 	db	33
   268  00FD95  41                 	db	65
   269  00FD96  49                 	db	73
   270  00FD97  4D                 	db	77
   271  00FD98  33                 	db	51
   272  00FD99  18                 	db	24
   273  00FD9A  14                 	db	20
   274  00FD9B  12                 	db	18
   275  00FD9C  7F                 	db	127
   276  00FD9D  10                 	db	16
   277  00FD9E  27                 	db	39
   278  00FD9F  45                 	db	69
   279  00FDA0  45                 	db	69
   280  00FDA1  45                 	db	69
   281  00FDA2  39                 	db	57
   282  00FDA3  3C                 	db	60
   283  00FDA4  4A                 	db	74
   284  00FDA5  49                 	db	73
   285  00FDA6  49                 	db	73
   286  00FDA7  31                 	db	49
   287  00FDA8  41                 	db	65
   288  00FDA9  21                 	db	33
   289  00FDAA  11                 	db	17
   290  00FDAB  09                 	db	9
   291  00FDAC  07                 	db	7
   292  00FDAD  36                 	db	54
   293  00FDAE  49                 	db	73
   294  00FDAF  49                 	db	73
   295  00FDB0  49                 	db	73
   296  00FDB1  36                 	db	54
   297  00FDB2  46                 	db	70
   298  00FDB3  49                 	db	73
   299  00FDB4  49                 	db	73
   300  00FDB5  29                 	db	41
   301  00FDB6  1E                 	db	30
   302  00FDB7  00                 	db	0
   303  00FDB8  00                 	db	0
   304  00FDB9  14                 	db	20
   305  00FDBA  00                 	db	0
   306  00FDBB  00                 	db	0
   307  00FDBC  00                 	db	0
   308  00FDBD  40                 	db	64
   309  00FDBE  34                 	db	52
   310  00FDBF  00                 	db	0
   311  00FDC0  00                 	db	0
   312  00FDC1  00                 	db	0
   313  00FDC2  08                 	db	8
   314  00FDC3  14                 	db	20
   315  00FDC4  22                 	db	34
   316  00FDC5  41                 	db	65
   317  00FDC6  14                 	db	20
   318  00FDC7  14                 	db	20
   319  00FDC8  14                 	db	20
   320  00FDC9  14                 	db	20
   321  00FDCA  14                 	db	20
   322  00FDCB  00                 	db	0
   323  00FDCC  41                 	db	65
   324  00FDCD  22                 	db	34
   325  00FDCE  14                 	db	20
   326  00FDCF  08                 	db	8
   327  00FDD0  02                 	db	2
   328  00FDD1  01                 	db	1
   329  00FDD2  59                 	db	89
   330  00FDD3  09                 	db	9
   331  00FDD4  06                 	db	6
   332  00FDD5  3E                 	db	62
   333  00FDD6  41                 	db	65
   334  00FDD7  5D                 	db	93
   335  00FDD8  59                 	db	89
   336  00FDD9  4E                 	db	78
   337  00FDDA  7C                 	db	124
   338  00FDDB  12                 	db	18
   339  00FDDC  11                 	db	17
   340  00FDDD  12                 	db	18
   341  00FDDE  7C                 	db	124
   342  00FDDF  7F                 	db	127
   343  00FDE0  49                 	db	73
   344  00FDE1  49                 	db	73
   345  00FDE2  49                 	db	73
   346  00FDE3  36                 	db	54
   347  00FDE4  3E                 	db	62
   348  00FDE5  41                 	db	65
   349  00FDE6  41                 	db	65
   350  00FDE7  41                 	db	65
   351  00FDE8  22                 	db	34
   352  00FDE9  7F                 	db	127
   353  00FDEA  41                 	db	65
   354  00FDEB  41                 	db	65
   355  00FDEC  41                 	db	65
   356  00FDED  3E                 	db	62
   357  00FDEE  7F                 	db	127
   358  00FDEF  49                 	db	73
   359  00FDF0  49                 	db	73
   360  00FDF1  49                 	db	73
   361  00FDF2  41                 	db	65
   362  00FDF3  7F                 	db	127
   363  00FDF4  09                 	db	9
   364  00FDF5  09                 	db	9
   365  00FDF6  09                 	db	9
   366  00FDF7  01                 	db	1
   367  00FDF8  3E                 	db	62
   368  00FDF9  41                 	db	65
   369  00FDFA  41                 	db	65
   370  00FDFB  51                 	db	81
   371  00FDFC  73                 	db	115
   372  00FDFD  7F                 	db	127
   373  00FDFE  08                 	db	8
   374  00FDFF  08                 	db	8
   375  00FE00  08                 	db	8
   376  00FE01  7F                 	db	127
   377  00FE02  00                 	db	0
   378  00FE03  41                 	db	65
   379  00FE04  7F                 	db	127
   380  00FE05  41                 	db	65
   381  00FE06  00                 	db	0
   382  00FE07  20                 	db	32
   383  00FE08  40                 	db	64
   384  00FE09  41                 	db	65
   385  00FE0A  3F                 	db	63
   386  00FE0B  01                 	db	1
   387  00FE0C  7F                 	db	127
   388  00FE0D  08                 	db	8
   389  00FE0E  14                 	db	20
   390  00FE0F  22                 	db	34
   391  00FE10  41                 	db	65
   392  00FE11  7F                 	db	127
   393  00FE12  40                 	db	64
   394  00FE13  40                 	db	64
   395  00FE14  40                 	db	64
   396  00FE15  40                 	db	64
   397  00FE16  7F                 	db	127
   398  00FE17  02                 	db	2
   399  00FE18  1C                 	db	28
   400  00FE19  02                 	db	2
   401  00FE1A  7F                 	db	127
   402  00FE1B  7F                 	db	127
   403  00FE1C  04                 	db	4
   404  00FE1D  08                 	db	8
   405  00FE1E  10                 	db	16
   406  00FE1F  7F                 	db	127
   407  00FE20  3E                 	db	62
   408  00FE21  41                 	db	65
   409  00FE22  41                 	db	65
   410  00FE23  41                 	db	65
   411  00FE24  3E                 	db	62
   412  00FE25  7F                 	db	127
   413  00FE26  09                 	db	9
   414  00FE27  09                 	db	9
   415  00FE28  09                 	db	9
   416  00FE29  06                 	db	6
   417  00FE2A  3E                 	db	62
   418  00FE2B  41                 	db	65
   419  00FE2C  51                 	db	81
   420  00FE2D  21                 	db	33
   421  00FE2E  5E                 	db	94
   422  00FE2F  7F                 	db	127
   423  00FE30  09                 	db	9
   424  00FE31  19                 	db	25
   425  00FE32  29                 	db	41
   426  00FE33  46                 	db	70
   427  00FE34                     __end_of_font:
   428                           	opt stack 0
   429  00FE34                     _font2:
   430                           	opt stack 0
   431  00FE34  26                 	db	38
   432  00FE35  49                 	db	73
   433  00FE36  49                 	db	73
   434  00FE37  49                 	db	73
   435  00FE38  32                 	db	50
   436  00FE39  03                 	db	3
   437  00FE3A  01                 	db	1
   438  00FE3B  7F                 	db	127
   439  00FE3C  01                 	db	1
   440  00FE3D  03                 	db	3
   441  00FE3E  3F                 	db	63
   442  00FE3F  40                 	db	64
   443  00FE40  40                 	db	64
   444  00FE41  40                 	db	64
   445  00FE42  3F                 	db	63
   446  00FE43  1F                 	db	31
   447  00FE44  20                 	db	32
   448  00FE45  40                 	db	64
   449  00FE46  20                 	db	32
   450  00FE47  1F                 	db	31
   451  00FE48  3F                 	db	63
   452  00FE49  40                 	db	64
   453  00FE4A  38                 	db	56
   454  00FE4B  40                 	db	64
   455  00FE4C  3F                 	db	63
   456  00FE4D  63                 	db	99
   457  00FE4E  14                 	db	20
   458  00FE4F  08                 	db	8
   459  00FE50  14                 	db	20
   460  00FE51  63                 	db	99
   461  00FE52  03                 	db	3
   462  00FE53  04                 	db	4
   463  00FE54  78                 	db	120
   464  00FE55  04                 	db	4
   465  00FE56  03                 	db	3
   466  00FE57  61                 	db	97
   467  00FE58  59                 	db	89
   468  00FE59  49                 	db	73
   469  00FE5A  4D                 	db	77
   470  00FE5B  43                 	db	67
   471  00FE5C  00                 	db	0
   472  00FE5D  7F                 	db	127
   473  00FE5E  41                 	db	65
   474  00FE5F  41                 	db	65
   475  00FE60  41                 	db	65
   476  00FE61  02                 	db	2
   477  00FE62  04                 	db	4
   478  00FE63  08                 	db	8
   479  00FE64  10                 	db	16
   480  00FE65  20                 	db	32
   481  00FE66  00                 	db	0
   482  00FE67  41                 	db	65
   483  00FE68  41                 	db	65
   484  00FE69  41                 	db	65
   485  00FE6A  7F                 	db	127
   486  00FE6B  04                 	db	4
   487  00FE6C  02                 	db	2
   488  00FE6D  01                 	db	1
   489  00FE6E  02                 	db	2
   490  00FE6F  04                 	db	4
   491  00FE70  40                 	db	64
   492  00FE71  40                 	db	64
   493  00FE72  40                 	db	64
   494  00FE73  40                 	db	64
   495  00FE74  40                 	db	64
   496  00FE75  00                 	db	0
   497  00FE76  03                 	db	3
   498  00FE77  07                 	db	7
   499  00FE78  08                 	db	8
   500  00FE79  00                 	db	0
   501  00FE7A  20                 	db	32
   502  00FE7B  54                 	db	84
   503  00FE7C  54                 	db	84
   504  00FE7D  78                 	db	120
   505  00FE7E  40                 	db	64
   506  00FE7F  7F                 	db	127
   507  00FE80  28                 	db	40
   508  00FE81  44                 	db	68
   509  00FE82  44                 	db	68
   510  00FE83  38                 	db	56
   511  00FE84  38                 	db	56
   512  00FE85  44                 	db	68
   513  00FE86  44                 	db	68
   514  00FE87  44                 	db	68
   515  00FE88  28                 	db	40
   516  00FE89  38                 	db	56
   517  00FE8A  44                 	db	68
   518  00FE8B  44                 	db	68
   519  00FE8C  28                 	db	40
   520  00FE8D  7F                 	db	127
   521  00FE8E  38                 	db	56
   522  00FE8F  54                 	db	84
   523  00FE90  54                 	db	84
   524  00FE91  54                 	db	84
   525  00FE92  18                 	db	24
   526  00FE93  00                 	db	0
   527  00FE94  08                 	db	8
   528  00FE95  7E                 	db	126
   529  00FE96  09                 	db	9
   530  00FE97  02                 	db	2
   531  00FE98  18                 	db	24
   532  00FE99  A4                 	db	164
   533  00FE9A  A4                 	db	164
   534  00FE9B  9C                 	db	156
   535  00FE9C  78                 	db	120
   536  00FE9D  7F                 	db	127
   537  00FE9E  08                 	db	8
   538  00FE9F  04                 	db	4
   539  00FEA0  04                 	db	4
   540  00FEA1  78                 	db	120
   541  00FEA2  00                 	db	0
   542  00FEA3  44                 	db	68
   543  00FEA4  7D                 	db	125
   544  00FEA5  40                 	db	64
   545  00FEA6  00                 	db	0
   546  00FEA7  20                 	db	32
   547  00FEA8  40                 	db	64
   548  00FEA9  40                 	db	64
   549  00FEAA  3D                 	db	61
   550  00FEAB  00                 	db	0
   551  00FEAC  7F                 	db	127
   552  00FEAD  10                 	db	16
   553  00FEAE  28                 	db	40
   554  00FEAF  44                 	db	68
   555  00FEB0  00                 	db	0
   556  00FEB1  00                 	db	0
   557  00FEB2  41                 	db	65
   558  00FEB3  7F                 	db	127
   559  00FEB4  40                 	db	64
   560  00FEB5  00                 	db	0
   561  00FEB6  7C                 	db	124
   562  00FEB7  04                 	db	4
   563  00FEB8  78                 	db	120
   564  00FEB9  04                 	db	4
   565  00FEBA  78                 	db	120
   566  00FEBB  7C                 	db	124
   567  00FEBC  08                 	db	8
   568  00FEBD  04                 	db	4
   569  00FEBE  04                 	db	4
   570  00FEBF  78                 	db	120
   571  00FEC0  38                 	db	56
   572  00FEC1  44                 	db	68
   573  00FEC2  44                 	db	68
   574  00FEC3  44                 	db	68
   575  00FEC4  38                 	db	56
   576  00FEC5  FC                 	db	252
   577  00FEC6  18                 	db	24
   578  00FEC7  24                 	db	36
   579  00FEC8  24                 	db	36
   580  00FEC9  18                 	db	24
   581  00FECA  18                 	db	24
   582  00FECB  24                 	db	36
   583  00FECC  24                 	db	36
   584  00FECD  18                 	db	24
   585  00FECE  FC                 	db	252
   586  00FECF  7C                 	db	124
   587  00FED0  08                 	db	8
   588  00FED1  04                 	db	4
   589  00FED2  04                 	db	4
   590  00FED3  08                 	db	8
   591  00FED4  48                 	db	72
   592  00FED5  54                 	db	84
   593  00FED6  54                 	db	84
   594  00FED7  54                 	db	84
   595  00FED8  24                 	db	36
   596  00FED9  04                 	db	4
   597  00FEDA  04                 	db	4
   598  00FEDB  3F                 	db	63
   599  00FEDC  44                 	db	68
   600  00FEDD  24                 	db	36
   601  00FEDE  3C                 	db	60
   602  00FEDF  40                 	db	64
   603  00FEE0  40                 	db	64
   604  00FEE1  20                 	db	32
   605  00FEE2  7C                 	db	124
   606  00FEE3  1C                 	db	28
   607  00FEE4  20                 	db	32
   608  00FEE5  40                 	db	64
   609  00FEE6  20                 	db	32
   610  00FEE7  1C                 	db	28
   611  00FEE8  3C                 	db	60
   612  00FEE9  40                 	db	64
   613  00FEEA  30                 	db	48
   614  00FEEB  40                 	db	64
   615  00FEEC  3C                 	db	60
   616  00FEED  44                 	db	68
   617  00FEEE  28                 	db	40
   618  00FEEF  10                 	db	16
   619  00FEF0  28                 	db	40
   620  00FEF1  44                 	db	68
   621  00FEF2  4C                 	db	76
   622  00FEF3  90                 	db	144
   623  00FEF4  90                 	db	144
   624  00FEF5  90                 	db	144
   625  00FEF6  7C                 	db	124
   626  00FEF7  44                 	db	68
   627  00FEF8  64                 	db	100
   628  00FEF9  54                 	db	84
   629  00FEFA  4C                 	db	76
   630  00FEFB  44                 	db	68
   631  00FEFC  00                 	db	0
   632  00FEFD  08                 	db	8
   633  00FEFE  36                 	db	54
   634  00FEFF  41                 	db	65
   635  00FF00  00                 	db	0
   636  00FF01  00                 	db	0
   637  00FF02  00                 	db	0
   638  00FF03  77                 	db	119
   639  00FF04  00                 	db	0
   640  00FF05  00                 	db	0
   641  00FF06  00                 	db	0
   642  00FF07  41                 	db	65
   643  00FF08  36                 	db	54
   644  00FF09  08                 	db	8
   645  00FF0A  00                 	db	0
   646  00FF0B  02                 	db	2
   647  00FF0C  01                 	db	1
   648  00FF0D  02                 	db	2
   649  00FF0E  04                 	db	4
   650  00FF0F  02                 	db	2
   651  00FF10                     __end_of_font2:
   652                           	opt stack 0
   653  00FF10                     _dpowers:
   654                           	opt stack 0
   655  00FF10  0001               	dw	1
   656  00FF12  0000               	dw	0
   657  00FF14  000A               	dw	10
   658  00FF16  0000               	dw	0
   659  00FF18  0064               	dw	100
   660  00FF1A  0000               	dw	0
   661  00FF1C  03E8               	dw	1000
   662  00FF1E  0000               	dw	0
   663  00FF20  2710               	dw	10000
   664  00FF22  0000               	dw	0
   665  00FF24  86A0               	dw	34464
   666  00FF26  0001               	dw	1
   667  00FF28  4240               	dw	16960
   668  00FF2A  000F               	dw	15
   669  00FF2C  9680               	dw	38528
   670  00FF2E  0098               	dw	152
   671  00FF30  E100               	dw	57600
   672  00FF32  05F5               	dw	1525
   673  00FF34  CA00               	dw	51712
   674  00FF36  3B9A               	dw	15258
   675  00FF38                     __end_of_dpowers:
   676                           	opt stack 0
   677  00FF38                     __npowers_:
   678                           	opt stack 0
   679  00FF38  00                 	db	0
   680  00FF39  80                 	db	128
   681  00FF3A  3F                 	db	63
   682  00FF3B  CD                 	db	205
   683  00FF3C  CC                 	db	204
   684  00FF3D  3D                 	db	61
   685  00FF3E  D7                 	db	215
   686  00FF3F  23                 	db	35
   687  00FF40  3C                 	db	60
   688  00FF41  12                 	db	18
   689  00FF42  83                 	db	131
   690  00FF43  3A                 	db	58
   691  00FF44  B7                 	db	183
   692  00FF45  D1                 	db	209
   693  00FF46  38                 	db	56
   694  00FF47  C6                 	db	198
   695  00FF48  27                 	db	39
   696  00FF49  37                 	db	55
   697  00FF4A  38                 	db	56
   698  00FF4B  86                 	db	134
   699  00FF4C  35                 	db	53
   700  00FF4D  C0                 	db	192
   701  00FF4E  D6                 	db	214
   702  00FF4F  33                 	db	51
   703  00FF50  CC                 	db	204
   704  00FF51  2B                 	db	43
   705  00FF52  32                 	db	50
   706  00FF53  70                 	db	112
   707  00FF54  89                 	db	137
   708  00FF55  30                 	db	48
   709  00FF56  E7                 	db	231
   710  00FF57  DB                 	db	219
   711  00FF58  2E                 	db	46
   712  00FF59  E5                 	db	229
   713  00FF5A  3C                 	db	60
   714  00FF5B  1E                 	db	30
   715  00FF5C  42                 	db	66
   716  00FF5D  A2                 	db	162
   717  00FF5E  0D                 	db	13
   718  00FF5F                     __end_of__npowers_:
   719                           	opt stack 0
   720  00FF5F                     __powers_:
   721                           	opt stack 0
   722  00FF5F  00                 	db	0
   723  00FF60  80                 	db	128
   724  00FF61  3F                 	db	63
   725  00FF62  00                 	db	0
   726  00FF63  20                 	db	32
   727  00FF64  41                 	db	65
   728  00FF65  00                 	db	0
   729  00FF66  C8                 	db	200
   730  00FF67  42                 	db	66
   731  00FF68  00                 	db	0
   732  00FF69  7A                 	db	122
   733  00FF6A  44                 	db	68
   734  00FF6B  40                 	db	64
   735  00FF6C  1C                 	db	28
   736  00FF6D  46                 	db	70
   737  00FF6E  50                 	db	80
   738  00FF6F  C3                 	db	195
   739  00FF70  47                 	db	71
   740  00FF71  24                 	db	36
   741  00FF72  74                 	db	116
   742  00FF73  49                 	db	73
   743  00FF74  97                 	db	151
   744  00FF75  18                 	db	24
   745  00FF76  4B                 	db	75
   746  00FF77  BC                 	db	188
   747  00FF78  BE                 	db	190
   748  00FF79  4C                 	db	76
   749  00FF7A  6B                 	db	107
   750  00FF7B  6E                 	db	110
   751  00FF7C  4E                 	db	78
   752  00FF7D  03                 	db	3
   753  00FF7E  15                 	db	21
   754  00FF7F  50                 	db	80
   755  00FF80  79                 	db	121
   756  00FF81  AD                 	db	173
   757  00FF82  60                 	db	96
   758  00FF83  F3                 	db	243
   759  00FF84  49                 	db	73
   760  00FF85  71                 	db	113
   761  00FF86                     __end_of__powers_:
   762                           	opt stack 0
   763  0000                     _ADCON0	set	4034
   764  0000                     _ADCON0bits	set	4034
   765  0000                     _ADCON1	set	4033
   766  0000                     _ADCON2	set	4032
   767  0000                     _ADRESH	set	4036
   768  0000                     _ADRESL	set	4035
   769  0000                     _CCP2CON	set	4026
   770  0000                     _CCPR2L	set	4027
   771  0000                     _INTCONbits	set	4082
   772  0000                     _OSCCON	set	4051
   773  0000                     _PIE1bits	set	3997
   774  0000                     _PIR1bits	set	3998
   775  0000                     _PIR2bits	set	4001
   776  0000                     _PORTAbits	set	3968
   777  0000                     _PORTBbits	set	3969
   778  0000                     _PORTC	set	3970
   779  0000                     _PORTCbits	set	3970
   780  0000                     _PORTD	set	3971
   781  0000                     _PORTDbits	set	3971
   782  0000                     _PORTEbits	set	3972
   783  0000                     _PR2	set	4043
   784  0000                     _RCSTA	set	4011
   785  0000                     _RCSTAbits	set	4011
   786  0000                     _SPBRG	set	4015
   787  0000                     _SPBRGH	set	4016
   788  0000                     _SSPBUF	set	4041
   789  0000                     _SSPCON1	set	4038
   790  0000                     _SSPSTAT	set	4039
   791  0000                     _SSPSTATbits	set	4039
   792  0000                     _T0CON	set	4053
   793  0000                     _T0CONbits	set	4053
   794  0000                     _T2CON	set	4042
   795  0000                     _T3CON	set	4017
   796  0000                     _T3CONbits	set	4017
   797  0000                     _TMR0H	set	4055
   798  0000                     _TMR0L	set	4054
   799  0000                     _TRISA	set	3986
   800  0000                     _TRISB	set	3987
   801  0000                     _TRISC	set	3988
   802  0000                     _TRISCbits	set	3988
   803  0000                     _TRISD	set	3989
   804  0000                     _TRISE	set	3990
   805  0000                     _TXREG	set	4013
   806  0000                     _TXSTA	set	4012
   807  0000                     _TXSTAbits	set	4012
   808  0000                     _RBPU	set	32655
   809  0000                     _TRMT	set	32097
   810  00FF86                     STR_5:
   811  00FF86  45                 	db	69	;'E'
   812  00FF87  43                 	db	67	;'C'
   813  00FF88  45                 	db	69	;'E'
   814  00FF89  33                 	db	51	;'3'
   815  00FF8A  33                 	db	51	;'3'
   816  00FF8B  30                 	db	48	;'0'
   817  00FF8C  31                 	db	49	;'1'
   818  00FF8D  4C                 	db	76	;'L'
   819  00FF8E  20                 	db	32
   820  00FF8F  53                 	db	83	;'S'
   821  00FF90  50                 	db	80	;'P'
   822  00FF91  52                 	db	82	;'R'
   823  00FF92  49                 	db	73	;'I'
   824  00FF93  4E                 	db	78	;'N'
   825  00FF94  47                 	db	71	;'G'
   826  00FF95  20                 	db	32
   827  00FF96  32                 	db	50	;'2'
   828  00FF97  32                 	db	50	;'2'
   829  00FF98  2D                 	db	45
   830  00FF99  53                 	db	83	;'S'
   831  00FF9A  33                 	db	51	;'3'
   832  00FF9B  00                 	db	0
   833  00FF9C                     STR_16:
   834  00FF9C  4E                 	db	78	;'N'
   835  00FF9D  53                 	db	83	;'S'
   836  00FF9E  50                 	db	80	;'P'
   837  00FF9F  20                 	db	32
   838  00FFA0  4E                 	db	78	;'N'
   839  00FFA1  53                 	db	83	;'S'
   840  00FFA2  4C                 	db	76	;'L'
   841  00FFA3  54                 	db	84	;'T'
   842  00FFA4  20                 	db	32
   843  00FFA5  45                 	db	69	;'E'
   844  00FFA6  57                 	db	87	;'W'
   845  00FFA7  50                 	db	80	;'P'
   846  00FFA8  20                 	db	32
   847  00FFA9  45                 	db	69	;'E'
   848  00FFAA  57                 	db	87	;'W'
   849  00FFAB  4C                 	db	76	;'L'
   850  00FFAC  54                 	db	84	;'T'
   851  00FFAD  20                 	db	32
   852  00FFAE  4D                 	db	77	;'M'
   853  00FFAF  52                 	db	82	;'R'
   854  00FFB0  00                 	db	0
   855  00FFB1                     STR_17:
   856  00FFB1  56                 	db	86	;'V'
   857  00FFB2  6F                 	db	111	;'o'
   858  00FFB3  6C                 	db	108	;'l'
   859  00FFB4  74                 	db	116	;'t'
   860  00FFB5  61                 	db	97	;'a'
   861  00FFB6  67                 	db	103	;'g'
   862  00FFB7  65                 	db	101	;'e'
   863  00FFB8  20                 	db	32
   864  00FFB9  3D                 	db	61	;'='
   865  00FFBA  20                 	db	32
   866  00FFBB  25                 	db	37
   867  00FFBC  66                 	db	102	;'f'
   868  00FFBD  20                 	db	32
   869  00FFBE  0D                 	db	13
   870  00FFBF  0A                 	db	10
   871  00FFC0  00                 	db	0
   872  00FFC1                     STR_10:
   873  00FFC1  4E                 	db	78	;'N'
   874  00FFC2  4F                 	db	79	;'O'
   875  00FFC3  52                 	db	82	;'R'
   876  00FFC4  54                 	db	84	;'T'
   877  00FFC5  48                 	db	72	;'H'
   878  00FFC6  2F                 	db	47
   879  00FFC7  53                 	db	83	;'S'
   880  00FFC8  4F                 	db	79	;'O'
   881  00FFC9  55                 	db	85	;'U'
   882  00FFCA  54                 	db	84	;'T'
   883  00FFCB  48                 	db	72	;'H'
   884  00FFCC  00                 	db	0
   885  00FFCD                     STR_12:
   886  00FFCD  45                 	db	69	;'E'
   887  00FFCE  41                 	db	65	;'A'
   888  00FFCF  53                 	db	83	;'S'
   889  00FFD0  54                 	db	84	;'T'
   890  00FFD1  2F                 	db	47
   891  00FFD2  57                 	db	87	;'W'
   892  00FFD3  45                 	db	69	;'E'
   893  00FFD4  53                 	db	83	;'S'
   894  00FFD5  54                 	db	84	;'T'
   895  00FFD6  00                 	db	0
   896  00FFD7                     STR_11:
   897  00FFD7  4E                 	db	78	;'N'
   898  00FFD8  2F                 	db	47
   899  00FFD9  53                 	db	83	;'S'
   900  00FFDA  20                 	db	32
   901  00FFDB  4C                 	db	76	;'L'
   902  00FFDC  54                 	db	84	;'T'
   903  00FFDD  00                 	db	0
   904  00FFDE                     STR_13:
   905  00FFDE  45                 	db	69	;'E'
   906  00FFDF  2F                 	db	47
   907  00FFE0  57                 	db	87	;'W'
   908  00FFE1  20                 	db	32
   909  00FFE2  4C                 	db	76	;'L'
   910  00FFE3  54                 	db	84	;'T'
   911  00FFE4  00                 	db	0
   912  00FFE5                     STR_6:
   913  00FFE5  4D                 	db	77	;'M'
   914  00FFE6  6F                 	db	111	;'o'
   915  00FFE7  64                 	db	100	;'d'
   916  00FFE8  65                 	db	101	;'e'
   917  00FFE9  3A                 	db	58	;':'
   918  00FFEA  00                 	db	0
   919  00FFEB                     STR_7:
   920  00FFEB  46                 	db	70	;'F'
   921  00FFEC  52                 	db	82	;'R'
   922  00FFED  3A                 	db	58	;':'
   923  00FFEE  00                 	db	0
   924  00FFEF                     STR_8:
   925  00FFEF  46                 	db	70	;'F'
   926  00FFF0  53                 	db	83	;'S'
   927  00FFF1  3A                 	db	58	;':'
   928  00FFF2  00                 	db	0
   929  00FFF3                     STR_14:
   930  00FFF3  50                 	db	80	;'P'
   931  00FFF4  4E                 	db	78	;'N'
   932  00FFF5  53                 	db	83	;'S'
   933  00FFF6  00                 	db	0
   934  00FFF7                     STR_15:
   935  00FFF7  50                 	db	80	;'P'
   936  00FFF8  45                 	db	69	;'E'
   937  00FFF9  57                 	db	87	;'W'
   938  00FFFA  00                 	db	0
   939  00FFFB                     STR_2:
   940  00FFFB  20                 	db	32
   941  00FFFC  00                 	db	0
   942  00FFFD                     STR_1:
   943  00FFFD  2A                 	db	42
   944  00FFFE  00                 	db	0
   945  0000                     
   946                           ; #config settings
   947  00FFFF  00                 	db	0	; dummy byte at the end
   948  0000                     
   949                           	psect	cinit
   950  00C7DA                     __pcinit:
   951                           	opt stack 0
   952  00C7DA                     start_initialization:
   953                           	opt stack 0
   954  00C7DA                     __initialization:
   955                           	opt stack 0
   956                           
   957                           ; Clear objects allocated to BANK0 (43 bytes)
   958  00C7DA  EE00  F0AD         	lfsr	0,__pbssBANK0
   959  00C7DE  0E2B               	movlw	43
   960  00C7E0                     clear_0:
   961  00C7E0  6AEE               	clrf	postinc0,c
   962  00C7E2  06E8               	decf	wreg,f,c
   963  00C7E4  E1FD               	bnz	clear_0
   964                           
   965                           ; Clear objects allocated to COMRAM (11 bytes)
   966  00C7E6  EE00  F075         	lfsr	0,__pbssCOMRAM
   967  00C7EA  0E0B               	movlw	11
   968  00C7EC                     clear_1:
   969  00C7EC  6AEE               	clrf	postinc0,c
   970  00C7EE  06E8               	decf	wreg,f,c
   971  00C7F0  E1FD               	bnz	clear_1
   972                           
   973                           ; Initialize objects allocated to BANK0 (45 bytes)
   974                           ; load TBLPTR registers with __pidataBANK0
   975  00C7F2  0E29               	movlw	low __pidataBANK0
   976  00C7F4  6EF6               	movwf	tblptrl,c
   977  00C7F6  0EC6               	movlw	high __pidataBANK0
   978  00C7F8  6EF7               	movwf	tblptrh,c
   979  00C7FA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   980  00C7FC  6EF8               	movwf	tblptru,c
   981  00C7FE  EE00  F080         	lfsr	0,__pdataBANK0
   982  00C802  EE10 F02D          	lfsr	1,45
   983  00C806                     copy_data0:
   984  00C806  0009               	tblrd		*+
   985  00C808  CFF5 FFEE          	movff	tablat,postinc0
   986  00C80C  50E5               	movf	postdec1,w,c
   987  00C80E  50E1               	movf	fsr1l,w,c
   988  00C810  E1FA               	bnz	copy_data0
   989  00C812                     end_of_initialization:
   990                           	opt stack 0
   991  00C812                     __end_of__initialization:
   992                           	opt stack 0
   993  00C812  0E00               	movlw	low (__Lmediumconst shr (0+16))
   994  00C814  6EF8               	movwf	tblptru,c
   995  00C816  0100               	movlb	0
   996  00C818  EF54  F068         	goto	_main	;jump to C main() function
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           	psect	bssCOMRAM
  1007  000075                     __pbssCOMRAM:
  1008                           	opt stack 0
  1009  000075                     _txt:
  1010                           	opt stack 0
  1011  000075                     	ds	2
  1012  000077                     _SW_EWLT:
  1013                           	opt stack 0
  1014  000077                     	ds	1
  1015  000078                     _SW_EWPED:
  1016                           	opt stack 0
  1017  000078                     	ds	1
  1018  000079                     _SW_MODE:
  1019                           	opt stack 0
  1020  000079                     	ds	1
  1021  00007A                     _SW_NSLT:
  1022                           	opt stack 0
  1023  00007A                     	ds	1
  1024  00007B                     _SW_NSPED:
  1025                           	opt stack 0
  1026  00007B                     	ds	1
  1027  00007C                     __tft_type:
  1028                           	opt stack 0
  1029  00007C                     	ds	1
  1030  00007D                     _colstart:
  1031                           	opt stack 0
  1032  00007D                     	ds	1
  1033  00007E                     _direction:
  1034                           	opt stack 0
  1035  00007E                     	ds	1
  1036  00007F                     _rowstart:
  1037                           	opt stack 0
  1038  00007F                     	ds	1
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           wreg	equ	0xFE8
  1045                           postdec1	equ	0xFE5
  1046                           fsr1l	equ	0xFE1
  1047                           
  1048                           	psect	bssBANK0
  1049  0000AD                     __pbssBANK0:
  1050                           	opt stack 0
  1051  0000AD                     _volt:
  1052                           	opt stack 0
  1053  0000AD                     	ds	3
  1054  0000B0                     _MODE:
  1055                           	opt stack 0
  1056  0000B0                     	ds	2
  1057  0000B2                     _nbr:
  1058                           	opt stack 0
  1059  0000B2                     	ds	2
  1060  0000B4                     _Count:
  1061                           	opt stack 0
  1062  0000B4                     	ds	1
  1063  0000B5                     _FLASHING:
  1064                           	opt stack 0
  1065  0000B5                     	ds	1
  1066  0000B6                     _FLASHING_REQUEST:
  1067                           	opt stack 0
  1068  0000B6                     	ds	1
  1069  0000B7                     _PED_Count:
  1070                           	opt stack 0
  1071  0000B7                     	ds	1
  1072  0000B8                     _dir:
  1073                           	opt stack 0
  1074  0000B8                     	ds	1
  1075  0000B9                     _buffer:
  1076                           	opt stack 0
  1077  0000B9                     	ds	31
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           postdec1	equ	0xFE5
  1085                           fsr1l	equ	0xFE1
  1086                           
  1087                           	psect	dataBANK0
  1088  000080                     __pdataBANK0:
  1089                           	opt stack 0
  1090  000080                     _array:
  1091                           	opt stack 0
  1092  000080                     	ds	10
  1093  00008A                     _FlashingS_Txt:
  1094                           	opt stack 0
  1095  00008A                     	ds	2
  1096  00008C                     _wrap:
  1097                           	opt stack 0
  1098  00008C                     	ds	1
  1099  00008D                     _EWLT_Count:
  1100                           	opt stack 0
  1101  00008D                     	ds	3
  1102  000090                     _EW_Count:
  1103                           	opt stack 0
  1104  000090                     	ds	3
  1105  000093                     _NSLT_Count:
  1106                           	opt stack 0
  1107  000093                     	ds	3
  1108  000096                     _NS_Count:
  1109                           	opt stack 0
  1110  000096                     	ds	3
  1111  000099                     _PED_EW_Count:
  1112                           	opt stack 0
  1113  000099                     	ds	3
  1114  00009C                     _PED_NS_Count:
  1115                           	opt stack 0
  1116  00009C                     	ds	3
  1117  00009F                     _Act_Mode_Txt:
  1118                           	opt stack 0
  1119  00009F                     	ds	2
  1120  0000A1                     _FlashingR_Txt:
  1121                           	opt stack 0
  1122  0000A1                     	ds	2
  1123  0000A3                     _SW_EWLT_Txt:
  1124                           	opt stack 0
  1125  0000A3                     	ds	2
  1126  0000A5                     _SW_EWPED_Txt:
  1127                           	opt stack 0
  1128  0000A5                     	ds	2
  1129  0000A7                     _SW_MODE_Txt:
  1130                           	opt stack 0
  1131  0000A7                     	ds	2
  1132  0000A9                     _SW_NSLT_Txt:
  1133                           	opt stack 0
  1134  0000A9                     	ds	2
  1135  0000AB                     _SW_NSPED_Txt:
  1136                           	opt stack 0
  1137  0000AB                     	ds	2
  1138                           tblptru	equ	0xFF8
  1139                           tblptrh	equ	0xFF7
  1140                           tblptrl	equ	0xFF6
  1141                           tablat	equ	0xFF5
  1142                           postinc0	equ	0xFEE
  1143                           wreg	equ	0xFE8
  1144                           postdec1	equ	0xFE5
  1145                           fsr1l	equ	0xFE1
  1146                           
  1147                           	psect	cstackCOMRAM
  1148  000001                     __pcstackCOMRAM:
  1149                           	opt stack 0
  1150  000001                     ?_strlen:
  1151                           	opt stack 0
  1152  000001                     ?_get_full_ADC:
  1153                           	opt stack 0
  1154  000001                     ?___awmod:
  1155                           	opt stack 0
  1156  000001                     ?___ftpack:
  1157                           	opt stack 0
  1158  000001                     ?___ftneg:
  1159                           	opt stack 0
  1160  000001                     ?__tdiv_to_l_:
  1161                           	opt stack 0
  1162  000001                     ?__div_to_l_:
  1163                           	opt stack 0
  1164  000001                     ?___lldiv:
  1165                           	opt stack 0
  1166  000001                     ?___llmod:
  1167                           	opt stack 0
  1168  000001                     spiwrite@x:
  1169                           	opt stack 0
  1170  000001                     putch@c:
  1171                           	opt stack 0
  1172  000001                     Select_ADC_Channel@channel:
  1173                           	opt stack 0
  1174  000001                     OpenUSART@spbrg:
  1175                           	opt stack 0
  1176  000001                     ___awmod@dividend:
  1177                           	opt stack 0
  1178  000001                     strcpy@to:
  1179                           	opt stack 0
  1180  000001                     strlen@s:
  1181                           	opt stack 0
  1182  000001                     __div_to_l_@f1:
  1183                           	opt stack 0
  1184  000001                     ___ftpack@arg:
  1185                           	opt stack 0
  1186  000001                     __tdiv_to_l_@f1:
  1187                           	opt stack 0
  1188  000001                     ___ftge@ff1:
  1189                           	opt stack 0
  1190  000001                     ___ftneg@f1:
  1191                           	opt stack 0
  1192  000001                     ___lldiv@dividend:
  1193                           	opt stack 0
  1194  000001                     ___llmod@dividend:
  1195                           	opt stack 0
  1196                           
  1197                           ; 4 bytes @ 0x0
  1198  000001                     	ds	1
  1199  000002                     spiwrite@spidata:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0x1
  1203  000002                     	ds	1
  1204  000003                     ??_strlen:
  1205  000003                     ??_get_full_ADC:
  1206  000003                     write_command@cmd_:
  1207                           	opt stack 0
  1208  000003                     write_data@data_:
  1209                           	opt stack 0
  1210  000003                     OpenUSART@config:
  1211                           	opt stack 0
  1212  000003                     ___awmod@divisor:
  1213                           	opt stack 0
  1214  000003                     strcpy@from:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x2
  1218  000003                     	ds	1
  1219  000004                     setAddrWindow@y0:
  1220                           	opt stack 0
  1221  000004                     ___ftpack@exp:
  1222                           	opt stack 0
  1223  000004                     __div_to_l_@f2:
  1224                           	opt stack 0
  1225  000004                     __tdiv_to_l_@f2:
  1226                           	opt stack 0
  1227  000004                     ___ftge@ff2:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x3
  1231  000004                     	ds	1
  1232  000005                     setAddrWindow@x1:
  1233                           	opt stack 0
  1234  000005                     ___awmod@counter:
  1235                           	opt stack 0
  1236  000005                     ___ftpack@sign:
  1237                           	opt stack 0
  1238  000005                     get_full_ADC@result:
  1239                           	opt stack 0
  1240  000005                     strcpy@cp:
  1241                           	opt stack 0
  1242  000005                     strlen@cp:
  1243                           	opt stack 0
  1244  000005                     ___lldiv@divisor:
  1245                           	opt stack 0
  1246  000005                     ___llmod@divisor:
  1247                           	opt stack 0
  1248                           
  1249                           ; 4 bytes @ 0x4
  1250  000005                     	ds	1
  1251  000006                     ??___ftpack:
  1252  000006                     setAddrWindow@y1:
  1253                           	opt stack 0
  1254  000006                     ___awmod@sign:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x5
  1258  000006                     	ds	1
  1259  000007                     ??__tdiv_to_l_:
  1260  000007                     ??___ftge:
  1261  000007                     ?___awdiv:
  1262                           	opt stack 0
  1263  000007                     setAddrWindow@x0:
  1264                           	opt stack 0
  1265  000007                     ___awdiv@dividend:
  1266                           	opt stack 0
  1267  000007                     __div_to_l_@quot:
  1268                           	opt stack 0
  1269                           
  1270                           ; 4 bytes @ 0x6
  1271  000007                     	ds	1
  1272  000008                     drawPixel@y:
  1273                           	opt stack 0
  1274  000008                     drawFastVLine@y:
  1275                           	opt stack 0
  1276  000008                     fillRectangle@y:
  1277                           	opt stack 0
  1278  000008                     drawFastHLine@y:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x7
  1282  000008                     	ds	1
  1283  000009                     ?___lltoft:
  1284                           	opt stack 0
  1285  000009                     drawFastVLine@h:
  1286                           	opt stack 0
  1287  000009                     fillRectangle@w:
  1288                           	opt stack 0
  1289  000009                     drawFastHLine@w:
  1290                           	opt stack 0
  1291  000009                     ___llmod@counter:
  1292                           	opt stack 0
  1293  000009                     drawPixel@color:
  1294                           	opt stack 0
  1295  000009                     ___awdiv@divisor:
  1296                           	opt stack 0
  1297  000009                     ___lldiv@quotient:
  1298                           	opt stack 0
  1299  000009                     ___lltoft@c:
  1300                           	opt stack 0
  1301                           
  1302                           ; 4 bytes @ 0x8
  1303  000009                     	ds	1
  1304  00000A                     fillRectangle@h:
  1305                           	opt stack 0
  1306  00000A                     drawFastVLine@color:
  1307                           	opt stack 0
  1308  00000A                     drawFastHLine@color:
  1309                           	opt stack 0
  1310  00000A                     __tdiv_to_l_@quot:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x9
  1314  00000A                     	ds	1
  1315  00000B                     drawPixel@x:
  1316                           	opt stack 0
  1317  00000B                     ___awdiv@counter:
  1318                           	opt stack 0
  1319  00000B                     __div_to_l_@cntr:
  1320                           	opt stack 0
  1321  00000B                     fillRectangle@color:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0xA
  1325  00000B                     	ds	1
  1326  00000C                     ??_drawFastVLine:
  1327  00000C                     ??_drawFastHLine:
  1328  00000C                     ___awdiv@sign:
  1329                           	opt stack 0
  1330  00000C                     __div_to_l_@exp1:
  1331                           	opt stack 0
  1332  00000C                     drawCircle@x0:
  1333                           	opt stack 0
  1334                           
  1335                           ; 2 bytes @ 0xB
  1336  00000C                     	ds	1
  1337  00000D                     ??_fillRectangle:
  1338  00000D                     ??___lltoft:
  1339  00000D                     ___lldiv@counter:
  1340                           	opt stack 0
  1341  00000D                     ___awdiv@quotient:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0xC
  1345  00000D                     	ds	1
  1346  00000E                     __tdiv_to_l_@cntr:
  1347                           	opt stack 0
  1348  00000E                     drawCircle@y0:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0xD
  1352  00000E                     	ds	1
  1353  00000F                     ?___wmul:
  1354                           	opt stack 0
  1355  00000F                     __tdiv_to_l_@exp1:
  1356                           	opt stack 0
  1357  00000F                     ___wmul@multiplier:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0xE
  1361  00000F                     	ds	1
  1362  000010                     drawFastVLine@hi:
  1363                           	opt stack 0
  1364  000010                     drawFastHLine@hi:
  1365                           	opt stack 0
  1366  000010                     drawCircle@r:
  1367                           	opt stack 0
  1368                           
  1369                           ; 2 bytes @ 0xF
  1370  000010                     	ds	1
  1371  000011                     drawFastVLine@lo:
  1372                           	opt stack 0
  1373  000011                     fillRectangle@hi:
  1374                           	opt stack 0
  1375  000011                     drawFastHLine@lo:
  1376                           	opt stack 0
  1377  000011                     ___lltoft@exp:
  1378                           	opt stack 0
  1379  000011                     ___wmul@multiplicand:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x10
  1383  000011                     	ds	1
  1384  000012                     drawFastVLine@x:
  1385                           	opt stack 0
  1386  000012                     fillRectangle@lo:
  1387                           	opt stack 0
  1388  000012                     drawFastHLine@x:
  1389                           	opt stack 0
  1390  000012                     drawCircle@color:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x11
  1394  000012                     	ds	1
  1395  000013                     fillRect@y:
  1396                           	opt stack 0
  1397  000013                     fillRectangle@x:
  1398                           	opt stack 0
  1399  000013                     fillCircleHelper@x0:
  1400                           	opt stack 0
  1401  000013                     drawRect@x:
  1402                           	opt stack 0
  1403  000013                     ___wmul@product:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x12
  1407  000013                     	ds	1
  1408  000014                     ??_drawCircle:
  1409  000014                     fillRect@w:
  1410                           	opt stack 0
  1411  000014                     fillScreen@color:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x13
  1415  000014                     	ds	1
  1416  000015                     ?___awtoft:
  1417                           	opt stack 0
  1418  000015                     fillRect@h:
  1419                           	opt stack 0
  1420  000015                     delay_ms@ms:
  1421                           	opt stack 0
  1422  000015                     fillCircleHelper@y0:
  1423                           	opt stack 0
  1424  000015                     drawRect@y:
  1425                           	opt stack 0
  1426  000015                     ___awtoft@c:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x14
  1430  000015                     	ds	1
  1431  000016                     fillRect@color:
  1432                           	opt stack 0
  1433  000016                     drawCircle@ddF_x:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x15
  1437  000016                     	ds	1
  1438  000017                     ??_delay_ms:
  1439  000017                     fillCircleHelper@r:
  1440                           	opt stack 0
  1441  000017                     drawRect@w:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x16
  1445  000017                     	ds	1
  1446  000018                     ??_fillRect:
  1447  000018                     ___awtoft@sign:
  1448                           	opt stack 0
  1449  000018                     drawCircle@ddF_y:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x17
  1453  000018                     	ds	1
  1454  000019                     ?___ftdiv:
  1455                           	opt stack 0
  1456  000019                     ?___ftmul:
  1457                           	opt stack 0
  1458  000019                     delay_ms@count:
  1459                           	opt stack 0
  1460  000019                     fillCircleHelper@cornername:
  1461                           	opt stack 0
  1462  000019                     drawRect@h:
  1463                           	opt stack 0
  1464  000019                     ___ftdiv@f1:
  1465                           	opt stack 0
  1466  000019                     ___ftmul@f1:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x18
  1470  000019                     	ds	1
  1471  00001A                     drawCircle@f:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x19
  1475  00001A                     	ds	1
  1476  00001B                     fillRect@x:
  1477                           	opt stack 0
  1478  00001B                     fillCircleHelper@delta:
  1479                           	opt stack 0
  1480  00001B                     drawRect@color:
  1481                           	opt stack 0
  1482                           
  1483                           ; 2 bytes @ 0x1A
  1484  00001B                     	ds	1
  1485  00001C                     fillRect@i:
  1486                           	opt stack 0
  1487  00001C                     drawCircle@x:
  1488                           	opt stack 0
  1489  00001C                     ___ftdiv@f2:
  1490                           	opt stack 0
  1491  00001C                     ___ftmul@f2:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x1B
  1495  00001C                     	ds	1
  1496  00001D                     ??_drawRect:
  1497  00001D                     fillCircleHelper@color:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x1C
  1501  00001D                     	ds	1
  1502  00001E                     drawChar@y:
  1503                           	opt stack 0
  1504  00001E                     drawCircle@y:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x1D
  1508  00001E                     	ds	1
  1509  00001F                     ??___ftdiv:
  1510  00001F                     ??___ftmul:
  1511  00001F                     ??_fillCircleHelper:
  1512  00001F                     drawChar@c:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x1E
  1516  00001F                     	ds	1
  1517  000020                     drawChar@color:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x1F
  1521  000020                     	ds	1
  1522  000021                     fillCircleHelper@ddF_x:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x20
  1526  000021                     	ds	1
  1527  000022                     ___ftdiv@cntr:
  1528                           	opt stack 0
  1529  000022                     ___ftmul@exp:
  1530                           	opt stack 0
  1531  000022                     drawChar@bg:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x21
  1535  000022                     	ds	1
  1536  000023                     fillCircleHelper@ddF_y:
  1537                           	opt stack 0
  1538  000023                     ___ftdiv@f3:
  1539                           	opt stack 0
  1540  000023                     ___ftmul@f3_as_product:
  1541                           	opt stack 0
  1542                           
  1543                           ; 3 bytes @ 0x22
  1544  000023                     	ds	1
  1545  000024                     drawChar@size:
  1546                           	opt stack 0
  1547                           
  1548                           ; 1 bytes @ 0x23
  1549  000024                     	ds	1
  1550  000025                     drawChar@line:
  1551                           	opt stack 0
  1552  000025                     fillCircleHelper@f:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x24
  1556  000025                     	ds	1
  1557  000026                     drawChar@x:
  1558                           	opt stack 0
  1559  000026                     ___ftdiv@exp:
  1560                           	opt stack 0
  1561  000026                     ___ftmul@cntr:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x25
  1565  000026                     	ds	1
  1566  000027                     drawChar@j:
  1567                           	opt stack 0
  1568  000027                     ___ftdiv@sign:
  1569                           	opt stack 0
  1570  000027                     ___ftmul@sign:
  1571                           	opt stack 0
  1572  000027                     fillCircleHelper@x:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x26
  1576  000027                     	ds	1
  1577  000028                     ?_fround:
  1578                           	opt stack 0
  1579  000028                     ?_scale:
  1580                           	opt stack 0
  1581  000028                     drawChar@i:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x27
  1585  000028                     	ds	1
  1586  000029                     drawtext@y:
  1587                           	opt stack 0
  1588  000029                     fillCircleHelper@y:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x28
  1592  000029                     	ds	1
  1593  00002A                     drawtext@_text:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x29
  1597  00002A                     	ds	1
  1598  00002B                     fillCircle@x0:
  1599                           	opt stack 0
  1600  00002B                     _fround$2380:
  1601                           	opt stack 0
  1602  00002B                     _scale$2381:
  1603                           	opt stack 0
  1604                           
  1605                           ; 3 bytes @ 0x2A
  1606  00002B                     	ds	1
  1607  00002C                     drawtext@color:
  1608                           	opt stack 0
  1609                           
  1610                           ; 2 bytes @ 0x2B
  1611  00002C                     	ds	1
  1612  00002D                     fillCircle@y0:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x2C
  1616  00002D                     	ds	1
  1617  00002E                     scale@scl:
  1618                           	opt stack 0
  1619  00002E                     drawtext@bg:
  1620                           	opt stack 0
  1621  00002E                     _fround$2379:
  1622                           	opt stack 0
  1623                           
  1624                           ; 3 bytes @ 0x2D
  1625  00002E                     	ds	1
  1626  00002F                     ?___fttol:
  1627                           	opt stack 0
  1628  00002F                     fillCircle@r:
  1629                           	opt stack 0
  1630  00002F                     ___fttol@f1:
  1631                           	opt stack 0
  1632                           
  1633                           ; 3 bytes @ 0x2E
  1634  00002F                     	ds	1
  1635  000030                     drawtext@size:
  1636                           	opt stack 0
  1637                           
  1638                           ; 1 bytes @ 0x2F
  1639  000030                     	ds	1
  1640  000031                     ??_drawtext:
  1641  000031                     fround@prec:
  1642                           	opt stack 0
  1643  000031                     fillCircle@color:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x30
  1647  000031                     	ds	1
  1648  000032                     ?___ftadd:
  1649                           	opt stack 0
  1650  000032                     ___ftadd@f1:
  1651                           	opt stack 0
  1652                           
  1653                           ; 3 bytes @ 0x31
  1654  000032                     	ds	1
  1655  000033                     ??___fttol:
  1656  000033                     update_LCD_color@color:
  1657                           	opt stack 0
  1658  000033                     drawtext@textsize:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x32
  1662  000033                     	ds	1
  1663  000034                     update_LCD_color@direction:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0x33
  1667  000034                     	ds	1
  1668  000035                     drawtext@x:
  1669                           	opt stack 0
  1670  000035                     update_LCD_color@Circle_Y:
  1671                           	opt stack 0
  1672  000035                     ___ftadd@f2:
  1673                           	opt stack 0
  1674                           
  1675                           ; 3 bytes @ 0x34
  1676  000035                     	ds	1
  1677  000036                     Set_NS@color:
  1678                           	opt stack 0
  1679  000036                     Set_NSLT@color:
  1680                           	opt stack 0
  1681  000036                     Set_EW@color:
  1682                           	opt stack 0
  1683  000036                     Set_EWLT@color:
  1684                           	opt stack 0
  1685  000036                     drawtext@i:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0x35
  1689  000036                     	ds	2
  1690  000038                     ??___ftadd:
  1691  000038                     drawtext@cursor_y:
  1692                           	opt stack 0
  1693  000038                     ___fttol@sign1:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0x37
  1697  000038                     	ds	1
  1698  000039                     drawtext@cursor_x:
  1699                           	opt stack 0
  1700  000039                     ___fttol@lval:
  1701                           	opt stack 0
  1702                           
  1703                           ; 4 bytes @ 0x38
  1704  000039                     	ds	1
  1705  00003A                     update_LCD_count@count:
  1706                           	opt stack 0
  1707  00003A                     update_LCD_PED_Count@count:
  1708                           	opt stack 0
  1709                           
  1710                           ; 1 bytes @ 0x39
  1711  00003A                     	ds	1
  1712  00003B                     update_LCD_count@direction:
  1713                           	opt stack 0
  1714  00003B                     update_LCD_PED_Count@direction:
  1715                           	opt stack 0
  1716  00003B                     ___ftadd@sign:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x3A
  1720  00003B                     	ds	1
  1721  00003C                     ___ftadd@exp2:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x3B
  1725  00003C                     	ds	1
  1726  00003D                     ___ftadd@exp1:
  1727                           	opt stack 0
  1728  00003D                     ___fttol@exp1:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x3C
  1732  00003D                     	ds	1
  1733  00003E                     ?___ftsub:
  1734                           	opt stack 0
  1735  00003E                     ___ftsub@f1:
  1736                           	opt stack 0
  1737                           
  1738                           ; 3 bytes @ 0x3D
  1739  00003E                     	ds	3
  1740  000041                     ___ftsub@f2:
  1741                           	opt stack 0
  1742                           
  1743                           ; 3 bytes @ 0x40
  1744  000041                     	ds	3
  1745  000044                     ?_printf:
  1746                           	opt stack 0
  1747  000044                     printf@f:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x43
  1751  000044                     	ds	5
  1752  000049                     ??_printf:
  1753                           
  1754                           ; 0 bytes @ 0x48
  1755  000049                     	ds	6
  1756  00004F                     _printf$2382:
  1757                           	opt stack 0
  1758                           
  1759                           ; 3 bytes @ 0x4E
  1760  00004F                     	ds	3
  1761  000052                     printf@ap:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x51
  1765  000052                     	ds	2
  1766  000054                     printf@flag:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x53
  1770  000054                     	ds	2
  1771  000056                     printf@prec:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x55
  1775  000056                     	ds	2
  1776  000058                     printf@val:
  1777                           	opt stack 0
  1778                           
  1779                           ; 4 bytes @ 0x57
  1780  000058                     	ds	4
  1781  00005C                     printf@exp:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x5B
  1785  00005C                     	ds	2
  1786  00005E                     printf@tmpval:
  1787                           	opt stack 0
  1788                           
  1789                           ; 4 bytes @ 0x5D
  1790  00005E                     	ds	4
  1791  000062                     printf@fval:
  1792                           	opt stack 0
  1793                           
  1794                           ; 3 bytes @ 0x61
  1795  000062                     	ds	3
  1796  000065                     printf@c:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x64
  1800  000065                     	ds	1
  1801  000066                     update_LCD_misc@nStep:
  1802                           	opt stack 0
  1803                           
  1804                           ; 2 bytes @ 0x65
  1805  000066                     	ds	2
  1806  000068                     Wait_N_Seconds@seconds:
  1807                           	opt stack 0
  1808  000068                     PED_Control@Num_Sec:
  1809                           	opt stack 0
  1810                           
  1811                           ; 1 bytes @ 0x67
  1812  000068                     	ds	1
  1813  000069                     Wait_N_Seconds@I:
  1814                           	opt stack 0
  1815  000069                     PED_Control@Direction:
  1816                           	opt stack 0
  1817                           
  1818                           ; 1 bytes @ 0x68
  1819  000069                     	ds	1
  1820  00006A                     PED_Control@i:
  1821                           	opt stack 0
  1822                           
  1823                           ; 1 bytes @ 0x69
  1824  00006A                     	ds	1
  1825  00006B                     main@pvoltage_mv:
  1826                           	opt stack 0
  1827                           
  1828                           ; 3 bytes @ 0x6A
  1829  00006B                     	ds	3
  1830  00006E                     main@Pvoltage:
  1831                           	opt stack 0
  1832                           
  1833                           ; 3 bytes @ 0x6D
  1834  00006E                     	ds	3
  1835  000071                     main@num_step:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x70
  1839  000071                     	ds	2
  1840  000073                     main@finalVoltage:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x72
  1844  000073                     	ds	2
  1845                           tblptru	equ	0xFF8
  1846                           tblptrh	equ	0xFF7
  1847                           tblptrl	equ	0xFF6
  1848                           tablat	equ	0xFF5
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           postdec1	equ	0xFE5
  1852                           fsr1l	equ	0xFE1
  1853                           
  1854 ;;
  1855 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1856 ;;
  1857 ;; *************** function _main *****************
  1858 ;; Defined at:
  1859 ;;		line 165 in file "Lab7.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;		None
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;  Pvoltage        3  109[COMRAM] float 
  1864 ;;  pvoltage_mv     3  106[COMRAM] float 
  1865 ;;  finalVoltage    2  114[COMRAM] int 
  1866 ;;  num_step        2  112[COMRAM] int 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;		None               void
  1869 ;; Registers used:
  1870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1879 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;Total ram usage:       10 bytes
  1881 ;; Hardware stack levels required when called:   11
  1882 ;; This function calls:
  1883 ;;		_Day_Mode
  1884 ;;		_Init_ADC
  1885 ;;		_Init_Tris
  1886 ;;		_Initialize_Screen
  1887 ;;		_Night_Mode
  1888 ;;		_Select_ADC_Channel
  1889 ;;		___awtoft
  1890 ;;		___ftmul
  1891 ;;		___fttol
  1892 ;;		_get_full_ADC
  1893 ;;		_init_UART
  1894 ;; This function is called by:
  1895 ;;		Startup code after reset
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text0
  1900  00D0A8                     __ptext0:
  1901                           	opt stack 0
  1902  00D0A8                     _main:
  1903                           	opt stack 20
  1904                           
  1905                           ;Lab7.c: 167: Init_ADC();
  1906                           
  1907                           ;incstack = 0
  1908  00D0A8  EC58  F062         	call	_Init_ADC	;wreg free
  1909                           
  1910                           ;Lab7.c: 168: init_UART();
  1911  00D0AC  EC96  F062         	call	_init_UART	;wreg free
  1912                           
  1913                           ;Lab7.c: 169: Init_Tris();
  1914  00D0B0  ECA0  F062         	call	_Init_Tris	;wreg free
  1915                           
  1916                           ;Lab7.c: 171: OSCCON = 0x70;
  1917  00D0B4  0E70               	movlw	112
  1918  00D0B6  6ED3               	movwf	4051,c	;volatile
  1919                           
  1920                           ;Lab7.c: 172: RBPU = 0;
  1921  00D0B8  9EF1               	bcf	intcon2,7,c	;volatile
  1922                           
  1923                           ;Lab7.c: 173: Initialize_Screen();
  1924  00D0BA  EC0B  F07B         	call	_Initialize_Screen	;wreg free
  1925  00D0BE  D000               	goto	l5202
  1926  00D0C0                     l5202:
  1927                           
  1928                           ;Lab7.c: 175: Select_ADC_Channel(0);
  1929  00D0C0  0E00               	movlw	0
  1930  00D0C2  EC5D  F062         	call	_Select_ADC_Channel
  1931                           
  1932                           ;Lab7.c: 176: int num_step = get_full_ADC();
  1933  00D0C6  ECD8  F062         	call	_get_full_ADC	;wreg free
  1934  00D0CA  C001  F071         	movff	?_get_full_ADC,main@num_step
  1935  00D0CE  C002  F072         	movff	?_get_full_ADC+1,main@num_step+1
  1936                           
  1937                           ;Lab7.c: 177: float pvoltage_mv = num_step*4.0;
  1938  00D0D2  C071  F015         	movff	main@num_step,___awtoft@c
  1939  00D0D6  C072  F016         	movff	main@num_step+1,___awtoft@c+1
  1940  00D0DA  EC73  F063         	call	___awtoft	;wreg free
  1941  00D0DE  C015  F019         	movff	?___awtoft,___ftmul@f1
  1942  00D0E2  C016  F01A         	movff	?___awtoft+1,___ftmul@f1+1
  1943  00D0E6  C017  F01B         	movff	?___awtoft+2,___ftmul@f1+2
  1944  00D0EA  0E00               	movlw	0
  1945  00D0EC  6E1C               	movwf	___ftmul@f2,c
  1946  00D0EE  0E80               	movlw	128
  1947  00D0F0  6E1D               	movwf	___ftmul@f2+1,c
  1948  00D0F2  0E40               	movlw	64
  1949  00D0F4  6E1E               	movwf	___ftmul@f2+2,c
  1950  00D0F6  EC6D  F06C         	call	___ftmul	;wreg free
  1951  00D0FA  C019  F06B         	movff	?___ftmul,main@pvoltage_mv
  1952  00D0FE  C01A  F06C         	movff	?___ftmul+1,main@pvoltage_mv+1
  1953  00D102  C01B  F06D         	movff	?___ftmul+2,main@pvoltage_mv+2
  1954                           
  1955                           ;Lab7.c: 178: float Pvoltage = pvoltage_mv;
  1956  00D106  C06B  F06E         	movff	main@pvoltage_mv,main@Pvoltage
  1957  00D10A  C06C  F06F         	movff	main@pvoltage_mv+1,main@Pvoltage+1
  1958  00D10E  C06D  F070         	movff	main@pvoltage_mv+2,main@Pvoltage+2
  1959                           
  1960                           ;Lab7.c: 179: int finalVoltage = (int)Pvoltage;
  1961  00D112  C06E  F02F         	movff	main@Pvoltage,___fttol@f1
  1962  00D116  C06F  F030         	movff	main@Pvoltage+1,___fttol@f1+1
  1963  00D11A  C070  F031         	movff	main@Pvoltage+2,___fttol@f1+2
  1964  00D11E  EC81  F06B         	call	___fttol	;wreg free
  1965  00D122  C02F  F073         	movff	?___fttol,main@finalVoltage
  1966  00D126  C030  F074         	movff	?___fttol+1,main@finalVoltage+1
  1967                           
  1968                           ;Lab7.c: 181: if(finalVoltage < 2250){
  1969  00D12A  BE74               	btfsc	main@finalVoltage+1,7,c
  1970  00D12C  D006               	goto	l5214
  1971  00D12E  0ECA               	movlw	202
  1972  00D130  5C73               	subwf	main@finalVoltage,w,c
  1973  00D132  0E08               	movlw	8
  1974  00D134  5874               	subwfb	main@finalVoltage+1,w,c
  1975  00D136  B0D8               	btfsc	status,0,c
  1976  00D138  D004               	goto	l363
  1977  00D13A                     l5214:
  1978                           
  1979                           ;Lab7.c: 182: PORTBbits.RB7 = 1;
  1980  00D13A  8E81               	bsf	3969,7,c	;volatile
  1981                           
  1982                           ;Lab7.c: 183: Day_Mode();
  1983  00D13C  ECCA  F069         	call	_Day_Mode	;wreg free
  1984                           
  1985                           ;Lab7.c: 184: }else{
  1986  00D140  D7BF               	goto	l5202
  1987  00D142                     l363:
  1988                           
  1989                           ;Lab7.c: 185: PORTBbits.RB7 = 0;
  1990  00D142  9E81               	bcf	3969,7,c	;volatile
  1991                           
  1992                           ;Lab7.c: 186: Night_Mode();
  1993  00D144  ECA7  F068         	call	_Night_Mode	;wreg free
  1994  00D148  D7BB               	goto	l5202
  1995  00D14A  EF00  F000         	goto	start
  1996  00D14E                     __end_of_main:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           intcon2	equ	0xFF1
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           postdec1	equ	0xFE5
  2006                           fsr1l	equ	0xFE1
  2007                           status	equ	0xFD8
  2008                           
  2009 ;; *************** function _init_UART *****************
  2010 ;; Defined at:
  2011 ;;		line 194 in file "Lab7.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;		None
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;		None
  2016 ;; Return value:  Size  Location     Type
  2017 ;;		None               void
  2018 ;; Registers used:
  2019 ;;		wreg, status,2, cstack
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;Total ram usage:        0 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; Hardware stack levels required when called:    1
  2032 ;; This function calls:
  2033 ;;		_OpenUSART
  2034 ;; This function is called by:
  2035 ;;		_main
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text1
  2040  00C52C                     __ptext1:
  2041                           	opt stack 0
  2042  00C52C                     _init_UART:
  2043                           	opt stack 29
  2044                           
  2045                           ;Lab7.c: 195: OpenUSART(0b01111111 & 0b10111111 & 0b11111110 & 0b11111101
  2046                           ;Lab7.c: 196: & 0b11111111 & 0b11111111, 25);
  2047                           
  2048                           ;incstack = 0
  2049  00C52C  0E00               	movlw	0
  2050  00C52E  6E02               	movwf	OpenUSART@spbrg+1,c
  2051  00C530  0E19               	movlw	25
  2052  00C532  6E01               	movwf	OpenUSART@spbrg,c
  2053  00C534  0E3C               	movlw	60
  2054  00C536  ECF1  F065         	call	_OpenUSART
  2055                           
  2056                           ;Lab7.c: 197: OSCCON = 0x60;
  2057  00C53A  0E60               	movlw	96
  2058  00C53C  6ED3               	movwf	4051,c	;volatile
  2059  00C53E  0012               	return		;funcret
  2060  00C540                     __end_of_init_UART:
  2061                           	opt stack 0
  2062                           tblptru	equ	0xFF8
  2063                           tblptrh	equ	0xFF7
  2064                           tblptrl	equ	0xFF6
  2065                           tablat	equ	0xFF5
  2066                           intcon2	equ	0xFF1
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postdec1	equ	0xFE5
  2070                           fsr1l	equ	0xFE1
  2071                           status	equ	0xFD8
  2072                           
  2073 ;; *************** function _OpenUSART *****************
  2074 ;; Defined at:
  2075 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  config          1    wreg     unsigned char 
  2078 ;;  spbrg           2    0[COMRAM] unsigned int 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  config          1    2[COMRAM] unsigned char 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;		None               void
  2083 ;; Registers used:
  2084 ;;		wreg, status,2
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;Total ram usage:        3 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		_init_UART
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text2
  2104  00CBE2                     __ptext2:
  2105                           	opt stack 0
  2106  00CBE2                     _OpenUSART:
  2107                           	opt stack 29
  2108                           
  2109                           ;incstack = 0
  2110                           ;OpenUSART@config stored from wreg
  2111  00CBE2  6E03               	movwf	OpenUSART@config,c
  2112  00CBE4  0E00               	movlw	0
  2113  00CBE6  6EAC               	movwf	4012,c	;volatile
  2114  00CBE8  0E00               	movlw	0
  2115  00CBEA  6EAB               	movwf	4011,c	;volatile
  2116  00CBEC  A003               	btfss	OpenUSART@config,0,c
  2117  00CBEE  D002               	goto	l4630
  2118  00CBF0  88AC               	bsf	4012,4,c	;volatile
  2119  00CBF2  D000               	goto	l4630
  2120  00CBF4                     l4630:
  2121  00CBF4  A203               	btfss	OpenUSART@config,1,c
  2122  00CBF6  D003               	goto	l4634
  2123  00CBF8  8CAC               	bsf	4012,6,c	;volatile
  2124  00CBFA  8CAB               	bsf	4011,6,c	;volatile
  2125  00CBFC  D000               	goto	l4634
  2126  00CBFE                     l4634:
  2127  00CBFE  A403               	btfss	OpenUSART@config,2,c
  2128  00CC00  D002               	goto	l4638
  2129  00CC02  8EAC               	bsf	4012,7,c	;volatile
  2130  00CC04  D000               	goto	l4638
  2131  00CC06                     l4638:
  2132  00CC06  A603               	btfss	OpenUSART@config,3,c
  2133  00CC08  D002               	goto	l623
  2134  00CC0A  88AB               	bsf	4011,4,c	;volatile
  2135  00CC0C  D002               	goto	l4642
  2136  00CC0E                     l623:
  2137  00CC0E  8AAB               	bsf	4011,5,c	;volatile
  2138  00CC10  D000               	goto	l4642
  2139  00CC12                     l4642:
  2140  00CC12  B803               	btfsc	OpenUSART@config,4,c
  2141  00CC14  84AC               	bsf	4012,2,c	;volatile
  2142  00CC16  989E               	bcf	3998,4,c	;volatile
  2143  00CC18  AA03               	btfss	OpenUSART@config,5,c
  2144  00CC1A  D002               	goto	l4650
  2145  00CC1C  86AB               	bsf	4011,3,c	;volatile
  2146  00CC1E  D000               	goto	l4650
  2147  00CC20                     l4650:
  2148  00CC20  AC03               	btfss	OpenUSART@config,6,c
  2149  00CC22  D002               	goto	l627
  2150  00CC24  8A9D               	bsf	3997,5,c	;volatile
  2151  00CC26  D001               	goto	l628
  2152  00CC28                     l627:
  2153  00CC28  9A9D               	bcf	3997,5,c	;volatile
  2154  00CC2A                     l628:
  2155  00CC2A  9A9E               	bcf	3998,5,c	;volatile
  2156  00CC2C  AE03               	btfss	OpenUSART@config,7,c
  2157  00CC2E  D002               	goto	l629
  2158  00CC30  889D               	bsf	3997,4,c	;volatile
  2159  00CC32  D001               	goto	l630
  2160  00CC34                     l629:
  2161  00CC34  989D               	bcf	3997,4,c	;volatile
  2162  00CC36                     l630:
  2163  00CC36  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  2164  00CC3A  5002               	movf	OpenUSART@spbrg+1,w,c
  2165  00CC3C  6EB0               	movwf	4016,c	;volatile
  2166  00CC3E  8AAC               	bsf	4012,5,c	;volatile
  2167  00CC40  8EAB               	bsf	4011,7,c	;volatile
  2168  00CC42  9C94               	bcf	3988,6,c	;volatile
  2169  00CC44  8E94               	bsf	3988,7,c	;volatile
  2170  00CC46  B8AC               	btfsc	4012,4,c	;volatile
  2171  00CC48  BEAC               	btfsc	4012,7,c	;volatile
  2172  00CC4A  D002               	goto	l632
  2173  00CC4C  8C94               	bsf	3988,6,c	;volatile
  2174  00CC4E  D000               	goto	l632
  2175  00CC50                     l632:
  2176  00CC50  0012               	return		;funcret
  2177  00CC52                     __end_of_OpenUSART:
  2178                           	opt stack 0
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           intcon2	equ	0xFF1
  2184                           postinc0	equ	0xFEE
  2185                           wreg	equ	0xFE8
  2186                           postdec1	equ	0xFE5
  2187                           fsr1l	equ	0xFE1
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _Select_ADC_Channel *****************
  2191 ;; Defined at:
  2192 ;;		line 213 in file "Lab7.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  channel         1    wreg     unsigned char 
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;  channel         1    0[COMRAM] unsigned char 
  2197 ;; Return value:  Size  Location     Type
  2198 ;;		None               void
  2199 ;; Registers used:
  2200 ;;		wreg, status,2, status,0, prodl, prodh
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;Total ram usage:        1 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text3
  2220  00C4BA                     __ptext3:
  2221                           	opt stack 0
  2222  00C4BA                     _Select_ADC_Channel:
  2223                           	opt stack 30
  2224                           
  2225                           ;incstack = 0
  2226                           ;Select_ADC_Channel@channel stored from wreg
  2227  00C4BA  6E01               	movwf	Select_ADC_Channel@channel,c
  2228                           
  2229                           ;Lab7.c: 215: ADCON0 = channel * 4 + 1;
  2230  00C4BC  5001               	movf	Select_ADC_Channel@channel,w,c
  2231  00C4BE  0D04               	mullw	4
  2232  00C4C0  28F3               	incf	prodl,w,c
  2233  00C4C2  6EC2               	movwf	4034,c	;volatile
  2234  00C4C4  0012               	return		;funcret
  2235  00C4C6                     __end_of_Select_ADC_Channel:
  2236                           	opt stack 0
  2237                           tblptru	equ	0xFF8
  2238                           tblptrh	equ	0xFF7
  2239                           tblptrl	equ	0xFF6
  2240                           tablat	equ	0xFF5
  2241                           prodl	equ	0xFF3
  2242                           intcon2	equ	0xFF1
  2243                           postinc0	equ	0xFEE
  2244                           wreg	equ	0xFE8
  2245                           postdec1	equ	0xFE5
  2246                           fsr1l	equ	0xFE1
  2247                           status	equ	0xFD8
  2248                           
  2249 ;; *************** function _Night_Mode *****************
  2250 ;; Defined at:
  2251 ;;		line 351 in file "Lab7.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;		None
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;		None
  2256 ;; Return value:  Size  Location     Type
  2257 ;;		None               void
  2258 ;; Registers used:
  2259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;Total ram usage:        0 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:   10
  2272 ;; This function calls:
  2273 ;;		_Set_EW
  2274 ;;		_Set_EWLT
  2275 ;;		_Set_NS
  2276 ;;		_Set_NSLT
  2277 ;;		_Wait_N_Seconds
  2278 ;; This function is called by:
  2279 ;;		_main
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text4
  2284  00D14E                     __ptext4:
  2285                           	opt stack 0
  2286  00D14E                     _Night_Mode:
  2287                           	opt stack 20
  2288                           
  2289                           ;Lab7.c: 352: MODE = 0;
  2290                           
  2291                           ;incstack = 0
  2292  00D14E  0E00               	movlw	0
  2293  00D150  0100               	movlb	0	; () banked
  2294  00D152  6FB1               	movwf	(_MODE+1)& (0+255),b
  2295  00D154  0E00               	movlw	0
  2296  00D156  6FB0               	movwf	_MODE& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;Lab7.c: 353: PORTBbits.RB7 = 0;
  2300  00D158  9E81               	bcf	3969,7,c	;volatile
  2301                           
  2302                           ;Lab7.c: 354: Act_Mode_Txt[0] = 'N';
  2303  00D15A  0E4E               	movlw	78
  2304  00D15C  0100               	movlb	0	; () banked
  2305  00D15E  6F9F               	movwf	_Act_Mode_Txt& (0+255),b
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;Lab7.c: 355: Set_NSLT(1);
  2309  00D160  0E01               	movlw	1
  2310  00D162  EC96  F064         	call	_Set_NSLT
  2311                           
  2312                           ;Lab7.c: 356: Set_EW(1);
  2313  00D166  0E01               	movlw	1
  2314  00D168  EC30  F064         	call	_Set_EW
  2315                           
  2316                           ;Lab7.c: 357: Set_EWLT(1);
  2317  00D16C  0E01               	movlw	1
  2318  00D16E  EC52  F064         	call	_Set_EWLT
  2319                           
  2320                           ;Lab7.c: 358: Set_NS(2);
  2321  00D172  0E02               	movlw	2
  2322  00D174  EC74  F064         	call	_Set_NS
  2323                           
  2324                           ;Lab7.c: 359: Wait_N_Seconds(8);
  2325  00D178  0E08               	movlw	8
  2326  00D17A  EC2B  F063         	call	_Wait_N_Seconds
  2327                           
  2328                           ;Lab7.c: 360: Set_NS(3);
  2329  00D17E  0E03               	movlw	3
  2330  00D180  EC74  F064         	call	_Set_NS
  2331                           
  2332                           ;Lab7.c: 361: Wait_N_Seconds(3);
  2333  00D184  0E03               	movlw	3
  2334  00D186  EC2B  F063         	call	_Wait_N_Seconds
  2335                           
  2336                           ;Lab7.c: 362: Set_NS(1);
  2337  00D18A  0E01               	movlw	1
  2338  00D18C  EC74  F064         	call	_Set_NS
  2339                           
  2340                           ;Lab7.c: 363: if(PORTAbits.RA4){
  2341  00D190  A880               	btfss	3968,4,c	;volatile
  2342  00D192  D010               	goto	l4938
  2343                           
  2344                           ;Lab7.c: 364: Set_EWLT(2);
  2345  00D194  0E02               	movlw	2
  2346  00D196  EC52  F064         	call	_Set_EWLT
  2347                           
  2348                           ;Lab7.c: 365: Wait_N_Seconds(6);
  2349  00D19A  0E06               	movlw	6
  2350  00D19C  EC2B  F063         	call	_Wait_N_Seconds
  2351                           
  2352                           ;Lab7.c: 366: Set_EWLT(3);
  2353  00D1A0  0E03               	movlw	3
  2354  00D1A2  EC52  F064         	call	_Set_EWLT
  2355                           
  2356                           ;Lab7.c: 367: Wait_N_Seconds(3);
  2357  00D1A6  0E03               	movlw	3
  2358  00D1A8  EC2B  F063         	call	_Wait_N_Seconds
  2359                           
  2360                           ;Lab7.c: 368: Set_EWLT(1);
  2361  00D1AC  0E01               	movlw	1
  2362  00D1AE  EC52  F064         	call	_Set_EWLT
  2363                           
  2364                           ;Lab7.c: 369: }else{
  2365  00D1B2  D010               	goto	l4946
  2366  00D1B4                     l4938:
  2367                           
  2368                           ;Lab7.c: 370: Set_EW(2);
  2369  00D1B4  0E02               	movlw	2
  2370  00D1B6  EC30  F064         	call	_Set_EW
  2371                           
  2372                           ;Lab7.c: 371: Wait_N_Seconds(6);
  2373  00D1BA  0E06               	movlw	6
  2374  00D1BC  EC2B  F063         	call	_Wait_N_Seconds
  2375                           
  2376                           ;Lab7.c: 372: Set_EW(3);
  2377  00D1C0  0E03               	movlw	3
  2378  00D1C2  EC30  F064         	call	_Set_EW
  2379                           
  2380                           ;Lab7.c: 373: Wait_N_Seconds(3);
  2381  00D1C6  0E03               	movlw	3
  2382  00D1C8  EC2B  F063         	call	_Wait_N_Seconds
  2383                           
  2384                           ;Lab7.c: 374: Set_EW(1);
  2385  00D1CC  0E01               	movlw	1
  2386  00D1CE  EC30  F064         	call	_Set_EW
  2387  00D1D2  D000               	goto	l4946
  2388  00D1D4                     l4946:
  2389                           
  2390                           ;Lab7.c: 375: }
  2391                           ;Lab7.c: 376: if(PORTAbits.RA2){
  2392  00D1D4  A480               	btfss	3968,2,c	;volatile
  2393  00D1D6  D010               	goto	l4956
  2394                           
  2395                           ;Lab7.c: 377: Set_NSLT(2);
  2396  00D1D8  0E02               	movlw	2
  2397  00D1DA  EC96  F064         	call	_Set_NSLT
  2398                           
  2399                           ;Lab7.c: 378: Wait_N_Seconds(8);
  2400  00D1DE  0E08               	movlw	8
  2401  00D1E0  EC2B  F063         	call	_Wait_N_Seconds
  2402                           
  2403                           ;Lab7.c: 379: Set_NSLT(3);
  2404  00D1E4  0E03               	movlw	3
  2405  00D1E6  EC96  F064         	call	_Set_NSLT
  2406                           
  2407                           ;Lab7.c: 380: Wait_N_Seconds(3);
  2408  00D1EA  0E03               	movlw	3
  2409  00D1EC  EC2B  F063         	call	_Wait_N_Seconds
  2410                           
  2411                           ;Lab7.c: 381: Set_NSLT(1);
  2412  00D1F0  0E01               	movlw	1
  2413  00D1F2  EC96  F064         	call	_Set_NSLT
  2414                           
  2415                           ;Lab7.c: 382: }else{
  2416  00D1F6  D004               	goto	l470
  2417  00D1F8                     l4956:
  2418                           
  2419                           ;Lab7.c: 383: Set_NSLT(1);
  2420  00D1F8  0E01               	movlw	1
  2421  00D1FA  EC96  F064         	call	_Set_NSLT
  2422  00D1FE  D000               	goto	l470
  2423  00D200                     l470:
  2424  00D200  0012               	return		;funcret
  2425  00D202                     __end_of_Night_Mode:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           tblptrh	equ	0xFF7
  2429                           tblptrl	equ	0xFF6
  2430                           tablat	equ	0xFF5
  2431                           prodl	equ	0xFF3
  2432                           intcon2	equ	0xFF1
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           postdec1	equ	0xFE5
  2436                           fsr1l	equ	0xFE1
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _Initialize_Screen *****************
  2440 ;; Defined at:
  2441 ;;		line 482 in file "Lab7.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;		None               void
  2448 ;; Registers used:
  2449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;Total ram usage:        0 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    7
  2462 ;; This function calls:
  2463 ;;		_LCD_Reset
  2464 ;;		_TFT_GreenTab_Initialize
  2465 ;;		_drawCircle
  2466 ;;		_drawRect
  2467 ;;		_drawtext
  2468 ;;		_fillCircle
  2469 ;;		_fillScreen
  2470 ;;		_strcpy
  2471 ;; This function is called by:
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text5
  2477  00F616                     __ptext5:
  2478                           	opt stack 0
  2479  00F616                     _Initialize_Screen:
  2480                           	opt stack 23
  2481                           
  2482                           ;Lab7.c: 484: LCD_Reset();
  2483                           
  2484                           ;incstack = 0
  2485  00F616  EC83  F062         	call	_LCD_Reset	;wreg free
  2486                           
  2487                           ;Lab7.c: 485: TFT_GreenTab_Initialize();
  2488  00F61A  ECFF  F062         	call	_TFT_GreenTab_Initialize	;wreg free
  2489                           
  2490                           ;Lab7.c: 486: fillScreen(0x0000);
  2491  00F61E  0E00               	movlw	0
  2492  00F620  6E15               	movwf	fillScreen@color+1,c
  2493  00F622  0E00               	movlw	0
  2494  00F624  6E14               	movwf	fillScreen@color,c
  2495  00F626  ECB8  F062         	call	_fillScreen	;wreg free
  2496                           
  2497                           ;Lab7.c: 489: txt = buffer;
  2498  00F62A  0EB9               	movlw	low _buffer
  2499  00F62C  6E75               	movwf	_txt,c
  2500  00F62E  0E00               	movlw	high _buffer
  2501  00F630  6E76               	movwf	_txt+1,c
  2502                           
  2503                           ;Lab7.c: 490: strcpy(txt, "ECE3301L SPRING 22-S3");
  2504  00F632  C075  F001         	movff	_txt,strcpy@to
  2505  00F636  C076  F002         	movff	_txt+1,strcpy@to+1
  2506  00F63A  0E86               	movlw	low STR_5
  2507  00F63C  6E03               	movwf	strcpy@from,c
  2508  00F63E  0EFF               	movlw	high STR_5
  2509  00F640  6E04               	movwf	strcpy@from+1,c
  2510  00F642  EC5A  F063         	call	_strcpy	;wreg free
  2511                           
  2512                           ;Lab7.c: 491: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2513  00F646  0E02               	movlw	2
  2514  00F648  6E29               	movwf	drawtext@y,c
  2515  00F64A  C075  F02A         	movff	_txt,drawtext@_text
  2516  00F64E  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2517  00F652  0EFF               	movlw	255
  2518  00F654  6E2D               	movwf	drawtext@color+1,c
  2519  00F656  682C               	setf	drawtext@color,c
  2520  00F658  0E00               	movlw	0
  2521  00F65A  6E2F               	movwf	drawtext@bg+1,c
  2522  00F65C  0E00               	movlw	0
  2523  00F65E  6E2E               	movwf	drawtext@bg,c
  2524  00F660  0E01               	movlw	1
  2525  00F662  6E30               	movwf	drawtext@size,c
  2526  00F664  0E02               	movlw	2
  2527  00F666  EC10  F06B         	call	_drawtext
  2528                           
  2529                           ;Lab7.c: 494: strcpy(txt, "Mode:");
  2530  00F66A  C075  F001         	movff	_txt,strcpy@to
  2531  00F66E  C076  F002         	movff	_txt+1,strcpy@to+1
  2532  00F672  0EE5               	movlw	low STR_6
  2533  00F674  6E03               	movwf	strcpy@from,c
  2534  00F676  0EFF               	movlw	high STR_6
  2535  00F678  6E04               	movwf	strcpy@from+1,c
  2536  00F67A  EC5A  F063         	call	_strcpy	;wreg free
  2537                           
  2538                           ;Lab7.c: 495: drawtext(2, 10, txt, 0xFFFF, 0x0000, 1);
  2539  00F67E  0E0A               	movlw	10
  2540  00F680  6E29               	movwf	drawtext@y,c
  2541  00F682  C075  F02A         	movff	_txt,drawtext@_text
  2542  00F686  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2543  00F68A  0EFF               	movlw	255
  2544  00F68C  6E2D               	movwf	drawtext@color+1,c
  2545  00F68E  682C               	setf	drawtext@color,c
  2546  00F690  0E00               	movlw	0
  2547  00F692  6E2F               	movwf	drawtext@bg+1,c
  2548  00F694  0E00               	movlw	0
  2549  00F696  6E2E               	movwf	drawtext@bg,c
  2550  00F698  0E01               	movlw	1
  2551  00F69A  6E30               	movwf	drawtext@size,c
  2552  00F69C  0E02               	movlw	2
  2553  00F69E  EC10  F06B         	call	_drawtext
  2554                           
  2555                           ;Lab7.c: 496: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2556  00F6A2  0E0A               	movlw	10
  2557  00F6A4  6E29               	movwf	drawtext@y,c
  2558  00F6A6  0E9F               	movlw	low _Act_Mode_Txt
  2559  00F6A8  6E2A               	movwf	drawtext@_text,c
  2560  00F6AA  0E00               	movlw	high _Act_Mode_Txt
  2561  00F6AC  6E2B               	movwf	drawtext@_text+1,c
  2562  00F6AE  0EFF               	movlw	255
  2563  00F6B0  6E2D               	movwf	drawtext@color+1,c
  2564  00F6B2  682C               	setf	drawtext@color,c
  2565  00F6B4  0E00               	movlw	0
  2566  00F6B6  6E2F               	movwf	drawtext@bg+1,c
  2567  00F6B8  0E00               	movlw	0
  2568  00F6BA  6E2E               	movwf	drawtext@bg,c
  2569  00F6BC  0E01               	movlw	1
  2570  00F6BE  6E30               	movwf	drawtext@size,c
  2571  00F6C0  0E23               	movlw	35
  2572  00F6C2  EC10  F06B         	call	_drawtext
  2573                           
  2574                           ;Lab7.c: 499: strcpy(txt, "FR:");
  2575  00F6C6  C075  F001         	movff	_txt,strcpy@to
  2576  00F6CA  C076  F002         	movff	_txt+1,strcpy@to+1
  2577  00F6CE  0EEB               	movlw	low STR_7
  2578  00F6D0  6E03               	movwf	strcpy@from,c
  2579  00F6D2  0EFF               	movlw	high STR_7
  2580  00F6D4  6E04               	movwf	strcpy@from+1,c
  2581  00F6D6  EC5A  F063         	call	_strcpy	;wreg free
  2582                           
  2583                           ;Lab7.c: 500: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  2584  00F6DA  0E0A               	movlw	10
  2585  00F6DC  6E29               	movwf	drawtext@y,c
  2586  00F6DE  C075  F02A         	movff	_txt,drawtext@_text
  2587  00F6E2  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2588  00F6E6  0EFF               	movlw	255
  2589  00F6E8  6E2D               	movwf	drawtext@color+1,c
  2590  00F6EA  682C               	setf	drawtext@color,c
  2591  00F6EC  0E00               	movlw	0
  2592  00F6EE  6E2F               	movwf	drawtext@bg+1,c
  2593  00F6F0  0E00               	movlw	0
  2594  00F6F2  6E2E               	movwf	drawtext@bg,c
  2595  00F6F4  0E01               	movlw	1
  2596  00F6F6  6E30               	movwf	drawtext@size,c
  2597  00F6F8  0E32               	movlw	50
  2598  00F6FA  EC10  F06B         	call	_drawtext
  2599                           
  2600                           ;Lab7.c: 501: drawtext(70, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2601  00F6FE  0E0A               	movlw	10
  2602  00F700  6E29               	movwf	drawtext@y,c
  2603  00F702  0EA1               	movlw	low _FlashingR_Txt
  2604  00F704  6E2A               	movwf	drawtext@_text,c
  2605  00F706  0E00               	movlw	high _FlashingR_Txt
  2606  00F708  6E2B               	movwf	drawtext@_text+1,c
  2607  00F70A  0EFF               	movlw	255
  2608  00F70C  6E2D               	movwf	drawtext@color+1,c
  2609  00F70E  682C               	setf	drawtext@color,c
  2610  00F710  0E00               	movlw	0
  2611  00F712  6E2F               	movwf	drawtext@bg+1,c
  2612  00F714  0E00               	movlw	0
  2613  00F716  6E2E               	movwf	drawtext@bg,c
  2614  00F718  0E01               	movlw	1
  2615  00F71A  6E30               	movwf	drawtext@size,c
  2616  00F71C  0E46               	movlw	70
  2617  00F71E  EC10  F06B         	call	_drawtext
  2618                           
  2619                           ;Lab7.c: 504: strcpy(txt, "FS:");
  2620  00F722  C075  F001         	movff	_txt,strcpy@to
  2621  00F726  C076  F002         	movff	_txt+1,strcpy@to+1
  2622  00F72A  0EEF               	movlw	low STR_8
  2623  00F72C  6E03               	movwf	strcpy@from,c
  2624  00F72E  0EFF               	movlw	high STR_8
  2625  00F730  6E04               	movwf	strcpy@from+1,c
  2626  00F732  EC5A  F063         	call	_strcpy	;wreg free
  2627                           
  2628                           ;Lab7.c: 505: drawtext(80, 10, txt, 0xFFFF, 0x0000, 1);
  2629  00F736  0E0A               	movlw	10
  2630  00F738  6E29               	movwf	drawtext@y,c
  2631  00F73A  C075  F02A         	movff	_txt,drawtext@_text
  2632  00F73E  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2633  00F742  0EFF               	movlw	255
  2634  00F744  6E2D               	movwf	drawtext@color+1,c
  2635  00F746  682C               	setf	drawtext@color,c
  2636  00F748  0E00               	movlw	0
  2637  00F74A  6E2F               	movwf	drawtext@bg+1,c
  2638  00F74C  0E00               	movlw	0
  2639  00F74E  6E2E               	movwf	drawtext@bg,c
  2640  00F750  0E01               	movlw	1
  2641  00F752  6E30               	movwf	drawtext@size,c
  2642  00F754  0E50               	movlw	80
  2643  00F756  EC10  F06B         	call	_drawtext
  2644                           
  2645                           ;Lab7.c: 506: drawtext(100, 10, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2646  00F75A  0E0A               	movlw	10
  2647  00F75C  6E29               	movwf	drawtext@y,c
  2648  00F75E  0EA1               	movlw	low _FlashingR_Txt
  2649  00F760  6E2A               	movwf	drawtext@_text,c
  2650  00F762  0E00               	movlw	high _FlashingR_Txt
  2651  00F764  6E2B               	movwf	drawtext@_text+1,c
  2652  00F766  0EFF               	movlw	255
  2653  00F768  6E2D               	movwf	drawtext@color+1,c
  2654  00F76A  682C               	setf	drawtext@color,c
  2655  00F76C  0E00               	movlw	0
  2656  00F76E  6E2F               	movwf	drawtext@bg+1,c
  2657  00F770  0E00               	movlw	0
  2658  00F772  6E2E               	movwf	drawtext@bg,c
  2659  00F774  0E01               	movlw	1
  2660  00F776  6E30               	movwf	drawtext@size,c
  2661  00F778  0E64               	movlw	100
  2662  00F77A  EC10  F06B         	call	_drawtext
  2663                           
  2664                           ;Lab7.c: 509: strcpy(txt, "*");
  2665  00F77E  C075  F001         	movff	_txt,strcpy@to
  2666  00F782  C076  F002         	movff	_txt+1,strcpy@to+1
  2667  00F786  0EFD               	movlw	low STR_1
  2668  00F788  6E03               	movwf	strcpy@from,c
  2669  00F78A  0EFF               	movlw	high STR_1
  2670  00F78C  6E04               	movwf	strcpy@from+1,c
  2671  00F78E  EC5A  F063         	call	_strcpy	;wreg free
  2672                           
  2673                           ;Lab7.c: 510: drawtext(120, 10, txt, 0xFFFF, 0x0000, 1);
  2674  00F792  0E0A               	movlw	10
  2675  00F794  6E29               	movwf	drawtext@y,c
  2676  00F796  C075  F02A         	movff	_txt,drawtext@_text
  2677  00F79A  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2678  00F79E  0EFF               	movlw	255
  2679  00F7A0  6E2D               	movwf	drawtext@color+1,c
  2680  00F7A2  682C               	setf	drawtext@color,c
  2681  00F7A4  0E00               	movlw	0
  2682  00F7A6  6E2F               	movwf	drawtext@bg+1,c
  2683  00F7A8  0E00               	movlw	0
  2684  00F7AA  6E2E               	movwf	drawtext@bg,c
  2685  00F7AC  0E01               	movlw	1
  2686  00F7AE  6E30               	movwf	drawtext@size,c
  2687  00F7B0  0E78               	movlw	120
  2688  00F7B2  EC10  F06B         	call	_drawtext
  2689                           
  2690                           ;Lab7.c: 513: strcpy(txt, "NORTH/SOUTH");
  2691  00F7B6  C075  F001         	movff	_txt,strcpy@to
  2692  00F7BA  C076  F002         	movff	_txt+1,strcpy@to+1
  2693  00F7BE  0EC1               	movlw	low STR_10
  2694  00F7C0  6E03               	movwf	strcpy@from,c
  2695  00F7C2  0EFF               	movlw	high STR_10
  2696  00F7C4  6E04               	movwf	strcpy@from+1,c
  2697  00F7C6  EC5A  F063         	call	_strcpy	;wreg free
  2698                           
  2699                           ;Lab7.c: 514: drawtext (30, 20 , txt, 0x001F, 0x0000, 1);
  2700  00F7CA  0E14               	movlw	20
  2701  00F7CC  6E29               	movwf	drawtext@y,c
  2702  00F7CE  C075  F02A         	movff	_txt,drawtext@_text
  2703  00F7D2  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2704  00F7D6  0E00               	movlw	0
  2705  00F7D8  6E2D               	movwf	drawtext@color+1,c
  2706  00F7DA  0E1F               	movlw	31
  2707  00F7DC  6E2C               	movwf	drawtext@color,c
  2708  00F7DE  0E00               	movlw	0
  2709  00F7E0  6E2F               	movwf	drawtext@bg+1,c
  2710  00F7E2  0E00               	movlw	0
  2711  00F7E4  6E2E               	movwf	drawtext@bg,c
  2712  00F7E6  0E01               	movlw	1
  2713  00F7E8  6E30               	movwf	drawtext@size,c
  2714  00F7EA  0E1E               	movlw	30
  2715  00F7EC  EC10  F06B         	call	_drawtext
  2716                           
  2717                           ;Lab7.c: 515: drawRect (30, 20 + 15-8, 60, 18, 0x001F);
  2718  00F7F0  0E00               	movlw	0
  2719  00F7F2  6E14               	movwf	drawRect@x+1,c
  2720  00F7F4  0E1E               	movlw	30
  2721  00F7F6  6E13               	movwf	drawRect@x,c
  2722  00F7F8  0E00               	movlw	0
  2723  00F7FA  6E16               	movwf	drawRect@y+1,c
  2724  00F7FC  0E1B               	movlw	27
  2725  00F7FE  6E15               	movwf	drawRect@y,c
  2726  00F800  0E00               	movlw	0
  2727  00F802  6E18               	movwf	drawRect@w+1,c
  2728  00F804  0E3C               	movlw	60
  2729  00F806  6E17               	movwf	drawRect@w,c
  2730  00F808  0E00               	movlw	0
  2731  00F80A  6E1A               	movwf	drawRect@h+1,c
  2732  00F80C  0E12               	movlw	18
  2733  00F80E  6E19               	movwf	drawRect@h,c
  2734  00F810  0E00               	movlw	0
  2735  00F812  6E1C               	movwf	drawRect@color+1,c
  2736  00F814  0E1F               	movlw	31
  2737  00F816  6E1B               	movwf	drawRect@color,c
  2738  00F818  EC86  F065         	call	_drawRect	;wreg free
  2739                           
  2740                           ;Lab7.c: 516: drawCircle(40, 20 + 15 , 7, 0xF800);
  2741  00F81C  0E00               	movlw	0
  2742  00F81E  6E0D               	movwf	drawCircle@x0+1,c
  2743  00F820  0E28               	movlw	40
  2744  00F822  6E0C               	movwf	drawCircle@x0,c
  2745  00F824  0E00               	movlw	0
  2746  00F826  6E0F               	movwf	drawCircle@y0+1,c
  2747  00F828  0E23               	movlw	35
  2748  00F82A  6E0E               	movwf	drawCircle@y0,c
  2749  00F82C  0E00               	movlw	0
  2750  00F82E  6E11               	movwf	drawCircle@r+1,c
  2751  00F830  0E07               	movlw	7
  2752  00F832  6E10               	movwf	drawCircle@r,c
  2753  00F834  0EF8               	movlw	248
  2754  00F836  6E13               	movwf	drawCircle@color+1,c
  2755  00F838  0E00               	movlw	0
  2756  00F83A  6E12               	movwf	drawCircle@color,c
  2757  00F83C  EC8C  F070         	call	_drawCircle	;wreg free
  2758                           
  2759                           ;Lab7.c: 517: drawCircle(60, 20 + 15 , 7, 0xFFE0);
  2760  00F840  0E00               	movlw	0
  2761  00F842  6E0D               	movwf	drawCircle@x0+1,c
  2762  00F844  0E3C               	movlw	60
  2763  00F846  6E0C               	movwf	drawCircle@x0,c
  2764  00F848  0E00               	movlw	0
  2765  00F84A  6E0F               	movwf	drawCircle@y0+1,c
  2766  00F84C  0E23               	movlw	35
  2767  00F84E  6E0E               	movwf	drawCircle@y0,c
  2768  00F850  0E00               	movlw	0
  2769  00F852  6E11               	movwf	drawCircle@r+1,c
  2770  00F854  0E07               	movlw	7
  2771  00F856  6E10               	movwf	drawCircle@r,c
  2772  00F858  0EFF               	movlw	255
  2773  00F85A  6E13               	movwf	drawCircle@color+1,c
  2774  00F85C  0EE0               	movlw	224
  2775  00F85E  6E12               	movwf	drawCircle@color,c
  2776  00F860  EC8C  F070         	call	_drawCircle	;wreg free
  2777                           
  2778                           ;Lab7.c: 518: fillCircle(80, 20 + 15 , 7, 0x07E0);
  2779  00F864  0E00               	movlw	0
  2780  00F866  6E2C               	movwf	fillCircle@x0+1,c
  2781  00F868  0E50               	movlw	80
  2782  00F86A  6E2B               	movwf	fillCircle@x0,c
  2783  00F86C  0E00               	movlw	0
  2784  00F86E  6E2E               	movwf	fillCircle@y0+1,c
  2785  00F870  0E23               	movlw	35
  2786  00F872  6E2D               	movwf	fillCircle@y0,c
  2787  00F874  0E00               	movlw	0
  2788  00F876  6E30               	movwf	fillCircle@r+1,c
  2789  00F878  0E07               	movlw	7
  2790  00F87A  6E2F               	movwf	fillCircle@r,c
  2791  00F87C  0E07               	movlw	7
  2792  00F87E  6E32               	movwf	fillCircle@color+1,c
  2793  00F880  0EE0               	movlw	224
  2794  00F882  6E31               	movwf	fillCircle@color,c
  2795  00F884  EC04  F065         	call	_fillCircle	;wreg free
  2796                           
  2797                           ;Lab7.c: 519: drawtext (100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  2798  00F888  0E1E               	movlw	30
  2799  00F88A  6E29               	movwf	drawtext@y,c
  2800  00F88C  0E96               	movlw	low _NS_Count
  2801  00F88E  6E2A               	movwf	drawtext@_text,c
  2802  00F890  0E00               	movlw	high _NS_Count
  2803  00F892  6E2B               	movwf	drawtext@_text+1,c
  2804  00F894  0E00               	movlw	0
  2805  00F896  6E2D               	movwf	drawtext@color+1,c
  2806  00F898  0E1F               	movlw	31
  2807  00F89A  6E2C               	movwf	drawtext@color,c
  2808  00F89C  0E00               	movlw	0
  2809  00F89E  6E2F               	movwf	drawtext@bg+1,c
  2810  00F8A0  0E00               	movlw	0
  2811  00F8A2  6E2E               	movwf	drawtext@bg,c
  2812  00F8A4  0E02               	movlw	2
  2813  00F8A6  6E30               	movwf	drawtext@size,c
  2814  00F8A8  0E64               	movlw	100
  2815  00F8AA  EC10  F06B         	call	_drawtext
  2816                           
  2817                           ;Lab7.c: 522: strcpy(txt, "N/S LT");
  2818  00F8AE  C075  F001         	movff	_txt,strcpy@to
  2819  00F8B2  C076  F002         	movff	_txt+1,strcpy@to+1
  2820  00F8B6  0ED7               	movlw	low STR_11
  2821  00F8B8  6E03               	movwf	strcpy@from,c
  2822  00F8BA  0EFF               	movlw	high STR_11
  2823  00F8BC  6E04               	movwf	strcpy@from+1,c
  2824  00F8BE  EC5A  F063         	call	_strcpy	;wreg free
  2825                           
  2826                           ;Lab7.c: 523: drawtext (30, 50, txt, 0xF81F, 0x0000, 1);
  2827  00F8C2  0E32               	movlw	50
  2828  00F8C4  6E29               	movwf	drawtext@y,c
  2829  00F8C6  C075  F02A         	movff	_txt,drawtext@_text
  2830  00F8CA  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2831  00F8CE  0EF8               	movlw	248
  2832  00F8D0  6E2D               	movwf	drawtext@color+1,c
  2833  00F8D2  0E1F               	movlw	31
  2834  00F8D4  6E2C               	movwf	drawtext@color,c
  2835  00F8D6  0E00               	movlw	0
  2836  00F8D8  6E2F               	movwf	drawtext@bg+1,c
  2837  00F8DA  0E00               	movlw	0
  2838  00F8DC  6E2E               	movwf	drawtext@bg,c
  2839  00F8DE  0E01               	movlw	1
  2840  00F8E0  6E30               	movwf	drawtext@size,c
  2841  00F8E2  0E1E               	movlw	30
  2842  00F8E4  EC10  F06B         	call	_drawtext
  2843                           
  2844                           ;Lab7.c: 524: drawRect (30, 50 + 15-8, 60, 18, 0xF81F);
  2845  00F8E8  0E00               	movlw	0
  2846  00F8EA  6E14               	movwf	drawRect@x+1,c
  2847  00F8EC  0E1E               	movlw	30
  2848  00F8EE  6E13               	movwf	drawRect@x,c
  2849  00F8F0  0E00               	movlw	0
  2850  00F8F2  6E16               	movwf	drawRect@y+1,c
  2851  00F8F4  0E39               	movlw	57
  2852  00F8F6  6E15               	movwf	drawRect@y,c
  2853  00F8F8  0E00               	movlw	0
  2854  00F8FA  6E18               	movwf	drawRect@w+1,c
  2855  00F8FC  0E3C               	movlw	60
  2856  00F8FE  6E17               	movwf	drawRect@w,c
  2857  00F900  0E00               	movlw	0
  2858  00F902  6E1A               	movwf	drawRect@h+1,c
  2859  00F904  0E12               	movlw	18
  2860  00F906  6E19               	movwf	drawRect@h,c
  2861  00F908  0EF8               	movlw	248
  2862  00F90A  6E1C               	movwf	drawRect@color+1,c
  2863  00F90C  0E1F               	movlw	31
  2864  00F90E  6E1B               	movwf	drawRect@color,c
  2865  00F910  EC86  F065         	call	_drawRect	;wreg free
  2866                           
  2867                           ;Lab7.c: 525: fillCircle(40, 50 + 15, 7, 0xF800);
  2868  00F914  0E00               	movlw	0
  2869  00F916  6E2C               	movwf	fillCircle@x0+1,c
  2870  00F918  0E28               	movlw	40
  2871  00F91A  6E2B               	movwf	fillCircle@x0,c
  2872  00F91C  0E00               	movlw	0
  2873  00F91E  6E2E               	movwf	fillCircle@y0+1,c
  2874  00F920  0E41               	movlw	65
  2875  00F922  6E2D               	movwf	fillCircle@y0,c
  2876  00F924  0E00               	movlw	0
  2877  00F926  6E30               	movwf	fillCircle@r+1,c
  2878  00F928  0E07               	movlw	7
  2879  00F92A  6E2F               	movwf	fillCircle@r,c
  2880  00F92C  0EF8               	movlw	248
  2881  00F92E  6E32               	movwf	fillCircle@color+1,c
  2882  00F930  0E00               	movlw	0
  2883  00F932  6E31               	movwf	fillCircle@color,c
  2884  00F934  EC04  F065         	call	_fillCircle	;wreg free
  2885                           
  2886                           ;Lab7.c: 526: drawCircle(60, 50 + 15, 7, 0xFFE0);
  2887  00F938  0E00               	movlw	0
  2888  00F93A  6E0D               	movwf	drawCircle@x0+1,c
  2889  00F93C  0E3C               	movlw	60
  2890  00F93E  6E0C               	movwf	drawCircle@x0,c
  2891  00F940  0E00               	movlw	0
  2892  00F942  6E0F               	movwf	drawCircle@y0+1,c
  2893  00F944  0E41               	movlw	65
  2894  00F946  6E0E               	movwf	drawCircle@y0,c
  2895  00F948  0E00               	movlw	0
  2896  00F94A  6E11               	movwf	drawCircle@r+1,c
  2897  00F94C  0E07               	movlw	7
  2898  00F94E  6E10               	movwf	drawCircle@r,c
  2899  00F950  0EFF               	movlw	255
  2900  00F952  6E13               	movwf	drawCircle@color+1,c
  2901  00F954  0EE0               	movlw	224
  2902  00F956  6E12               	movwf	drawCircle@color,c
  2903  00F958  EC8C  F070         	call	_drawCircle	;wreg free
  2904                           
  2905                           ;Lab7.c: 527: drawCircle(80, 50 + 15, 7, 0x07E0);
  2906  00F95C  0E00               	movlw	0
  2907  00F95E  6E0D               	movwf	drawCircle@x0+1,c
  2908  00F960  0E50               	movlw	80
  2909  00F962  6E0C               	movwf	drawCircle@x0,c
  2910  00F964  0E00               	movlw	0
  2911  00F966  6E0F               	movwf	drawCircle@y0+1,c
  2912  00F968  0E41               	movlw	65
  2913  00F96A  6E0E               	movwf	drawCircle@y0,c
  2914  00F96C  0E00               	movlw	0
  2915  00F96E  6E11               	movwf	drawCircle@r+1,c
  2916  00F970  0E07               	movlw	7
  2917  00F972  6E10               	movwf	drawCircle@r,c
  2918  00F974  0E07               	movlw	7
  2919  00F976  6E13               	movwf	drawCircle@color+1,c
  2920  00F978  0EE0               	movlw	224
  2921  00F97A  6E12               	movwf	drawCircle@color,c
  2922  00F97C  EC8C  F070         	call	_drawCircle	;wreg free
  2923                           
  2924                           ;Lab7.c: 528: drawtext (100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2925  00F980  0E3C               	movlw	60
  2926  00F982  6E29               	movwf	drawtext@y,c
  2927  00F984  0E93               	movlw	low _NSLT_Count
  2928  00F986  6E2A               	movwf	drawtext@_text,c
  2929  00F988  0E00               	movlw	high _NSLT_Count
  2930  00F98A  6E2B               	movwf	drawtext@_text+1,c
  2931  00F98C  0EF8               	movlw	248
  2932  00F98E  6E2D               	movwf	drawtext@color+1,c
  2933  00F990  0E1F               	movlw	31
  2934  00F992  6E2C               	movwf	drawtext@color,c
  2935  00F994  0E00               	movlw	0
  2936  00F996  6E2F               	movwf	drawtext@bg+1,c
  2937  00F998  0E00               	movlw	0
  2938  00F99A  6E2E               	movwf	drawtext@bg,c
  2939  00F99C  0E02               	movlw	2
  2940  00F99E  6E30               	movwf	drawtext@size,c
  2941  00F9A0  0E64               	movlw	100
  2942  00F9A2  EC10  F06B         	call	_drawtext
  2943                           
  2944                           ;Lab7.c: 531: strcpy(txt, "EAST/WEST");
  2945  00F9A6  C075  F001         	movff	_txt,strcpy@to
  2946  00F9AA  C076  F002         	movff	_txt+1,strcpy@to+1
  2947  00F9AE  0ECD               	movlw	low STR_12
  2948  00F9B0  6E03               	movwf	strcpy@from,c
  2949  00F9B2  0EFF               	movlw	high STR_12
  2950  00F9B4  6E04               	movwf	strcpy@from+1,c
  2951  00F9B6  EC5A  F063         	call	_strcpy	;wreg free
  2952                           
  2953                           ;Lab7.c: 532: drawtext (30, 80, txt, 0x07FF, 0x0000, 1);
  2954  00F9BA  0E50               	movlw	80
  2955  00F9BC  6E29               	movwf	drawtext@y,c
  2956  00F9BE  C075  F02A         	movff	_txt,drawtext@_text
  2957  00F9C2  C076  F02B         	movff	_txt+1,drawtext@_text+1
  2958  00F9C6  0E07               	movlw	7
  2959  00F9C8  6E2D               	movwf	drawtext@color+1,c
  2960  00F9CA  682C               	setf	drawtext@color,c
  2961  00F9CC  0E00               	movlw	0
  2962  00F9CE  6E2F               	movwf	drawtext@bg+1,c
  2963  00F9D0  0E00               	movlw	0
  2964  00F9D2  6E2E               	movwf	drawtext@bg,c
  2965  00F9D4  0E01               	movlw	1
  2966  00F9D6  6E30               	movwf	drawtext@size,c
  2967  00F9D8  0E1E               	movlw	30
  2968  00F9DA  EC10  F06B         	call	_drawtext
  2969                           
  2970                           ;Lab7.c: 533: drawRect (30, 80 + 15-8, 60, 18, 0x07FF);
  2971  00F9DE  0E00               	movlw	0
  2972  00F9E0  6E14               	movwf	drawRect@x+1,c
  2973  00F9E2  0E1E               	movlw	30
  2974  00F9E4  6E13               	movwf	drawRect@x,c
  2975  00F9E6  0E00               	movlw	0
  2976  00F9E8  6E16               	movwf	drawRect@y+1,c
  2977  00F9EA  0E57               	movlw	87
  2978  00F9EC  6E15               	movwf	drawRect@y,c
  2979  00F9EE  0E00               	movlw	0
  2980  00F9F0  6E18               	movwf	drawRect@w+1,c
  2981  00F9F2  0E3C               	movlw	60
  2982  00F9F4  6E17               	movwf	drawRect@w,c
  2983  00F9F6  0E00               	movlw	0
  2984  00F9F8  6E1A               	movwf	drawRect@h+1,c
  2985  00F9FA  0E12               	movlw	18
  2986  00F9FC  6E19               	movwf	drawRect@h,c
  2987  00F9FE  0E07               	movlw	7
  2988  00FA00  6E1C               	movwf	drawRect@color+1,c
  2989  00FA02  681B               	setf	drawRect@color,c
  2990  00FA04  EC86  F065         	call	_drawRect	;wreg free
  2991                           
  2992                           ;Lab7.c: 534: fillCircle(40, 80 + 15, 7, 0xF800);
  2993  00FA08  0E00               	movlw	0
  2994  00FA0A  6E2C               	movwf	fillCircle@x0+1,c
  2995  00FA0C  0E28               	movlw	40
  2996  00FA0E  6E2B               	movwf	fillCircle@x0,c
  2997  00FA10  0E00               	movlw	0
  2998  00FA12  6E2E               	movwf	fillCircle@y0+1,c
  2999  00FA14  0E5F               	movlw	95
  3000  00FA16  6E2D               	movwf	fillCircle@y0,c
  3001  00FA18  0E00               	movlw	0
  3002  00FA1A  6E30               	movwf	fillCircle@r+1,c
  3003  00FA1C  0E07               	movlw	7
  3004  00FA1E  6E2F               	movwf	fillCircle@r,c
  3005  00FA20  0EF8               	movlw	248
  3006  00FA22  6E32               	movwf	fillCircle@color+1,c
  3007  00FA24  0E00               	movlw	0
  3008  00FA26  6E31               	movwf	fillCircle@color,c
  3009  00FA28  EC04  F065         	call	_fillCircle	;wreg free
  3010                           
  3011                           ;Lab7.c: 535: drawCircle(60, 80 + 15, 7, 0xFFE0);
  3012  00FA2C  0E00               	movlw	0
  3013  00FA2E  6E0D               	movwf	drawCircle@x0+1,c
  3014  00FA30  0E3C               	movlw	60
  3015  00FA32  6E0C               	movwf	drawCircle@x0,c
  3016  00FA34  0E00               	movlw	0
  3017  00FA36  6E0F               	movwf	drawCircle@y0+1,c
  3018  00FA38  0E5F               	movlw	95
  3019  00FA3A  6E0E               	movwf	drawCircle@y0,c
  3020  00FA3C  0E00               	movlw	0
  3021  00FA3E  6E11               	movwf	drawCircle@r+1,c
  3022  00FA40  0E07               	movlw	7
  3023  00FA42  6E10               	movwf	drawCircle@r,c
  3024  00FA44  0EFF               	movlw	255
  3025  00FA46  6E13               	movwf	drawCircle@color+1,c
  3026  00FA48  0EE0               	movlw	224
  3027  00FA4A  6E12               	movwf	drawCircle@color,c
  3028  00FA4C  EC8C  F070         	call	_drawCircle	;wreg free
  3029                           
  3030                           ;Lab7.c: 536: drawCircle(80, 80 + 15, 7, 0x07E0);
  3031  00FA50  0E00               	movlw	0
  3032  00FA52  6E0D               	movwf	drawCircle@x0+1,c
  3033  00FA54  0E50               	movlw	80
  3034  00FA56  6E0C               	movwf	drawCircle@x0,c
  3035  00FA58  0E00               	movlw	0
  3036  00FA5A  6E0F               	movwf	drawCircle@y0+1,c
  3037  00FA5C  0E5F               	movlw	95
  3038  00FA5E  6E0E               	movwf	drawCircle@y0,c
  3039  00FA60  0E00               	movlw	0
  3040  00FA62  6E11               	movwf	drawCircle@r+1,c
  3041  00FA64  0E07               	movlw	7
  3042  00FA66  6E10               	movwf	drawCircle@r,c
  3043  00FA68  0E07               	movlw	7
  3044  00FA6A  6E13               	movwf	drawCircle@color+1,c
  3045  00FA6C  0EE0               	movlw	224
  3046  00FA6E  6E12               	movwf	drawCircle@color,c
  3047  00FA70  EC8C  F070         	call	_drawCircle	;wreg free
  3048                           
  3049                           ;Lab7.c: 537: drawtext (100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  3050  00FA74  0E5A               	movlw	90
  3051  00FA76  6E29               	movwf	drawtext@y,c
  3052  00FA78  0E90               	movlw	low _EW_Count
  3053  00FA7A  6E2A               	movwf	drawtext@_text,c
  3054  00FA7C  0E00               	movlw	high _EW_Count
  3055  00FA7E  6E2B               	movwf	drawtext@_text+1,c
  3056  00FA80  0E07               	movlw	7
  3057  00FA82  6E2D               	movwf	drawtext@color+1,c
  3058  00FA84  682C               	setf	drawtext@color,c
  3059  00FA86  0E00               	movlw	0
  3060  00FA88  6E2F               	movwf	drawtext@bg+1,c
  3061  00FA8A  0E00               	movlw	0
  3062  00FA8C  6E2E               	movwf	drawtext@bg,c
  3063  00FA8E  0E02               	movlw	2
  3064  00FA90  6E30               	movwf	drawtext@size,c
  3065  00FA92  0E64               	movlw	100
  3066  00FA94  EC10  F06B         	call	_drawtext
  3067                           
  3068                           ;Lab7.c: 540: strcpy(txt, "E/W LT");
  3069  00FA98  C075  F001         	movff	_txt,strcpy@to
  3070  00FA9C  C076  F002         	movff	_txt+1,strcpy@to+1
  3071  00FAA0  0EDE               	movlw	low STR_13
  3072  00FAA2  6E03               	movwf	strcpy@from,c
  3073  00FAA4  0EFF               	movlw	high STR_13
  3074  00FAA6  6E04               	movwf	strcpy@from+1,c
  3075  00FAA8  EC5A  F063         	call	_strcpy	;wreg free
  3076                           
  3077                           ;Lab7.c: 541: drawtext (30, 110, txt, 0xFFFF, 0x0000, 1);
  3078  00FAAC  0E6E               	movlw	110
  3079  00FAAE  6E29               	movwf	drawtext@y,c
  3080  00FAB0  C075  F02A         	movff	_txt,drawtext@_text
  3081  00FAB4  C076  F02B         	movff	_txt+1,drawtext@_text+1
  3082  00FAB8  0EFF               	movlw	255
  3083  00FABA  6E2D               	movwf	drawtext@color+1,c
  3084  00FABC  682C               	setf	drawtext@color,c
  3085  00FABE  0E00               	movlw	0
  3086  00FAC0  6E2F               	movwf	drawtext@bg+1,c
  3087  00FAC2  0E00               	movlw	0
  3088  00FAC4  6E2E               	movwf	drawtext@bg,c
  3089  00FAC6  0E01               	movlw	1
  3090  00FAC8  6E30               	movwf	drawtext@size,c
  3091  00FACA  0E1E               	movlw	30
  3092  00FACC  EC10  F06B         	call	_drawtext
  3093                           
  3094                           ;Lab7.c: 542: drawRect (30, 110 + 15-8, 60, 18, 0xFFFF);
  3095  00FAD0  0E00               	movlw	0
  3096  00FAD2  6E14               	movwf	drawRect@x+1,c
  3097  00FAD4  0E1E               	movlw	30
  3098  00FAD6  6E13               	movwf	drawRect@x,c
  3099  00FAD8  0E00               	movlw	0
  3100  00FADA  6E16               	movwf	drawRect@y+1,c
  3101  00FADC  0E75               	movlw	117
  3102  00FADE  6E15               	movwf	drawRect@y,c
  3103  00FAE0  0E00               	movlw	0
  3104  00FAE2  6E18               	movwf	drawRect@w+1,c
  3105  00FAE4  0E3C               	movlw	60
  3106  00FAE6  6E17               	movwf	drawRect@w,c
  3107  00FAE8  0E00               	movlw	0
  3108  00FAEA  6E1A               	movwf	drawRect@h+1,c
  3109  00FAEC  0E12               	movlw	18
  3110  00FAEE  6E19               	movwf	drawRect@h,c
  3111  00FAF0  0EFF               	movlw	255
  3112  00FAF2  6E1C               	movwf	drawRect@color+1,c
  3113  00FAF4  681B               	setf	drawRect@color,c
  3114  00FAF6  EC86  F065         	call	_drawRect	;wreg free
  3115                           
  3116                           ;Lab7.c: 543: fillCircle(40, 110 + 15, 7, 0xF800);
  3117  00FAFA  0E00               	movlw	0
  3118  00FAFC  6E2C               	movwf	fillCircle@x0+1,c
  3119  00FAFE  0E28               	movlw	40
  3120  00FB00  6E2B               	movwf	fillCircle@x0,c
  3121  00FB02  0E00               	movlw	0
  3122  00FB04  6E2E               	movwf	fillCircle@y0+1,c
  3123  00FB06  0E7D               	movlw	125
  3124  00FB08  6E2D               	movwf	fillCircle@y0,c
  3125  00FB0A  0E00               	movlw	0
  3126  00FB0C  6E30               	movwf	fillCircle@r+1,c
  3127  00FB0E  0E07               	movlw	7
  3128  00FB10  6E2F               	movwf	fillCircle@r,c
  3129  00FB12  0EF8               	movlw	248
  3130  00FB14  6E32               	movwf	fillCircle@color+1,c
  3131  00FB16  0E00               	movlw	0
  3132  00FB18  6E31               	movwf	fillCircle@color,c
  3133  00FB1A  EC04  F065         	call	_fillCircle	;wreg free
  3134                           
  3135                           ;Lab7.c: 544: drawCircle(60, 110 + 15, 7, 0xFFE0);
  3136  00FB1E  0E00               	movlw	0
  3137  00FB20  6E0D               	movwf	drawCircle@x0+1,c
  3138  00FB22  0E3C               	movlw	60
  3139  00FB24  6E0C               	movwf	drawCircle@x0,c
  3140  00FB26  0E00               	movlw	0
  3141  00FB28  6E0F               	movwf	drawCircle@y0+1,c
  3142  00FB2A  0E7D               	movlw	125
  3143  00FB2C  6E0E               	movwf	drawCircle@y0,c
  3144  00FB2E  0E00               	movlw	0
  3145  00FB30  6E11               	movwf	drawCircle@r+1,c
  3146  00FB32  0E07               	movlw	7
  3147  00FB34  6E10               	movwf	drawCircle@r,c
  3148  00FB36  0EFF               	movlw	255
  3149  00FB38  6E13               	movwf	drawCircle@color+1,c
  3150  00FB3A  0EE0               	movlw	224
  3151  00FB3C  6E12               	movwf	drawCircle@color,c
  3152  00FB3E  EC8C  F070         	call	_drawCircle	;wreg free
  3153                           
  3154                           ;Lab7.c: 545: drawCircle(80, 110 + 15, 7, 0x07E0);
  3155  00FB42  0E00               	movlw	0
  3156  00FB44  6E0D               	movwf	drawCircle@x0+1,c
  3157  00FB46  0E50               	movlw	80
  3158  00FB48  6E0C               	movwf	drawCircle@x0,c
  3159  00FB4A  0E00               	movlw	0
  3160  00FB4C  6E0F               	movwf	drawCircle@y0+1,c
  3161  00FB4E  0E7D               	movlw	125
  3162  00FB50  6E0E               	movwf	drawCircle@y0,c
  3163  00FB52  0E00               	movlw	0
  3164  00FB54  6E11               	movwf	drawCircle@r+1,c
  3165  00FB56  0E07               	movlw	7
  3166  00FB58  6E10               	movwf	drawCircle@r,c
  3167  00FB5A  0E07               	movlw	7
  3168  00FB5C  6E13               	movwf	drawCircle@color+1,c
  3169  00FB5E  0EE0               	movlw	224
  3170  00FB60  6E12               	movwf	drawCircle@color,c
  3171  00FB62  EC8C  F070         	call	_drawCircle	;wreg free
  3172                           
  3173                           ;Lab7.c: 546: drawtext (100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  3174  00FB66  0E78               	movlw	120
  3175  00FB68  6E29               	movwf	drawtext@y,c
  3176  00FB6A  0E8D               	movlw	low _EWLT_Count
  3177  00FB6C  6E2A               	movwf	drawtext@_text,c
  3178  00FB6E  0E00               	movlw	high _EWLT_Count
  3179  00FB70  6E2B               	movwf	drawtext@_text+1,c
  3180  00FB72  0EFF               	movlw	255
  3181  00FB74  6E2D               	movwf	drawtext@color+1,c
  3182  00FB76  682C               	setf	drawtext@color,c
  3183  00FB78  0E00               	movlw	0
  3184  00FB7A  6E2F               	movwf	drawtext@bg+1,c
  3185  00FB7C  0E00               	movlw	0
  3186  00FB7E  6E2E               	movwf	drawtext@bg,c
  3187  00FB80  0E02               	movlw	2
  3188  00FB82  6E30               	movwf	drawtext@size,c
  3189  00FB84  0E64               	movlw	100
  3190  00FB86  EC10  F06B         	call	_drawtext
  3191                           
  3192                           ;Lab7.c: 549: strcpy(txt, "PNS");
  3193  00FB8A  C075  F001         	movff	_txt,strcpy@to
  3194  00FB8E  C076  F002         	movff	_txt+1,strcpy@to+1
  3195  00FB92  0EF3               	movlw	low STR_14
  3196  00FB94  6E03               	movwf	strcpy@from,c
  3197  00FB96  0EFF               	movlw	high STR_14
  3198  00FB98  6E04               	movwf	strcpy@from+1,c
  3199  00FB9A  EC5A  F063         	call	_strcpy	;wreg free
  3200                           
  3201                           ;Lab7.c: 550: drawtext(3, 20, txt, 0x001F, 0x0000, 1);
  3202  00FB9E  0E14               	movlw	20
  3203  00FBA0  6E29               	movwf	drawtext@y,c
  3204  00FBA2  C075  F02A         	movff	_txt,drawtext@_text
  3205  00FBA6  C076  F02B         	movff	_txt+1,drawtext@_text+1
  3206  00FBAA  0E00               	movlw	0
  3207  00FBAC  6E2D               	movwf	drawtext@color+1,c
  3208  00FBAE  0E1F               	movlw	31
  3209  00FBB0  6E2C               	movwf	drawtext@color,c
  3210  00FBB2  0E00               	movlw	0
  3211  00FBB4  6E2F               	movwf	drawtext@bg+1,c
  3212  00FBB6  0E00               	movlw	0
  3213  00FBB8  6E2E               	movwf	drawtext@bg,c
  3214  00FBBA  0E01               	movlw	1
  3215  00FBBC  6E30               	movwf	drawtext@size,c
  3216  00FBBE  0E03               	movlw	3
  3217  00FBC0  EC10  F06B         	call	_drawtext
  3218                           
  3219                           ;Lab7.c: 551: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  3220  00FBC4  0E1E               	movlw	30
  3221  00FBC6  6E29               	movwf	drawtext@y,c
  3222  00FBC8  0E9C               	movlw	low _PED_NS_Count
  3223  00FBCA  6E2A               	movwf	drawtext@_text,c
  3224  00FBCC  0E00               	movlw	high _PED_NS_Count
  3225  00FBCE  6E2B               	movwf	drawtext@_text+1,c
  3226  00FBD0  0E00               	movlw	0
  3227  00FBD2  6E2D               	movwf	drawtext@color+1,c
  3228  00FBD4  0E1F               	movlw	31
  3229  00FBD6  6E2C               	movwf	drawtext@color,c
  3230  00FBD8  0E00               	movlw	0
  3231  00FBDA  6E2F               	movwf	drawtext@bg+1,c
  3232  00FBDC  0E00               	movlw	0
  3233  00FBDE  6E2E               	movwf	drawtext@bg,c
  3234  00FBE0  0E02               	movlw	2
  3235  00FBE2  6E30               	movwf	drawtext@size,c
  3236  00FBE4  0E02               	movlw	2
  3237  00FBE6  EC10  F06B         	call	_drawtext
  3238                           
  3239                           ;Lab7.c: 554: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  3240  00FBEA  0E5A               	movlw	90
  3241  00FBEC  6E29               	movwf	drawtext@y,c
  3242  00FBEE  0E99               	movlw	low _PED_EW_Count
  3243  00FBF0  6E2A               	movwf	drawtext@_text,c
  3244  00FBF2  0E00               	movlw	high _PED_EW_Count
  3245  00FBF4  6E2B               	movwf	drawtext@_text+1,c
  3246  00FBF6  0E07               	movlw	7
  3247  00FBF8  6E2D               	movwf	drawtext@color+1,c
  3248  00FBFA  682C               	setf	drawtext@color,c
  3249  00FBFC  0E00               	movlw	0
  3250  00FBFE  6E2F               	movwf	drawtext@bg+1,c
  3251  00FC00  0E00               	movlw	0
  3252  00FC02  6E2E               	movwf	drawtext@bg,c
  3253  00FC04  0E02               	movlw	2
  3254  00FC06  6E30               	movwf	drawtext@size,c
  3255  00FC08  0E02               	movlw	2
  3256  00FC0A  EC10  F06B         	call	_drawtext
  3257                           
  3258                           ;Lab7.c: 555: strcpy(txt, "PEW");
  3259  00FC0E  C075  F001         	movff	_txt,strcpy@to
  3260  00FC12  C076  F002         	movff	_txt+1,strcpy@to+1
  3261  00FC16  0EF7               	movlw	low STR_15
  3262  00FC18  6E03               	movwf	strcpy@from,c
  3263  00FC1A  0EFF               	movlw	high STR_15
  3264  00FC1C  6E04               	movwf	strcpy@from+1,c
  3265  00FC1E  EC5A  F063         	call	_strcpy	;wreg free
  3266                           
  3267                           ;Lab7.c: 556: drawtext(3, 80, txt, 0x07FF, 0x0000, 1);
  3268  00FC22  0E50               	movlw	80
  3269  00FC24  6E29               	movwf	drawtext@y,c
  3270  00FC26  C075  F02A         	movff	_txt,drawtext@_text
  3271  00FC2A  C076  F02B         	movff	_txt+1,drawtext@_text+1
  3272  00FC2E  0E07               	movlw	7
  3273  00FC30  6E2D               	movwf	drawtext@color+1,c
  3274  00FC32  682C               	setf	drawtext@color,c
  3275  00FC34  0E00               	movlw	0
  3276  00FC36  6E2F               	movwf	drawtext@bg+1,c
  3277  00FC38  0E00               	movlw	0
  3278  00FC3A  6E2E               	movwf	drawtext@bg,c
  3279  00FC3C  0E01               	movlw	1
  3280  00FC3E  6E30               	movwf	drawtext@size,c
  3281  00FC40  0E03               	movlw	3
  3282  00FC42  EC10  F06B         	call	_drawtext
  3283                           
  3284                           ;Lab7.c: 559: strcpy(txt, "NSP NSLT EWP EWLT MR");
  3285  00FC46  C075  F001         	movff	_txt,strcpy@to
  3286  00FC4A  C076  F002         	movff	_txt+1,strcpy@to+1
  3287  00FC4E  0E9C               	movlw	low STR_16
  3288  00FC50  6E03               	movwf	strcpy@from,c
  3289  00FC52  0EFF               	movlw	high STR_16
  3290  00FC54  6E04               	movwf	strcpy@from+1,c
  3291  00FC56  EC5A  F063         	call	_strcpy	;wreg free
  3292                           
  3293                           ;Lab7.c: 560: drawtext(1, 140, txt, 0xFFFF, 0x0000, 1);
  3294  00FC5A  0E8C               	movlw	140
  3295  00FC5C  6E29               	movwf	drawtext@y,c
  3296  00FC5E  C075  F02A         	movff	_txt,drawtext@_text
  3297  00FC62  C076  F02B         	movff	_txt+1,drawtext@_text+1
  3298  00FC66  0EFF               	movlw	255
  3299  00FC68  6E2D               	movwf	drawtext@color+1,c
  3300  00FC6A  682C               	setf	drawtext@color,c
  3301  00FC6C  0E00               	movlw	0
  3302  00FC6E  6E2F               	movwf	drawtext@bg+1,c
  3303  00FC70  0E00               	movlw	0
  3304  00FC72  6E2E               	movwf	drawtext@bg,c
  3305  00FC74  0E01               	movlw	1
  3306  00FC76  6E30               	movwf	drawtext@size,c
  3307  00FC78  0E01               	movlw	1
  3308  00FC7A  EC10  F06B         	call	_drawtext
  3309                           
  3310                           ;Lab7.c: 561: drawtext(6, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  3311  00FC7E  0E95               	movlw	149
  3312  00FC80  6E29               	movwf	drawtext@y,c
  3313  00FC82  0EAB               	movlw	low _SW_NSPED_Txt
  3314  00FC84  6E2A               	movwf	drawtext@_text,c
  3315  00FC86  0E00               	movlw	high _SW_NSPED_Txt
  3316  00FC88  6E2B               	movwf	drawtext@_text+1,c
  3317  00FC8A  0EFF               	movlw	255
  3318  00FC8C  6E2D               	movwf	drawtext@color+1,c
  3319  00FC8E  682C               	setf	drawtext@color,c
  3320  00FC90  0E00               	movlw	0
  3321  00FC92  6E2F               	movwf	drawtext@bg+1,c
  3322  00FC94  0E00               	movlw	0
  3323  00FC96  6E2E               	movwf	drawtext@bg,c
  3324  00FC98  0E01               	movlw	1
  3325  00FC9A  6E30               	movwf	drawtext@size,c
  3326  00FC9C  0E06               	movlw	6
  3327  00FC9E  EC10  F06B         	call	_drawtext
  3328                           
  3329                           ;Lab7.c: 562: drawtext(32, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  3330  00FCA2  0E95               	movlw	149
  3331  00FCA4  6E29               	movwf	drawtext@y,c
  3332  00FCA6  0EA9               	movlw	low _SW_NSLT_Txt
  3333  00FCA8  6E2A               	movwf	drawtext@_text,c
  3334  00FCAA  0E00               	movlw	high _SW_NSLT_Txt
  3335  00FCAC  6E2B               	movwf	drawtext@_text+1,c
  3336  00FCAE  0EFF               	movlw	255
  3337  00FCB0  6E2D               	movwf	drawtext@color+1,c
  3338  00FCB2  682C               	setf	drawtext@color,c
  3339  00FCB4  0E00               	movlw	0
  3340  00FCB6  6E2F               	movwf	drawtext@bg+1,c
  3341  00FCB8  0E00               	movlw	0
  3342  00FCBA  6E2E               	movwf	drawtext@bg,c
  3343  00FCBC  0E01               	movlw	1
  3344  00FCBE  6E30               	movwf	drawtext@size,c
  3345  00FCC0  0E20               	movlw	32
  3346  00FCC2  EC10  F06B         	call	_drawtext
  3347                           
  3348                           ;Lab7.c: 563: drawtext(58, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  3349  00FCC6  0E95               	movlw	149
  3350  00FCC8  6E29               	movwf	drawtext@y,c
  3351  00FCCA  0EA5               	movlw	low _SW_EWPED_Txt
  3352  00FCCC  6E2A               	movwf	drawtext@_text,c
  3353  00FCCE  0E00               	movlw	high _SW_EWPED_Txt
  3354  00FCD0  6E2B               	movwf	drawtext@_text+1,c
  3355  00FCD2  0EFF               	movlw	255
  3356  00FCD4  6E2D               	movwf	drawtext@color+1,c
  3357  00FCD6  682C               	setf	drawtext@color,c
  3358  00FCD8  0E00               	movlw	0
  3359  00FCDA  6E2F               	movwf	drawtext@bg+1,c
  3360  00FCDC  0E00               	movlw	0
  3361  00FCDE  6E2E               	movwf	drawtext@bg,c
  3362  00FCE0  0E01               	movlw	1
  3363  00FCE2  6E30               	movwf	drawtext@size,c
  3364  00FCE4  0E3A               	movlw	58
  3365  00FCE6  EC10  F06B         	call	_drawtext
  3366                           
  3367                           ;Lab7.c: 564: drawtext(87, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  3368  00FCEA  0E95               	movlw	149
  3369  00FCEC  6E29               	movwf	drawtext@y,c
  3370  00FCEE  0EA3               	movlw	low _SW_EWLT_Txt
  3371  00FCF0  6E2A               	movwf	drawtext@_text,c
  3372  00FCF2  0E00               	movlw	high _SW_EWLT_Txt
  3373  00FCF4  6E2B               	movwf	drawtext@_text+1,c
  3374  00FCF6  0EFF               	movlw	255
  3375  00FCF8  6E2D               	movwf	drawtext@color+1,c
  3376  00FCFA  682C               	setf	drawtext@color,c
  3377  00FCFC  0E00               	movlw	0
  3378  00FCFE  6E2F               	movwf	drawtext@bg+1,c
  3379  00FD00  0E00               	movlw	0
  3380  00FD02  6E2E               	movwf	drawtext@bg,c
  3381  00FD04  0E01               	movlw	1
  3382  00FD06  6E30               	movwf	drawtext@size,c
  3383  00FD08  0E57               	movlw	87
  3384  00FD0A  EC10  F06B         	call	_drawtext
  3385                           
  3386                           ;Lab7.c: 565: drawtext(112,140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  3387  00FD0E  0E95               	movlw	149
  3388  00FD10  6E29               	movwf	drawtext@y,c
  3389  00FD12  0EA7               	movlw	low _SW_MODE_Txt
  3390  00FD14  6E2A               	movwf	drawtext@_text,c
  3391  00FD16  0E00               	movlw	high _SW_MODE_Txt
  3392  00FD18  6E2B               	movwf	drawtext@_text+1,c
  3393  00FD1A  0EFF               	movlw	255
  3394  00FD1C  6E2D               	movwf	drawtext@color+1,c
  3395  00FD1E  682C               	setf	drawtext@color,c
  3396  00FD20  0E00               	movlw	0
  3397  00FD22  6E2F               	movwf	drawtext@bg+1,c
  3398  00FD24  0E00               	movlw	0
  3399  00FD26  6E2E               	movwf	drawtext@bg,c
  3400  00FD28  0E01               	movlw	1
  3401  00FD2A  6E30               	movwf	drawtext@size,c
  3402  00FD2C  0E70               	movlw	112
  3403  00FD2E  EC10  F06B         	call	_drawtext
  3404  00FD32  0012               	return		;funcret
  3405  00FD34                     __end_of_Initialize_Screen:
  3406                           	opt stack 0
  3407                           tblptru	equ	0xFF8
  3408                           tblptrh	equ	0xFF7
  3409                           tblptrl	equ	0xFF6
  3410                           tablat	equ	0xFF5
  3411                           prodl	equ	0xFF3
  3412                           intcon2	equ	0xFF1
  3413                           postinc0	equ	0xFEE
  3414                           wreg	equ	0xFE8
  3415                           postdec1	equ	0xFE5
  3416                           fsr1l	equ	0xFE1
  3417                           status	equ	0xFD8
  3418                           
  3419 ;; *************** function _fillScreen *****************
  3420 ;; Defined at:
  3421 ;;		line 652 in file "ST7735_TFT.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  color           2   19[COMRAM] unsigned int 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;		None               void
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3435 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;Total ram usage:        2 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    4
  3442 ;; This function calls:
  3443 ;;		_fillRectangle
  3444 ;; This function is called by:
  3445 ;;		_Initialize_Screen
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           	psect	text6
  3450  00C570                     __ptext6:
  3451                           	opt stack 0
  3452  00C570                     _fillScreen:
  3453                           	opt stack 25
  3454                           
  3455                           ;ST7735_TFT.c: 654: fillRectangle(0, 0, 128, 160, color);
  3456                           
  3457                           ;incstack = 0
  3458  00C570  0E00               	movlw	0
  3459  00C572  6E08               	movwf	fillRectangle@y,c
  3460  00C574  0E80               	movlw	128
  3461  00C576  6E09               	movwf	fillRectangle@w,c
  3462  00C578  0EA0               	movlw	160
  3463  00C57A  6E0A               	movwf	fillRectangle@h,c
  3464  00C57C  C014  F00B         	movff	fillScreen@color,fillRectangle@color
  3465  00C580  C015  F00C         	movff	fillScreen@color+1,fillRectangle@color+1
  3466  00C584  0E00               	movlw	0
  3467  00C586  EC31  F06A         	call	_fillRectangle
  3468  00C58A  0012               	return		;funcret
  3469  00C58C                     __end_of_fillScreen:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodl	equ	0xFF3
  3476                           intcon2	equ	0xFF1
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           postdec1	equ	0xFE5
  3480                           fsr1l	equ	0xFE1
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _fillRectangle *****************
  3484 ;; Defined at:
  3485 ;;		line 536 in file "ST7735_TFT.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  x               1    wreg     unsigned char 
  3488 ;;  y               1    7[COMRAM] unsigned char 
  3489 ;;  w               1    8[COMRAM] unsigned char 
  3490 ;;  h               1    9[COMRAM] unsigned char 
  3491 ;;  color           2   10[COMRAM] unsigned int 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  x               1   18[COMRAM] unsigned char 
  3494 ;;  lo              1   17[COMRAM] unsigned char 
  3495 ;;  hi              1   16[COMRAM] unsigned char 
  3496 ;; Return value:  Size  Location     Type
  3497 ;;		None               void
  3498 ;; Registers used:
  3499 ;;		wreg, status,2, status,0, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3505 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;Total ram usage:       12 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    3
  3512 ;; This function calls:
  3513 ;;		_setAddrWindow
  3514 ;;		_spiwrite
  3515 ;; This function is called by:
  3516 ;;		_fillScreen
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text7
  3521  00D462                     __ptext7:
  3522                           	opt stack 0
  3523  00D462                     _fillRectangle:
  3524                           	opt stack 25
  3525                           
  3526                           ;incstack = 0
  3527                           ;fillRectangle@x stored from wreg
  3528  00D462  6E13               	movwf	fillRectangle@x,c
  3529                           
  3530                           ;ST7735_TFT.c: 538: unsigned char hi, lo;
  3531                           ;ST7735_TFT.c: 539: if((x >= 128) || (y >= 160))
  3532  00D464  0E80               	movlw	128
  3533  00D466  6013               	cpfslt	fillRectangle@x,c
  3534  00D468  D069               	goto	l298
  3535  00D46A  0E9F               	movlw	159
  3536  00D46C  6408               	cpfsgt	fillRectangle@y,c
  3537  00D46E  D001               	goto	l4452
  3538                           
  3539                           ;ST7735_TFT.c: 540: return;
  3540  00D470  D065               	goto	l298
  3541  00D472                     l4452:
  3542                           
  3543                           ;ST7735_TFT.c: 541: if((x + w - 1) >= 128)
  3544  00D472  0EFF               	movlw	255
  3545  00D474  6E0D               	movwf	??_fillRectangle& (0+255),c
  3546  00D476  0EFF               	movlw	255
  3547  00D478  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3548  00D47A  5009               	movf	fillRectangle@w,w,c
  3549  00D47C  C013  F00F         	movff	fillRectangle@x,??_fillRectangle+2
  3550  00D480  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3551  00D482  260F               	addwf	??_fillRectangle+2,f,c
  3552  00D484  0E00               	movlw	0
  3553  00D486  2210               	addwfc	??_fillRectangle+3,f,c
  3554  00D488  500D               	movf	??_fillRectangle,w,c
  3555  00D48A  260F               	addwf	??_fillRectangle+2,f,c
  3556  00D48C  500E               	movf	??_fillRectangle+1,w,c
  3557  00D48E  2210               	addwfc	??_fillRectangle+3,f,c
  3558  00D490  BE10               	btfsc	??_fillRectangle+3,7,c
  3559  00D492  D00A               	goto	l299
  3560  00D494  5010               	movf	??_fillRectangle+3,w,c
  3561  00D496  E104               	bnz	u3920
  3562  00D498  0E80               	movlw	128
  3563  00D49A  5C0F               	subwf	??_fillRectangle+2,w,c
  3564  00D49C  A0D8               	btfss	status,0,c
  3565  00D49E  D004               	goto	l299
  3566  00D4A0                     u3920:
  3567                           
  3568                           ;ST7735_TFT.c: 542: w = 128 - x;
  3569  00D4A0  5013               	movf	fillRectangle@x,w,c
  3570  00D4A2  0800               	sublw	0
  3571  00D4A4  0F80               	addlw	128
  3572  00D4A6  6E09               	movwf	fillRectangle@w,c
  3573  00D4A8                     l299:
  3574                           
  3575                           ;ST7735_TFT.c: 543: if((y + h - 1) >= 160)
  3576  00D4A8  0EFF               	movlw	255
  3577  00D4AA  6E0D               	movwf	??_fillRectangle& (0+255),c
  3578  00D4AC  0EFF               	movlw	255
  3579  00D4AE  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3580  00D4B0  500A               	movf	fillRectangle@h,w,c
  3581  00D4B2  C008  F00F         	movff	fillRectangle@y,??_fillRectangle+2
  3582  00D4B6  6A10               	clrf	(??_fillRectangle+3)& (0+255),c
  3583  00D4B8  260F               	addwf	??_fillRectangle+2,f,c
  3584  00D4BA  0E00               	movlw	0
  3585  00D4BC  2210               	addwfc	??_fillRectangle+3,f,c
  3586  00D4BE  500D               	movf	??_fillRectangle,w,c
  3587  00D4C0  260F               	addwf	??_fillRectangle+2,f,c
  3588  00D4C2  500E               	movf	??_fillRectangle+1,w,c
  3589  00D4C4  2210               	addwfc	??_fillRectangle+3,f,c
  3590  00D4C6  BE10               	btfsc	??_fillRectangle+3,7,c
  3591  00D4C8  D00B               	goto	l4458
  3592  00D4CA  5010               	movf	??_fillRectangle+3,w,c
  3593  00D4CC  E104               	bnz	u3930
  3594  00D4CE  0EA0               	movlw	160
  3595  00D4D0  5C0F               	subwf	??_fillRectangle+2,w,c
  3596  00D4D2  A0D8               	btfss	status,0,c
  3597  00D4D4  D005               	goto	l4458
  3598  00D4D6                     u3930:
  3599                           
  3600                           ;ST7735_TFT.c: 544: h = 160 - y;
  3601  00D4D6  5008               	movf	fillRectangle@y,w,c
  3602  00D4D8  0800               	sublw	0
  3603  00D4DA  0FA0               	addlw	160
  3604  00D4DC  6E0A               	movwf	fillRectangle@h,c
  3605  00D4DE  D000               	goto	l4458
  3606  00D4E0                     l4458:
  3607                           
  3608                           ;ST7735_TFT.c: 545: setAddrWindow(x, y, x+w-1, y+h-1);
  3609  00D4E0  C008  F004         	movff	fillRectangle@y,setAddrWindow@y0
  3610  00D4E4  5013               	movf	fillRectangle@x,w,c
  3611  00D4E6  2409               	addwf	fillRectangle@w,w,c
  3612  00D4E8  6E0D               	movwf	??_fillRectangle& (0+255),c
  3613  00D4EA  040D               	decf	??_fillRectangle,w,c
  3614  00D4EC  6E05               	movwf	setAddrWindow@x1,c
  3615  00D4EE  5008               	movf	fillRectangle@y,w,c
  3616  00D4F0  240A               	addwf	fillRectangle@h,w,c
  3617  00D4F2  6E0E               	movwf	(??_fillRectangle+1)& (0+255),c
  3618  00D4F4  040E               	decf	??_fillRectangle+1,w,c
  3619  00D4F6  6E06               	movwf	setAddrWindow@y1,c
  3620  00D4F8  5013               	movf	fillRectangle@x,w,c
  3621  00D4FA  ECDD  F064         	call	_setAddrWindow
  3622                           
  3623                           ;ST7735_TFT.c: 546: hi = color >> 8; lo = color;
  3624  00D4FE  500C               	movf	fillRectangle@color+1,w,c
  3625  00D500  6E11               	movwf	fillRectangle@hi,c
  3626  00D502  C00B  F012         	movff	fillRectangle@color,fillRectangle@lo
  3627                           
  3628                           ;ST7735_TFT.c: 547: PORTCbits.RC0 = 1;
  3629  00D506  8082               	bsf	3970,0,c	;volatile
  3630                           
  3631                           ;ST7735_TFT.c: 548: PORTCbits.RC2 = 0;
  3632  00D508  9482               	bcf	3970,2,c	;volatile
  3633                           
  3634                           ;ST7735_TFT.c: 550: for(y=h; y>0; y--) {
  3635  00D50A  C00A  F008         	movff	fillRectangle@h,fillRectangle@y
  3636  00D50E                     l4470:
  3637  00D50E  5008               	movf	fillRectangle@y,w,c
  3638  00D510  B4D8               	btfsc	status,2,c
  3639  00D512  D013               	goto	l302
  3640  00D514  D001               	goto	l301
  3641  00D516  D011               	goto	l302
  3642  00D518                     l301:
  3643                           
  3644                           ;ST7735_TFT.c: 551: for(x = w; x > 0; x--) {
  3645  00D518  C009  F013         	movff	fillRectangle@w,fillRectangle@x
  3646  00D51C                     l4474:
  3647  00D51C  5013               	movf	fillRectangle@x,w,c
  3648  00D51E  B4D8               	btfsc	status,2,c
  3649  00D520  D00A               	goto	l4484
  3650  00D522  D001               	goto	l4478
  3651  00D524  D008               	goto	l4484
  3652  00D526                     l4478:
  3653                           
  3654                           ;ST7735_TFT.c: 552: spiwrite(hi);
  3655  00D526  5011               	movf	fillRectangle@hi,w,c
  3656  00D528  EC8C  F062         	call	_spiwrite
  3657                           
  3658                           ;ST7735_TFT.c: 553: spiwrite(lo);
  3659  00D52C  5012               	movf	fillRectangle@lo,w,c
  3660  00D52E  EC8C  F062         	call	_spiwrite
  3661  00D532  0613               	decf	fillRectangle@x,f,c
  3662  00D534  D7F3               	goto	l4474
  3663  00D536                     l4484:
  3664  00D536  0608               	decf	fillRectangle@y,f,c
  3665  00D538  D7EA               	goto	l4470
  3666  00D53A                     l302:
  3667                           
  3668                           ;ST7735_TFT.c: 554: }
  3669                           ;ST7735_TFT.c: 555: }
  3670                           ;ST7735_TFT.c: 556: PORTCbits.RC2 = 1;
  3671  00D53A  8482               	bsf	3970,2,c	;volatile
  3672  00D53C                     l298:
  3673  00D53C  0012               	return		;funcret
  3674  00D53E                     __end_of_fillRectangle:
  3675                           	opt stack 0
  3676                           tblptru	equ	0xFF8
  3677                           tblptrh	equ	0xFF7
  3678                           tblptrl	equ	0xFF6
  3679                           tablat	equ	0xFF5
  3680                           prodl	equ	0xFF3
  3681                           intcon2	equ	0xFF1
  3682                           postinc0	equ	0xFEE
  3683                           wreg	equ	0xFE8
  3684                           postdec1	equ	0xFE5
  3685                           fsr1l	equ	0xFE1
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _drawRect *****************
  3689 ;; Defined at:
  3690 ;;		line 718 in file "ST7735_TFT.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  x               2   18[COMRAM] unsigned int 
  3693 ;;  y               2   20[COMRAM] unsigned int 
  3694 ;;  w               2   22[COMRAM] unsigned int 
  3695 ;;  h               2   24[COMRAM] unsigned int 
  3696 ;;  color           2   26[COMRAM] unsigned int 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;		None               void
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3708 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;Total ram usage:       11 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    4
  3715 ;; This function calls:
  3716 ;;		_drawFastHLine
  3717 ;;		_drawFastVLine
  3718 ;; This function is called by:
  3719 ;;		_Initialize_Screen
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text8
  3724  00CB0C                     __ptext8:
  3725                           	opt stack 0
  3726  00CB0C                     _drawRect:
  3727                           	opt stack 25
  3728                           
  3729                           ;ST7735_TFT.c: 720: drawFastHLine(x, y, w, color);
  3730                           
  3731                           ;incstack = 0
  3732  00CB0C  C015  F008         	movff	drawRect@y,drawFastHLine@y
  3733  00CB10  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3734  00CB14  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3735  00CB18  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3736  00CB1C  5013               	movf	drawRect@x,w,c
  3737  00CB1E  ECEF  F066         	call	_drawFastHLine
  3738                           
  3739                           ;ST7735_TFT.c: 721: drawFastHLine(x, y + h - 1, w, color);
  3740  00CB22  5015               	movf	drawRect@y,w,c
  3741  00CB24  2419               	addwf	drawRect@h,w,c
  3742  00CB26  6E1D               	movwf	??_drawRect& (0+255),c
  3743  00CB28  041D               	decf	??_drawRect,w,c
  3744  00CB2A  6E08               	movwf	drawFastHLine@y,c
  3745  00CB2C  C017  F009         	movff	drawRect@w,drawFastHLine@w
  3746  00CB30  C01B  F00A         	movff	drawRect@color,drawFastHLine@color
  3747  00CB34  C01C  F00B         	movff	drawRect@color+1,drawFastHLine@color+1
  3748  00CB38  5013               	movf	drawRect@x,w,c
  3749  00CB3A  ECEF  F066         	call	_drawFastHLine
  3750                           
  3751                           ;ST7735_TFT.c: 722: drawFastVLine(x, y, h, color);
  3752  00CB3E  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3753  00CB42  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3754  00CB46  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3755  00CB4A  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3756  00CB4E  5013               	movf	drawRect@x,w,c
  3757  00CB50  ECAB  F066         	call	_drawFastVLine
  3758                           
  3759                           ;ST7735_TFT.c: 723: drawFastVLine(x + w - 1, y, h, color);
  3760  00CB54  C015  F008         	movff	drawRect@y,drawFastVLine@y
  3761  00CB58  C019  F009         	movff	drawRect@h,drawFastVLine@h
  3762  00CB5C  C01B  F00A         	movff	drawRect@color,drawFastVLine@color
  3763  00CB60  C01C  F00B         	movff	drawRect@color+1,drawFastVLine@color+1
  3764  00CB64  5013               	movf	drawRect@x,w,c
  3765  00CB66  2417               	addwf	drawRect@w,w,c
  3766  00CB68  6E1D               	movwf	??_drawRect& (0+255),c
  3767  00CB6A  041D               	decf	??_drawRect,w,c
  3768  00CB6C  ECAB  F066         	call	_drawFastVLine
  3769  00CB70  0012               	return		;funcret
  3770  00CB72                     __end_of_drawRect:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodl	equ	0xFF3
  3777                           intcon2	equ	0xFF1
  3778                           postinc0	equ	0xFEE
  3779                           wreg	equ	0xFE8
  3780                           postdec1	equ	0xFE5
  3781                           fsr1l	equ	0xFE1
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _drawFastHLine *****************
  3785 ;; Defined at:
  3786 ;;		line 657 in file "ST7735_TFT.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  x               1    wreg     unsigned char 
  3789 ;;  y               1    7[COMRAM] unsigned char 
  3790 ;;  w               1    8[COMRAM] unsigned char 
  3791 ;;  color           2    9[COMRAM] unsigned int 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  x               1   17[COMRAM] unsigned char 
  3794 ;;  lo              1   16[COMRAM] unsigned char 
  3795 ;;  hi              1   15[COMRAM] unsigned char 
  3796 ;; Return value:  Size  Location     Type
  3797 ;;		None               void
  3798 ;; Registers used:
  3799 ;;		wreg, status,2, status,0, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3805 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;Total ram usage:       11 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    3
  3812 ;; This function calls:
  3813 ;;		_setAddrWindow
  3814 ;;		_spiwrite
  3815 ;; This function is called by:
  3816 ;;		_drawRect
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text9
  3821  00CDDE                     __ptext9:
  3822                           	opt stack 0
  3823  00CDDE                     _drawFastHLine:
  3824                           	opt stack 25
  3825                           
  3826                           ;incstack = 0
  3827                           ;drawFastHLine@x stored from wreg
  3828  00CDDE  6E12               	movwf	drawFastHLine@x,c
  3829                           
  3830                           ;ST7735_TFT.c: 659: unsigned char hi, lo;
  3831                           ;ST7735_TFT.c: 660: if((x >= 128) || (y >= 160))
  3832  00CDE0  0E80               	movlw	128
  3833  00CDE2  6012               	cpfslt	drawFastHLine@x,c
  3834  00CDE4  D03F               	goto	l343
  3835  00CDE6  0E9F               	movlw	159
  3836  00CDE8  6408               	cpfsgt	drawFastHLine@y,c
  3837  00CDEA  D001               	goto	l4492
  3838                           
  3839                           ;ST7735_TFT.c: 661: return;
  3840  00CDEC  D03B               	goto	l343
  3841  00CDEE                     l4492:
  3842                           
  3843                           ;ST7735_TFT.c: 662: if((x + w - 1) >= 128)
  3844  00CDEE  0EFF               	movlw	255
  3845  00CDF0  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3846  00CDF2  0EFF               	movlw	255
  3847  00CDF4  6E0D               	movwf	(??_drawFastHLine+1)& (0+255),c
  3848  00CDF6  5009               	movf	drawFastHLine@w,w,c
  3849  00CDF8  C012  F00E         	movff	drawFastHLine@x,??_drawFastHLine+2
  3850  00CDFC  6A0F               	clrf	(??_drawFastHLine+3)& (0+255),c
  3851  00CDFE  260E               	addwf	??_drawFastHLine+2,f,c
  3852  00CE00  0E00               	movlw	0
  3853  00CE02  220F               	addwfc	??_drawFastHLine+3,f,c
  3854  00CE04  500C               	movf	??_drawFastHLine,w,c
  3855  00CE06  260E               	addwf	??_drawFastHLine+2,f,c
  3856  00CE08  500D               	movf	??_drawFastHLine+1,w,c
  3857  00CE0A  220F               	addwfc	??_drawFastHLine+3,f,c
  3858  00CE0C  BE0F               	btfsc	??_drawFastHLine+3,7,c
  3859  00CE0E  D00B               	goto	l4496
  3860  00CE10  500F               	movf	??_drawFastHLine+3,w,c
  3861  00CE12  E104               	bnz	u4000
  3862  00CE14  0E80               	movlw	128
  3863  00CE16  5C0E               	subwf	??_drawFastHLine+2,w,c
  3864  00CE18  A0D8               	btfss	status,0,c
  3865  00CE1A  D005               	goto	l4496
  3866  00CE1C                     u4000:
  3867                           
  3868                           ;ST7735_TFT.c: 663: w = 128 - x;
  3869  00CE1C  5012               	movf	drawFastHLine@x,w,c
  3870  00CE1E  0800               	sublw	0
  3871  00CE20  0F80               	addlw	128
  3872  00CE22  6E09               	movwf	drawFastHLine@w,c
  3873  00CE24  D000               	goto	l4496
  3874  00CE26                     l4496:
  3875                           
  3876                           ;ST7735_TFT.c: 664: hi = color >> 8; lo = color;
  3877  00CE26  500B               	movf	drawFastHLine@color+1,w,c
  3878  00CE28  6E10               	movwf	drawFastHLine@hi,c
  3879  00CE2A  C00A  F011         	movff	drawFastHLine@color,drawFastHLine@lo
  3880                           
  3881                           ;ST7735_TFT.c: 665: setAddrWindow(x, y, x + w - 1, y);
  3882  00CE2E  C008  F004         	movff	drawFastHLine@y,setAddrWindow@y0
  3883  00CE32  5012               	movf	drawFastHLine@x,w,c
  3884  00CE34  2409               	addwf	drawFastHLine@w,w,c
  3885  00CE36  6E0C               	movwf	??_drawFastHLine& (0+255),c
  3886  00CE38  040C               	decf	??_drawFastHLine,w,c
  3887  00CE3A  6E05               	movwf	setAddrWindow@x1,c
  3888  00CE3C  C008  F006         	movff	drawFastHLine@y,setAddrWindow@y1
  3889  00CE40  5012               	movf	drawFastHLine@x,w,c
  3890  00CE42  ECDD  F064         	call	_setAddrWindow
  3891                           
  3892                           ;ST7735_TFT.c: 666: PORTCbits.RC0 = 1;
  3893  00CE46  8082               	bsf	3970,0,c	;volatile
  3894                           
  3895                           ;ST7735_TFT.c: 667: PORTCbits.RC2 = 0;
  3896  00CE48  9482               	bcf	3970,2,c	;volatile
  3897                           
  3898                           ;ST7735_TFT.c: 669: while (w--) {
  3899  00CE4A  D007               	goto	l4508
  3900  00CE4C                     l4506:
  3901                           
  3902                           ;ST7735_TFT.c: 670: spiwrite(hi);
  3903  00CE4C  5010               	movf	drawFastHLine@hi,w,c
  3904  00CE4E  EC8C  F062         	call	_spiwrite
  3905                           
  3906                           ;ST7735_TFT.c: 671: spiwrite(lo);
  3907  00CE52  5011               	movf	drawFastHLine@lo,w,c
  3908  00CE54  EC8C  F062         	call	_spiwrite
  3909  00CE58  D000               	goto	l4508
  3910  00CE5A                     l4508:
  3911  00CE5A  0609               	decf	drawFastHLine@w,f,c
  3912  00CE5C  2809               	incf	drawFastHLine@w,w,c
  3913  00CE5E  A4D8               	btfss	status,2,c
  3914  00CE60  D7F5               	goto	l4506
  3915                           
  3916                           ;ST7735_TFT.c: 672: }
  3917                           ;ST7735_TFT.c: 673: PORTCbits.RC2 = 1;
  3918  00CE62  8482               	bsf	3970,2,c	;volatile
  3919  00CE64                     l343:
  3920  00CE64  0012               	return		;funcret
  3921  00CE66                     __end_of_drawFastHLine:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodl	equ	0xFF3
  3928                           intcon2	equ	0xFF1
  3929                           postinc0	equ	0xFEE
  3930                           wreg	equ	0xFE8
  3931                           postdec1	equ	0xFE5
  3932                           fsr1l	equ	0xFE1
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function _TFT_GreenTab_Initialize *****************
  3936 ;; Defined at:
  3937 ;;		line 677 in file "ST7735_TFT.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;		None
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;		None               void
  3944 ;; Registers used:
  3945 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;Total ram usage:        0 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    3
  3958 ;; This function calls:
  3959 ;;		_Rcmd1
  3960 ;;		_Rcmd2red
  3961 ;;		_Rcmd3
  3962 ;;		_write_command
  3963 ;;		_write_data
  3964 ;; This function is called by:
  3965 ;;		_Initialize_Screen
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text10
  3970  00C5FE                     __ptext10:
  3971                           	opt stack 0
  3972  00C5FE                     _TFT_GreenTab_Initialize:
  3973                           	opt stack 26
  3974                           
  3975                           ;ST7735_TFT.c: 679: PORTCbits.RC2 = 1;
  3976                           
  3977                           ;incstack = 0
  3978  00C5FE  8482               	bsf	3970,2,c	;volatile
  3979                           
  3980                           ;ST7735_TFT.c: 680: PORTCbits.RC0 = 0;
  3981  00C600  9082               	bcf	3970,0,c	;volatile
  3982                           
  3983                           ;ST7735_TFT.c: 682: SSPSTAT=0x80;
  3984  00C602  0E80               	movlw	128
  3985  00C604  6EC7               	movwf	4039,c	;volatile
  3986                           
  3987                           ;ST7735_TFT.c: 683: SSPCON1=0x30;
  3988  00C606  0E30               	movlw	48
  3989  00C608  6EC6               	movwf	4038,c	;volatile
  3990                           
  3991                           ;ST7735_TFT.c: 686: Rcmd1();
  3992  00C60A  ECF6  F06D         	call	_Rcmd1	;wreg free
  3993                           
  3994                           ;ST7735_TFT.c: 687: Rcmd2red();
  3995  00C60E  ECCE  F063         	call	_Rcmd2red	;wreg free
  3996                           
  3997                           ;ST7735_TFT.c: 688: Rcmd3();
  3998  00C612  ECF4  F06B         	call	_Rcmd3	;wreg free
  3999                           
  4000                           ;ST7735_TFT.c: 689: write_command(0x36);
  4001  00C616  0E36               	movlw	54
  4002  00C618  EC6A  F062         	call	_write_command
  4003                           
  4004                           ;ST7735_TFT.c: 690: write_data(0xC0);
  4005  00C61C  0EC0               	movlw	192
  4006  00C61E  EC72  F062         	call	_write_data
  4007                           
  4008                           ;ST7735_TFT.c: 691: _tft_type = 1;
  4009  00C622  0E01               	movlw	1
  4010  00C624  6E7C               	movwf	__tft_type,c
  4011  00C626  0012               	return		;funcret
  4012  00C628                     __end_of_TFT_GreenTab_Initialize:
  4013                           	opt stack 0
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           tblptrl	equ	0xFF6
  4017                           tablat	equ	0xFF5
  4018                           prodl	equ	0xFF3
  4019                           intcon2	equ	0xFF1
  4020                           postinc0	equ	0xFEE
  4021                           wreg	equ	0xFE8
  4022                           postdec1	equ	0xFE5
  4023                           fsr1l	equ	0xFE1
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _Rcmd3 *****************
  4027 ;; Defined at:
  4028 ;;		line 371 in file "ST7735_TFT.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;		None               void
  4035 ;; Registers used:
  4036 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;Total ram usage:        0 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    2
  4049 ;; This function calls:
  4050 ;;		_delay_ms
  4051 ;;		_write_command
  4052 ;;		_write_data
  4053 ;; This function is called by:
  4054 ;;		_TFT_GreenTab_Initialize
  4055 ;;		_TFT_BlackTab_Initialize
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text11
  4060  00D7E8                     __ptext11:
  4061                           	opt stack 0
  4062  00D7E8                     _Rcmd3:
  4063                           	opt stack 26
  4064                           
  4065                           ;ST7735_TFT.c: 373: write_command(0xE0);
  4066                           
  4067                           ;incstack = 0
  4068  00D7E8  0EE0               	movlw	224
  4069  00D7EA  EC6A  F062         	call	_write_command
  4070                           
  4071                           ;ST7735_TFT.c: 374: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  4072  00D7EE  0E02               	movlw	2
  4073  00D7F0  EC72  F062         	call	_write_data
  4074  00D7F4  0E1C               	movlw	28
  4075  00D7F6  EC72  F062         	call	_write_data
  4076  00D7FA  0E07               	movlw	7
  4077  00D7FC  EC72  F062         	call	_write_data
  4078  00D800  0E12               	movlw	18
  4079  00D802  EC72  F062         	call	_write_data
  4080                           
  4081                           ;ST7735_TFT.c: 375: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  4082  00D806  0E37               	movlw	55
  4083  00D808  EC72  F062         	call	_write_data
  4084  00D80C  0E32               	movlw	50
  4085  00D80E  EC72  F062         	call	_write_data
  4086  00D812  0E29               	movlw	41
  4087  00D814  EC72  F062         	call	_write_data
  4088  00D818  0E2D               	movlw	45
  4089  00D81A  EC72  F062         	call	_write_data
  4090                           
  4091                           ;ST7735_TFT.c: 376: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  4092  00D81E  0E29               	movlw	41
  4093  00D820  EC72  F062         	call	_write_data
  4094  00D824  0E25               	movlw	37
  4095  00D826  EC72  F062         	call	_write_data
  4096  00D82A  0E2B               	movlw	43
  4097  00D82C  EC72  F062         	call	_write_data
  4098  00D830  0E39               	movlw	57
  4099  00D832  EC72  F062         	call	_write_data
  4100                           
  4101                           ;ST7735_TFT.c: 377: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  4102  00D836  0E00               	movlw	0
  4103  00D838  EC72  F062         	call	_write_data
  4104  00D83C  0E01               	movlw	1
  4105  00D83E  EC72  F062         	call	_write_data
  4106  00D842  0E03               	movlw	3
  4107  00D844  EC72  F062         	call	_write_data
  4108  00D848  0E10               	movlw	16
  4109  00D84A  EC72  F062         	call	_write_data
  4110                           
  4111                           ;ST7735_TFT.c: 378: write_command(0xE1);
  4112  00D84E  0EE1               	movlw	225
  4113  00D850  EC6A  F062         	call	_write_command
  4114                           
  4115                           ;ST7735_TFT.c: 379: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  4116  00D854  0E03               	movlw	3
  4117  00D856  EC72  F062         	call	_write_data
  4118  00D85A  0E1D               	movlw	29
  4119  00D85C  EC72  F062         	call	_write_data
  4120  00D860  0E07               	movlw	7
  4121  00D862  EC72  F062         	call	_write_data
  4122  00D866  0E06               	movlw	6
  4123  00D868  EC72  F062         	call	_write_data
  4124                           
  4125                           ;ST7735_TFT.c: 380: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  4126  00D86C  0E2E               	movlw	46
  4127  00D86E  EC72  F062         	call	_write_data
  4128  00D872  0E2C               	movlw	44
  4129  00D874  EC72  F062         	call	_write_data
  4130  00D878  0E29               	movlw	41
  4131  00D87A  EC72  F062         	call	_write_data
  4132  00D87E  0E2D               	movlw	45
  4133  00D880  EC72  F062         	call	_write_data
  4134                           
  4135                           ;ST7735_TFT.c: 381: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  4136  00D884  0E2E               	movlw	46
  4137  00D886  EC72  F062         	call	_write_data
  4138  00D88A  0E2E               	movlw	46
  4139  00D88C  EC72  F062         	call	_write_data
  4140  00D890  0E37               	movlw	55
  4141  00D892  EC72  F062         	call	_write_data
  4142  00D896  0E3F               	movlw	63
  4143  00D898  EC72  F062         	call	_write_data
  4144                           
  4145                           ;ST7735_TFT.c: 382: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  4146  00D89C  0E00               	movlw	0
  4147  00D89E  EC72  F062         	call	_write_data
  4148  00D8A2  0E00               	movlw	0
  4149  00D8A4  EC72  F062         	call	_write_data
  4150  00D8A8  0E02               	movlw	2
  4151  00D8AA  EC72  F062         	call	_write_data
  4152  00D8AE  0E10               	movlw	16
  4153  00D8B0  EC72  F062         	call	_write_data
  4154                           
  4155                           ;ST7735_TFT.c: 383: write_command(0x13);
  4156  00D8B4  0E13               	movlw	19
  4157  00D8B6  EC6A  F062         	call	_write_command
  4158                           
  4159                           ;ST7735_TFT.c: 384: delay_ms(10);
  4160  00D8BA  0E00               	movlw	0
  4161  00D8BC  6E16               	movwf	delay_ms@ms+1,c
  4162  00D8BE  0E0A               	movlw	10
  4163  00D8C0  6E15               	movwf	delay_ms@ms,c
  4164  00D8C2  EC2D  F065         	call	_delay_ms	;wreg free
  4165                           
  4166                           ;ST7735_TFT.c: 385: write_command(0x29);
  4167  00D8C6  0E29               	movlw	41
  4168  00D8C8  EC6A  F062         	call	_write_command
  4169                           
  4170                           ;ST7735_TFT.c: 386: delay_ms(100);
  4171  00D8CC  0E00               	movlw	0
  4172  00D8CE  6E16               	movwf	delay_ms@ms+1,c
  4173  00D8D0  0E64               	movlw	100
  4174  00D8D2  6E15               	movwf	delay_ms@ms,c
  4175  00D8D4  EC2D  F065         	call	_delay_ms	;wreg free
  4176  00D8D8  0012               	return		;funcret
  4177  00D8DA                     __end_of_Rcmd3:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodl	equ	0xFF3
  4184                           intcon2	equ	0xFF1
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postdec1	equ	0xFE5
  4188                           fsr1l	equ	0xFE1
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _Rcmd2red *****************
  4192 ;; Defined at:
  4193 ;;		line 361 in file "ST7735_TFT.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;		None               void
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    2
  4214 ;; This function calls:
  4215 ;;		_write_command
  4216 ;;		_write_data
  4217 ;; This function is called by:
  4218 ;;		_TFT_GreenTab_Initialize
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text12
  4223  00C79C                     __ptext12:
  4224                           	opt stack 0
  4225  00C79C                     _Rcmd2red:
  4226                           	opt stack 26
  4227                           
  4228                           ;ST7735_TFT.c: 363: write_command(0x2A);
  4229                           
  4230                           ;incstack = 0
  4231  00C79C  0E2A               	movlw	42
  4232  00C79E  EC6A  F062         	call	_write_command
  4233                           
  4234                           ;ST7735_TFT.c: 364: write_data(0x00); write_data(0x00);
  4235  00C7A2  0E00               	movlw	0
  4236  00C7A4  EC72  F062         	call	_write_data
  4237  00C7A8  0E00               	movlw	0
  4238  00C7AA  EC72  F062         	call	_write_data
  4239                           
  4240                           ;ST7735_TFT.c: 365: write_data(0x00); write_data(0x7F);
  4241  00C7AE  0E00               	movlw	0
  4242  00C7B0  EC72  F062         	call	_write_data
  4243  00C7B4  0E7F               	movlw	127
  4244  00C7B6  EC72  F062         	call	_write_data
  4245                           
  4246                           ;ST7735_TFT.c: 366: write_command(0x2B);
  4247  00C7BA  0E2B               	movlw	43
  4248  00C7BC  EC6A  F062         	call	_write_command
  4249                           
  4250                           ;ST7735_TFT.c: 367: write_data(0x00); write_data(0x00);
  4251  00C7C0  0E00               	movlw	0
  4252  00C7C2  EC72  F062         	call	_write_data
  4253  00C7C6  0E00               	movlw	0
  4254  00C7C8  EC72  F062         	call	_write_data
  4255                           
  4256                           ;ST7735_TFT.c: 368: write_data(0x00); write_data(0x9F);
  4257  00C7CC  0E00               	movlw	0
  4258  00C7CE  EC72  F062         	call	_write_data
  4259  00C7D2  0E9F               	movlw	159
  4260  00C7D4  EC72  F062         	call	_write_data
  4261  00C7D8  0012               	return		;funcret
  4262  00C7DA                     __end_of_Rcmd2red:
  4263                           	opt stack 0
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           prodl	equ	0xFF3
  4269                           intcon2	equ	0xFF1
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           postdec1	equ	0xFE5
  4273                           fsr1l	equ	0xFE1
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function _Rcmd1 *****************
  4277 ;; Defined at:
  4278 ;;		line 314 in file "ST7735_TFT.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;		None
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;		None
  4283 ;; Return value:  Size  Location     Type
  4284 ;;		None               void
  4285 ;; Registers used:
  4286 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;Total ram usage:        0 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    2
  4299 ;; This function calls:
  4300 ;;		_delay_ms
  4301 ;;		_write_command
  4302 ;;		_write_data
  4303 ;; This function is called by:
  4304 ;;		_TFT_GreenTab_Initialize
  4305 ;;		_TFT_BlackTab_Initialize
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text13
  4310  00DBEC                     __ptext13:
  4311                           	opt stack 0
  4312  00DBEC                     _Rcmd1:
  4313                           	opt stack 26
  4314                           
  4315                           ;ST7735_TFT.c: 316: write_command(0x01);
  4316                           
  4317                           ;incstack = 0
  4318  00DBEC  0E01               	movlw	1
  4319  00DBEE  EC6A  F062         	call	_write_command
  4320                           
  4321                           ;ST7735_TFT.c: 317: delay_ms(150);
  4322  00DBF2  0E00               	movlw	0
  4323  00DBF4  6E16               	movwf	delay_ms@ms+1,c
  4324  00DBF6  0E96               	movlw	150
  4325  00DBF8  6E15               	movwf	delay_ms@ms,c
  4326  00DBFA  EC2D  F065         	call	_delay_ms	;wreg free
  4327                           
  4328                           ;ST7735_TFT.c: 318: write_command(0x11);
  4329  00DBFE  0E11               	movlw	17
  4330  00DC00  EC6A  F062         	call	_write_command
  4331                           
  4332                           ;ST7735_TFT.c: 319: delay_ms(500);
  4333  00DC04  0E01               	movlw	1
  4334  00DC06  6E16               	movwf	delay_ms@ms+1,c
  4335  00DC08  0EF4               	movlw	244
  4336  00DC0A  6E15               	movwf	delay_ms@ms,c
  4337  00DC0C  EC2D  F065         	call	_delay_ms	;wreg free
  4338                           
  4339                           ;ST7735_TFT.c: 320: write_command(0xB1);
  4340  00DC10  0EB1               	movlw	177
  4341  00DC12  EC6A  F062         	call	_write_command
  4342                           
  4343                           ;ST7735_TFT.c: 321: write_data(0x01);
  4344  00DC16  0E01               	movlw	1
  4345  00DC18  EC72  F062         	call	_write_data
  4346                           
  4347                           ;ST7735_TFT.c: 322: write_data(0x2C);
  4348  00DC1C  0E2C               	movlw	44
  4349  00DC1E  EC72  F062         	call	_write_data
  4350                           
  4351                           ;ST7735_TFT.c: 323: write_data(0x2D);
  4352  00DC22  0E2D               	movlw	45
  4353  00DC24  EC72  F062         	call	_write_data
  4354                           
  4355                           ;ST7735_TFT.c: 324: write_command(0xB2);
  4356  00DC28  0EB2               	movlw	178
  4357  00DC2A  EC6A  F062         	call	_write_command
  4358                           
  4359                           ;ST7735_TFT.c: 325: write_data(0x01);
  4360  00DC2E  0E01               	movlw	1
  4361  00DC30  EC72  F062         	call	_write_data
  4362                           
  4363                           ;ST7735_TFT.c: 326: write_data(0x2C);
  4364  00DC34  0E2C               	movlw	44
  4365  00DC36  EC72  F062         	call	_write_data
  4366                           
  4367                           ;ST7735_TFT.c: 327: write_data(0x2D);
  4368  00DC3A  0E2D               	movlw	45
  4369  00DC3C  EC72  F062         	call	_write_data
  4370                           
  4371                           ;ST7735_TFT.c: 328: write_command(0xB3);
  4372  00DC40  0EB3               	movlw	179
  4373  00DC42  EC6A  F062         	call	_write_command
  4374                           
  4375                           ;ST7735_TFT.c: 329: write_data(0x01);
  4376  00DC46  0E01               	movlw	1
  4377  00DC48  EC72  F062         	call	_write_data
  4378                           
  4379                           ;ST7735_TFT.c: 330: write_data(0x2C);
  4380  00DC4C  0E2C               	movlw	44
  4381  00DC4E  EC72  F062         	call	_write_data
  4382                           
  4383                           ;ST7735_TFT.c: 331: write_data(0x2D);
  4384  00DC52  0E2D               	movlw	45
  4385  00DC54  EC72  F062         	call	_write_data
  4386                           
  4387                           ;ST7735_TFT.c: 332: write_data(0x01);
  4388  00DC58  0E01               	movlw	1
  4389  00DC5A  EC72  F062         	call	_write_data
  4390                           
  4391                           ;ST7735_TFT.c: 333: write_data(0x2C);
  4392  00DC5E  0E2C               	movlw	44
  4393  00DC60  EC72  F062         	call	_write_data
  4394                           
  4395                           ;ST7735_TFT.c: 334: write_data(0x2D);
  4396  00DC64  0E2D               	movlw	45
  4397  00DC66  EC72  F062         	call	_write_data
  4398                           
  4399                           ;ST7735_TFT.c: 335: write_command(0xB4);
  4400  00DC6A  0EB4               	movlw	180
  4401  00DC6C  EC6A  F062         	call	_write_command
  4402                           
  4403                           ;ST7735_TFT.c: 336: write_data(0x07);
  4404  00DC70  0E07               	movlw	7
  4405  00DC72  EC72  F062         	call	_write_data
  4406                           
  4407                           ;ST7735_TFT.c: 337: write_command(0xC0);
  4408  00DC76  0EC0               	movlw	192
  4409  00DC78  EC6A  F062         	call	_write_command
  4410                           
  4411                           ;ST7735_TFT.c: 338: write_data(0xA2);
  4412  00DC7C  0EA2               	movlw	162
  4413  00DC7E  EC72  F062         	call	_write_data
  4414                           
  4415                           ;ST7735_TFT.c: 339: write_data(0x02);
  4416  00DC82  0E02               	movlw	2
  4417  00DC84  EC72  F062         	call	_write_data
  4418                           
  4419                           ;ST7735_TFT.c: 340: write_data(0x84);
  4420  00DC88  0E84               	movlw	132
  4421  00DC8A  EC72  F062         	call	_write_data
  4422                           
  4423                           ;ST7735_TFT.c: 341: write_command(0xC1);
  4424  00DC8E  0EC1               	movlw	193
  4425  00DC90  EC6A  F062         	call	_write_command
  4426                           
  4427                           ;ST7735_TFT.c: 342: write_data(0xC5);
  4428  00DC94  0EC5               	movlw	197
  4429  00DC96  EC72  F062         	call	_write_data
  4430                           
  4431                           ;ST7735_TFT.c: 343: write_command(0xC2);
  4432  00DC9A  0EC2               	movlw	194
  4433  00DC9C  EC6A  F062         	call	_write_command
  4434                           
  4435                           ;ST7735_TFT.c: 344: write_data(0x0A);
  4436  00DCA0  0E0A               	movlw	10
  4437  00DCA2  EC72  F062         	call	_write_data
  4438                           
  4439                           ;ST7735_TFT.c: 345: write_data(0x00);
  4440  00DCA6  0E00               	movlw	0
  4441  00DCA8  EC72  F062         	call	_write_data
  4442                           
  4443                           ;ST7735_TFT.c: 346: write_command(0xC3);
  4444  00DCAC  0EC3               	movlw	195
  4445  00DCAE  EC6A  F062         	call	_write_command
  4446                           
  4447                           ;ST7735_TFT.c: 347: write_data(0x8A);
  4448  00DCB2  0E8A               	movlw	138
  4449  00DCB4  EC72  F062         	call	_write_data
  4450                           
  4451                           ;ST7735_TFT.c: 348: write_data(0x2A);
  4452  00DCB8  0E2A               	movlw	42
  4453  00DCBA  EC72  F062         	call	_write_data
  4454                           
  4455                           ;ST7735_TFT.c: 349: write_command(0xC4);
  4456  00DCBE  0EC4               	movlw	196
  4457  00DCC0  EC6A  F062         	call	_write_command
  4458                           
  4459                           ;ST7735_TFT.c: 350: write_data(0x8A);
  4460  00DCC4  0E8A               	movlw	138
  4461  00DCC6  EC72  F062         	call	_write_data
  4462                           
  4463                           ;ST7735_TFT.c: 351: write_data(0xEE);
  4464  00DCCA  0EEE               	movlw	238
  4465  00DCCC  EC72  F062         	call	_write_data
  4466                           
  4467                           ;ST7735_TFT.c: 352: write_command(0xC5);
  4468  00DCD0  0EC5               	movlw	197
  4469  00DCD2  EC6A  F062         	call	_write_command
  4470                           
  4471                           ;ST7735_TFT.c: 353: write_data(0x0E);
  4472  00DCD6  0E0E               	movlw	14
  4473  00DCD8  EC72  F062         	call	_write_data
  4474                           
  4475                           ;ST7735_TFT.c: 354: write_command(0x20);
  4476  00DCDC  0E20               	movlw	32
  4477  00DCDE  EC6A  F062         	call	_write_command
  4478                           
  4479                           ;ST7735_TFT.c: 355: write_command(0x36);
  4480  00DCE2  0E36               	movlw	54
  4481  00DCE4  EC6A  F062         	call	_write_command
  4482                           
  4483                           ;ST7735_TFT.c: 356: write_data(0xC8);
  4484  00DCE8  0EC8               	movlw	200
  4485  00DCEA  EC72  F062         	call	_write_data
  4486                           
  4487                           ;ST7735_TFT.c: 357: write_command(0x3A);
  4488  00DCEE  0E3A               	movlw	58
  4489  00DCF0  EC6A  F062         	call	_write_command
  4490                           
  4491                           ;ST7735_TFT.c: 358: write_data(0x05);
  4492  00DCF4  0E05               	movlw	5
  4493  00DCF6  EC72  F062         	call	_write_data
  4494  00DCFA  0012               	return		;funcret
  4495  00DCFC                     __end_of_Rcmd1:
  4496                           	opt stack 0
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodl	equ	0xFF3
  4502                           intcon2	equ	0xFF1
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           postdec1	equ	0xFE5
  4506                           fsr1l	equ	0xFE1
  4507                           status	equ	0xFD8
  4508                           
  4509 ;; *************** function _LCD_Reset *****************
  4510 ;; Defined at:
  4511 ;;		line 250 in file "ST7735_TFT.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;		None               void
  4518 ;; Registers used:
  4519 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    2
  4532 ;; This function calls:
  4533 ;;		_delay_ms
  4534 ;; This function is called by:
  4535 ;;		_Initialize_Screen
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text14
  4540  00C506                     __ptext14:
  4541                           	opt stack 0
  4542  00C506                     _LCD_Reset:
  4543                           	opt stack 27
  4544                           
  4545                           ;ST7735_TFT.c: 252: PORTCbits.RC4 = 0;
  4546                           
  4547                           ;incstack = 0
  4548  00C506  9882               	bcf	3970,4,c	;volatile
  4549                           
  4550                           ;ST7735_TFT.c: 253: delay_ms(100);
  4551  00C508  0E00               	movlw	0
  4552  00C50A  6E16               	movwf	delay_ms@ms+1,c
  4553  00C50C  0E64               	movlw	100
  4554  00C50E  6E15               	movwf	delay_ms@ms,c
  4555  00C510  EC2D  F065         	call	_delay_ms	;wreg free
  4556                           
  4557                           ;ST7735_TFT.c: 254: PORTCbits.RC4 = 1;
  4558  00C514  8882               	bsf	3970,4,c	;volatile
  4559  00C516  0012               	return		;funcret
  4560  00C518                     __end_of_LCD_Reset:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodl	equ	0xFF3
  4567                           intcon2	equ	0xFF1
  4568                           postinc0	equ	0xFEE
  4569                           wreg	equ	0xFE8
  4570                           postdec1	equ	0xFE5
  4571                           fsr1l	equ	0xFE1
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function _delay_ms *****************
  4575 ;; Defined at:
  4576 ;;		line 97 in file "ST7735_TFT.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  ms              2   20[COMRAM] int 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  count           2   24[COMRAM] int 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;		None               void
  4583 ;; Registers used:
  4584 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 0/0
  4587 ;;		On exit  : 0/0
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4590 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;Total ram usage:        6 bytes
  4595 ;; Hardware stack levels used:    1
  4596 ;; Hardware stack levels required when called:    1
  4597 ;; This function calls:
  4598 ;;		___wmul
  4599 ;; This function is called by:
  4600 ;;		_LCD_Reset
  4601 ;;		_Rcmd1
  4602 ;;		_Rcmd3
  4603 ;;		_Bcmd
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text15
  4608  00CA5A                     __ptext15:
  4609                           	opt stack 0
  4610  00CA5A                     _delay_ms:
  4611                           	opt stack 26
  4612                           
  4613                           ;ST7735_TFT.c: 103: int count;
  4614                           ;ST7735_TFT.c: 104: count = 8000000/4000/8 * ms;
  4615                           
  4616                           ;incstack = 0
  4617  00CA5A  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4618  00CA5E  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4619  00CA62  0E00               	movlw	0
  4620  00CA64  6E12               	movwf	___wmul@multiplicand+1,c
  4621  00CA66  0EFA               	movlw	250
  4622  00CA68  6E11               	movwf	___wmul@multiplicand,c
  4623  00CA6A  ECEB  F062         	call	___wmul	;wreg free
  4624  00CA6E  C00F  F019         	movff	?___wmul,delay_ms@count
  4625  00CA72  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4626                           
  4627                           ;ST7735_TFT.c: 105: count = (0xffff - count);
  4628  00CA76  C019  F017         	movff	delay_ms@count,??_delay_ms
  4629  00CA7A  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4630  00CA7E  1E17               	comf	??_delay_ms,f,c
  4631  00CA80  1E18               	comf	??_delay_ms+1,f,c
  4632  00CA82  4A17               	infsnz	??_delay_ms,f,c
  4633  00CA84  2A18               	incf	??_delay_ms+1,f,c
  4634  00CA86  0EFF               	movlw	255
  4635  00CA88  2417               	addwf	??_delay_ms,w,c
  4636  00CA8A  6E19               	movwf	delay_ms@count,c
  4637  00CA8C  0EFF               	movlw	255
  4638  00CA8E  2018               	addwfc	??_delay_ms+1,w,c
  4639  00CA90  6E1A               	movwf	delay_ms@count+1,c
  4640                           
  4641                           ;ST7735_TFT.c: 107: T3CON = 0xb8;
  4642  00CA92  0EB8               	movlw	184
  4643  00CA94  6EB1               	movwf	4017,c	;volatile
  4644                           
  4645                           ;ST7735_TFT.c: 109: TMR0L = count & 0x00ff;
  4646  00CA96  C019  FFD6         	movff	delay_ms@count,4054	;volatile
  4647                           
  4648                           ;ST7735_TFT.c: 110: TMR0H = count >> 8;
  4649  00CA9A  501A               	movf	delay_ms@count+1,w,c
  4650  00CA9C  6ED7               	movwf	4055,c	;volatile
  4651                           
  4652                           ;ST7735_TFT.c: 112: PIR2bits.TMR3IF = 0;
  4653  00CA9E  92A1               	bcf	4001,1,c	;volatile
  4654                           
  4655                           ;ST7735_TFT.c: 113: T3CONbits.TMR3ON = 1;
  4656  00CAA0  80B1               	bsf	4017,0,c	;volatile
  4657                           
  4658                           ;ST7735_TFT.c: 115: while (PIR2bits.TMR3IF == 0);
  4659  00CAA2  D000               	goto	l185
  4660  00CAA4                     l185:
  4661  00CAA4  A2A1               	btfss	4001,1,c	;volatile
  4662  00CAA6  D7FE               	goto	l185
  4663                           
  4664                           ;ST7735_TFT.c: 116: T3CONbits.TMR3ON = 0;
  4665  00CAA8  90B1               	bcf	4017,0,c	;volatile
  4666  00CAAA  0012               	return		;funcret
  4667  00CAAC                     __end_of_delay_ms:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodl	equ	0xFF3
  4674                           intcon2	equ	0xFF1
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           postdec1	equ	0xFE5
  4678                           fsr1l	equ	0xFE1
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function _Init_Tris *****************
  4682 ;; Defined at:
  4683 ;;		line 200 in file "Lab7.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;		None
  4688 ;; Return value:  Size  Location     Type
  4689 ;;		None               void
  4690 ;; Registers used:
  4691 ;;		wreg, status,2
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;Total ram usage:        0 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_main
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text16
  4711  00C540                     __ptext16:
  4712                           	opt stack 0
  4713  00C540                     _Init_Tris:
  4714                           	opt stack 30
  4715                           
  4716                           ;Lab7.c: 201: TRISA = 0x1F;
  4717                           
  4718                           ;incstack = 0
  4719  00C540  0E1F               	movlw	31
  4720  00C542  6E92               	movwf	3986,c	;volatile
  4721                           
  4722                           ;Lab7.c: 202: TRISB = 0x00;
  4723  00C544  0E00               	movlw	0
  4724  00C546  6E93               	movwf	3987,c	;volatile
  4725                           
  4726                           ;Lab7.c: 203: TRISC = 0x00;
  4727  00C548  0E00               	movlw	0
  4728  00C54A  6E94               	movwf	3988,c	;volatile
  4729                           
  4730                           ;Lab7.c: 204: TRISD = 0x00;
  4731  00C54C  0E00               	movlw	0
  4732  00C54E  6E95               	movwf	3989,c	;volatile
  4733                           
  4734                           ;Lab7.c: 205: TRISE = 0x00;
  4735  00C550  0E00               	movlw	0
  4736  00C552  6E96               	movwf	3990,c	;volatile
  4737  00C554  0012               	return		;funcret
  4738  00C556                     __end_of_Init_Tris:
  4739                           	opt stack 0
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodl	equ	0xFF3
  4745                           intcon2	equ	0xFF1
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           postdec1	equ	0xFE5
  4749                           fsr1l	equ	0xFE1
  4750                           status	equ	0xFD8
  4751                           
  4752 ;; *************** function _Init_ADC *****************
  4753 ;; Defined at:
  4754 ;;		line 208 in file "Lab7.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;		None               void
  4761 ;; Registers used:
  4762 ;;		wreg, status,2
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; This function calls:
  4775 ;;		Nothing
  4776 ;; This function is called by:
  4777 ;;		_main
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           	psect	text17
  4782  00C4B0                     __ptext17:
  4783                           	opt stack 0
  4784  00C4B0                     _Init_ADC:
  4785                           	opt stack 30
  4786                           
  4787                           ;Lab7.c: 209: ADCON1=0x0E;
  4788                           
  4789                           ;incstack = 0
  4790  00C4B0  0E0E               	movlw	14
  4791  00C4B2  6EC1               	movwf	4033,c	;volatile
  4792                           
  4793                           ;Lab7.c: 210: ADCON2=0xA9;
  4794  00C4B4  0EA9               	movlw	169
  4795  00C4B6  6EC0               	movwf	4032,c	;volatile
  4796  00C4B8  0012               	return		;funcret
  4797  00C4BA                     __end_of_Init_ADC:
  4798                           	opt stack 0
  4799                           tblptru	equ	0xFF8
  4800                           tblptrh	equ	0xFF7
  4801                           tblptrl	equ	0xFF6
  4802                           tablat	equ	0xFF5
  4803                           prodl	equ	0xFF3
  4804                           intcon2	equ	0xFF1
  4805                           postinc0	equ	0xFEE
  4806                           wreg	equ	0xFE8
  4807                           postdec1	equ	0xFE5
  4808                           fsr1l	equ	0xFE1
  4809                           status	equ	0xFD8
  4810                           
  4811 ;; *************** function _Day_Mode *****************
  4812 ;; Defined at:
  4813 ;;		line 387 in file "Lab7.c"
  4814 ;; Parameters:    Size  Location     Type
  4815 ;;		None
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;		None
  4818 ;; Return value:  Size  Location     Type
  4819 ;;		None               void
  4820 ;; Registers used:
  4821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        0 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:   10
  4834 ;; This function calls:
  4835 ;;		_PED_Control
  4836 ;;		_Set_EW
  4837 ;;		_Set_EWLT
  4838 ;;		_Set_NS
  4839 ;;		_Set_NSLT
  4840 ;;		_Wait_N_Seconds
  4841 ;; This function is called by:
  4842 ;;		_main
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text18
  4847  00D394                     __ptext18:
  4848                           	opt stack 0
  4849  00D394                     _Day_Mode:
  4850                           	opt stack 20
  4851                           
  4852                           ;Lab7.c: 388: MODE = 1;
  4853                           
  4854                           ;incstack = 0
  4855  00D394  0E00               	movlw	0
  4856  00D396  0100               	movlb	0	; () banked
  4857  00D398  6FB1               	movwf	(_MODE+1)& (0+255),b
  4858  00D39A  0E01               	movlw	1
  4859  00D39C  6FB0               	movwf	_MODE& (0+255),b
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;Lab7.c: 389: PORTBbits.RB7 = 1;
  4863  00D39E  8E81               	bsf	3969,7,c	;volatile
  4864                           
  4865                           ;Lab7.c: 390: Act_Mode_Txt[0] = 'D';
  4866  00D3A0  0E44               	movlw	68
  4867  00D3A2  0100               	movlb	0	; () banked
  4868  00D3A4  6F9F               	movwf	_Act_Mode_Txt& (0+255),b
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;Lab7.c: 391: Set_NSLT(1);
  4872  00D3A6  0E01               	movlw	1
  4873  00D3A8  EC96  F064         	call	_Set_NSLT
  4874                           
  4875                           ;Lab7.c: 392: Set_EW(1);
  4876  00D3AC  0E01               	movlw	1
  4877  00D3AE  EC30  F064         	call	_Set_EW
  4878                           
  4879                           ;Lab7.c: 393: Set_EWLT(1);
  4880  00D3B2  0E01               	movlw	1
  4881  00D3B4  EC52  F064         	call	_Set_EWLT
  4882                           
  4883                           ;Lab7.c: 394: Set_NS(2);
  4884  00D3B8  0E02               	movlw	2
  4885  00D3BA  EC74  F064         	call	_Set_NS
  4886                           
  4887                           ;Lab7.c: 396: if(PORTAbits.RA1){
  4888  00D3BE  A280               	btfss	3968,1,c	;volatile
  4889  00D3C0  D005               	goto	l473
  4890                           
  4891                           ;Lab7.c: 397: PED_Control(0,8);
  4892  00D3C2  0E08               	movlw	8
  4893  00D3C4  6E68               	movwf	PED_Control@Num_Sec,c
  4894  00D3C6  0E00               	movlw	0
  4895  00D3C8  EC91  F063         	call	_PED_Control
  4896  00D3CC                     l473:
  4897                           
  4898                           ;Lab7.c: 398: }
  4899                           ;Lab7.c: 400: Wait_N_Seconds(7);
  4900  00D3CC  0E07               	movlw	7
  4901  00D3CE  EC2B  F063         	call	_Wait_N_Seconds
  4902                           
  4903                           ;Lab7.c: 401: Set_NS(3);
  4904  00D3D2  0E03               	movlw	3
  4905  00D3D4  EC74  F064         	call	_Set_NS
  4906                           
  4907                           ;Lab7.c: 402: Wait_N_Seconds(3);
  4908  00D3D8  0E03               	movlw	3
  4909  00D3DA  EC2B  F063         	call	_Wait_N_Seconds
  4910                           
  4911                           ;Lab7.c: 403: Set_NS(1);
  4912  00D3DE  0E01               	movlw	1
  4913  00D3E0  EC74  F064         	call	_Set_NS
  4914                           
  4915                           ;Lab7.c: 405: if(PORTAbits.RA4){
  4916  00D3E4  A880               	btfss	3968,4,c	;volatile
  4917  00D3E6  D010               	goto	l4884
  4918                           
  4919                           ;Lab7.c: 406: Set_EWLT(2);
  4920  00D3E8  0E02               	movlw	2
  4921  00D3EA  EC52  F064         	call	_Set_EWLT
  4922                           
  4923                           ;Lab7.c: 407: Wait_N_Seconds(8);
  4924  00D3EE  0E08               	movlw	8
  4925  00D3F0  EC2B  F063         	call	_Wait_N_Seconds
  4926                           
  4927                           ;Lab7.c: 408: Set_EWLT(3);
  4928  00D3F4  0E03               	movlw	3
  4929  00D3F6  EC52  F064         	call	_Set_EWLT
  4930                           
  4931                           ;Lab7.c: 409: Wait_N_Seconds(3);
  4932  00D3FA  0E03               	movlw	3
  4933  00D3FC  EC2B  F063         	call	_Wait_N_Seconds
  4934                           
  4935                           ;Lab7.c: 410: Set_EWLT(1);
  4936  00D400  0E01               	movlw	1
  4937  00D402  EC52  F064         	call	_Set_EWLT
  4938  00D406  D000               	goto	l4884
  4939  00D408                     l4884:
  4940                           
  4941                           ;Lab7.c: 411: }
  4942                           ;Lab7.c: 413: Set_EW(2);
  4943  00D408  0E02               	movlw	2
  4944  00D40A  EC30  F064         	call	_Set_EW
  4945                           
  4946                           ;Lab7.c: 414: if(PORTAbits.RA3){
  4947  00D40E  A680               	btfss	3968,3,c	;volatile
  4948  00D410  D006               	goto	l4890
  4949                           
  4950                           ;Lab7.c: 415: PED_Control(1,9);
  4951  00D412  0E09               	movlw	9
  4952  00D414  6E68               	movwf	PED_Control@Num_Sec,c
  4953  00D416  0E01               	movlw	1
  4954  00D418  EC91  F063         	call	_PED_Control
  4955  00D41C  D000               	goto	l4890
  4956  00D41E                     l4890:
  4957                           
  4958                           ;Lab7.c: 416: }
  4959                           ;Lab7.c: 419: Set_EW(2);
  4960  00D41E  0E02               	movlw	2
  4961  00D420  EC30  F064         	call	_Set_EW
  4962                           
  4963                           ;Lab7.c: 420: Wait_N_Seconds(9);
  4964  00D424  0E09               	movlw	9
  4965  00D426  EC2B  F063         	call	_Wait_N_Seconds
  4966                           
  4967                           ;Lab7.c: 421: Set_EW(3);
  4968  00D42A  0E03               	movlw	3
  4969  00D42C  EC30  F064         	call	_Set_EW
  4970                           
  4971                           ;Lab7.c: 422: Wait_N_Seconds(3);
  4972  00D430  0E03               	movlw	3
  4973  00D432  EC2B  F063         	call	_Wait_N_Seconds
  4974                           
  4975                           ;Lab7.c: 423: Set_EW(1);
  4976  00D436  0E01               	movlw	1
  4977  00D438  EC30  F064         	call	_Set_EW
  4978                           
  4979                           ;Lab7.c: 425: if(PORTAbits.RA2){
  4980  00D43C  A480               	btfss	3968,2,c	;volatile
  4981  00D43E  D00D               	goto	l4906
  4982                           
  4983                           ;Lab7.c: 426: Set_NSLT(2);
  4984  00D440  0E02               	movlw	2
  4985  00D442  EC96  F064         	call	_Set_NSLT
  4986                           
  4987                           ;Lab7.c: 427: Wait_N_Seconds(8);
  4988  00D446  0E08               	movlw	8
  4989  00D448  EC2B  F063         	call	_Wait_N_Seconds
  4990                           
  4991                           ;Lab7.c: 428: Set_NSLT(3);
  4992  00D44C  0E03               	movlw	3
  4993  00D44E  EC96  F064         	call	_Set_NSLT
  4994                           
  4995                           ;Lab7.c: 429: Wait_N_Seconds(3);
  4996  00D452  0E03               	movlw	3
  4997  00D454  EC2B  F063         	call	_Wait_N_Seconds
  4998  00D458  D000               	goto	l4906
  4999  00D45A                     l4906:
  5000                           
  5001                           ;Lab7.c: 430: }
  5002                           ;Lab7.c: 431: Set_NSLT(1);
  5003  00D45A  0E01               	movlw	1
  5004  00D45C  EC96  F064         	call	_Set_NSLT
  5005  00D460  0012               	return		;funcret
  5006  00D462                     __end_of_Day_Mode:
  5007                           	opt stack 0
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodl	equ	0xFF3
  5013                           intcon2	equ	0xFF1
  5014                           postinc0	equ	0xFEE
  5015                           wreg	equ	0xFE8
  5016                           postdec1	equ	0xFE5
  5017                           fsr1l	equ	0xFE1
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _Wait_N_Seconds *****************
  5021 ;; Defined at:
  5022 ;;		line 263 in file "Lab7.c"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;  seconds         1    wreg     unsigned char 
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;  seconds         1  103[COMRAM] unsigned char 
  5027 ;;  I               1  104[COMRAM] unsigned char 
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:        2 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    9
  5044 ;; This function calls:
  5045 ;;		_Wait_One_Second
  5046 ;;		_update_LCD_count
  5047 ;; This function is called by:
  5048 ;;		_Night_Mode
  5049 ;;		_Day_Mode
  5050 ;; This function uses a non-reentrant model
  5051 ;;
  5052                           
  5053                           	psect	text19
  5054  00C656                     __ptext19:
  5055                           	opt stack 0
  5056  00C656                     _Wait_N_Seconds:
  5057                           	opt stack 20
  5058                           
  5059                           ;incstack = 0
  5060                           ;Wait_N_Seconds@seconds stored from wreg
  5061  00C656  6E68               	movwf	Wait_N_Seconds@seconds,c
  5062                           
  5063                           ;Lab7.c: 265: char I;
  5064                           ;Lab7.c: 266: for (I = seconds; I> 0; I--)
  5065  00C658  C068  F069         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  5066  00C65C                     l4676:
  5067  00C65C  5069               	movf	Wait_N_Seconds@I,w,c
  5068  00C65E  B4D8               	btfsc	status,2,c
  5069  00C660  D00B               	goto	l4686
  5070  00C662  D001               	goto	l4680
  5071  00C664  D009               	goto	l4686
  5072  00C666                     l4680:
  5073                           
  5074                           ;Lab7.c: 267: {
  5075                           ;Lab7.c: 268: update_LCD_count(direction, I);
  5076  00C666  C069  F03A         	movff	Wait_N_Seconds@I,update_LCD_count@count
  5077  00C66A  507E               	movf	_direction,w,c
  5078  00C66C  ECC5  F06F         	call	_update_LCD_count
  5079                           
  5080                           ;Lab7.c: 269: Wait_One_Second();
  5081  00C670  EC6A  F066         	call	_Wait_One_Second	;wreg free
  5082  00C674  0669               	decf	Wait_N_Seconds@I,f,c
  5083  00C676  D7F2               	goto	l4676
  5084  00C678                     l4686:
  5085                           
  5086                           ;Lab7.c: 271: }
  5087                           ;Lab7.c: 272: update_LCD_count(direction, 0);
  5088  00C678  0E00               	movlw	0
  5089  00C67A  6E3A               	movwf	update_LCD_count@count,c
  5090  00C67C  507E               	movf	_direction,w,c
  5091  00C67E  ECC5  F06F         	call	_update_LCD_count
  5092  00C682  0012               	return		;funcret
  5093  00C684                     __end_of_Wait_N_Seconds:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodl	equ	0xFF3
  5100                           intcon2	equ	0xFF1
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postdec1	equ	0xFE5
  5104                           fsr1l	equ	0xFE1
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _update_LCD_count *****************
  5108 ;; Defined at:
  5109 ;;		line 568 in file "Lab7.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  direction       1    wreg     unsigned char 
  5112 ;;  count           1   57[COMRAM] unsigned char 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  direction       1   58[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;		None               void
  5117 ;; Registers used:
  5118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5124 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;Total ram usage:        2 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    7
  5131 ;; This function calls:
  5132 ;;		___awdiv
  5133 ;;		___awmod
  5134 ;;		_drawtext
  5135 ;; This function is called by:
  5136 ;;		_Wait_N_Seconds
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text20
  5141  00DF8A                     __ptext20:
  5142                           	opt stack 0
  5143  00DF8A                     _update_LCD_count:
  5144                           	opt stack 21
  5145                           
  5146                           ;incstack = 0
  5147                           ;update_LCD_count@direction stored from wreg
  5148  00DF8A  6E3B               	movwf	update_LCD_count@direction,c
  5149                           
  5150                           ;Lab7.c: 569: switch (direction)
  5151  00DF8C  D0B6               	goto	l4546
  5152  00DF8E                     l4528:
  5153                           
  5154                           ;Lab7.c: 572: NS_Count[0] = count/10 + '0';
  5155  00DF8E  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5156  00DF92  6A08               	clrf	___awdiv@dividend+1,c
  5157  00DF94  0E00               	movlw	0
  5158  00DF96  6E0A               	movwf	___awdiv@divisor+1,c
  5159  00DF98  0E0A               	movlw	10
  5160  00DF9A  6E09               	movwf	___awdiv@divisor,c
  5161  00DF9C  EC09  F068         	call	___awdiv	;wreg free
  5162  00DFA0  5007               	movf	?___awdiv,w,c
  5163  00DFA2  0F30               	addlw	48
  5164  00DFA4  0100               	movlb	0	; () banked
  5165  00DFA6  6F96               	movwf	_NS_Count& (0+255),b
  5166                           
  5167                           ;Lab7.c: 573: NS_Count[1] = count%10 + '0';
  5168  00DFA8  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5169  00DFAC  6A02               	clrf	___awmod@dividend+1,c
  5170  00DFAE  0E00               	movlw	0
  5171  00DFB0  6E04               	movwf	___awmod@divisor+1,c
  5172  00DFB2  0E0A               	movlw	10
  5173  00DFB4  6E03               	movwf	___awmod@divisor,c
  5174  00DFB6  EC29  F066         	call	___awmod	;wreg free
  5175  00DFBA  5001               	movf	?___awmod,w,c
  5176  00DFBC  0F30               	addlw	48
  5177  00DFBE  0100               	movlb	0	; () banked
  5178  00DFC0  6F97               	movwf	(_NS_Count+1)& (0+255),b
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;Lab7.c: 574: drawtext(100, 20 + 10, NS_Count, 0x001F, 0x0000, 2);
  5182  00DFC2  0E1E               	movlw	30
  5183  00DFC4  6E29               	movwf	drawtext@y,c
  5184  00DFC6  0E96               	movlw	low _NS_Count
  5185  00DFC8  6E2A               	movwf	drawtext@_text,c
  5186  00DFCA  0E00               	movlw	high _NS_Count
  5187  00DFCC  6E2B               	movwf	drawtext@_text+1,c
  5188  00DFCE  0E00               	movlw	0
  5189  00DFD0  6E2D               	movwf	drawtext@color+1,c
  5190  00DFD2  0E1F               	movlw	31
  5191  00DFD4  6E2C               	movwf	drawtext@color,c
  5192  00DFD6  0E00               	movlw	0
  5193  00DFD8  6E2F               	movwf	drawtext@bg+1,c
  5194  00DFDA  0E00               	movlw	0
  5195  00DFDC  6E2E               	movwf	drawtext@bg,c
  5196  00DFDE  0E02               	movlw	2
  5197  00DFE0  6E30               	movwf	drawtext@size,c
  5198  00DFE2  0E64               	movlw	100
  5199  00DFE4  EC10  F06B         	call	_drawtext
  5200                           
  5201                           ;Lab7.c: 575: break;
  5202  00DFE8  D096               	goto	l496
  5203  00DFEA                     l4532:
  5204                           
  5205                           ;Lab7.c: 578: NSLT_Count[0] = count/10 + '0';
  5206  00DFEA  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5207  00DFEE  6A08               	clrf	___awdiv@dividend+1,c
  5208  00DFF0  0E00               	movlw	0
  5209  00DFF2  6E0A               	movwf	___awdiv@divisor+1,c
  5210  00DFF4  0E0A               	movlw	10
  5211  00DFF6  6E09               	movwf	___awdiv@divisor,c
  5212  00DFF8  EC09  F068         	call	___awdiv	;wreg free
  5213  00DFFC  5007               	movf	?___awdiv,w,c
  5214  00DFFE  0F30               	addlw	48
  5215  00E000  0100               	movlb	0	; () banked
  5216  00E002  6F93               	movwf	_NSLT_Count& (0+255),b
  5217                           
  5218                           ;Lab7.c: 579: NSLT_Count[1] = count%10 + '0';
  5219  00E004  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5220  00E008  6A02               	clrf	___awmod@dividend+1,c
  5221  00E00A  0E00               	movlw	0
  5222  00E00C  6E04               	movwf	___awmod@divisor+1,c
  5223  00E00E  0E0A               	movlw	10
  5224  00E010  6E03               	movwf	___awmod@divisor,c
  5225  00E012  EC29  F066         	call	___awmod	;wreg free
  5226  00E016  5001               	movf	?___awmod,w,c
  5227  00E018  0F30               	addlw	48
  5228  00E01A  0100               	movlb	0	; () banked
  5229  00E01C  6F94               	movwf	(_NSLT_Count+1)& (0+255),b
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;Lab7.c: 580: drawtext(100, 50 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5233  00E01E  0E3C               	movlw	60
  5234  00E020  6E29               	movwf	drawtext@y,c
  5235  00E022  0E93               	movlw	low _NSLT_Count
  5236  00E024  6E2A               	movwf	drawtext@_text,c
  5237  00E026  0E00               	movlw	high _NSLT_Count
  5238  00E028  6E2B               	movwf	drawtext@_text+1,c
  5239  00E02A  0EF8               	movlw	248
  5240  00E02C  6E2D               	movwf	drawtext@color+1,c
  5241  00E02E  0E1F               	movlw	31
  5242  00E030  6E2C               	movwf	drawtext@color,c
  5243  00E032  0E00               	movlw	0
  5244  00E034  6E2F               	movwf	drawtext@bg+1,c
  5245  00E036  0E00               	movlw	0
  5246  00E038  6E2E               	movwf	drawtext@bg,c
  5247  00E03A  0E02               	movlw	2
  5248  00E03C  6E30               	movwf	drawtext@size,c
  5249  00E03E  0E64               	movlw	100
  5250  00E040  EC10  F06B         	call	_drawtext
  5251                           
  5252                           ;Lab7.c: 581: break;
  5253  00E044  D068               	goto	l496
  5254  00E046                     l4536:
  5255                           
  5256                           ;Lab7.c: 584: EW_Count[0] = count/10 + '0';
  5257  00E046  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5258  00E04A  6A08               	clrf	___awdiv@dividend+1,c
  5259  00E04C  0E00               	movlw	0
  5260  00E04E  6E0A               	movwf	___awdiv@divisor+1,c
  5261  00E050  0E0A               	movlw	10
  5262  00E052  6E09               	movwf	___awdiv@divisor,c
  5263  00E054  EC09  F068         	call	___awdiv	;wreg free
  5264  00E058  5007               	movf	?___awdiv,w,c
  5265  00E05A  0F30               	addlw	48
  5266  00E05C  0100               	movlb	0	; () banked
  5267  00E05E  6F90               	movwf	_EW_Count& (0+255),b
  5268                           
  5269                           ;Lab7.c: 585: EW_Count[1] = count%10 + '0';
  5270  00E060  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5271  00E064  6A02               	clrf	___awmod@dividend+1,c
  5272  00E066  0E00               	movlw	0
  5273  00E068  6E04               	movwf	___awmod@divisor+1,c
  5274  00E06A  0E0A               	movlw	10
  5275  00E06C  6E03               	movwf	___awmod@divisor,c
  5276  00E06E  EC29  F066         	call	___awmod	;wreg free
  5277  00E072  5001               	movf	?___awmod,w,c
  5278  00E074  0F30               	addlw	48
  5279  00E076  0100               	movlb	0	; () banked
  5280  00E078  6F91               	movwf	(_EW_Count+1)& (0+255),b
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;Lab7.c: 586: drawtext(100, 80 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5284  00E07A  0E5A               	movlw	90
  5285  00E07C  6E29               	movwf	drawtext@y,c
  5286  00E07E  0E90               	movlw	low _EW_Count
  5287  00E080  6E2A               	movwf	drawtext@_text,c
  5288  00E082  0E00               	movlw	high _EW_Count
  5289  00E084  6E2B               	movwf	drawtext@_text+1,c
  5290  00E086  0E07               	movlw	7
  5291  00E088  6E2D               	movwf	drawtext@color+1,c
  5292  00E08A  682C               	setf	drawtext@color,c
  5293  00E08C  0E00               	movlw	0
  5294  00E08E  6E2F               	movwf	drawtext@bg+1,c
  5295  00E090  0E00               	movlw	0
  5296  00E092  6E2E               	movwf	drawtext@bg,c
  5297  00E094  0E02               	movlw	2
  5298  00E096  6E30               	movwf	drawtext@size,c
  5299  00E098  0E64               	movlw	100
  5300  00E09A  EC10  F06B         	call	_drawtext
  5301                           
  5302                           ;Lab7.c: 587: break;
  5303  00E09E  D03B               	goto	l496
  5304  00E0A0                     l4540:
  5305                           
  5306                           ;Lab7.c: 590: EWLT_Count[0] = count/10 + '0';
  5307  00E0A0  C03A  F007         	movff	update_LCD_count@count,___awdiv@dividend
  5308  00E0A4  6A08               	clrf	___awdiv@dividend+1,c
  5309  00E0A6  0E00               	movlw	0
  5310  00E0A8  6E0A               	movwf	___awdiv@divisor+1,c
  5311  00E0AA  0E0A               	movlw	10
  5312  00E0AC  6E09               	movwf	___awdiv@divisor,c
  5313  00E0AE  EC09  F068         	call	___awdiv	;wreg free
  5314  00E0B2  5007               	movf	?___awdiv,w,c
  5315  00E0B4  0F30               	addlw	48
  5316  00E0B6  0100               	movlb	0	; () banked
  5317  00E0B8  6F8D               	movwf	_EWLT_Count& (0+255),b
  5318                           
  5319                           ;Lab7.c: 591: EWLT_Count[1] = count%10 + '0';
  5320  00E0BA  C03A  F001         	movff	update_LCD_count@count,___awmod@dividend
  5321  00E0BE  6A02               	clrf	___awmod@dividend+1,c
  5322  00E0C0  0E00               	movlw	0
  5323  00E0C2  6E04               	movwf	___awmod@divisor+1,c
  5324  00E0C4  0E0A               	movlw	10
  5325  00E0C6  6E03               	movwf	___awmod@divisor,c
  5326  00E0C8  EC29  F066         	call	___awmod	;wreg free
  5327  00E0CC  5001               	movf	?___awmod,w,c
  5328  00E0CE  0F30               	addlw	48
  5329  00E0D0  0100               	movlb	0	; () banked
  5330  00E0D2  6F8E               	movwf	(_EWLT_Count+1)& (0+255),b
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;Lab7.c: 592: drawtext(100, 110 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5334  00E0D4  0E78               	movlw	120
  5335  00E0D6  6E29               	movwf	drawtext@y,c
  5336  00E0D8  0E8D               	movlw	low _EWLT_Count
  5337  00E0DA  6E2A               	movwf	drawtext@_text,c
  5338  00E0DC  0E00               	movlw	high _EWLT_Count
  5339  00E0DE  6E2B               	movwf	drawtext@_text+1,c
  5340  00E0E0  0EFF               	movlw	255
  5341  00E0E2  6E2D               	movwf	drawtext@color+1,c
  5342  00E0E4  682C               	setf	drawtext@color,c
  5343  00E0E6  0E00               	movlw	0
  5344  00E0E8  6E2F               	movwf	drawtext@bg+1,c
  5345  00E0EA  0E00               	movlw	0
  5346  00E0EC  6E2E               	movwf	drawtext@bg,c
  5347  00E0EE  0E02               	movlw	2
  5348  00E0F0  6E30               	movwf	drawtext@size,c
  5349  00E0F2  0E64               	movlw	100
  5350  00E0F4  EC10  F06B         	call	_drawtext
  5351                           
  5352                           ;Lab7.c: 594: }
  5353                           
  5354                           ;Lab7.c: 593: break;
  5355  00E0F8  D00E               	goto	l496
  5356  00E0FA                     l4546:
  5357  00E0FA  503B               	movf	update_LCD_count@direction,w,c
  5358                           
  5359                           ; Switch size 1, requested type "space"
  5360                           ; Number of cases is 4, Range of values is 0 to 3
  5361                           ; switch strategies available:
  5362                           ; Name         Instructions Cycles
  5363                           ; simple_byte           13     7 (average)
  5364                           ;	Chosen strategy is simple_byte
  5365  00E0FC  0A00               	xorlw	0	; case 0
  5366  00E0FE  B4D8               	btfsc	status,2,c
  5367  00E100  D746               	goto	l4528
  5368  00E102  0A01               	xorlw	1	; case 1
  5369  00E104  B4D8               	btfsc	status,2,c
  5370  00E106  D771               	goto	l4532
  5371  00E108  0A03               	xorlw	3	; case 2
  5372  00E10A  B4D8               	btfsc	status,2,c
  5373  00E10C  D79C               	goto	l4536
  5374  00E10E  0A01               	xorlw	1	; case 3
  5375  00E110  B4D8               	btfsc	status,2,c
  5376  00E112  D7C6               	goto	l4540
  5377  00E114  D000               	goto	l496
  5378  00E116                     l496:
  5379  00E116  0012               	return		;funcret
  5380  00E118                     __end_of_update_LCD_count:
  5381                           	opt stack 0
  5382                           tblptru	equ	0xFF8
  5383                           tblptrh	equ	0xFF7
  5384                           tblptrl	equ	0xFF6
  5385                           tablat	equ	0xFF5
  5386                           prodl	equ	0xFF3
  5387                           intcon2	equ	0xFF1
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           fsr1l	equ	0xFE1
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function _Wait_One_Second *****************
  5395 ;; Defined at:
  5396 ;;		line 239 in file "Lab7.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;		None               void
  5403 ;; Registers used:
  5404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    8
  5417 ;; This function calls:
  5418 ;;		_Wait_Half_Second
  5419 ;;		_drawtext
  5420 ;;		_strcpy
  5421 ;;		_update_LCD_misc
  5422 ;; This function is called by:
  5423 ;;		_Wait_N_Seconds
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text21
  5428  00CCD4                     __ptext21:
  5429                           	opt stack 0
  5430  00CCD4                     _Wait_One_Second:
  5431                           	opt stack 20
  5432                           
  5433                           ;Lab7.c: 241: PORTDbits.RD7 = 1;
  5434                           
  5435                           ;incstack = 0
  5436  00CCD4  8E83               	bsf	3971,7,c	;volatile
  5437                           
  5438                           ;Lab7.c: 242: strcpy(txt,"*");
  5439  00CCD6  C075  F001         	movff	_txt,strcpy@to
  5440  00CCDA  C076  F002         	movff	_txt+1,strcpy@to+1
  5441  00CCDE  0EFD               	movlw	low STR_1
  5442  00CCE0  6E03               	movwf	strcpy@from,c
  5443  00CCE2  0EFF               	movlw	high STR_1
  5444  00CCE4  6E04               	movwf	strcpy@from+1,c
  5445  00CCE6  EC5A  F063         	call	_strcpy	;wreg free
  5446                           
  5447                           ;Lab7.c: 243: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5448  00CCEA  0E0A               	movlw	10
  5449  00CCEC  6E29               	movwf	drawtext@y,c
  5450  00CCEE  C075  F02A         	movff	_txt,drawtext@_text
  5451  00CCF2  C076  F02B         	movff	_txt+1,drawtext@_text+1
  5452  00CCF6  0EFF               	movlw	255
  5453  00CCF8  6E2D               	movwf	drawtext@color+1,c
  5454  00CCFA  682C               	setf	drawtext@color,c
  5455  00CCFC  0E00               	movlw	0
  5456  00CCFE  6E2F               	movwf	drawtext@bg+1,c
  5457  00CD00  0E00               	movlw	0
  5458  00CD02  6E2E               	movwf	drawtext@bg,c
  5459  00CD04  0E01               	movlw	1
  5460  00CD06  6E30               	movwf	drawtext@size,c
  5461  00CD08  0E78               	movlw	120
  5462  00CD0A  EC10  F06B         	call	_drawtext
  5463                           
  5464                           ;Lab7.c: 244: Wait_Half_Second();
  5465  00CD0E  ECAB  F062         	call	_Wait_Half_Second	;wreg free
  5466                           
  5467                           ;Lab7.c: 246: PORTDbits.RD7 = 0;
  5468  00CD12  9E83               	bcf	3971,7,c	;volatile
  5469                           
  5470                           ;Lab7.c: 247: strcpy(txt," ");
  5471  00CD14  C075  F001         	movff	_txt,strcpy@to
  5472  00CD18  C076  F002         	movff	_txt+1,strcpy@to+1
  5473  00CD1C  0EFB               	movlw	low STR_2
  5474  00CD1E  6E03               	movwf	strcpy@from,c
  5475  00CD20  0EFF               	movlw	high STR_2
  5476  00CD22  6E04               	movwf	strcpy@from+1,c
  5477  00CD24  EC5A  F063         	call	_strcpy	;wreg free
  5478                           
  5479                           ;Lab7.c: 248: drawtext(120,10,txt,0xFFFF,0x0000,1);
  5480  00CD28  0E0A               	movlw	10
  5481  00CD2A  6E29               	movwf	drawtext@y,c
  5482  00CD2C  C075  F02A         	movff	_txt,drawtext@_text
  5483  00CD30  C076  F02B         	movff	_txt+1,drawtext@_text+1
  5484  00CD34  0EFF               	movlw	255
  5485  00CD36  6E2D               	movwf	drawtext@color+1,c
  5486  00CD38  682C               	setf	drawtext@color,c
  5487  00CD3A  0E00               	movlw	0
  5488  00CD3C  6E2F               	movwf	drawtext@bg+1,c
  5489  00CD3E  0E00               	movlw	0
  5490  00CD40  6E2E               	movwf	drawtext@bg,c
  5491  00CD42  0E01               	movlw	1
  5492  00CD44  6E30               	movwf	drawtext@size,c
  5493  00CD46  0E78               	movlw	120
  5494  00CD48  EC10  F06B         	call	_drawtext
  5495                           
  5496                           ;Lab7.c: 249: Wait_Half_Second();
  5497  00CD4C  ECAB  F062         	call	_Wait_Half_Second	;wreg free
  5498                           
  5499                           ;Lab7.c: 250: update_LCD_misc();
  5500  00CD50  EC45  F072         	call	_update_LCD_misc	;wreg free
  5501  00CD54  0012               	return		;funcret
  5502  00CD56                     __end_of_Wait_One_Second:
  5503                           	opt stack 0
  5504                           tblptru	equ	0xFF8
  5505                           tblptrh	equ	0xFF7
  5506                           tblptrl	equ	0xFF6
  5507                           tablat	equ	0xFF5
  5508                           prodl	equ	0xFF3
  5509                           intcon2	equ	0xFF1
  5510                           postinc0	equ	0xFEE
  5511                           wreg	equ	0xFE8
  5512                           postdec1	equ	0xFE5
  5513                           fsr1l	equ	0xFE1
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _Set_NSLT *****************
  5517 ;; Defined at:
  5518 ;;		line 286 in file "Lab7.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;  color           1    wreg     unsigned char 
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  color           1   53[COMRAM] unsigned char 
  5523 ;; Return value:  Size  Location     Type
  5524 ;;		None               void
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/0
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5535 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;Total ram usage:        1 bytes
  5537 ;; Hardware stack levels used:    1
  5538 ;; Hardware stack levels required when called:    7
  5539 ;; This function calls:
  5540 ;;		_update_LCD_color
  5541 ;; This function is called by:
  5542 ;;		_Night_Mode
  5543 ;;		_Day_Mode
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           	psect	text22
  5548  00C92C                     __ptext22:
  5549                           	opt stack 0
  5550  00C92C                     _Set_NSLT:
  5551                           	opt stack 22
  5552                           
  5553                           ;incstack = 0
  5554                           ;Set_NSLT@color stored from wreg
  5555  00C92C  6E36               	movwf	Set_NSLT@color,c
  5556                           
  5557                           ;Lab7.c: 287: direction = 1;
  5558  00C92E  0E01               	movlw	1
  5559  00C930  6E7E               	movwf	_direction,c
  5560                           
  5561                           ;Lab7.c: 288: update_LCD_color(direction, color);
  5562  00C932  C036  F033         	movff	Set_NSLT@color,update_LCD_color@color
  5563  00C936  507E               	movf	_direction,w,c
  5564  00C938  EC57  F074         	call	_update_LCD_color
  5565                           
  5566                           ;Lab7.c: 289: switch(color){
  5567  00C93C  D00A               	goto	l4702
  5568  00C93E                     l426:
  5569  00C93E  9281               	bcf	3969,1,c	;volatile
  5570  00C940  D001               	goto	L1
  5571  00C942                     l428:
  5572  00C942  8281               	bsf	3969,1,c	;volatile
  5573  00C944                     L1:
  5574  00C944  9481               	bcf	3969,2,c	;volatile
  5575  00C946  D013               	goto	l431
  5576  00C948                     l429:
  5577  00C948  9281               	bcf	3969,1,c	;volatile
  5578  00C94A  D001               	goto	L2
  5579  00C94C                     l430:
  5580  00C94C  8281               	bsf	3969,1,c	;volatile
  5581  00C94E                     L2:
  5582  00C94E  8481               	bsf	3969,2,c	;volatile
  5583                           
  5584                           ;Lab7.c: 294: }
  5585  00C950  D00E               	goto	l431
  5586  00C952                     l4702:
  5587  00C952  5036               	movf	Set_NSLT@color,w,c
  5588                           
  5589                           ; Switch size 1, requested type "space"
  5590                           ; Number of cases is 4, Range of values is 0 to 3
  5591                           ; switch strategies available:
  5592                           ; Name         Instructions Cycles
  5593                           ; simple_byte           13     7 (average)
  5594                           ;	Chosen strategy is simple_byte
  5595  00C954  0A00               	xorlw	0	; case 0
  5596  00C956  B4D8               	btfsc	status,2,c
  5597  00C958  D7F2               	goto	l426
  5598  00C95A  0A01               	xorlw	1	; case 1
  5599  00C95C  B4D8               	btfsc	status,2,c
  5600  00C95E  D7F1               	goto	l428
  5601  00C960  0A03               	xorlw	3	; case 2
  5602  00C962  B4D8               	btfsc	status,2,c
  5603  00C964  D7F1               	goto	l429
  5604  00C966  0A01               	xorlw	1	; case 3
  5605  00C968  B4D8               	btfsc	status,2,c
  5606  00C96A  D7F0               	goto	l430
  5607  00C96C  D000               	goto	l431
  5608  00C96E                     l431:
  5609  00C96E  0012               	return		;funcret
  5610  00C970                     __end_of_Set_NSLT:
  5611                           	opt stack 0
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodl	equ	0xFF3
  5617                           intcon2	equ	0xFF1
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           postdec1	equ	0xFE5
  5621                           fsr1l	equ	0xFE1
  5622                           status	equ	0xFD8
  5623                           
  5624 ;; *************** function _Set_NS *****************
  5625 ;; Defined at:
  5626 ;;		line 276 in file "Lab7.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  color           1    wreg     unsigned char 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;  color           1   53[COMRAM] unsigned char 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;		None               void
  5633 ;; Registers used:
  5634 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;Total ram usage:        1 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:    7
  5647 ;; This function calls:
  5648 ;;		_update_LCD_color
  5649 ;; This function is called by:
  5650 ;;		_Night_Mode
  5651 ;;		_Day_Mode
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text23
  5656  00C8E8                     __ptext23:
  5657                           	opt stack 0
  5658  00C8E8                     _Set_NS:
  5659                           	opt stack 22
  5660                           
  5661                           ;incstack = 0
  5662                           ;Set_NS@color stored from wreg
  5663  00C8E8  6E36               	movwf	Set_NS@color,c
  5664                           
  5665                           ;Lab7.c: 277: direction = 0;
  5666  00C8EA  0E00               	movlw	0
  5667  00C8EC  6E7E               	movwf	_direction,c
  5668                           
  5669                           ;Lab7.c: 278: update_LCD_color(direction, color);
  5670  00C8EE  C036  F033         	movff	Set_NS@color,update_LCD_color@color
  5671  00C8F2  507E               	movf	_direction,w,c
  5672  00C8F4  EC57  F074         	call	_update_LCD_color
  5673                           
  5674                           ;Lab7.c: 279: switch(color){
  5675  00C8F8  D00A               	goto	l4694
  5676  00C8FA                     l417:
  5677  00C8FA  9A80               	bcf	3968,5,c	;volatile
  5678  00C8FC  D001               	goto	L3
  5679  00C8FE                     l419:
  5680  00C8FE  8A80               	bsf	3968,5,c	;volatile
  5681  00C900                     L3:
  5682  00C900  9081               	bcf	3969,0,c	;volatile
  5683  00C902  D013               	goto	l422
  5684  00C904                     l420:
  5685  00C904  9A80               	bcf	3968,5,c	;volatile
  5686  00C906  D001               	goto	L4
  5687  00C908                     l421:
  5688  00C908  8A80               	bsf	3968,5,c	;volatile
  5689  00C90A                     L4:
  5690  00C90A  8081               	bsf	3969,0,c	;volatile
  5691                           
  5692                           ;Lab7.c: 284: }
  5693  00C90C  D00E               	goto	l422
  5694  00C90E                     l4694:
  5695  00C90E  5036               	movf	Set_NS@color,w,c
  5696                           
  5697                           ; Switch size 1, requested type "space"
  5698                           ; Number of cases is 4, Range of values is 0 to 3
  5699                           ; switch strategies available:
  5700                           ; Name         Instructions Cycles
  5701                           ; simple_byte           13     7 (average)
  5702                           ;	Chosen strategy is simple_byte
  5703  00C910  0A00               	xorlw	0	; case 0
  5704  00C912  B4D8               	btfsc	status,2,c
  5705  00C914  D7F2               	goto	l417
  5706  00C916  0A01               	xorlw	1	; case 1
  5707  00C918  B4D8               	btfsc	status,2,c
  5708  00C91A  D7F1               	goto	l419
  5709  00C91C  0A03               	xorlw	3	; case 2
  5710  00C91E  B4D8               	btfsc	status,2,c
  5711  00C920  D7F1               	goto	l420
  5712  00C922  0A01               	xorlw	1	; case 3
  5713  00C924  B4D8               	btfsc	status,2,c
  5714  00C926  D7F0               	goto	l421
  5715  00C928  D000               	goto	l422
  5716  00C92A                     l422:
  5717  00C92A  0012               	return		;funcret
  5718  00C92C                     __end_of_Set_NS:
  5719                           	opt stack 0
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodl	equ	0xFF3
  5725                           intcon2	equ	0xFF1
  5726                           postinc0	equ	0xFEE
  5727                           wreg	equ	0xFE8
  5728                           postdec1	equ	0xFE5
  5729                           fsr1l	equ	0xFE1
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _Set_EWLT *****************
  5733 ;; Defined at:
  5734 ;;		line 306 in file "Lab7.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;  color           1    wreg     unsigned char 
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;  color           1   53[COMRAM] unsigned char 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;		None               void
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;Total ram usage:        1 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    7
  5755 ;; This function calls:
  5756 ;;		_update_LCD_color
  5757 ;; This function is called by:
  5758 ;;		_Night_Mode
  5759 ;;		_Day_Mode
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text24
  5764  00C8A4                     __ptext24:
  5765                           	opt stack 0
  5766  00C8A4                     _Set_EWLT:
  5767                           	opt stack 22
  5768                           
  5769                           ;incstack = 0
  5770                           ;Set_EWLT@color stored from wreg
  5771  00C8A4  6E36               	movwf	Set_EWLT@color,c
  5772                           
  5773                           ;Lab7.c: 307: direction = 3;
  5774  00C8A6  0E03               	movlw	3
  5775  00C8A8  6E7E               	movwf	_direction,c
  5776                           
  5777                           ;Lab7.c: 308: update_LCD_color(direction, color);
  5778  00C8AA  C036  F033         	movff	Set_EWLT@color,update_LCD_color@color
  5779  00C8AE  507E               	movf	_direction,w,c
  5780  00C8B0  EC57  F074         	call	_update_LCD_color
  5781                           
  5782                           ;Lab7.c: 309: switch(color){
  5783  00C8B4  D00A               	goto	l4718
  5784  00C8B6                     l444:
  5785  00C8B6  9084               	bcf	3972,0,c	;volatile
  5786  00C8B8  D001               	goto	L5
  5787  00C8BA                     l446:
  5788  00C8BA  8084               	bsf	3972,0,c	;volatile
  5789  00C8BC                     L5:
  5790  00C8BC  9484               	bcf	3972,2,c	;volatile
  5791  00C8BE  D013               	goto	l449
  5792  00C8C0                     l447:
  5793  00C8C0  9084               	bcf	3972,0,c	;volatile
  5794  00C8C2  D001               	goto	L6
  5795  00C8C4                     l448:
  5796  00C8C4  8084               	bsf	3972,0,c	;volatile
  5797  00C8C6                     L6:
  5798  00C8C6  8484               	bsf	3972,2,c	;volatile
  5799                           
  5800                           ;Lab7.c: 314: }
  5801  00C8C8  D00E               	goto	l449
  5802  00C8CA                     l4718:
  5803  00C8CA  5036               	movf	Set_EWLT@color,w,c
  5804                           
  5805                           ; Switch size 1, requested type "space"
  5806                           ; Number of cases is 4, Range of values is 0 to 3
  5807                           ; switch strategies available:
  5808                           ; Name         Instructions Cycles
  5809                           ; simple_byte           13     7 (average)
  5810                           ;	Chosen strategy is simple_byte
  5811  00C8CC  0A00               	xorlw	0	; case 0
  5812  00C8CE  B4D8               	btfsc	status,2,c
  5813  00C8D0  D7F2               	goto	l444
  5814  00C8D2  0A01               	xorlw	1	; case 1
  5815  00C8D4  B4D8               	btfsc	status,2,c
  5816  00C8D6  D7F1               	goto	l446
  5817  00C8D8  0A03               	xorlw	3	; case 2
  5818  00C8DA  B4D8               	btfsc	status,2,c
  5819  00C8DC  D7F1               	goto	l447
  5820  00C8DE  0A01               	xorlw	1	; case 3
  5821  00C8E0  B4D8               	btfsc	status,2,c
  5822  00C8E2  D7F0               	goto	l448
  5823  00C8E4  D000               	goto	l449
  5824  00C8E6                     l449:
  5825  00C8E6  0012               	return		;funcret
  5826  00C8E8                     __end_of_Set_EWLT:
  5827                           	opt stack 0
  5828                           tblptru	equ	0xFF8
  5829                           tblptrh	equ	0xFF7
  5830                           tblptrl	equ	0xFF6
  5831                           tablat	equ	0xFF5
  5832                           prodl	equ	0xFF3
  5833                           intcon2	equ	0xFF1
  5834                           postinc0	equ	0xFEE
  5835                           wreg	equ	0xFE8
  5836                           postdec1	equ	0xFE5
  5837                           fsr1l	equ	0xFE1
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _Set_EW *****************
  5841 ;; Defined at:
  5842 ;;		line 296 in file "Lab7.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  color           1    wreg     unsigned char 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;  color           1   53[COMRAM] unsigned char 
  5847 ;; Return value:  Size  Location     Type
  5848 ;;		None               void
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;Total ram usage:        1 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    7
  5863 ;; This function calls:
  5864 ;;		_update_LCD_color
  5865 ;; This function is called by:
  5866 ;;		_Night_Mode
  5867 ;;		_Day_Mode
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text25
  5872  00C860                     __ptext25:
  5873                           	opt stack 0
  5874  00C860                     _Set_EW:
  5875                           	opt stack 22
  5876                           
  5877                           ;incstack = 0
  5878                           ;Set_EW@color stored from wreg
  5879  00C860  6E36               	movwf	Set_EW@color,c
  5880                           
  5881                           ;Lab7.c: 297: direction = 2;
  5882  00C862  0E02               	movlw	2
  5883  00C864  6E7E               	movwf	_direction,c
  5884                           
  5885                           ;Lab7.c: 298: update_LCD_color(direction, color);
  5886  00C866  C036  F033         	movff	Set_EW@color,update_LCD_color@color
  5887  00C86A  507E               	movf	_direction,w,c
  5888  00C86C  EC57  F074         	call	_update_LCD_color
  5889                           
  5890                           ;Lab7.c: 299: switch(color){
  5891  00C870  D00A               	goto	l4710
  5892  00C872                     l435:
  5893  00C872  9881               	bcf	3969,4,c	;volatile
  5894  00C874  D001               	goto	L7
  5895  00C876                     l437:
  5896  00C876  8881               	bsf	3969,4,c	;volatile
  5897  00C878                     L7:
  5898  00C878  9A81               	bcf	3969,5,c	;volatile
  5899  00C87A  D013               	goto	l440
  5900  00C87C                     l438:
  5901  00C87C  9881               	bcf	3969,4,c	;volatile
  5902  00C87E  D001               	goto	L8
  5903  00C880                     l439:
  5904  00C880  8881               	bsf	3969,4,c	;volatile
  5905  00C882                     L8:
  5906  00C882  8A81               	bsf	3969,5,c	;volatile
  5907                           
  5908                           ;Lab7.c: 304: }
  5909  00C884  D00E               	goto	l440
  5910  00C886                     l4710:
  5911  00C886  5036               	movf	Set_EW@color,w,c
  5912                           
  5913                           ; Switch size 1, requested type "space"
  5914                           ; Number of cases is 4, Range of values is 0 to 3
  5915                           ; switch strategies available:
  5916                           ; Name         Instructions Cycles
  5917                           ; simple_byte           13     7 (average)
  5918                           ;	Chosen strategy is simple_byte
  5919  00C888  0A00               	xorlw	0	; case 0
  5920  00C88A  B4D8               	btfsc	status,2,c
  5921  00C88C  D7F2               	goto	l435
  5922  00C88E  0A01               	xorlw	1	; case 1
  5923  00C890  B4D8               	btfsc	status,2,c
  5924  00C892  D7F1               	goto	l437
  5925  00C894  0A03               	xorlw	3	; case 2
  5926  00C896  B4D8               	btfsc	status,2,c
  5927  00C898  D7F1               	goto	l438
  5928  00C89A  0A01               	xorlw	1	; case 3
  5929  00C89C  B4D8               	btfsc	status,2,c
  5930  00C89E  D7F0               	goto	l439
  5931  00C8A0  D000               	goto	l440
  5932  00C8A2                     l440:
  5933  00C8A2  0012               	return		;funcret
  5934  00C8A4                     __end_of_Set_EW:
  5935                           	opt stack 0
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodl	equ	0xFF3
  5941                           intcon2	equ	0xFF1
  5942                           postinc0	equ	0xFEE
  5943                           wreg	equ	0xFE8
  5944                           postdec1	equ	0xFE5
  5945                           fsr1l	equ	0xFE1
  5946                           status	equ	0xFD8
  5947                           
  5948 ;; *************** function _update_LCD_color *****************
  5949 ;; Defined at:
  5950 ;;		line 434 in file "Lab7.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  direction       1    wreg     unsigned char 
  5953 ;;  color           1   50[COMRAM] unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  direction       1   51[COMRAM] unsigned char 
  5956 ;;  Circle_Y        1   52[COMRAM] unsigned char 
  5957 ;; Return value:  Size  Location     Type
  5958 ;;		None               void
  5959 ;; Registers used:
  5960 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5961 ;; Tracked objects:
  5962 ;;		On entry : 0/0
  5963 ;;		On exit  : 0/0
  5964 ;;		Unchanged: 0/0
  5965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5966 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;Total ram usage:        3 bytes
  5971 ;; Hardware stack levels used:    1
  5972 ;; Hardware stack levels required when called:    6
  5973 ;; This function calls:
  5974 ;;		_drawCircle
  5975 ;;		_fillCircle
  5976 ;; This function is called by:
  5977 ;;		_Set_NS
  5978 ;;		_Set_NSLT
  5979 ;;		_Set_EW
  5980 ;;		_Set_EWLT
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text26
  5985  00E8AE                     __ptext26:
  5986                           	opt stack 0
  5987  00E8AE                     _update_LCD_color:
  5988                           	opt stack 22
  5989                           
  5990                           ;incstack = 0
  5991                           ;update_LCD_color@direction stored from wreg
  5992  00E8AE  6E34               	movwf	update_LCD_color@direction,c
  5993                           
  5994                           ;Lab7.c: 435: char Circle_Y;
  5995                           ;Lab7.c: 436: Circle_Y = 20 + 15 + direction * 30;
  5996  00E8B0  5034               	movf	update_LCD_color@direction,w,c
  5997  00E8B2  0D1E               	mullw	30
  5998  00E8B4  50F3               	movf	prodl,w,c
  5999  00E8B6  0F23               	addlw	35
  6000  00E8B8  6E35               	movwf	update_LCD_color@Circle_Y,c
  6001                           
  6002                           ;Lab7.c: 438: if (color == 0){
  6003  00E8BA  5033               	movf	update_LCD_color@color,w,c
  6004  00E8BC  A4D8               	btfss	status,2,c
  6005  00E8BE  D067               	goto	l4554
  6006                           
  6007                           ;Lab7.c: 440: fillCircle(40, Circle_Y, 7, 0x0000);
  6008  00E8C0  0E00               	movlw	0
  6009  00E8C2  6E2C               	movwf	fillCircle@x0+1,c
  6010  00E8C4  0E28               	movlw	40
  6011  00E8C6  6E2B               	movwf	fillCircle@x0,c
  6012  00E8C8  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6013  00E8CC  6A2E               	clrf	fillCircle@y0+1,c
  6014  00E8CE  0E00               	movlw	0
  6015  00E8D0  6E30               	movwf	fillCircle@r+1,c
  6016  00E8D2  0E07               	movlw	7
  6017  00E8D4  6E2F               	movwf	fillCircle@r,c
  6018  00E8D6  0E00               	movlw	0
  6019  00E8D8  6E32               	movwf	fillCircle@color+1,c
  6020  00E8DA  0E00               	movlw	0
  6021  00E8DC  6E31               	movwf	fillCircle@color,c
  6022  00E8DE  EC04  F065         	call	_fillCircle	;wreg free
  6023                           
  6024                           ;Lab7.c: 441: fillCircle(60, Circle_Y, 7, 0x0000);
  6025  00E8E2  0E00               	movlw	0
  6026  00E8E4  6E2C               	movwf	fillCircle@x0+1,c
  6027  00E8E6  0E3C               	movlw	60
  6028  00E8E8  6E2B               	movwf	fillCircle@x0,c
  6029  00E8EA  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6030  00E8EE  6A2E               	clrf	fillCircle@y0+1,c
  6031  00E8F0  0E00               	movlw	0
  6032  00E8F2  6E30               	movwf	fillCircle@r+1,c
  6033  00E8F4  0E07               	movlw	7
  6034  00E8F6  6E2F               	movwf	fillCircle@r,c
  6035  00E8F8  0E00               	movlw	0
  6036  00E8FA  6E32               	movwf	fillCircle@color+1,c
  6037  00E8FC  0E00               	movlw	0
  6038  00E8FE  6E31               	movwf	fillCircle@color,c
  6039  00E900  EC04  F065         	call	_fillCircle	;wreg free
  6040                           
  6041                           ;Lab7.c: 442: fillCircle(80, Circle_Y, 7, 0x0000);
  6042  00E904  0E00               	movlw	0
  6043  00E906  6E2C               	movwf	fillCircle@x0+1,c
  6044  00E908  0E50               	movlw	80
  6045  00E90A  6E2B               	movwf	fillCircle@x0,c
  6046  00E90C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6047  00E910  6A2E               	clrf	fillCircle@y0+1,c
  6048  00E912  0E00               	movlw	0
  6049  00E914  6E30               	movwf	fillCircle@r+1,c
  6050  00E916  0E07               	movlw	7
  6051  00E918  6E2F               	movwf	fillCircle@r,c
  6052  00E91A  0E00               	movlw	0
  6053  00E91C  6E32               	movwf	fillCircle@color+1,c
  6054  00E91E  0E00               	movlw	0
  6055  00E920  6E31               	movwf	fillCircle@color,c
  6056  00E922  EC04  F065         	call	_fillCircle	;wreg free
  6057                           
  6058                           ;Lab7.c: 444: drawCircle(40, Circle_Y, 7, 0xF800);
  6059  00E926  0E00               	movlw	0
  6060  00E928  6E0D               	movwf	drawCircle@x0+1,c
  6061  00E92A  0E28               	movlw	40
  6062  00E92C  6E0C               	movwf	drawCircle@x0,c
  6063  00E92E  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6064  00E932  6A0F               	clrf	drawCircle@y0+1,c
  6065  00E934  0E00               	movlw	0
  6066  00E936  6E11               	movwf	drawCircle@r+1,c
  6067  00E938  0E07               	movlw	7
  6068  00E93A  6E10               	movwf	drawCircle@r,c
  6069  00E93C  0EF8               	movlw	248
  6070  00E93E  6E13               	movwf	drawCircle@color+1,c
  6071  00E940  0E00               	movlw	0
  6072  00E942  6E12               	movwf	drawCircle@color,c
  6073  00E944  EC8C  F070         	call	_drawCircle	;wreg free
  6074                           
  6075                           ;Lab7.c: 445: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6076  00E948  0E00               	movlw	0
  6077  00E94A  6E0D               	movwf	drawCircle@x0+1,c
  6078  00E94C  0E3C               	movlw	60
  6079  00E94E  6E0C               	movwf	drawCircle@x0,c
  6080  00E950  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6081  00E954  6A0F               	clrf	drawCircle@y0+1,c
  6082  00E956  0E00               	movlw	0
  6083  00E958  6E11               	movwf	drawCircle@r+1,c
  6084  00E95A  0E07               	movlw	7
  6085  00E95C  6E10               	movwf	drawCircle@r,c
  6086  00E95E  0EFF               	movlw	255
  6087  00E960  6E13               	movwf	drawCircle@color+1,c
  6088  00E962  0EE0               	movlw	224
  6089  00E964  6E12               	movwf	drawCircle@color,c
  6090  00E966  EC8C  F070         	call	_drawCircle	;wreg free
  6091                           
  6092                           ;Lab7.c: 446: drawCircle(80, Circle_Y, 7, 0x07E0);
  6093  00E96A  0E00               	movlw	0
  6094  00E96C  6E0D               	movwf	drawCircle@x0+1,c
  6095  00E96E  0E50               	movlw	80
  6096  00E970  6E0C               	movwf	drawCircle@x0,c
  6097  00E972  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6098  00E976  6A0F               	clrf	drawCircle@y0+1,c
  6099  00E978  0E00               	movlw	0
  6100  00E97A  6E11               	movwf	drawCircle@r+1,c
  6101  00E97C  0E07               	movlw	7
  6102  00E97E  6E10               	movwf	drawCircle@r,c
  6103  00E980  0E07               	movlw	7
  6104  00E982  6E13               	movwf	drawCircle@color+1,c
  6105  00E984  0EE0               	movlw	224
  6106  00E986  6E12               	movwf	drawCircle@color,c
  6107  00E988  EC8C  F070         	call	_drawCircle	;wreg free
  6108  00E98C  D000               	goto	l4554
  6109  00E98E                     l4554:
  6110                           
  6111                           ;Lab7.c: 447: }
  6112                           ;Lab7.c: 449: if(color == 1){
  6113  00E98E  0433               	decf	update_LCD_color@color,w,c
  6114  00E990  A4D8               	btfss	status,2,c
  6115  00E992  D067               	goto	l4558
  6116                           
  6117                           ;Lab7.c: 451: fillCircle(40, Circle_Y, 7, 0xF800);
  6118  00E994  0E00               	movlw	0
  6119  00E996  6E2C               	movwf	fillCircle@x0+1,c
  6120  00E998  0E28               	movlw	40
  6121  00E99A  6E2B               	movwf	fillCircle@x0,c
  6122  00E99C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6123  00E9A0  6A2E               	clrf	fillCircle@y0+1,c
  6124  00E9A2  0E00               	movlw	0
  6125  00E9A4  6E30               	movwf	fillCircle@r+1,c
  6126  00E9A6  0E07               	movlw	7
  6127  00E9A8  6E2F               	movwf	fillCircle@r,c
  6128  00E9AA  0EF8               	movlw	248
  6129  00E9AC  6E32               	movwf	fillCircle@color+1,c
  6130  00E9AE  0E00               	movlw	0
  6131  00E9B0  6E31               	movwf	fillCircle@color,c
  6132  00E9B2  EC04  F065         	call	_fillCircle	;wreg free
  6133                           
  6134                           ;Lab7.c: 452: fillCircle(60, Circle_Y, 7, 0x0000);
  6135  00E9B6  0E00               	movlw	0
  6136  00E9B8  6E2C               	movwf	fillCircle@x0+1,c
  6137  00E9BA  0E3C               	movlw	60
  6138  00E9BC  6E2B               	movwf	fillCircle@x0,c
  6139  00E9BE  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6140  00E9C2  6A2E               	clrf	fillCircle@y0+1,c
  6141  00E9C4  0E00               	movlw	0
  6142  00E9C6  6E30               	movwf	fillCircle@r+1,c
  6143  00E9C8  0E07               	movlw	7
  6144  00E9CA  6E2F               	movwf	fillCircle@r,c
  6145  00E9CC  0E00               	movlw	0
  6146  00E9CE  6E32               	movwf	fillCircle@color+1,c
  6147  00E9D0  0E00               	movlw	0
  6148  00E9D2  6E31               	movwf	fillCircle@color,c
  6149  00E9D4  EC04  F065         	call	_fillCircle	;wreg free
  6150                           
  6151                           ;Lab7.c: 453: fillCircle(80, Circle_Y, 7, 0x0000);
  6152  00E9D8  0E00               	movlw	0
  6153  00E9DA  6E2C               	movwf	fillCircle@x0+1,c
  6154  00E9DC  0E50               	movlw	80
  6155  00E9DE  6E2B               	movwf	fillCircle@x0,c
  6156  00E9E0  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6157  00E9E4  6A2E               	clrf	fillCircle@y0+1,c
  6158  00E9E6  0E00               	movlw	0
  6159  00E9E8  6E30               	movwf	fillCircle@r+1,c
  6160  00E9EA  0E07               	movlw	7
  6161  00E9EC  6E2F               	movwf	fillCircle@r,c
  6162  00E9EE  0E00               	movlw	0
  6163  00E9F0  6E32               	movwf	fillCircle@color+1,c
  6164  00E9F2  0E00               	movlw	0
  6165  00E9F4  6E31               	movwf	fillCircle@color,c
  6166  00E9F6  EC04  F065         	call	_fillCircle	;wreg free
  6167                           
  6168                           ;Lab7.c: 455: drawCircle(40, Circle_Y, 7, 0xF800);
  6169  00E9FA  0E00               	movlw	0
  6170  00E9FC  6E0D               	movwf	drawCircle@x0+1,c
  6171  00E9FE  0E28               	movlw	40
  6172  00EA00  6E0C               	movwf	drawCircle@x0,c
  6173  00EA02  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6174  00EA06  6A0F               	clrf	drawCircle@y0+1,c
  6175  00EA08  0E00               	movlw	0
  6176  00EA0A  6E11               	movwf	drawCircle@r+1,c
  6177  00EA0C  0E07               	movlw	7
  6178  00EA0E  6E10               	movwf	drawCircle@r,c
  6179  00EA10  0EF8               	movlw	248
  6180  00EA12  6E13               	movwf	drawCircle@color+1,c
  6181  00EA14  0E00               	movlw	0
  6182  00EA16  6E12               	movwf	drawCircle@color,c
  6183  00EA18  EC8C  F070         	call	_drawCircle	;wreg free
  6184                           
  6185                           ;Lab7.c: 456: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6186  00EA1C  0E00               	movlw	0
  6187  00EA1E  6E0D               	movwf	drawCircle@x0+1,c
  6188  00EA20  0E3C               	movlw	60
  6189  00EA22  6E0C               	movwf	drawCircle@x0,c
  6190  00EA24  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6191  00EA28  6A0F               	clrf	drawCircle@y0+1,c
  6192  00EA2A  0E00               	movlw	0
  6193  00EA2C  6E11               	movwf	drawCircle@r+1,c
  6194  00EA2E  0E07               	movlw	7
  6195  00EA30  6E10               	movwf	drawCircle@r,c
  6196  00EA32  0EFF               	movlw	255
  6197  00EA34  6E13               	movwf	drawCircle@color+1,c
  6198  00EA36  0EE0               	movlw	224
  6199  00EA38  6E12               	movwf	drawCircle@color,c
  6200  00EA3A  EC8C  F070         	call	_drawCircle	;wreg free
  6201                           
  6202                           ;Lab7.c: 457: drawCircle(80, Circle_Y, 7, 0x07E0);
  6203  00EA3E  0E00               	movlw	0
  6204  00EA40  6E0D               	movwf	drawCircle@x0+1,c
  6205  00EA42  0E50               	movlw	80
  6206  00EA44  6E0C               	movwf	drawCircle@x0,c
  6207  00EA46  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6208  00EA4A  6A0F               	clrf	drawCircle@y0+1,c
  6209  00EA4C  0E00               	movlw	0
  6210  00EA4E  6E11               	movwf	drawCircle@r+1,c
  6211  00EA50  0E07               	movlw	7
  6212  00EA52  6E10               	movwf	drawCircle@r,c
  6213  00EA54  0E07               	movlw	7
  6214  00EA56  6E13               	movwf	drawCircle@color+1,c
  6215  00EA58  0EE0               	movlw	224
  6216  00EA5A  6E12               	movwf	drawCircle@color,c
  6217  00EA5C  EC8C  F070         	call	_drawCircle	;wreg free
  6218  00EA60  D000               	goto	l4558
  6219  00EA62                     l4558:
  6220                           
  6221                           ;Lab7.c: 458: }
  6222                           ;Lab7.c: 460: if(color == 3){
  6223  00EA62  0E03               	movlw	3
  6224  00EA64  1833               	xorwf	update_LCD_color@color,w,c
  6225  00EA66  A4D8               	btfss	status,2,c
  6226  00EA68  D067               	goto	l4562
  6227                           
  6228                           ;Lab7.c: 462: fillCircle(40, Circle_Y, 7, 0x0000);
  6229  00EA6A  0E00               	movlw	0
  6230  00EA6C  6E2C               	movwf	fillCircle@x0+1,c
  6231  00EA6E  0E28               	movlw	40
  6232  00EA70  6E2B               	movwf	fillCircle@x0,c
  6233  00EA72  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6234  00EA76  6A2E               	clrf	fillCircle@y0+1,c
  6235  00EA78  0E00               	movlw	0
  6236  00EA7A  6E30               	movwf	fillCircle@r+1,c
  6237  00EA7C  0E07               	movlw	7
  6238  00EA7E  6E2F               	movwf	fillCircle@r,c
  6239  00EA80  0E00               	movlw	0
  6240  00EA82  6E32               	movwf	fillCircle@color+1,c
  6241  00EA84  0E00               	movlw	0
  6242  00EA86  6E31               	movwf	fillCircle@color,c
  6243  00EA88  EC04  F065         	call	_fillCircle	;wreg free
  6244                           
  6245                           ;Lab7.c: 463: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6246  00EA8C  0E00               	movlw	0
  6247  00EA8E  6E2C               	movwf	fillCircle@x0+1,c
  6248  00EA90  0E3C               	movlw	60
  6249  00EA92  6E2B               	movwf	fillCircle@x0,c
  6250  00EA94  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6251  00EA98  6A2E               	clrf	fillCircle@y0+1,c
  6252  00EA9A  0E00               	movlw	0
  6253  00EA9C  6E30               	movwf	fillCircle@r+1,c
  6254  00EA9E  0E07               	movlw	7
  6255  00EAA0  6E2F               	movwf	fillCircle@r,c
  6256  00EAA2  0EFF               	movlw	255
  6257  00EAA4  6E32               	movwf	fillCircle@color+1,c
  6258  00EAA6  0EE0               	movlw	224
  6259  00EAA8  6E31               	movwf	fillCircle@color,c
  6260  00EAAA  EC04  F065         	call	_fillCircle	;wreg free
  6261                           
  6262                           ;Lab7.c: 464: fillCircle(80, Circle_Y, 7, 0x0000);
  6263  00EAAE  0E00               	movlw	0
  6264  00EAB0  6E2C               	movwf	fillCircle@x0+1,c
  6265  00EAB2  0E50               	movlw	80
  6266  00EAB4  6E2B               	movwf	fillCircle@x0,c
  6267  00EAB6  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6268  00EABA  6A2E               	clrf	fillCircle@y0+1,c
  6269  00EABC  0E00               	movlw	0
  6270  00EABE  6E30               	movwf	fillCircle@r+1,c
  6271  00EAC0  0E07               	movlw	7
  6272  00EAC2  6E2F               	movwf	fillCircle@r,c
  6273  00EAC4  0E00               	movlw	0
  6274  00EAC6  6E32               	movwf	fillCircle@color+1,c
  6275  00EAC8  0E00               	movlw	0
  6276  00EACA  6E31               	movwf	fillCircle@color,c
  6277  00EACC  EC04  F065         	call	_fillCircle	;wreg free
  6278                           
  6279                           ;Lab7.c: 466: drawCircle(40, Circle_Y, 7, 0xF800);
  6280  00EAD0  0E00               	movlw	0
  6281  00EAD2  6E0D               	movwf	drawCircle@x0+1,c
  6282  00EAD4  0E28               	movlw	40
  6283  00EAD6  6E0C               	movwf	drawCircle@x0,c
  6284  00EAD8  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6285  00EADC  6A0F               	clrf	drawCircle@y0+1,c
  6286  00EADE  0E00               	movlw	0
  6287  00EAE0  6E11               	movwf	drawCircle@r+1,c
  6288  00EAE2  0E07               	movlw	7
  6289  00EAE4  6E10               	movwf	drawCircle@r,c
  6290  00EAE6  0EF8               	movlw	248
  6291  00EAE8  6E13               	movwf	drawCircle@color+1,c
  6292  00EAEA  0E00               	movlw	0
  6293  00EAEC  6E12               	movwf	drawCircle@color,c
  6294  00EAEE  EC8C  F070         	call	_drawCircle	;wreg free
  6295                           
  6296                           ;Lab7.c: 467: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6297  00EAF2  0E00               	movlw	0
  6298  00EAF4  6E0D               	movwf	drawCircle@x0+1,c
  6299  00EAF6  0E3C               	movlw	60
  6300  00EAF8  6E0C               	movwf	drawCircle@x0,c
  6301  00EAFA  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6302  00EAFE  6A0F               	clrf	drawCircle@y0+1,c
  6303  00EB00  0E00               	movlw	0
  6304  00EB02  6E11               	movwf	drawCircle@r+1,c
  6305  00EB04  0E07               	movlw	7
  6306  00EB06  6E10               	movwf	drawCircle@r,c
  6307  00EB08  0EFF               	movlw	255
  6308  00EB0A  6E13               	movwf	drawCircle@color+1,c
  6309  00EB0C  0EE0               	movlw	224
  6310  00EB0E  6E12               	movwf	drawCircle@color,c
  6311  00EB10  EC8C  F070         	call	_drawCircle	;wreg free
  6312                           
  6313                           ;Lab7.c: 468: drawCircle(80, Circle_Y, 7, 0x07E0);
  6314  00EB14  0E00               	movlw	0
  6315  00EB16  6E0D               	movwf	drawCircle@x0+1,c
  6316  00EB18  0E50               	movlw	80
  6317  00EB1A  6E0C               	movwf	drawCircle@x0,c
  6318  00EB1C  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6319  00EB20  6A0F               	clrf	drawCircle@y0+1,c
  6320  00EB22  0E00               	movlw	0
  6321  00EB24  6E11               	movwf	drawCircle@r+1,c
  6322  00EB26  0E07               	movlw	7
  6323  00EB28  6E10               	movwf	drawCircle@r,c
  6324  00EB2A  0E07               	movlw	7
  6325  00EB2C  6E13               	movwf	drawCircle@color+1,c
  6326  00EB2E  0EE0               	movlw	224
  6327  00EB30  6E12               	movwf	drawCircle@color,c
  6328  00EB32  EC8C  F070         	call	_drawCircle	;wreg free
  6329  00EB36  D000               	goto	l4562
  6330  00EB38                     l4562:
  6331                           
  6332                           ;Lab7.c: 469: }
  6333                           ;Lab7.c: 470: if(color == 2){
  6334  00EB38  0E02               	movlw	2
  6335  00EB3A  1833               	xorwf	update_LCD_color@color,w,c
  6336  00EB3C  A4D8               	btfss	status,2,c
  6337  00EB3E  D067               	goto	l484
  6338                           
  6339                           ;Lab7.c: 472: fillCircle(40, Circle_Y, 7, 0x0000);
  6340  00EB40  0E00               	movlw	0
  6341  00EB42  6E2C               	movwf	fillCircle@x0+1,c
  6342  00EB44  0E28               	movlw	40
  6343  00EB46  6E2B               	movwf	fillCircle@x0,c
  6344  00EB48  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6345  00EB4C  6A2E               	clrf	fillCircle@y0+1,c
  6346  00EB4E  0E00               	movlw	0
  6347  00EB50  6E30               	movwf	fillCircle@r+1,c
  6348  00EB52  0E07               	movlw	7
  6349  00EB54  6E2F               	movwf	fillCircle@r,c
  6350  00EB56  0E00               	movlw	0
  6351  00EB58  6E32               	movwf	fillCircle@color+1,c
  6352  00EB5A  0E00               	movlw	0
  6353  00EB5C  6E31               	movwf	fillCircle@color,c
  6354  00EB5E  EC04  F065         	call	_fillCircle	;wreg free
  6355                           
  6356                           ;Lab7.c: 473: fillCircle(60, Circle_Y, 7, 0x0000);
  6357  00EB62  0E00               	movlw	0
  6358  00EB64  6E2C               	movwf	fillCircle@x0+1,c
  6359  00EB66  0E3C               	movlw	60
  6360  00EB68  6E2B               	movwf	fillCircle@x0,c
  6361  00EB6A  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6362  00EB6E  6A2E               	clrf	fillCircle@y0+1,c
  6363  00EB70  0E00               	movlw	0
  6364  00EB72  6E30               	movwf	fillCircle@r+1,c
  6365  00EB74  0E07               	movlw	7
  6366  00EB76  6E2F               	movwf	fillCircle@r,c
  6367  00EB78  0E00               	movlw	0
  6368  00EB7A  6E32               	movwf	fillCircle@color+1,c
  6369  00EB7C  0E00               	movlw	0
  6370  00EB7E  6E31               	movwf	fillCircle@color,c
  6371  00EB80  EC04  F065         	call	_fillCircle	;wreg free
  6372                           
  6373                           ;Lab7.c: 474: fillCircle(80, Circle_Y, 7, 0x07E0);
  6374  00EB84  0E00               	movlw	0
  6375  00EB86  6E2C               	movwf	fillCircle@x0+1,c
  6376  00EB88  0E50               	movlw	80
  6377  00EB8A  6E2B               	movwf	fillCircle@x0,c
  6378  00EB8C  C035  F02D         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6379  00EB90  6A2E               	clrf	fillCircle@y0+1,c
  6380  00EB92  0E00               	movlw	0
  6381  00EB94  6E30               	movwf	fillCircle@r+1,c
  6382  00EB96  0E07               	movlw	7
  6383  00EB98  6E2F               	movwf	fillCircle@r,c
  6384  00EB9A  0E07               	movlw	7
  6385  00EB9C  6E32               	movwf	fillCircle@color+1,c
  6386  00EB9E  0EE0               	movlw	224
  6387  00EBA0  6E31               	movwf	fillCircle@color,c
  6388  00EBA2  EC04  F065         	call	_fillCircle	;wreg free
  6389                           
  6390                           ;Lab7.c: 476: drawCircle(40, Circle_Y, 7, 0xF800);
  6391  00EBA6  0E00               	movlw	0
  6392  00EBA8  6E0D               	movwf	drawCircle@x0+1,c
  6393  00EBAA  0E28               	movlw	40
  6394  00EBAC  6E0C               	movwf	drawCircle@x0,c
  6395  00EBAE  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6396  00EBB2  6A0F               	clrf	drawCircle@y0+1,c
  6397  00EBB4  0E00               	movlw	0
  6398  00EBB6  6E11               	movwf	drawCircle@r+1,c
  6399  00EBB8  0E07               	movlw	7
  6400  00EBBA  6E10               	movwf	drawCircle@r,c
  6401  00EBBC  0EF8               	movlw	248
  6402  00EBBE  6E13               	movwf	drawCircle@color+1,c
  6403  00EBC0  0E00               	movlw	0
  6404  00EBC2  6E12               	movwf	drawCircle@color,c
  6405  00EBC4  EC8C  F070         	call	_drawCircle	;wreg free
  6406                           
  6407                           ;Lab7.c: 477: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6408  00EBC8  0E00               	movlw	0
  6409  00EBCA  6E0D               	movwf	drawCircle@x0+1,c
  6410  00EBCC  0E3C               	movlw	60
  6411  00EBCE  6E0C               	movwf	drawCircle@x0,c
  6412  00EBD0  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6413  00EBD4  6A0F               	clrf	drawCircle@y0+1,c
  6414  00EBD6  0E00               	movlw	0
  6415  00EBD8  6E11               	movwf	drawCircle@r+1,c
  6416  00EBDA  0E07               	movlw	7
  6417  00EBDC  6E10               	movwf	drawCircle@r,c
  6418  00EBDE  0EFF               	movlw	255
  6419  00EBE0  6E13               	movwf	drawCircle@color+1,c
  6420  00EBE2  0EE0               	movlw	224
  6421  00EBE4  6E12               	movwf	drawCircle@color,c
  6422  00EBE6  EC8C  F070         	call	_drawCircle	;wreg free
  6423                           
  6424                           ;Lab7.c: 478: drawCircle(80, Circle_Y, 7, 0x07E0);
  6425  00EBEA  0E00               	movlw	0
  6426  00EBEC  6E0D               	movwf	drawCircle@x0+1,c
  6427  00EBEE  0E50               	movlw	80
  6428  00EBF0  6E0C               	movwf	drawCircle@x0,c
  6429  00EBF2  C035  F00E         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6430  00EBF6  6A0F               	clrf	drawCircle@y0+1,c
  6431  00EBF8  0E00               	movlw	0
  6432  00EBFA  6E11               	movwf	drawCircle@r+1,c
  6433  00EBFC  0E07               	movlw	7
  6434  00EBFE  6E10               	movwf	drawCircle@r,c
  6435  00EC00  0E07               	movlw	7
  6436  00EC02  6E13               	movwf	drawCircle@color+1,c
  6437  00EC04  0EE0               	movlw	224
  6438  00EC06  6E12               	movwf	drawCircle@color,c
  6439  00EC08  EC8C  F070         	call	_drawCircle	;wreg free
  6440  00EC0C  D000               	goto	l484
  6441  00EC0E                     l484:
  6442  00EC0E  0012               	return		;funcret
  6443  00EC10                     __end_of_update_LCD_color:
  6444                           	opt stack 0
  6445                           tblptru	equ	0xFF8
  6446                           tblptrh	equ	0xFF7
  6447                           tblptrl	equ	0xFF6
  6448                           tablat	equ	0xFF5
  6449                           prodl	equ	0xFF3
  6450                           intcon2	equ	0xFF1
  6451                           postinc0	equ	0xFEE
  6452                           wreg	equ	0xFE8
  6453                           postdec1	equ	0xFE5
  6454                           fsr1l	equ	0xFE1
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function _fillCircle *****************
  6458 ;; Defined at:
  6459 ;;		line 647 in file "ST7735_TFT.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  x0              2   42[COMRAM] int 
  6462 ;;  y0              2   44[COMRAM] int 
  6463 ;;  r               2   46[COMRAM] int 
  6464 ;;  color           2   48[COMRAM] unsigned int 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;		None
  6467 ;; Return value:  Size  Location     Type
  6468 ;;		None               void
  6469 ;; Registers used:
  6470 ;;		wreg, status,2, status,0, cstack
  6471 ;; Tracked objects:
  6472 ;;		On entry : 0/0
  6473 ;;		On exit  : 0/0
  6474 ;;		Unchanged: 0/0
  6475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6476 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;Total ram usage:        8 bytes
  6481 ;; Hardware stack levels used:    1
  6482 ;; Hardware stack levels required when called:    5
  6483 ;; This function calls:
  6484 ;;		_drawFastVLine
  6485 ;;		_fillCircleHelper
  6486 ;; This function is called by:
  6487 ;;		_update_LCD_color
  6488 ;;		_Initialize_Screen
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text27
  6493  00CA08                     __ptext27:
  6494                           	opt stack 0
  6495  00CA08                     _fillCircle:
  6496                           	opt stack 22
  6497                           
  6498                           ;ST7735_TFT.c: 649: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6499                           
  6500                           ;incstack = 0
  6501  00CA08  502F               	movf	fillCircle@r,w,c
  6502  00CA0A  0800               	sublw	0
  6503  00CA0C  242D               	addwf	fillCircle@y0,w,c
  6504  00CA0E  6E08               	movwf	drawFastVLine@y,c
  6505  00CA10  80D8               	bsf	status,0,c
  6506  00CA12  342F               	rlcf	fillCircle@r,w,c
  6507  00CA14  6E09               	movwf	drawFastVLine@h,c
  6508  00CA16  C031  F00A         	movff	fillCircle@color,drawFastVLine@color
  6509  00CA1A  C032  F00B         	movff	fillCircle@color+1,drawFastVLine@color+1
  6510  00CA1E  502B               	movf	fillCircle@x0,w,c
  6511  00CA20  ECAB  F066         	call	_drawFastVLine
  6512                           
  6513                           ;ST7735_TFT.c: 650: fillCircleHelper(x0, y0, r, 3, 0, color);
  6514  00CA24  C02B  F013         	movff	fillCircle@x0,fillCircleHelper@x0
  6515  00CA28  C02C  F014         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6516  00CA2C  C02D  F015         	movff	fillCircle@y0,fillCircleHelper@y0
  6517  00CA30  C02E  F016         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6518  00CA34  C02F  F017         	movff	fillCircle@r,fillCircleHelper@r
  6519  00CA38  C030  F018         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6520  00CA3C  0E00               	movlw	0
  6521  00CA3E  6E1A               	movwf	fillCircleHelper@cornername+1,c
  6522  00CA40  0E03               	movlw	3
  6523  00CA42  6E19               	movwf	fillCircleHelper@cornername,c
  6524  00CA44  0E00               	movlw	0
  6525  00CA46  6E1C               	movwf	fillCircleHelper@delta+1,c
  6526  00CA48  0E00               	movlw	0
  6527  00CA4A  6E1B               	movwf	fillCircleHelper@delta,c
  6528  00CA4C  C031  F01D         	movff	fillCircle@color,fillCircleHelper@color
  6529  00CA50  C032  F01E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6530  00CA54  EC7E  F06E         	call	_fillCircleHelper	;wreg free
  6531  00CA58  0012               	return		;funcret
  6532  00CA5A                     __end_of_fillCircle:
  6533                           	opt stack 0
  6534                           tblptru	equ	0xFF8
  6535                           tblptrh	equ	0xFF7
  6536                           tblptrl	equ	0xFF6
  6537                           tablat	equ	0xFF5
  6538                           prodl	equ	0xFF3
  6539                           intcon2	equ	0xFF1
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           postdec1	equ	0xFE5
  6543                           fsr1l	equ	0xFE1
  6544                           status	equ	0xFD8
  6545                           
  6546 ;; *************** function _fillCircleHelper *****************
  6547 ;; Defined at:
  6548 ;;		line 622 in file "ST7735_TFT.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;  x0              2   18[COMRAM] int 
  6551 ;;  y0              2   20[COMRAM] int 
  6552 ;;  r               2   22[COMRAM] int 
  6553 ;;  cornername      2   24[COMRAM] unsigned int 
  6554 ;;  delta           2   26[COMRAM] int 
  6555 ;;  color           2   28[COMRAM] unsigned int 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;  y               2   40[COMRAM] int 
  6558 ;;  x               2   38[COMRAM] int 
  6559 ;;  f               2   36[COMRAM] int 
  6560 ;;  ddF_y           2   34[COMRAM] int 
  6561 ;;  ddF_x           2   32[COMRAM] int 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;		None               void
  6564 ;; Registers used:
  6565 ;;		wreg, status,2, status,0, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6571 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;Total ram usage:       24 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    4
  6578 ;; This function calls:
  6579 ;;		_drawFastVLine
  6580 ;; This function is called by:
  6581 ;;		_fillCircle
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text28
  6586  00DCFC                     __ptext28:
  6587                           	opt stack 0
  6588  00DCFC                     _fillCircleHelper:
  6589                           	opt stack 22
  6590                           
  6591                           ;ST7735_TFT.c: 624: signed int f, ddF_x, ddF_y, x, y;
  6592                           ;ST7735_TFT.c: 625: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6593                           
  6594                           ;incstack = 0
  6595  00DCFC  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6596  00DD00  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6597  00DD04  1E1F               	comf	??_fillCircleHelper,f,c
  6598  00DD06  1E20               	comf	??_fillCircleHelper+1,f,c
  6599  00DD08  4A1F               	infsnz	??_fillCircleHelper,f,c
  6600  00DD0A  2A20               	incf	??_fillCircleHelper+1,f,c
  6601  00DD0C  0E01               	movlw	1
  6602  00DD0E  241F               	addwf	??_fillCircleHelper,w,c
  6603  00DD10  6E25               	movwf	fillCircleHelper@f,c
  6604  00DD12  0E00               	movlw	0
  6605  00DD14  2020               	addwfc	??_fillCircleHelper+1,w,c
  6606  00DD16  6E26               	movwf	fillCircleHelper@f+1,c
  6607  00DD18  0E00               	movlw	0
  6608  00DD1A  6E22               	movwf	fillCircleHelper@ddF_x+1,c
  6609  00DD1C  0E01               	movlw	1
  6610  00DD1E  6E21               	movwf	fillCircleHelper@ddF_x,c
  6611  00DD20  C017  F01F         	movff	fillCircleHelper@r,??_fillCircleHelper
  6612  00DD24  C018  F020         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6613  00DD28  90D8               	bcf	status,0,c
  6614  00DD2A  361F               	rlcf	??_fillCircleHelper,f,c
  6615  00DD2C  3620               	rlcf	??_fillCircleHelper+1,f,c
  6616  00DD2E  1E1F               	comf	??_fillCircleHelper,f,c
  6617  00DD30  1E20               	comf	??_fillCircleHelper+1,f,c
  6618  00DD32  4A1F               	infsnz	??_fillCircleHelper,f,c
  6619  00DD34  2A20               	incf	??_fillCircleHelper+1,f,c
  6620  00DD36  C01F  F023         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6621  00DD3A  C020  F024         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6622  00DD3E  0E00               	movlw	0
  6623  00DD40  6E28               	movwf	fillCircleHelper@x+1,c
  6624  00DD42  0E00               	movlw	0
  6625  00DD44  6E27               	movwf	fillCircleHelper@x,c
  6626  00DD46  C017  F029         	movff	fillCircleHelper@r,fillCircleHelper@y
  6627  00DD4A  C018  F02A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  6628                           
  6629                           ;ST7735_TFT.c: 626: while (x<y) {
  6630  00DD4E  D067               	goto	l4004
  6631  00DD50                     l3984:
  6632                           
  6633                           ;ST7735_TFT.c: 627: if (f >= 0) {
  6634  00DD50  BE26               	btfsc	fillCircleHelper@f+1,7,c
  6635  00DD52  D00B               	goto	l327
  6636                           
  6637                           ;ST7735_TFT.c: 628: y--;
  6638  00DD54  0629               	decf	fillCircleHelper@y,f,c
  6639  00DD56  A0D8               	btfss	status,0,c
  6640  00DD58  062A               	decf	fillCircleHelper@y+1,f,c
  6641                           
  6642                           ;ST7735_TFT.c: 629: ddF_y += 2;
  6643  00DD5A  0E02               	movlw	2
  6644  00DD5C  2623               	addwf	fillCircleHelper@ddF_y,f,c
  6645  00DD5E  0E00               	movlw	0
  6646  00DD60  2224               	addwfc	fillCircleHelper@ddF_y+1,f,c
  6647                           
  6648                           ;ST7735_TFT.c: 630: f += ddF_y;
  6649  00DD62  5023               	movf	fillCircleHelper@ddF_y,w,c
  6650  00DD64  2625               	addwf	fillCircleHelper@f,f,c
  6651  00DD66  5024               	movf	fillCircleHelper@ddF_y+1,w,c
  6652  00DD68  2226               	addwfc	fillCircleHelper@f+1,f,c
  6653  00DD6A                     l327:
  6654                           
  6655                           ;ST7735_TFT.c: 631: }
  6656                           ;ST7735_TFT.c: 632: x++;
  6657  00DD6A  4A27               	infsnz	fillCircleHelper@x,f,c
  6658  00DD6C  2A28               	incf	fillCircleHelper@x+1,f,c
  6659                           
  6660                           ;ST7735_TFT.c: 633: ddF_x += 2;
  6661  00DD6E  0E02               	movlw	2
  6662  00DD70  2621               	addwf	fillCircleHelper@ddF_x,f,c
  6663  00DD72  0E00               	movlw	0
  6664  00DD74  2222               	addwfc	fillCircleHelper@ddF_x+1,f,c
  6665                           
  6666                           ;ST7735_TFT.c: 634: f += ddF_x;
  6667  00DD76  5021               	movf	fillCircleHelper@ddF_x,w,c
  6668  00DD78  2625               	addwf	fillCircleHelper@f,f,c
  6669  00DD7A  5022               	movf	fillCircleHelper@ddF_x+1,w,c
  6670  00DD7C  2226               	addwfc	fillCircleHelper@f+1,f,c
  6671                           
  6672                           ;ST7735_TFT.c: 636: if (cornername & 0x1) {
  6673  00DD7E  A019               	btfss	fillCircleHelper@cornername,0,c
  6674  00DD80  D025               	goto	l4000
  6675                           
  6676                           ;ST7735_TFT.c: 637: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  6677  00DD82  5029               	movf	fillCircleHelper@y,w,c
  6678  00DD84  0800               	sublw	0
  6679  00DD86  2415               	addwf	fillCircleHelper@y0,w,c
  6680  00DD88  6E08               	movwf	drawFastVLine@y,c
  6681  00DD8A  5029               	movf	fillCircleHelper@y,w,c
  6682  00DD8C  2429               	addwf	fillCircleHelper@y,w,c
  6683  00DD8E  241B               	addwf	fillCircleHelper@delta,w,c
  6684  00DD90  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6685  00DD92  281F               	incf	??_fillCircleHelper,w,c
  6686  00DD94  6E09               	movwf	drawFastVLine@h,c
  6687  00DD96  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6688  00DD9A  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6689  00DD9E  5013               	movf	fillCircleHelper@x0,w,c
  6690  00DDA0  2427               	addwf	fillCircleHelper@x,w,c
  6691  00DDA2  ECAB  F066         	call	_drawFastVLine
  6692                           
  6693                           ;ST7735_TFT.c: 638: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  6694  00DDA6  5027               	movf	fillCircleHelper@x,w,c
  6695  00DDA8  0800               	sublw	0
  6696  00DDAA  2415               	addwf	fillCircleHelper@y0,w,c
  6697  00DDAC  6E08               	movwf	drawFastVLine@y,c
  6698  00DDAE  5027               	movf	fillCircleHelper@x,w,c
  6699  00DDB0  2427               	addwf	fillCircleHelper@x,w,c
  6700  00DDB2  241B               	addwf	fillCircleHelper@delta,w,c
  6701  00DDB4  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6702  00DDB6  281F               	incf	??_fillCircleHelper,w,c
  6703  00DDB8  6E09               	movwf	drawFastVLine@h,c
  6704  00DDBA  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6705  00DDBE  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6706  00DDC2  5013               	movf	fillCircleHelper@x0,w,c
  6707  00DDC4  2429               	addwf	fillCircleHelper@y,w,c
  6708  00DDC6  ECAB  F066         	call	_drawFastVLine
  6709  00DDCA  D000               	goto	l4000
  6710  00DDCC                     l4000:
  6711                           
  6712                           ;ST7735_TFT.c: 639: }
  6713                           ;ST7735_TFT.c: 640: if (cornername & 0x2) {
  6714  00DDCC  A219               	btfss	fillCircleHelper@cornername,1,c
  6715  00DDCE  D027               	goto	l4004
  6716                           
  6717                           ;ST7735_TFT.c: 641: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  6718  00DDD0  5029               	movf	fillCircleHelper@y,w,c
  6719  00DDD2  0800               	sublw	0
  6720  00DDD4  2415               	addwf	fillCircleHelper@y0,w,c
  6721  00DDD6  6E08               	movwf	drawFastVLine@y,c
  6722  00DDD8  5029               	movf	fillCircleHelper@y,w,c
  6723  00DDDA  2429               	addwf	fillCircleHelper@y,w,c
  6724  00DDDC  241B               	addwf	fillCircleHelper@delta,w,c
  6725  00DDDE  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6726  00DDE0  281F               	incf	??_fillCircleHelper,w,c
  6727  00DDE2  6E09               	movwf	drawFastVLine@h,c
  6728  00DDE4  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6729  00DDE8  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6730  00DDEC  5027               	movf	fillCircleHelper@x,w,c
  6731  00DDEE  0800               	sublw	0
  6732  00DDF0  2413               	addwf	fillCircleHelper@x0,w,c
  6733  00DDF2  ECAB  F066         	call	_drawFastVLine
  6734                           
  6735                           ;ST7735_TFT.c: 642: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  6736  00DDF6  5027               	movf	fillCircleHelper@x,w,c
  6737  00DDF8  0800               	sublw	0
  6738  00DDFA  2415               	addwf	fillCircleHelper@y0,w,c
  6739  00DDFC  6E08               	movwf	drawFastVLine@y,c
  6740  00DDFE  5027               	movf	fillCircleHelper@x,w,c
  6741  00DE00  2427               	addwf	fillCircleHelper@x,w,c
  6742  00DE02  241B               	addwf	fillCircleHelper@delta,w,c
  6743  00DE04  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6744  00DE06  281F               	incf	??_fillCircleHelper,w,c
  6745  00DE08  6E09               	movwf	drawFastVLine@h,c
  6746  00DE0A  C01D  F00A         	movff	fillCircleHelper@color,drawFastVLine@color
  6747  00DE0E  C01E  F00B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6748  00DE12  5029               	movf	fillCircleHelper@y,w,c
  6749  00DE14  0800               	sublw	0
  6750  00DE16  2413               	addwf	fillCircleHelper@x0,w,c
  6751  00DE18  ECAB  F066         	call	_drawFastVLine
  6752  00DE1C  D000               	goto	l4004
  6753  00DE1E                     l4004:
  6754  00DE1E  5029               	movf	fillCircleHelper@y,w,c
  6755  00DE20  5C27               	subwf	fillCircleHelper@x,w,c
  6756  00DE22  5028               	movf	fillCircleHelper@x+1,w,c
  6757  00DE24  0A80               	xorlw	128
  6758  00DE26  6E1F               	movwf	??_fillCircleHelper& (0+255),c
  6759  00DE28  502A               	movf	fillCircleHelper@y+1,w,c
  6760  00DE2A  0A80               	xorlw	128
  6761  00DE2C  581F               	subwfb	??_fillCircleHelper& (0+255),w,c
  6762  00DE2E  A0D8               	btfss	status,0,c
  6763  00DE30  D78F               	goto	l3984
  6764  00DE32  0012               	return		;funcret
  6765  00DE34                     __end_of_fillCircleHelper:
  6766                           	opt stack 0
  6767                           tblptru	equ	0xFF8
  6768                           tblptrh	equ	0xFF7
  6769                           tblptrl	equ	0xFF6
  6770                           tablat	equ	0xFF5
  6771                           prodl	equ	0xFF3
  6772                           intcon2	equ	0xFF1
  6773                           postinc0	equ	0xFEE
  6774                           wreg	equ	0xFE8
  6775                           postdec1	equ	0xFE5
  6776                           fsr1l	equ	0xFE1
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _drawCircle *****************
  6780 ;; Defined at:
  6781 ;;		line 561 in file "ST7735_TFT.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  x0              2   11[COMRAM] int 
  6784 ;;  y0              2   13[COMRAM] int 
  6785 ;;  r               2   15[COMRAM] int 
  6786 ;;  color           2   17[COMRAM] unsigned int 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  y               2   29[COMRAM] int 
  6789 ;;  x               2   27[COMRAM] int 
  6790 ;;  f               2   25[COMRAM] int 
  6791 ;;  ddF_y           2   23[COMRAM] int 
  6792 ;;  ddF_x           2   21[COMRAM] int 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;		None               void
  6795 ;; Registers used:
  6796 ;;		wreg, status,2, status,0, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6802 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6803 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;Total ram usage:       20 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    4
  6809 ;; This function calls:
  6810 ;;		_drawPixel
  6811 ;; This function is called by:
  6812 ;;		_update_LCD_color
  6813 ;;		_Initialize_Screen
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           	psect	text29
  6818  00E118                     __ptext29:
  6819                           	opt stack 0
  6820  00E118                     _drawCircle:
  6821                           	opt stack 23
  6822                           
  6823                           ;ST7735_TFT.c: 563: signed int f, ddF_x, ddF_y, x, y;
  6824                           ;ST7735_TFT.c: 564: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6825                           
  6826                           ;incstack = 0
  6827  00E118  C010  F014         	movff	drawCircle@r,??_drawCircle
  6828  00E11C  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  6829  00E120  1E14               	comf	??_drawCircle,f,c
  6830  00E122  1E15               	comf	??_drawCircle+1,f,c
  6831  00E124  4A14               	infsnz	??_drawCircle,f,c
  6832  00E126  2A15               	incf	??_drawCircle+1,f,c
  6833  00E128  0E01               	movlw	1
  6834  00E12A  2414               	addwf	??_drawCircle,w,c
  6835  00E12C  6E1A               	movwf	drawCircle@f,c
  6836  00E12E  0E00               	movlw	0
  6837  00E130  2015               	addwfc	??_drawCircle+1,w,c
  6838  00E132  6E1B               	movwf	drawCircle@f+1,c
  6839  00E134  0E00               	movlw	0
  6840  00E136  6E17               	movwf	drawCircle@ddF_x+1,c
  6841  00E138  0E01               	movlw	1
  6842  00E13A  6E16               	movwf	drawCircle@ddF_x,c
  6843  00E13C  C010  F014         	movff	drawCircle@r,??_drawCircle
  6844  00E140  C011  F015         	movff	drawCircle@r+1,??_drawCircle+1
  6845  00E144  90D8               	bcf	status,0,c
  6846  00E146  3614               	rlcf	??_drawCircle,f,c
  6847  00E148  3615               	rlcf	??_drawCircle+1,f,c
  6848  00E14A  1E14               	comf	??_drawCircle,f,c
  6849  00E14C  1E15               	comf	??_drawCircle+1,f,c
  6850  00E14E  4A14               	infsnz	??_drawCircle,f,c
  6851  00E150  2A15               	incf	??_drawCircle+1,f,c
  6852  00E152  C014  F018         	movff	??_drawCircle,drawCircle@ddF_y
  6853  00E156  C015  F019         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6854  00E15A  0E00               	movlw	0
  6855  00E15C  6E1D               	movwf	drawCircle@x+1,c
  6856  00E15E  0E00               	movlw	0
  6857  00E160  6E1C               	movwf	drawCircle@x,c
  6858  00E162  C010  F01E         	movff	drawCircle@r,drawCircle@y
  6859  00E166  C011  F01F         	movff	drawCircle@r+1,drawCircle@y+1
  6860                           
  6861                           ;ST7735_TFT.c: 565: drawPixel(x0 , y0 + r, color);
  6862  00E16A  500E               	movf	drawCircle@y0,w,c
  6863  00E16C  2410               	addwf	drawCircle@r,w,c
  6864  00E16E  6E08               	movwf	drawPixel@y,c
  6865  00E170  C012  F009         	movff	drawCircle@color,drawPixel@color
  6866  00E174  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6867  00E178  500C               	movf	drawCircle@x0,w,c
  6868  00E17A  EC42  F063         	call	_drawPixel
  6869                           
  6870                           ;ST7735_TFT.c: 566: drawPixel(x0 , y0 - r, color);
  6871  00E17E  5010               	movf	drawCircle@r,w,c
  6872  00E180  0800               	sublw	0
  6873  00E182  240E               	addwf	drawCircle@y0,w,c
  6874  00E184  6E08               	movwf	drawPixel@y,c
  6875  00E186  C012  F009         	movff	drawCircle@color,drawPixel@color
  6876  00E18A  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6877  00E18E  500C               	movf	drawCircle@x0,w,c
  6878  00E190  EC42  F063         	call	_drawPixel
  6879                           
  6880                           ;ST7735_TFT.c: 567: drawPixel(x0+r, y0 , color);
  6881  00E194  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  6882  00E198  C012  F009         	movff	drawCircle@color,drawPixel@color
  6883  00E19C  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6884  00E1A0  500C               	movf	drawCircle@x0,w,c
  6885  00E1A2  2410               	addwf	drawCircle@r,w,c
  6886  00E1A4  EC42  F063         	call	_drawPixel
  6887                           
  6888                           ;ST7735_TFT.c: 568: drawPixel(x0-r, y0 , color);
  6889  00E1A8  C00E  F008         	movff	drawCircle@y0,drawPixel@y
  6890  00E1AC  C012  F009         	movff	drawCircle@color,drawPixel@color
  6891  00E1B0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6892  00E1B4  5010               	movf	drawCircle@r,w,c
  6893  00E1B6  0800               	sublw	0
  6894  00E1B8  240C               	addwf	drawCircle@x0,w,c
  6895  00E1BA  EC42  F063         	call	_drawPixel
  6896                           
  6897                           ;ST7735_TFT.c: 569: while (x < y) {
  6898  00E1BE  D078               	goto	l4284
  6899  00E1C0                     l4256:
  6900                           
  6901                           ;ST7735_TFT.c: 570: if (f >= 0) {
  6902  00E1C0  BE1B               	btfsc	drawCircle@f+1,7,c
  6903  00E1C2  D00B               	goto	l309
  6904                           
  6905                           ;ST7735_TFT.c: 571: y--;
  6906  00E1C4  061E               	decf	drawCircle@y,f,c
  6907  00E1C6  A0D8               	btfss	status,0,c
  6908  00E1C8  061F               	decf	drawCircle@y+1,f,c
  6909                           
  6910                           ;ST7735_TFT.c: 572: ddF_y += 2;
  6911  00E1CA  0E02               	movlw	2
  6912  00E1CC  2618               	addwf	drawCircle@ddF_y,f,c
  6913  00E1CE  0E00               	movlw	0
  6914  00E1D0  2219               	addwfc	drawCircle@ddF_y+1,f,c
  6915                           
  6916                           ;ST7735_TFT.c: 573: f += ddF_y;
  6917  00E1D2  5018               	movf	drawCircle@ddF_y,w,c
  6918  00E1D4  261A               	addwf	drawCircle@f,f,c
  6919  00E1D6  5019               	movf	drawCircle@ddF_y+1,w,c
  6920  00E1D8  221B               	addwfc	drawCircle@f+1,f,c
  6921  00E1DA                     l309:
  6922                           
  6923                           ;ST7735_TFT.c: 574: }
  6924                           ;ST7735_TFT.c: 575: x++;
  6925  00E1DA  4A1C               	infsnz	drawCircle@x,f,c
  6926  00E1DC  2A1D               	incf	drawCircle@x+1,f,c
  6927                           
  6928                           ;ST7735_TFT.c: 576: ddF_x += 2;
  6929  00E1DE  0E02               	movlw	2
  6930  00E1E0  2616               	addwf	drawCircle@ddF_x,f,c
  6931  00E1E2  0E00               	movlw	0
  6932  00E1E4  2217               	addwfc	drawCircle@ddF_x+1,f,c
  6933                           
  6934                           ;ST7735_TFT.c: 577: f += ddF_x;
  6935  00E1E6  5016               	movf	drawCircle@ddF_x,w,c
  6936  00E1E8  261A               	addwf	drawCircle@f,f,c
  6937  00E1EA  5017               	movf	drawCircle@ddF_x+1,w,c
  6938  00E1EC  221B               	addwfc	drawCircle@f+1,f,c
  6939                           
  6940                           ;ST7735_TFT.c: 578: drawPixel(x0 + x, y0 + y, color);
  6941  00E1EE  500E               	movf	drawCircle@y0,w,c
  6942  00E1F0  241E               	addwf	drawCircle@y,w,c
  6943  00E1F2  6E08               	movwf	drawPixel@y,c
  6944  00E1F4  C012  F009         	movff	drawCircle@color,drawPixel@color
  6945  00E1F8  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6946  00E1FC  500C               	movf	drawCircle@x0,w,c
  6947  00E1FE  241C               	addwf	drawCircle@x,w,c
  6948  00E200  EC42  F063         	call	_drawPixel
  6949                           
  6950                           ;ST7735_TFT.c: 579: drawPixel(x0 - x, y0 + y, color);
  6951  00E204  500E               	movf	drawCircle@y0,w,c
  6952  00E206  241E               	addwf	drawCircle@y,w,c
  6953  00E208  6E08               	movwf	drawPixel@y,c
  6954  00E20A  C012  F009         	movff	drawCircle@color,drawPixel@color
  6955  00E20E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6956  00E212  501C               	movf	drawCircle@x,w,c
  6957  00E214  0800               	sublw	0
  6958  00E216  240C               	addwf	drawCircle@x0,w,c
  6959  00E218  EC42  F063         	call	_drawPixel
  6960                           
  6961                           ;ST7735_TFT.c: 580: drawPixel(x0 + x, y0 - y, color);
  6962  00E21C  501E               	movf	drawCircle@y,w,c
  6963  00E21E  0800               	sublw	0
  6964  00E220  240E               	addwf	drawCircle@y0,w,c
  6965  00E222  6E08               	movwf	drawPixel@y,c
  6966  00E224  C012  F009         	movff	drawCircle@color,drawPixel@color
  6967  00E228  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6968  00E22C  500C               	movf	drawCircle@x0,w,c
  6969  00E22E  241C               	addwf	drawCircle@x,w,c
  6970  00E230  EC42  F063         	call	_drawPixel
  6971                           
  6972                           ;ST7735_TFT.c: 581: drawPixel(x0 - x, y0 - y, color);
  6973  00E234  501E               	movf	drawCircle@y,w,c
  6974  00E236  0800               	sublw	0
  6975  00E238  240E               	addwf	drawCircle@y0,w,c
  6976  00E23A  6E08               	movwf	drawPixel@y,c
  6977  00E23C  C012  F009         	movff	drawCircle@color,drawPixel@color
  6978  00E240  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6979  00E244  501C               	movf	drawCircle@x,w,c
  6980  00E246  0800               	sublw	0
  6981  00E248  240C               	addwf	drawCircle@x0,w,c
  6982  00E24A  EC42  F063         	call	_drawPixel
  6983                           
  6984                           ;ST7735_TFT.c: 582: drawPixel(x0 + y, y0 + x, color);
  6985  00E24E  500E               	movf	drawCircle@y0,w,c
  6986  00E250  241C               	addwf	drawCircle@x,w,c
  6987  00E252  6E08               	movwf	drawPixel@y,c
  6988  00E254  C012  F009         	movff	drawCircle@color,drawPixel@color
  6989  00E258  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  6990  00E25C  500C               	movf	drawCircle@x0,w,c
  6991  00E25E  241E               	addwf	drawCircle@y,w,c
  6992  00E260  EC42  F063         	call	_drawPixel
  6993                           
  6994                           ;ST7735_TFT.c: 583: drawPixel(x0 - y, y0 + x, color);
  6995  00E264  500E               	movf	drawCircle@y0,w,c
  6996  00E266  241C               	addwf	drawCircle@x,w,c
  6997  00E268  6E08               	movwf	drawPixel@y,c
  6998  00E26A  C012  F009         	movff	drawCircle@color,drawPixel@color
  6999  00E26E  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7000  00E272  501E               	movf	drawCircle@y,w,c
  7001  00E274  0800               	sublw	0
  7002  00E276  240C               	addwf	drawCircle@x0,w,c
  7003  00E278  EC42  F063         	call	_drawPixel
  7004                           
  7005                           ;ST7735_TFT.c: 584: drawPixel(x0 + y, y0 - x, color);
  7006  00E27C  501C               	movf	drawCircle@x,w,c
  7007  00E27E  0800               	sublw	0
  7008  00E280  240E               	addwf	drawCircle@y0,w,c
  7009  00E282  6E08               	movwf	drawPixel@y,c
  7010  00E284  C012  F009         	movff	drawCircle@color,drawPixel@color
  7011  00E288  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7012  00E28C  500C               	movf	drawCircle@x0,w,c
  7013  00E28E  241E               	addwf	drawCircle@y,w,c
  7014  00E290  EC42  F063         	call	_drawPixel
  7015                           
  7016                           ;ST7735_TFT.c: 585: drawPixel(x0 - y, y0 - x, color);
  7017  00E294  501C               	movf	drawCircle@x,w,c
  7018  00E296  0800               	sublw	0
  7019  00E298  240E               	addwf	drawCircle@y0,w,c
  7020  00E29A  6E08               	movwf	drawPixel@y,c
  7021  00E29C  C012  F009         	movff	drawCircle@color,drawPixel@color
  7022  00E2A0  C013  F00A         	movff	drawCircle@color+1,drawPixel@color+1
  7023  00E2A4  501E               	movf	drawCircle@y,w,c
  7024  00E2A6  0800               	sublw	0
  7025  00E2A8  240C               	addwf	drawCircle@x0,w,c
  7026  00E2AA  EC42  F063         	call	_drawPixel
  7027  00E2AE  D000               	goto	l4284
  7028  00E2B0                     l4284:
  7029  00E2B0  501E               	movf	drawCircle@y,w,c
  7030  00E2B2  5C1C               	subwf	drawCircle@x,w,c
  7031  00E2B4  501D               	movf	drawCircle@x+1,w,c
  7032  00E2B6  0A80               	xorlw	128
  7033  00E2B8  6E14               	movwf	??_drawCircle& (0+255),c
  7034  00E2BA  501F               	movf	drawCircle@y+1,w,c
  7035  00E2BC  0A80               	xorlw	128
  7036  00E2BE  5814               	subwfb	??_drawCircle& (0+255),w,c
  7037  00E2C0  A0D8               	btfss	status,0,c
  7038  00E2C2  D77E               	goto	l4256
  7039  00E2C4  0012               	return		;funcret
  7040  00E2C6                     __end_of_drawCircle:
  7041                           	opt stack 0
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodl	equ	0xFF3
  7047                           intcon2	equ	0xFF1
  7048                           postinc0	equ	0xFEE
  7049                           wreg	equ	0xFE8
  7050                           postdec1	equ	0xFE5
  7051                           fsr1l	equ	0xFE1
  7052                           status	equ	0xFD8
  7053                           
  7054 ;; *************** function _PED_Control *****************
  7055 ;; Defined at:
  7056 ;;		line 341 in file "Lab7.c"
  7057 ;; Parameters:    Size  Location     Type
  7058 ;;  Direction       1    wreg     unsigned char 
  7059 ;;  Num_Sec         1  103[COMRAM] unsigned char 
  7060 ;; Auto vars:     Size  Location     Type
  7061 ;;  Direction       1  104[COMRAM] unsigned char 
  7062 ;;  i               1  105[COMRAM] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;		None               void
  7065 ;; Registers used:
  7066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7072 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7075 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7076 ;;Total ram usage:        3 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:    9
  7079 ;; This function calls:
  7080 ;;		_Wait_One_Second_With_Beep
  7081 ;;		_update_LCD_PED_Count
  7082 ;; This function is called by:
  7083 ;;		_Day_Mode
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           	psect	text30
  7088  00C722                     __ptext30:
  7089                           	opt stack 0
  7090  00C722                     _PED_Control:
  7091                           	opt stack 20
  7092                           
  7093                           ;incstack = 0
  7094                           ;PED_Control@Direction stored from wreg
  7095  00C722  6E69               	movwf	PED_Control@Direction,c
  7096                           
  7097                           ;Lab7.c: 342: for(char i = Num_Sec - 1; i >0 ; i--){
  7098  00C724  0468               	decf	PED_Control@Num_Sec,w,c
  7099  00C726  6E6A               	movwf	PED_Control@i,c
  7100  00C728                     l4722:
  7101  00C728  506A               	movf	PED_Control@i,w,c
  7102  00C72A  B4D8               	btfsc	status,2,c
  7103  00C72C  D00B               	goto	l4732
  7104  00C72E  D001               	goto	l4726
  7105  00C730  D009               	goto	l4732
  7106  00C732                     l4726:
  7107                           
  7108                           ;Lab7.c: 343: update_LCD_PED_Count(Direction, i);
  7109  00C732  C06A  F03A         	movff	PED_Control@i,update_LCD_PED_Count@count
  7110  00C736  5069               	movf	PED_Control@Direction,w,c
  7111  00C738  EC64  F069         	call	_update_LCD_PED_Count
  7112                           
  7113                           ;Lab7.c: 344: Wait_One_Second_With_Beep();
  7114  00C73C  EC33  F067         	call	_Wait_One_Second_With_Beep	;wreg free
  7115  00C740  066A               	decf	PED_Control@i,f,c
  7116  00C742  D7F2               	goto	l4722
  7117  00C744                     l4732:
  7118                           
  7119                           ;Lab7.c: 345: }
  7120                           ;Lab7.c: 346: update_LCD_PED_Count(direction, 0);
  7121  00C744  0E00               	movlw	0
  7122  00C746  6E3A               	movwf	update_LCD_PED_Count@count,c
  7123  00C748  507E               	movf	_direction,w,c
  7124  00C74A  EC64  F069         	call	_update_LCD_PED_Count
  7125                           
  7126                           ;Lab7.c: 347: update_LCD_PED_Count(1, 0);
  7127  00C74E  0E00               	movlw	0
  7128  00C750  6E3A               	movwf	update_LCD_PED_Count@count,c
  7129  00C752  0E01               	movlw	1
  7130  00C754  EC64  F069         	call	_update_LCD_PED_Count
  7131                           
  7132                           ;Lab7.c: 348: Wait_One_Second_With_Beep();
  7133  00C758  EC33  F067         	call	_Wait_One_Second_With_Beep	;wreg free
  7134  00C75C  0012               	return		;funcret
  7135  00C75E                     __end_of_PED_Control:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodl	equ	0xFF3
  7142                           intcon2	equ	0xFF1
  7143                           postinc0	equ	0xFEE
  7144                           wreg	equ	0xFE8
  7145                           postdec1	equ	0xFE5
  7146                           fsr1l	equ	0xFE1
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function _update_LCD_PED_Count *****************
  7150 ;; Defined at:
  7151 ;;		line 596 in file "Lab7.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  direction       1    wreg     unsigned char 
  7154 ;;  count           1   57[COMRAM] unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  direction       1   58[COMRAM] unsigned char 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;		None               void
  7159 ;; Registers used:
  7160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7166 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;Total ram usage:        2 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    7
  7173 ;; This function calls:
  7174 ;;		___awdiv
  7175 ;;		___awmod
  7176 ;;		_drawtext
  7177 ;; This function is called by:
  7178 ;;		_PED_Control
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text31
  7183  00D2C8                     __ptext31:
  7184                           	opt stack 0
  7185  00D2C8                     _update_LCD_PED_Count:
  7186                           	opt stack 21
  7187                           
  7188                           ;incstack = 0
  7189                           ;update_LCD_PED_Count@direction stored from wreg
  7190  00D2C8  6E3B               	movwf	update_LCD_PED_Count@direction,c
  7191                           
  7192                           ;Lab7.c: 598: switch (direction)
  7193  00D2CA  D05B               	goto	l4596
  7194  00D2CC                     l4586:
  7195                           
  7196                           ;Lab7.c: 601: PED_EW_Count[0] = count/10 + '0';
  7197  00D2CC  C03A  F007         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7198  00D2D0  6A08               	clrf	___awdiv@dividend+1,c
  7199  00D2D2  0E00               	movlw	0
  7200  00D2D4  6E0A               	movwf	___awdiv@divisor+1,c
  7201  00D2D6  0E0A               	movlw	10
  7202  00D2D8  6E09               	movwf	___awdiv@divisor,c
  7203  00D2DA  EC09  F068         	call	___awdiv	;wreg free
  7204  00D2DE  5007               	movf	?___awdiv,w,c
  7205  00D2E0  0F30               	addlw	48
  7206  00D2E2  0100               	movlb	0	; () banked
  7207  00D2E4  6F99               	movwf	_PED_EW_Count& (0+255),b
  7208                           
  7209                           ;Lab7.c: 602: PED_EW_Count[1] = count%10 + '0';
  7210  00D2E6  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7211  00D2EA  6A02               	clrf	___awmod@dividend+1,c
  7212  00D2EC  0E00               	movlw	0
  7213  00D2EE  6E04               	movwf	___awmod@divisor+1,c
  7214  00D2F0  0E0A               	movlw	10
  7215  00D2F2  6E03               	movwf	___awmod@divisor,c
  7216  00D2F4  EC29  F066         	call	___awmod	;wreg free
  7217  00D2F8  5001               	movf	?___awmod,w,c
  7218  00D2FA  0F30               	addlw	48
  7219  00D2FC  0100               	movlb	0	; () banked
  7220  00D2FE  6F9A               	movwf	(_PED_EW_Count+1)& (0+255),b
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;Lab7.c: 603: drawtext(2, 90, PED_EW_Count, 0x07FF, 0x0000, 2);
  7224  00D300  0E5A               	movlw	90
  7225  00D302  6E29               	movwf	drawtext@y,c
  7226  00D304  0E99               	movlw	low _PED_EW_Count
  7227  00D306  6E2A               	movwf	drawtext@_text,c
  7228  00D308  0E00               	movlw	high _PED_EW_Count
  7229  00D30A  6E2B               	movwf	drawtext@_text+1,c
  7230  00D30C  0E07               	movlw	7
  7231  00D30E  6E2D               	movwf	drawtext@color+1,c
  7232  00D310  682C               	setf	drawtext@color,c
  7233  00D312  0E00               	movlw	0
  7234  00D314  6E2F               	movwf	drawtext@bg+1,c
  7235  00D316  0E00               	movlw	0
  7236  00D318  6E2E               	movwf	drawtext@bg,c
  7237  00D31A  0E02               	movlw	2
  7238  00D31C  6E30               	movwf	drawtext@size,c
  7239  00D31E  0E02               	movlw	2
  7240  00D320  EC10  F06B         	call	_drawtext
  7241                           
  7242                           ;Lab7.c: 604: break;
  7243  00D324  D036               	goto	l503
  7244  00D326                     l4590:
  7245                           
  7246                           ;Lab7.c: 606: PED_NS_Count[0] = count/10 + '0';
  7247  00D326  C03A  F007         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7248  00D32A  6A08               	clrf	___awdiv@dividend+1,c
  7249  00D32C  0E00               	movlw	0
  7250  00D32E  6E0A               	movwf	___awdiv@divisor+1,c
  7251  00D330  0E0A               	movlw	10
  7252  00D332  6E09               	movwf	___awdiv@divisor,c
  7253  00D334  EC09  F068         	call	___awdiv	;wreg free
  7254  00D338  5007               	movf	?___awdiv,w,c
  7255  00D33A  0F30               	addlw	48
  7256  00D33C  0100               	movlb	0	; () banked
  7257  00D33E  6F9C               	movwf	_PED_NS_Count& (0+255),b
  7258                           
  7259                           ;Lab7.c: 607: PED_NS_Count[1] = count%10 + '0';
  7260  00D340  C03A  F001         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7261  00D344  6A02               	clrf	___awmod@dividend+1,c
  7262  00D346  0E00               	movlw	0
  7263  00D348  6E04               	movwf	___awmod@divisor+1,c
  7264  00D34A  0E0A               	movlw	10
  7265  00D34C  6E03               	movwf	___awmod@divisor,c
  7266  00D34E  EC29  F066         	call	___awmod	;wreg free
  7267  00D352  5001               	movf	?___awmod,w,c
  7268  00D354  0F30               	addlw	48
  7269  00D356  0100               	movlb	0	; () banked
  7270  00D358  6F9D               	movwf	(_PED_NS_Count+1)& (0+255),b
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;Lab7.c: 608: drawtext(2, 30, PED_NS_Count, 0x001F, 0x0000, 2);
  7274  00D35A  0E1E               	movlw	30
  7275  00D35C  6E29               	movwf	drawtext@y,c
  7276  00D35E  0E9C               	movlw	low _PED_NS_Count
  7277  00D360  6E2A               	movwf	drawtext@_text,c
  7278  00D362  0E00               	movlw	high _PED_NS_Count
  7279  00D364  6E2B               	movwf	drawtext@_text+1,c
  7280  00D366  0E00               	movlw	0
  7281  00D368  6E2D               	movwf	drawtext@color+1,c
  7282  00D36A  0E1F               	movlw	31
  7283  00D36C  6E2C               	movwf	drawtext@color,c
  7284  00D36E  0E00               	movlw	0
  7285  00D370  6E2F               	movwf	drawtext@bg+1,c
  7286  00D372  0E00               	movlw	0
  7287  00D374  6E2E               	movwf	drawtext@bg,c
  7288  00D376  0E02               	movlw	2
  7289  00D378  6E30               	movwf	drawtext@size,c
  7290  00D37A  0E02               	movlw	2
  7291  00D37C  EC10  F06B         	call	_drawtext
  7292                           
  7293                           ;Lab7.c: 610: }
  7294                           
  7295                           ;Lab7.c: 609: break;
  7296  00D380  D008               	goto	l503
  7297  00D382                     l4596:
  7298  00D382  503B               	movf	update_LCD_PED_Count@direction,w,c
  7299                           
  7300                           ; Switch size 1, requested type "space"
  7301                           ; Number of cases is 2, Range of values is 0 to 1
  7302                           ; switch strategies available:
  7303                           ; Name         Instructions Cycles
  7304                           ; simple_byte            7     4 (average)
  7305                           ;	Chosen strategy is simple_byte
  7306  00D384  0A00               	xorlw	0	; case 0
  7307  00D386  B4D8               	btfsc	status,2,c
  7308  00D388  D7CE               	goto	l4590
  7309  00D38A  0A01               	xorlw	1	; case 1
  7310  00D38C  B4D8               	btfsc	status,2,c
  7311  00D38E  D79E               	goto	l4586
  7312  00D390  D000               	goto	l503
  7313  00D392                     l503:
  7314  00D392  0012               	return		;funcret
  7315  00D394                     __end_of_update_LCD_PED_Count:
  7316                           	opt stack 0
  7317                           tblptru	equ	0xFF8
  7318                           tblptrh	equ	0xFF7
  7319                           tblptrl	equ	0xFF6
  7320                           tablat	equ	0xFF5
  7321                           prodl	equ	0xFF3
  7322                           intcon2	equ	0xFF1
  7323                           postinc0	equ	0xFEE
  7324                           wreg	equ	0xFE8
  7325                           postdec1	equ	0xFE5
  7326                           fsr1l	equ	0xFE1
  7327                           status	equ	0xFD8
  7328                           
  7329 ;; *************** function _Wait_One_Second_With_Beep *****************
  7330 ;; Defined at:
  7331 ;;		line 326 in file "Lab7.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;		None
  7334 ;; Auto vars:     Size  Location     Type
  7335 ;;		None
  7336 ;; Return value:  Size  Location     Type
  7337 ;;		None               void
  7338 ;; Registers used:
  7339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7340 ;; Tracked objects:
  7341 ;;		On entry : 0/0
  7342 ;;		On exit  : 0/0
  7343 ;;		Unchanged: 0/0
  7344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;Total ram usage:        0 bytes
  7350 ;; Hardware stack levels used:    1
  7351 ;; Hardware stack levels required when called:    8
  7352 ;; This function calls:
  7353 ;;		_Activate_Buzzer
  7354 ;;		_Deactivate_Buzzer
  7355 ;;		_Wait_Half_Second
  7356 ;;		_drawtext
  7357 ;;		_strcpy
  7358 ;;		_update_LCD_misc
  7359 ;; This function is called by:
  7360 ;;		_PED_Control
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           	psect	text32
  7365  00CE66                     __ptext32:
  7366                           	opt stack 0
  7367  00CE66                     _Wait_One_Second_With_Beep:
  7368                           	opt stack 20
  7369                           
  7370                           ;Lab7.c: 328: PORTDbits.RD7 = 1;
  7371                           
  7372                           ;incstack = 0
  7373  00CE66  8E83               	bsf	3971,7,c	;volatile
  7374                           
  7375                           ;Lab7.c: 329: strcpy(txt,"*");
  7376  00CE68  C075  F001         	movff	_txt,strcpy@to
  7377  00CE6C  C076  F002         	movff	_txt+1,strcpy@to+1
  7378  00CE70  0EFD               	movlw	low STR_1
  7379  00CE72  6E03               	movwf	strcpy@from,c
  7380  00CE74  0EFF               	movlw	high STR_1
  7381  00CE76  6E04               	movwf	strcpy@from+1,c
  7382  00CE78  EC5A  F063         	call	_strcpy	;wreg free
  7383                           
  7384                           ;Lab7.c: 330: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7385  00CE7C  0E0A               	movlw	10
  7386  00CE7E  6E29               	movwf	drawtext@y,c
  7387  00CE80  C075  F02A         	movff	_txt,drawtext@_text
  7388  00CE84  C076  F02B         	movff	_txt+1,drawtext@_text+1
  7389  00CE88  0EFF               	movlw	255
  7390  00CE8A  6E2D               	movwf	drawtext@color+1,c
  7391  00CE8C  682C               	setf	drawtext@color,c
  7392  00CE8E  0E00               	movlw	0
  7393  00CE90  6E2F               	movwf	drawtext@bg+1,c
  7394  00CE92  0E00               	movlw	0
  7395  00CE94  6E2E               	movwf	drawtext@bg,c
  7396  00CE96  0E01               	movlw	1
  7397  00CE98  6E30               	movwf	drawtext@size,c
  7398  00CE9A  0E78               	movlw	120
  7399  00CE9C  EC10  F06B         	call	_drawtext
  7400                           
  7401                           ;Lab7.c: 331: Activate_Buzzer();
  7402  00CEA0  EC7A  F062         	call	_Activate_Buzzer	;wreg free
  7403                           
  7404                           ;Lab7.c: 332: Wait_Half_Second();
  7405  00CEA4  ECAB  F062         	call	_Wait_Half_Second	;wreg free
  7406                           
  7407                           ;Lab7.c: 334: PORTDbits.RD7 = 0;
  7408  00CEA8  9E83               	bcf	3971,7,c	;volatile
  7409                           
  7410                           ;Lab7.c: 335: strcpy(txt," ");
  7411  00CEAA  C075  F001         	movff	_txt,strcpy@to
  7412  00CEAE  C076  F002         	movff	_txt+1,strcpy@to+1
  7413  00CEB2  0EFB               	movlw	low STR_2
  7414  00CEB4  6E03               	movwf	strcpy@from,c
  7415  00CEB6  0EFF               	movlw	high STR_2
  7416  00CEB8  6E04               	movwf	strcpy@from+1,c
  7417  00CEBA  EC5A  F063         	call	_strcpy	;wreg free
  7418                           
  7419                           ;Lab7.c: 336: drawtext(120,10,txt,0xFFFF,0x0000,1);
  7420  00CEBE  0E0A               	movlw	10
  7421  00CEC0  6E29               	movwf	drawtext@y,c
  7422  00CEC2  C075  F02A         	movff	_txt,drawtext@_text
  7423  00CEC6  C076  F02B         	movff	_txt+1,drawtext@_text+1
  7424  00CECA  0EFF               	movlw	255
  7425  00CECC  6E2D               	movwf	drawtext@color+1,c
  7426  00CECE  682C               	setf	drawtext@color,c
  7427  00CED0  0E00               	movlw	0
  7428  00CED2  6E2F               	movwf	drawtext@bg+1,c
  7429  00CED4  0E00               	movlw	0
  7430  00CED6  6E2E               	movwf	drawtext@bg,c
  7431  00CED8  0E01               	movlw	1
  7432  00CEDA  6E30               	movwf	drawtext@size,c
  7433  00CEDC  0E78               	movlw	120
  7434  00CEDE  EC10  F06B         	call	_drawtext
  7435                           
  7436                           ;Lab7.c: 337: Deactivate_Buzzer();
  7437  00CEE2  EC54  F062         	call	_Deactivate_Buzzer	;wreg free
  7438                           
  7439                           ;Lab7.c: 338: Wait_Half_Second();
  7440  00CEE6  ECAB  F062         	call	_Wait_Half_Second	;wreg free
  7441                           
  7442                           ;Lab7.c: 339: update_LCD_misc();
  7443  00CEEA  EC45  F072         	call	_update_LCD_misc	;wreg free
  7444  00CEEE  0012               	return		;funcret
  7445  00CEF0                     __end_of_Wait_One_Second_With_Beep:
  7446                           	opt stack 0
  7447                           tblptru	equ	0xFF8
  7448                           tblptrh	equ	0xFF7
  7449                           tblptrl	equ	0xFF6
  7450                           tablat	equ	0xFF5
  7451                           prodl	equ	0xFF3
  7452                           intcon2	equ	0xFF1
  7453                           postinc0	equ	0xFEE
  7454                           wreg	equ	0xFE8
  7455                           postdec1	equ	0xFE5
  7456                           fsr1l	equ	0xFE1
  7457                           status	equ	0xFD8
  7458                           
  7459 ;; *************** function _update_LCD_misc *****************
  7460 ;; Defined at:
  7461 ;;		line 613 in file "Lab7.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;		None
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  nStep           2  101[COMRAM] int 
  7466 ;; Return value:  Size  Location     Type
  7467 ;;		None               void
  7468 ;; Registers used:
  7469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7478 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;Total ram usage:        2 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    7
  7482 ;; This function calls:
  7483 ;;		___awtoft
  7484 ;;		___ftdiv
  7485 ;;		___ftge
  7486 ;;		___wmul
  7487 ;;		_drawtext
  7488 ;;		_get_full_ADC
  7489 ;;		_printf
  7490 ;; This function is called by:
  7491 ;;		_Wait_One_Second
  7492 ;;		_Wait_One_Second_With_Beep
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text33
  7497  00E48A                     __ptext33:
  7498                           	opt stack 0
  7499  00E48A                     _update_LCD_misc:
  7500                           	opt stack 20
  7501                           
  7502                           ;Lab7.c: 615: int nStep = get_full_ADC();
  7503                           
  7504                           ;incstack = 0
  7505  00E48A  ECD8  F062         	call	_get_full_ADC	;wreg free
  7506  00E48E  C001  F066         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7507  00E492  C002  F067         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7508                           
  7509                           ;Lab7.c: 616: volt = nStep * 5 /1024.0;
  7510  00E496  C066  F00F         	movff	update_LCD_misc@nStep,___wmul@multiplier
  7511  00E49A  C067  F010         	movff	update_LCD_misc@nStep+1,___wmul@multiplier+1
  7512  00E49E  0E00               	movlw	0
  7513  00E4A0  6E12               	movwf	___wmul@multiplicand+1,c
  7514  00E4A2  0E05               	movlw	5
  7515  00E4A4  6E11               	movwf	___wmul@multiplicand,c
  7516  00E4A6  ECEB  F062         	call	___wmul	;wreg free
  7517  00E4AA  C00F  F015         	movff	?___wmul,___awtoft@c
  7518  00E4AE  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  7519  00E4B2  EC73  F063         	call	___awtoft	;wreg free
  7520  00E4B6  C015  F019         	movff	?___awtoft,___ftdiv@f1
  7521  00E4BA  C016  F01A         	movff	?___awtoft+1,___ftdiv@f1+1
  7522  00E4BE  C017  F01B         	movff	?___awtoft+2,___ftdiv@f1+2
  7523  00E4C2  0E00               	movlw	0
  7524  00E4C4  6E1C               	movwf	___ftdiv@f2,c
  7525  00E4C6  0E80               	movlw	128
  7526  00E4C8  6E1D               	movwf	___ftdiv@f2+1,c
  7527  00E4CA  0E44               	movlw	68
  7528  00E4CC  6E1E               	movwf	___ftdiv@f2+2,c
  7529  00E4CE  EC9F  F06A         	call	___ftdiv	;wreg free
  7530  00E4D2  C019  F0AD         	movff	?___ftdiv,_volt
  7531  00E4D6  C01A  F0AE         	movff	?___ftdiv+1,_volt+1
  7532  00E4DA  C01B  F0AF         	movff	?___ftdiv+2,_volt+2
  7533                           
  7534                           ;Lab7.c: 617: SW_MODE = volt < 2.25 ? 1:0;
  7535  00E4DE  C0AD  F001         	movff	_volt,___ftge@ff1
  7536  00E4E2  C0AE  F002         	movff	_volt+1,___ftge@ff1+1
  7537  00E4E6  C0AF  F003         	movff	_volt+2,___ftge@ff1+2
  7538  00E4EA  0E00               	movlw	0
  7539  00E4EC  6E04               	movwf	___ftge@ff2,c
  7540  00E4EE  0E10               	movlw	16
  7541  00E4F0  6E05               	movwf	___ftge@ff2+1,c
  7542  00E4F2  0E40               	movlw	64
  7543  00E4F4  6E06               	movwf	___ftge@ff2+2,c
  7544  00E4F6  ECBE  F067         	call	___ftge	;wreg free
  7545  00E4FA  B0D8               	btfsc	status,0,c
  7546  00E4FC  D002               	goto	u3830
  7547  00E4FE  0E01               	movlw	1
  7548  00E500  D001               	goto	u3840
  7549  00E502                     u3830:
  7550  00E502  0E00               	movlw	0
  7551  00E504                     u3840:
  7552  00E504  6E79               	movwf	_SW_MODE,c
  7553                           
  7554                           ;Lab7.c: 618: printf("Voltage = %f \r\n", volt);
  7555  00E506  0EB1               	movlw	low STR_17
  7556  00E508  6E44               	movwf	printf@f,c
  7557  00E50A  0EFF               	movlw	high STR_17
  7558  00E50C  6E45               	movwf	printf@f+1,c
  7559  00E50E  C0AD  F046         	movff	_volt,?_printf+2
  7560  00E512  C0AE  F047         	movff	_volt+1,?_printf+3
  7561  00E516  C0AF  F048         	movff	_volt+2,?_printf+4
  7562  00E51A  ECF8  F077         	call	_printf	;wreg free
  7563                           
  7564                           ;Lab7.c: 619: SW_EWPED = PORTAbits.RA3;
  7565  00E51E  0E00               	movlw	0
  7566  00E520  B680               	btfsc	3968,3,c	;volatile
  7567  00E522  0E01               	movlw	1
  7568  00E524  6E78               	movwf	_SW_EWPED,c
  7569                           
  7570                           ;Lab7.c: 620: SW_EWLT = PORTAbits.RA4;
  7571  00E526  0E00               	movlw	0
  7572  00E528  B880               	btfsc	3968,4,c	;volatile
  7573  00E52A  0E01               	movlw	1
  7574  00E52C  6E77               	movwf	_SW_EWLT,c
  7575                           
  7576                           ;Lab7.c: 621: SW_NSPED = PORTAbits.RA1;
  7577  00E52E  0E00               	movlw	0
  7578  00E530  B280               	btfsc	3968,1,c	;volatile
  7579  00E532  0E01               	movlw	1
  7580  00E534  6E7B               	movwf	_SW_NSPED,c
  7581                           
  7582                           ;Lab7.c: 622: SW_NSLT = PORTAbits.RA2;
  7583  00E536  0E00               	movlw	0
  7584  00E538  B480               	btfsc	3968,2,c	;volatile
  7585  00E53A  0E01               	movlw	1
  7586  00E53C  6E7A               	movwf	_SW_NSLT,c
  7587                           
  7588                           ;Lab7.c: 624: if (SW_MODE == 0) SW_MODE_Txt[0]= 'N'; else SW_MODE_Txt[0] = 'D';
  7589  00E53E  5079               	movf	_SW_MODE,w,c
  7590  00E540  A4D8               	btfss	status,2,c
  7591  00E542  D002               	goto	l4320
  7592  00E544  0E4E               	movlw	78
  7593  00E546  D001               	goto	L9
  7594  00E548                     l4320:
  7595  00E548  0E44               	movlw	68
  7596  00E54A                     L9:
  7597  00E54A  0100               	movlb	0	; () banked
  7598  00E54C  6FA7               	movwf	_SW_MODE_Txt& (0+255),b
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;Lab7.c: 625: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1';
  7602  00E54E  5078               	movf	_SW_EWPED,w,c
  7603  00E550  A4D8               	btfss	status,2,c
  7604  00E552  D002               	goto	l4324
  7605                           
  7606                           ; BSR set to: 0
  7607  00E554  0E30               	movlw	48
  7608  00E556  D001               	goto	L10
  7609  00E558                     l4324:
  7610                           
  7611                           ; BSR set to: 0
  7612  00E558  0E31               	movlw	49
  7613  00E55A                     L10:
  7614  00E55A  0100               	movlb	0	; () banked
  7615  00E55C  6FA5               	movwf	_SW_EWPED_Txt& (0+255),b
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;Lab7.c: 626: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  7619  00E55E  5077               	movf	_SW_EWLT,w,c
  7620  00E560  A4D8               	btfss	status,2,c
  7621  00E562  D002               	goto	l4328
  7622                           
  7623                           ; BSR set to: 0
  7624  00E564  0E30               	movlw	48
  7625  00E566  D001               	goto	L11
  7626  00E568                     l4328:
  7627                           
  7628                           ; BSR set to: 0
  7629  00E568  0E31               	movlw	49
  7630  00E56A                     L11:
  7631  00E56A  0100               	movlb	0	; () banked
  7632  00E56C  6FA3               	movwf	_SW_EWLT_Txt& (0+255),b
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;Lab7.c: 627: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1';
  7636  00E56E  507B               	movf	_SW_NSPED,w,c
  7637  00E570  A4D8               	btfss	status,2,c
  7638  00E572  D002               	goto	l4332
  7639                           
  7640                           ; BSR set to: 0
  7641  00E574  0E30               	movlw	48
  7642  00E576  D001               	goto	L12
  7643  00E578                     l4332:
  7644                           
  7645                           ; BSR set to: 0
  7646  00E578  0E31               	movlw	49
  7647  00E57A                     L12:
  7648  00E57A  0100               	movlb	0	; () banked
  7649  00E57C  6FAB               	movwf	_SW_NSPED_Txt& (0+255),b
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;Lab7.c: 628: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  7653  00E57E  507A               	movf	_SW_NSLT,w,c
  7654  00E580  A4D8               	btfss	status,2,c
  7655  00E582  D002               	goto	l4336
  7656                           
  7657                           ; BSR set to: 0
  7658  00E584  0E30               	movlw	48
  7659  00E586  D001               	goto	L13
  7660  00E588                     l4336:
  7661                           
  7662                           ; BSR set to: 0
  7663  00E588  0E31               	movlw	49
  7664  00E58A                     L13:
  7665  00E58A  0100               	movlb	0	; () banked
  7666  00E58C  6FA9               	movwf	_SW_NSLT_Txt& (0+255),b
  7667  00E58E  D000               	goto	l4338
  7668  00E590                     l4338:
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;Lab7.c: 630: drawtext(35,10, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  7672  00E590  0E0A               	movlw	10
  7673  00E592  6E29               	movwf	drawtext@y,c
  7674  00E594  0E9F               	movlw	low _Act_Mode_Txt
  7675  00E596  6E2A               	movwf	drawtext@_text,c
  7676  00E598  0E00               	movlw	high _Act_Mode_Txt
  7677  00E59A  6E2B               	movwf	drawtext@_text+1,c
  7678  00E59C  0EFF               	movlw	255
  7679  00E59E  6E2D               	movwf	drawtext@color+1,c
  7680  00E5A0  682C               	setf	drawtext@color,c
  7681  00E5A2  0E00               	movlw	0
  7682  00E5A4  6E2F               	movwf	drawtext@bg+1,c
  7683  00E5A6  0E00               	movlw	0
  7684  00E5A8  6E2E               	movwf	drawtext@bg,c
  7685  00E5AA  0E01               	movlw	1
  7686  00E5AC  6E30               	movwf	drawtext@size,c
  7687  00E5AE  0E23               	movlw	35
  7688  00E5B0  EC10  F06B         	call	_drawtext
  7689                           
  7690                           ;Lab7.c: 631: drawtext(6, 140+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  7691  00E5B4  0E95               	movlw	149
  7692  00E5B6  6E29               	movwf	drawtext@y,c
  7693  00E5B8  0EA5               	movlw	low _SW_EWPED_Txt
  7694  00E5BA  6E2A               	movwf	drawtext@_text,c
  7695  00E5BC  0E00               	movlw	high _SW_EWPED_Txt
  7696  00E5BE  6E2B               	movwf	drawtext@_text+1,c
  7697  00E5C0  0EFF               	movlw	255
  7698  00E5C2  6E2D               	movwf	drawtext@color+1,c
  7699  00E5C4  682C               	setf	drawtext@color,c
  7700  00E5C6  0E00               	movlw	0
  7701  00E5C8  6E2F               	movwf	drawtext@bg+1,c
  7702  00E5CA  0E00               	movlw	0
  7703  00E5CC  6E2E               	movwf	drawtext@bg,c
  7704  00E5CE  0E01               	movlw	1
  7705  00E5D0  6E30               	movwf	drawtext@size,c
  7706  00E5D2  0E06               	movlw	6
  7707  00E5D4  EC10  F06B         	call	_drawtext
  7708                           
  7709                           ;Lab7.c: 632: drawtext(32, 140+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  7710  00E5D8  0E95               	movlw	149
  7711  00E5DA  6E29               	movwf	drawtext@y,c
  7712  00E5DC  0EA3               	movlw	low _SW_EWLT_Txt
  7713  00E5DE  6E2A               	movwf	drawtext@_text,c
  7714  00E5E0  0E00               	movlw	high _SW_EWLT_Txt
  7715  00E5E2  6E2B               	movwf	drawtext@_text+1,c
  7716  00E5E4  0EFF               	movlw	255
  7717  00E5E6  6E2D               	movwf	drawtext@color+1,c
  7718  00E5E8  682C               	setf	drawtext@color,c
  7719  00E5EA  0E00               	movlw	0
  7720  00E5EC  6E2F               	movwf	drawtext@bg+1,c
  7721  00E5EE  0E00               	movlw	0
  7722  00E5F0  6E2E               	movwf	drawtext@bg,c
  7723  00E5F2  0E01               	movlw	1
  7724  00E5F4  6E30               	movwf	drawtext@size,c
  7725  00E5F6  0E20               	movlw	32
  7726  00E5F8  EC10  F06B         	call	_drawtext
  7727                           
  7728                           ;Lab7.c: 633: drawtext(58, 140+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  7729  00E5FC  0E95               	movlw	149
  7730  00E5FE  6E29               	movwf	drawtext@y,c
  7731  00E600  0EAB               	movlw	low _SW_NSPED_Txt
  7732  00E602  6E2A               	movwf	drawtext@_text,c
  7733  00E604  0E00               	movlw	high _SW_NSPED_Txt
  7734  00E606  6E2B               	movwf	drawtext@_text+1,c
  7735  00E608  0EFF               	movlw	255
  7736  00E60A  6E2D               	movwf	drawtext@color+1,c
  7737  00E60C  682C               	setf	drawtext@color,c
  7738  00E60E  0E00               	movlw	0
  7739  00E610  6E2F               	movwf	drawtext@bg+1,c
  7740  00E612  0E00               	movlw	0
  7741  00E614  6E2E               	movwf	drawtext@bg,c
  7742  00E616  0E01               	movlw	1
  7743  00E618  6E30               	movwf	drawtext@size,c
  7744  00E61A  0E3A               	movlw	58
  7745  00E61C  EC10  F06B         	call	_drawtext
  7746                           
  7747                           ;Lab7.c: 634: drawtext(87, 140+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  7748  00E620  0E95               	movlw	149
  7749  00E622  6E29               	movwf	drawtext@y,c
  7750  00E624  0EA9               	movlw	low _SW_NSLT_Txt
  7751  00E626  6E2A               	movwf	drawtext@_text,c
  7752  00E628  0E00               	movlw	high _SW_NSLT_Txt
  7753  00E62A  6E2B               	movwf	drawtext@_text+1,c
  7754  00E62C  0EFF               	movlw	255
  7755  00E62E  6E2D               	movwf	drawtext@color+1,c
  7756  00E630  682C               	setf	drawtext@color,c
  7757  00E632  0E00               	movlw	0
  7758  00E634  6E2F               	movwf	drawtext@bg+1,c
  7759  00E636  0E00               	movlw	0
  7760  00E638  6E2E               	movwf	drawtext@bg,c
  7761  00E63A  0E01               	movlw	1
  7762  00E63C  6E30               	movwf	drawtext@size,c
  7763  00E63E  0E57               	movlw	87
  7764  00E640  EC10  F06B         	call	_drawtext
  7765                           
  7766                           ;Lab7.c: 635: drawtext(112, 140+9, SW_MODE_Txt, 0xFFFF, 0x0000, 1);
  7767  00E644  0E95               	movlw	149
  7768  00E646  6E29               	movwf	drawtext@y,c
  7769  00E648  0EA7               	movlw	low _SW_MODE_Txt
  7770  00E64A  6E2A               	movwf	drawtext@_text,c
  7771  00E64C  0E00               	movlw	high _SW_MODE_Txt
  7772  00E64E  6E2B               	movwf	drawtext@_text+1,c
  7773  00E650  0EFF               	movlw	255
  7774  00E652  6E2D               	movwf	drawtext@color+1,c
  7775  00E654  682C               	setf	drawtext@color,c
  7776  00E656  0E00               	movlw	0
  7777  00E658  6E2F               	movwf	drawtext@bg+1,c
  7778  00E65A  0E00               	movlw	0
  7779  00E65C  6E2E               	movwf	drawtext@bg,c
  7780  00E65E  0E01               	movlw	1
  7781  00E660  6E30               	movwf	drawtext@size,c
  7782  00E662  0E70               	movlw	112
  7783  00E664  EC10  F06B         	call	_drawtext
  7784  00E668  0012               	return		;funcret
  7785  00E66A                     __end_of_update_LCD_misc:
  7786                           	opt stack 0
  7787                           tblptru	equ	0xFF8
  7788                           tblptrh	equ	0xFF7
  7789                           tblptrl	equ	0xFF6
  7790                           tablat	equ	0xFF5
  7791                           prodl	equ	0xFF3
  7792                           intcon2	equ	0xFF1
  7793                           postinc0	equ	0xFEE
  7794                           wreg	equ	0xFE8
  7795                           postdec1	equ	0xFE5
  7796                           fsr1l	equ	0xFE1
  7797                           status	equ	0xFD8
  7798                           
  7799 ;; *************** function _printf *****************
  7800 ;; Defined at:
  7801 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  f               2   67[COMRAM] PTR const unsigned char 
  7804 ;;		 -> STR_17(16), 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  tmpval          4   93[COMRAM] struct .
  7807 ;;  val             4   87[COMRAM] unsigned long 
  7808 ;;  fval            3   97[COMRAM] unsigned long 
  7809 ;;  cp              3    0        PTR const unsigned char 
  7810 ;;  exp             2   91[COMRAM] int 
  7811 ;;  prec            2   85[COMRAM] int 
  7812 ;;  flag            2   83[COMRAM] unsigned short 
  7813 ;;  ap              2   81[COMRAM] PTR void [1]
  7814 ;;		 -> ?_printf(2), 
  7815 ;;  len             2    0        unsigned int 
  7816 ;;  width           2    0        int 
  7817 ;;  c               1  100[COMRAM] char 
  7818 ;;  d               1    0        unsigned char 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  2   67[COMRAM] int 
  7821 ;; Registers used:
  7822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7828 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;Total ram usage:       34 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:    3
  7835 ;; This function calls:
  7836 ;;		___awdiv
  7837 ;;		___ftadd
  7838 ;;		___ftge
  7839 ;;		___ftmul
  7840 ;;		___ftneg
  7841 ;;		___ftsub
  7842 ;;		___fttol
  7843 ;;		___lldiv
  7844 ;;		___llmod
  7845 ;;		___lltoft
  7846 ;;		___wmul
  7847 ;;		__div_to_l_
  7848 ;;		__tdiv_to_l_
  7849 ;;		_fround
  7850 ;;		_putch
  7851 ;;		_scale
  7852 ;; This function is called by:
  7853 ;;		_update_LCD_misc
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text34
  7858  00EFF0                     __ptext34:
  7859                           	opt stack 0
  7860  00EFF0                     _printf:
  7861                           	opt stack 23
  7862                           
  7863                           ;doprnt.c: 466: va_list ap;
  7864                           ;doprnt.c: 499: signed char c;
  7865                           ;doprnt.c: 501: int width;
  7866                           ;doprnt.c: 504: int prec;
  7867                           ;doprnt.c: 508: unsigned short flag;
  7868                           ;doprnt.c: 515: char d;
  7869                           ;doprnt.c: 516: double fval;
  7870                           ;doprnt.c: 517: int exp;
  7871                           ;doprnt.c: 523: union {
  7872                           ;doprnt.c: 524: unsigned long vd;
  7873                           ;doprnt.c: 525: double integ;
  7874                           ;doprnt.c: 526: } tmpval;
  7875                           ;doprnt.c: 528: unsigned long val;
  7876                           ;doprnt.c: 529: unsigned len;
  7877                           ;doprnt.c: 530: const char * cp;
  7878                           ;doprnt.c: 533: *ap = __va_start();
  7879                           
  7880                           ;incstack = 0
  7881  00EFF0  0E46               	movlw	low (?_printf+2)
  7882  00EFF2  6E52               	movwf	printf@ap,c
  7883  00EFF4  0E00               	movlw	high (?_printf+2)
  7884  00EFF6  6E53               	movwf	printf@ap+1,c
  7885                           
  7886                           ;doprnt.c: 536: while(c = *f++) {
  7887  00EFF8  D2FF               	goto	l4164
  7888  00EFFA                     l4016:
  7889                           
  7890                           ;doprnt.c: 538: if(c != '%')
  7891  00EFFA  0E25               	movlw	37
  7892  00EFFC  1865               	xorwf	printf@c,w,c
  7893  00EFFE  B4D8               	btfsc	status,2,c
  7894  00F000  D004               	goto	l4020
  7895                           
  7896                           ;doprnt.c: 540: {
  7897                           ;doprnt.c: 541: (putch(c) );
  7898  00F002  5065               	movf	printf@c,w,c
  7899  00F004  EC63  F062         	call	_putch
  7900                           
  7901                           ;doprnt.c: 542: continue;
  7902  00F008  D2F7               	goto	l4164
  7903  00F00A                     l4020:
  7904                           
  7905                           ;doprnt.c: 543: }
  7906                           ;doprnt.c: 548: flag = 0;
  7907  00F00A  0E00               	movlw	0
  7908  00F00C  6E55               	movwf	printf@flag+1,c
  7909  00F00E  0E00               	movlw	0
  7910  00F010  6E54               	movwf	printf@flag,c
  7911                           
  7912                           ;doprnt.c: 635: switch(c = *f++) {
  7913  00F012  D005               	goto	l4026
  7914                           
  7915                           ;doprnt.c: 638: goto alldone;
  7916                           
  7917                           ;doprnt.c: 637: case 0:
  7918  00F014  D2FF               	goto	l599
  7919  00F016                     l4022:
  7920                           
  7921                           ;doprnt.c: 663: flag |= 0x400;
  7922  00F016  8455               	bsf	printf@flag+1,2,c
  7923                           
  7924                           ;doprnt.c: 664: break;
  7925  00F018  D013               	goto	l4028
  7926                           
  7927                           ;doprnt.c: 813: continue;
  7928                           
  7929                           ;doprnt.c: 802: default:
  7930  00F01A  D2EE               	goto	l4164
  7931                           
  7932                           ;doprnt.c: 822: }
  7933  00F01C  D011               	goto	l4028
  7934  00F01E                     l4026:
  7935  00F01E  C044  FFF6         	movff	printf@f,tblptrl
  7936  00F022  C045  FFF7         	movff	printf@f+1,tblptrh
  7937  00F026  4A44               	infsnz	printf@f,f,c
  7938  00F028  2A45               	incf	printf@f+1,f,c
  7939  00F02A                     	if	0	;tblptru may be non-zero
  7940  00F02A                     	endif
  7941  00F02A                     	if	0	;tblptru may be non-zero
  7942  00F02A                     	endif
  7943  00F02A  0008               	tblrd		*
  7944  00F02C  CFF5 F065          	movff	tablat,printf@c
  7945  00F030  5065               	movf	printf@c,w,c
  7946                           
  7947                           ; Switch size 1, requested type "space"
  7948                           ; Number of cases is 2, Range of values is 0 to 102
  7949                           ; switch strategies available:
  7950                           ; Name         Instructions Cycles
  7951                           ; simple_byte            7     4 (average)
  7952                           ;	Chosen strategy is simple_byte
  7953  00F032  0A00               	xorlw	0	; case 0
  7954  00F034  B4D8               	btfsc	status,2,c
  7955  00F036  D2EE               	goto	l599
  7956  00F038  0A66               	xorlw	102	; case 102
  7957  00F03A  B4D8               	btfsc	status,2,c
  7958  00F03C  D7EC               	goto	l4022
  7959  00F03E  D2DC               	goto	l4164
  7960  00F040                     l4028:
  7961                           
  7962                           ;doprnt.c: 825: if(flag & (0x700)) {
  7963  00F040  0E07               	movlw	7
  7964  00F042  1455               	andwf	printf@flag+1,w,c
  7965  00F044  B4D8               	btfsc	status,2,c
  7966  00F046  D2CA               	goto	l4160
  7967                           
  7968                           ;doprnt.c: 829: prec = 6;
  7969  00F048  0E00               	movlw	0
  7970  00F04A  6E57               	movwf	printf@prec+1,c
  7971  00F04C  0E06               	movlw	6
  7972  00F04E  6E56               	movwf	printf@prec,c
  7973                           
  7974                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  7975  00F050  C052  FFD9         	movff	printf@ap,fsr2l
  7976  00F054  C053  FFDA         	movff	printf@ap+1,fsr2h
  7977  00F058  CFDE F062          	movff	postinc2,printf@fval
  7978  00F05C  CFDE F063          	movff	postinc2,printf@fval+1
  7979  00F060  CFDD F064          	movff	postdec2,printf@fval+2
  7980  00F064  0E03               	movlw	3
  7981  00F066  2652               	addwf	printf@ap,f,c
  7982  00F068  0E00               	movlw	0
  7983  00F06A  2253               	addwfc	printf@ap+1,f,c
  7984                           
  7985                           ;doprnt.c: 831: if(fval < 0.0) {
  7986  00F06C  AE64               	btfss	printf@fval+2,7,c
  7987  00F06E  D011               	goto	l4042
  7988                           
  7989                           ;doprnt.c: 832: fval = -fval;
  7990  00F070  C062  F001         	movff	printf@fval,___ftneg@f1
  7991  00F074  C063  F002         	movff	printf@fval+1,___ftneg@f1+1
  7992  00F078  C064  F003         	movff	printf@fval+2,___ftneg@f1+2
  7993  00F07C  ECC6  F062         	call	___ftneg	;wreg free
  7994  00F080  C001  F062         	movff	?___ftneg,printf@fval
  7995  00F084  C002  F063         	movff	?___ftneg+1,printf@fval+1
  7996  00F088  C003  F064         	movff	?___ftneg+2,printf@fval+2
  7997                           
  7998                           ;doprnt.c: 833: flag |= 0x03;
  7999  00F08C  0E03               	movlw	3
  8000  00F08E  1254               	iorwf	printf@flag,f,c
  8001  00F090  D000               	goto	l4042
  8002  00F092                     l4042:
  8003                           
  8004                           ;doprnt.c: 834: }
  8005                           ;doprnt.c: 835: exp = 0;
  8006  00F092  0E00               	movlw	0
  8007  00F094  6E5D               	movwf	printf@exp+1,c
  8008  00F096  0E00               	movlw	0
  8009  00F098  6E5C               	movwf	printf@exp,c
  8010                           
  8011                           ;doprnt.c: 836: if( fval!=0) {
  8012  00F09A  5062               	movf	printf@fval,w,c
  8013  00F09C  1063               	iorwf	printf@fval+1,w,c
  8014  00F09E  1064               	iorwf	printf@fval+2,w,c
  8015  00F0A0  B4D8               	btfsc	status,2,c
  8016  00F0A2  D085               	goto	l4070
  8017                           
  8018                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  8019  00F0A4  0E82               	movlw	130
  8020  00F0A6  6E49               	movwf	??_printf& (0+255),c
  8021  00F0A8  0EFF               	movlw	255
  8022  00F0AA  6E4A               	movwf	(??_printf+1)& (0+255),c
  8023  00F0AC  C062  F04B         	movff	printf@fval,??_printf+2
  8024  00F0B0  C063  F04C         	movff	printf@fval+1,??_printf+3
  8025  00F0B4  C064  F04D         	movff	printf@fval+2,??_printf+4
  8026  00F0B8  C065  F04E         	movff	printf@fval+3,??_printf+5
  8027  00F0BC  0E10               	movlw	16
  8028  00F0BE  D005               	goto	u3500
  8029  00F0C0                     u3505:
  8030  00F0C0  90D8               	bcf	status,0,c
  8031  00F0C2  324E               	rrcf	??_printf+5,f,c
  8032  00F0C4  324D               	rrcf	??_printf+4,f,c
  8033  00F0C6  324C               	rrcf	??_printf+3,f,c
  8034  00F0C8  324B               	rrcf	??_printf+2,f,c
  8035  00F0CA                     u3500:
  8036  00F0CA  2EE8               	decfsz	wreg,f,c
  8037  00F0CC  D7F9               	goto	u3505
  8038  00F0CE  504B               	movf	??_printf+2,w,c
  8039  00F0D0  2449               	addwf	??_printf,w,c
  8040  00F0D2  6E5C               	movwf	printf@exp,c
  8041  00F0D4  0E00               	movlw	0
  8042  00F0D6  204A               	addwfc	??_printf+1,w,c
  8043  00F0D8  6E5D               	movwf	printf@exp+1,c
  8044                           
  8045                           ;doprnt.c: 838: exp--;
  8046  00F0DA  065C               	decf	printf@exp,f,c
  8047  00F0DC  A0D8               	btfss	status,0,c
  8048  00F0DE  065D               	decf	printf@exp+1,f,c
  8049                           
  8050                           ;doprnt.c: 839: exp *= 3;
  8051  00F0E0  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  8052  00F0E4  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  8053  00F0E8  0E00               	movlw	0
  8054  00F0EA  6E12               	movwf	___wmul@multiplicand+1,c
  8055  00F0EC  0E03               	movlw	3
  8056  00F0EE  6E11               	movwf	___wmul@multiplicand,c
  8057  00F0F0  ECEB  F062         	call	___wmul	;wreg free
  8058  00F0F4  C00F  F05C         	movff	?___wmul,printf@exp
  8059  00F0F8  C010  F05D         	movff	?___wmul+1,printf@exp+1
  8060                           
  8061                           ;doprnt.c: 840: exp /= 10;
  8062  00F0FC  C05C  F007         	movff	printf@exp,___awdiv@dividend
  8063  00F100  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  8064  00F104  0E00               	movlw	0
  8065  00F106  6E0A               	movwf	___awdiv@divisor+1,c
  8066  00F108  0E0A               	movlw	10
  8067  00F10A  6E09               	movwf	___awdiv@divisor,c
  8068  00F10C  EC09  F068         	call	___awdiv	;wreg free
  8069  00F110  C007  F05C         	movff	?___awdiv,printf@exp
  8070  00F114  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  8071                           
  8072                           ;doprnt.c: 841: if(exp < 0)
  8073  00F118  AE5D               	btfss	printf@exp+1,7,c
  8074  00F11A  D004               	goto	l4058
  8075                           
  8076                           ;doprnt.c: 842: exp--;
  8077  00F11C  065C               	decf	printf@exp,f,c
  8078  00F11E  A0D8               	btfss	status,0,c
  8079  00F120  065D               	decf	printf@exp+1,f,c
  8080  00F122  D000               	goto	l4058
  8081  00F124                     l4058:
  8082                           
  8083                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  8084  00F124  505C               	movf	printf@exp,w,c
  8085  00F126  0800               	sublw	0
  8086  00F128  EC08  F076         	call	_scale
  8087  00F12C  C028  F05E         	movff	?_scale,printf@tmpval
  8088  00F130  C029  F05F         	movff	?_scale+1,printf@tmpval+1
  8089  00F134  C02A  F060         	movff	?_scale+2,printf@tmpval+2
  8090                           
  8091                           ;doprnt.c: 847: tmpval.integ *= fval;
  8092  00F138  C05E  F019         	movff	printf@tmpval,___ftmul@f1
  8093  00F13C  C05F  F01A         	movff	printf@tmpval+1,___ftmul@f1+1
  8094  00F140  C060  F01B         	movff	printf@tmpval+2,___ftmul@f1+2
  8095  00F144  C062  F01C         	movff	printf@fval,___ftmul@f2
  8096  00F148  C063  F01D         	movff	printf@fval+1,___ftmul@f2+1
  8097  00F14C  C064  F01E         	movff	printf@fval+2,___ftmul@f2+2
  8098  00F150  EC6D  F06C         	call	___ftmul	;wreg free
  8099  00F154  C019  F05E         	movff	?___ftmul,printf@tmpval
  8100  00F158  C01A  F05F         	movff	?___ftmul+1,printf@tmpval+1
  8101  00F15C  C01B  F060         	movff	?___ftmul+2,printf@tmpval+2
  8102                           
  8103                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  8104  00F160  C05E  F001         	movff	printf@tmpval,___ftge@ff1
  8105  00F164  C05F  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  8106  00F168  C060  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  8107  00F16C  0E00               	movlw	0
  8108  00F16E  6E04               	movwf	___ftge@ff2,c
  8109  00F170  0E80               	movlw	128
  8110  00F172  6E05               	movwf	___ftge@ff2+1,c
  8111  00F174  0E3F               	movlw	63
  8112  00F176  6E06               	movwf	___ftge@ff2+2,c
  8113  00F178  ECBE  F067         	call	___ftge	;wreg free
  8114  00F17C  B0D8               	btfsc	status,0,c
  8115  00F17E  D004               	goto	l4066
  8116                           
  8117                           ;doprnt.c: 849: exp--;
  8118  00F180  065C               	decf	printf@exp,f,c
  8119  00F182  A0D8               	btfss	status,0,c
  8120  00F184  065D               	decf	printf@exp+1,f,c
  8121  00F186  D013               	goto	l4070
  8122  00F188                     l4066:
  8123                           
  8124                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  8125  00F188  C05E  F001         	movff	printf@tmpval,___ftge@ff1
  8126  00F18C  C05F  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  8127  00F190  C060  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  8128  00F194  0E00               	movlw	0
  8129  00F196  6E04               	movwf	___ftge@ff2,c
  8130  00F198  0E20               	movlw	32
  8131  00F19A  6E05               	movwf	___ftge@ff2+1,c
  8132  00F19C  0E41               	movlw	65
  8133  00F19E  6E06               	movwf	___ftge@ff2+2,c
  8134  00F1A0  ECBE  F067         	call	___ftge	;wreg free
  8135  00F1A4  A0D8               	btfss	status,0,c
  8136  00F1A6  D003               	goto	l4070
  8137                           
  8138                           ;doprnt.c: 851: exp++;
  8139  00F1A8  4A5C               	infsnz	printf@exp,f,c
  8140  00F1AA  2A5D               	incf	printf@exp+1,f,c
  8141  00F1AC  D000               	goto	l4070
  8142  00F1AE                     l4070:
  8143                           
  8144                           ;doprnt.c: 852: }
  8145                           ;doprnt.c: 1112: if(prec <= 12)
  8146  00F1AE  BE57               	btfsc	printf@prec+1,7,c
  8147  00F1B0  D006               	goto	l4072
  8148  00F1B2  5057               	movf	printf@prec+1,w,c
  8149  00F1B4  E11C               	bnz	l4074
  8150  00F1B6  0E0D               	movlw	13
  8151  00F1B8  5C56               	subwf	printf@prec,w,c
  8152  00F1BA  B0D8               	btfsc	status,0,c
  8153  00F1BC  D018               	goto	l4074
  8154  00F1BE                     l4072:
  8155                           
  8156                           ;doprnt.c: 1113: fval += fround(prec);
  8157  00F1BE  C062  F032         	movff	printf@fval,___ftadd@f1
  8158  00F1C2  C063  F033         	movff	printf@fval+1,___ftadd@f1+1
  8159  00F1C6  C064  F034         	movff	printf@fval+2,___ftadd@f1+2
  8160  00F1CA  5056               	movf	printf@prec,w,c
  8161  00F1CC  EC35  F073         	call	_fround
  8162  00F1D0  C028  F035         	movff	?_fround,___ftadd@f2
  8163  00F1D4  C029  F036         	movff	?_fround+1,___ftadd@f2+1
  8164  00F1D8  C02A  F037         	movff	?_fround+2,___ftadd@f2+2
  8165  00F1DC  EC63  F071         	call	___ftadd	;wreg free
  8166  00F1E0  C032  F062         	movff	?___ftadd,printf@fval
  8167  00F1E4  C033  F063         	movff	?___ftadd+1,printf@fval+1
  8168  00F1E8  C034  F064         	movff	?___ftadd+2,printf@fval+2
  8169  00F1EC  D000               	goto	l4074
  8170  00F1EE                     l4074:
  8171                           
  8172                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8173  00F1EE  BE5D               	btfsc	printf@exp+1,7,c
  8174  00F1F0  D006               	goto	l4076
  8175  00F1F2  505D               	movf	printf@exp+1,w,c
  8176  00F1F4  E120               	bnz	l4082
  8177  00F1F6  0E0A               	movlw	10
  8178  00F1F8  5C5C               	subwf	printf@exp,w,c
  8179  00F1FA  B0D8               	btfsc	status,0,c
  8180  00F1FC  D01C               	goto	l4082
  8181  00F1FE                     l4076:
  8182  00F1FE  5062               	movf	printf@fval,w,c
  8183  00F200  1063               	iorwf	printf@fval+1,w,c
  8184  00F202  1064               	iorwf	printf@fval+2,w,c
  8185  00F204  B4D8               	btfsc	status,2,c
  8186  00F206  D06D               	goto	l4096
  8187  00F208  C062  F02F         	movff	printf@fval,___fttol@f1
  8188  00F20C  C063  F030         	movff	printf@fval+1,___fttol@f1+1
  8189  00F210  C064  F031         	movff	printf@fval+2,___fttol@f1+2
  8190  00F214  EC81  F06B         	call	___fttol	;wreg free
  8191  00F218  502F               	movf	?___fttol,w,c
  8192  00F21A  1030               	iorwf	?___fttol+1,w,c
  8193  00F21C  1031               	iorwf	?___fttol+2,w,c
  8194  00F21E  1032               	iorwf	?___fttol+3,w,c
  8195  00F220  B4D8               	btfsc	status,2,c
  8196  00F222  BE5D               	btfsc	printf@exp+1,7,c
  8197  00F224  D05E               	goto	l4096
  8198  00F226  505D               	movf	printf@exp+1,w,c
  8199  00F228  E106               	bnz	l4082
  8200  00F22A  0E02               	movlw	2
  8201  00F22C  5C5C               	subwf	printf@exp,w,c
  8202  00F22E  B0D8               	btfsc	status,0,c
  8203  00F230  D002               	goto	l4082
  8204  00F232  D057               	goto	l4096
  8205  00F234  D000               	goto	l4082
  8206  00F236                     l4082:
  8207                           
  8208                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  8209  00F236  C05E  F001         	movff	printf@tmpval,___ftge@ff1
  8210  00F23A  C05F  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  8211  00F23E  C060  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  8212  00F242  0E70               	movlw	112
  8213  00F244  6E04               	movwf	___ftge@ff2,c
  8214  00F246  0E89               	movlw	137
  8215  00F248  6E05               	movwf	___ftge@ff2+1,c
  8216  00F24A  0E40               	movlw	64
  8217  00F24C  6E06               	movwf	___ftge@ff2+2,c
  8218  00F24E  ECBE  F067         	call	___ftge	;wreg free
  8219  00F252  B0D8               	btfsc	status,0,c
  8220  00F254  D002               	goto	l4086
  8221                           
  8222                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8223  00F256  0EF7               	movlw	247
  8224  00F258  D001               	goto	L14
  8225  00F25A                     l4086:
  8226                           
  8227                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8228  00F25A  0EF8               	movlw	248
  8229  00F25C                     L14:
  8230  00F25C  265C               	addwf	printf@exp,f,c
  8231  00F25E  0EFF               	movlw	255
  8232  00F260  225D               	addwfc	printf@exp+1,f,c
  8233  00F262  D000               	goto	l4088
  8234  00F264                     l4088:
  8235                           
  8236                           ;doprnt.c: 1124: }
  8237                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  8238  00F264  505C               	movf	printf@exp,w,c
  8239  00F266  EC08  F076         	call	_scale
  8240  00F26A  C028  F05E         	movff	?_scale,printf@tmpval
  8241  00F26E  C029  F05F         	movff	?_scale+1,printf@tmpval+1
  8242  00F272  C02A  F060         	movff	?_scale+2,printf@tmpval+2
  8243                           
  8244                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  8245  00F276  D017               	goto	l4092
  8246  00F278  C062  F001         	movff	printf@fval,__div_to_l_@f1
  8247  00F27C  C063  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  8248  00F280  C064  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  8249  00F284  C05E  F004         	movff	printf@tmpval,__div_to_l_@f2
  8250  00F288  C05F  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  8251  00F28C  C060  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  8252  00F290  ECE9  F06C         	call	__div_to_l_	;wreg free
  8253  00F294  C001  F058         	movff	?__div_to_l_,printf@val
  8254  00F298  C002  F059         	movff	?__div_to_l_+1,printf@val+1
  8255  00F29C  C003  F05A         	movff	?__div_to_l_+2,printf@val+2
  8256  00F2A0  C004  F05B         	movff	?__div_to_l_+3,printf@val+3
  8257  00F2A4  D017               	goto	l4094
  8258  00F2A6                     l4092:
  8259  00F2A6  C062  F001         	movff	printf@fval,__tdiv_to_l_@f1
  8260  00F2AA  C063  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  8261  00F2AE  C064  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  8262  00F2B2  C05E  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  8263  00F2B6  C05F  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  8264  00F2BA  C060  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  8265  00F2BE  EC6E  F06D         	call	__tdiv_to_l_	;wreg free
  8266  00F2C2  C001  F058         	movff	?__tdiv_to_l_,printf@val
  8267  00F2C6  C002  F059         	movff	?__tdiv_to_l_+1,printf@val+1
  8268  00F2CA  C003  F05A         	movff	?__tdiv_to_l_+2,printf@val+2
  8269  00F2CE  C004  F05B         	movff	?__tdiv_to_l_+3,printf@val+3
  8270  00F2D2  D000               	goto	l4094
  8271  00F2D4                     l4094:
  8272                           
  8273                           ;doprnt.c: 1129: fval = 0.0;
  8274  00F2D4  0E00               	movlw	0
  8275  00F2D6  6E62               	movwf	printf@fval,c
  8276  00F2D8  0E00               	movlw	0
  8277  00F2DA  6E63               	movwf	printf@fval+1,c
  8278  00F2DC  0E00               	movlw	0
  8279  00F2DE  6E64               	movwf	printf@fval+2,c
  8280                           
  8281                           ;doprnt.c: 1130: } else {
  8282  00F2E0  D033               	goto	l4100
  8283  00F2E2                     l4096:
  8284                           
  8285                           ;doprnt.c: 1131: val = (unsigned long)fval;
  8286  00F2E2  C062  F02F         	movff	printf@fval,___fttol@f1
  8287  00F2E6  C063  F030         	movff	printf@fval+1,___fttol@f1+1
  8288  00F2EA  C064  F031         	movff	printf@fval+2,___fttol@f1+2
  8289  00F2EE  EC81  F06B         	call	___fttol	;wreg free
  8290  00F2F2  C02F  F058         	movff	?___fttol,printf@val
  8291  00F2F6  C030  F059         	movff	?___fttol+1,printf@val+1
  8292  00F2FA  C031  F05A         	movff	?___fttol+2,printf@val+2
  8293  00F2FE  C032  F05B         	movff	?___fttol+3,printf@val+3
  8294                           
  8295                           ;doprnt.c: 1132: fval -= (double)val;
  8296  00F302  C062  F03E         	movff	printf@fval,___ftsub@f1
  8297  00F306  C063  F03F         	movff	printf@fval+1,___ftsub@f1+1
  8298  00F30A  C064  F040         	movff	printf@fval+2,___ftsub@f1+2
  8299  00F30E  C058  F009         	movff	printf@val,___lltoft@c
  8300  00F312  C059  F00A         	movff	printf@val+1,___lltoft@c+1
  8301  00F316  C05A  F00B         	movff	printf@val+2,___lltoft@c+2
  8302  00F31A  C05B  F00C         	movff	printf@val+3,___lltoft@c+3
  8303  00F31E  EC56  F065         	call	___lltoft	;wreg free
  8304  00F322  C009  F041         	movff	?___lltoft,___ftsub@f2
  8305  00F326  C00A  F042         	movff	?___lltoft+1,___ftsub@f2+1
  8306  00F32A  C00B  F043         	movff	?___lltoft+2,___ftsub@f2+2
  8307  00F32E  EC0E  F064         	call	___ftsub	;wreg free
  8308  00F332  C03E  F062         	movff	?___ftsub,printf@fval
  8309  00F336  C03F  F063         	movff	?___ftsub+1,printf@fval+1
  8310  00F33A  C040  F064         	movff	?___ftsub+2,printf@fval+2
  8311                           
  8312                           ;doprnt.c: 1133: exp = 0;
  8313  00F33E  0E00               	movlw	0
  8314  00F340  6E5D               	movwf	printf@exp+1,c
  8315  00F342  0E00               	movlw	0
  8316  00F344  6E5C               	movwf	printf@exp,c
  8317  00F346  D000               	goto	l4100
  8318  00F348                     l4100:
  8319                           
  8320                           ;doprnt.c: 1134: }
  8321                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  8322  00F348  0E01               	movlw	1
  8323  00F34A  6E65               	movwf	printf@c,c
  8324  00F34C                     l4102:
  8325  00F34C  0E0A               	movlw	10
  8326  00F34E  1865               	xorwf	printf@c,w,c
  8327  00F350  B4D8               	btfsc	status,2,c
  8328  00F352  D01C               	goto	l4114
  8329  00F354  D001               	goto	l4106
  8330  00F356  D01A               	goto	l4114
  8331  00F358                     l4106:
  8332                           
  8333                           ;doprnt.c: 1137: if(val < dpowers[c])
  8334  00F358  5065               	movf	printf@c,w,c
  8335  00F35A  0D04               	mullw	4
  8336  00F35C  0E10               	movlw	low _dpowers
  8337  00F35E  24F3               	addwf	prodl,w,c
  8338  00F360  6EF6               	movwf	tblptrl,c
  8339  00F362  0EFF               	movlw	high _dpowers
  8340  00F364  20F4               	addwfc	prodh,w,c
  8341  00F366  6EF7               	movwf	tblptrh,c
  8342  00F368                     	if	0	;There are less than 3 active tblptr bytes
  8343  00F368                     	endif
  8344  00F368  0009               	tblrd		*+
  8345  00F36A  50F5               	movf	tablat,w,c
  8346  00F36C  5C58               	subwf	printf@val,w,c
  8347  00F36E  0009               	tblrd		*+
  8348  00F370  50F5               	movf	tablat,w,c
  8349  00F372  5859               	subwfb	printf@val+1,w,c
  8350  00F374  0009               	tblrd		*+
  8351  00F376  50F5               	movf	tablat,w,c
  8352  00F378  585A               	subwfb	printf@val+2,w,c
  8353  00F37A  0009               	tblrd		*+
  8354  00F37C  50F5               	movf	tablat,w,c
  8355  00F37E  585B               	subwfb	printf@val+3,w,c
  8356  00F380  A0D8               	btfss	status,0,c
  8357  00F382  D004               	goto	l4114
  8358  00F384  D001               	goto	l4110
  8359                           
  8360                           ;doprnt.c: 1138: break;
  8361  00F386  D002               	goto	l4114
  8362  00F388                     l4110:
  8363  00F388  2A65               	incf	printf@c,f,c
  8364  00F38A  D7E0               	goto	l4102
  8365  00F38C                     l4114:
  8366                           
  8367                           ;doprnt.c: 1175: {
  8368                           ;doprnt.c: 1188: if(flag & 0x03)
  8369  00F38C  0E03               	movlw	3
  8370  00F38E  1454               	andwf	printf@flag,w,c
  8371  00F390  6E49               	movwf	??_printf& (0+255),c
  8372  00F392  0E00               	movlw	0
  8373  00F394  1455               	andwf	printf@flag+1,w,c
  8374  00F396  6E4A               	movwf	(??_printf+1)& (0+255),c
  8375  00F398  5049               	movf	??_printf,w,c
  8376  00F39A  104A               	iorwf	??_printf+1,w,c
  8377  00F39C  B4D8               	btfsc	status,2,c
  8378  00F39E  D049               	goto	l4124
  8379                           
  8380                           ;doprnt.c: 1190: (putch('-') );
  8381  00F3A0  0E2D               	movlw	45
  8382  00F3A2  EC63  F062         	call	_putch
  8383                           
  8384                           ;doprnt.c: 1195: }
  8385                           ;doprnt.c: 1196: while(c--) {
  8386  00F3A6  D045               	goto	l4124
  8387  00F3A8                     l4118:
  8388                           
  8389                           ;doprnt.c: 1200: {
  8390                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  8391  00F3A8  C058  F001         	movff	printf@val,___lldiv@dividend
  8392  00F3AC  C059  F002         	movff	printf@val+1,___lldiv@dividend+1
  8393  00F3B0  C05A  F003         	movff	printf@val+2,___lldiv@dividend+2
  8394  00F3B4  C05B  F004         	movff	printf@val+3,___lldiv@dividend+3
  8395  00F3B8  5065               	movf	printf@c,w,c
  8396  00F3BA  0D04               	mullw	4
  8397  00F3BC  0E10               	movlw	low _dpowers
  8398  00F3BE  24F3               	addwf	prodl,w,c
  8399  00F3C0  6EF6               	movwf	tblptrl,c
  8400  00F3C2  0EFF               	movlw	high _dpowers
  8401  00F3C4  20F4               	addwfc	prodh,w,c
  8402  00F3C6  6EF7               	movwf	tblptrh,c
  8403  00F3C8                     	if	0	;There are less than 3 active tblptr bytes
  8404  00F3C8                     	endif
  8405  00F3C8  0009               	tblrd		*+
  8406  00F3CA  CFF5 F005          	movff	tablat,___lldiv@divisor
  8407  00F3CE  0009               	tblrd		*+
  8408  00F3D0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8409  00F3D4  0009               	tblrd		*+
  8410  00F3D6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8411  00F3DA  000A               	tblrd		*-
  8412  00F3DC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8413  00F3E0  EC78  F067         	call	___lldiv	;wreg free
  8414  00F3E4  C001  F05E         	movff	?___lldiv,printf@tmpval
  8415  00F3E8  C002  F05F         	movff	?___lldiv+1,printf@tmpval+1
  8416  00F3EC  C003  F060         	movff	?___lldiv+2,printf@tmpval+2
  8417  00F3F0  C004  F061         	movff	?___lldiv+3,printf@tmpval+3
  8418                           
  8419                           ;doprnt.c: 1202: tmpval.vd %= 10;
  8420  00F3F4  C05E  F001         	movff	printf@tmpval,___llmod@dividend
  8421  00F3F8  C05F  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  8422  00F3FC  C060  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  8423  00F400  C061  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  8424  00F404  0E0A               	movlw	10
  8425  00F406  6E05               	movwf	___llmod@divisor,c
  8426  00F408  0E00               	movlw	0
  8427  00F40A  6E06               	movwf	___llmod@divisor+1,c
  8428  00F40C  0E00               	movlw	0
  8429  00F40E  6E07               	movwf	___llmod@divisor+2,c
  8430  00F410  0E00               	movlw	0
  8431  00F412  6E08               	movwf	___llmod@divisor+3,c
  8432  00F414  ECB9  F065         	call	___llmod	;wreg free
  8433  00F418  C001  F05E         	movff	?___llmod,printf@tmpval
  8434  00F41C  C002  F05F         	movff	?___llmod+1,printf@tmpval+1
  8435  00F420  C003  F060         	movff	?___llmod+2,printf@tmpval+2
  8436  00F424  C004  F061         	movff	?___llmod+3,printf@tmpval+3
  8437                           
  8438                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  8439  00F428  505E               	movf	printf@tmpval,w,c
  8440  00F42A  0F30               	addlw	48
  8441  00F42C  EC63  F062         	call	_putch
  8442  00F430  D000               	goto	l4124
  8443  00F432                     l4124:
  8444  00F432  0665               	decf	printf@c,f,c
  8445  00F434  2865               	incf	printf@c,w,c
  8446  00F436  B4D8               	btfsc	status,2,c
  8447  00F438  D009               	goto	l4130
  8448  00F43A  D7B6               	goto	l4118
  8449                           
  8450                           ;doprnt.c: 1204: }
  8451                           ;doprnt.c: 1206: }
  8452                           ;doprnt.c: 1207: while(exp > 0) {
  8453  00F43C  D007               	goto	l4130
  8454  00F43E                     l4126:
  8455                           
  8456                           ;doprnt.c: 1208: (putch('0') );
  8457  00F43E  0E30               	movlw	48
  8458  00F440  EC63  F062         	call	_putch
  8459                           
  8460                           ;doprnt.c: 1209: exp--;
  8461  00F444  065C               	decf	printf@exp,f,c
  8462  00F446  A0D8               	btfss	status,0,c
  8463  00F448  065D               	decf	printf@exp+1,f,c
  8464  00F44A  D000               	goto	l4130
  8465  00F44C                     l4130:
  8466  00F44C  BE5D               	btfsc	printf@exp+1,7,c
  8467  00F44E  D005               	goto	l4132
  8468  00F450  505D               	movf	printf@exp+1,w,c
  8469  00F452  E1F5               	bnz	l4126
  8470  00F454  045C               	decf	printf@exp,w,c
  8471  00F456  B0D8               	btfsc	status,0,c
  8472  00F458  D7F2               	goto	l4126
  8473  00F45A                     l4132:
  8474                           
  8475                           ;doprnt.c: 1210: }
  8476                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8477  00F45A  BE57               	btfsc	printf@prec+1,7,c
  8478  00F45C  D009               	goto	l588
  8479  00F45E  5057               	movf	printf@prec+1,w,c
  8480  00F460  E104               	bnz	u3660
  8481  00F462  0E09               	movlw	9
  8482  00F464  5C56               	subwf	printf@prec,w,c
  8483  00F466  A0D8               	btfss	status,0,c
  8484  00F468  D003               	goto	l588
  8485  00F46A                     u3660:
  8486                           
  8487                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8488  00F46A  0E08               	movlw	8
  8489  00F46C  6E65               	movwf	printf@c,c
  8490  00F46E  D003               	goto	l4136
  8491  00F470                     l588:
  8492                           
  8493                           ;doprnt.c: 1213: else
  8494                           ;doprnt.c: 1214: c = prec;
  8495  00F470  C056  F065         	movff	printf@prec,printf@c
  8496  00F474  D000               	goto	l4136
  8497  00F476                     l4136:
  8498                           
  8499                           ;doprnt.c: 1215: prec -= c;
  8500  00F476  5065               	movf	printf@c,w,c
  8501  00F478  5E56               	subwf	printf@prec,f,c
  8502  00F47A  0E00               	movlw	0
  8503  00F47C  BE65               	btfsc	printf@c,7,c
  8504  00F47E  0EFF               	movlw	255
  8505  00F480  5A57               	subwfb	printf@prec+1,f,c
  8506                           
  8507                           ;doprnt.c: 1219: if(c)
  8508  00F482  5065               	movf	printf@c,w,c
  8509  00F484  B4D8               	btfsc	status,2,c
  8510  00F486  D004               	goto	l4142
  8511                           
  8512                           ;doprnt.c: 1221: (putch('.') );
  8513  00F488  0E2E               	movlw	46
  8514  00F48A  EC63  F062         	call	_putch
  8515  00F48E  D000               	goto	l4142
  8516  00F490                     l4142:
  8517                           
  8518                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8519  00F490  5065               	movf	printf@c,w,c
  8520  00F492  EC08  F076         	call	_scale
  8521  00F496  C028  F04F         	movff	?_scale,_printf$2382
  8522  00F49A  C029  F050         	movff	?_scale+1,_printf$2382+1
  8523  00F49E  C02A  F051         	movff	?_scale+2,_printf$2382+2
  8524                           
  8525                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8526  00F4A2  C062  F01C         	movff	printf@fval,___ftmul@f2
  8527  00F4A6  C063  F01D         	movff	printf@fval+1,___ftmul@f2+1
  8528  00F4AA  C064  F01E         	movff	printf@fval+2,___ftmul@f2+2
  8529  00F4AE  C04F  F019         	movff	_printf$2382,___ftmul@f1
  8530  00F4B2  C050  F01A         	movff	_printf$2382+1,___ftmul@f1+1
  8531  00F4B6  C051  F01B         	movff	_printf$2382+2,___ftmul@f1+2
  8532  00F4BA  EC6D  F06C         	call	___ftmul	;wreg free
  8533  00F4BE  C019  F02F         	movff	?___ftmul,___fttol@f1
  8534  00F4C2  C01A  F030         	movff	?___ftmul+1,___fttol@f1+1
  8535  00F4C6  C01B  F031         	movff	?___ftmul+2,___fttol@f1+2
  8536  00F4CA  EC81  F06B         	call	___fttol	;wreg free
  8537  00F4CE  C02F  F058         	movff	?___fttol,printf@val
  8538  00F4D2  C030  F059         	movff	?___fttol+1,printf@val+1
  8539  00F4D6  C031  F05A         	movff	?___fttol+2,printf@val+2
  8540  00F4DA  C032  F05B         	movff	?___fttol+3,printf@val+3
  8541                           
  8542                           ;doprnt.c: 1228: while(c--) {
  8543  00F4DE  D06B               	goto	l4152
  8544  00F4E0                     l4146:
  8545                           
  8546                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  8547  00F4E0  C058  F001         	movff	printf@val,___lldiv@dividend
  8548  00F4E4  C059  F002         	movff	printf@val+1,___lldiv@dividend+1
  8549  00F4E8  C05A  F003         	movff	printf@val+2,___lldiv@dividend+2
  8550  00F4EC  C05B  F004         	movff	printf@val+3,___lldiv@dividend+3
  8551  00F4F0  5065               	movf	printf@c,w,c
  8552  00F4F2  0D04               	mullw	4
  8553  00F4F4  0E10               	movlw	low _dpowers
  8554  00F4F6  24F3               	addwf	prodl,w,c
  8555  00F4F8  6EF6               	movwf	tblptrl,c
  8556  00F4FA  0EFF               	movlw	high _dpowers
  8557  00F4FC  20F4               	addwfc	prodh,w,c
  8558  00F4FE  6EF7               	movwf	tblptrh,c
  8559  00F500                     	if	0	;There are less than 3 active tblptr bytes
  8560  00F500                     	endif
  8561  00F500  0009               	tblrd		*+
  8562  00F502  CFF5 F005          	movff	tablat,___lldiv@divisor
  8563  00F506  0009               	tblrd		*+
  8564  00F508  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8565  00F50C  0009               	tblrd		*+
  8566  00F50E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8567  00F512  000A               	tblrd		*-
  8568  00F514  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8569  00F518  EC78  F067         	call	___lldiv	;wreg free
  8570  00F51C  C001  F05E         	movff	?___lldiv,printf@tmpval
  8571  00F520  C002  F05F         	movff	?___lldiv+1,printf@tmpval+1
  8572  00F524  C003  F060         	movff	?___lldiv+2,printf@tmpval+2
  8573  00F528  C004  F061         	movff	?___lldiv+3,printf@tmpval+3
  8574                           
  8575                           ;doprnt.c: 1230: tmpval.vd %= 10;
  8576  00F52C  C05E  F001         	movff	printf@tmpval,___llmod@dividend
  8577  00F530  C05F  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  8578  00F534  C060  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  8579  00F538  C061  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  8580  00F53C  0E0A               	movlw	10
  8581  00F53E  6E05               	movwf	___llmod@divisor,c
  8582  00F540  0E00               	movlw	0
  8583  00F542  6E06               	movwf	___llmod@divisor+1,c
  8584  00F544  0E00               	movlw	0
  8585  00F546  6E07               	movwf	___llmod@divisor+2,c
  8586  00F548  0E00               	movlw	0
  8587  00F54A  6E08               	movwf	___llmod@divisor+3,c
  8588  00F54C  ECB9  F065         	call	___llmod	;wreg free
  8589  00F550  C001  F05E         	movff	?___llmod,printf@tmpval
  8590  00F554  C002  F05F         	movff	?___llmod+1,printf@tmpval+1
  8591  00F558  C003  F060         	movff	?___llmod+2,printf@tmpval+2
  8592  00F55C  C004  F061         	movff	?___llmod+3,printf@tmpval+3
  8593                           
  8594                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  8595  00F560  505E               	movf	printf@tmpval,w,c
  8596  00F562  0F30               	addlw	48
  8597  00F564  EC63  F062         	call	_putch
  8598                           
  8599                           ;doprnt.c: 1232: val %= dpowers[c];
  8600  00F568  C058  F001         	movff	printf@val,___llmod@dividend
  8601  00F56C  C059  F002         	movff	printf@val+1,___llmod@dividend+1
  8602  00F570  C05A  F003         	movff	printf@val+2,___llmod@dividend+2
  8603  00F574  C05B  F004         	movff	printf@val+3,___llmod@dividend+3
  8604  00F578  5065               	movf	printf@c,w,c
  8605  00F57A  0D04               	mullw	4
  8606  00F57C  0E10               	movlw	low _dpowers
  8607  00F57E  24F3               	addwf	prodl,w,c
  8608  00F580  6EF6               	movwf	tblptrl,c
  8609  00F582  0EFF               	movlw	high _dpowers
  8610  00F584  20F4               	addwfc	prodh,w,c
  8611  00F586  6EF7               	movwf	tblptrh,c
  8612  00F588                     	if	0	;There are less than 3 active tblptr bytes
  8613  00F588                     	endif
  8614  00F588  0009               	tblrd		*+
  8615  00F58A  CFF5 F005          	movff	tablat,___llmod@divisor
  8616  00F58E  0009               	tblrd		*+
  8617  00F590  CFF5 F006          	movff	tablat,___llmod@divisor+1
  8618  00F594  0009               	tblrd		*+
  8619  00F596  CFF5 F007          	movff	tablat,___llmod@divisor+2
  8620  00F59A  000A               	tblrd		*-
  8621  00F59C  CFF5 F008          	movff	tablat,___llmod@divisor+3
  8622  00F5A0  ECB9  F065         	call	___llmod	;wreg free
  8623  00F5A4  C001  F058         	movff	?___llmod,printf@val
  8624  00F5A8  C002  F059         	movff	?___llmod+1,printf@val+1
  8625  00F5AC  C003  F05A         	movff	?___llmod+2,printf@val+2
  8626  00F5B0  C004  F05B         	movff	?___llmod+3,printf@val+3
  8627  00F5B4  D000               	goto	l4152
  8628  00F5B6                     l4152:
  8629  00F5B6  0665               	decf	printf@c,f,c
  8630  00F5B8  2865               	incf	printf@c,w,c
  8631  00F5BA  B4D8               	btfsc	status,2,c
  8632  00F5BC  D009               	goto	l4158
  8633  00F5BE  D790               	goto	l4146
  8634                           
  8635                           ;doprnt.c: 1233: }
  8636                           ;doprnt.c: 1235: while(prec) {
  8637  00F5C0  D007               	goto	l4158
  8638  00F5C2                     l4154:
  8639                           
  8640                           ;doprnt.c: 1236: (putch('0') );
  8641  00F5C2  0E30               	movlw	48
  8642  00F5C4  EC63  F062         	call	_putch
  8643                           
  8644                           ;doprnt.c: 1237: prec--;
  8645  00F5C8  0656               	decf	printf@prec,f,c
  8646  00F5CA  A0D8               	btfss	status,0,c
  8647  00F5CC  0657               	decf	printf@prec+1,f,c
  8648  00F5CE  D000               	goto	l4158
  8649  00F5D0                     l4158:
  8650  00F5D0  5056               	movf	printf@prec,w,c
  8651  00F5D2  1057               	iorwf	printf@prec+1,w,c
  8652  00F5D4  B4D8               	btfsc	status,2,c
  8653  00F5D6  D010               	goto	l4164
  8654  00F5D8  D7F4               	goto	l4154
  8655                           
  8656                           ;doprnt.c: 1238: }
  8657                           ;doprnt.c: 1245: continue;
  8658  00F5DA  D00E               	goto	l4164
  8659  00F5DC                     l4160:
  8660                           
  8661                           ;doprnt.c: 1246: }
  8662                           ;doprnt.c: 1422: {
  8663                           ;doprnt.c: 1438: if(flag & 0x03)
  8664  00F5DC  0E03               	movlw	3
  8665  00F5DE  1454               	andwf	printf@flag,w,c
  8666  00F5E0  6E49               	movwf	??_printf& (0+255),c
  8667  00F5E2  0E00               	movlw	0
  8668  00F5E4  1455               	andwf	printf@flag+1,w,c
  8669  00F5E6  6E4A               	movwf	(??_printf+1)& (0+255),c
  8670  00F5E8  5049               	movf	??_printf,w,c
  8671  00F5EA  104A               	iorwf	??_printf+1,w,c
  8672  00F5EC  B4D8               	btfsc	status,2,c
  8673  00F5EE  D004               	goto	l4164
  8674                           
  8675                           ;doprnt.c: 1439: (putch('-') );
  8676  00F5F0  0E2D               	movlw	45
  8677  00F5F2  EC63  F062         	call	_putch
  8678  00F5F6  D000               	goto	l4164
  8679  00F5F8                     l4164:
  8680  00F5F8  C044  FFF6         	movff	printf@f,tblptrl
  8681  00F5FC  C045  FFF7         	movff	printf@f+1,tblptrh
  8682  00F600  4A44               	infsnz	printf@f,f,c
  8683  00F602  2A45               	incf	printf@f+1,f,c
  8684  00F604                     	if	0	;tblptru may be non-zero
  8685  00F604                     	endif
  8686  00F604                     	if	0	;tblptru may be non-zero
  8687  00F604                     	endif
  8688  00F604  0008               	tblrd		*
  8689  00F606  CFF5 F065          	movff	tablat,printf@c
  8690  00F60A  5065               	movf	printf@c,w,c
  8691  00F60C  B4D8               	btfsc	status,2,c
  8692  00F60E  D002               	goto	l599
  8693  00F610  D4F4               	goto	l4016
  8694  00F612  D000               	goto	l599
  8695  00F614                     l599:
  8696  00F614  0012               	return		;funcret
  8697  00F616                     __end_of_printf:
  8698                           	opt stack 0
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon2	equ	0xFF1
  8706                           postinc0	equ	0xFEE
  8707                           wreg	equ	0xFE8
  8708                           postdec1	equ	0xFE5
  8709                           fsr1l	equ	0xFE1
  8710                           postinc2	equ	0xFDE
  8711                           postdec2	equ	0xFDD
  8712                           fsr2h	equ	0xFDA
  8713                           fsr2l	equ	0xFD9
  8714                           status	equ	0xFD8
  8715                           
  8716 ;; *************** function _scale *****************
  8717 ;; Defined at:
  8718 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  scl             1    wreg     char 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;  scl             1   45[COMRAM] char 
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  3   39[COMRAM] char 
  8725 ;; Registers used:
  8726 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8732 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;Total ram usage:        7 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    2
  8739 ;; This function calls:
  8740 ;;		___awdiv
  8741 ;;		___awmod
  8742 ;;		___ftmul
  8743 ;;		___wmul
  8744 ;; This function is called by:
  8745 ;;		_printf
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text35
  8750  00EC10                     __ptext35:
  8751                           	opt stack 0
  8752  00EC10                     _scale:
  8753                           	opt stack 23
  8754                           
  8755                           ;incstack = 0
  8756                           ;scale@scl stored from wreg
  8757  00EC10  6E2E               	movwf	scale@scl,c
  8758                           
  8759                           ;doprnt.c: 428: if(scl < 0) {
  8760  00EC12  AE2E               	btfss	scale@scl,7,c
  8761  00EC14  D0EF               	goto	l3680
  8762                           
  8763                           ;doprnt.c: 429: scl = -scl;
  8764  00EC16  6C2E               	negf	scale@scl,c
  8765                           
  8766                           ;doprnt.c: 430: if(scl>=110)
  8767  00EC18  502E               	movf	scale@scl,w,c
  8768  00EC1A  0A80               	xorlw	128
  8769  00EC1C  0F12               	addlw	-238
  8770  00EC1E  A0D8               	btfss	status,0,c
  8771  00EC20  D08D               	goto	l3670
  8772                           
  8773                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8774  00EC22  0E00               	movlw	0
  8775  00EC24  6E12               	movwf	___wmul@multiplicand+1,c
  8776  00EC26  0E03               	movlw	3
  8777  00EC28  6E11               	movwf	___wmul@multiplicand,c
  8778  00EC2A  0E00               	movlw	0
  8779  00EC2C  6E0A               	movwf	___awdiv@divisor+1,c
  8780  00EC2E  0E0A               	movlw	10
  8781  00EC30  6E09               	movwf	___awdiv@divisor,c
  8782  00EC32  0E00               	movlw	0
  8783  00EC34  6E04               	movwf	___awmod@divisor+1,c
  8784  00EC36  0E64               	movlw	100
  8785  00EC38  6E03               	movwf	___awmod@divisor,c
  8786  00EC3A  502E               	movf	scale@scl,w,c
  8787  00EC3C  6E01               	movwf	___awmod@dividend,c
  8788  00EC3E  6A02               	clrf	___awmod@dividend+1,c
  8789  00EC40  BE01               	btfsc	___awmod@dividend,7,c
  8790  00EC42  0602               	decf	___awmod@dividend+1,f,c
  8791  00EC44  EC29  F066         	call	___awmod	;wreg free
  8792  00EC48  C001  F007         	movff	?___awmod,___awdiv@dividend
  8793  00EC4C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8794  00EC50  EC09  F068         	call	___awdiv	;wreg free
  8795  00EC54  0E09               	movlw	9
  8796  00EC56  2407               	addwf	?___awdiv,w,c
  8797  00EC58  6E0F               	movwf	___wmul@multiplier,c
  8798  00EC5A  0E00               	movlw	0
  8799  00EC5C  2008               	addwfc	?___awdiv+1,w,c
  8800  00EC5E  6E10               	movwf	___wmul@multiplier+1,c
  8801  00EC60  ECEB  F062         	call	___wmul	;wreg free
  8802  00EC64  0E38               	movlw	low __npowers_
  8803  00EC66  240F               	addwf	?___wmul,w,c
  8804  00EC68  6EF6               	movwf	tblptrl,c
  8805  00EC6A  0EFF               	movlw	high __npowers_
  8806  00EC6C  2010               	addwfc	?___wmul+1,w,c
  8807  00EC6E  6EF7               	movwf	tblptrh,c
  8808  00EC70                     	if	0	;There are less than 3 active tblptr bytes
  8809  00EC70                     	endif
  8810  00EC70  0009               	tblrd		*+
  8811  00EC72  CFF5 F01C          	movff	tablat,___ftmul@f2
  8812  00EC76  0009               	tblrd		*+
  8813  00EC78  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8814  00EC7C  000A               	tblrd		*-
  8815  00EC7E  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8816  00EC82  0E00               	movlw	0
  8817  00EC84  6E0A               	movwf	___awdiv@divisor+1,c
  8818  00EC86  0E64               	movlw	100
  8819  00EC88  6E09               	movwf	___awdiv@divisor,c
  8820  00EC8A  502E               	movf	scale@scl,w,c
  8821  00EC8C  6E07               	movwf	___awdiv@dividend,c
  8822  00EC8E  6A08               	clrf	___awdiv@dividend+1,c
  8823  00EC90  BE07               	btfsc	___awdiv@dividend,7,c
  8824  00EC92  0608               	decf	___awdiv@dividend+1,f,c
  8825  00EC94  EC09  F068         	call	___awdiv	;wreg free
  8826  00EC98  0E12               	movlw	18
  8827  00EC9A  2407               	addwf	?___awdiv,w,c
  8828  00EC9C  6E0F               	movwf	___wmul@multiplier,c
  8829  00EC9E  0E00               	movlw	0
  8830  00ECA0  2008               	addwfc	?___awdiv+1,w,c
  8831  00ECA2  6E10               	movwf	___wmul@multiplier+1,c
  8832  00ECA4  0E00               	movlw	0
  8833  00ECA6  6E12               	movwf	___wmul@multiplicand+1,c
  8834  00ECA8  0E03               	movlw	3
  8835  00ECAA  6E11               	movwf	___wmul@multiplicand,c
  8836  00ECAC  ECEB  F062         	call	___wmul	;wreg free
  8837  00ECB0  0E38               	movlw	low __npowers_
  8838  00ECB2  240F               	addwf	?___wmul,w,c
  8839  00ECB4  6EF6               	movwf	tblptrl,c
  8840  00ECB6  0EFF               	movlw	high __npowers_
  8841  00ECB8  2010               	addwfc	?___wmul+1,w,c
  8842  00ECBA  6EF7               	movwf	tblptrh,c
  8843  00ECBC                     	if	0	;There are less than 3 active tblptr bytes
  8844  00ECBC                     	endif
  8845  00ECBC  0009               	tblrd		*+
  8846  00ECBE  CFF5 F019          	movff	tablat,___ftmul@f1
  8847  00ECC2  0009               	tblrd		*+
  8848  00ECC4  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  8849  00ECC8  000A               	tblrd		*-
  8850  00ECCA  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  8851  00ECCE  EC6D  F06C         	call	___ftmul	;wreg free
  8852  00ECD2  C019  F02B         	movff	?___ftmul,_scale$2381
  8853  00ECD6  C01A  F02C         	movff	?___ftmul+1,_scale$2381+1
  8854  00ECDA  C01B  F02D         	movff	?___ftmul+2,_scale$2381+2
  8855                           
  8856                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8857  00ECDE  C02B  F019         	movff	_scale$2381,___ftmul@f1
  8858  00ECE2  C02C  F01A         	movff	_scale$2381+1,___ftmul@f1+1
  8859  00ECE6  C02D  F01B         	movff	_scale$2381+2,___ftmul@f1+2
  8860  00ECEA  0E00               	movlw	0
  8861  00ECEC  6E12               	movwf	___wmul@multiplicand+1,c
  8862  00ECEE  0E03               	movlw	3
  8863  00ECF0  6E11               	movwf	___wmul@multiplicand,c
  8864  00ECF2  0E00               	movlw	0
  8865  00ECF4  6E04               	movwf	___awmod@divisor+1,c
  8866  00ECF6  0E0A               	movlw	10
  8867  00ECF8  6E03               	movwf	___awmod@divisor,c
  8868  00ECFA  502E               	movf	scale@scl,w,c
  8869  00ECFC  6E01               	movwf	___awmod@dividend,c
  8870  00ECFE  6A02               	clrf	___awmod@dividend+1,c
  8871  00ED00  BE01               	btfsc	___awmod@dividend,7,c
  8872  00ED02  0602               	decf	___awmod@dividend+1,f,c
  8873  00ED04  EC29  F066         	call	___awmod	;wreg free
  8874  00ED08  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8875  00ED0C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8876  00ED10  ECEB  F062         	call	___wmul	;wreg free
  8877  00ED14  0E38               	movlw	low __npowers_
  8878  00ED16  240F               	addwf	?___wmul,w,c
  8879  00ED18  6EF6               	movwf	tblptrl,c
  8880  00ED1A  0EFF               	movlw	high __npowers_
  8881  00ED1C  2010               	addwfc	?___wmul+1,w,c
  8882  00ED1E  6EF7               	movwf	tblptrh,c
  8883  00ED20                     	if	0	;There are less than 3 active tblptr bytes
  8884  00ED20                     	endif
  8885  00ED20  0009               	tblrd		*+
  8886  00ED22  CFF5 F01C          	movff	tablat,___ftmul@f2
  8887  00ED26  0009               	tblrd		*+
  8888  00ED28  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8889  00ED2C  000A               	tblrd		*-
  8890  00ED2E  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8891  00ED32  EC6D  F06C         	call	___ftmul	;wreg free
  8892  00ED36  D141               	goto	L18
  8893  00ED38  D15A               	goto	l543
  8894  00ED3A  D054               	goto	l3676
  8895  00ED3C                     l3670:
  8896                           
  8897                           ;doprnt.c: 432: else if(scl > 10)
  8898  00ED3C  502E               	movf	scale@scl,w,c
  8899  00ED3E  0A80               	xorlw	128
  8900  00ED40  0F75               	addlw	-139
  8901  00ED42  A0D8               	btfss	status,0,c
  8902  00ED44  D04F               	goto	l3676
  8903                           
  8904                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8905  00ED46  0E00               	movlw	0
  8906  00ED48  6E0A               	movwf	___awdiv@divisor+1,c
  8907  00ED4A  0E0A               	movlw	10
  8908  00ED4C  6E09               	movwf	___awdiv@divisor,c
  8909  00ED4E  502E               	movf	scale@scl,w,c
  8910  00ED50  6E07               	movwf	___awdiv@dividend,c
  8911  00ED52  6A08               	clrf	___awdiv@dividend+1,c
  8912  00ED54  BE07               	btfsc	___awdiv@dividend,7,c
  8913  00ED56  0608               	decf	___awdiv@dividend+1,f,c
  8914  00ED58  EC09  F068         	call	___awdiv	;wreg free
  8915  00ED5C  0E09               	movlw	9
  8916  00ED5E  2407               	addwf	?___awdiv,w,c
  8917  00ED60  6E0F               	movwf	___wmul@multiplier,c
  8918  00ED62  0E00               	movlw	0
  8919  00ED64  2008               	addwfc	?___awdiv+1,w,c
  8920  00ED66  6E10               	movwf	___wmul@multiplier+1,c
  8921  00ED68  0E00               	movlw	0
  8922  00ED6A  6E12               	movwf	___wmul@multiplicand+1,c
  8923  00ED6C  0E03               	movlw	3
  8924  00ED6E  6E11               	movwf	___wmul@multiplicand,c
  8925  00ED70  ECEB  F062         	call	___wmul	;wreg free
  8926  00ED74  0E38               	movlw	low __npowers_
  8927  00ED76  240F               	addwf	?___wmul,w,c
  8928  00ED78  6EF6               	movwf	tblptrl,c
  8929  00ED7A  0EFF               	movlw	high __npowers_
  8930  00ED7C  2010               	addwfc	?___wmul+1,w,c
  8931  00ED7E  6EF7               	movwf	tblptrh,c
  8932  00ED80                     	if	0	;There are less than 3 active tblptr bytes
  8933  00ED80                     	endif
  8934  00ED80  0009               	tblrd		*+
  8935  00ED82  CFF5 F019          	movff	tablat,___ftmul@f1
  8936  00ED86  0009               	tblrd		*+
  8937  00ED88  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  8938  00ED8C  000A               	tblrd		*-
  8939  00ED8E  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  8940  00ED92  0E00               	movlw	0
  8941  00ED94  6E12               	movwf	___wmul@multiplicand+1,c
  8942  00ED96  0E03               	movlw	3
  8943  00ED98  6E11               	movwf	___wmul@multiplicand,c
  8944  00ED9A  0E00               	movlw	0
  8945  00ED9C  6E04               	movwf	___awmod@divisor+1,c
  8946  00ED9E  0E0A               	movlw	10
  8947  00EDA0  6E03               	movwf	___awmod@divisor,c
  8948  00EDA2  502E               	movf	scale@scl,w,c
  8949  00EDA4  6E01               	movwf	___awmod@dividend,c
  8950  00EDA6  6A02               	clrf	___awmod@dividend+1,c
  8951  00EDA8  BE01               	btfsc	___awmod@dividend,7,c
  8952  00EDAA  0602               	decf	___awmod@dividend+1,f,c
  8953  00EDAC  EC29  F066         	call	___awmod	;wreg free
  8954  00EDB0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8955  00EDB4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8956  00EDB8  ECEB  F062         	call	___wmul	;wreg free
  8957  00EDBC  0E38               	movlw	low __npowers_
  8958  00EDBE  240F               	addwf	?___wmul,w,c
  8959  00EDC0  6EF6               	movwf	tblptrl,c
  8960  00EDC2  0EFF               	movlw	high __npowers_
  8961  00EDC4  2010               	addwfc	?___wmul+1,w,c
  8962  00EDC6  6EF7               	movwf	tblptrh,c
  8963  00EDC8                     	if	0	;There are less than 3 active tblptr bytes
  8964  00EDC8                     	endif
  8965  00EDC8  0009               	tblrd		*+
  8966  00EDCA  CFF5 F01C          	movff	tablat,___ftmul@f2
  8967  00EDCE  0009               	tblrd		*+
  8968  00EDD0  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  8969  00EDD4  000A               	tblrd		*-
  8970  00EDD6  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  8971  00EDDA  EC6D  F06C         	call	___ftmul	;wreg free
  8972  00EDDE  D0ED               	goto	L18
  8973  00EDE0  D106               	goto	l543
  8974  00EDE2  D000               	goto	l3676
  8975  00EDE4                     l3676:
  8976                           
  8977                           ;doprnt.c: 434: return _npowers_[scl];
  8978  00EDE4  502E               	movf	scale@scl,w,c
  8979  00EDE6  0D03               	mullw	3
  8980  00EDE8  0E38               	movlw	low __npowers_
  8981  00EDEA  24F3               	addwf	prodl,w,c
  8982  00EDEC  6EF6               	movwf	tblptrl,c
  8983  00EDEE  0EFF               	movlw	high __npowers_
  8984  00EDF0  D0F2               	goto	L17
  8985  00EDF2  D0FD               	goto	l543
  8986  00EDF4                     l3680:
  8987                           
  8988                           ;doprnt.c: 435: }
  8989                           ;doprnt.c: 436: if(scl>=110)
  8990  00EDF4  502E               	movf	scale@scl,w,c
  8991  00EDF6  0A80               	xorlw	128
  8992  00EDF8  0F12               	addlw	-238
  8993  00EDFA  A0D8               	btfss	status,0,c
  8994  00EDFC  D08D               	goto	l3688
  8995                           
  8996                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8997  00EDFE  0E00               	movlw	0
  8998  00EE00  6E12               	movwf	___wmul@multiplicand+1,c
  8999  00EE02  0E03               	movlw	3
  9000  00EE04  6E11               	movwf	___wmul@multiplicand,c
  9001  00EE06  0E00               	movlw	0
  9002  00EE08  6E0A               	movwf	___awdiv@divisor+1,c
  9003  00EE0A  0E0A               	movlw	10
  9004  00EE0C  6E09               	movwf	___awdiv@divisor,c
  9005  00EE0E  0E00               	movlw	0
  9006  00EE10  6E04               	movwf	___awmod@divisor+1,c
  9007  00EE12  0E64               	movlw	100
  9008  00EE14  6E03               	movwf	___awmod@divisor,c
  9009  00EE16  502E               	movf	scale@scl,w,c
  9010  00EE18  6E01               	movwf	___awmod@dividend,c
  9011  00EE1A  6A02               	clrf	___awmod@dividend+1,c
  9012  00EE1C  BE01               	btfsc	___awmod@dividend,7,c
  9013  00EE1E  0602               	decf	___awmod@dividend+1,f,c
  9014  00EE20  EC29  F066         	call	___awmod	;wreg free
  9015  00EE24  C001  F007         	movff	?___awmod,___awdiv@dividend
  9016  00EE28  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  9017  00EE2C  EC09  F068         	call	___awdiv	;wreg free
  9018  00EE30  0E09               	movlw	9
  9019  00EE32  2407               	addwf	?___awdiv,w,c
  9020  00EE34  6E0F               	movwf	___wmul@multiplier,c
  9021  00EE36  0E00               	movlw	0
  9022  00EE38  2008               	addwfc	?___awdiv+1,w,c
  9023  00EE3A  6E10               	movwf	___wmul@multiplier+1,c
  9024  00EE3C  ECEB  F062         	call	___wmul	;wreg free
  9025  00EE40  0E5F               	movlw	low __powers_
  9026  00EE42  240F               	addwf	?___wmul,w,c
  9027  00EE44  6EF6               	movwf	tblptrl,c
  9028  00EE46  0EFF               	movlw	high __powers_
  9029  00EE48  2010               	addwfc	?___wmul+1,w,c
  9030  00EE4A  6EF7               	movwf	tblptrh,c
  9031  00EE4C                     	if	0	;There are less than 3 active tblptr bytes
  9032  00EE4C                     	endif
  9033  00EE4C  0009               	tblrd		*+
  9034  00EE4E  CFF5 F01C          	movff	tablat,___ftmul@f2
  9035  00EE52  0009               	tblrd		*+
  9036  00EE54  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  9037  00EE58  000A               	tblrd		*-
  9038  00EE5A  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  9039  00EE5E  0E00               	movlw	0
  9040  00EE60  6E0A               	movwf	___awdiv@divisor+1,c
  9041  00EE62  0E64               	movlw	100
  9042  00EE64  6E09               	movwf	___awdiv@divisor,c
  9043  00EE66  502E               	movf	scale@scl,w,c
  9044  00EE68  6E07               	movwf	___awdiv@dividend,c
  9045  00EE6A  6A08               	clrf	___awdiv@dividend+1,c
  9046  00EE6C  BE07               	btfsc	___awdiv@dividend,7,c
  9047  00EE6E  0608               	decf	___awdiv@dividend+1,f,c
  9048  00EE70  EC09  F068         	call	___awdiv	;wreg free
  9049  00EE74  0E12               	movlw	18
  9050  00EE76  2407               	addwf	?___awdiv,w,c
  9051  00EE78  6E0F               	movwf	___wmul@multiplier,c
  9052  00EE7A  0E00               	movlw	0
  9053  00EE7C  2008               	addwfc	?___awdiv+1,w,c
  9054  00EE7E  6E10               	movwf	___wmul@multiplier+1,c
  9055  00EE80  0E00               	movlw	0
  9056  00EE82  6E12               	movwf	___wmul@multiplicand+1,c
  9057  00EE84  0E03               	movlw	3
  9058  00EE86  6E11               	movwf	___wmul@multiplicand,c
  9059  00EE88  ECEB  F062         	call	___wmul	;wreg free
  9060  00EE8C  0E5F               	movlw	low __powers_
  9061  00EE8E  240F               	addwf	?___wmul,w,c
  9062  00EE90  6EF6               	movwf	tblptrl,c
  9063  00EE92  0EFF               	movlw	high __powers_
  9064  00EE94  2010               	addwfc	?___wmul+1,w,c
  9065  00EE96  6EF7               	movwf	tblptrh,c
  9066  00EE98                     	if	0	;There are less than 3 active tblptr bytes
  9067  00EE98                     	endif
  9068  00EE98  0009               	tblrd		*+
  9069  00EE9A  CFF5 F019          	movff	tablat,___ftmul@f1
  9070  00EE9E  0009               	tblrd		*+
  9071  00EEA0  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  9072  00EEA4  000A               	tblrd		*-
  9073  00EEA6  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  9074  00EEAA  EC6D  F06C         	call	___ftmul	;wreg free
  9075  00EEAE  C019  F02B         	movff	?___ftmul,_scale$2381
  9076  00EEB2  C01A  F02C         	movff	?___ftmul+1,_scale$2381+1
  9077  00EEB6  C01B  F02D         	movff	?___ftmul+2,_scale$2381+2
  9078                           
  9079                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9080  00EEBA  C02B  F019         	movff	_scale$2381,___ftmul@f1
  9081  00EEBE  C02C  F01A         	movff	_scale$2381+1,___ftmul@f1+1
  9082  00EEC2  C02D  F01B         	movff	_scale$2381+2,___ftmul@f1+2
  9083  00EEC6  0E00               	movlw	0
  9084  00EEC8  6E12               	movwf	___wmul@multiplicand+1,c
  9085  00EECA  0E03               	movlw	3
  9086  00EECC  6E11               	movwf	___wmul@multiplicand,c
  9087  00EECE  0E00               	movlw	0
  9088  00EED0  6E04               	movwf	___awmod@divisor+1,c
  9089  00EED2  0E0A               	movlw	10
  9090  00EED4  6E03               	movwf	___awmod@divisor,c
  9091  00EED6  502E               	movf	scale@scl,w,c
  9092  00EED8  6E01               	movwf	___awmod@dividend,c
  9093  00EEDA  6A02               	clrf	___awmod@dividend+1,c
  9094  00EEDC  BE01               	btfsc	___awmod@dividend,7,c
  9095  00EEDE  0602               	decf	___awmod@dividend+1,f,c
  9096  00EEE0  EC29  F066         	call	___awmod	;wreg free
  9097  00EEE4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9098  00EEE8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9099  00EEEC  ECEB  F062         	call	___wmul	;wreg free
  9100  00EEF0  0E5F               	movlw	low __powers_
  9101  00EEF2  240F               	addwf	?___wmul,w,c
  9102  00EEF4  6EF6               	movwf	tblptrl,c
  9103  00EEF6  0EFF               	movlw	high __powers_
  9104  00EEF8  2010               	addwfc	?___wmul+1,w,c
  9105  00EEFA  6EF7               	movwf	tblptrh,c
  9106  00EEFC                     	if	0	;There are less than 3 active tblptr bytes
  9107  00EEFC                     	endif
  9108  00EEFC  0009               	tblrd		*+
  9109  00EEFE  CFF5 F01C          	movff	tablat,___ftmul@f2
  9110  00EF02  0009               	tblrd		*+
  9111  00EF04  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  9112  00EF08  000A               	tblrd		*-
  9113  00EF0A  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  9114  00EF0E  EC6D  F06C         	call	___ftmul	;wreg free
  9115  00EF12  D053               	goto	L18
  9116  00EF14  D06C               	goto	l543
  9117  00EF16  D059               	goto	l3694
  9118  00EF18                     l3688:
  9119                           
  9120                           ;doprnt.c: 438: else if(scl > 10)
  9121  00EF18  502E               	movf	scale@scl,w,c
  9122  00EF1A  0A80               	xorlw	128
  9123  00EF1C  0F75               	addlw	-139
  9124  00EF1E  A0D8               	btfss	status,0,c
  9125  00EF20  D054               	goto	l3694
  9126                           
  9127                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9128  00EF22  0E00               	movlw	0
  9129  00EF24  6E0A               	movwf	___awdiv@divisor+1,c
  9130  00EF26  0E0A               	movlw	10
  9131  00EF28  6E09               	movwf	___awdiv@divisor,c
  9132  00EF2A  502E               	movf	scale@scl,w,c
  9133  00EF2C  6E07               	movwf	___awdiv@dividend,c
  9134  00EF2E  6A08               	clrf	___awdiv@dividend+1,c
  9135  00EF30  BE07               	btfsc	___awdiv@dividend,7,c
  9136  00EF32  0608               	decf	___awdiv@dividend+1,f,c
  9137  00EF34  EC09  F068         	call	___awdiv	;wreg free
  9138  00EF38  0E09               	movlw	9
  9139  00EF3A  2407               	addwf	?___awdiv,w,c
  9140  00EF3C  6E0F               	movwf	___wmul@multiplier,c
  9141  00EF3E  0E00               	movlw	0
  9142  00EF40  2008               	addwfc	?___awdiv+1,w,c
  9143  00EF42  6E10               	movwf	___wmul@multiplier+1,c
  9144  00EF44  0E00               	movlw	0
  9145  00EF46  6E12               	movwf	___wmul@multiplicand+1,c
  9146  00EF48  0E03               	movlw	3
  9147  00EF4A  6E11               	movwf	___wmul@multiplicand,c
  9148  00EF4C  ECEB  F062         	call	___wmul	;wreg free
  9149  00EF50  0E5F               	movlw	low __powers_
  9150  00EF52  240F               	addwf	?___wmul,w,c
  9151  00EF54  6EF6               	movwf	tblptrl,c
  9152  00EF56  0EFF               	movlw	high __powers_
  9153  00EF58  2010               	addwfc	?___wmul+1,w,c
  9154  00EF5A  6EF7               	movwf	tblptrh,c
  9155  00EF5C                     	if	0	;There are less than 3 active tblptr bytes
  9156  00EF5C                     	endif
  9157  00EF5C  0009               	tblrd		*+
  9158  00EF5E  CFF5 F019          	movff	tablat,___ftmul@f1
  9159  00EF62  0009               	tblrd		*+
  9160  00EF64  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  9161  00EF68  000A               	tblrd		*-
  9162  00EF6A  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  9163  00EF6E  0E00               	movlw	0
  9164  00EF70  6E12               	movwf	___wmul@multiplicand+1,c
  9165  00EF72  0E03               	movlw	3
  9166  00EF74  6E11               	movwf	___wmul@multiplicand,c
  9167  00EF76  0E00               	movlw	0
  9168  00EF78  6E04               	movwf	___awmod@divisor+1,c
  9169  00EF7A  0E0A               	movlw	10
  9170  00EF7C  6E03               	movwf	___awmod@divisor,c
  9171  00EF7E  502E               	movf	scale@scl,w,c
  9172  00EF80  6E01               	movwf	___awmod@dividend,c
  9173  00EF82  6A02               	clrf	___awmod@dividend+1,c
  9174  00EF84  BE01               	btfsc	___awmod@dividend,7,c
  9175  00EF86  0602               	decf	___awmod@dividend+1,f,c
  9176  00EF88  EC29  F066         	call	___awmod	;wreg free
  9177  00EF8C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9178  00EF90  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9179  00EF94  ECEB  F062         	call	___wmul	;wreg free
  9180  00EF98  0E5F               	movlw	low __powers_
  9181  00EF9A  240F               	addwf	?___wmul,w,c
  9182  00EF9C  6EF6               	movwf	tblptrl,c
  9183  00EF9E  0EFF               	movlw	high __powers_
  9184  00EFA0  2010               	addwfc	?___wmul+1,w,c
  9185  00EFA2  6EF7               	movwf	tblptrh,c
  9186  00EFA4                     	if	0	;There are less than 3 active tblptr bytes
  9187  00EFA4                     	endif
  9188  00EFA4  0009               	tblrd		*+
  9189  00EFA6  CFF5 F01C          	movff	tablat,___ftmul@f2
  9190  00EFAA  0009               	tblrd		*+
  9191  00EFAC  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  9192  00EFB0  000A               	tblrd		*-
  9193  00EFB2  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  9194  00EFB6  EC6D  F06C         	call	___ftmul	;wreg free
  9195  00EFBA                     L18:
  9196  00EFBA  C019  F028         	movff	?___ftmul,?_scale
  9197  00EFBE  C01A  F029         	movff	?___ftmul+1,?_scale+1
  9198  00EFC2  C01B  F02A         	movff	?___ftmul+2,?_scale+2
  9199  00EFC6  D013               	goto	l543
  9200  00EFC8  D000               	goto	l3694
  9201  00EFCA                     l3694:
  9202                           
  9203                           ;doprnt.c: 440: return _powers_[scl];
  9204  00EFCA  502E               	movf	scale@scl,w,c
  9205  00EFCC  0D03               	mullw	3
  9206  00EFCE  0E5F               	movlw	low __powers_
  9207  00EFD0  24F3               	addwf	prodl,w,c
  9208  00EFD2  6EF6               	movwf	tblptrl,c
  9209  00EFD4  0EFF               	movlw	high __powers_
  9210  00EFD6                     L17:
  9211  00EFD6  20F4               	addwfc	prodh,w,c
  9212  00EFD8  6EF7               	movwf	tblptrh,c
  9213  00EFDA                     	if	0	;There are less than 3 active tblptr bytes
  9214  00EFDA                     	endif
  9215  00EFDA  0009               	tblrd		*+
  9216  00EFDC  CFF5 F028          	movff	tablat,?_scale
  9217  00EFE0  0009               	tblrd		*+
  9218  00EFE2  CFF5 F029          	movff	tablat,?_scale+1
  9219  00EFE6  000A               	tblrd		*-
  9220  00EFE8  CFF5 F02A          	movff	tablat,?_scale+2
  9221  00EFEC  D000               	goto	l543
  9222  00EFEE                     l543:
  9223  00EFEE  0012               	return		;funcret
  9224  00EFF0                     __end_of_scale:
  9225                           	opt stack 0
  9226                           tblptru	equ	0xFF8
  9227                           tblptrh	equ	0xFF7
  9228                           tblptrl	equ	0xFF6
  9229                           tablat	equ	0xFF5
  9230                           prodh	equ	0xFF4
  9231                           prodl	equ	0xFF3
  9232                           intcon2	equ	0xFF1
  9233                           postinc0	equ	0xFEE
  9234                           wreg	equ	0xFE8
  9235                           postdec1	equ	0xFE5
  9236                           fsr1l	equ	0xFE1
  9237                           postinc2	equ	0xFDE
  9238                           postdec2	equ	0xFDD
  9239                           fsr2h	equ	0xFDA
  9240                           fsr2l	equ	0xFD9
  9241                           status	equ	0xFD8
  9242                           
  9243 ;; *************** function _putch *****************
  9244 ;; Defined at:
  9245 ;;		line 190 in file "Lab7.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;  c               1    wreg     unsigned char 
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  c               1    0[COMRAM] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9263 ;;Total ram usage:        1 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; This function calls:
  9266 ;;		Nothing
  9267 ;; This function is called by:
  9268 ;;		_printf
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text36
  9273  00C4C6                     __ptext36:
  9274                           	opt stack 0
  9275  00C4C6                     _putch:
  9276                           	opt stack 25
  9277                           
  9278                           ;incstack = 0
  9279                           ;putch@c stored from wreg
  9280  00C4C6  6E01               	movwf	putch@c,c
  9281                           
  9282                           ;Lab7.c: 191: while (!TRMT);
  9283  00C4C8  D000               	goto	l370
  9284  00C4CA                     l370:
  9285  00C4CA  A2AC               	btfss	4012,1,c	;volatile
  9286  00C4CC  D7FE               	goto	l370
  9287                           
  9288                           ;Lab7.c: 192: TXREG = c;
  9289  00C4CE  C001  FFAD         	movff	putch@c,4013	;volatile
  9290  00C4D2  0012               	return		;funcret
  9291  00C4D4                     __end_of_putch:
  9292                           	opt stack 0
  9293                           tblptru	equ	0xFF8
  9294                           tblptrh	equ	0xFF7
  9295                           tblptrl	equ	0xFF6
  9296                           tablat	equ	0xFF5
  9297                           prodh	equ	0xFF4
  9298                           prodl	equ	0xFF3
  9299                           intcon2	equ	0xFF1
  9300                           postinc0	equ	0xFEE
  9301                           wreg	equ	0xFE8
  9302                           postdec1	equ	0xFE5
  9303                           fsr1l	equ	0xFE1
  9304                           postinc2	equ	0xFDE
  9305                           postdec2	equ	0xFDD
  9306                           fsr2h	equ	0xFDA
  9307                           fsr2l	equ	0xFD9
  9308                           status	equ	0xFD8
  9309                           
  9310 ;; *************** function _fround *****************
  9311 ;; Defined at:
  9312 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  prec            1    wreg     unsigned char 
  9315 ;; Auto vars:     Size  Location     Type
  9316 ;;  prec            1   48[COMRAM] unsigned char 
  9317 ;; Return value:  Size  Location     Type
  9318 ;;                  3   39[COMRAM] unsigned char 
  9319 ;; Registers used:
  9320 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9321 ;; Tracked objects:
  9322 ;;		On entry : 0/0
  9323 ;;		On exit  : 0/0
  9324 ;;		Unchanged: 0/0
  9325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9326 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;Total ram usage:       10 bytes
  9331 ;; Hardware stack levels used:    1
  9332 ;; Hardware stack levels required when called:    2
  9333 ;; This function calls:
  9334 ;;		___awdiv
  9335 ;;		___awmod
  9336 ;;		___ftmul
  9337 ;;		___wmul
  9338 ;; This function is called by:
  9339 ;;		_printf
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text37
  9344  00E66A                     __ptext37:
  9345                           	opt stack 0
  9346  00E66A                     _fround:
  9347                           	opt stack 23
  9348                           
  9349                           ;incstack = 0
  9350                           ;fround@prec stored from wreg
  9351  00E66A  6E31               	movwf	fround@prec,c
  9352                           
  9353                           ;doprnt.c: 413: if(prec>=110)
  9354  00E66C  0E6D               	movlw	109
  9355  00E66E  6431               	cpfsgt	fround@prec,c
  9356  00E670  D09B               	goto	l3648
  9357                           
  9358                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9359  00E672  0E00               	movlw	0
  9360  00E674  6E12               	movwf	___wmul@multiplicand+1,c
  9361  00E676  0E03               	movlw	3
  9362  00E678  6E11               	movwf	___wmul@multiplicand,c
  9363  00E67A  0E00               	movlw	0
  9364  00E67C  6E0A               	movwf	___awdiv@divisor+1,c
  9365  00E67E  0E0A               	movlw	10
  9366  00E680  6E09               	movwf	___awdiv@divisor,c
  9367  00E682  0E00               	movlw	0
  9368  00E684  6E04               	movwf	___awmod@divisor+1,c
  9369  00E686  0E64               	movlw	100
  9370  00E688  6E03               	movwf	___awmod@divisor,c
  9371  00E68A  C031  F001         	movff	fround@prec,___awmod@dividend
  9372  00E68E  6A02               	clrf	___awmod@dividend+1,c
  9373  00E690  EC29  F066         	call	___awmod	;wreg free
  9374  00E694  C001  F007         	movff	?___awmod,___awdiv@dividend
  9375  00E698  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  9376  00E69C  EC09  F068         	call	___awdiv	;wreg free
  9377  00E6A0  0E09               	movlw	9
  9378  00E6A2  2407               	addwf	?___awdiv,w,c
  9379  00E6A4  6E0F               	movwf	___wmul@multiplier,c
  9380  00E6A6  0E00               	movlw	0
  9381  00E6A8  2008               	addwfc	?___awdiv+1,w,c
  9382  00E6AA  6E10               	movwf	___wmul@multiplier+1,c
  9383  00E6AC  ECEB  F062         	call	___wmul	;wreg free
  9384  00E6B0  0E38               	movlw	low __npowers_
  9385  00E6B2  240F               	addwf	?___wmul,w,c
  9386  00E6B4  6EF6               	movwf	tblptrl,c
  9387  00E6B6  0EFF               	movlw	high __npowers_
  9388  00E6B8  2010               	addwfc	?___wmul+1,w,c
  9389  00E6BA  6EF7               	movwf	tblptrh,c
  9390  00E6BC                     	if	0	;There are less than 3 active tblptr bytes
  9391  00E6BC                     	endif
  9392  00E6BC  0009               	tblrd		*+
  9393  00E6BE  CFF5 F01C          	movff	tablat,___ftmul@f2
  9394  00E6C2  0009               	tblrd		*+
  9395  00E6C4  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  9396  00E6C8  000A               	tblrd		*-
  9397  00E6CA  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  9398  00E6CE  0E00               	movlw	0
  9399  00E6D0  6E0A               	movwf	___awdiv@divisor+1,c
  9400  00E6D2  0E64               	movlw	100
  9401  00E6D4  6E09               	movwf	___awdiv@divisor,c
  9402  00E6D6  C031  F007         	movff	fround@prec,___awdiv@dividend
  9403  00E6DA  6A08               	clrf	___awdiv@dividend+1,c
  9404  00E6DC  EC09  F068         	call	___awdiv	;wreg free
  9405  00E6E0  0E12               	movlw	18
  9406  00E6E2  2407               	addwf	?___awdiv,w,c
  9407  00E6E4  6E0F               	movwf	___wmul@multiplier,c
  9408  00E6E6  0E00               	movlw	0
  9409  00E6E8  2008               	addwfc	?___awdiv+1,w,c
  9410  00E6EA  6E10               	movwf	___wmul@multiplier+1,c
  9411  00E6EC  0E00               	movlw	0
  9412  00E6EE  6E12               	movwf	___wmul@multiplicand+1,c
  9413  00E6F0  0E03               	movlw	3
  9414  00E6F2  6E11               	movwf	___wmul@multiplicand,c
  9415  00E6F4  ECEB  F062         	call	___wmul	;wreg free
  9416  00E6F8  0E38               	movlw	low __npowers_
  9417  00E6FA  240F               	addwf	?___wmul,w,c
  9418  00E6FC  6EF6               	movwf	tblptrl,c
  9419  00E6FE  0EFF               	movlw	high __npowers_
  9420  00E700  2010               	addwfc	?___wmul+1,w,c
  9421  00E702  6EF7               	movwf	tblptrh,c
  9422  00E704                     	if	0	;There are less than 3 active tblptr bytes
  9423  00E704                     	endif
  9424  00E704  0009               	tblrd		*+
  9425  00E706  CFF5 F019          	movff	tablat,___ftmul@f1
  9426  00E70A  0009               	tblrd		*+
  9427  00E70C  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  9428  00E710  000A               	tblrd		*-
  9429  00E712  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  9430  00E716  EC6D  F06C         	call	___ftmul	;wreg free
  9431  00E71A  C019  F02E         	movff	?___ftmul,_fround$2379
  9432  00E71E  C01A  F02F         	movff	?___ftmul+1,_fround$2379+1
  9433  00E722  C01B  F030         	movff	?___ftmul+2,_fround$2379+2
  9434                           
  9435                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9436  00E726  0E00               	movlw	0
  9437  00E728  6E12               	movwf	___wmul@multiplicand+1,c
  9438  00E72A  0E03               	movlw	3
  9439  00E72C  6E11               	movwf	___wmul@multiplicand,c
  9440  00E72E  0E00               	movlw	0
  9441  00E730  6E04               	movwf	___awmod@divisor+1,c
  9442  00E732  0E0A               	movlw	10
  9443  00E734  6E03               	movwf	___awmod@divisor,c
  9444  00E736  C031  F001         	movff	fround@prec,___awmod@dividend
  9445  00E73A  6A02               	clrf	___awmod@dividend+1,c
  9446  00E73C  EC29  F066         	call	___awmod	;wreg free
  9447  00E740  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9448  00E744  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9449  00E748  ECEB  F062         	call	___wmul	;wreg free
  9450  00E74C  0E38               	movlw	low __npowers_
  9451  00E74E  240F               	addwf	?___wmul,w,c
  9452  00E750  6EF6               	movwf	tblptrl,c
  9453  00E752  0EFF               	movlw	high __npowers_
  9454  00E754  2010               	addwfc	?___wmul+1,w,c
  9455  00E756  6EF7               	movwf	tblptrh,c
  9456  00E758                     	if	0	;There are less than 3 active tblptr bytes
  9457  00E758                     	endif
  9458  00E758  0009               	tblrd		*+
  9459  00E75A  CFF5 F01C          	movff	tablat,___ftmul@f2
  9460  00E75E  0009               	tblrd		*+
  9461  00E760  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  9462  00E764  000A               	tblrd		*-
  9463  00E766  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  9464  00E76A  C02E  F019         	movff	_fround$2379,___ftmul@f1
  9465  00E76E  C02F  F01A         	movff	_fround$2379+1,___ftmul@f1+1
  9466  00E772  C030  F01B         	movff	_fround$2379+2,___ftmul@f1+2
  9467  00E776  EC6D  F06C         	call	___ftmul	;wreg free
  9468  00E77A  C019  F02B         	movff	?___ftmul,_fround$2380
  9469  00E77E  C01A  F02C         	movff	?___ftmul+1,_fround$2380+1
  9470  00E782  C01B  F02D         	movff	?___ftmul+2,_fround$2380+2
  9471                           
  9472                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9473  00E786  C02B  F019         	movff	_fround$2380,___ftmul@f1
  9474  00E78A  C02C  F01A         	movff	_fround$2380+1,___ftmul@f1+1
  9475  00E78E  C02D  F01B         	movff	_fround$2380+2,___ftmul@f1+2
  9476  00E792  0E00               	movlw	0
  9477  00E794  6E1C               	movwf	___ftmul@f2,c
  9478  00E796  0E00               	movlw	0
  9479  00E798  6E1D               	movwf	___ftmul@f2+1,c
  9480  00E79A  0E3F               	movlw	63
  9481  00E79C  6E1E               	movwf	___ftmul@f2+2,c
  9482  00E79E  EC6D  F06C         	call	___ftmul	;wreg free
  9483  00E7A2  D07D               	goto	L20
  9484  00E7A4  D083               	goto	l536
  9485  00E7A6  D062               	goto	l3656
  9486  00E7A8                     l3648:
  9487                           
  9488                           ;doprnt.c: 415: else if(prec > 10)
  9489  00E7A8  0E0A               	movlw	10
  9490  00E7AA  6431               	cpfsgt	fround@prec,c
  9491  00E7AC  D05F               	goto	l3656
  9492                           
  9493                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9494  00E7AE  0E00               	movlw	0
  9495  00E7B0  6E12               	movwf	___wmul@multiplicand+1,c
  9496  00E7B2  0E03               	movlw	3
  9497  00E7B4  6E11               	movwf	___wmul@multiplicand,c
  9498  00E7B6  0E00               	movlw	0
  9499  00E7B8  6E04               	movwf	___awmod@divisor+1,c
  9500  00E7BA  0E0A               	movlw	10
  9501  00E7BC  6E03               	movwf	___awmod@divisor,c
  9502  00E7BE  C031  F001         	movff	fround@prec,___awmod@dividend
  9503  00E7C2  6A02               	clrf	___awmod@dividend+1,c
  9504  00E7C4  EC29  F066         	call	___awmod	;wreg free
  9505  00E7C8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9506  00E7CC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9507  00E7D0  ECEB  F062         	call	___wmul	;wreg free
  9508  00E7D4  0E38               	movlw	low __npowers_
  9509  00E7D6  240F               	addwf	?___wmul,w,c
  9510  00E7D8  6EF6               	movwf	tblptrl,c
  9511  00E7DA  0EFF               	movlw	high __npowers_
  9512  00E7DC  2010               	addwfc	?___wmul+1,w,c
  9513  00E7DE  6EF7               	movwf	tblptrh,c
  9514  00E7E0                     	if	0	;There are less than 3 active tblptr bytes
  9515  00E7E0                     	endif
  9516  00E7E0  0009               	tblrd		*+
  9517  00E7E2  CFF5 F01C          	movff	tablat,___ftmul@f2
  9518  00E7E6  0009               	tblrd		*+
  9519  00E7E8  CFF5 F01D          	movff	tablat,___ftmul@f2+1
  9520  00E7EC  000A               	tblrd		*-
  9521  00E7EE  CFF5 F01E          	movff	tablat,___ftmul@f2+2
  9522  00E7F2  0E00               	movlw	0
  9523  00E7F4  6E0A               	movwf	___awdiv@divisor+1,c
  9524  00E7F6  0E0A               	movlw	10
  9525  00E7F8  6E09               	movwf	___awdiv@divisor,c
  9526  00E7FA  C031  F007         	movff	fround@prec,___awdiv@dividend
  9527  00E7FE  6A08               	clrf	___awdiv@dividend+1,c
  9528  00E800  EC09  F068         	call	___awdiv	;wreg free
  9529  00E804  0E09               	movlw	9
  9530  00E806  2407               	addwf	?___awdiv,w,c
  9531  00E808  6E0F               	movwf	___wmul@multiplier,c
  9532  00E80A  0E00               	movlw	0
  9533  00E80C  2008               	addwfc	?___awdiv+1,w,c
  9534  00E80E  6E10               	movwf	___wmul@multiplier+1,c
  9535  00E810  0E00               	movlw	0
  9536  00E812  6E12               	movwf	___wmul@multiplicand+1,c
  9537  00E814  0E03               	movlw	3
  9538  00E816  6E11               	movwf	___wmul@multiplicand,c
  9539  00E818  ECEB  F062         	call	___wmul	;wreg free
  9540  00E81C  0E38               	movlw	low __npowers_
  9541  00E81E  240F               	addwf	?___wmul,w,c
  9542  00E820  6EF6               	movwf	tblptrl,c
  9543  00E822  0EFF               	movlw	high __npowers_
  9544  00E824  2010               	addwfc	?___wmul+1,w,c
  9545  00E826  6EF7               	movwf	tblptrh,c
  9546  00E828                     	if	0	;There are less than 3 active tblptr bytes
  9547  00E828                     	endif
  9548  00E828  0009               	tblrd		*+
  9549  00E82A  CFF5 F019          	movff	tablat,___ftmul@f1
  9550  00E82E  0009               	tblrd		*+
  9551  00E830  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  9552  00E834  000A               	tblrd		*-
  9553  00E836  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  9554  00E83A  EC6D  F06C         	call	___ftmul	;wreg free
  9555  00E83E  C019  F02E         	movff	?___ftmul,_fround$2379
  9556  00E842  C01A  F02F         	movff	?___ftmul+1,_fround$2379+1
  9557  00E846  C01B  F030         	movff	?___ftmul+2,_fround$2379+2
  9558                           
  9559                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9560  00E84A  C02E  F019         	movff	_fround$2379,___ftmul@f1
  9561  00E84E  C02F  F01A         	movff	_fround$2379+1,___ftmul@f1+1
  9562  00E852  C030  F01B         	movff	_fround$2379+2,___ftmul@f1+2
  9563  00E856  0E00               	movlw	0
  9564  00E858  6E1C               	movwf	___ftmul@f2,c
  9565  00E85A  0E00               	movlw	0
  9566  00E85C  6E1D               	movwf	___ftmul@f2+1,c
  9567  00E85E  0E3F               	movlw	63
  9568  00E860  6E1E               	movwf	___ftmul@f2+2,c
  9569  00E862  EC6D  F06C         	call	___ftmul	;wreg free
  9570  00E866  D01B               	goto	L20
  9571  00E868  D021               	goto	l536
  9572  00E86A  D000               	goto	l3656
  9573  00E86C                     l3656:
  9574                           
  9575                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9576  00E86C  5031               	movf	fround@prec,w,c
  9577  00E86E  0D03               	mullw	3
  9578  00E870  0E38               	movlw	low __npowers_
  9579  00E872  24F3               	addwf	prodl,w,c
  9580  00E874  6EF6               	movwf	tblptrl,c
  9581  00E876  0EFF               	movlw	high __npowers_
  9582  00E878  20F4               	addwfc	prodh,w,c
  9583  00E87A  6EF7               	movwf	tblptrh,c
  9584  00E87C                     	if	0	;There are less than 3 active tblptr bytes
  9585  00E87C                     	endif
  9586  00E87C  0009               	tblrd		*+
  9587  00E87E  CFF5 F019          	movff	tablat,___ftmul@f1
  9588  00E882  0009               	tblrd		*+
  9589  00E884  CFF5 F01A          	movff	tablat,___ftmul@f1+1
  9590  00E888  000A               	tblrd		*-
  9591  00E88A  CFF5 F01B          	movff	tablat,___ftmul@f1+2
  9592  00E88E  0E00               	movlw	0
  9593  00E890  6E1C               	movwf	___ftmul@f2,c
  9594  00E892  0E00               	movlw	0
  9595  00E894  6E1D               	movwf	___ftmul@f2+1,c
  9596  00E896  0E3F               	movlw	63
  9597  00E898  6E1E               	movwf	___ftmul@f2+2,c
  9598  00E89A  EC6D  F06C         	call	___ftmul	;wreg free
  9599  00E89E                     L20:
  9600  00E89E  C019  F028         	movff	?___ftmul,?_fround
  9601  00E8A2  C01A  F029         	movff	?___ftmul+1,?_fround+1
  9602  00E8A6  C01B  F02A         	movff	?___ftmul+2,?_fround+2
  9603  00E8AA  D000               	goto	l536
  9604  00E8AC                     l536:
  9605  00E8AC  0012               	return		;funcret
  9606  00E8AE                     __end_of_fround:
  9607                           	opt stack 0
  9608                           tblptru	equ	0xFF8
  9609                           tblptrh	equ	0xFF7
  9610                           tblptrl	equ	0xFF6
  9611                           tablat	equ	0xFF5
  9612                           prodh	equ	0xFF4
  9613                           prodl	equ	0xFF3
  9614                           intcon2	equ	0xFF1
  9615                           postinc0	equ	0xFEE
  9616                           wreg	equ	0xFE8
  9617                           postdec1	equ	0xFE5
  9618                           fsr1l	equ	0xFE1
  9619                           postinc2	equ	0xFDE
  9620                           postdec2	equ	0xFDD
  9621                           fsr2h	equ	0xFDA
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625 ;; *************** function ___ftmul *****************
  9626 ;; Defined at:
  9627 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;  f1              3   24[COMRAM] float 
  9630 ;;  f2              3   27[COMRAM] float 
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;  f3_as_produc    3   34[COMRAM] unsigned um
  9633 ;;  sign            1   38[COMRAM] unsigned char 
  9634 ;;  cntr            1   37[COMRAM] unsigned char 
  9635 ;;  exp             1   33[COMRAM] unsigned char 
  9636 ;; Return value:  Size  Location     Type
  9637 ;;                  3   24[COMRAM] float 
  9638 ;; Registers used:
  9639 ;;		wreg, status,2, status,0, cstack
  9640 ;; Tracked objects:
  9641 ;;		On entry : 0/0
  9642 ;;		On exit  : 0/0
  9643 ;;		Unchanged: 0/0
  9644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9645 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9648 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;Total ram usage:       15 bytes
  9650 ;; Hardware stack levels used:    1
  9651 ;; Hardware stack levels required when called:    1
  9652 ;; This function calls:
  9653 ;;		___ftpack
  9654 ;; This function is called by:
  9655 ;;		_main
  9656 ;;		_fround
  9657 ;;		_scale
  9658 ;;		_printf
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           	psect	text38
  9663  00D8DA                     __ptext38:
  9664                           	opt stack 0
  9665  00D8DA                     ___ftmul:
  9666                           	opt stack 29
  9667                           
  9668                           ;incstack = 0
  9669  00D8DA  C01B  F01F         	movff	___ftmul@f1+2,??___ftmul
  9670  00D8DE  6A20               	clrf	(??___ftmul+1)& (0+255),c
  9671  00D8E0  6A21               	clrf	(??___ftmul+2)& (0+255),c
  9672  00D8E2  341A               	rlcf	___ftmul@f1+1,w,c
  9673  00D8E4  361F               	rlcf	??___ftmul& (0+255),f,c
  9674  00D8E6  E301               	bnc	u2581
  9675  00D8E8  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  9676  00D8EA                     u2581:
  9677  00D8EA  501F               	movf	??___ftmul,w,c
  9678  00D8EC  6E22               	movwf	___ftmul@exp,c
  9679  00D8EE  5022               	movf	___ftmul@exp,w,c
  9680  00D8F0  A4D8               	btfss	status,2,c
  9681  00D8F2  D002               	goto	l3448
  9682  00D8F4  D00E               	goto	l3450
  9683  00D8F6  D06C               	goto	l1064
  9684  00D8F8                     l3448:
  9685  00D8F8  C01E  F01F         	movff	___ftmul@f2+2,??___ftmul
  9686  00D8FC  6A20               	clrf	(??___ftmul+1)& (0+255),c
  9687  00D8FE  6A21               	clrf	(??___ftmul+2)& (0+255),c
  9688  00D900  341D               	rlcf	___ftmul@f2+1,w,c
  9689  00D902  361F               	rlcf	??___ftmul& (0+255),f,c
  9690  00D904  E301               	bnc	u2601
  9691  00D906  8020               	bsf	(??___ftmul+1)& (0+255),0,c
  9692  00D908                     u2601:
  9693  00D908  501F               	movf	??___ftmul,w,c
  9694  00D90A  6E27               	movwf	___ftmul@sign,c
  9695  00D90C  5027               	movf	___ftmul@sign,w,c
  9696  00D90E  A4D8               	btfss	status,2,c
  9697  00D910  D007               	goto	l3454
  9698  00D912                     l3450:
  9699  00D912  0E00               	movlw	0
  9700  00D914  6E19               	movwf	?___ftmul,c
  9701  00D916  0E00               	movlw	0
  9702  00D918  6E1A               	movwf	?___ftmul+1,c
  9703  00D91A  0E00               	movlw	0
  9704  00D91C  6E1B               	movwf	?___ftmul+2,c
  9705  00D91E  D058               	goto	l1064
  9706  00D920                     l3454:
  9707  00D920  5027               	movf	___ftmul@sign,w,c
  9708  00D922  0F7B               	addlw	123
  9709  00D924  2622               	addwf	___ftmul@exp,f,c
  9710  00D926  C01B  F027         	movff	___ftmul@f1+2,___ftmul@sign
  9711  00D92A  501E               	movf	___ftmul@f2+2,w,c
  9712  00D92C  1A27               	xorwf	___ftmul@sign,f,c
  9713  00D92E  0E80               	movlw	128
  9714  00D930  1627               	andwf	___ftmul@sign,f,c
  9715  00D932  8E1A               	bsf	___ftmul@f1+1,7,c
  9716  00D934  8E1D               	bsf	___ftmul@f2+1,7,c
  9717  00D936  0EFF               	movlw	255
  9718  00D938  161C               	andwf	___ftmul@f2,f,c
  9719  00D93A  0EFF               	movlw	255
  9720  00D93C  161D               	andwf	___ftmul@f2+1,f,c
  9721  00D93E  0E00               	movlw	0
  9722  00D940  161E               	andwf	___ftmul@f2+2,f,c
  9723  00D942  0E00               	movlw	0
  9724  00D944  6E23               	movwf	___ftmul@f3_as_product,c
  9725  00D946  0E00               	movlw	0
  9726  00D948  6E24               	movwf	___ftmul@f3_as_product+1,c
  9727  00D94A  0E00               	movlw	0
  9728  00D94C  6E25               	movwf	___ftmul@f3_as_product+2,c
  9729  00D94E  0E07               	movlw	7
  9730  00D950  6E26               	movwf	___ftmul@cntr,c
  9731  00D952  D000               	goto	l3468
  9732  00D954                     l3468:
  9733  00D954  A019               	btfss	___ftmul@f1,0,c
  9734  00D956  D007               	goto	l3472
  9735  00D958  501C               	movf	___ftmul@f2,w,c
  9736  00D95A  2623               	addwf	___ftmul@f3_as_product,f,c
  9737  00D95C  501D               	movf	___ftmul@f2+1,w,c
  9738  00D95E  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  9739  00D960  501E               	movf	___ftmul@f2+2,w,c
  9740  00D962  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  9741  00D964  D000               	goto	l3472
  9742  00D966                     l3472:
  9743  00D966  90D8               	bcf	status,0,c
  9744  00D968  321B               	rrcf	___ftmul@f1+2,f,c
  9745  00D96A  321A               	rrcf	___ftmul@f1+1,f,c
  9746  00D96C  3219               	rrcf	___ftmul@f1,f,c
  9747  00D96E  90D8               	bcf	status,0,c
  9748  00D970  361C               	rlcf	___ftmul@f2,f,c
  9749  00D972  361D               	rlcf	___ftmul@f2+1,f,c
  9750  00D974  361E               	rlcf	___ftmul@f2+2,f,c
  9751  00D976  2E26               	decfsz	___ftmul@cntr,f,c
  9752  00D978  D7ED               	goto	l3468
  9753  00D97A  D000               	goto	l3476
  9754  00D97C                     l3476:
  9755  00D97C  0E09               	movlw	9
  9756  00D97E  6E26               	movwf	___ftmul@cntr,c
  9757  00D980  D000               	goto	l3478
  9758  00D982                     l3478:
  9759  00D982  A019               	btfss	___ftmul@f1,0,c
  9760  00D984  D007               	goto	l3482
  9761  00D986  501C               	movf	___ftmul@f2,w,c
  9762  00D988  2623               	addwf	___ftmul@f3_as_product,f,c
  9763  00D98A  501D               	movf	___ftmul@f2+1,w,c
  9764  00D98C  2224               	addwfc	___ftmul@f3_as_product+1,f,c
  9765  00D98E  501E               	movf	___ftmul@f2+2,w,c
  9766  00D990  2225               	addwfc	___ftmul@f3_as_product+2,f,c
  9767  00D992  D000               	goto	l3482
  9768  00D994                     l3482:
  9769  00D994  90D8               	bcf	status,0,c
  9770  00D996  321B               	rrcf	___ftmul@f1+2,f,c
  9771  00D998  321A               	rrcf	___ftmul@f1+1,f,c
  9772  00D99A  3219               	rrcf	___ftmul@f1,f,c
  9773  00D99C  90D8               	bcf	status,0,c
  9774  00D99E  3225               	rrcf	___ftmul@f3_as_product+2,f,c
  9775  00D9A0  3224               	rrcf	___ftmul@f3_as_product+1,f,c
  9776  00D9A2  3223               	rrcf	___ftmul@f3_as_product,f,c
  9777  00D9A4  2E26               	decfsz	___ftmul@cntr,f,c
  9778  00D9A6  D7ED               	goto	l3478
  9779  00D9A8  D000               	goto	l3486
  9780  00D9AA                     l3486:
  9781  00D9AA  C023  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9782  00D9AE  C024  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9783  00D9B2  C025  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9784  00D9B6  C022  F004         	movff	___ftmul@exp,___ftpack@exp
  9785  00D9BA  C027  F005         	movff	___ftmul@sign,___ftpack@sign
  9786  00D9BE  EC01  F069         	call	___ftpack	;wreg free
  9787  00D9C2  C001  F019         	movff	?___ftpack,?___ftmul
  9788  00D9C6  C002  F01A         	movff	?___ftpack+1,?___ftmul+1
  9789  00D9CA  C003  F01B         	movff	?___ftpack+2,?___ftmul+2
  9790  00D9CE  D000               	goto	l1064
  9791  00D9D0                     l1064:
  9792  00D9D0  0012               	return		;funcret
  9793  00D9D2                     __end_of___ftmul:
  9794                           	opt stack 0
  9795                           tblptru	equ	0xFF8
  9796                           tblptrh	equ	0xFF7
  9797                           tblptrl	equ	0xFF6
  9798                           tablat	equ	0xFF5
  9799                           prodh	equ	0xFF4
  9800                           prodl	equ	0xFF3
  9801                           intcon2	equ	0xFF1
  9802                           postinc0	equ	0xFEE
  9803                           wreg	equ	0xFE8
  9804                           postdec1	equ	0xFE5
  9805                           fsr1l	equ	0xFE1
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           fsr2h	equ	0xFDA
  9809                           fsr2l	equ	0xFD9
  9810                           status	equ	0xFD8
  9811                           
  9812 ;; *************** function ___awmod *****************
  9813 ;; Defined at:
  9814 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;  dividend        2    0[COMRAM] int 
  9817 ;;  divisor         2    2[COMRAM] int 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  sign            1    5[COMRAM] unsigned char 
  9820 ;;  counter         1    4[COMRAM] unsigned char 
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  2    0[COMRAM] int 
  9823 ;; Registers used:
  9824 ;;		wreg, status,2, status,0
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;Total ram usage:        6 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; This function calls:
  9837 ;;		Nothing
  9838 ;; This function is called by:
  9839 ;;		_update_LCD_count
  9840 ;;		_update_LCD_PED_Count
  9841 ;;		_fround
  9842 ;;		_scale
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           	psect	text39
  9847  00CC52                     __ptext39:
  9848                           	opt stack 0
  9849  00CC52                     ___awmod:
  9850                           	opt stack 27
  9851                           
  9852                           ;incstack = 0
  9853  00CC52  0E00               	movlw	0
  9854  00CC54  6E06               	movwf	___awmod@sign,c
  9855  00CC56  AE02               	btfss	___awmod@dividend+1,7,c
  9856  00CC58  D007               	goto	l3542
  9857  00CC5A  6C01               	negf	___awmod@dividend,c
  9858  00CC5C  1E02               	comf	___awmod@dividend+1,f,c
  9859  00CC5E  B0D8               	btfsc	status,0,c
  9860  00CC60  2A02               	incf	___awmod@dividend+1,f,c
  9861  00CC62  0E01               	movlw	1
  9862  00CC64  6E06               	movwf	___awmod@sign,c
  9863  00CC66  D000               	goto	l3542
  9864  00CC68                     l3542:
  9865  00CC68  AE04               	btfss	___awmod@divisor+1,7,c
  9866  00CC6A  D005               	goto	l3546
  9867  00CC6C  6C03               	negf	___awmod@divisor,c
  9868  00CC6E  1E04               	comf	___awmod@divisor+1,f,c
  9869  00CC70  B0D8               	btfsc	status,0,c
  9870  00CC72  2A04               	incf	___awmod@divisor+1,f,c
  9871  00CC74  D000               	goto	l3546
  9872  00CC76                     l3546:
  9873  00CC76  5003               	movf	___awmod@divisor,w,c
  9874  00CC78  1004               	iorwf	___awmod@divisor+1,w,c
  9875  00CC7A  B4D8               	btfsc	status,2,c
  9876  00CC7C  D01D               	goto	l3562
  9877  00CC7E  0E01               	movlw	1
  9878  00CC80  6E05               	movwf	___awmod@counter,c
  9879  00CC82  D005               	goto	l3552
  9880  00CC84                     l3550:
  9881  00CC84  90D8               	bcf	status,0,c
  9882  00CC86  3603               	rlcf	___awmod@divisor,f,c
  9883  00CC88  3604               	rlcf	___awmod@divisor+1,f,c
  9884  00CC8A  2A05               	incf	___awmod@counter,f,c
  9885  00CC8C  D000               	goto	l3552
  9886  00CC8E                     l3552:
  9887  00CC8E  BE04               	btfsc	___awmod@divisor+1,7,c
  9888  00CC90  D002               	goto	l3554
  9889  00CC92  D7F8               	goto	l3550
  9890  00CC94  D000               	goto	l3554
  9891  00CC96                     l3554:
  9892  00CC96  5003               	movf	___awmod@divisor,w,c
  9893  00CC98  5C01               	subwf	___awmod@dividend,w,c
  9894  00CC9A  5004               	movf	___awmod@divisor+1,w,c
  9895  00CC9C  5802               	subwfb	___awmod@dividend+1,w,c
  9896  00CC9E  A0D8               	btfss	status,0,c
  9897  00CCA0  D005               	goto	l3558
  9898  00CCA2  5003               	movf	___awmod@divisor,w,c
  9899  00CCA4  5E01               	subwf	___awmod@dividend,f,c
  9900  00CCA6  5004               	movf	___awmod@divisor+1,w,c
  9901  00CCA8  5A02               	subwfb	___awmod@dividend+1,f,c
  9902  00CCAA  D000               	goto	l3558
  9903  00CCAC                     l3558:
  9904  00CCAC  90D8               	bcf	status,0,c
  9905  00CCAE  3204               	rrcf	___awmod@divisor+1,f,c
  9906  00CCB0  3203               	rrcf	___awmod@divisor,f,c
  9907  00CCB2  2E05               	decfsz	___awmod@counter,f,c
  9908  00CCB4  D7F0               	goto	l3554
  9909  00CCB6  D000               	goto	l3562
  9910  00CCB8                     l3562:
  9911  00CCB8  5006               	movf	___awmod@sign,w,c
  9912  00CCBA  B4D8               	btfsc	status,2,c
  9913  00CCBC  D005               	goto	l3566
  9914  00CCBE  6C01               	negf	___awmod@dividend,c
  9915  00CCC0  1E02               	comf	___awmod@dividend+1,f,c
  9916  00CCC2  B0D8               	btfsc	status,0,c
  9917  00CCC4  2A02               	incf	___awmod@dividend+1,f,c
  9918  00CCC6  D000               	goto	l3566
  9919  00CCC8                     l3566:
  9920  00CCC8  C001  F001         	movff	___awmod@dividend,?___awmod
  9921  00CCCC  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  9922  00CCD0  D000               	goto	l841
  9923  00CCD2                     l841:
  9924  00CCD2  0012               	return		;funcret
  9925  00CCD4                     __end_of___awmod:
  9926                           	opt stack 0
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           intcon2	equ	0xFF1
  9934                           postinc0	equ	0xFEE
  9935                           wreg	equ	0xFE8
  9936                           postdec1	equ	0xFE5
  9937                           fsr1l	equ	0xFE1
  9938                           postinc2	equ	0xFDE
  9939                           postdec2	equ	0xFDD
  9940                           fsr2h	equ	0xFDA
  9941                           fsr2l	equ	0xFD9
  9942                           status	equ	0xFD8
  9943                           
  9944 ;; *************** function ___awdiv *****************
  9945 ;; Defined at:
  9946 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;  dividend        2    6[COMRAM] int 
  9949 ;;  divisor         2    8[COMRAM] int 
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;  quotient        2   12[COMRAM] int 
  9952 ;;  sign            1   11[COMRAM] unsigned char 
  9953 ;;  counter         1   10[COMRAM] unsigned char 
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  2    6[COMRAM] int 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;Total ram usage:        8 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_update_LCD_count
  9973 ;;		_update_LCD_PED_Count
  9974 ;;		_fround
  9975 ;;		_scale
  9976 ;;		_printf
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           	psect	text40
  9981  00D012                     __ptext40:
  9982                           	opt stack 0
  9983  00D012                     ___awdiv:
  9984                           	opt stack 27
  9985                           
  9986                           ;incstack = 0
  9987  00D012  0E00               	movlw	0
  9988  00D014  6E0C               	movwf	___awdiv@sign,c
  9989  00D016  AE0A               	btfss	___awdiv@divisor+1,7,c
  9990  00D018  D007               	goto	l3498
  9991  00D01A  6C09               	negf	___awdiv@divisor,c
  9992  00D01C  1E0A               	comf	___awdiv@divisor+1,f,c
  9993  00D01E  B0D8               	btfsc	status,0,c
  9994  00D020  2A0A               	incf	___awdiv@divisor+1,f,c
  9995  00D022  0E01               	movlw	1
  9996  00D024  6E0C               	movwf	___awdiv@sign,c
  9997  00D026  D000               	goto	l3498
  9998  00D028                     l3498:
  9999  00D028  AE08               	btfss	___awdiv@dividend+1,7,c
 10000  00D02A  D007               	goto	l3504
 10001  00D02C  6C07               	negf	___awdiv@dividend,c
 10002  00D02E  1E08               	comf	___awdiv@dividend+1,f,c
 10003  00D030  B0D8               	btfsc	status,0,c
 10004  00D032  2A08               	incf	___awdiv@dividend+1,f,c
 10005  00D034  0E01               	movlw	1
 10006  00D036  1A0C               	xorwf	___awdiv@sign,f,c
 10007  00D038  D000               	goto	l3504
 10008  00D03A                     l3504:
 10009  00D03A  0E00               	movlw	0
 10010  00D03C  6E0E               	movwf	___awdiv@quotient+1,c
 10011  00D03E  0E00               	movlw	0
 10012  00D040  6E0D               	movwf	___awdiv@quotient,c
 10013  00D042  5009               	movf	___awdiv@divisor,w,c
 10014  00D044  100A               	iorwf	___awdiv@divisor+1,w,c
 10015  00D046  B4D8               	btfsc	status,2,c
 10016  00D048  D021               	goto	l3526
 10017  00D04A  0E01               	movlw	1
 10018  00D04C  6E0B               	movwf	___awdiv@counter,c
 10019  00D04E  D005               	goto	l3512
 10020  00D050                     l3510:
 10021  00D050  90D8               	bcf	status,0,c
 10022  00D052  3609               	rlcf	___awdiv@divisor,f,c
 10023  00D054  360A               	rlcf	___awdiv@divisor+1,f,c
 10024  00D056  2A0B               	incf	___awdiv@counter,f,c
 10025  00D058  D000               	goto	l3512
 10026  00D05A                     l3512:
 10027  00D05A  BE0A               	btfsc	___awdiv@divisor+1,7,c
 10028  00D05C  D002               	goto	l3514
 10029  00D05E  D7F8               	goto	l3510
 10030  00D060  D000               	goto	l3514
 10031  00D062                     l3514:
 10032  00D062  90D8               	bcf	status,0,c
 10033  00D064  360D               	rlcf	___awdiv@quotient,f,c
 10034  00D066  360E               	rlcf	___awdiv@quotient+1,f,c
 10035  00D068  5009               	movf	___awdiv@divisor,w,c
 10036  00D06A  5C07               	subwf	___awdiv@dividend,w,c
 10037  00D06C  500A               	movf	___awdiv@divisor+1,w,c
 10038  00D06E  5808               	subwfb	___awdiv@dividend+1,w,c
 10039  00D070  A0D8               	btfss	status,0,c
 10040  00D072  D006               	goto	l3522
 10041  00D074  5009               	movf	___awdiv@divisor,w,c
 10042  00D076  5E07               	subwf	___awdiv@dividend,f,c
 10043  00D078  500A               	movf	___awdiv@divisor+1,w,c
 10044  00D07A  5A08               	subwfb	___awdiv@dividend+1,f,c
 10045  00D07C  800D               	bsf	___awdiv@quotient,0,c
 10046  00D07E  D000               	goto	l3522
 10047  00D080                     l3522:
 10048  00D080  90D8               	bcf	status,0,c
 10049  00D082  320A               	rrcf	___awdiv@divisor+1,f,c
 10050  00D084  3209               	rrcf	___awdiv@divisor,f,c
 10051  00D086  2E0B               	decfsz	___awdiv@counter,f,c
 10052  00D088  D7EC               	goto	l3514
 10053  00D08A  D000               	goto	l3526
 10054  00D08C                     l3526:
 10055  00D08C  500C               	movf	___awdiv@sign,w,c
 10056  00D08E  B4D8               	btfsc	status,2,c
 10057  00D090  D005               	goto	l3530
 10058  00D092  6C0D               	negf	___awdiv@quotient,c
 10059  00D094  1E0E               	comf	___awdiv@quotient+1,f,c
 10060  00D096  B0D8               	btfsc	status,0,c
 10061  00D098  2A0E               	incf	___awdiv@quotient+1,f,c
 10062  00D09A  D000               	goto	l3530
 10063  00D09C                     l3530:
 10064  00D09C  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 10065  00D0A0  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 10066  00D0A4  D000               	goto	l828
 10067  00D0A6                     l828:
 10068  00D0A6  0012               	return		;funcret
 10069  00D0A8                     __end_of___awdiv:
 10070                           	opt stack 0
 10071                           tblptru	equ	0xFF8
 10072                           tblptrh	equ	0xFF7
 10073                           tblptrl	equ	0xFF6
 10074                           tablat	equ	0xFF5
 10075                           prodh	equ	0xFF4
 10076                           prodl	equ	0xFF3
 10077                           intcon2	equ	0xFF1
 10078                           postinc0	equ	0xFEE
 10079                           wreg	equ	0xFE8
 10080                           postdec1	equ	0xFE5
 10081                           fsr1l	equ	0xFE1
 10082                           postinc2	equ	0xFDE
 10083                           postdec2	equ	0xFDD
 10084                           fsr2h	equ	0xFDA
 10085                           fsr2l	equ	0xFD9
 10086                           status	equ	0xFD8
 10087                           
 10088 ;; *************** function __tdiv_to_l_ *****************
 10089 ;; Defined at:
 10090 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;  f1              3    0[COMRAM] float 
 10093 ;;  f2              3    3[COMRAM] float 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;  quot            4    9[COMRAM] unsigned long 
 10096 ;;  exp1            1   14[COMRAM] unsigned char 
 10097 ;;  cntr            1   13[COMRAM] unsigned char 
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  4    0[COMRAM] unsigned long 
 10100 ;; Registers used:
 10101 ;;		wreg, status,2, status,0
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10107 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10108 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10109 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10110 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10111 ;;Total ram usage:       15 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; This function calls:
 10114 ;;		Nothing
 10115 ;; This function is called by:
 10116 ;;		_printf
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           	psect	text41
 10121  00DADC                     __ptext41:
 10122                           	opt stack 0
 10123  00DADC                     __tdiv_to_l_:
 10124                           	opt stack 25
 10125                           
 10126                           ;incstack = 0
 10127  00DADC  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10128  00DAE0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10129  00DAE2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10130  00DAE4  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
 10131  00DAE6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10132  00DAE8  E301               	bnc	u2991
 10133  00DAEA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10134  00DAEC                     u2991:
 10135  00DAEC  5007               	movf	??__tdiv_to_l_,w,c
 10136  00DAEE  6E0F               	movwf	__tdiv_to_l_@exp1,c
 10137  00DAF0  500F               	movf	__tdiv_to_l_@exp1,w,c
 10138  00DAF2  A4D8               	btfss	status,2,c
 10139  00DAF4  D002               	goto	l3704
 10140  00DAF6  D05D               	goto	l3746
 10141  00DAF8  D078               	goto	l1040
 10142  00DAFA                     l3704:
 10143  00DAFA  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10144  00DAFE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10145  00DB00  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10146  00DB02  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
 10147  00DB04  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10148  00DB06  E301               	bnc	u3011
 10149  00DB08  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10150  00DB0A                     u3011:
 10151  00DB0A  5007               	movf	??__tdiv_to_l_,w,c
 10152  00DB0C  6E0E               	movwf	__tdiv_to_l_@cntr,c
 10153  00DB0E  500E               	movf	__tdiv_to_l_@cntr,w,c
 10154  00DB10  A4D8               	btfss	status,2,c
 10155  00DB12  D002               	goto	l3710
 10156  00DB14  D04E               	goto	l3746
 10157  00DB16  D069               	goto	l1040
 10158  00DB18                     l3710:
 10159  00DB18  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
 10160  00DB1A  0EFF               	movlw	255
 10161  00DB1C  1601               	andwf	__tdiv_to_l_@f1,f,c
 10162  00DB1E  0EFF               	movlw	255
 10163  00DB20  1602               	andwf	__tdiv_to_l_@f1+1,f,c
 10164  00DB22  0E00               	movlw	0
 10165  00DB24  1603               	andwf	__tdiv_to_l_@f1+2,f,c
 10166  00DB26  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
 10167  00DB28  0EFF               	movlw	255
 10168  00DB2A  1604               	andwf	__tdiv_to_l_@f2,f,c
 10169  00DB2C  0EFF               	movlw	255
 10170  00DB2E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
 10171  00DB30  0E00               	movlw	0
 10172  00DB32  1606               	andwf	__tdiv_to_l_@f2+2,f,c
 10173  00DB34  0E00               	movlw	0
 10174  00DB36  6E0A               	movwf	__tdiv_to_l_@quot,c
 10175  00DB38  0E00               	movlw	0
 10176  00DB3A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
 10177  00DB3C  0E00               	movlw	0
 10178  00DB3E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
 10179  00DB40  0E00               	movlw	0
 10180  00DB42  6E0D               	movwf	__tdiv_to_l_@quot+3,c
 10181  00DB44  0E7F               	movlw	127
 10182  00DB46  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 10183  00DB48  500E               	movf	__tdiv_to_l_@cntr,w,c
 10184  00DB4A  0F98               	addlw	152
 10185  00DB4C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 10186  00DB4E  0E18               	movlw	24
 10187  00DB50  6E0E               	movwf	__tdiv_to_l_@cntr,c
 10188  00DB52                     l1042:
 10189  00DB52  90D8               	bcf	status,0,c
 10190  00DB54  360A               	rlcf	__tdiv_to_l_@quot,f,c
 10191  00DB56  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 10192  00DB58  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 10193  00DB5A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 10194  00DB5C  5004               	movf	__tdiv_to_l_@f2,w,c
 10195  00DB5E  5C01               	subwf	__tdiv_to_l_@f1,w,c
 10196  00DB60  5005               	movf	__tdiv_to_l_@f2+1,w,c
 10197  00DB62  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
 10198  00DB64  5006               	movf	__tdiv_to_l_@f2+2,w,c
 10199  00DB66  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
 10200  00DB68  A0D8               	btfss	status,0,c
 10201  00DB6A  D007               	goto	l1043
 10202  00DB6C  5004               	movf	__tdiv_to_l_@f2,w,c
 10203  00DB6E  5E01               	subwf	__tdiv_to_l_@f1,f,c
 10204  00DB70  5005               	movf	__tdiv_to_l_@f2+1,w,c
 10205  00DB72  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
 10206  00DB74  5006               	movf	__tdiv_to_l_@f2+2,w,c
 10207  00DB76  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
 10208  00DB78  800A               	bsf	__tdiv_to_l_@quot,0,c
 10209  00DB7A                     l1043:
 10210  00DB7A  90D8               	bcf	status,0,c
 10211  00DB7C  3601               	rlcf	__tdiv_to_l_@f1,f,c
 10212  00DB7E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
 10213  00DB80  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
 10214  00DB82  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
 10215  00DB84  D7E6               	goto	l1042
 10216  00DB86  D000               	goto	l3732
 10217  00DB88                     l3732:
 10218  00DB88  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
 10219  00DB8A  D010               	goto	l3744
 10220  00DB8C  500F               	movf	__tdiv_to_l_@exp1,w,c
 10221  00DB8E  0A80               	xorlw	128
 10222  00DB90  0F97               	addlw	151
 10223  00DB92  B0D8               	btfsc	status,0,c
 10224  00DB94  D003               	goto	l3740
 10225  00DB96  D00D               	goto	l3746
 10226  00DB98  D028               	goto	l1040
 10227  00DB9A  D000               	goto	l3740
 10228  00DB9C                     l3740:
 10229  00DB9C  90D8               	bcf	status,0,c
 10230  00DB9E  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
 10231  00DBA0  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
 10232  00DBA2  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
 10233  00DBA4  320A               	rrcf	__tdiv_to_l_@quot,f,c
 10234  00DBA6  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
 10235  00DBA8  D7F9               	goto	l3740
 10236  00DBAA  D017               	goto	l1049
 10237  00DBAC                     l3744:
 10238  00DBAC  0E17               	movlw	23
 10239  00DBAE  640F               	cpfsgt	__tdiv_to_l_@exp1,c
 10240  00DBB0  D011               	goto	l3752
 10241  00DBB2                     l3746:
 10242  00DBB2  0E00               	movlw	0
 10243  00DBB4  6E01               	movwf	?__tdiv_to_l_,c
 10244  00DBB6  0E00               	movlw	0
 10245  00DBB8  6E02               	movwf	?__tdiv_to_l_+1,c
 10246  00DBBA  0E00               	movlw	0
 10247  00DBBC  6E03               	movwf	?__tdiv_to_l_+2,c
 10248  00DBBE  0E00               	movlw	0
 10249  00DBC0  6E04               	movwf	?__tdiv_to_l_+3,c
 10250  00DBC2  D013               	goto	l1040
 10251  00DBC4  D007               	goto	l3752
 10252  00DBC6                     l3750:
 10253  00DBC6  90D8               	bcf	status,0,c
 10254  00DBC8  360A               	rlcf	__tdiv_to_l_@quot,f,c
 10255  00DBCA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 10256  00DBCC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 10257  00DBCE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 10258  00DBD0  060F               	decf	__tdiv_to_l_@exp1,f,c
 10259  00DBD2  D000               	goto	l3752
 10260  00DBD4                     l3752:
 10261  00DBD4  500F               	movf	__tdiv_to_l_@exp1,w,c
 10262  00DBD6  A4D8               	btfss	status,2,c
 10263  00DBD8  D7F6               	goto	l3750
 10264  00DBDA                     l1049:
 10265  00DBDA  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10266  00DBDE  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10267  00DBE2  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10268  00DBE6  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10269  00DBEA                     l1040:
 10270  00DBEA  0012               	return		;funcret
 10271  00DBEC                     __end_of__tdiv_to_l_:
 10272                           	opt stack 0
 10273                           tblptru	equ	0xFF8
 10274                           tblptrh	equ	0xFF7
 10275                           tblptrl	equ	0xFF6
 10276                           tablat	equ	0xFF5
 10277                           prodh	equ	0xFF4
 10278                           prodl	equ	0xFF3
 10279                           intcon2	equ	0xFF1
 10280                           postinc0	equ	0xFEE
 10281                           wreg	equ	0xFE8
 10282                           postdec1	equ	0xFE5
 10283                           fsr1l	equ	0xFE1
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           fsr2h	equ	0xFDA
 10287                           fsr2l	equ	0xFD9
 10288                           status	equ	0xFD8
 10289                           
 10290 ;; *************** function __div_to_l_ *****************
 10291 ;; Defined at:
 10292 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  f1              3    0[COMRAM] unsigned long 
 10295 ;;  f2              3    3[COMRAM] unsigned long 
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;  quot            4    6[COMRAM] unsigned long 
 10298 ;;  exp1            1   11[COMRAM] unsigned char 
 10299 ;;  cntr            1   10[COMRAM] unsigned char 
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  4    0[COMRAM] unsigned long 
 10302 ;; Registers used:
 10303 ;;		wreg, status,2, status,0
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10309 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10313 ;;Total ram usage:       12 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; This function calls:
 10316 ;;		Nothing
 10317 ;; This function is called by:
 10318 ;;		_printf
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           	psect	text42
 10323  00D9D2                     __ptext42:
 10324                           	opt stack 0
 10325  00D9D2                     __div_to_l_:
 10326                           	opt stack 25
 10327                           
 10328                           ;incstack = 0
 10329  00D9D2  3403               	rlcf	__div_to_l_@f1+2,w,c
 10330  00D9D4  3404               	rlcf	__div_to_l_@f1+3,w,c
 10331  00D9D6  6E0C               	movwf	__div_to_l_@exp1,c
 10332  00D9D8  500C               	movf	__div_to_l_@exp1,w,c
 10333  00D9DA  A4D8               	btfss	status,2,c
 10334  00D9DC  D002               	goto	l3760
 10335  00D9DE  D061               	goto	l3806
 10336  00D9E0  D07C               	goto	l919
 10337  00D9E2                     l3760:
 10338  00D9E2  3406               	rlcf	__div_to_l_@f2+2,w,c
 10339  00D9E4  3407               	rlcf	__div_to_l_@f2+3,w,c
 10340  00D9E6  6E0B               	movwf	__div_to_l_@cntr,c
 10341  00D9E8  500B               	movf	__div_to_l_@cntr,w,c
 10342  00D9EA  A4D8               	btfss	status,2,c
 10343  00D9EC  D002               	goto	l3766
 10344  00D9EE  D059               	goto	l3806
 10345  00D9F0  D074               	goto	l919
 10346  00D9F2                     l3766:
 10347  00D9F2  8E03               	bsf	__div_to_l_@f1+2,7,c
 10348  00D9F4  0EFF               	movlw	255
 10349  00D9F6  1601               	andwf	__div_to_l_@f1,f,c
 10350  00D9F8  0EFF               	movlw	255
 10351  00D9FA  1602               	andwf	__div_to_l_@f1+1,f,c
 10352  00D9FC  0EFF               	movlw	255
 10353  00D9FE  1603               	andwf	__div_to_l_@f1+2,f,c
 10354  00DA00  0E00               	movlw	0
 10355  00DA02  1604               	andwf	__div_to_l_@f1+3,f,c
 10356  00DA04  8E06               	bsf	__div_to_l_@f2+2,7,c
 10357  00DA06  0EFF               	movlw	255
 10358  00DA08  1604               	andwf	__div_to_l_@f2,f,c
 10359  00DA0A  0EFF               	movlw	255
 10360  00DA0C  1605               	andwf	__div_to_l_@f2+1,f,c
 10361  00DA0E  0EFF               	movlw	255
 10362  00DA10  1606               	andwf	__div_to_l_@f2+2,f,c
 10363  00DA12  0E00               	movlw	0
 10364  00DA14  1607               	andwf	__div_to_l_@f2+3,f,c
 10365  00DA16  0E00               	movlw	0
 10366  00DA18  6E07               	movwf	__div_to_l_@quot,c
 10367  00DA1A  0E00               	movlw	0
 10368  00DA1C  6E08               	movwf	__div_to_l_@quot+1,c
 10369  00DA1E  0E00               	movlw	0
 10370  00DA20  6E09               	movwf	__div_to_l_@quot+2,c
 10371  00DA22  0E00               	movlw	0
 10372  00DA24  6E0A               	movwf	__div_to_l_@quot+3,c
 10373  00DA26  0E7F               	movlw	127
 10374  00DA28  5E0C               	subwf	__div_to_l_@exp1,f,c
 10375  00DA2A  500B               	movf	__div_to_l_@cntr,w,c
 10376  00DA2C  0FA0               	addlw	160
 10377  00DA2E  5E0C               	subwf	__div_to_l_@exp1,f,c
 10378  00DA30  0E20               	movlw	32
 10379  00DA32  6E0B               	movwf	__div_to_l_@cntr,c
 10380  00DA34  D000               	goto	l3780
 10381  00DA36                     l3780:
 10382  00DA36  90D8               	bcf	status,0,c
 10383  00DA38  3607               	rlcf	__div_to_l_@quot,f,c
 10384  00DA3A  3608               	rlcf	__div_to_l_@quot+1,f,c
 10385  00DA3C  3609               	rlcf	__div_to_l_@quot+2,f,c
 10386  00DA3E  360A               	rlcf	__div_to_l_@quot+3,f,c
 10387  00DA40  5004               	movf	__div_to_l_@f2,w,c
 10388  00DA42  5C01               	subwf	__div_to_l_@f1,w,c
 10389  00DA44  5005               	movf	__div_to_l_@f2+1,w,c
 10390  00DA46  5802               	subwfb	__div_to_l_@f1+1,w,c
 10391  00DA48  5006               	movf	__div_to_l_@f2+2,w,c
 10392  00DA4A  5803               	subwfb	__div_to_l_@f1+2,w,c
 10393  00DA4C  5007               	movf	__div_to_l_@f2+3,w,c
 10394  00DA4E  5804               	subwfb	__div_to_l_@f1+3,w,c
 10395  00DA50  A0D8               	btfss	status,0,c
 10396  00DA52  D00A               	goto	l3788
 10397  00DA54  5004               	movf	__div_to_l_@f2,w,c
 10398  00DA56  5E01               	subwf	__div_to_l_@f1,f,c
 10399  00DA58  5005               	movf	__div_to_l_@f2+1,w,c
 10400  00DA5A  5A02               	subwfb	__div_to_l_@f1+1,f,c
 10401  00DA5C  5006               	movf	__div_to_l_@f2+2,w,c
 10402  00DA5E  5A03               	subwfb	__div_to_l_@f1+2,f,c
 10403  00DA60  5007               	movf	__div_to_l_@f2+3,w,c
 10404  00DA62  5A04               	subwfb	__div_to_l_@f1+3,f,c
 10405  00DA64  8007               	bsf	__div_to_l_@quot,0,c
 10406  00DA66  D000               	goto	l3788
 10407  00DA68                     l3788:
 10408  00DA68  90D8               	bcf	status,0,c
 10409  00DA6A  3601               	rlcf	__div_to_l_@f1,f,c
 10410  00DA6C  3602               	rlcf	__div_to_l_@f1+1,f,c
 10411  00DA6E  3603               	rlcf	__div_to_l_@f1+2,f,c
 10412  00DA70  3604               	rlcf	__div_to_l_@f1+3,f,c
 10413  00DA72  2E0B               	decfsz	__div_to_l_@cntr,f,c
 10414  00DA74  D7E0               	goto	l3780
 10415  00DA76  D000               	goto	l3792
 10416  00DA78                     l3792:
 10417  00DA78  AE0C               	btfss	__div_to_l_@exp1,7,c
 10418  00DA7A  D010               	goto	l3804
 10419  00DA7C  500C               	movf	__div_to_l_@exp1,w,c
 10420  00DA7E  0A80               	xorlw	128
 10421  00DA80  0F9F               	addlw	159
 10422  00DA82  B0D8               	btfsc	status,0,c
 10423  00DA84  D003               	goto	l3800
 10424  00DA86  D00D               	goto	l3806
 10425  00DA88  D028               	goto	l919
 10426  00DA8A  D000               	goto	l3800
 10427  00DA8C                     l3800:
 10428  00DA8C  90D8               	bcf	status,0,c
 10429  00DA8E  320A               	rrcf	__div_to_l_@quot+3,f,c
 10430  00DA90  3209               	rrcf	__div_to_l_@quot+2,f,c
 10431  00DA92  3208               	rrcf	__div_to_l_@quot+1,f,c
 10432  00DA94  3207               	rrcf	__div_to_l_@quot,f,c
 10433  00DA96  3E0C               	incfsz	__div_to_l_@exp1,f,c
 10434  00DA98  D7F9               	goto	l3800
 10435  00DA9A  D017               	goto	l928
 10436  00DA9C                     l3804:
 10437  00DA9C  0E1F               	movlw	31
 10438  00DA9E  640C               	cpfsgt	__div_to_l_@exp1,c
 10439  00DAA0  D011               	goto	l3812
 10440  00DAA2                     l3806:
 10441  00DAA2  0E00               	movlw	0
 10442  00DAA4  6E01               	movwf	?__div_to_l_,c
 10443  00DAA6  0E00               	movlw	0
 10444  00DAA8  6E02               	movwf	?__div_to_l_+1,c
 10445  00DAAA  0E00               	movlw	0
 10446  00DAAC  6E03               	movwf	?__div_to_l_+2,c
 10447  00DAAE  0E00               	movlw	0
 10448  00DAB0  6E04               	movwf	?__div_to_l_+3,c
 10449  00DAB2  D013               	goto	l919
 10450  00DAB4  D007               	goto	l3812
 10451  00DAB6                     l3810:
 10452  00DAB6  90D8               	bcf	status,0,c
 10453  00DAB8  3607               	rlcf	__div_to_l_@quot,f,c
 10454  00DABA  3608               	rlcf	__div_to_l_@quot+1,f,c
 10455  00DABC  3609               	rlcf	__div_to_l_@quot+2,f,c
 10456  00DABE  360A               	rlcf	__div_to_l_@quot+3,f,c
 10457  00DAC0  060C               	decf	__div_to_l_@exp1,f,c
 10458  00DAC2  D000               	goto	l3812
 10459  00DAC4                     l3812:
 10460  00DAC4  500C               	movf	__div_to_l_@exp1,w,c
 10461  00DAC6  A4D8               	btfss	status,2,c
 10462  00DAC8  D7F6               	goto	l3810
 10463  00DACA                     l928:
 10464  00DACA  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
 10465  00DACE  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10466  00DAD2  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10467  00DAD6  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10468  00DADA                     l919:
 10469  00DADA  0012               	return		;funcret
 10470  00DADC                     __end_of__div_to_l_:
 10471                           	opt stack 0
 10472                           tblptru	equ	0xFF8
 10473                           tblptrh	equ	0xFF7
 10474                           tblptrl	equ	0xFF6
 10475                           tablat	equ	0xFF5
 10476                           prodh	equ	0xFF4
 10477                           prodl	equ	0xFF3
 10478                           intcon2	equ	0xFF1
 10479                           postinc0	equ	0xFEE
 10480                           wreg	equ	0xFE8
 10481                           postdec1	equ	0xFE5
 10482                           fsr1l	equ	0xFE1
 10483                           postinc2	equ	0xFDE
 10484                           postdec2	equ	0xFDD
 10485                           fsr2h	equ	0xFDA
 10486                           fsr2l	equ	0xFD9
 10487                           status	equ	0xFD8
 10488                           
 10489 ;; *************** function ___lltoft *****************
 10490 ;; Defined at:
 10491 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 10492 ;; Parameters:    Size  Location     Type
 10493 ;;  c               4    8[COMRAM] unsigned long 
 10494 ;; Auto vars:     Size  Location     Type
 10495 ;;  exp             1   16[COMRAM] unsigned char 
 10496 ;; Return value:  Size  Location     Type
 10497 ;;                  3    8[COMRAM] float 
 10498 ;; Registers used:
 10499 ;;		wreg, status,2, status,0, cstack
 10500 ;; Tracked objects:
 10501 ;;		On entry : 0/0
 10502 ;;		On exit  : 0/0
 10503 ;;		Unchanged: 0/0
 10504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10505 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10509 ;;Total ram usage:        9 bytes
 10510 ;; Hardware stack levels used:    1
 10511 ;; Hardware stack levels required when called:    1
 10512 ;; This function calls:
 10513 ;;		___ftpack
 10514 ;; This function is called by:
 10515 ;;		_printf
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text43
 10520  00CAAC                     __ptext43:
 10521                           	opt stack 0
 10522  00CAAC                     ___lltoft:
 10523                           	opt stack 24
 10524                           
 10525                           ;incstack = 0
 10526  00CAAC  0E8E               	movlw	142
 10527  00CAAE  6E11               	movwf	___lltoft@exp,c
 10528  00CAB0  D007               	goto	l3932
 10529  00CAB2                     l3930:
 10530  00CAB2  90D8               	bcf	status,0,c
 10531  00CAB4  320C               	rrcf	___lltoft@c+3,f,c
 10532  00CAB6  320B               	rrcf	___lltoft@c+2,f,c
 10533  00CAB8  320A               	rrcf	___lltoft@c+1,f,c
 10534  00CABA  3209               	rrcf	___lltoft@c,f,c
 10535  00CABC  2A11               	incf	___lltoft@exp,f,c
 10536  00CABE  D000               	goto	l3932
 10537  00CAC0                     l3932:
 10538  00CAC0  0E00               	movlw	0
 10539  00CAC2  1409               	andwf	___lltoft@c,w,c
 10540  00CAC4  6E0D               	movwf	??___lltoft& (0+255),c
 10541  00CAC6  0E00               	movlw	0
 10542  00CAC8  140A               	andwf	___lltoft@c+1,w,c
 10543  00CACA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 10544  00CACC  0E00               	movlw	0
 10545  00CACE  140B               	andwf	___lltoft@c+2,w,c
 10546  00CAD0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 10547  00CAD2  0EFF               	movlw	255
 10548  00CAD4  140C               	andwf	___lltoft@c+3,w,c
 10549  00CAD6  6E10               	movwf	(??___lltoft+3)& (0+255),c
 10550  00CAD8  500D               	movf	??___lltoft,w,c
 10551  00CADA  100E               	iorwf	??___lltoft+1,w,c
 10552  00CADC  100F               	iorwf	??___lltoft+2,w,c
 10553  00CADE  1010               	iorwf	??___lltoft+3,w,c
 10554  00CAE0  A4D8               	btfss	status,2,c
 10555  00CAE2  D7E7               	goto	l3930
 10556  00CAE4  C009  F001         	movff	___lltoft@c,___ftpack@arg
 10557  00CAE8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 10558  00CAEC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 10559  00CAF0  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 10560  00CAF4  0E00               	movlw	0
 10561  00CAF6  6E05               	movwf	___ftpack@sign,c
 10562  00CAF8  EC01  F069         	call	___ftpack	;wreg free
 10563  00CAFC  C001  F009         	movff	?___ftpack,?___lltoft
 10564  00CB00  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 10565  00CB04  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 10566  00CB08  D000               	goto	l1154
 10567  00CB0A                     l1154:
 10568  00CB0A  0012               	return		;funcret
 10569  00CB0C                     __end_of___lltoft:
 10570                           	opt stack 0
 10571                           tblptru	equ	0xFF8
 10572                           tblptrh	equ	0xFF7
 10573                           tblptrl	equ	0xFF6
 10574                           tablat	equ	0xFF5
 10575                           prodh	equ	0xFF4
 10576                           prodl	equ	0xFF3
 10577                           intcon2	equ	0xFF1
 10578                           postinc0	equ	0xFEE
 10579                           wreg	equ	0xFE8
 10580                           postdec1	equ	0xFE5
 10581                           fsr1l	equ	0xFE1
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           fsr2h	equ	0xFDA
 10585                           fsr2l	equ	0xFD9
 10586                           status	equ	0xFD8
 10587                           
 10588 ;; *************** function ___llmod *****************
 10589 ;; Defined at:
 10590 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;  dividend        4    0[COMRAM] unsigned long 
 10593 ;;  divisor         4    4[COMRAM] unsigned long 
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;  counter         1    8[COMRAM] unsigned char 
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  4    0[COMRAM] unsigned long 
 10598 ;; Registers used:
 10599 ;;		wreg, status,2, status,0
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10605 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10609 ;;Total ram usage:        9 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_printf
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text44
 10619  00CB72                     __ptext44:
 10620                           	opt stack 0
 10621  00CB72                     ___llmod:
 10622                           	opt stack 25
 10623                           
 10624                           ;incstack = 0
 10625  00CB72  5005               	movf	___llmod@divisor,w,c
 10626  00CB74  1006               	iorwf	___llmod@divisor+1,w,c
 10627  00CB76  1007               	iorwf	___llmod@divisor+2,w,c
 10628  00CB78  1008               	iorwf	___llmod@divisor+3,w,c
 10629  00CB7A  B4D8               	btfsc	status,2,c
 10630  00CB7C  D029               	goto	l1134
 10631  00CB7E  0E01               	movlw	1
 10632  00CB80  6E09               	movwf	___llmod@counter,c
 10633  00CB82  D007               	goto	l3918
 10634  00CB84                     l3916:
 10635  00CB84  90D8               	bcf	status,0,c
 10636  00CB86  3605               	rlcf	___llmod@divisor,f,c
 10637  00CB88  3606               	rlcf	___llmod@divisor+1,f,c
 10638  00CB8A  3607               	rlcf	___llmod@divisor+2,f,c
 10639  00CB8C  3608               	rlcf	___llmod@divisor+3,f,c
 10640  00CB8E  2A09               	incf	___llmod@counter,f,c
 10641  00CB90  D000               	goto	l3918
 10642  00CB92                     l3918:
 10643  00CB92  BE08               	btfsc	___llmod@divisor+3,7,c
 10644  00CB94  D002               	goto	l3920
 10645  00CB96  D7F6               	goto	l3916
 10646  00CB98  D000               	goto	l3920
 10647  00CB9A                     l3920:
 10648  00CB9A  5005               	movf	___llmod@divisor,w,c
 10649  00CB9C  5C01               	subwf	___llmod@dividend,w,c
 10650  00CB9E  5006               	movf	___llmod@divisor+1,w,c
 10651  00CBA0  5802               	subwfb	___llmod@dividend+1,w,c
 10652  00CBA2  5007               	movf	___llmod@divisor+2,w,c
 10653  00CBA4  5803               	subwfb	___llmod@dividend+2,w,c
 10654  00CBA6  5008               	movf	___llmod@divisor+3,w,c
 10655  00CBA8  5804               	subwfb	___llmod@dividend+3,w,c
 10656  00CBAA  A0D8               	btfss	status,0,c
 10657  00CBAC  D009               	goto	l3924
 10658  00CBAE  5005               	movf	___llmod@divisor,w,c
 10659  00CBB0  5E01               	subwf	___llmod@dividend,f,c
 10660  00CBB2  5006               	movf	___llmod@divisor+1,w,c
 10661  00CBB4  5A02               	subwfb	___llmod@dividend+1,f,c
 10662  00CBB6  5007               	movf	___llmod@divisor+2,w,c
 10663  00CBB8  5A03               	subwfb	___llmod@dividend+2,f,c
 10664  00CBBA  5008               	movf	___llmod@divisor+3,w,c
 10665  00CBBC  5A04               	subwfb	___llmod@dividend+3,f,c
 10666  00CBBE  D000               	goto	l3924
 10667  00CBC0                     l3924:
 10668  00CBC0  90D8               	bcf	status,0,c
 10669  00CBC2  3208               	rrcf	___llmod@divisor+3,f,c
 10670  00CBC4  3207               	rrcf	___llmod@divisor+2,f,c
 10671  00CBC6  3206               	rrcf	___llmod@divisor+1,f,c
 10672  00CBC8  3205               	rrcf	___llmod@divisor,f,c
 10673  00CBCA  2E09               	decfsz	___llmod@counter,f,c
 10674  00CBCC  D7E6               	goto	l3920
 10675  00CBCE  D000               	goto	l1134
 10676  00CBD0                     l1134:
 10677  00CBD0  C001  F001         	movff	___llmod@dividend,?___llmod
 10678  00CBD4  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
 10679  00CBD8  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
 10680  00CBDC  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
 10681  00CBE0  0012               	return		;funcret
 10682  00CBE2                     __end_of___llmod:
 10683                           	opt stack 0
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon2	equ	0xFF1
 10691                           postinc0	equ	0xFEE
 10692                           wreg	equ	0xFE8
 10693                           postdec1	equ	0xFE5
 10694                           fsr1l	equ	0xFE1
 10695                           postinc2	equ	0xFDE
 10696                           postdec2	equ	0xFDD
 10697                           fsr2h	equ	0xFDA
 10698                           fsr2l	equ	0xFD9
 10699                           status	equ	0xFD8
 10700                           
 10701 ;; *************** function ___lldiv *****************
 10702 ;; Defined at:
 10703 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  dividend        4    0[COMRAM] unsigned long 
 10706 ;;  divisor         4    4[COMRAM] unsigned long 
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;  quotient        4    8[COMRAM] unsigned long 
 10709 ;;  counter         1   12[COMRAM] unsigned char 
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  4    0[COMRAM] unsigned long 
 10712 ;; Registers used:
 10713 ;;		wreg, status,2, status,0
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10719 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;Total ram usage:       13 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; This function calls:
 10726 ;;		Nothing
 10727 ;; This function is called by:
 10728 ;;		_printf
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text45
 10733  00CEF0                     __ptext45:
 10734                           	opt stack 0
 10735  00CEF0                     ___lldiv:
 10736                           	opt stack 25
 10737                           
 10738                           ;incstack = 0
 10739  00CEF0  0E00               	movlw	0
 10740  00CEF2  6E09               	movwf	___lldiv@quotient,c
 10741  00CEF4  0E00               	movlw	0
 10742  00CEF6  6E0A               	movwf	___lldiv@quotient+1,c
 10743  00CEF8  0E00               	movlw	0
 10744  00CEFA  6E0B               	movwf	___lldiv@quotient+2,c
 10745  00CEFC  0E00               	movlw	0
 10746  00CEFE  6E0C               	movwf	___lldiv@quotient+3,c
 10747  00CF00  5005               	movf	___lldiv@divisor,w,c
 10748  00CF02  1006               	iorwf	___lldiv@divisor+1,w,c
 10749  00CF04  1007               	iorwf	___lldiv@divisor+2,w,c
 10750  00CF06  1008               	iorwf	___lldiv@divisor+3,w,c
 10751  00CF08  B4D8               	btfsc	status,2,c
 10752  00CF0A  D02F               	goto	l1124
 10753  00CF0C  0E01               	movlw	1
 10754  00CF0E  6E0D               	movwf	___lldiv@counter,c
 10755  00CF10  D007               	goto	l3898
 10756  00CF12                     l3896:
 10757  00CF12  90D8               	bcf	status,0,c
 10758  00CF14  3605               	rlcf	___lldiv@divisor,f,c
 10759  00CF16  3606               	rlcf	___lldiv@divisor+1,f,c
 10760  00CF18  3607               	rlcf	___lldiv@divisor+2,f,c
 10761  00CF1A  3608               	rlcf	___lldiv@divisor+3,f,c
 10762  00CF1C  2A0D               	incf	___lldiv@counter,f,c
 10763  00CF1E  D000               	goto	l3898
 10764  00CF20                     l3898:
 10765  00CF20  BE08               	btfsc	___lldiv@divisor+3,7,c
 10766  00CF22  D002               	goto	l3900
 10767  00CF24  D7F6               	goto	l3896
 10768  00CF26  D000               	goto	l3900
 10769  00CF28                     l3900:
 10770  00CF28  90D8               	bcf	status,0,c
 10771  00CF2A  3609               	rlcf	___lldiv@quotient,f,c
 10772  00CF2C  360A               	rlcf	___lldiv@quotient+1,f,c
 10773  00CF2E  360B               	rlcf	___lldiv@quotient+2,f,c
 10774  00CF30  360C               	rlcf	___lldiv@quotient+3,f,c
 10775  00CF32  5005               	movf	___lldiv@divisor,w,c
 10776  00CF34  5C01               	subwf	___lldiv@dividend,w,c
 10777  00CF36  5006               	movf	___lldiv@divisor+1,w,c
 10778  00CF38  5802               	subwfb	___lldiv@dividend+1,w,c
 10779  00CF3A  5007               	movf	___lldiv@divisor+2,w,c
 10780  00CF3C  5803               	subwfb	___lldiv@dividend+2,w,c
 10781  00CF3E  5008               	movf	___lldiv@divisor+3,w,c
 10782  00CF40  5804               	subwfb	___lldiv@dividend+3,w,c
 10783  00CF42  A0D8               	btfss	status,0,c
 10784  00CF44  D00A               	goto	l3908
 10785  00CF46  5005               	movf	___lldiv@divisor,w,c
 10786  00CF48  5E01               	subwf	___lldiv@dividend,f,c
 10787  00CF4A  5006               	movf	___lldiv@divisor+1,w,c
 10788  00CF4C  5A02               	subwfb	___lldiv@dividend+1,f,c
 10789  00CF4E  5007               	movf	___lldiv@divisor+2,w,c
 10790  00CF50  5A03               	subwfb	___lldiv@dividend+2,f,c
 10791  00CF52  5008               	movf	___lldiv@divisor+3,w,c
 10792  00CF54  5A04               	subwfb	___lldiv@dividend+3,f,c
 10793  00CF56  8009               	bsf	___lldiv@quotient,0,c
 10794  00CF58  D000               	goto	l3908
 10795  00CF5A                     l3908:
 10796  00CF5A  90D8               	bcf	status,0,c
 10797  00CF5C  3208               	rrcf	___lldiv@divisor+3,f,c
 10798  00CF5E  3207               	rrcf	___lldiv@divisor+2,f,c
 10799  00CF60  3206               	rrcf	___lldiv@divisor+1,f,c
 10800  00CF62  3205               	rrcf	___lldiv@divisor,f,c
 10801  00CF64  2E0D               	decfsz	___lldiv@counter,f,c
 10802  00CF66  D7E0               	goto	l3900
 10803  00CF68  D000               	goto	l1124
 10804  00CF6A                     l1124:
 10805  00CF6A  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10806  00CF6E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10807  00CF72  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10808  00CF76  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10809  00CF7A  0012               	return		;funcret
 10810  00CF7C                     __end_of___lldiv:
 10811                           	opt stack 0
 10812                           tblptru	equ	0xFF8
 10813                           tblptrh	equ	0xFF7
 10814                           tblptrl	equ	0xFF6
 10815                           tablat	equ	0xFF5
 10816                           prodh	equ	0xFF4
 10817                           prodl	equ	0xFF3
 10818                           intcon2	equ	0xFF1
 10819                           postinc0	equ	0xFEE
 10820                           wreg	equ	0xFE8
 10821                           postdec1	equ	0xFE5
 10822                           fsr1l	equ	0xFE1
 10823                           postinc2	equ	0xFDE
 10824                           postdec2	equ	0xFDD
 10825                           fsr2h	equ	0xFDA
 10826                           fsr2l	equ	0xFD9
 10827                           status	equ	0xFD8
 10828                           
 10829 ;; *************** function ___fttol *****************
 10830 ;; Defined at:
 10831 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;  f1              3   46[COMRAM] float 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  lval            4   56[COMRAM] unsigned long 
 10836 ;;  exp1            1   60[COMRAM] unsigned char 
 10837 ;;  sign1           1   55[COMRAM] unsigned char 
 10838 ;; Return value:  Size  Location     Type
 10839 ;;                  4   46[COMRAM] long 
 10840 ;; Registers used:
 10841 ;;		wreg, status,2, status,0
 10842 ;; Tracked objects:
 10843 ;;		On entry : 0/0
 10844 ;;		On exit  : 0/0
 10845 ;;		Unchanged: 0/0
 10846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10847 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10851 ;;Total ram usage:       15 bytes
 10852 ;; Hardware stack levels used:    1
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_main
 10857 ;;		_printf
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           	psect	text46
 10862  00D702                     __ptext46:
 10863                           	opt stack 0
 10864  00D702                     ___fttol:
 10865                           	opt stack 30
 10866                           
 10867                           ;incstack = 0
 10868  00D702  C031  F033         	movff	___fttol@f1+2,??___fttol
 10869  00D706  6A34               	clrf	(??___fttol+1)& (0+255),c
 10870  00D708  6A35               	clrf	(??___fttol+2)& (0+255),c
 10871  00D70A  3430               	rlcf	___fttol@f1+1,w,c
 10872  00D70C  3633               	rlcf	??___fttol& (0+255),f,c
 10873  00D70E  E301               	bnc	u3201
 10874  00D710  8034               	bsf	(??___fttol+1)& (0+255),0,c
 10875  00D712                     u3201:
 10876  00D712  5033               	movf	??___fttol,w,c
 10877  00D714  6E3D               	movwf	___fttol@exp1,c
 10878  00D716  503D               	movf	___fttol@exp1,w,c
 10879  00D718  A4D8               	btfss	status,2,c
 10880  00D71A  D002               	goto	l3850
 10881  00D71C  D039               	goto	l3874
 10882  00D71E  D063               	goto	l1085
 10883  00D720                     l3850:
 10884  00D720  0E17               	movlw	23
 10885  00D722  6E33               	movwf	??___fttol& (0+255),c
 10886  00D724  C02F  F034         	movff	___fttol@f1,??___fttol+1
 10887  00D728  C030  F035         	movff	___fttol@f1+1,??___fttol+2
 10888  00D72C  C031  F036         	movff	___fttol@f1+2,??___fttol+3
 10889  00D730  2833               	incf	??___fttol,w,c
 10890  00D732  6E37               	movwf	(??___fttol+4)& (0+255),c
 10891  00D734  D004               	goto	u3220
 10892  00D736                     u3225:
 10893  00D736  90D8               	bcf	status,0,c
 10894  00D738  3236               	rrcf	??___fttol+3,f,c
 10895  00D73A  3235               	rrcf	??___fttol+2,f,c
 10896  00D73C  3234               	rrcf	??___fttol+1,f,c
 10897  00D73E                     u3220:
 10898  00D73E  2E37               	decfsz	(??___fttol+4)& (0+255),f,c
 10899  00D740  D7FA               	goto	u3225
 10900  00D742  5034               	movf	??___fttol+1,w,c
 10901  00D744  6E38               	movwf	___fttol@sign1,c
 10902  00D746  8E30               	bsf	___fttol@f1+1,7,c
 10903  00D748  0EFF               	movlw	255
 10904  00D74A  162F               	andwf	___fttol@f1,f,c
 10905  00D74C  0EFF               	movlw	255
 10906  00D74E  1630               	andwf	___fttol@f1+1,f,c
 10907  00D750  0E00               	movlw	0
 10908  00D752  1631               	andwf	___fttol@f1+2,f,c
 10909  00D754  502F               	movf	___fttol@f1,w,c
 10910  00D756  6E39               	movwf	___fttol@lval,c
 10911  00D758  5030               	movf	___fttol@f1+1,w,c
 10912  00D75A  6E3A               	movwf	___fttol@lval+1,c
 10913  00D75C  5031               	movf	___fttol@f1+2,w,c
 10914  00D75E  6E3B               	movwf	___fttol@lval+2,c
 10915  00D760  6A3C               	clrf	___fttol@lval+3,c
 10916  00D762  0E8E               	movlw	142
 10917  00D764  5E3D               	subwf	___fttol@exp1,f,c
 10918  00D766  AE3D               	btfss	___fttol@exp1,7,c
 10919  00D768  D010               	goto	l3872
 10920  00D76A  503D               	movf	___fttol@exp1,w,c
 10921  00D76C  0A80               	xorlw	128
 10922  00D76E  0F8F               	addlw	143
 10923  00D770  B0D8               	btfsc	status,0,c
 10924  00D772  D003               	goto	l3868
 10925  00D774  D00D               	goto	l3874
 10926  00D776  D037               	goto	l1085
 10927  00D778  D000               	goto	l3868
 10928  00D77A                     l3868:
 10929  00D77A  90D8               	bcf	status,0,c
 10930  00D77C  323C               	rrcf	___fttol@lval+3,f,c
 10931  00D77E  323B               	rrcf	___fttol@lval+2,f,c
 10932  00D780  323A               	rrcf	___fttol@lval+1,f,c
 10933  00D782  3239               	rrcf	___fttol@lval,f,c
 10934  00D784  3E3D               	incfsz	___fttol@exp1,f,c
 10935  00D786  D7F9               	goto	l3868
 10936  00D788  D019               	goto	l3882
 10937  00D78A                     l3872:
 10938  00D78A  0E17               	movlw	23
 10939  00D78C  643D               	cpfsgt	___fttol@exp1,c
 10940  00D78E  D011               	goto	l3880
 10941  00D790                     l3874:
 10942  00D790  0E00               	movlw	0
 10943  00D792  6E2F               	movwf	?___fttol,c
 10944  00D794  0E00               	movlw	0
 10945  00D796  6E30               	movwf	?___fttol+1,c
 10946  00D798  0E00               	movlw	0
 10947  00D79A  6E31               	movwf	?___fttol+2,c
 10948  00D79C  0E00               	movlw	0
 10949  00D79E  6E32               	movwf	?___fttol+3,c
 10950  00D7A0  D022               	goto	l1085
 10951  00D7A2  D007               	goto	l3880
 10952  00D7A4                     l3878:
 10953  00D7A4  90D8               	bcf	status,0,c
 10954  00D7A6  3639               	rlcf	___fttol@lval,f,c
 10955  00D7A8  363A               	rlcf	___fttol@lval+1,f,c
 10956  00D7AA  363B               	rlcf	___fttol@lval+2,f,c
 10957  00D7AC  363C               	rlcf	___fttol@lval+3,f,c
 10958  00D7AE  063D               	decf	___fttol@exp1,f,c
 10959  00D7B0  D000               	goto	l3880
 10960  00D7B2                     l3880:
 10961  00D7B2  503D               	movf	___fttol@exp1,w,c
 10962  00D7B4  B4D8               	btfsc	status,2,c
 10963  00D7B6  D002               	goto	l3882
 10964  00D7B8  D7F5               	goto	l3878
 10965  00D7BA  D000               	goto	l3882
 10966  00D7BC                     l3882:
 10967  00D7BC  5038               	movf	___fttol@sign1,w,c
 10968  00D7BE  B4D8               	btfsc	status,2,c
 10969  00D7C0  D009               	goto	l3886
 10970  00D7C2  1E3C               	comf	___fttol@lval+3,f,c
 10971  00D7C4  1E3B               	comf	___fttol@lval+2,f,c
 10972  00D7C6  1E3A               	comf	___fttol@lval+1,f,c
 10973  00D7C8  6C39               	negf	___fttol@lval,c
 10974  00D7CA  0E00               	movlw	0
 10975  00D7CC  223A               	addwfc	___fttol@lval+1,f,c
 10976  00D7CE  223B               	addwfc	___fttol@lval+2,f,c
 10977  00D7D0  223C               	addwfc	___fttol@lval+3,f,c
 10978  00D7D2  D000               	goto	l3886
 10979  00D7D4                     l3886:
 10980  00D7D4  C039  F02F         	movff	___fttol@lval,?___fttol
 10981  00D7D8  C03A  F030         	movff	___fttol@lval+1,?___fttol+1
 10982  00D7DC  C03B  F031         	movff	___fttol@lval+2,?___fttol+2
 10983  00D7E0  C03C  F032         	movff	___fttol@lval+3,?___fttol+3
 10984  00D7E4  D000               	goto	l1085
 10985  00D7E6                     l1085:
 10986  00D7E6  0012               	return		;funcret
 10987  00D7E8                     __end_of___fttol:
 10988                           	opt stack 0
 10989                           tblptru	equ	0xFF8
 10990                           tblptrh	equ	0xFF7
 10991                           tblptrl	equ	0xFF6
 10992                           tablat	equ	0xFF5
 10993                           prodh	equ	0xFF4
 10994                           prodl	equ	0xFF3
 10995                           intcon2	equ	0xFF1
 10996                           postinc0	equ	0xFEE
 10997                           wreg	equ	0xFE8
 10998                           postdec1	equ	0xFE5
 10999                           fsr1l	equ	0xFE1
 11000                           postinc2	equ	0xFDE
 11001                           postdec2	equ	0xFDD
 11002                           fsr2h	equ	0xFDA
 11003                           fsr2l	equ	0xFD9
 11004                           status	equ	0xFD8
 11005                           
 11006 ;; *************** function ___ftsub *****************
 11007 ;; Defined at:
 11008 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 11009 ;; Parameters:    Size  Location     Type
 11010 ;;  f1              3   61[COMRAM] float 
 11011 ;;  f2              3   64[COMRAM] float 
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;		None
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  3   61[COMRAM] float 
 11016 ;; Registers used:
 11017 ;;		wreg, status,2, status,0, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11023 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;Total ram usage:        6 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    2
 11030 ;; This function calls:
 11031 ;;		___ftadd
 11032 ;; This function is called by:
 11033 ;;		_printf
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text47
 11038  00C81C                     __ptext47:
 11039                           	opt stack 0
 11040  00C81C                     ___ftsub:
 11041                           	opt stack 23
 11042                           
 11043                           ;incstack = 0
 11044  00C81C  5041               	movf	___ftsub@f2,w,c
 11045  00C81E  1042               	iorwf	___ftsub@f2+1,w,c
 11046  00C820  1043               	iorwf	___ftsub@f2+2,w,c
 11047  00C822  B4D8               	btfsc	status,2,c
 11048  00C824  D007               	goto	l3818
 11049  00C826  0E00               	movlw	0
 11050  00C828  1A41               	xorwf	___ftsub@f2,f,c
 11051  00C82A  0E00               	movlw	0
 11052  00C82C  1A42               	xorwf	___ftsub@f2+1,f,c
 11053  00C82E  0E80               	movlw	128
 11054  00C830  1A43               	xorwf	___ftsub@f2+2,f,c
 11055  00C832  D000               	goto	l3818
 11056  00C834                     l3818:
 11057  00C834  C03E  F032         	movff	___ftsub@f1,___ftadd@f1
 11058  00C838  C03F  F033         	movff	___ftsub@f1+1,___ftadd@f1+1
 11059  00C83C  C040  F034         	movff	___ftsub@f1+2,___ftadd@f1+2
 11060  00C840  C041  F035         	movff	___ftsub@f2,___ftadd@f2
 11061  00C844  C042  F036         	movff	___ftsub@f2+1,___ftadd@f2+1
 11062  00C848  C043  F037         	movff	___ftsub@f2+2,___ftadd@f2+2
 11063  00C84C  EC63  F071         	call	___ftadd	;wreg free
 11064  00C850  C032  F03E         	movff	?___ftadd,?___ftsub
 11065  00C854  C033  F03F         	movff	?___ftadd+1,?___ftsub+1
 11066  00C858  C034  F040         	movff	?___ftadd+2,?___ftsub+2
 11067  00C85C  D000               	goto	l1081
 11068  00C85E                     l1081:
 11069  00C85E  0012               	return		;funcret
 11070  00C860                     __end_of___ftsub:
 11071                           	opt stack 0
 11072                           tblptru	equ	0xFF8
 11073                           tblptrh	equ	0xFF7
 11074                           tblptrl	equ	0xFF6
 11075                           tablat	equ	0xFF5
 11076                           prodh	equ	0xFF4
 11077                           prodl	equ	0xFF3
 11078                           intcon2	equ	0xFF1
 11079                           postinc0	equ	0xFEE
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           fsr1l	equ	0xFE1
 11083                           postinc2	equ	0xFDE
 11084                           postdec2	equ	0xFDD
 11085                           fsr2h	equ	0xFDA
 11086                           fsr2l	equ	0xFD9
 11087                           status	equ	0xFD8
 11088                           
 11089 ;; *************** function ___ftadd *****************
 11090 ;; Defined at:
 11091 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 11092 ;; Parameters:    Size  Location     Type
 11093 ;;  f1              3   49[COMRAM] float 
 11094 ;;  f2              3   52[COMRAM] float 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  exp1            1   60[COMRAM] unsigned char 
 11097 ;;  exp2            1   59[COMRAM] unsigned char 
 11098 ;;  sign            1   58[COMRAM] unsigned char 
 11099 ;; Return value:  Size  Location     Type
 11100 ;;                  3   49[COMRAM] float 
 11101 ;; Registers used:
 11102 ;;		wreg, status,2, status,0, cstack
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11108 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;Total ram usage:       12 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; Hardware stack levels required when called:    1
 11115 ;; This function calls:
 11116 ;;		___ftpack
 11117 ;; This function is called by:
 11118 ;;		_printf
 11119 ;;		___ftsub
 11120 ;; This function uses a non-reentrant model
 11121 ;;
 11122                           
 11123                           	psect	text48
 11124  00E2C6                     __ptext48:
 11125                           	opt stack 0
 11126  00E2C6                     ___ftadd:
 11127                           	opt stack 23
 11128                           
 11129                           ;incstack = 0
 11130  00E2C6  C034  F038         	movff	___ftadd@f1+2,??___ftadd
 11131  00E2CA  6A39               	clrf	(??___ftadd+1)& (0+255),c
 11132  00E2CC  6A3A               	clrf	(??___ftadd+2)& (0+255),c
 11133  00E2CE  3433               	rlcf	___ftadd@f1+1,w,c
 11134  00E2D0  3638               	rlcf	??___ftadd& (0+255),f,c
 11135  00E2D2  E301               	bnc	u2371
 11136  00E2D4  8039               	bsf	(??___ftadd+1)& (0+255),0,c
 11137  00E2D6                     u2371:
 11138  00E2D6  5038               	movf	??___ftadd,w,c
 11139  00E2D8  6E3D               	movwf	___ftadd@exp1,c
 11140  00E2DA  C037  F038         	movff	___ftadd@f2+2,??___ftadd
 11141  00E2DE  6A39               	clrf	(??___ftadd+1)& (0+255),c
 11142  00E2E0  6A3A               	clrf	(??___ftadd+2)& (0+255),c
 11143  00E2E2  3436               	rlcf	___ftadd@f2+1,w,c
 11144  00E2E4  3638               	rlcf	??___ftadd& (0+255),f,c
 11145  00E2E6  E301               	bnc	u2381
 11146  00E2E8  8039               	bsf	(??___ftadd+1)& (0+255),0,c
 11147  00E2EA                     u2381:
 11148  00E2EA  5038               	movf	??___ftadd,w,c
 11149  00E2EC  6E3C               	movwf	___ftadd@exp2,c
 11150  00E2EE  503D               	movf	___ftadd@exp1,w,c
 11151  00E2F0  B4D8               	btfsc	status,2,c
 11152  00E2F2  D00B               	goto	l1000
 11153  00E2F4  503C               	movf	___ftadd@exp2,w,c
 11154  00E2F6  5C3D               	subwf	___ftadd@exp1,w,c
 11155  00E2F8  B0D8               	btfsc	status,0,c
 11156  00E2FA  D00E               	goto	l3380
 11157  00E2FC  503D               	movf	___ftadd@exp1,w,c
 11158  00E2FE  0800               	sublw	0
 11159  00E300  243C               	addwf	___ftadd@exp2,w,c
 11160  00E302  6E38               	movwf	??___ftadd& (0+255),c
 11161  00E304  0E18               	movlw	24
 11162  00E306  6438               	cpfsgt	??___ftadd,c
 11163  00E308  D007               	goto	l3380
 11164  00E30A                     l1000:
 11165  00E30A  C035  F032         	movff	___ftadd@f2,?___ftadd
 11166  00E30E  C036  F033         	movff	___ftadd@f2+1,?___ftadd+1
 11167  00E312  C037  F034         	movff	___ftadd@f2+2,?___ftadd+2
 11168  00E316  D0B8               	goto	l1001
 11169  00E318                     l3380:
 11170  00E318  503C               	movf	___ftadd@exp2,w,c
 11171  00E31A  B4D8               	btfsc	status,2,c
 11172  00E31C  D00B               	goto	l1004
 11173  00E31E  503D               	movf	___ftadd@exp1,w,c
 11174  00E320  5C3C               	subwf	___ftadd@exp2,w,c
 11175  00E322  B0D8               	btfsc	status,0,c
 11176  00E324  D00E               	goto	l3386
 11177  00E326  503C               	movf	___ftadd@exp2,w,c
 11178  00E328  0800               	sublw	0
 11179  00E32A  243D               	addwf	___ftadd@exp1,w,c
 11180  00E32C  6E38               	movwf	??___ftadd& (0+255),c
 11181  00E32E  0E18               	movlw	24
 11182  00E330  6438               	cpfsgt	??___ftadd,c
 11183  00E332  D007               	goto	l3386
 11184  00E334                     l1004:
 11185  00E334  C032  F032         	movff	___ftadd@f1,?___ftadd
 11186  00E338  C033  F033         	movff	___ftadd@f1+1,?___ftadd+1
 11187  00E33C  C034  F034         	movff	___ftadd@f1+2,?___ftadd+2
 11188  00E340  D0A3               	goto	l1001
 11189  00E342                     l3386:
 11190  00E342  0E06               	movlw	6
 11191  00E344  6E3B               	movwf	___ftadd@sign,c
 11192  00E346  AE34               	btfss	___ftadd@f1+2,7,c
 11193  00E348  D002               	goto	l3392
 11194  00E34A  8E3B               	bsf	___ftadd@sign,7,c
 11195  00E34C  D000               	goto	l3392
 11196  00E34E                     l3392:
 11197  00E34E  BE37               	btfsc	___ftadd@f2+2,7,c
 11198  00E350  8C3B               	bsf	___ftadd@sign,6,c
 11199  00E352  8E33               	bsf	___ftadd@f1+1,7,c
 11200  00E354  0EFF               	movlw	255
 11201  00E356  1632               	andwf	___ftadd@f1,f,c
 11202  00E358  0EFF               	movlw	255
 11203  00E35A  1633               	andwf	___ftadd@f1+1,f,c
 11204  00E35C  0E00               	movlw	0
 11205  00E35E  1634               	andwf	___ftadd@f1+2,f,c
 11206  00E360  8E36               	bsf	___ftadd@f2+1,7,c
 11207  00E362  0EFF               	movlw	255
 11208  00E364  1635               	andwf	___ftadd@f2,f,c
 11209  00E366  0EFF               	movlw	255
 11210  00E368  1636               	andwf	___ftadd@f2+1,f,c
 11211  00E36A  0E00               	movlw	0
 11212  00E36C  1637               	andwf	___ftadd@f2+2,f,c
 11213  00E36E  503C               	movf	___ftadd@exp2,w,c
 11214  00E370  5C3D               	subwf	___ftadd@exp1,w,c
 11215  00E372  B0D8               	btfsc	status,0,c
 11216  00E374  D01E               	goto	l3412
 11217  00E376                     l3402:
 11218  00E376  90D8               	bcf	status,0,c
 11219  00E378  3635               	rlcf	___ftadd@f2,f,c
 11220  00E37A  3636               	rlcf	___ftadd@f2+1,f,c
 11221  00E37C  3637               	rlcf	___ftadd@f2+2,f,c
 11222  00E37E  063C               	decf	___ftadd@exp2,f,c
 11223  00E380  503D               	movf	___ftadd@exp1,w,c
 11224  00E382  183C               	xorwf	___ftadd@exp2,w,c
 11225  00E384  B4D8               	btfsc	status,2,c
 11226  00E386  D00F               	goto	l3410
 11227  00E388  063B               	decf	___ftadd@sign,f,c
 11228  00E38A  C03B  F038         	movff	___ftadd@sign,??___ftadd
 11229  00E38E  0E07               	movlw	7
 11230  00E390  1638               	andwf	??___ftadd,f,c
 11231  00E392  B4D8               	btfsc	status,2,c
 11232  00E394  D008               	goto	l3410
 11233  00E396  D7EF               	goto	l3402
 11234  00E398  D006               	goto	l3410
 11235  00E39A                     l3408:
 11236  00E39A  90D8               	bcf	status,0,c
 11237  00E39C  3234               	rrcf	___ftadd@f1+2,f,c
 11238  00E39E  3233               	rrcf	___ftadd@f1+1,f,c
 11239  00E3A0  3232               	rrcf	___ftadd@f1,f,c
 11240  00E3A2  2A3D               	incf	___ftadd@exp1,f,c
 11241  00E3A4  D000               	goto	l3410
 11242  00E3A6                     l3410:
 11243  00E3A6  503C               	movf	___ftadd@exp2,w,c
 11244  00E3A8  183D               	xorwf	___ftadd@exp1,w,c
 11245  00E3AA  B4D8               	btfsc	status,2,c
 11246  00E3AC  D024               	goto	l1015
 11247  00E3AE  D7F5               	goto	l3408
 11248  00E3B0  D022               	goto	l1015
 11249  00E3B2                     l3412:
 11250  00E3B2  503D               	movf	___ftadd@exp1,w,c
 11251  00E3B4  5C3C               	subwf	___ftadd@exp2,w,c
 11252  00E3B6  B0D8               	btfsc	status,0,c
 11253  00E3B8  D01E               	goto	l1015
 11254  00E3BA                     l3414:
 11255  00E3BA  90D8               	bcf	status,0,c
 11256  00E3BC  3632               	rlcf	___ftadd@f1,f,c
 11257  00E3BE  3633               	rlcf	___ftadd@f1+1,f,c
 11258  00E3C0  3634               	rlcf	___ftadd@f1+2,f,c
 11259  00E3C2  063D               	decf	___ftadd@exp1,f,c
 11260  00E3C4  503D               	movf	___ftadd@exp1,w,c
 11261  00E3C6  183C               	xorwf	___ftadd@exp2,w,c
 11262  00E3C8  B4D8               	btfsc	status,2,c
 11263  00E3CA  D00F               	goto	l3422
 11264  00E3CC  063B               	decf	___ftadd@sign,f,c
 11265  00E3CE  C03B  F038         	movff	___ftadd@sign,??___ftadd
 11266  00E3D2  0E07               	movlw	7
 11267  00E3D4  1638               	andwf	??___ftadd,f,c
 11268  00E3D6  B4D8               	btfsc	status,2,c
 11269  00E3D8  D008               	goto	l3422
 11270  00E3DA  D7EF               	goto	l3414
 11271  00E3DC  D006               	goto	l3422
 11272  00E3DE                     l3420:
 11273  00E3DE  90D8               	bcf	status,0,c
 11274  00E3E0  3237               	rrcf	___ftadd@f2+2,f,c
 11275  00E3E2  3236               	rrcf	___ftadd@f2+1,f,c
 11276  00E3E4  3235               	rrcf	___ftadd@f2,f,c
 11277  00E3E6  2A3C               	incf	___ftadd@exp2,f,c
 11278  00E3E8  D000               	goto	l3422
 11279  00E3EA                     l3422:
 11280  00E3EA  503C               	movf	___ftadd@exp2,w,c
 11281  00E3EC  183D               	xorwf	___ftadd@exp1,w,c
 11282  00E3EE  B4D8               	btfsc	status,2,c
 11283  00E3F0  D002               	goto	l1015
 11284  00E3F2  D7F5               	goto	l3420
 11285  00E3F4  D000               	goto	l1015
 11286  00E3F6                     l1015:
 11287  00E3F6  AE3B               	btfss	___ftadd@sign,7,c
 11288  00E3F8  D00C               	goto	l1024
 11289  00E3FA  0EFF               	movlw	255
 11290  00E3FC  1A32               	xorwf	___ftadd@f1,f,c
 11291  00E3FE  0EFF               	movlw	255
 11292  00E400  1A33               	xorwf	___ftadd@f1+1,f,c
 11293  00E402  0EFF               	movlw	255
 11294  00E404  1A34               	xorwf	___ftadd@f1+2,f,c
 11295  00E406  0E01               	movlw	1
 11296  00E408  2632               	addwf	___ftadd@f1,f,c
 11297  00E40A  0E00               	movlw	0
 11298  00E40C  2233               	addwfc	___ftadd@f1+1,f,c
 11299  00E40E  0E00               	movlw	0
 11300  00E410  2234               	addwfc	___ftadd@f1+2,f,c
 11301  00E412                     l1024:
 11302  00E412  AC3B               	btfss	___ftadd@sign,6,c
 11303  00E414  D00D               	goto	l3428
 11304  00E416  0EFF               	movlw	255
 11305  00E418  1A35               	xorwf	___ftadd@f2,f,c
 11306  00E41A  0EFF               	movlw	255
 11307  00E41C  1A36               	xorwf	___ftadd@f2+1,f,c
 11308  00E41E  0EFF               	movlw	255
 11309  00E420  1A37               	xorwf	___ftadd@f2+2,f,c
 11310  00E422  0E01               	movlw	1
 11311  00E424  2635               	addwf	___ftadd@f2,f,c
 11312  00E426  0E00               	movlw	0
 11313  00E428  2236               	addwfc	___ftadd@f2+1,f,c
 11314  00E42A  0E00               	movlw	0
 11315  00E42C  2237               	addwfc	___ftadd@f2+2,f,c
 11316  00E42E  D000               	goto	l3428
 11317  00E430                     l3428:
 11318  00E430  0E00               	movlw	0
 11319  00E432  6E3B               	movwf	___ftadd@sign,c
 11320  00E434  5032               	movf	___ftadd@f1,w,c
 11321  00E436  2635               	addwf	___ftadd@f2,f,c
 11322  00E438  5033               	movf	___ftadd@f1+1,w,c
 11323  00E43A  2236               	addwfc	___ftadd@f2+1,f,c
 11324  00E43C  5034               	movf	___ftadd@f1+2,w,c
 11325  00E43E  2237               	addwfc	___ftadd@f2+2,f,c
 11326  00E440  AE37               	btfss	___ftadd@f2+2,7,c
 11327  00E442  D00F               	goto	l3438
 11328  00E444  0EFF               	movlw	255
 11329  00E446  1A35               	xorwf	___ftadd@f2,f,c
 11330  00E448  0EFF               	movlw	255
 11331  00E44A  1A36               	xorwf	___ftadd@f2+1,f,c
 11332  00E44C  0EFF               	movlw	255
 11333  00E44E  1A37               	xorwf	___ftadd@f2+2,f,c
 11334  00E450  0E01               	movlw	1
 11335  00E452  2635               	addwf	___ftadd@f2,f,c
 11336  00E454  0E00               	movlw	0
 11337  00E456  2236               	addwfc	___ftadd@f2+1,f,c
 11338  00E458  0E00               	movlw	0
 11339  00E45A  2237               	addwfc	___ftadd@f2+2,f,c
 11340  00E45C  0E01               	movlw	1
 11341  00E45E  6E3B               	movwf	___ftadd@sign,c
 11342  00E460  D000               	goto	l3438
 11343  00E462                     l3438:
 11344  00E462  C035  F001         	movff	___ftadd@f2,___ftpack@arg
 11345  00E466  C036  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11346  00E46A  C037  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11347  00E46E  C03D  F004         	movff	___ftadd@exp1,___ftpack@exp
 11348  00E472  C03B  F005         	movff	___ftadd@sign,___ftpack@sign
 11349  00E476  EC01  F069         	call	___ftpack	;wreg free
 11350  00E47A  C001  F032         	movff	?___ftpack,?___ftadd
 11351  00E47E  C002  F033         	movff	?___ftpack+1,?___ftadd+1
 11352  00E482  C003  F034         	movff	?___ftpack+2,?___ftadd+2
 11353  00E486  D000               	goto	l1001
 11354  00E488                     l1001:
 11355  00E488  0012               	return		;funcret
 11356  00E48A                     __end_of___ftadd:
 11357                           	opt stack 0
 11358                           tblptru	equ	0xFF8
 11359                           tblptrh	equ	0xFF7
 11360                           tblptrl	equ	0xFF6
 11361                           tablat	equ	0xFF5
 11362                           prodh	equ	0xFF4
 11363                           prodl	equ	0xFF3
 11364                           intcon2	equ	0xFF1
 11365                           postinc0	equ	0xFEE
 11366                           wreg	equ	0xFE8
 11367                           postdec1	equ	0xFE5
 11368                           fsr1l	equ	0xFE1
 11369                           postinc2	equ	0xFDE
 11370                           postdec2	equ	0xFDD
 11371                           fsr2h	equ	0xFDA
 11372                           fsr2l	equ	0xFD9
 11373                           status	equ	0xFD8
 11374                           
 11375 ;; *************** function ___ftneg *****************
 11376 ;; Defined at:
 11377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;  f1              3    0[COMRAM] float 
 11380 ;; Auto vars:     Size  Location     Type
 11381 ;;		None
 11382 ;; Return value:  Size  Location     Type
 11383 ;;                  3    0[COMRAM] float 
 11384 ;; Registers used:
 11385 ;;		wreg, status,2, status,0
 11386 ;; Tracked objects:
 11387 ;;		On entry : 0/0
 11388 ;;		On exit  : 0/0
 11389 ;;		Unchanged: 0/0
 11390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11391 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11395 ;;Total ram usage:        3 bytes
 11396 ;; Hardware stack levels used:    1
 11397 ;; This function calls:
 11398 ;;		Nothing
 11399 ;; This function is called by:
 11400 ;;		_printf
 11401 ;; This function uses a non-reentrant model
 11402 ;;
 11403                           
 11404                           	psect	text49
 11405  00C58C                     __ptext49:
 11406                           	opt stack 0
 11407  00C58C                     ___ftneg:
 11408                           	opt stack 25
 11409                           
 11410                           ;incstack = 0
 11411  00C58C  5001               	movf	___ftneg@f1,w,c
 11412  00C58E  1002               	iorwf	___ftneg@f1+1,w,c
 11413  00C590  1003               	iorwf	___ftneg@f1+2,w,c
 11414  00C592  B4D8               	btfsc	status,2,c
 11415  00C594  D006               	goto	l1074
 11416  00C596  0E00               	movlw	0
 11417  00C598  1A01               	xorwf	___ftneg@f1,f,c
 11418  00C59A  0E00               	movlw	0
 11419  00C59C  1A02               	xorwf	___ftneg@f1+1,f,c
 11420  00C59E  0E80               	movlw	128
 11421  00C5A0  1A03               	xorwf	___ftneg@f1+2,f,c
 11422  00C5A2                     l1074:
 11423  00C5A2  C001  F001         	movff	___ftneg@f1,?___ftneg
 11424  00C5A6  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11425  00C5AA  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11426  00C5AE  0012               	return		;funcret
 11427  00C5B0                     __end_of___ftneg:
 11428                           	opt stack 0
 11429                           tblptru	equ	0xFF8
 11430                           tblptrh	equ	0xFF7
 11431                           tblptrl	equ	0xFF6
 11432                           tablat	equ	0xFF5
 11433                           prodh	equ	0xFF4
 11434                           prodl	equ	0xFF3
 11435                           intcon2	equ	0xFF1
 11436                           postinc0	equ	0xFEE
 11437                           wreg	equ	0xFE8
 11438                           postdec1	equ	0xFE5
 11439                           fsr1l	equ	0xFE1
 11440                           postinc2	equ	0xFDE
 11441                           postdec2	equ	0xFDD
 11442                           fsr2h	equ	0xFDA
 11443                           fsr2l	equ	0xFD9
 11444                           status	equ	0xFD8
 11445                           
 11446 ;; *************** function ___ftge *****************
 11447 ;; Defined at:
 11448 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;  ff1             3    0[COMRAM] float 
 11451 ;;  ff2             3    3[COMRAM] float 
 11452 ;; Auto vars:     Size  Location     Type
 11453 ;;		None
 11454 ;; Return value:  Size  Location     Type
 11455 ;;		None               void
 11456 ;; Registers used:
 11457 ;;		wreg, status,2, status,0
 11458 ;; Tracked objects:
 11459 ;;		On entry : 0/0
 11460 ;;		On exit  : 0/0
 11461 ;;		Unchanged: 0/0
 11462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11463 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11467 ;;Total ram usage:        9 bytes
 11468 ;; Hardware stack levels used:    1
 11469 ;; This function calls:
 11470 ;;		Nothing
 11471 ;; This function is called by:
 11472 ;;		_update_LCD_misc
 11473 ;;		_printf
 11474 ;; This function uses a non-reentrant model
 11475 ;;
 11476                           
 11477                           	psect	text50
 11478  00CF7C                     __ptext50:
 11479                           	opt stack 0
 11480  00CF7C                     ___ftge:
 11481                           	opt stack 25
 11482                           
 11483                           ;incstack = 0
 11484  00CF7C  AE03               	btfss	___ftge@ff1+2,7,c
 11485  00CF7E  D017               	goto	l3826
 11486  00CF80  C001  F007         	movff	___ftge@ff1,??___ftge
 11487  00CF84  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 11488  00CF88  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 11489  00CF8C  1E07               	comf	??___ftge,f,c
 11490  00CF8E  1E08               	comf	??___ftge+1,f,c
 11491  00CF90  1E09               	comf	??___ftge+2,f,c
 11492  00CF92  2A07               	incf	??___ftge,f,c
 11493  00CF94  0E00               	movlw	0
 11494  00CF96  2208               	addwfc	??___ftge+1,f,c
 11495  00CF98  2209               	addwfc	??___ftge+2,f,c
 11496  00CF9A  0E00               	movlw	0
 11497  00CF9C  2407               	addwf	??___ftge,w,c
 11498  00CF9E  6E01               	movwf	___ftge@ff1,c
 11499  00CFA0  0E00               	movlw	0
 11500  00CFA2  2008               	addwfc	??___ftge+1,w,c
 11501  00CFA4  6E02               	movwf	___ftge@ff1+1,c
 11502  00CFA6  0E80               	movlw	128
 11503  00CFA8  2009               	addwfc	??___ftge+2,w,c
 11504  00CFAA  6E03               	movwf	___ftge@ff1+2,c
 11505  00CFAC  D000               	goto	l3826
 11506  00CFAE                     l3826:
 11507  00CFAE  AE06               	btfss	___ftge@ff2+2,7,c
 11508  00CFB0  D017               	goto	l3830
 11509  00CFB2  C004  F007         	movff	___ftge@ff2,??___ftge
 11510  00CFB6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 11511  00CFBA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 11512  00CFBE  1E07               	comf	??___ftge,f,c
 11513  00CFC0  1E08               	comf	??___ftge+1,f,c
 11514  00CFC2  1E09               	comf	??___ftge+2,f,c
 11515  00CFC4  2A07               	incf	??___ftge,f,c
 11516  00CFC6  0E00               	movlw	0
 11517  00CFC8  2208               	addwfc	??___ftge+1,f,c
 11518  00CFCA  2209               	addwfc	??___ftge+2,f,c
 11519  00CFCC  0E00               	movlw	0
 11520  00CFCE  2407               	addwf	??___ftge,w,c
 11521  00CFD0  6E04               	movwf	___ftge@ff2,c
 11522  00CFD2  0E00               	movlw	0
 11523  00CFD4  2008               	addwfc	??___ftge+1,w,c
 11524  00CFD6  6E05               	movwf	___ftge@ff2+1,c
 11525  00CFD8  0E80               	movlw	128
 11526  00CFDA  2009               	addwfc	??___ftge+2,w,c
 11527  00CFDC  6E06               	movwf	___ftge@ff2+2,c
 11528  00CFDE  D000               	goto	l3830
 11529  00CFE0                     l3830:
 11530  00CFE0  0E00               	movlw	0
 11531  00CFE2  1A01               	xorwf	___ftge@ff1,f,c
 11532  00CFE4  0E00               	movlw	0
 11533  00CFE6  1A02               	xorwf	___ftge@ff1+1,f,c
 11534  00CFE8  0E80               	movlw	128
 11535  00CFEA  1A03               	xorwf	___ftge@ff1+2,f,c
 11536  00CFEC  0E00               	movlw	0
 11537  00CFEE  1A04               	xorwf	___ftge@ff2,f,c
 11538  00CFF0  0E00               	movlw	0
 11539  00CFF2  1A05               	xorwf	___ftge@ff2+1,f,c
 11540  00CFF4  0E80               	movlw	128
 11541  00CFF6  1A06               	xorwf	___ftge@ff2+2,f,c
 11542  00CFF8  5004               	movf	___ftge@ff2,w,c
 11543  00CFFA  5C01               	subwf	___ftge@ff1,w,c
 11544  00CFFC  5005               	movf	___ftge@ff2+1,w,c
 11545  00CFFE  5802               	subwfb	___ftge@ff1+1,w,c
 11546  00D000  5006               	movf	___ftge@ff2+2,w,c
 11547  00D002  5803               	subwfb	___ftge@ff1+2,w,c
 11548  00D004  B0D8               	btfsc	status,0,c
 11549  00D006  D002               	goto	l3836
 11550  00D008  90D8               	bcf	status,0,c
 11551  00D00A  D002               	goto	l1058
 11552  00D00C                     l3836:
 11553  00D00C  80D8               	bsf	status,0,c
 11554  00D00E  D000               	goto	l1058
 11555  00D010                     l1058:
 11556  00D010  0012               	return		;funcret
 11557  00D012                     __end_of___ftge:
 11558                           	opt stack 0
 11559                           tblptru	equ	0xFF8
 11560                           tblptrh	equ	0xFF7
 11561                           tblptrl	equ	0xFF6
 11562                           tablat	equ	0xFF5
 11563                           prodh	equ	0xFF4
 11564                           prodl	equ	0xFF3
 11565                           intcon2	equ	0xFF1
 11566                           postinc0	equ	0xFEE
 11567                           wreg	equ	0xFE8
 11568                           postdec1	equ	0xFE5
 11569                           fsr1l	equ	0xFE1
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           fsr2h	equ	0xFDA
 11573                           fsr2l	equ	0xFD9
 11574                           status	equ	0xFD8
 11575                           
 11576 ;; *************** function _get_full_ADC *****************
 11577 ;; Defined at:
 11578 ;;		line 217 in file "Lab7.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;		None
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;  result          2    4[COMRAM] int 
 11583 ;; Return value:  Size  Location     Type
 11584 ;;                  2    0[COMRAM] unsigned int 
 11585 ;; Registers used:
 11586 ;;		wreg, status,2, status,0
 11587 ;; Tracked objects:
 11588 ;;		On entry : 0/0
 11589 ;;		On exit  : 0/0
 11590 ;;		Unchanged: 0/0
 11591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11594 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;Total ram usage:        6 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; This function calls:
 11599 ;;		Nothing
 11600 ;; This function is called by:
 11601 ;;		_main
 11602 ;;		_update_LCD_misc
 11603 ;; This function uses a non-reentrant model
 11604 ;;
 11605                           
 11606                           	psect	text51
 11607  00C5B0                     __ptext51:
 11608                           	opt stack 0
 11609  00C5B0                     _get_full_ADC:
 11610                           	opt stack 30
 11611                           
 11612                           ;Lab7.c: 218: int result;
 11613                           ;Lab7.c: 219: ADCON0bits.GO=1;
 11614                           
 11615                           ;incstack = 0
 11616  00C5B0  82C2               	bsf	4034,1,c	;volatile
 11617                           
 11618                           ;Lab7.c: 221: while(ADCON0bits.DONE==1);
 11619  00C5B2  D000               	goto	l388
 11620  00C5B4                     l388:
 11621  00C5B4  B2C2               	btfsc	4034,1,c	;volatile
 11622  00C5B6  D7FE               	goto	l388
 11623                           
 11624                           ;Lab7.c: 223: result = (ADRESH * 0x100) + ADRESL;
 11625  00C5B8  50C4               	movf	4036,w,c	;volatile
 11626  00C5BA  6E04               	movwf	(??_get_full_ADC+1)& (0+255),c
 11627  00C5BC  6A03               	clrf	??_get_full_ADC& (0+255),c
 11628  00C5BE  50C3               	movf	4035,w,c	;volatile
 11629  00C5C0  2403               	addwf	??_get_full_ADC,w,c
 11630  00C5C2  6E05               	movwf	get_full_ADC@result,c
 11631  00C5C4  0E00               	movlw	0
 11632  00C5C6  2004               	addwfc	??_get_full_ADC+1,w,c
 11633  00C5C8  6E06               	movwf	get_full_ADC@result+1,c
 11634                           
 11635                           ;Lab7.c: 226: return result;
 11636  00C5CA  C005  F001         	movff	get_full_ADC@result,?_get_full_ADC
 11637  00C5CE  C006  F002         	movff	get_full_ADC@result+1,?_get_full_ADC+1
 11638  00C5D2  D000               	goto	l391
 11639  00C5D4                     l391:
 11640  00C5D4  0012               	return		;funcret
 11641  00C5D6                     __end_of_get_full_ADC:
 11642                           	opt stack 0
 11643                           tblptru	equ	0xFF8
 11644                           tblptrh	equ	0xFF7
 11645                           tblptrl	equ	0xFF6
 11646                           tablat	equ	0xFF5
 11647                           prodh	equ	0xFF4
 11648                           prodl	equ	0xFF3
 11649                           intcon2	equ	0xFF1
 11650                           postinc0	equ	0xFEE
 11651                           wreg	equ	0xFE8
 11652                           postdec1	equ	0xFE5
 11653                           fsr1l	equ	0xFE1
 11654                           postinc2	equ	0xFDE
 11655                           postdec2	equ	0xFDD
 11656                           fsr2h	equ	0xFDA
 11657                           fsr2l	equ	0xFD9
 11658                           status	equ	0xFD8
 11659                           
 11660 ;; *************** function _drawtext *****************
 11661 ;; Defined at:
 11662 ;;		line 507 in file "ST7735_TFT.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  x               1    wreg     unsigned char 
 11665 ;;  y               1   40[COMRAM] unsigned char 
 11666 ;;  _text           2   41[COMRAM] PTR unsigned char 
 11667 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
 11668 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), PED_NS_Count(3), 
 11669 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
 11670 ;;		 -> FlashingR_Txt(2), buffer(31), Act_Mode_Txt(2), 
 11671 ;;  color           2   43[COMRAM] unsigned int 
 11672 ;;  bg              2   45[COMRAM] unsigned int 
 11673 ;;  size            1   47[COMRAM] unsigned char 
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;  x               1   52[COMRAM] unsigned char 
 11676 ;;  i               2   53[COMRAM] unsigned int 
 11677 ;;  textsize        2   50[COMRAM] unsigned int 
 11678 ;;  cursor_x        1   56[COMRAM] unsigned char 
 11679 ;;  cursor_y        1   55[COMRAM] unsigned char 
 11680 ;; Return value:  Size  Location     Type
 11681 ;;		None               void
 11682 ;; Registers used:
 11683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11684 ;; Tracked objects:
 11685 ;;		On entry : 0/0
 11686 ;;		On exit  : 0/0
 11687 ;;		Unchanged: 0/0
 11688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11689 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11692 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11693 ;;Total ram usage:       17 bytes
 11694 ;; Hardware stack levels used:    1
 11695 ;; Hardware stack levels required when called:    6
 11696 ;; This function calls:
 11697 ;;		_drawChar
 11698 ;;		_strlen
 11699 ;; This function is called by:
 11700 ;;		_Wait_One_Second
 11701 ;;		_Wait_One_Second_With_Beep
 11702 ;;		_Initialize_Screen
 11703 ;;		_update_LCD_count
 11704 ;;		_update_LCD_PED_Count
 11705 ;;		_update_LCD_misc
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           	psect	text52
 11710  00D620                     __ptext52:
 11711                           	opt stack 0
 11712  00D620                     _drawtext:
 11713                           	opt stack 21
 11714                           
 11715                           ;incstack = 0
 11716                           ;drawtext@x stored from wreg
 11717  00D620  6E35               	movwf	drawtext@x,c
 11718                           
 11719                           ;ST7735_TFT.c: 509: unsigned char cursor_x, cursor_y;
 11720                           ;ST7735_TFT.c: 510: unsigned int textsize, i;
 11721                           ;ST7735_TFT.c: 511: cursor_x = x, cursor_y = y;
 11722  00D622  C035  F039         	movff	drawtext@x,drawtext@cursor_x
 11723  00D626  C029  F038         	movff	drawtext@y,drawtext@cursor_y
 11724                           
 11725                           ;ST7735_TFT.c: 512: textsize = strlen(_text);
 11726  00D62A  C02A  F001         	movff	drawtext@_text,strlen@s
 11727  00D62E  C02B  F002         	movff	drawtext@_text+1,strlen@s+1
 11728  00D632  ECAF  F063         	call	_strlen	;wreg free
 11729  00D636  C001  F033         	movff	?_strlen,drawtext@textsize
 11730  00D63A  C002  F034         	movff	?_strlen+1,drawtext@textsize+1
 11731                           
 11732                           ;ST7735_TFT.c: 513: for(i = 0; i < textsize; i++){
 11733  00D63E  0E00               	movlw	0
 11734  00D640  6E37               	movwf	drawtext@i+1,c
 11735  00D642  0E00               	movlw	0
 11736  00D644  6E36               	movwf	drawtext@i,c
 11737  00D646  D056               	goto	l3972
 11738  00D648                     l3946:
 11739                           
 11740                           ;ST7735_TFT.c: 514: if(wrap && ((cursor_x + size * 5) > 128)){
 11741  00D648  0100               	movlb	0	; () banked
 11742  00D64A  518C               	movf	_wrap& (0+255),w,b
 11743  00D64C  0100               	movlb	0	; () banked
 11744  00D64E  B4D8               	btfsc	status,2,c
 11745  00D650  D02C               	goto	l3962
 11746                           
 11747                           ; BSR set to: 0
 11748  00D652  5030               	movf	drawtext@size,w,c
 11749  00D654  0D05               	mullw	5
 11750  00D656  5039               	movf	drawtext@cursor_x,w,c
 11751  00D658  6E31               	movwf	??_drawtext& (0+255),c
 11752  00D65A  6A32               	clrf	(??_drawtext+1)& (0+255),c
 11753  00D65C  50F3               	movf	prodl,w,c
 11754  00D65E  2631               	addwf	??_drawtext,f,c
 11755  00D660  50F4               	movf	prodh,w,c
 11756  00D662  2232               	addwfc	??_drawtext+1,f,c
 11757  00D664  BE32               	btfsc	??_drawtext+1,7,c
 11758  00D666  D021               	goto	l3962
 11759  00D668  5032               	movf	??_drawtext+1,w,c
 11760  00D66A  E104               	bnz	u3360
 11761  00D66C  0E81               	movlw	129
 11762  00D66E  5C31               	subwf	??_drawtext,w,c
 11763  00D670  A0D8               	btfss	status,0,c
 11764  00D672  D01B               	goto	l3962
 11765  00D674                     u3360:
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;ST7735_TFT.c: 515: cursor_x = 0;
 11769  00D674  0E00               	movlw	0
 11770  00D676  6E39               	movwf	drawtext@cursor_x,c
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;ST7735_TFT.c: 516: cursor_y = cursor_y + size * 7 + 3 ;
 11774  00D678  5030               	movf	drawtext@size,w,c
 11775  00D67A  0D07               	mullw	7
 11776  00D67C  50F3               	movf	prodl,w,c
 11777  00D67E  2438               	addwf	drawtext@cursor_y,w,c
 11778  00D680  0F03               	addlw	3
 11779  00D682  6E38               	movwf	drawtext@cursor_y,c
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;ST7735_TFT.c: 517: if(cursor_y > 160) cursor_y = 160;
 11783  00D684  0EA0               	movlw	160
 11784  00D686  6438               	cpfsgt	drawtext@cursor_y,c
 11785  00D688  D003               	goto	l3958
 11786                           
 11787                           ; BSR set to: 0
 11788  00D68A  0EA0               	movlw	160
 11789  00D68C  6E38               	movwf	drawtext@cursor_y,c
 11790  00D68E  D000               	goto	l3958
 11791  00D690                     l3958:
 11792                           
 11793                           ; BSR set to: 0
 11794                           ;ST7735_TFT.c: 518: if(_text[i] == 0x20) goto _skip; }
 11795  00D690  5036               	movf	drawtext@i,w,c
 11796  00D692  242A               	addwf	drawtext@_text,w,c
 11797  00D694  6ED9               	movwf	fsr2l,c
 11798  00D696  5037               	movf	drawtext@i+1,w,c
 11799  00D698  202B               	addwfc	drawtext@_text+1,w,c
 11800  00D69A  6EDA               	movwf	fsr2h,c
 11801  00D69C  0E20               	movlw	32
 11802  00D69E  18DE               	xorwf	postinc2,w,c
 11803  00D6A0  B4D8               	btfsc	status,2,c
 11804  00D6A2  D025               	goto	l3970
 11805  00D6A4  D002               	goto	l3962
 11806                           
 11807                           ; BSR set to: 0
 11808  00D6A6  D023               	goto	l3970
 11809                           
 11810                           ; BSR set to: 0
 11811  00D6A8  D000               	goto	l3962
 11812  00D6AA                     l3962:
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;ST7735_TFT.c: 519: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
 11816  00D6AA  C038  F01E         	movff	drawtext@cursor_y,drawChar@y
 11817  00D6AE  5036               	movf	drawtext@i,w,c
 11818  00D6B0  242A               	addwf	drawtext@_text,w,c
 11819  00D6B2  6ED9               	movwf	fsr2l,c
 11820  00D6B4  5037               	movf	drawtext@i+1,w,c
 11821  00D6B6  202B               	addwfc	drawtext@_text+1,w,c
 11822  00D6B8  6EDA               	movwf	fsr2h,c
 11823  00D6BA  50DF               	movf	indf2,w,c
 11824  00D6BC  6E1F               	movwf	drawChar@c,c
 11825  00D6BE  C02C  F020         	movff	drawtext@color,drawChar@color
 11826  00D6C2  C02D  F021         	movff	drawtext@color+1,drawChar@color+1
 11827  00D6C6  C02E  F022         	movff	drawtext@bg,drawChar@bg
 11828  00D6CA  C02F  F023         	movff	drawtext@bg+1,drawChar@bg+1
 11829  00D6CE  C030  F024         	movff	drawtext@size,drawChar@size
 11830  00D6D2  5039               	movf	drawtext@cursor_x,w,c
 11831  00D6D4  EC1A  F06F         	call	_drawChar
 11832                           
 11833                           ;ST7735_TFT.c: 520: cursor_x = cursor_x + size * 6;
 11834  00D6D8  5030               	movf	drawtext@size,w,c
 11835  00D6DA  0D06               	mullw	6
 11836  00D6DC  50F3               	movf	prodl,w,c
 11837  00D6DE  2439               	addwf	drawtext@cursor_x,w,c
 11838  00D6E0  6E39               	movwf	drawtext@cursor_x,c
 11839                           
 11840                           ;ST7735_TFT.c: 521: if(cursor_x > 128) cursor_x = 128;
 11841  00D6E2  0E80               	movlw	128
 11842  00D6E4  6439               	cpfsgt	drawtext@cursor_x,c
 11843  00D6E6  D003               	goto	l3970
 11844  00D6E8  0E80               	movlw	128
 11845  00D6EA  6E39               	movwf	drawtext@cursor_x,c
 11846  00D6EC  D000               	goto	l3970
 11847  00D6EE                     l3970:
 11848  00D6EE  4A36               	infsnz	drawtext@i,f,c
 11849  00D6F0  2A37               	incf	drawtext@i+1,f,c
 11850  00D6F2  D000               	goto	l3972
 11851  00D6F4                     l3972:
 11852  00D6F4  5033               	movf	drawtext@textsize,w,c
 11853  00D6F6  5C36               	subwf	drawtext@i,w,c
 11854  00D6F8  5034               	movf	drawtext@textsize+1,w,c
 11855  00D6FA  5837               	subwfb	drawtext@i+1,w,c
 11856  00D6FC  A0D8               	btfss	status,0,c
 11857  00D6FE  D7A4               	goto	l3946
 11858  00D700  0012               	return		;funcret
 11859  00D702                     __end_of_drawtext:
 11860                           	opt stack 0
 11861                           tblptru	equ	0xFF8
 11862                           tblptrh	equ	0xFF7
 11863                           tblptrl	equ	0xFF6
 11864                           tablat	equ	0xFF5
 11865                           prodh	equ	0xFF4
 11866                           prodl	equ	0xFF3
 11867                           intcon2	equ	0xFF1
 11868                           postinc0	equ	0xFEE
 11869                           wreg	equ	0xFE8
 11870                           postdec1	equ	0xFE5
 11871                           fsr1l	equ	0xFE1
 11872                           indf2	equ	0xFDF
 11873                           postinc2	equ	0xFDE
 11874                           postdec2	equ	0xFDD
 11875                           fsr2h	equ	0xFDA
 11876                           fsr2l	equ	0xFD9
 11877                           status	equ	0xFD8
 11878                           
 11879 ;; *************** function _strlen *****************
 11880 ;; Defined at:
 11881 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  s               2    0[COMRAM] PTR const unsigned char 
 11884 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
 11885 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), PED_NS_Count(3), 
 11886 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
 11887 ;;		 -> FlashingR_Txt(2), buffer(31), Act_Mode_Txt(2), 
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;  cp              2    4[COMRAM] PTR const unsigned char 
 11890 ;;		 -> NULL(0), SW_MODE_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
 11891 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), PED_EW_Count(3), PED_NS_Count(3), 
 11892 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
 11893 ;;		 -> FlashingR_Txt(2), buffer(31), Act_Mode_Txt(2), 
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  2    0[COMRAM] unsigned int 
 11896 ;; Registers used:
 11897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11905 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11906 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11907 ;;Total ram usage:        6 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; This function calls:
 11910 ;;		Nothing
 11911 ;; This function is called by:
 11912 ;;		_drawtext
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           	psect	text53
 11917  00C75E                     __ptext53:
 11918                           	opt stack 0
 11919  00C75E                     _strlen:
 11920                           	opt stack 26
 11921                           
 11922                           ;incstack = 0
 11923  00C75E  C001  F005         	movff	strlen@s,strlen@cp
 11924  00C762  C002  F006         	movff	strlen@s+1,strlen@cp+1
 11925  00C766  D003               	goto	l3628
 11926  00C768                     l3626:
 11927  00C768  4A05               	infsnz	strlen@cp,f,c
 11928  00C76A  2A06               	incf	strlen@cp+1,f,c
 11929  00C76C  D000               	goto	l3628
 11930  00C76E                     l3628:
 11931  00C76E  C005  FFD9         	movff	strlen@cp,fsr2l
 11932  00C772  C006  FFDA         	movff	strlen@cp+1,fsr2h
 11933  00C776  50DF               	movf	indf2,w,c
 11934  00C778  A4D8               	btfss	status,2,c
 11935  00C77A  D7F6               	goto	l3626
 11936  00C77C  C001  F003         	movff	strlen@s,??_strlen
 11937  00C780  C002  F004         	movff	strlen@s+1,??_strlen+1
 11938  00C784  1E03               	comf	??_strlen,f,c
 11939  00C786  1E04               	comf	??_strlen+1,f,c
 11940  00C788  4A03               	infsnz	??_strlen,f,c
 11941  00C78A  2A04               	incf	??_strlen+1,f,c
 11942  00C78C  5005               	movf	strlen@cp,w,c
 11943  00C78E  2403               	addwf	??_strlen,w,c
 11944  00C790  6E01               	movwf	?_strlen,c
 11945  00C792  5006               	movf	strlen@cp+1,w,c
 11946  00C794  2004               	addwfc	??_strlen+1,w,c
 11947  00C796  6E02               	movwf	?_strlen+1,c
 11948  00C798  D000               	goto	l1230
 11949  00C79A                     l1230:
 11950  00C79A  0012               	return		;funcret
 11951  00C79C                     __end_of_strlen:
 11952                           	opt stack 0
 11953                           tblptru	equ	0xFF8
 11954                           tblptrh	equ	0xFF7
 11955                           tblptrl	equ	0xFF6
 11956                           tablat	equ	0xFF5
 11957                           prodh	equ	0xFF4
 11958                           prodl	equ	0xFF3
 11959                           intcon2	equ	0xFF1
 11960                           postinc0	equ	0xFEE
 11961                           wreg	equ	0xFE8
 11962                           postdec1	equ	0xFE5
 11963                           fsr1l	equ	0xFE1
 11964                           indf2	equ	0xFDF
 11965                           postinc2	equ	0xFDE
 11966                           postdec2	equ	0xFDD
 11967                           fsr2h	equ	0xFDA
 11968                           fsr2l	equ	0xFD9
 11969                           status	equ	0xFD8
 11970                           
 11971 ;; *************** function _drawChar *****************
 11972 ;; Defined at:
 11973 ;;		line 480 in file "ST7735_TFT.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;  x               1    wreg     unsigned char 
 11976 ;;  y               1   29[COMRAM] unsigned char 
 11977 ;;  c               1   30[COMRAM] unsigned char 
 11978 ;;  color           2   31[COMRAM] unsigned int 
 11979 ;;  bg              2   33[COMRAM] unsigned int 
 11980 ;;  size            1   35[COMRAM] unsigned char 
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;  x               1   37[COMRAM] unsigned char 
 11983 ;;  line            1   36[COMRAM] unsigned char 
 11984 ;;  i               1   39[COMRAM] unsigned char 
 11985 ;;  j               1   38[COMRAM] unsigned char 
 11986 ;; Return value:  Size  Location     Type
 11987 ;;		None               void
 11988 ;; Registers used:
 11989 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11990 ;; Tracked objects:
 11991 ;;		On entry : 0/0
 11992 ;;		On exit  : 0/0
 11993 ;;		Unchanged: 0/0
 11994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11995 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11998 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11999 ;;Total ram usage:       11 bytes
 12000 ;; Hardware stack levels used:    1
 12001 ;; Hardware stack levels required when called:    5
 12002 ;; This function calls:
 12003 ;;		___wmul
 12004 ;;		_drawPixel
 12005 ;;		_fillRect
 12006 ;; This function is called by:
 12007 ;;		_drawtext
 12008 ;; This function uses a non-reentrant model
 12009 ;;
 12010                           
 12011                           	psect	text54
 12012  00DE34                     __ptext54:
 12013                           	opt stack 0
 12014  00DE34                     _drawChar:
 12015                           	opt stack 21
 12016                           
 12017                           ;incstack = 0
 12018                           ;drawChar@x stored from wreg
 12019  00DE34  6E26               	movwf	drawChar@x,c
 12020                           
 12021                           ;ST7735_TFT.c: 482: char i, j;
 12022                           ;ST7735_TFT.c: 483: if((x >= 128) || (y >= 160))
 12023  00DE36  0E80               	movlw	128
 12024  00DE38  6026               	cpfslt	drawChar@x,c
 12025  00DE3A  D0A6               	goto	l261
 12026  00DE3C  0E9F               	movlw	159
 12027  00DE3E  641E               	cpfsgt	drawChar@y,c
 12028  00DE40  D001               	goto	l3574
 12029                           
 12030                           ;ST7735_TFT.c: 484: return;
 12031  00DE42  D0A2               	goto	l261
 12032  00DE44                     l3574:
 12033                           
 12034                           ;ST7735_TFT.c: 485: if(size < 1) size = 1;
 12035  00DE44  5024               	movf	drawChar@size,w,c
 12036  00DE46  A4D8               	btfss	status,2,c
 12037  00DE48  D003               	goto	l3578
 12038  00DE4A  0E01               	movlw	1
 12039  00DE4C  6E24               	movwf	drawChar@size,c
 12040  00DE4E  D000               	goto	l3578
 12041  00DE50                     l3578:
 12042                           
 12043                           ;ST7735_TFT.c: 486: if((c < ' ') || (c > '~'))
 12044  00DE50  0E1F               	movlw	31
 12045  00DE52  641F               	cpfsgt	drawChar@c,c
 12046  00DE54  D004               	goto	l3582
 12047  00DE56  0E7E               	movlw	126
 12048  00DE58  641F               	cpfsgt	drawChar@c,c
 12049  00DE5A  D003               	goto	l263
 12050  00DE5C  D000               	goto	l3582
 12051  00DE5E                     l3582:
 12052                           
 12053                           ;ST7735_TFT.c: 487: c = '?';
 12054  00DE5E  0E3F               	movlw	63
 12055  00DE60  6E1F               	movwf	drawChar@c,c
 12056  00DE62                     l263:
 12057                           
 12058                           ;ST7735_TFT.c: 488: for(i=0; i<5; i++ ) {
 12059  00DE62  0E00               	movlw	0
 12060  00DE64  6E28               	movwf	drawChar@i,c
 12061  00DE66                     l3584:
 12062  00DE66  0E04               	movlw	4
 12063  00DE68  6428               	cpfsgt	drawChar@i,c
 12064  00DE6A  D001               	goto	l3588
 12065  00DE6C  D08D               	goto	l261
 12066  00DE6E                     l3588:
 12067                           
 12068                           ;ST7735_TFT.c: 489: unsigned char line;
 12069                           ;ST7735_TFT.c: 490: if(c < 'S')
 12070  00DE6E  0E53               	movlw	83
 12071  00DE70  601F               	cpfslt	drawChar@c,c
 12072  00DE72  D015               	goto	l3592
 12073                           
 12074                           ;ST7735_TFT.c: 491: line = font[(c - 32)*5 + i];
 12075  00DE74  0EE0               	movlw	224
 12076  00DE76  241F               	addwf	drawChar@c,w,c
 12077  00DE78  6E0F               	movwf	___wmul@multiplier,c
 12078  00DE7A  6A10               	clrf	___wmul@multiplier+1,c
 12079  00DE7C  0EFF               	movlw	255
 12080  00DE7E  2210               	addwfc	___wmul@multiplier+1,f,c
 12081  00DE80  0E00               	movlw	0
 12082  00DE82  6E12               	movwf	___wmul@multiplicand+1,c
 12083  00DE84  0E05               	movlw	5
 12084  00DE86  6E11               	movwf	___wmul@multiplicand,c
 12085  00DE88  ECEB  F062         	call	___wmul	;wreg free
 12086  00DE8C  5028               	movf	drawChar@i,w,c
 12087  00DE8E  260F               	addwf	?___wmul,f,c
 12088  00DE90  0E00               	movlw	0
 12089  00DE92  2210               	addwfc	?___wmul+1,f,c
 12090  00DE94  0E35               	movlw	low _font
 12091  00DE96  240F               	addwf	?___wmul,w,c
 12092  00DE98  6EF6               	movwf	tblptrl,c
 12093  00DE9A  0EFD               	movlw	high _font
 12094  00DE9C  D014               	goto	L21
 12095  00DE9E                     l3592:
 12096                           
 12097                           ;ST7735_TFT.c: 492: else
 12098                           ;ST7735_TFT.c: 493: line = font2[(c - 'S')*5 + i];
 12099  00DE9E  0EAD               	movlw	173
 12100  00DEA0  241F               	addwf	drawChar@c,w,c
 12101  00DEA2  6E0F               	movwf	___wmul@multiplier,c
 12102  00DEA4  6A10               	clrf	___wmul@multiplier+1,c
 12103  00DEA6  0EFF               	movlw	255
 12104  00DEA8  2210               	addwfc	___wmul@multiplier+1,f,c
 12105  00DEAA  0E00               	movlw	0
 12106  00DEAC  6E12               	movwf	___wmul@multiplicand+1,c
 12107  00DEAE  0E05               	movlw	5
 12108  00DEB0  6E11               	movwf	___wmul@multiplicand,c
 12109  00DEB2  ECEB  F062         	call	___wmul	;wreg free
 12110  00DEB6  5028               	movf	drawChar@i,w,c
 12111  00DEB8  260F               	addwf	?___wmul,f,c
 12112  00DEBA  0E00               	movlw	0
 12113  00DEBC  2210               	addwfc	?___wmul+1,f,c
 12114  00DEBE  0E34               	movlw	low _font2
 12115  00DEC0  240F               	addwf	?___wmul,w,c
 12116  00DEC2  6EF6               	movwf	tblptrl,c
 12117  00DEC4  0EFE               	movlw	high _font2
 12118  00DEC6                     L21:
 12119  00DEC6  2010               	addwfc	?___wmul+1,w,c
 12120  00DEC8  6EF7               	movwf	tblptrh,c
 12121  00DECA                     	if	0	;There are less than 3 active tblptr bytes
 12122  00DECA                     	endif
 12123  00DECA  0008               	tblrd		*
 12124  00DECC  CFF5 F025          	movff	tablat,drawChar@line
 12125  00DED0  D000               	goto	l3594
 12126  00DED2                     l3594:
 12127                           
 12128                           ;ST7735_TFT.c: 494: for(j=0; j<7; j++, line >>= 1) {
 12129  00DED2  0E00               	movlw	0
 12130  00DED4  6E27               	movwf	drawChar@j,c
 12131  00DED6                     l3596:
 12132  00DED6  0E06               	movlw	6
 12133  00DED8  6427               	cpfsgt	drawChar@j,c
 12134  00DEDA  D001               	goto	l270
 12135  00DEDC  D053               	goto	l3620
 12136  00DEDE                     l270:
 12137                           
 12138                           ;ST7735_TFT.c: 495: if(line & 0x01) {
 12139  00DEDE  A025               	btfss	drawChar@line,0,c
 12140  00DEE0  D023               	goto	l3606
 12141                           
 12142                           ;ST7735_TFT.c: 496: if(size == 1) drawPixel(x+i, y+j, color);
 12143  00DEE2  0424               	decf	drawChar@size,w,c
 12144  00DEE4  A4D8               	btfss	status,2,c
 12145  00DEE6  D00C               	goto	l3604
 12146  00DEE8  501E               	movf	drawChar@y,w,c
 12147  00DEEA  2427               	addwf	drawChar@j,w,c
 12148  00DEEC  6E08               	movwf	drawPixel@y,c
 12149  00DEEE  C020  F009         	movff	drawChar@color,drawPixel@color
 12150  00DEF2  C021  F00A         	movff	drawChar@color+1,drawPixel@color+1
 12151  00DEF6  5026               	movf	drawChar@x,w,c
 12152  00DEF8  2428               	addwf	drawChar@i,w,c
 12153  00DEFA  EC42  F063         	call	_drawPixel
 12154  00DEFE  D03E               	goto	l3614
 12155  00DF00                     l3604:
 12156                           
 12157                           ;ST7735_TFT.c: 497: else fillRect(x+(i*size), y+(j*size), size, size, color);
 12158  00DF00  5027               	movf	drawChar@j,w,c
 12159  00DF02  0224               	mulwf	drawChar@size,c
 12160  00DF04  50F3               	movf	prodl,w,c
 12161  00DF06  241E               	addwf	drawChar@y,w,c
 12162  00DF08  6E13               	movwf	fillRect@y,c
 12163  00DF0A  C024  F014         	movff	drawChar@size,fillRect@w
 12164  00DF0E  C024  F015         	movff	drawChar@size,fillRect@h
 12165  00DF12  C020  F016         	movff	drawChar@color,fillRect@color
 12166  00DF16  C021  F017         	movff	drawChar@color+1,fillRect@color+1
 12167  00DF1A  5028               	movf	drawChar@i,w,c
 12168  00DF1C  0224               	mulwf	drawChar@size,c
 12169  00DF1E  50F3               	movf	prodl,w,c
 12170  00DF20  2426               	addwf	drawChar@x,w,c
 12171  00DF22  ECB8  F064         	call	_fillRect
 12172                           
 12173                           ;ST7735_TFT.c: 498: }
 12174  00DF26  D02A               	goto	l3614
 12175  00DF28                     l3606:
 12176                           
 12177                           ;ST7735_TFT.c: 499: else if(bg != color) {
 12178  00DF28  5020               	movf	drawChar@color,w,c
 12179  00DF2A  1822               	xorwf	drawChar@bg,w,c
 12180  00DF2C  E104               	bnz	u2860
 12181  00DF2E  5021               	movf	drawChar@color+1,w,c
 12182  00DF30  1823               	xorwf	drawChar@bg+1,w,c
 12183  00DF32  B4D8               	btfsc	status,2,c
 12184  00DF34  D023               	goto	l3614
 12185  00DF36                     u2860:
 12186                           
 12187                           ;ST7735_TFT.c: 500: if(size == 1) drawPixel(x+i, y+j, bg);
 12188  00DF36  0424               	decf	drawChar@size,w,c
 12189  00DF38  A4D8               	btfss	status,2,c
 12190  00DF3A  D00C               	goto	l3612
 12191  00DF3C  501E               	movf	drawChar@y,w,c
 12192  00DF3E  2427               	addwf	drawChar@j,w,c
 12193  00DF40  6E08               	movwf	drawPixel@y,c
 12194  00DF42  C022  F009         	movff	drawChar@bg,drawPixel@color
 12195  00DF46  C023  F00A         	movff	drawChar@bg+1,drawPixel@color+1
 12196  00DF4A  5026               	movf	drawChar@x,w,c
 12197  00DF4C  2428               	addwf	drawChar@i,w,c
 12198  00DF4E  EC42  F063         	call	_drawPixel
 12199  00DF52  D014               	goto	l3614
 12200  00DF54                     l3612:
 12201                           
 12202                           ;ST7735_TFT.c: 501: else fillRect(x+i*size, y+j*size, size, size, bg);
 12203  00DF54  5027               	movf	drawChar@j,w,c
 12204  00DF56  0224               	mulwf	drawChar@size,c
 12205  00DF58  50F3               	movf	prodl,w,c
 12206  00DF5A  241E               	addwf	drawChar@y,w,c
 12207  00DF5C  6E13               	movwf	fillRect@y,c
 12208  00DF5E  C024  F014         	movff	drawChar@size,fillRect@w
 12209  00DF62  C024  F015         	movff	drawChar@size,fillRect@h
 12210  00DF66  C022  F016         	movff	drawChar@bg,fillRect@color
 12211  00DF6A  C023  F017         	movff	drawChar@bg+1,fillRect@color+1
 12212  00DF6E  5028               	movf	drawChar@i,w,c
 12213  00DF70  0224               	mulwf	drawChar@size,c
 12214  00DF72  50F3               	movf	prodl,w,c
 12215  00DF74  2426               	addwf	drawChar@x,w,c
 12216  00DF76  ECB8  F064         	call	_fillRect
 12217  00DF7A  D000               	goto	l3614
 12218  00DF7C                     l3614:
 12219  00DF7C  2A27               	incf	drawChar@j,f,c
 12220  00DF7E  90D8               	bcf	status,0,c
 12221  00DF80  3225               	rrcf	drawChar@line,f,c
 12222  00DF82  D7A9               	goto	l3596
 12223  00DF84                     l3620:
 12224  00DF84  2A28               	incf	drawChar@i,f,c
 12225  00DF86  D76F               	goto	l3584
 12226  00DF88                     l261:
 12227  00DF88  0012               	return		;funcret
 12228  00DF8A                     __end_of_drawChar:
 12229                           	opt stack 0
 12230                           tblptru	equ	0xFF8
 12231                           tblptrh	equ	0xFF7
 12232                           tblptrl	equ	0xFF6
 12233                           tablat	equ	0xFF5
 12234                           prodh	equ	0xFF4
 12235                           prodl	equ	0xFF3
 12236                           intcon2	equ	0xFF1
 12237                           postinc0	equ	0xFEE
 12238                           wreg	equ	0xFE8
 12239                           postdec1	equ	0xFE5
 12240                           fsr1l	equ	0xFE1
 12241                           indf2	equ	0xFDF
 12242                           postinc2	equ	0xFDE
 12243                           postdec2	equ	0xFDD
 12244                           fsr2h	equ	0xFDA
 12245                           fsr2l	equ	0xFD9
 12246                           status	equ	0xFD8
 12247                           
 12248 ;; *************** function _fillRect *****************
 12249 ;; Defined at:
 12250 ;;		line 470 in file "ST7735_TFT.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;  x               1    wreg     unsigned char 
 12253 ;;  y               1   18[COMRAM] unsigned char 
 12254 ;;  w               1   19[COMRAM] unsigned char 
 12255 ;;  h               1   20[COMRAM] unsigned char 
 12256 ;;  color           2   21[COMRAM] unsigned int 
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;  x               1   26[COMRAM] unsigned char 
 12259 ;;  i               2   27[COMRAM] int 
 12260 ;; Return value:  Size  Location     Type
 12261 ;;		None               void
 12262 ;; Registers used:
 12263 ;;		wreg, status,2, status,0, cstack
 12264 ;; Tracked objects:
 12265 ;;		On entry : 0/0
 12266 ;;		On exit  : 0/0
 12267 ;;		Unchanged: 0/0
 12268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12269 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12270 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12271 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12272 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12273 ;;Total ram usage:       11 bytes
 12274 ;; Hardware stack levels used:    1
 12275 ;; Hardware stack levels required when called:    4
 12276 ;; This function calls:
 12277 ;;		_drawFastVLine
 12278 ;; This function is called by:
 12279 ;;		_drawChar
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           	psect	text55
 12284  00C970                     __ptext55:
 12285                           	opt stack 0
 12286  00C970                     _fillRect:
 12287                           	opt stack 21
 12288                           
 12289                           ;incstack = 0
 12290                           ;fillRect@x stored from wreg
 12291  00C970  6E1B               	movwf	fillRect@x,c
 12292                           
 12293                           ;ST7735_TFT.c: 472: signed int i;
 12294                           ;ST7735_TFT.c: 474: for (i = x; i < x + w; i++)
 12295  00C972  C01B  F01C         	movff	fillRect@x,fillRect@i
 12296  00C976  6A1D               	clrf	fillRect@i+1,c
 12297  00C978  D00E               	goto	l3364
 12298  00C97A                     l3360:
 12299                           
 12300                           ;ST7735_TFT.c: 475: {
 12301                           ;ST7735_TFT.c: 476: drawFastVLine(i, y, h, color);
 12302  00C97A  C013  F008         	movff	fillRect@y,drawFastVLine@y
 12303  00C97E  C015  F009         	movff	fillRect@h,drawFastVLine@h
 12304  00C982  C016  F00A         	movff	fillRect@color,drawFastVLine@color
 12305  00C986  C017  F00B         	movff	fillRect@color+1,drawFastVLine@color+1
 12306  00C98A  501C               	movf	fillRect@i,w,c
 12307  00C98C  ECAB  F066         	call	_drawFastVLine
 12308  00C990  4A1C               	infsnz	fillRect@i,f,c
 12309  00C992  2A1D               	incf	fillRect@i+1,f,c
 12310  00C994  D000               	goto	l3364
 12311  00C996                     l3364:
 12312  00C996  5014               	movf	fillRect@w,w,c
 12313  00C998  C01B  F018         	movff	fillRect@x,??_fillRect
 12314  00C99C  6A19               	clrf	(??_fillRect+1)& (0+255),c
 12315  00C99E  2618               	addwf	??_fillRect,f,c
 12316  00C9A0  0E00               	movlw	0
 12317  00C9A2  2219               	addwfc	??_fillRect+1,f,c
 12318  00C9A4  5018               	movf	??_fillRect,w,c
 12319  00C9A6  5C1C               	subwf	fillRect@i,w,c
 12320  00C9A8  501D               	movf	fillRect@i+1,w,c
 12321  00C9AA  0A80               	xorlw	128
 12322  00C9AC  6E1A               	movwf	(??_fillRect+2)& (0+255),c
 12323  00C9AE  5019               	movf	??_fillRect+1,w,c
 12324  00C9B0  0A80               	xorlw	128
 12325  00C9B2  581A               	subwfb	(??_fillRect+2)& (0+255),w,c
 12326  00C9B4  A0D8               	btfss	status,0,c
 12327  00C9B6  D7E1               	goto	l3360
 12328  00C9B8  0012               	return		;funcret
 12329  00C9BA                     __end_of_fillRect:
 12330                           	opt stack 0
 12331                           tblptru	equ	0xFF8
 12332                           tblptrh	equ	0xFF7
 12333                           tblptrl	equ	0xFF6
 12334                           tablat	equ	0xFF5
 12335                           prodh	equ	0xFF4
 12336                           prodl	equ	0xFF3
 12337                           intcon2	equ	0xFF1
 12338                           postinc0	equ	0xFEE
 12339                           wreg	equ	0xFE8
 12340                           postdec1	equ	0xFE5
 12341                           fsr1l	equ	0xFE1
 12342                           indf2	equ	0xFDF
 12343                           postinc2	equ	0xFDE
 12344                           postdec2	equ	0xFDD
 12345                           fsr2h	equ	0xFDA
 12346                           fsr2l	equ	0xFD9
 12347                           status	equ	0xFD8
 12348                           
 12349 ;; *************** function _drawFastVLine *****************
 12350 ;; Defined at:
 12351 ;;		line 449 in file "ST7735_TFT.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;  x               1    wreg     unsigned char 
 12354 ;;  y               1    7[COMRAM] unsigned char 
 12355 ;;  h               1    8[COMRAM] unsigned char 
 12356 ;;  color           2    9[COMRAM] unsigned int 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  x               1   17[COMRAM] unsigned char 
 12359 ;;  lo              1   16[COMRAM] unsigned char 
 12360 ;;  hi              1   15[COMRAM] unsigned char 
 12361 ;; Return value:  Size  Location     Type
 12362 ;;		None               void
 12363 ;; Registers used:
 12364 ;;		wreg, status,2, status,0, cstack
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : 0/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12370 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;Total ram usage:       11 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:    3
 12377 ;; This function calls:
 12378 ;;		_setAddrWindow
 12379 ;;		_spiwrite
 12380 ;; This function is called by:
 12381 ;;		_fillRect
 12382 ;;		_fillCircleHelper
 12383 ;;		_fillCircle
 12384 ;;		_drawRect
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           	psect	text56
 12389  00CD56                     __ptext56:
 12390                           	opt stack 0
 12391  00CD56                     _drawFastVLine:
 12392                           	opt stack 21
 12393                           
 12394                           ;incstack = 0
 12395                           ;drawFastVLine@x stored from wreg
 12396  00CD56  6E12               	movwf	drawFastVLine@x,c
 12397                           
 12398                           ;ST7735_TFT.c: 451: unsigned char hi, lo;
 12399                           ;ST7735_TFT.c: 452: if((x >= 128) || (y >= 160))
 12400  00CD58  0E80               	movlw	128
 12401  00CD5A  6012               	cpfslt	drawFastVLine@x,c
 12402  00CD5C  D03F               	goto	l245
 12403  00CD5E  0E9F               	movlw	159
 12404  00CD60  6408               	cpfsgt	drawFastVLine@y,c
 12405  00CD62  D001               	goto	l3294
 12406                           
 12407                           ;ST7735_TFT.c: 453: return;
 12408  00CD64  D03B               	goto	l245
 12409  00CD66                     l3294:
 12410                           
 12411                           ;ST7735_TFT.c: 454: if((y + h - 1) >= 160)
 12412  00CD66  0EFF               	movlw	255
 12413  00CD68  6E0C               	movwf	??_drawFastVLine& (0+255),c
 12414  00CD6A  0EFF               	movlw	255
 12415  00CD6C  6E0D               	movwf	(??_drawFastVLine+1)& (0+255),c
 12416  00CD6E  5009               	movf	drawFastVLine@h,w,c
 12417  00CD70  C008  F00E         	movff	drawFastVLine@y,??_drawFastVLine+2
 12418  00CD74  6A0F               	clrf	(??_drawFastVLine+3)& (0+255),c
 12419  00CD76  260E               	addwf	??_drawFastVLine+2,f,c
 12420  00CD78  0E00               	movlw	0
 12421  00CD7A  220F               	addwfc	??_drawFastVLine+3,f,c
 12422  00CD7C  500C               	movf	??_drawFastVLine,w,c
 12423  00CD7E  260E               	addwf	??_drawFastVLine+2,f,c
 12424  00CD80  500D               	movf	??_drawFastVLine+1,w,c
 12425  00CD82  220F               	addwfc	??_drawFastVLine+3,f,c
 12426  00CD84  BE0F               	btfsc	??_drawFastVLine+3,7,c
 12427  00CD86  D00B               	goto	l3298
 12428  00CD88  500F               	movf	??_drawFastVLine+3,w,c
 12429  00CD8A  E104               	bnz	u2240
 12430  00CD8C  0EA0               	movlw	160
 12431  00CD8E  5C0E               	subwf	??_drawFastVLine+2,w,c
 12432  00CD90  A0D8               	btfss	status,0,c
 12433  00CD92  D005               	goto	l3298
 12434  00CD94                     u2240:
 12435                           
 12436                           ;ST7735_TFT.c: 455: h = 160 - y;
 12437  00CD94  5008               	movf	drawFastVLine@y,w,c
 12438  00CD96  0800               	sublw	0
 12439  00CD98  0FA0               	addlw	160
 12440  00CD9A  6E09               	movwf	drawFastVLine@h,c
 12441  00CD9C  D000               	goto	l3298
 12442  00CD9E                     l3298:
 12443                           
 12444                           ;ST7735_TFT.c: 456: hi = color >> 8; lo = color;
 12445  00CD9E  500B               	movf	drawFastVLine@color+1,w,c
 12446  00CDA0  6E10               	movwf	drawFastVLine@hi,c
 12447  00CDA2  C00A  F011         	movff	drawFastVLine@color,drawFastVLine@lo
 12448                           
 12449                           ;ST7735_TFT.c: 457: setAddrWindow(x, y, x, y + h - 1);
 12450  00CDA6  C008  F004         	movff	drawFastVLine@y,setAddrWindow@y0
 12451  00CDAA  C012  F005         	movff	drawFastVLine@x,setAddrWindow@x1
 12452  00CDAE  5008               	movf	drawFastVLine@y,w,c
 12453  00CDB0  2409               	addwf	drawFastVLine@h,w,c
 12454  00CDB2  6E0C               	movwf	??_drawFastVLine& (0+255),c
 12455  00CDB4  040C               	decf	??_drawFastVLine,w,c
 12456  00CDB6  6E06               	movwf	setAddrWindow@y1,c
 12457  00CDB8  5012               	movf	drawFastVLine@x,w,c
 12458  00CDBA  ECDD  F064         	call	_setAddrWindow
 12459                           
 12460                           ;ST7735_TFT.c: 458: PORTCbits.RC0 = 1;
 12461  00CDBE  8082               	bsf	3970,0,c	;volatile
 12462                           
 12463                           ;ST7735_TFT.c: 459: PORTCbits.RC2 = 0;
 12464  00CDC0  9482               	bcf	3970,2,c	;volatile
 12465                           
 12466                           ;ST7735_TFT.c: 461: while (h--) {
 12467  00CDC2  D007               	goto	l3310
 12468  00CDC4                     l3308:
 12469                           
 12470                           ;ST7735_TFT.c: 462: spiwrite(hi);
 12471  00CDC4  5010               	movf	drawFastVLine@hi,w,c
 12472  00CDC6  EC8C  F062         	call	_spiwrite
 12473                           
 12474                           ;ST7735_TFT.c: 463: spiwrite(lo);
 12475  00CDCA  5011               	movf	drawFastVLine@lo,w,c
 12476  00CDCC  EC8C  F062         	call	_spiwrite
 12477  00CDD0  D000               	goto	l3310
 12478  00CDD2                     l3310:
 12479  00CDD2  0609               	decf	drawFastVLine@h,f,c
 12480  00CDD4  2809               	incf	drawFastVLine@h,w,c
 12481  00CDD6  A4D8               	btfss	status,2,c
 12482  00CDD8  D7F5               	goto	l3308
 12483                           
 12484                           ;ST7735_TFT.c: 464: }
 12485                           ;ST7735_TFT.c: 465: PORTCbits.RC2 = 1;
 12486  00CDDA  8482               	bsf	3970,2,c	;volatile
 12487  00CDDC                     l245:
 12488  00CDDC  0012               	return		;funcret
 12489  00CDDE                     __end_of_drawFastVLine:
 12490                           	opt stack 0
 12491                           tblptru	equ	0xFF8
 12492                           tblptrh	equ	0xFF7
 12493                           tblptrl	equ	0xFF6
 12494                           tablat	equ	0xFF5
 12495                           prodh	equ	0xFF4
 12496                           prodl	equ	0xFF3
 12497                           intcon2	equ	0xFF1
 12498                           postinc0	equ	0xFEE
 12499                           wreg	equ	0xFE8
 12500                           postdec1	equ	0xFE5
 12501                           fsr1l	equ	0xFE1
 12502                           indf2	equ	0xFDF
 12503                           postinc2	equ	0xFDE
 12504                           postdec2	equ	0xFDD
 12505                           fsr2h	equ	0xFDA
 12506                           fsr2l	equ	0xFD9
 12507                           status	equ	0xFD8
 12508                           
 12509 ;; *************** function _drawPixel *****************
 12510 ;; Defined at:
 12511 ;;		line 440 in file "ST7735_TFT.c"
 12512 ;; Parameters:    Size  Location     Type
 12513 ;;  x               1    wreg     unsigned char 
 12514 ;;  y               1    7[COMRAM] unsigned char 
 12515 ;;  color           2    8[COMRAM] unsigned int 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;  x               1   10[COMRAM] unsigned char 
 12518 ;; Return value:  Size  Location     Type
 12519 ;;		None               void
 12520 ;; Registers used:
 12521 ;;		wreg, status,2, status,0, cstack
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12527 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12530 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12531 ;;Total ram usage:        4 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    3
 12534 ;; This function calls:
 12535 ;;		_setAddrWindow
 12536 ;;		_write_data
 12537 ;; This function is called by:
 12538 ;;		_drawChar
 12539 ;;		_drawCircle
 12540 ;;		_drawCircleHelper
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           	psect	text57
 12545  00C684                     __ptext57:
 12546                           	opt stack 0
 12547  00C684                     _drawPixel:
 12548                           	opt stack 22
 12549                           
 12550                           ;incstack = 0
 12551                           ;drawPixel@x stored from wreg
 12552  00C684  6E0B               	movwf	drawPixel@x,c
 12553                           
 12554                           ;ST7735_TFT.c: 442: if((x >= 128) || (y >= 160))
 12555  00C686  0E80               	movlw	128
 12556  00C688  600B               	cpfslt	drawPixel@x,c
 12557  00C68A  D013               	goto	l239
 12558  00C68C  0E9F               	movlw	159
 12559  00C68E  6408               	cpfsgt	drawPixel@y,c
 12560  00C690  D001               	goto	l3352
 12561                           
 12562                           ;ST7735_TFT.c: 443: return;
 12563  00C692  D00F               	goto	l239
 12564  00C694                     l3352:
 12565                           
 12566                           ;ST7735_TFT.c: 444: setAddrWindow(x,y,x+1,y+1);
 12567  00C694  C008  F004         	movff	drawPixel@y,setAddrWindow@y0
 12568  00C698  280B               	incf	drawPixel@x,w,c
 12569  00C69A  6E05               	movwf	setAddrWindow@x1,c
 12570  00C69C  2808               	incf	drawPixel@y,w,c
 12571  00C69E  6E06               	movwf	setAddrWindow@y1,c
 12572  00C6A0  500B               	movf	drawPixel@x,w,c
 12573  00C6A2  ECDD  F064         	call	_setAddrWindow
 12574                           
 12575                           ;ST7735_TFT.c: 445: write_data(color >> 8);
 12576  00C6A6  500A               	movf	drawPixel@color+1,w,c
 12577  00C6A8  EC72  F062         	call	_write_data
 12578                           
 12579                           ;ST7735_TFT.c: 446: write_data(color & 0xFF);
 12580  00C6AC  5009               	movf	drawPixel@color,w,c
 12581  00C6AE  EC72  F062         	call	_write_data
 12582  00C6B2                     l239:
 12583  00C6B2  0012               	return		;funcret
 12584  00C6B4                     __end_of_drawPixel:
 12585                           	opt stack 0
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon2	equ	0xFF1
 12593                           postinc0	equ	0xFEE
 12594                           wreg	equ	0xFE8
 12595                           postdec1	equ	0xFE5
 12596                           fsr1l	equ	0xFE1
 12597                           indf2	equ	0xFDF
 12598                           postinc2	equ	0xFDE
 12599                           postdec2	equ	0xFDD
 12600                           fsr2h	equ	0xFDA
 12601                           fsr2l	equ	0xFD9
 12602                           status	equ	0xFD8
 12603                           
 12604 ;; *************** function _setAddrWindow *****************
 12605 ;; Defined at:
 12606 ;;		line 425 in file "ST7735_TFT.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;  x0              1    wreg     unsigned char 
 12609 ;;  y0              1    3[COMRAM] unsigned char 
 12610 ;;  x1              1    4[COMRAM] unsigned char 
 12611 ;;  y1              1    5[COMRAM] unsigned char 
 12612 ;; Auto vars:     Size  Location     Type
 12613 ;;  x0              1    6[COMRAM] unsigned char 
 12614 ;; Return value:  Size  Location     Type
 12615 ;;		None               void
 12616 ;; Registers used:
 12617 ;;		wreg, status,2, status,0, cstack
 12618 ;; Tracked objects:
 12619 ;;		On entry : 0/0
 12620 ;;		On exit  : 0/0
 12621 ;;		Unchanged: 0/0
 12622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12623 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12624 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12626 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12627 ;;Total ram usage:        4 bytes
 12628 ;; Hardware stack levels used:    1
 12629 ;; Hardware stack levels required when called:    2
 12630 ;; This function calls:
 12631 ;;		_write_command
 12632 ;;		_write_data
 12633 ;; This function is called by:
 12634 ;;		_drawPixel
 12635 ;;		_drawFastVLine
 12636 ;;		_fillRectangle
 12637 ;;		_drawFastHLine
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           	psect	text58
 12642  00C9BA                     __ptext58:
 12643                           	opt stack 0
 12644  00C9BA                     _setAddrWindow:
 12645                           	opt stack 21
 12646                           
 12647                           ;incstack = 0
 12648                           ;setAddrWindow@x0 stored from wreg
 12649  00C9BA  6E07               	movwf	setAddrWindow@x0,c
 12650                           
 12651                           ;ST7735_TFT.c: 427: write_command(0x2A);
 12652  00C9BC  0E2A               	movlw	42
 12653  00C9BE  EC6A  F062         	call	_write_command
 12654                           
 12655                           ;ST7735_TFT.c: 428: write_data(0);
 12656  00C9C2  0E00               	movlw	0
 12657  00C9C4  EC72  F062         	call	_write_data
 12658                           
 12659                           ;ST7735_TFT.c: 429: write_data(x0 + colstart);
 12660  00C9C8  5007               	movf	setAddrWindow@x0,w,c
 12661  00C9CA  247D               	addwf	_colstart,w,c
 12662  00C9CC  EC72  F062         	call	_write_data
 12663                           
 12664                           ;ST7735_TFT.c: 430: write_data(0);
 12665  00C9D0  0E00               	movlw	0
 12666  00C9D2  EC72  F062         	call	_write_data
 12667                           
 12668                           ;ST7735_TFT.c: 431: write_data(x1 + colstart);
 12669  00C9D6  5005               	movf	setAddrWindow@x1,w,c
 12670  00C9D8  247D               	addwf	_colstart,w,c
 12671  00C9DA  EC72  F062         	call	_write_data
 12672                           
 12673                           ;ST7735_TFT.c: 432: write_command(0x2B);
 12674  00C9DE  0E2B               	movlw	43
 12675  00C9E0  EC6A  F062         	call	_write_command
 12676                           
 12677                           ;ST7735_TFT.c: 433: write_data(0);
 12678  00C9E4  0E00               	movlw	0
 12679  00C9E6  EC72  F062         	call	_write_data
 12680                           
 12681                           ;ST7735_TFT.c: 434: write_data(y0 + rowstart);
 12682  00C9EA  5004               	movf	setAddrWindow@y0,w,c
 12683  00C9EC  247F               	addwf	_rowstart,w,c
 12684  00C9EE  EC72  F062         	call	_write_data
 12685                           
 12686                           ;ST7735_TFT.c: 435: write_data(0);
 12687  00C9F2  0E00               	movlw	0
 12688  00C9F4  EC72  F062         	call	_write_data
 12689                           
 12690                           ;ST7735_TFT.c: 436: write_data(y1 + rowstart);
 12691  00C9F8  5006               	movf	setAddrWindow@y1,w,c
 12692  00C9FA  247F               	addwf	_rowstart,w,c
 12693  00C9FC  EC72  F062         	call	_write_data
 12694                           
 12695                           ;ST7735_TFT.c: 437: write_command(0x2C);
 12696  00CA00  0E2C               	movlw	44
 12697  00CA02  EC6A  F062         	call	_write_command
 12698  00CA06  0012               	return		;funcret
 12699  00CA08                     __end_of_setAddrWindow:
 12700                           	opt stack 0
 12701                           tblptru	equ	0xFF8
 12702                           tblptrh	equ	0xFF7
 12703                           tblptrl	equ	0xFF6
 12704                           tablat	equ	0xFF5
 12705                           prodh	equ	0xFF4
 12706                           prodl	equ	0xFF3
 12707                           intcon2	equ	0xFF1
 12708                           postinc0	equ	0xFEE
 12709                           wreg	equ	0xFE8
 12710                           postdec1	equ	0xFE5
 12711                           fsr1l	equ	0xFE1
 12712                           indf2	equ	0xFDF
 12713                           postinc2	equ	0xFDE
 12714                           postdec2	equ	0xFDD
 12715                           fsr2h	equ	0xFDA
 12716                           fsr2l	equ	0xFD9
 12717                           status	equ	0xFD8
 12718                           
 12719 ;; *************** function _write_data *****************
 12720 ;; Defined at:
 12721 ;;		line 242 in file "ST7735_TFT.c"
 12722 ;; Parameters:    Size  Location     Type
 12723 ;;  data_           1    wreg     unsigned char 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  data_           1    2[COMRAM] unsigned char 
 12726 ;; Return value:  Size  Location     Type
 12727 ;;		None               void
 12728 ;; Registers used:
 12729 ;;		wreg, status,2, cstack
 12730 ;; Tracked objects:
 12731 ;;		On entry : 0/0
 12732 ;;		On exit  : 0/0
 12733 ;;		Unchanged: 0/0
 12734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;Total ram usage:        1 bytes
 12740 ;; Hardware stack levels used:    1
 12741 ;; Hardware stack levels required when called:    1
 12742 ;; This function calls:
 12743 ;;		_spiwrite
 12744 ;; This function is called by:
 12745 ;;		_Rcmd1
 12746 ;;		_Rcmd2red
 12747 ;;		_Rcmd3
 12748 ;;		_setAddrWindow
 12749 ;;		_drawPixel
 12750 ;;		_TFT_GreenTab_Initialize
 12751 ;;		_Bcmd
 12752 ;;		_setScrollDefinition
 12753 ;;		_Rcmd2green
 12754 ;;		_VerticalScroll
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           	psect	text59
 12759  00C4E4                     __ptext59:
 12760                           	opt stack 0
 12761  00C4E4                     _write_data:
 12762                           	opt stack 21
 12763                           
 12764                           ;incstack = 0
 12765                           ;write_data@data_ stored from wreg
 12766  00C4E4  6E03               	movwf	write_data@data_,c
 12767                           
 12768                           ;ST7735_TFT.c: 244: PORTCbits.RC2 = 0;
 12769  00C4E6  9482               	bcf	3970,2,c	;volatile
 12770                           
 12771                           ;ST7735_TFT.c: 245: PORTCbits.RC0 = 1;
 12772  00C4E8  8082               	bsf	3970,0,c	;volatile
 12773                           
 12774                           ;ST7735_TFT.c: 246: spiwrite(data_);
 12775  00C4EA  5003               	movf	write_data@data_,w,c
 12776  00C4EC  EC8C  F062         	call	_spiwrite
 12777                           
 12778                           ;ST7735_TFT.c: 247: PORTCbits.RC2 = 1;
 12779  00C4F0  8482               	bsf	3970,2,c	;volatile
 12780  00C4F2  0012               	return		;funcret
 12781  00C4F4                     __end_of_write_data:
 12782                           	opt stack 0
 12783                           tblptru	equ	0xFF8
 12784                           tblptrh	equ	0xFF7
 12785                           tblptrl	equ	0xFF6
 12786                           tablat	equ	0xFF5
 12787                           prodh	equ	0xFF4
 12788                           prodl	equ	0xFF3
 12789                           intcon2	equ	0xFF1
 12790                           postinc0	equ	0xFEE
 12791                           wreg	equ	0xFE8
 12792                           postdec1	equ	0xFE5
 12793                           fsr1l	equ	0xFE1
 12794                           indf2	equ	0xFDF
 12795                           postinc2	equ	0xFDE
 12796                           postdec2	equ	0xFDD
 12797                           fsr2h	equ	0xFDA
 12798                           fsr2l	equ	0xFD9
 12799                           status	equ	0xFD8
 12800                           
 12801 ;; *************** function _write_command *****************
 12802 ;; Defined at:
 12803 ;;		line 231 in file "ST7735_TFT.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;  cmd_            1    wreg     unsigned char 
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  cmd_            1    2[COMRAM] unsigned char 
 12808 ;; Return value:  Size  Location     Type
 12809 ;;		None               void
 12810 ;; Registers used:
 12811 ;;		wreg, status,2, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12821 ;;Total ram usage:        1 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    1
 12824 ;; This function calls:
 12825 ;;		_spiwrite
 12826 ;; This function is called by:
 12827 ;;		_Rcmd1
 12828 ;;		_Rcmd2red
 12829 ;;		_Rcmd3
 12830 ;;		_setAddrWindow
 12831 ;;		_TFT_GreenTab_Initialize
 12832 ;;		_Bcmd
 12833 ;;		_setScrollDefinition
 12834 ;;		_Rcmd2green
 12835 ;;		_VerticalScroll
 12836 ;; This function uses a non-reentrant model
 12837 ;;
 12838                           
 12839                           	psect	text60
 12840  00C4D4                     __ptext60:
 12841                           	opt stack 0
 12842  00C4D4                     _write_command:
 12843                           	opt stack 21
 12844                           
 12845                           ;incstack = 0
 12846                           ;write_command@cmd_ stored from wreg
 12847  00C4D4  6E03               	movwf	write_command@cmd_,c
 12848                           
 12849                           ;ST7735_TFT.c: 233: PORTCbits.RC2 = 0;
 12850  00C4D6  9482               	bcf	3970,2,c	;volatile
 12851                           
 12852                           ;ST7735_TFT.c: 235: PORTCbits.RC0 = 0;
 12853  00C4D8  9082               	bcf	3970,0,c	;volatile
 12854                           
 12855                           ;ST7735_TFT.c: 236: spiwrite(cmd_);
 12856  00C4DA  5003               	movf	write_command@cmd_,w,c
 12857  00C4DC  EC8C  F062         	call	_spiwrite
 12858                           
 12859                           ;ST7735_TFT.c: 238: PORTCbits.RC2 = 1;
 12860  00C4E0  8482               	bsf	3970,2,c	;volatile
 12861  00C4E2  0012               	return		;funcret
 12862  00C4E4                     __end_of_write_command:
 12863                           	opt stack 0
 12864                           tblptru	equ	0xFF8
 12865                           tblptrh	equ	0xFF7
 12866                           tblptrl	equ	0xFF6
 12867                           tablat	equ	0xFF5
 12868                           prodh	equ	0xFF4
 12869                           prodl	equ	0xFF3
 12870                           intcon2	equ	0xFF1
 12871                           postinc0	equ	0xFEE
 12872                           wreg	equ	0xFE8
 12873                           postdec1	equ	0xFE5
 12874                           fsr1l	equ	0xFE1
 12875                           indf2	equ	0xFDF
 12876                           postinc2	equ	0xFDE
 12877                           postdec2	equ	0xFDD
 12878                           fsr2h	equ	0xFDA
 12879                           fsr2l	equ	0xFD9
 12880                           status	equ	0xFD8
 12881                           
 12882 ;; *************** function _spiwrite *****************
 12883 ;; Defined at:
 12884 ;;		line 222 in file "ST7735_TFT.c"
 12885 ;; Parameters:    Size  Location     Type
 12886 ;;  spidata         1    wreg     unsigned char 
 12887 ;; Auto vars:     Size  Location     Type
 12888 ;;  spidata         1    1[COMRAM] unsigned char 
 12889 ;;  x               1    0[COMRAM] unsigned char 
 12890 ;; Return value:  Size  Location     Type
 12891 ;;		None               void
 12892 ;; Registers used:
 12893 ;;		wreg
 12894 ;; Tracked objects:
 12895 ;;		On entry : 0/0
 12896 ;;		On exit  : 0/0
 12897 ;;		Unchanged: 0/0
 12898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12903 ;;Total ram usage:        2 bytes
 12904 ;; Hardware stack levels used:    1
 12905 ;; This function calls:
 12906 ;;		Nothing
 12907 ;; This function is called by:
 12908 ;;		_write_command
 12909 ;;		_write_data
 12910 ;;		_drawFastVLine
 12911 ;;		_fillRectangle
 12912 ;;		_drawFastHLine
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           	psect	text61
 12917  00C518                     __ptext61:
 12918                           	opt stack 0
 12919  00C518                     _spiwrite:
 12920                           	opt stack 23
 12921                           
 12922                           ;incstack = 0
 12923                           ;spiwrite@spidata stored from wreg
 12924  00C518  6E02               	movwf	spiwrite@spidata,c
 12925                           
 12926                           ;ST7735_TFT.c: 224: char x;
 12927                           ;ST7735_TFT.c: 225: PIR1bits.SSPIF = 0;
 12928  00C51A  969E               	bcf	3998,3,c	;volatile
 12929                           
 12930                           ;ST7735_TFT.c: 226: x = SSPBUF;
 12931  00C51C  CFC9 F001          	movff	4041,spiwrite@x	;volatile
 12932                           
 12933                           ;ST7735_TFT.c: 227: SSPBUF = spidata;
 12934  00C520  C002  FFC9         	movff	spiwrite@spidata,4041	;volatile
 12935                           
 12936                           ;ST7735_TFT.c: 228: while (!SSPSTATbits.BF);
 12937  00C524  D000               	goto	l195
 12938  00C526                     l195:
 12939  00C526  A0C7               	btfss	4039,0,c	;volatile
 12940  00C528  D7FE               	goto	l195
 12941  00C52A  0012               	return		;funcret
 12942  00C52C                     __end_of_spiwrite:
 12943                           	opt stack 0
 12944                           tblptru	equ	0xFF8
 12945                           tblptrh	equ	0xFF7
 12946                           tblptrl	equ	0xFF6
 12947                           tablat	equ	0xFF5
 12948                           prodh	equ	0xFF4
 12949                           prodl	equ	0xFF3
 12950                           intcon2	equ	0xFF1
 12951                           postinc0	equ	0xFEE
 12952                           wreg	equ	0xFE8
 12953                           postdec1	equ	0xFE5
 12954                           fsr1l	equ	0xFE1
 12955                           indf2	equ	0xFDF
 12956                           postinc2	equ	0xFDE
 12957                           postdec2	equ	0xFDD
 12958                           fsr2h	equ	0xFDA
 12959                           fsr2l	equ	0xFD9
 12960                           status	equ	0xFD8
 12961                           
 12962 ;; *************** function ___wmul *****************
 12963 ;; Defined at:
 12964 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 12965 ;; Parameters:    Size  Location     Type
 12966 ;;  multiplier      2   14[COMRAM] unsigned int 
 12967 ;;  multiplicand    2   16[COMRAM] unsigned int 
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;  product         2   18[COMRAM] unsigned int 
 12970 ;; Return value:  Size  Location     Type
 12971 ;;                  2   14[COMRAM] unsigned int 
 12972 ;; Registers used:
 12973 ;;		wreg, status,2, status,0, prodl, prodh
 12974 ;; Tracked objects:
 12975 ;;		On entry : 0/0
 12976 ;;		On exit  : 0/0
 12977 ;;		Unchanged: 0/0
 12978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12979 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12982 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12983 ;;Total ram usage:        6 bytes
 12984 ;; Hardware stack levels used:    1
 12985 ;; This function calls:
 12986 ;;		Nothing
 12987 ;; This function is called by:
 12988 ;;		_delay_ms
 12989 ;;		_drawChar
 12990 ;;		_update_LCD_misc
 12991 ;;		_fround
 12992 ;;		_scale
 12993 ;;		_printf
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           	psect	text62
 12998  00C5D6                     __ptext62:
 12999                           	opt stack 0
 13000  00C5D6                     ___wmul:
 13001                           	opt stack 25
 13002                           
 13003                           ;incstack = 0
 13004  00C5D6  500F               	movf	___wmul@multiplier,w,c
 13005  00C5D8  0211               	mulwf	___wmul@multiplicand,c
 13006  00C5DA  CFF3 F013          	movff	prodl,___wmul@product
 13007  00C5DE  CFF4 F014          	movff	prodh,___wmul@product+1
 13008  00C5E2  500F               	movf	___wmul@multiplier,w,c
 13009  00C5E4  0212               	mulwf	___wmul@multiplicand+1,c
 13010  00C5E6  50F3               	movf	prodl,w,c
 13011  00C5E8  2614               	addwf	___wmul@product+1,f,c
 13012  00C5EA  5010               	movf	___wmul@multiplier+1,w,c
 13013  00C5EC  0211               	mulwf	___wmul@multiplicand,c
 13014  00C5EE  50F3               	movf	prodl,w,c
 13015  00C5F0  2614               	addwf	___wmul@product+1,f,c
 13016  00C5F2  C013  F00F         	movff	___wmul@product,?___wmul
 13017  00C5F6  C014  F010         	movff	___wmul@product+1,?___wmul+1
 13018  00C5FA  D000               	goto	l635
 13019  00C5FC                     l635:
 13020  00C5FC  0012               	return		;funcret
 13021  00C5FE                     __end_of___wmul:
 13022                           	opt stack 0
 13023                           tblptru	equ	0xFF8
 13024                           tblptrh	equ	0xFF7
 13025                           tblptrl	equ	0xFF6
 13026                           tablat	equ	0xFF5
 13027                           prodh	equ	0xFF4
 13028                           prodl	equ	0xFF3
 13029                           intcon2	equ	0xFF1
 13030                           postinc0	equ	0xFEE
 13031                           wreg	equ	0xFE8
 13032                           postdec1	equ	0xFE5
 13033                           fsr1l	equ	0xFE1
 13034                           indf2	equ	0xFDF
 13035                           postinc2	equ	0xFDE
 13036                           postdec2	equ	0xFDD
 13037                           fsr2h	equ	0xFDA
 13038                           fsr2l	equ	0xFD9
 13039                           status	equ	0xFD8
 13040                           
 13041 ;; *************** function ___ftdiv *****************
 13042 ;; Defined at:
 13043 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;  f1              3   24[COMRAM] float 
 13046 ;;  f2              3   27[COMRAM] float 
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;  f3              3   34[COMRAM] float 
 13049 ;;  sign            1   38[COMRAM] unsigned char 
 13050 ;;  exp             1   37[COMRAM] unsigned char 
 13051 ;;  cntr            1   33[COMRAM] unsigned char 
 13052 ;; Return value:  Size  Location     Type
 13053 ;;                  3   24[COMRAM] float 
 13054 ;; Registers used:
 13055 ;;		wreg, status,2, status,0, cstack
 13056 ;; Tracked objects:
 13057 ;;		On entry : 0/0
 13058 ;;		On exit  : 0/0
 13059 ;;		Unchanged: 0/0
 13060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13061 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13062 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13063 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;Total ram usage:       15 bytes
 13066 ;; Hardware stack levels used:    1
 13067 ;; Hardware stack levels required when called:    1
 13068 ;; This function calls:
 13069 ;;		___ftpack
 13070 ;; This function is called by:
 13071 ;;		_update_LCD_misc
 13072 ;; This function uses a non-reentrant model
 13073 ;;
 13074                           
 13075                           	psect	text63
 13076  00D53E                     __ptext63:
 13077                           	opt stack 0
 13078  00D53E                     ___ftdiv:
 13079                           	opt stack 25
 13080                           
 13081                           ;incstack = 0
 13082  00D53E  C01B  F01F         	movff	___ftdiv@f1+2,??___ftdiv
 13083  00D542  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 13084  00D544  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 13085  00D546  341A               	rlcf	___ftdiv@f1+1,w,c
 13086  00D548  361F               	rlcf	??___ftdiv& (0+255),f,c
 13087  00D54A  E301               	bnc	u3721
 13088  00D54C  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 13089  00D54E                     u3721:
 13090  00D54E  501F               	movf	??___ftdiv,w,c
 13091  00D550  6E26               	movwf	___ftdiv@exp,c
 13092  00D552  5026               	movf	___ftdiv@exp,w,c
 13093  00D554  A4D8               	btfss	status,2,c
 13094  00D556  D002               	goto	l4172
 13095  00D558  D00E               	goto	l4174
 13096  00D55A  D061               	goto	l1032
 13097  00D55C                     l4172:
 13098  00D55C  C01E  F01F         	movff	___ftdiv@f2+2,??___ftdiv
 13099  00D560  6A20               	clrf	(??___ftdiv+1)& (0+255),c
 13100  00D562  6A21               	clrf	(??___ftdiv+2)& (0+255),c
 13101  00D564  341D               	rlcf	___ftdiv@f2+1,w,c
 13102  00D566  361F               	rlcf	??___ftdiv& (0+255),f,c
 13103  00D568  E301               	bnc	u3741
 13104  00D56A  8020               	bsf	(??___ftdiv+1)& (0+255),0,c
 13105  00D56C                     u3741:
 13106  00D56C  501F               	movf	??___ftdiv,w,c
 13107  00D56E  6E27               	movwf	___ftdiv@sign,c
 13108  00D570  5027               	movf	___ftdiv@sign,w,c
 13109  00D572  A4D8               	btfss	status,2,c
 13110  00D574  D007               	goto	l4178
 13111  00D576                     l4174:
 13112  00D576  0E00               	movlw	0
 13113  00D578  6E19               	movwf	?___ftdiv,c
 13114  00D57A  0E00               	movlw	0
 13115  00D57C  6E1A               	movwf	?___ftdiv+1,c
 13116  00D57E  0E00               	movlw	0
 13117  00D580  6E1B               	movwf	?___ftdiv+2,c
 13118  00D582  D04D               	goto	l1032
 13119  00D584                     l4178:
 13120  00D584  0E00               	movlw	0
 13121  00D586  6E23               	movwf	___ftdiv@f3,c
 13122  00D588  0E00               	movlw	0
 13123  00D58A  6E24               	movwf	___ftdiv@f3+1,c
 13124  00D58C  0E00               	movlw	0
 13125  00D58E  6E25               	movwf	___ftdiv@f3+2,c
 13126  00D590  5027               	movf	___ftdiv@sign,w,c
 13127  00D592  0F89               	addlw	137
 13128  00D594  5E26               	subwf	___ftdiv@exp,f,c
 13129  00D596  C01B  F027         	movff	___ftdiv@f1+2,___ftdiv@sign
 13130  00D59A  501E               	movf	___ftdiv@f2+2,w,c
 13131  00D59C  1A27               	xorwf	___ftdiv@sign,f,c
 13132  00D59E  0E80               	movlw	128
 13133  00D5A0  1627               	andwf	___ftdiv@sign,f,c
 13134  00D5A2  8E1A               	bsf	___ftdiv@f1+1,7,c
 13135  00D5A4  0EFF               	movlw	255
 13136  00D5A6  1619               	andwf	___ftdiv@f1,f,c
 13137  00D5A8  0EFF               	movlw	255
 13138  00D5AA  161A               	andwf	___ftdiv@f1+1,f,c
 13139  00D5AC  0E00               	movlw	0
 13140  00D5AE  161B               	andwf	___ftdiv@f1+2,f,c
 13141  00D5B0  8E1D               	bsf	___ftdiv@f2+1,7,c
 13142  00D5B2  0EFF               	movlw	255
 13143  00D5B4  161C               	andwf	___ftdiv@f2,f,c
 13144  00D5B6  0EFF               	movlw	255
 13145  00D5B8  161D               	andwf	___ftdiv@f2+1,f,c
 13146  00D5BA  0E00               	movlw	0
 13147  00D5BC  161E               	andwf	___ftdiv@f2+2,f,c
 13148  00D5BE  0E18               	movlw	24
 13149  00D5C0  6E22               	movwf	___ftdiv@cntr,c
 13150  00D5C2  D000               	goto	l4198
 13151  00D5C4                     l4198:
 13152  00D5C4  90D8               	bcf	status,0,c
 13153  00D5C6  3623               	rlcf	___ftdiv@f3,f,c
 13154  00D5C8  3624               	rlcf	___ftdiv@f3+1,f,c
 13155  00D5CA  3625               	rlcf	___ftdiv@f3+2,f,c
 13156  00D5CC  501C               	movf	___ftdiv@f2,w,c
 13157  00D5CE  5C19               	subwf	___ftdiv@f1,w,c
 13158  00D5D0  501D               	movf	___ftdiv@f2+1,w,c
 13159  00D5D2  581A               	subwfb	___ftdiv@f1+1,w,c
 13160  00D5D4  501E               	movf	___ftdiv@f2+2,w,c
 13161  00D5D6  581B               	subwfb	___ftdiv@f1+2,w,c
 13162  00D5D8  A0D8               	btfss	status,0,c
 13163  00D5DA  D007               	goto	l1035
 13164  00D5DC  501C               	movf	___ftdiv@f2,w,c
 13165  00D5DE  5E19               	subwf	___ftdiv@f1,f,c
 13166  00D5E0  501D               	movf	___ftdiv@f2+1,w,c
 13167  00D5E2  5A1A               	subwfb	___ftdiv@f1+1,f,c
 13168  00D5E4  501E               	movf	___ftdiv@f2+2,w,c
 13169  00D5E6  5A1B               	subwfb	___ftdiv@f1+2,f,c
 13170  00D5E8  8023               	bsf	___ftdiv@f3,0,c
 13171  00D5EA                     l1035:
 13172  00D5EA  90D8               	bcf	status,0,c
 13173  00D5EC  3619               	rlcf	___ftdiv@f1,f,c
 13174  00D5EE  361A               	rlcf	___ftdiv@f1+1,f,c
 13175  00D5F0  361B               	rlcf	___ftdiv@f1+2,f,c
 13176  00D5F2  2E22               	decfsz	___ftdiv@cntr,f,c
 13177  00D5F4  D7E7               	goto	l4198
 13178  00D5F6  D000               	goto	l4208
 13179  00D5F8                     l4208:
 13180  00D5F8  C023  F001         	movff	___ftdiv@f3,___ftpack@arg
 13181  00D5FC  C024  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13182  00D600  C025  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13183  00D604  C026  F004         	movff	___ftdiv@exp,___ftpack@exp
 13184  00D608  C027  F005         	movff	___ftdiv@sign,___ftpack@sign
 13185  00D60C  EC01  F069         	call	___ftpack	;wreg free
 13186  00D610  C001  F019         	movff	?___ftpack,?___ftdiv
 13187  00D614  C002  F01A         	movff	?___ftpack+1,?___ftdiv+1
 13188  00D618  C003  F01B         	movff	?___ftpack+2,?___ftdiv+2
 13189  00D61C  D000               	goto	l1032
 13190  00D61E                     l1032:
 13191  00D61E  0012               	return		;funcret
 13192  00D620                     __end_of___ftdiv:
 13193                           	opt stack 0
 13194                           tblptru	equ	0xFF8
 13195                           tblptrh	equ	0xFF7
 13196                           tblptrl	equ	0xFF6
 13197                           tablat	equ	0xFF5
 13198                           prodh	equ	0xFF4
 13199                           prodl	equ	0xFF3
 13200                           intcon2	equ	0xFF1
 13201                           postinc0	equ	0xFEE
 13202                           wreg	equ	0xFE8
 13203                           postdec1	equ	0xFE5
 13204                           fsr1l	equ	0xFE1
 13205                           indf2	equ	0xFDF
 13206                           postinc2	equ	0xFDE
 13207                           postdec2	equ	0xFDD
 13208                           fsr2h	equ	0xFDA
 13209                           fsr2l	equ	0xFD9
 13210                           status	equ	0xFD8
 13211                           
 13212 ;; *************** function ___awtoft *****************
 13213 ;; Defined at:
 13214 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
 13215 ;; Parameters:    Size  Location     Type
 13216 ;;  c               2   20[COMRAM] int 
 13217 ;; Auto vars:     Size  Location     Type
 13218 ;;  sign            1   23[COMRAM] unsigned char 
 13219 ;; Return value:  Size  Location     Type
 13220 ;;                  3   20[COMRAM] float 
 13221 ;; Registers used:
 13222 ;;		wreg, status,2, status,0, cstack
 13223 ;; Tracked objects:
 13224 ;;		On entry : 0/0
 13225 ;;		On exit  : 0/0
 13226 ;;		Unchanged: 0/0
 13227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13228 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13231 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13232 ;;Total ram usage:        4 bytes
 13233 ;; Hardware stack levels used:    1
 13234 ;; Hardware stack levels required when called:    1
 13235 ;; This function calls:
 13236 ;;		___ftpack
 13237 ;; This function is called by:
 13238 ;;		_main
 13239 ;;		_update_LCD_misc
 13240 ;; This function uses a non-reentrant model
 13241 ;;
 13242                           
 13243                           	psect	text64
 13244  00C6E6                     __ptext64:
 13245                           	opt stack 0
 13246  00C6E6                     ___awtoft:
 13247                           	opt stack 29
 13248                           
 13249                           ;incstack = 0
 13250  00C6E6  0E00               	movlw	0
 13251  00C6E8  6E18               	movwf	___awtoft@sign,c
 13252  00C6EA  AE16               	btfss	___awtoft@c+1,7,c
 13253  00C6EC  D007               	goto	l4220
 13254  00C6EE  6C15               	negf	___awtoft@c,c
 13255  00C6F0  1E16               	comf	___awtoft@c+1,f,c
 13256  00C6F2  B0D8               	btfsc	status,0,c
 13257  00C6F4  2A16               	incf	___awtoft@c+1,f,c
 13258  00C6F6  0E01               	movlw	1
 13259  00C6F8  6E18               	movwf	___awtoft@sign,c
 13260  00C6FA  D000               	goto	l4220
 13261  00C6FC                     l4220:
 13262  00C6FC  C015  F001         	movff	___awtoft@c,___ftpack@arg
 13263  00C700  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 13264  00C704  6A03               	clrf	___ftpack@arg+2,c
 13265  00C706  0E8E               	movlw	142
 13266  00C708  6E04               	movwf	___ftpack@exp,c
 13267  00C70A  C018  F005         	movff	___awtoft@sign,___ftpack@sign
 13268  00C70E  EC01  F069         	call	___ftpack	;wreg free
 13269  00C712  C001  F015         	movff	?___ftpack,?___awtoft
 13270  00C716  C002  F016         	movff	?___ftpack+1,?___awtoft+1
 13271  00C71A  C003  F017         	movff	?___ftpack+2,?___awtoft+2
 13272  00C71E  D000               	goto	l853
 13273  00C720                     l853:
 13274  00C720  0012               	return		;funcret
 13275  00C722                     __end_of___awtoft:
 13276                           	opt stack 0
 13277                           tblptru	equ	0xFF8
 13278                           tblptrh	equ	0xFF7
 13279                           tblptrl	equ	0xFF6
 13280                           tablat	equ	0xFF5
 13281                           prodh	equ	0xFF4
 13282                           prodl	equ	0xFF3
 13283                           intcon2	equ	0xFF1
 13284                           postinc0	equ	0xFEE
 13285                           wreg	equ	0xFE8
 13286                           postdec1	equ	0xFE5
 13287                           fsr1l	equ	0xFE1
 13288                           indf2	equ	0xFDF
 13289                           postinc2	equ	0xFDE
 13290                           postdec2	equ	0xFDD
 13291                           fsr2h	equ	0xFDA
 13292                           fsr2l	equ	0xFD9
 13293                           status	equ	0xFD8
 13294                           
 13295 ;; *************** function ___ftpack *****************
 13296 ;; Defined at:
 13297 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;  arg             3    0[COMRAM] unsigned um
 13300 ;;  exp             1    3[COMRAM] unsigned char 
 13301 ;;  sign            1    4[COMRAM] unsigned char 
 13302 ;; Auto vars:     Size  Location     Type
 13303 ;;		None
 13304 ;; Return value:  Size  Location     Type
 13305 ;;                  3    0[COMRAM] float 
 13306 ;; Registers used:
 13307 ;;		wreg, status,2, status,0
 13308 ;; Tracked objects:
 13309 ;;		On entry : 0/0
 13310 ;;		On exit  : 0/0
 13311 ;;		Unchanged: 0/0
 13312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13313 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;Total ram usage:        8 bytes
 13318 ;; Hardware stack levels used:    1
 13319 ;; This function calls:
 13320 ;;		Nothing
 13321 ;; This function is called by:
 13322 ;;		___awtoft
 13323 ;;		___ftadd
 13324 ;;		___ftdiv
 13325 ;;		___ftmul
 13326 ;;		___lltoft
 13327 ;; This function uses a non-reentrant model
 13328 ;;
 13329                           
 13330                           	psect	text65
 13331  00D202                     __ptext65:
 13332                           	opt stack 0
 13333  00D202                     ___ftpack:
 13334                           	opt stack 29
 13335                           
 13336                           ;incstack = 0
 13337  00D202  5004               	movf	___ftpack@exp,w,c
 13338  00D204  B4D8               	btfsc	status,2,c
 13339  00D206  D005               	goto	l3316
 13340  00D208  5001               	movf	___ftpack@arg,w,c
 13341  00D20A  1002               	iorwf	___ftpack@arg+1,w,c
 13342  00D20C  1003               	iorwf	___ftpack@arg+2,w,c
 13343  00D20E  A4D8               	btfss	status,2,c
 13344  00D210  D00E               	goto	l3322
 13345  00D212                     l3316:
 13346  00D212  0E00               	movlw	0
 13347  00D214  6E01               	movwf	?___ftpack,c
 13348  00D216  0E00               	movlw	0
 13349  00D218  6E02               	movwf	?___ftpack+1,c
 13350  00D21A  0E00               	movlw	0
 13351  00D21C  6E03               	movwf	?___ftpack+2,c
 13352  00D21E  D053               	goto	l960
 13353  00D220  D006               	goto	l3322
 13354  00D222                     l3320:
 13355  00D222  2A04               	incf	___ftpack@exp,f,c
 13356  00D224  90D8               	bcf	status,0,c
 13357  00D226  3203               	rrcf	___ftpack@arg+2,f,c
 13358  00D228  3202               	rrcf	___ftpack@arg+1,f,c
 13359  00D22A  3201               	rrcf	___ftpack@arg,f,c
 13360  00D22C  D000               	goto	l3322
 13361  00D22E                     l3322:
 13362  00D22E  0E00               	movlw	0
 13363  00D230  1401               	andwf	___ftpack@arg,w,c
 13364  00D232  6E06               	movwf	??___ftpack& (0+255),c
 13365  00D234  0E00               	movlw	0
 13366  00D236  1402               	andwf	___ftpack@arg+1,w,c
 13367  00D238  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13368  00D23A  0EFE               	movlw	254
 13369  00D23C  1403               	andwf	___ftpack@arg+2,w,c
 13370  00D23E  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13371  00D240  5006               	movf	??___ftpack,w,c
 13372  00D242  1007               	iorwf	??___ftpack+1,w,c
 13373  00D244  1008               	iorwf	??___ftpack+2,w,c
 13374  00D246  B4D8               	btfsc	status,2,c
 13375  00D248  D00E               	goto	l3328
 13376  00D24A  D7EB               	goto	l3320
 13377  00D24C  D00C               	goto	l3328
 13378  00D24E                     l3324:
 13379  00D24E  2A04               	incf	___ftpack@exp,f,c
 13380  00D250  0E01               	movlw	1
 13381  00D252  2601               	addwf	___ftpack@arg,f,c
 13382  00D254  0E00               	movlw	0
 13383  00D256  2202               	addwfc	___ftpack@arg+1,f,c
 13384  00D258  0E00               	movlw	0
 13385  00D25A  2203               	addwfc	___ftpack@arg+2,f,c
 13386  00D25C  90D8               	bcf	status,0,c
 13387  00D25E  3203               	rrcf	___ftpack@arg+2,f,c
 13388  00D260  3202               	rrcf	___ftpack@arg+1,f,c
 13389  00D262  3201               	rrcf	___ftpack@arg,f,c
 13390  00D264  D000               	goto	l3328
 13391  00D266                     l3328:
 13392  00D266  0E00               	movlw	0
 13393  00D268  1401               	andwf	___ftpack@arg,w,c
 13394  00D26A  6E06               	movwf	??___ftpack& (0+255),c
 13395  00D26C  0E00               	movlw	0
 13396  00D26E  1402               	andwf	___ftpack@arg+1,w,c
 13397  00D270  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13398  00D272  0EFF               	movlw	255
 13399  00D274  1403               	andwf	___ftpack@arg+2,w,c
 13400  00D276  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13401  00D278  5006               	movf	??___ftpack,w,c
 13402  00D27A  1007               	iorwf	??___ftpack+1,w,c
 13403  00D27C  1008               	iorwf	??___ftpack+2,w,c
 13404  00D27E  B4D8               	btfsc	status,2,c
 13405  00D280  D008               	goto	l3332
 13406  00D282  D7E5               	goto	l3324
 13407  00D284  D006               	goto	l3332
 13408  00D286                     l3330:
 13409  00D286  0604               	decf	___ftpack@exp,f,c
 13410  00D288  90D8               	bcf	status,0,c
 13411  00D28A  3601               	rlcf	___ftpack@arg,f,c
 13412  00D28C  3602               	rlcf	___ftpack@arg+1,f,c
 13413  00D28E  3603               	rlcf	___ftpack@arg+2,f,c
 13414  00D290  D000               	goto	l3332
 13415  00D292                     l3332:
 13416  00D292  BE02               	btfsc	___ftpack@arg+1,7,c
 13417  00D294  D004               	goto	l971
 13418  00D296  0E02               	movlw	2
 13419  00D298  6004               	cpfslt	___ftpack@exp,c
 13420  00D29A  D7F5               	goto	l3330
 13421  00D29C  D000               	goto	l971
 13422  00D29E                     l971:
 13423  00D29E  B004               	btfsc	___ftpack@exp,0,c
 13424  00D2A0  D002               	goto	l3338
 13425  00D2A2  9E02               	bcf	___ftpack@arg+1,7,c
 13426  00D2A4  D000               	goto	l3338
 13427  00D2A6                     l3338:
 13428  00D2A6  90D8               	bcf	status,0,c
 13429  00D2A8  3204               	rrcf	___ftpack@exp,f,c
 13430  00D2AA  5004               	movf	___ftpack@exp,w,c
 13431  00D2AC  1203               	iorwf	___ftpack@arg+2,f,c
 13432  00D2AE  5005               	movf	___ftpack@sign,w,c
 13433  00D2B0  B4D8               	btfsc	status,2,c
 13434  00D2B2  D002               	goto	l3344
 13435  00D2B4  8E03               	bsf	___ftpack@arg+2,7,c
 13436  00D2B6  D000               	goto	l3344
 13437  00D2B8                     l3344:
 13438  00D2B8  C001  F001         	movff	___ftpack@arg,?___ftpack
 13439  00D2BC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 13440  00D2C0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 13441  00D2C4  D000               	goto	l960
 13442  00D2C6                     l960:
 13443  00D2C6  0012               	return		;funcret
 13444  00D2C8                     __end_of___ftpack:
 13445                           	opt stack 0
 13446                           tblptru	equ	0xFF8
 13447                           tblptrh	equ	0xFF7
 13448                           tblptrl	equ	0xFF6
 13449                           tablat	equ	0xFF5
 13450                           prodh	equ	0xFF4
 13451                           prodl	equ	0xFF3
 13452                           intcon2	equ	0xFF1
 13453                           postinc0	equ	0xFEE
 13454                           wreg	equ	0xFE8
 13455                           postdec1	equ	0xFE5
 13456                           fsr1l	equ	0xFE1
 13457                           indf2	equ	0xFDF
 13458                           postinc2	equ	0xFDE
 13459                           postdec2	equ	0xFDD
 13460                           fsr2h	equ	0xFDA
 13461                           fsr2l	equ	0xFD9
 13462                           status	equ	0xFD8
 13463                           
 13464 ;; *************** function _strcpy *****************
 13465 ;; Defined at:
 13466 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  to              2    0[COMRAM] PTR unsigned char 
 13469 ;;		 -> NULL(0), buffer(31), 
 13470 ;;  from            2    2[COMRAM] PTR const unsigned char 
 13471 ;;		 -> STR_16(21), STR_15(4), STR_14(4), STR_13(7), 
 13472 ;;		 -> STR_12(10), STR_11(7), STR_10(12), STR_9(2), 
 13473 ;;		 -> STR_8(4), STR_7(4), STR_6(6), STR_5(22), 
 13474 ;;		 -> STR_4(2), STR_3(2), STR_2(2), STR_1(2), 
 13475 ;; Auto vars:     Size  Location     Type
 13476 ;;  cp              2    4[COMRAM] PTR unsigned char 
 13477 ;;		 -> NULL(0), buffer(31), 
 13478 ;; Return value:  Size  Location     Type
 13479 ;;                  2    0[COMRAM] PTR unsigned char 
 13480 ;; Registers used:
 13481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13482 ;; Tracked objects:
 13483 ;;		On entry : 0/0
 13484 ;;		On exit  : 0/0
 13485 ;;		Unchanged: 0/0
 13486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13490 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13491 ;;Total ram usage:        6 bytes
 13492 ;; Hardware stack levels used:    1
 13493 ;; This function calls:
 13494 ;;		Nothing
 13495 ;; This function is called by:
 13496 ;;		_Wait_One_Second
 13497 ;;		_Wait_One_Second_With_Beep
 13498 ;;		_Initialize_Screen
 13499 ;; This function uses a non-reentrant model
 13500 ;;
 13501                           
 13502                           	psect	text66
 13503  00C6B4                     __ptext66:
 13504                           	opt stack 0
 13505  00C6B4                     _strcpy:
 13506                           	opt stack 27
 13507                           
 13508                           ;incstack = 0
 13509  00C6B4  C001  F005         	movff	strcpy@to,strcpy@cp
 13510  00C6B8  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
 13511  00C6BC  D005               	goto	l4292
 13512  00C6BE                     l4290:
 13513  00C6BE  4A05               	infsnz	strcpy@cp,f,c
 13514  00C6C0  2A06               	incf	strcpy@cp+1,f,c
 13515  00C6C2  4A03               	infsnz	strcpy@from,f,c
 13516  00C6C4  2A04               	incf	strcpy@from+1,f,c
 13517  00C6C6  D000               	goto	l4292
 13518  00C6C8                     l4292:
 13519  00C6C8  C003  FFF6         	movff	strcpy@from,tblptrl
 13520  00C6CC  C004  FFF7         	movff	strcpy@from+1,tblptrh
 13521  00C6D0                     	if	0	;tblptru may be non-zero
 13522  00C6D0                     	endif
 13523  00C6D0                     	if	0	;tblptru may be non-zero
 13524  00C6D0                     	endif
 13525  00C6D0  C005  FFD9         	movff	strcpy@cp,fsr2l
 13526  00C6D4  C006  FFDA         	movff	strcpy@cp+1,fsr2h
 13527  00C6D8  0008               	tblrd		*
 13528  00C6DA  CFF5 FFDF          	movff	tablat,indf2
 13529  00C6DE  50DF               	movf	indf2,w,c
 13530  00C6E0  A4D8               	btfss	status,2,c
 13531  00C6E2  D7ED               	goto	l4290
 13532                           
 13533                           ;	Return value of _strcpy is never used
 13534  00C6E4  0012               	return		;funcret
 13535  00C6E6                     __end_of_strcpy:
 13536                           	opt stack 0
 13537                           tblptru	equ	0xFF8
 13538                           tblptrh	equ	0xFF7
 13539                           tblptrl	equ	0xFF6
 13540                           tablat	equ	0xFF5
 13541                           prodh	equ	0xFF4
 13542                           prodl	equ	0xFF3
 13543                           intcon2	equ	0xFF1
 13544                           postinc0	equ	0xFEE
 13545                           wreg	equ	0xFE8
 13546                           postdec1	equ	0xFE5
 13547                           fsr1l	equ	0xFE1
 13548                           indf2	equ	0xFDF
 13549                           postinc2	equ	0xFDE
 13550                           postdec2	equ	0xFDD
 13551                           fsr2h	equ	0xFDA
 13552                           fsr2l	equ	0xFD9
 13553                           status	equ	0xFD8
 13554                           
 13555 ;; *************** function _Wait_Half_Second *****************
 13556 ;; Defined at:
 13557 ;;		line 252 in file "Lab7.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;		None
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;		None
 13562 ;; Return value:  Size  Location     Type
 13563 ;;		None               void
 13564 ;; Registers used:
 13565 ;;		wreg, status,2
 13566 ;; Tracked objects:
 13567 ;;		On entry : 0/0
 13568 ;;		On exit  : 0/0
 13569 ;;		Unchanged: 0/0
 13570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13575 ;;Total ram usage:        0 bytes
 13576 ;; Hardware stack levels used:    1
 13577 ;; This function calls:
 13578 ;;		Nothing
 13579 ;; This function is called by:
 13580 ;;		_Wait_One_Second
 13581 ;;		_Wait_One_Second_With_Beep
 13582 ;; This function uses a non-reentrant model
 13583 ;;
 13584                           
 13585                           	psect	text67
 13586  00C556                     __ptext67:
 13587                           	opt stack 0
 13588  00C556                     _Wait_Half_Second:
 13589                           	opt stack 27
 13590                           
 13591                           ;Lab7.c: 254: T0CON = 0x03;
 13592                           
 13593                           ;incstack = 0
 13594  00C556  0E03               	movlw	3
 13595  00C558  6ED5               	movwf	4053,c	;volatile
 13596                           
 13597                           ;Lab7.c: 255: TMR0L = 0xDB;
 13598  00C55A  0EDB               	movlw	219
 13599  00C55C  6ED6               	movwf	4054,c	;volatile
 13600                           
 13601                           ;Lab7.c: 256: TMR0H = 0x0B;
 13602  00C55E  0E0B               	movlw	11
 13603  00C560  6ED7               	movwf	4055,c	;volatile
 13604                           
 13605                           ;Lab7.c: 257: INTCONbits.TMR0IF = 0;
 13606  00C562  94F2               	bcf	intcon,2,c	;volatile
 13607                           
 13608                           ;Lab7.c: 258: T0CONbits.TMR0ON = 1;
 13609  00C564  8ED5               	bsf	4053,7,c	;volatile
 13610                           
 13611                           ;Lab7.c: 259: while (INTCONbits.TMR0IF == 0);
 13612  00C566  D000               	goto	l405
 13613  00C568                     l405:
 13614  00C568  A4F2               	btfss	intcon,2,c	;volatile
 13615  00C56A  D7FE               	goto	l405
 13616                           
 13617                           ;Lab7.c: 260: T0CONbits.TMR0ON = 0;
 13618  00C56C  9ED5               	bcf	4053,7,c	;volatile
 13619  00C56E  0012               	return		;funcret
 13620  00C570                     __end_of_Wait_Half_Second:
 13621                           	opt stack 0
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon2	equ	0xFF1
 13630                           postinc0	equ	0xFEE
 13631                           wreg	equ	0xFE8
 13632                           postdec1	equ	0xFE5
 13633                           fsr1l	equ	0xFE1
 13634                           indf2	equ	0xFDF
 13635                           postinc2	equ	0xFDE
 13636                           postdec2	equ	0xFDD
 13637                           fsr2h	equ	0xFDA
 13638                           fsr2l	equ	0xFD9
 13639                           status	equ	0xFD8
 13640                           
 13641 ;; *************** function _Deactivate_Buzzer *****************
 13642 ;; Defined at:
 13643 ;;		line 322 in file "Lab7.c"
 13644 ;; Parameters:    Size  Location     Type
 13645 ;;		None
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;		None
 13648 ;; Return value:  Size  Location     Type
 13649 ;;		None               void
 13650 ;; Registers used:
 13651 ;;		wreg, status,2
 13652 ;; Tracked objects:
 13653 ;;		On entry : 0/0
 13654 ;;		On exit  : 0/0
 13655 ;;		Unchanged: 0/0
 13656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;Total ram usage:        0 bytes
 13662 ;; Hardware stack levels used:    1
 13663 ;; This function calls:
 13664 ;;		Nothing
 13665 ;; This function is called by:
 13666 ;;		_Wait_One_Second_With_Beep
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670                           	psect	text68
 13671  00C4A8                     __ptext68:
 13672                           	opt stack 0
 13673  00C4A8                     _Deactivate_Buzzer:
 13674                           	opt stack 27
 13675                           
 13676                           ;Lab7.c: 323: CCP2CON = 0x0;
 13677                           
 13678                           ;incstack = 0
 13679  00C4A8  0E00               	movlw	0
 13680  00C4AA  6EBA               	movwf	4026,c	;volatile
 13681                           
 13682                           ;Lab7.c: 324: PORTBbits.RB3 = 0;
 13683  00C4AC  9681               	bcf	3969,3,c	;volatile
 13684  00C4AE  0012               	return		;funcret
 13685  00C4B0                     __end_of_Deactivate_Buzzer:
 13686                           	opt stack 0
 13687                           tblptru	equ	0xFF8
 13688                           tblptrh	equ	0xFF7
 13689                           tblptrl	equ	0xFF6
 13690                           tablat	equ	0xFF5
 13691                           prodh	equ	0xFF4
 13692                           prodl	equ	0xFF3
 13693                           intcon	equ	0xFF2
 13694                           intcon2	equ	0xFF1
 13695                           postinc0	equ	0xFEE
 13696                           wreg	equ	0xFE8
 13697                           postdec1	equ	0xFE5
 13698                           fsr1l	equ	0xFE1
 13699                           indf2	equ	0xFDF
 13700                           postinc2	equ	0xFDE
 13701                           postdec2	equ	0xFDD
 13702                           fsr2h	equ	0xFDA
 13703                           fsr2l	equ	0xFD9
 13704                           status	equ	0xFD8
 13705                           
 13706 ;; *************** function _Activate_Buzzer *****************
 13707 ;; Defined at:
 13708 ;;		line 316 in file "Lab7.c"
 13709 ;; Parameters:    Size  Location     Type
 13710 ;;		None
 13711 ;; Auto vars:     Size  Location     Type
 13712 ;;		None
 13713 ;; Return value:  Size  Location     Type
 13714 ;;		None               void
 13715 ;; Registers used:
 13716 ;;		wreg, status,2
 13717 ;; Tracked objects:
 13718 ;;		On entry : 0/0
 13719 ;;		On exit  : 0/0
 13720 ;;		Unchanged: 0/0
 13721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13726 ;;Total ram usage:        0 bytes
 13727 ;; Hardware stack levels used:    1
 13728 ;; This function calls:
 13729 ;;		Nothing
 13730 ;; This function is called by:
 13731 ;;		_Wait_One_Second_With_Beep
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           	psect	text69
 13736  00C4F4                     __ptext69:
 13737                           	opt stack 0
 13738  00C4F4                     _Activate_Buzzer:
 13739                           	opt stack 27
 13740                           
 13741                           ;Lab7.c: 317: PR2 = 0b11111001 ;
 13742                           
 13743                           ;incstack = 0
 13744  00C4F4  0EF9               	movlw	249
 13745  00C4F6  6ECB               	movwf	4043,c	;volatile
 13746                           
 13747                           ;Lab7.c: 318: T2CON = 0b00000101 ;
 13748  00C4F8  0E05               	movlw	5
 13749  00C4FA  6ECA               	movwf	4042,c	;volatile
 13750                           
 13751                           ;Lab7.c: 319: CCPR2L = 0b01001010 ;
 13752  00C4FC  0E4A               	movlw	74
 13753  00C4FE  6EBB               	movwf	4027,c	;volatile
 13754                           
 13755                           ;Lab7.c: 320: CCP2CON = 0b00111100 ;
 13756  00C500  0E3C               	movlw	60
 13757  00C502  6EBA               	movwf	4026,c	;volatile
 13758  00C504  0012               	return		;funcret
 13759  00C506                     __end_of_Activate_Buzzer:
 13760                           	opt stack 0
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           intcon2	equ	0xFF1
 13769                           postinc0	equ	0xFEE
 13770                           wreg	equ	0xFE8
 13771                           postdec1	equ	0xFE5
 13772                           fsr1l	equ	0xFE1
 13773                           indf2	equ	0xFDF
 13774                           postinc2	equ	0xFDE
 13775                           postdec2	equ	0xFDD
 13776                           fsr2h	equ	0xFDA
 13777                           fsr2l	equ	0xFD9
 13778                           status	equ	0xFD8
 13779                           tblptru	equ	0xFF8
 13780                           tblptrh	equ	0xFF7
 13781                           tblptrl	equ	0xFF6
 13782                           tablat	equ	0xFF5
 13783                           prodh	equ	0xFF4
 13784                           prodl	equ	0xFF3
 13785                           intcon	equ	0xFF2
 13786                           intcon2	equ	0xFF1
 13787                           postinc0	equ	0xFEE
 13788                           wreg	equ	0xFE8
 13789                           postdec1	equ	0xFE5
 13790                           fsr1l	equ	0xFE1
 13791                           indf2	equ	0xFDF
 13792                           postinc2	equ	0xFDE
 13793                           postdec2	equ	0xFDD
 13794                           fsr2h	equ	0xFDA
 13795                           fsr2l	equ	0xFD9
 13796                           status	equ	0xFD8
 13797                           
 13798                           	psect	rparam
 13799  0000                     tblptru	equ	0xFF8
 13800                           tblptrh	equ	0xFF7
 13801                           tblptrl	equ	0xFF6
 13802                           tablat	equ	0xFF5
 13803                           prodh	equ	0xFF4
 13804                           prodl	equ	0xFF3
 13805                           intcon	equ	0xFF2
 13806                           intcon2	equ	0xFF1
 13807                           postinc0	equ	0xFEE
 13808                           wreg	equ	0xFE8
 13809                           postdec1	equ	0xFE5
 13810                           fsr1l	equ	0xFE1
 13811                           indf2	equ	0xFDF
 13812                           postinc2	equ	0xFDE
 13813                           postdec2	equ	0xFDD
 13814                           fsr2h	equ	0xFDA
 13815                           fsr2l	equ	0xFD9
 13816                           status	equ	0xFD8


Data Sizes:
    Strings     121
    Constant    593
    Data        45
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    116     127
    BANK0           128      0      88
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_EWLT_Txt(BANK0[2]), SW_EWPED_Txt(BANK0[2]), 
		 -> SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingR_Txt(BANK0[2]), buffer(BANK0[31]), Act_Mode_Txt(BANK0[2]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_EWLT_Txt(BANK0[2]), SW_EWPED_Txt(BANK0[2]), 
		 -> SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingR_Txt(BANK0[2]), buffer(BANK0[31]), Act_Mode_Txt(BANK0[2]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_16(CODE[21]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[7]), 
		 -> STR_12(CODE[10]), STR_11(CODE[7]), STR_10(CODE[12]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[6]), STR_5(CODE[22]), 
		 -> STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), STR_1(CODE[2]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_17(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), SW_MODE_Txt(BANK0[2]), SW_EWLT_Txt(BANK0[2]), SW_EWPED_Txt(BANK0[2]), 
		 -> SW_NSLT_Txt(BANK0[2]), SW_NSPED_Txt(BANK0[2]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(BANK0[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingR_Txt(BANK0[2]), buffer(BANK0[31]), Act_Mode_Txt(BANK0[2]), 


Critical Paths under _main in COMRAM

    _init_UART->_OpenUSART
    _Night_Mode->_Wait_N_Seconds
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___awtoft
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite
    ___wmul->___awdiv
    ___ftdiv->___awtoft
    ___awtoft->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0  579839
                                            106 COMRAM    10    10      0
                           _Day_Mode
                           _Init_ADC
                          _Init_Tris
                  _Initialize_Screen
                         _Night_Mode
                 _Select_ADC_Channel
                           ___awtoft
                            ___ftmul
                            ___fttol
                       _get_full_ADC
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Select_ADC_Channel                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  197498
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   58940
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    1660
                                             19 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    1585
                                              7 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    5386
                                             18 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1488
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    6582
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    3201
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0      90
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    3201
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    3111
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    3111
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_Tris                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  316849
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0  119258
                                            103 COMRAM     2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   25951
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   93217
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   19560
                                             53 COMRAM     1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   19516
                                             50 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8    9639
                                             42 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    3607
                                             18 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8    9026
                                             11 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          3     2      1  119351
                                            103 COMRAM     3     2      1
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   25916
                                             57 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   93217
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
                           _drawtext
                             _strcpy
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      2     2      0   69681
                                            101 COMRAM     2     2      0
                           ___awtoft
                            ___ftdiv
                             ___ftge
                             ___wmul
                           _drawtext
                       _get_full_ADC
                             _printf
 ---------------------------------------------------------------------------------
 (5) _printf                                              42    37      5   40876
                                             67 COMRAM    34    29      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (6) _scale                                               10     7      3   10392
                                             39 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _fround                                              13    10      3   10194
                                             39 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    3742
                                             24 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1886
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1996
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (6) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    1868
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     464
                                             46 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    3131
                                             61 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    2878
                                             49 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftge                                               9     3      6     560
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _get_full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   21765
                                             40 COMRAM    17     9      8
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     143
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7    9998
                                             29 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3044
                                             18 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    2442
                                              7 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    3367
                                              7 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3     814
                                              3 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      45
                                              2 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2279
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    2212
                                             24 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1943
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1771
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_PED_Count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Init_ADC
   _Init_Tris
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Wait_Half_Second
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
         _update_LCD_misc
           ___awtoft
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftge
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _drawtext
             _drawChar
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
           _printf
             ___awdiv
               ___awmod (ARG)
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftge
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
                 _fround (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___ftmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                       ___wmul (ARG)
                         ___awdiv (ARG)
                           ___awmod (ARG)
                         ___awmod (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               _scale (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lldiv
             ___llmod
             ___lltoft
               ___ftpack
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             __div_to_l_
             __tdiv_to_l_
             _fround
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _putch
             _scale
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _update_LCD_count
         ___awdiv
           ___awmod (ARG)
         ___awmod
         _drawtext
           _drawChar
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Select_ADC_Channel
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _get_full_ADC
   _init_UART
     _OpenUSART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      58       5       68.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     74      7F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D7      34        0.0%
DATA                 0      0      D7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Mar 24 17:09:30 2022

                       drawCircle@f 001A                         drawCircle@r 0010  
                       drawCircle@x 001C                         drawCircle@y 001E  
         _Wait_One_Second_With_Beep CE66                         _SSPSTATbits 000FC7  
                      drawCircle@x0 000C                        drawCircle@y0 000E  
                      ___awdiv@sign 000C                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 0035                        ___ftadd@exp1 003D  
                      ___ftadd@exp2 003C                        ___ftadd@sign 003B  
                               l301 D518                                 l302 D53A  
                               l420 C904                                 l405 C568  
                               l245 CDDC                                 l261 DF88  
                               l309 E1DA                                 l421 C908  
                               l270 DEDE                                 l422 C92A  
                               l430 C94C                                 l239 C6B2  
                               l263 DE62                                 l503 D392  
                               l327 DD6A                                 l431 C96E  
                               l343 CE64                                 l440 C8A2  
                               l417 C8FA                                 l185 CAA4  
                               l370 C4CA                                 l426 C93E  
                               l195 C526                                 l435 C872  
                               l419 C8FE                                 l363 D142  
                               l444 C8B6                                 l428 C942  
                               l437 C876                                 l429 C948  
                               l438 C87C                                 l446 C8BA  
                               l470 D200                                 l630 CC36  
                               l391 C5D4                                 l543 EFEE  
                               l439 C880                                 l447 C8C0  
                               l623 CC0E                                 l536 E8AC  
                               l448 C8C4                                 l632 CC50  
                               l449 C8E6                                 l473 D3CC  
                               l298 D53C                                 l635 C5FC  
                               l299 D4A8                                 l627 CC28  
                               l388 C5B4                                 l484 EC0E  
                               l628 CC2A                                 l629 CC34  
                               l496 E116                                 l841 CCD2  
                               l828 D0A6                                 l588 F470  
                               l853 C720                                 l919 DADA  
                               l599 F614                                 l960 D2C6  
                               l928 DACA                                 l971 D29E  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 003B  
                               _PR2 000FCB                   _Deactivate_Buzzer C4A8  
                               _dir 00B8                                 _nbr 00B2  
                               _txt 0075                      drawFastHLine@w 0009  
                    drawFastHLine@x 0012                      drawFastHLine@y 0008  
                      ___awmod@sign 0006             __end_of_update_LCD_misc E66A  
                               wreg 000FE8                  ??_Wait_Half_Second 0001  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 000D  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize C5FE  
              PED_Control@Direction 0069                        ___ftdiv@cntr 0022  
                      ___ftdiv@sign 0027                        __CFG_WDT$OFF 000000  
                              l1000 E30A                                l1001 E488  
                              l1004 E334                                l1015 E3F6  
                              l1032 D61E                                l1024 E412  
                              l1040 DBEA                                l1042 DB52  
                              l1035 D5EA                                l1043 DB7A  
                              l1124 CF6A                      drawFastVLine@h 0009  
                              l1230 C79A                                l1134 CBD0  
                              l1064 D9D0                                l1081 C85E  
                              l1049 DBDA                                l1058 D010  
                              l1074 C5A2                                l1154 CB0A  
                              l1085 D7E6                                l4000 DDCC  
                              l4100 F348                                l4020 F00A  
                              l4004 DE1E                      drawFastVLine@x 0012  
                    drawFastVLine@y 0008                                l3310 CDD2  
                              l4110 F388                                l4102 F34C  
                              l4022 F016                                l3320 D222  
                              l4016 EFFA                                l3330 D286  
                              l3322 D22E                                l3410 E3A6  
                              l3402 E376                                l4130 F44C  
                              l4114 F38C                                l4106 F358  
                              l4042 F092                                l4026 F01E  
                              l3332 D292                                l3324 D24E  
                              l3316 D212                                l4220 C6FC  
                              l3308 CDC4                                l3420 E3DE  
                              l3412 E3B2                                l4132 F45A  
                              l4124 F432                                l4028 F040  
                              l3422 E3EA                                l3414 E3BA  
                              l3510 D050                                l4142 F490  
                              l4126 F43E                                l4118 F3A8  
                              l4070 F1AE                                l3344 D2B8  
                              l3328 D266                                l4208 D5F8  
                              l3352 C694                                l3360 C97A  
                              l3408 E39A                                l3512 D05A  
                              l3504 D03A                                l4152 F5B6  
                              l4136 F476                                l4072 F1BE  
                              l4160 F5DC                                l4320 E548  
                              l3338 D2A6                                l3530 D09C  
                              l3522 D080                                l3514 D062  
                              l3450 D912                                l4154 F5C2  
                              l4146 F4E0                                l4082 F236  
                              l4074 F1EE                                l4066 F188  
                              l4058 F124                                l5202 D0C0  
                              l4172 D55C                                l3364 C996  
                              l3612 DF54                                l3604 DF00  
                              l3620 DF84                                l3428 E430  
                              l3380 E318                                l4092 F2A6  
                              l4076 F1FE                                l4164 F5F8  
                              l4332 E578                                l4324 E558  
                              l4174 D576                                l3294 CD66  
                              l3614 DF7C                                l3606 DF28  
                              l3438 E462                                l3710 DB18  
                              l3526 D08C                                l3550 CC84  
                              l3542 CC68                                l3454 D920  
                              l4158 F5D0                                l4094 F2D4  
                              l4086 F25A                                l5214 D13A  
                              l3392 E34E                                l3800 DA8C  
                              l3704 DAFA                                l3552 CC8E  
                              l3472 D966                                l3448 D8F8  
                              l4088 F264                                l4096 F2E2  
                              l4336 E588                                l4328 E568  
                              l4256 E1C0                                l4290 C6BE  
                              l4178 D584                                l3298 CD9E  
                              l3626 C768                                l3386 E342  
                              l3810 DAB6                                l3554 CC96  
                              l3562 CCB8                                l3546 CC76  
                              l3482 D994                                l4338 E590  
                              l4506 CE4C                                l4292 C6C8  
                              l3628 C76E                                l3900 CF28  
                              l3812 DAC4                                l3804 DA9C  
                              l3740 DB9C                                l3732 DB88  
                              l3476 D97C                                l3468 D954  
                              l4284 E2B0                                l4540 E0A0  
                              l4532 DFEA                                l4508 CE5A  
                              l4452 D472                                l4198 D5C4  
                              l3582 DE5E                                l3574 DE44  
                              l3830 CFE0                                l3806 DAA2  
                              l3750 DBC6                                l3566 CCC8  
                              l3558 CCAC                                l3486 D9AA  
                              l3478 D982                                l3670 ED3C  
                              l4710 C886                                l4702 C952  
                              l4470 D50E                                l4630 CBF4  
                              l3592 DE9E                                l3584 DE66  
                              l3920 CB9A                                l3760 D9E2  
                              l3752 DBD4                                l3744 DBAC  
                              l3656 E86C                                l3648 E7A8  
                              l3680 EDF4                                l4536 E046  
                              l4528 DF8E                                l3594 DED2  
                              l3578 DE50                                l3826 CFAE  
                              l3818 C834                                l3850 D720  
                              l3930 CAB2                                l3746 DBB2  
                              l3498 D028                                l4722 C728  
                              l4562 EB38                                l4554 E98E  
                              l4546 E0FA                                l4474 D51C  
                              l4458 D4E0                                l4650 CC20  
                              l4642 CC12                                l4634 CBFE  
                              l3596 DED6                                l3588 DE6E  
                              l3836 D00C                                l3908 CF5A  
                              l3924 CBC0                                l3916 CB84  
                              l3932 CAC0                                l3780 DA36  
                              l3676 EDE4                                l4732 C744  
                              l4492 CDEE                                l4484 D536  
                              l3918 CB92                                l3766 D9F2  
                              l3694 EFCA                                l4590 D326  
                              l4726 C732                                l4558 EA62  
                              l4718 C8CA                                l4478 D526  
                              l4638 CC06                                l3880 D7B2  
                              l3872 D78A                                l3792 DA78  
                              l3688 EF18                                l4680 C666  
                              l4496 CE26                                l3970 D6EE  
                              l3962 D6AA                                l3946 D648  
                              l3874 D790                                l3882 D7BC  
                              l4586 D2CC                                l4906 D45A  
                              l3972 D6F4                                l3868 D77A  
                              l3788 DA68                                l4596 D382  
                              l4676 C65C                                l3958 D690  
                              l3886 D7D4                                l3878 D7A4  
                              l4694 C90E                                l4686 C678  
                              l3896 CF12                                l3984 DD50  
                              l3898 CF20                                l4890 D41E  
                              l4946 D1D4                                l4938 D1B4  
                              l4884 D408                                l4956 D1F8  
                              STR_1 FFFD                                STR_2 FFFB  
                              STR_3 FFFD                                STR_4 FFFB  
                              STR_5 FF86                                STR_6 FFE5  
                              STR_7 FFEB                                STR_8 FFEF  
                              STR_9 FFFD                                u3011 DB0A  
                              u2240 CD94                                u4000 CE1C  
                              u3201 D712                                u3220 D73E  
                              u3225 D736                                u2601 D908  
                              u2371 E2D6                                u3500 F0CA  
                              u2381 E2EA                                u3360 D674  
                              u3505 F0C0                        printf@tmpval 005E  
                              u2581 D8EA                                u3721 D54E  
                              u2860 DF36                                u3660 F46A  
                              u3741 D56C                                u3830 E502  
                              u3840 E504                                u3920 D4A0  
                              _MODE 00B0                                u3930 D4D6  
                              u2991 DAEC                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 0001  
                              _main D0A8                                _font FD35  
                      ___ftpack@arg 0001                        main@Pvoltage 006E  
                      ___ftpack@exp 0004                      ??_get_full_ADC 0003  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 008C                                _volt 00AD  
                   drawFastHLine@hi 0010                     drawFastHLine@lo 0011  
          __end_of_update_LCD_color EC10            __end_of_update_LCD_count E118  
                __size_of_LCD_Reset 0012                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                   ??_drawFastHLine 000C                     ??_drawFastVLine 000C  
                      ___ftmul@cntr 0026                        ___param_bank 000010  
                      ___ftmul@sign 0027                        ___fttol@exp1 003D  
                      ___fttol@lval 0039                        _Act_Mode_Txt 009F  
         __end_of_Deactivate_Buzzer C4B0                     drawFastVLine@hi 0010  
                   drawFastVLine@lo 0011                         _SW_EWLT_Txt 00A3  
                       _SW_MODE_Txt 00A7                               ?_main 0001  
                   __end_of___awdiv D0A8                     __end_of___ftadd E48A  
                   drawCircle@ddF_x 0016                               STR_10 FFC1  
                   drawCircle@ddF_y 0018                               STR_11 FFD7  
                             STR_12 FFCD                               STR_13 FFDE  
                             STR_14 FFF3                               STR_15 FFF7  
                             STR_16 FF9C                               STR_17 FFB1  
                   __end_of___awmod CCD4                     __end_of___ftdiv D620  
                   __end_of___ftneg C5B0                     __end_of___lldiv CF7C  
                   __end_of___ftmul D9D2                               _T0CON 000FD5  
                   ___awdiv@divisor 0009                     __end_of___llmod CBE2  
                   __end_of___ftsub C860                     __end_of___fttol D7E8  
                             _T2CON 000FCA                               _T3CON 000FB1  
                   ___awdiv@counter 000B                     drawCircle@color 0012  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _PORTC 000F82                               _PORTD 000F83  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 00B4  
                      ?_PED_Control 0068                               _Rcmd1 DBEC  
                             _Rcmd3 D7E8                        ___lltoft@exp 0011  
                       _SW_NSLT_Txt 00A9                       drawRect@color 001B  
                     ___awtoft@sign 0018                     __end_of_dpowers FF38  
                             _array 0080                               _font2 FE34  
             fillCircleHelper@ddF_x 0021               fillCircleHelper@ddF_y 0023  
                 ??_Wait_One_Second 0068                               _scale EC10  
                     ___ftpack@sign 0005               fillCircleHelper@delta 001B  
                             _putch C4C6               fillCircleHelper@color 001D  
                      main@num_step 0071                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 003B                    __end_of_Day_Mode D462  
                    _Wait_N_Seconds C656                     write_data@data_ 0003  
                   __initialization C7DA                        __end_of_main D14E  
                      __end_of_font FE34                    __end_of_Init_ADC C4BA  
                  __end_of_Rcmd2red C7DA                          _Night_Mode D14E  
                  __end_of_Set_EWLT C8E8                    __end_of_Set_NSLT C970  
                            ??_main 006B                       ___fttol@sign1 0038  
                     __activetblptr 000002               Wait_N_Seconds@seconds 0068  
                 __end_of_LCD_Reset C518                        _SW_EWPED_Txt 00A5  
              __size_of__tdiv_to_l_ 0110           ??_TFT_GreenTab_Initialize 001B  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                  ___llmod@dividend 0001                              ?_scale 0028  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                    ___awdiv@dividend 0007  
                  __end_of___awtoft C722                              ?_putch 0001  
                  __end_of___ftpack D2C8                    __end_of___lltoft CB0C  
                            _OSCCON 000FD3                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds C684  
                __size_of_Init_Tris 0016                        _SW_NSPED_Txt 00AB  
                  __end_of_delay_ms CAAC                              _Set_EW C860  
                            _Set_NS C8E8                    __end_of_fillRect C9BA  
                  __end_of_drawChar DF8A                    __end_of__powers_ FF86  
                  __end_of_drawRect CB72                  __size_of_OpenUSART 0070  
                            ___ftge CF7C            __size_of_Activate_Buzzer 0012  
                            ___wmul C5D6                           ??___awdiv 000B  
         __size_of_fillCircleHelper 0138                    __end_of_drawtext D702  
                         ??___ftadd 0038                           ??___awmod 0005  
                         ??___ftdiv 001F                           ??___ftneg 0004  
                         ??___lldiv 0009                           ??___ftmul 001F  
                         ??___llmod 0009                           ??___ftsub 0044  
                         ??___fttol 0033                              _buffer 00B9  
                            _fround E66A                              clear_0 C7E0  
                            clear_1 C7EC                    ___awdiv@quotient 000D  
                   ___awmod@divisor 0003          __size_of_Deactivate_Buzzer 0008  
                   ___awmod@counter 0005                              _printf EFF0  
                      drawtext@size 0030                              _strcpy C6B4  
                            _strlen C75E               ___ftmul@f3_as_product 0023  
              __end_of_get_full_ADC C5D6  __size_of_Wait_One_Second_With_Beep 008A  
                       Set_EW@color 0036                        __mediumconst FD34  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                              putch@c 0001  
                  __end_of_spiwrite C52C                         Set_NS@color 0036  
                        __accesstop 0080             __end_of__initialization C812  
                        ___ftadd@f1 0032                          ___ftadd@f2 0035  
                        ___ftge@ff1 0001                          ___ftge@ff2 0004  
                   ?_Wait_N_Seconds 0001                       ___rparam_used 000001  
                        ___ftdiv@f1 0019                          ___ftdiv@f2 001C  
                        ___ftdiv@f3 0023                          ___ftneg@f1 0001  
                        ___awtoft@c 0015                          ___ftmul@f1 0019  
                        ___ftmul@f2 001C                          ___ftsub@f1 003E  
                        ___ftsub@f2 0041                          ___fttol@f1 002F  
                     __end_of_Rcmd1 DCFC                       __end_of_Rcmd3 D8DA  
                    __pcstackCOMRAM 0001                        __pidataBANK0 C629  
                        ___lltoft@c 0009                       __end_of_font2 FF10  
                     __end_of_scale EFF0                       __end_of_putch C4D4  
                       ?_Night_Mode 0001                      drawPixel@color 0009  
                 __end_of_Init_Tris C556              __size_of_write_command 0010  
                        __div_to_l_ D9D2                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0019                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_OpenUSART CC52                    main@finalVoltage 0073  
                   __div_to_l_@exp1 000C                     __div_to_l_@cntr 000B  
                           ??_scale 002B                __size_of_PED_Control 003C  
                   __div_to_l_@quot 0007                             ??_putch 0001  
                        __pbssBANK0 00AD                           ?_Init_ADC 0001  
                         ?_Rcmd2red 0001                  __size_of_init_UART 0014  
        __end_of_Select_ADC_Channel C4C6           __size_of_Wait_Half_Second 001A  
                   spiwrite@spidata 0002                           ?_Set_EWLT 0001  
                     __div_to_l_@f1 0001                       __div_to_l_@f2 0004  
                         ?_Set_NSLT 0001                   ?_update_LCD_color 0033  
                 ?_update_LCD_count 003A                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  __CFG_CCP2MX$PORTBE 000000  
                ??_update_LCD_color 0034                  ??_update_LCD_count 003B  
                           ?___ftge 0001                             ?___wmul 000F  
            __size_of_setAddrWindow 004E                             _CCP2CON 000FBA  
         update_LCD_PED_Count@count 003A                             ?_fround 0028  
                         ?___awtoft 0015                           ?___ftpack 0001  
                   _Wait_One_Second CCD4                          _fillCircle CA08  
                           ?_printf 0044           Select_ADC_Channel@channel 0001  
                         ?___lltoft 0009                             ?_strcpy 0001  
                           ?_strlen 0001                   ??_Activate_Buzzer 0001  
                        _fillScreen C570                          _drawCircle E118  
                        ??_Day_Mode 006B                           ?_delay_ms 0015  
                         ?_fillRect 0013           update_LCD_count@direction 003B  
                         ?_drawChar 001E                             _SSPCON1 000FC6  
                         ?_drawRect 0013                             _SSPSTAT 000FC7  
             __end_of_fillRectangle D53E                           ?_drawtext 0029  
                           _SW_EWLT 0077                             _SW_MODE 0079  
                        ??_Init_ADC 0001                             _SW_NSLT 007A  
                        ??_Rcmd2red 0004                 __size_of_Night_Mode 00B4  
                     _write_command C4D4                          ??_Set_EWLT 0036  
                        ??_Set_NSLT 0036                   __end_of__npowers_ FF5F  
                           __Hparam 0000                          _scale$2381 002B  
                           __Lparam 0000                     __size_of_Set_EW 0044  
                   __size_of_Set_NS 0044               __end_of_drawFastHLine CE66  
                 __end_of_drawPixel C6B4               __end_of_drawFastVLine CDDE  
                  _fillCircleHelper DCFC                     __size_of___ftge 0096  
                           ___awdiv D012                             ___ftadd E2C6  
                           ___awmod CC52                             ___ftdiv D53E  
                           ___ftneg C58C                             ___lldiv CEF0  
                   __size_of___wmul 0028                             ___ftmul D8DA  
                           ___llmod CB72                             ___ftsub C81C  
                           ___fttol D702               __size_of_get_full_ADC 0026  
                         ?_spiwrite 0001                             __pcinit C7DA  
                        ??___awtoft 0018                          ??___ftpack 0006  
                   __size_of_fround 0244                             __ramtop 1000  
                        ??___lltoft 000D                             __ptext0 D0A8  
                           __ptext1 C52C                             __ptext2 CBE2  
                           __ptext3 C4BA                             __ptext4 D14E  
                           __ptext5 F616                             __ptext6 C570  
                           __ptext7 D462                             __ptext8 CB0C  
                           __ptext9 CDDE                     __size_of_printf 0626  
                 __end_of_init_UART C540                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                       ?__div_to_l_ 0001                             _dpowers FF10  
                         _T3CONbits 000FB1                    ___awmod@dividend 0001  
                        ??_delay_ms 0017                       drawtext@_text 002A  
                     drawtext@color 002C                          ??_fillRect 0018  
                        ??_drawChar 0025                           _LCD_Reset C506  
                        ??_drawRect 001D                       _setAddrWindow C9BA  
                drawFastHLine@color 000A                          delay_ms@ms 0015  
              end_of_initialization C812                          ??_drawtext 0031  
                    ?_write_command 0001                       __Lmediumconst FD34  
                         _PED_Count 00B7                        _get_full_ADC C5B0  
                   ___lldiv@divisor 0005                        PED_Control@i 006A  
     __size_of_update_LCD_PED_Count 00CC                     ___lldiv@counter 000D  
           __end_of_Wait_One_Second CD56                           _RCSTAbits 000FAB  
                           printf@c 0065                             printf@f 0044  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc2 000FDE  
                    __tdiv_to_l_@f1 0001                      __tdiv_to_l_@f2 0004  
                        ??_spiwrite 0001                             strlen@s 0001  
                   fillCircle@color 0031                       ??__tdiv_to_l_ 0007  
                       ?_fillCircle 002B                           _PORTAbits 000F80  
                  drawtext@cursor_x 0039                    drawtext@cursor_y 0038  
                         _PORTBbits 000F81                           _PORTCbits 000F82  
                         _PORTDbits 000F83                           _PORTEbits 000F84  
                       ?_fillScreen 0014                         ?_drawCircle 000C  
                        drawChar@bg 0022                           _TRISCbits 000F94  
                    ?_setAddrWindow 0004                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 0068                    drawtext@textsize 0033  
          __size_of_update_LCD_misc 01E0                          drawPixel@x 000B  
                        drawPixel@y 0008                    _Wait_Half_Second C556  
                       ___ftdiv@exp 0026                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 0068                  get_full_ADC@result 0005  
               __size_of__div_to_l_ 010A                         ___ftmul@exp 0022  
                    __end_of_Set_EW C8A4                      __end_of_Set_NS C92C  
                    __end_of___ftge D012                      __end_of___wmul C5FE  
                     delay_ms@count 0019                          _write_data C4E4  
                      ??_Night_Mode 006A            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 002E                      __end_of_fround E8AE  
                    __end_of_printf F616                      __end_of_strcpy C6E6  
                    __end_of_strlen C79C                 start_initialization C7DA  
               __end_of__tdiv_to_l_ DBEC                           _Init_Tris C540  
                 __size_of_Day_Mode 00CE                     ??_write_command 0003  
                         _OpenUSART CBE2                 __size_of_fillCircle 0052  
                   ___llmod@divisor 0005                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000A                     ___llmod@counter 0009  
                __end_of_Night_Mode D202                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 0069  
               __size_of_drawCircle 01AE                            ??_Set_EW 0036  
                          ??_Set_NS 0036                   __size_of_Set_EWLT 0044  
                   _Activate_Buzzer C4F4                   __size_of_Set_NSLT 0044  
                  ?_Wait_One_Second 0001                            ??___ftge 0007  
                          ??___wmul 0013                         __pdataBANK0 0080  
                _Select_ADC_Channel C4BA                            ??_fround 002B  
                   setAddrWindow@x0 0007                     setAddrWindow@x1 0005  
                   setAddrWindow@y0 0004                     setAddrWindow@y1 0006  
                          ??_printf 0049                            ??_strcpy 0005  
                          ??_strlen 0003                        _PED_EW_Count 0099  
         __size_of_update_LCD_color 0362           __size_of_update_LCD_count 018E  
                        fround@prec 0031                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                 ?_Select_ADC_Channel 0001  
                 __size_of___lltoft 0060                         __pbssCOMRAM 0075  
                     ??_PED_Control 0069                     ??_setAddrWindow 0007  
                        ?_Init_Tris 0001                        _PED_NS_Count 009C  
                       ??_LCD_Reset 001B            __end_of_fillCircleHelper DE34  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_OpenUSART 0001                   __size_of_drawRect 0066  
                 __size_of_drawtext 00E2                ??_Select_ADC_Channel 0001  
                 ??_update_LCD_misc 0066     __end_of_TFT_GreenTab_Initialize C628  
                     __pmediumconst FD34                            ?___awdiv 0007  
                          ?___ftadd 0032                            ?___awmod 0001  
                          ?___ftdiv 0019                            ?___ftneg 0001  
                          ?___lldiv 0001                            ?___ftmul 0019  
                          ?___llmod 0001                            ?___ftsub 003E  
                         __npowers_ FF38                            ?___fttol 002F  
                         __tft_type 007C                           _direction 007E  
                drawFastVLine@color 000A                         ?_write_data 0001  
                         _drawPixel C684                         __tdiv_to_l_ DADC  
                 __size_of_spiwrite 0014                        ??__div_to_l_ 0007  
                 _Initialize_Screen F616                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2                           _init_UART C52C  
                ?_Initialize_Screen 0001                            _FLASHING 00B5  
                    __size_of_scale 03E0                      __size_of_putch 000E  
 __end_of_Wait_One_Second_With_Beep CEF0                 __end_of_PED_Control C75E  
           __end_of_Activate_Buzzer C506                      ___wmul@product 0013  
               ??_Initialize_Screen 003A                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                  __end_of__div_to_l_ DADC  
                          _PIR2bits 000FA1                            _EW_Count 0090  
                         fillRect@h 0015                           fillRect@i 001C  
                         fillRect@w 0014                           fillRect@x 001B  
                         fillRect@y 0013                           drawChar@c 001F  
                         drawChar@i 0028                           drawChar@j 0027  
                      ??_fillCircle 0033                           drawChar@x 0026  
                         drawChar@y 001E                          ?_drawPixel 0008  
            __size_of_fillRectangle 00DC                            _NS_Count 0096  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second C570  
                 ___wmul@multiplier 000F           __end_of_Initialize_Screen FD34  
                      ??_fillScreen 0016                           drawRect@h 0019  
                         drawRect@w 0017                           drawRect@x 0013  
                         drawRect@y 0015                       _FlashingR_Txt 00A1  
                     _FlashingS_Txt 008A                        ??_drawCircle 0014  
                        printf@flag 0054        __end_of_update_LCD_PED_Count D394  
                        printf@fval 0062                            _SW_EWPED 0078  
                        printf@prec 0056               update_LCD_color@color 0033  
                          _Day_Mode D394                            _SW_NSPED 007B  
         update_LCD_color@direction 0034                          ?_init_UART 0001  
                       ??_Init_Tris 0001              __size_of_drawFastHLine 0088  
                         copy_data0 C806                           drawtext@i 0036  
            __size_of_drawFastVLine 0088                           drawtext@x 0035  
                         drawtext@y 0029                            _Init_ADC C4B0  
                 write_command@cmd_ 0003                         ??_OpenUSART 0003  
                          _Rcmd2red C79C                 __size_of_write_data 0010  
                   OpenUSART@config 0003                            _Set_EWLT C8A4  
                __end_of_fillCircle CA5A                            _Set_NSLT C92C  
                          __Hrparam 0000                  __end_of_fillScreen C58C  
             update_LCD_count@count 003A                            __Lrparam 0000  
                __end_of_drawCircle E2C6                    __size_of___awdiv 0096  
                  __size_of___ftadd 01C4                    __size_of___awmod 0082  
                  __size_of___ftdiv 00E2                    __size_of___ftneg 0024  
                  __size_of___lldiv 008C                    __size_of___ftmul 00F8  
                  __size_of___llmod 0070                    __size_of___ftsub 0044  
                  __size_of___fttol 00E6                            ___awtoft C6E6  
                          ___ftpack D202                         _fround$2380 002B  
                       _fround$2379 002E                            ___lltoft CAAC  
                  _update_LCD_color E8AE                    _update_LCD_count DF8A  
                       _PED_Control C722                            _delay_ms CA5A  
                          __ptext10 C5FE                            __ptext11 D7E8  
                          __ptext20 DF8A                            __ptext12 C79C  
                          __ptext21 CCD4                            __ptext13 DBEC  
                          __ptext30 C722                            __ptext22 C92C  
                          __ptext14 C506                            __ptext31 D2C8  
                          __ptext23 C8E8                            __ptext15 CA5A  
                          __ptext40 D012                            __ptext32 CE66  
                          __ptext24 C8A4                            __ptext16 C540  
                          __ptext41 DADC                            __ptext33 E48A  
                          __ptext25 C860                            __ptext17 C4B0  
                          __ptext50 CF7C                            __ptext42 D9D2  
                          __ptext34 EFF0                            __ptext26 E8AE  
                          __ptext18 D394                            __ptext51 C5B0  
                          __ptext43 CAAC                            __ptext35 EC10  
                          __ptext27 CA08                            __ptext19 C656  
                          __ptext60 C4D4                            __ptext52 D620  
                          __ptext44 CB72                            __ptext36 C4C6  
                          __ptext28 DCFC                            __ptext61 C518  
                          __ptext53 C75E                            __ptext45 CEF0  
                          __ptext37 E66A                            __ptext29 E118  
                          __ptext62 C5D6                            __ptext54 DE34  
                          __ptext46 D702                            __ptext38 D8DA  
                          __ptext63 D53E                            __ptext55 C970  
                          __ptext47 C81C                            __ptext39 CC52  
                          __ptext64 C6E6                            __ptext56 CD56  
                          __ptext48 E2C6                            __ptext65 D202  
                          __ptext57 C684                            __ptext49 C58C  
                          __ptext66 C6B4                            __ptext58 C9BA  
                          __ptext67 C556                            __ptext59 C4E4  
                          __ptext68 C4A8                            __ptext69 C4F4  
                          _fillRect C970                            _drawChar DE34  
                          __powers_ FF5F                            _drawRect CB0C  
  __size_of_TFT_GreenTab_Initialize 002A                    _FLASHING_REQUEST 00B6  
                          _colstart 007D                            _drawtext D620  
                        strcpy@from 0003                       _fillRectangle D462  
                  ?_Activate_Buzzer 0001                       __size_of_main 00A6  
                   fillRectangle@hi 0011                     fillRectangle@lo 0012  
                     _drawFastHLine CDDE                       _drawFastVLine CD56  
                         printf@exp 005C                            _spiwrite C518  
                         printf@val 0058                         ??_drawPixel 000B  
                          _rowstart 007F                  fillCircleHelper@x0 0013  
                fillCircleHelper@y0 0015          __size_of_Initialize_Screen 071E  
                        _INTCONbits 000FF2                      OpenUSART@spbrg 0001  
                       ??_init_UART 0004                       Set_EWLT@color 0036  
                          scale@scl 002E                          _EWLT_Count 008D  
                 ?_fillCircleHelper 0013                           spiwrite@x 0001  
       ??_Wait_One_Second_With_Beep 0068                     _update_LCD_misc E48A  
                    ?_fillRectangle 0008                    __tdiv_to_l_@exp1 000F  
                  __tdiv_to_l_@cntr 000E                    __tdiv_to_l_@quot 000A  
                ??_fillCircleHelper 001F               __end_of_write_command C4E4  
                  ___lldiv@dividend 0001                     fillScreen@color 0014  
              update_LCD_misc@nStep 0066                _update_LCD_PED_Count D2C8  
           __size_of_Wait_N_Seconds 002E                        fillCircle@x0 002B  
                      fillCircle@y0 002D                      ?_drawFastHLine 0008  
                    fillRectangle@h 000A                      fillRectangle@w 0009  
                    fillRectangle@x 0013                      fillRectangle@y 0008  
                    ?_drawFastVLine 0008                            printf@ap 0052  
                 fillCircleHelper@f 0025                   fillCircleHelper@r 0017  
                 fillCircleHelper@x 0027                   fillCircleHelper@y 0029  
                      ??_write_data 0003                       fillRect@color 0016  
                      ?__tdiv_to_l_ 0001                         _printf$2382 004F  
          __size_of_Wait_One_Second 0082                    ___lldiv@quotient 0009  
                          strcpy@cp 0005                            strlen@cp 0005  
                          strcpy@to 0001                       Set_NSLT@color 0036  
                        _NSLT_Count 0093                         fillCircle@r 002F  
                   main@pvoltage_mv 006B               __end_of_setAddrWindow CA08  
                fillRectangle@color 000B                       drawChar@color 0020  
                __end_of_write_data C4F4                        drawChar@line 0025  
                     ?_get_full_ADC 0001                        drawChar@size 0024  
             ?_update_LCD_PED_Count 003A         __size_of_Select_ADC_Channel 000C  
