

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 28 18:44:34 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  002A84                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _setup_fan_temp
   102  002A84  4B                 	db	75
   103                           
   104                           ;initializer for _tempSecond
   105  002A85  FF                 	db	255
   106                           
   107                           ;initializer for _wrap
   108  002A86  01                 	db	1
   109                           
   110                           	psect	idataBANK0
   111  002254                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _alarm_time
   115  002254  30                 	db	48
   116  002255  30                 	db	48
   117  002256  3A                 	db	58
   118  002257  30                 	db	48
   119  002258  30                 	db	48
   120  002259  3A                 	db	58
   121  00225A  30                 	db	48
   122  00225B  30                 	db	48
   123  00225C  00                 	db	0
   124                           
   125                           ;initializer for _setup_alarm_time
   126  00225D  30                 	db	48
   127  00225E  30                 	db	48
   128  00225F  3A                 	db	58
   129  002260  30                 	db	48
   130  002261  30                 	db	48
   131  002262  3A                 	db	58
   132  002263  30                 	db	48
   133  002264  30                 	db	48
   134  002265  00                 	db	0
   135                           
   136                           ;initializer for _setup_date
   137  002266  30                 	db	48
   138  002267  31                 	db	49
   139  002268  2F                 	db	47
   140  002269  30                 	db	48
   141  00226A  31                 	db	49
   142  00226B  2F                 	db	47
   143  00226C  30                 	db	48
   144  00226D  30                 	db	48
   145  00226E  00                 	db	0
   146                           
   147                           ;initializer for _setup_time
   148  00226F  30                 	db	48
   149  002270  30                 	db	48
   150  002271  3A                 	db	58
   151  002272  30                 	db	48
   152  002273  30                 	db	48
   153  002274  3A                 	db	58
   154  002275  30                 	db	48
   155  002276  30                 	db	48
   156  002277  00                 	db	0
   157                           
   158                           ;initializer for _D1
   159  002278  00                 	db	0
   160  002279  01                 	db	1
   161  00227A  02                 	db	2
   162  00227B  03                 	db	3
   163  00227C  04                 	db	4
   164  00227D  05                 	db	5
   165  00227E  06                 	db	6
   166  00227F  07                 	db	7
   167                           
   168                           ;initializer for _D2
   169  002280  01                 	db	1
   170  002281  03                 	db	3
   171  002282  02                 	db	2
   172  002283  04                 	db	4
   173  002284  05                 	db	5
   174  002285  06                 	db	6
   175  002286  07                 	db	7
   176                           
   177                           ;initializer for _setup_fan_text
   178  002287  30                 	db	48
   179  002288  37                 	db	55
   180  002289  35                 	db	53
   181  00228A  46                 	db	70
   182  00228B  00                 	db	0
   183                           
   184                           ;initializer for _Alarm_SW_Txt
   185  00228C  4F                 	db	79
   186  00228D  46                 	db	70
   187  00228E  46                 	db	70
   188  00228F  00                 	db	0
   189                           
   190                           ;initializer for _RTC_ALARM_Txt
   191  002290  30                 	db	48
   192  002291  00                 	db	0
   193                           
   194                           ;initializer for _date
   195  002292  30                 	db	48
   196  002293  30                 	db	48
   197  002294  2F                 	db	47
   198  002295  30                 	db	48
   199  002296  30                 	db	48
   200  002297  2F                 	db	47
   201  002298  30                 	db	48
   202  002299  30                 	db	48
   203  00229A  00                 	db	0
   204                           
   205                           ;initializer for _time
   206  00229B  30                 	db	48
   207  00229C  30                 	db	48
   208  00229D  3A                 	db	58
   209  00229E  30                 	db	48
   210  00229F  30                 	db	48
   211  0022A0  3A                 	db	58
   212  0022A1  30                 	db	48
   213  0022A2  30                 	db	48
   214  0022A3  00                 	db	0
   215                           
   216                           ;initializer for _RPM_Txt
   217  0022A4  30                 	db	48
   218  0022A5  30                 	db	48
   219  0022A6  30                 	db	48
   220  0022A7  30                 	db	48
   221  0022A8  00                 	db	0
   222                           
   223                           ;initializer for _DC_Txt
   224  0022A9  30                 	db	48
   225  0022AA  30                 	db	48
   226  0022AB  30                 	db	48
   227  0022AC  00                 	db	0
   228                           
   229                           ;initializer for _Fan_SW_Txt
   230  0022AD  4F                 	db	79
   231  0022AE  46                 	db	70
   232  0022AF  46                 	db	70
   233  0022B0  00                 	db	0
   234                           
   235                           ;initializer for _tempC
   236  0022B1  2B                 	db	43
   237  0022B2  32                 	db	50
   238  0022B3  35                 	db	53
   239  0022B4  00                 	db	0
   240                           
   241                           ;initializer for _tempF
   242  0022B5  2B                 	db	43
   243  0022B6  37                 	db	55
   244  0022B7  37                 	db	55
   245  0022B8  00                 	db	0
   246                           
   247                           	psect	idataBANK1
   248  002108                     __pidataBANK1:
   249                           	opt stack 0
   250                           
   251                           ;initializer for _color
   252  002108  F800               	dw	63488
   253  00210A  F800               	dw	63488
   254  00210C  F800               	dw	63488
   255  00210E  001F               	dw	31
   256  002110  001F               	dw	31
   257  002112  07E0               	dw	2016
   258  002114  F81F               	dw	63519
   259  002116  F81F               	dw	63519
   260  002118  F81F               	dw	63519
   261  00211A  0000               	dw	0
   262  00211C  0000               	dw	0
   263  00211E  0000               	dw	0
   264  002120  0000               	dw	0
   265  002122  0000               	dw	0
   266  002124  0000               	dw	0
   267  002126  0000               	dw	0
   268  002128  0000               	dw	0
   269  00212A  0000               	dw	0
   270  00212C  0000               	dw	0
   271  00212E  0000               	dw	0
   272  002130  0000               	dw	0
   273                           
   274                           ;initializer for _D3
   275  002132  01                 	db	1
   276  002133  01                 	db	1
   277  002134  01                 	db	1
   278  002135  04                 	db	4
   279  002136  04                 	db	4
   280  002137  02                 	db	2
   281  002138  05                 	db	5
   282  002139  05                 	db	5
   283  00213A  05                 	db	5
   284  00213B  07                 	db	7
   285  00213C  07                 	db	7
   286  00213D  07                 	db	7
   287  00213E  07                 	db	7
   288  00213F  07                 	db	7
   289  002140  07                 	db	7
   290  002141  07                 	db	7
   291  002142  07                 	db	7
   292  002143  07                 	db	7
   293  002144  07                 	db	7
   294  002145  07                 	db	7
   295  002146  07                 	db	7
   296                           
   297                           ;initializer for _array1
   298  002147  A2                 	db	162
   299  002148  62                 	db	98
   300  002149  E2                 	db	226
   301  00214A  22                 	db	34
   302  00214B  02                 	db	2
   303  00214C  C2                 	db	194
   304  00214D  E0                 	db	224
   305  00214E  A8                 	db	168
   306  00214F  90                 	db	144
   307  002150  68                 	db	104
   308  002151  98                 	db	152
   309  002152  B0                 	db	176
   310  002153  30                 	db	48
   311  002154  18                 	db	24
   312  002155  7A                 	db	122
   313  002156  10                 	db	16
   314  002157  38                 	db	56
   315  002158  5A                 	db	90
   316  002159  42                 	db	66
   317  00215A  4A                 	db	74
   318  00215B  52                 	db	82
   319                           
   320                           ;initializer for _buffer
   321  00215C  20                 	db	32
   322  00215D  45                 	db	69
   323  00215E  43                 	db	67
   324  00215F  45                 	db	69
   325  002160  33                 	db	51
   326  002161  33                 	db	51
   327  002162  30                 	db	48
   328  002163  31                 	db	49
   329  002164  4C                 	db	76
   330  002165  20                 	db	32
   331  002166  53                 	db	83
   332  002167  70                 	db	112
   333  002168  27                 	db	39
   334  002169  32                 	db	50
   335  00216A  32                 	db	50
   336  00216B  20                 	db	32
   337  00216C  4C                 	db	76
   338  00216D  31                 	db	49
   339  00216E  32                 	db	50
   340  00216F  00                 	db	0
   341  002170  00                 	db	0
   342  002171  00                 	db	0
   343  002172  00                 	db	0
   344  002173  00                 	db	0
   345  002174  00                 	db	0
   346  002175  00                 	db	0
   347  002176  00                 	db	0
   348  002177  00                 	db	0
   349  002178  00                 	db	0
   350  002179  00                 	db	0
   351  00217A  00                 	db	0
   352  00217B  00                 	db	0
   353  00217C  00                 	db	0
   354                           
   355                           	psect	mediumconst
   356  00FCEC                     __pmediumconst:
   357                           	opt stack 0
   358  00FCEC  00                 	db	0
   359  00FCED                     _font:
   360                           	opt stack 0
   361  00FCED  00                 	db	0
   362  00FCEE  00                 	db	0
   363  00FCEF  00                 	db	0
   364  00FCF0  00                 	db	0
   365  00FCF1  00                 	db	0
   366  00FCF2  00                 	db	0
   367  00FCF3  00                 	db	0
   368  00FCF4  5F                 	db	95
   369  00FCF5  00                 	db	0
   370  00FCF6  00                 	db	0
   371  00FCF7  00                 	db	0
   372  00FCF8  07                 	db	7
   373  00FCF9  00                 	db	0
   374  00FCFA  07                 	db	7
   375  00FCFB  00                 	db	0
   376  00FCFC  14                 	db	20
   377  00FCFD  7F                 	db	127
   378  00FCFE  14                 	db	20
   379  00FCFF  7F                 	db	127
   380  00FD00  14                 	db	20
   381  00FD01  24                 	db	36
   382  00FD02  2A                 	db	42
   383  00FD03  7F                 	db	127
   384  00FD04  2A                 	db	42
   385  00FD05  12                 	db	18
   386  00FD06  23                 	db	35
   387  00FD07  13                 	db	19
   388  00FD08  08                 	db	8
   389  00FD09  64                 	db	100
   390  00FD0A  62                 	db	98
   391  00FD0B  36                 	db	54
   392  00FD0C  49                 	db	73
   393  00FD0D  56                 	db	86
   394  00FD0E  20                 	db	32
   395  00FD0F  50                 	db	80
   396  00FD10  00                 	db	0
   397  00FD11  08                 	db	8
   398  00FD12  07                 	db	7
   399  00FD13  03                 	db	3
   400  00FD14  00                 	db	0
   401  00FD15  00                 	db	0
   402  00FD16  1C                 	db	28
   403  00FD17  22                 	db	34
   404  00FD18  41                 	db	65
   405  00FD19  00                 	db	0
   406  00FD1A  00                 	db	0
   407  00FD1B  41                 	db	65
   408  00FD1C  22                 	db	34
   409  00FD1D  1C                 	db	28
   410  00FD1E  00                 	db	0
   411  00FD1F  2A                 	db	42
   412  00FD20  1C                 	db	28
   413  00FD21  7F                 	db	127
   414  00FD22  1C                 	db	28
   415  00FD23  2A                 	db	42
   416  00FD24  08                 	db	8
   417  00FD25  08                 	db	8
   418  00FD26  3E                 	db	62
   419  00FD27  08                 	db	8
   420  00FD28  08                 	db	8
   421  00FD29  00                 	db	0
   422  00FD2A  80                 	db	128
   423  00FD2B  70                 	db	112
   424  00FD2C  30                 	db	48
   425  00FD2D  00                 	db	0
   426  00FD2E  08                 	db	8
   427  00FD2F  08                 	db	8
   428  00FD30  08                 	db	8
   429  00FD31  08                 	db	8
   430  00FD32  08                 	db	8
   431  00FD33  00                 	db	0
   432  00FD34  00                 	db	0
   433  00FD35  60                 	db	96
   434  00FD36  60                 	db	96
   435  00FD37  00                 	db	0
   436  00FD38  20                 	db	32
   437  00FD39  10                 	db	16
   438  00FD3A  08                 	db	8
   439  00FD3B  04                 	db	4
   440  00FD3C  02                 	db	2
   441  00FD3D  3E                 	db	62
   442  00FD3E  51                 	db	81
   443  00FD3F  49                 	db	73
   444  00FD40  45                 	db	69
   445  00FD41  3E                 	db	62
   446  00FD42  00                 	db	0
   447  00FD43  42                 	db	66
   448  00FD44  7F                 	db	127
   449  00FD45  40                 	db	64
   450  00FD46  00                 	db	0
   451  00FD47  72                 	db	114
   452  00FD48  49                 	db	73
   453  00FD49  49                 	db	73
   454  00FD4A  49                 	db	73
   455  00FD4B  46                 	db	70
   456  00FD4C  21                 	db	33
   457  00FD4D  41                 	db	65
   458  00FD4E  49                 	db	73
   459  00FD4F  4D                 	db	77
   460  00FD50  33                 	db	51
   461  00FD51  18                 	db	24
   462  00FD52  14                 	db	20
   463  00FD53  12                 	db	18
   464  00FD54  7F                 	db	127
   465  00FD55  10                 	db	16
   466  00FD56  27                 	db	39
   467  00FD57  45                 	db	69
   468  00FD58  45                 	db	69
   469  00FD59  45                 	db	69
   470  00FD5A  39                 	db	57
   471  00FD5B  3C                 	db	60
   472  00FD5C  4A                 	db	74
   473  00FD5D  49                 	db	73
   474  00FD5E  49                 	db	73
   475  00FD5F  31                 	db	49
   476  00FD60  41                 	db	65
   477  00FD61  21                 	db	33
   478  00FD62  11                 	db	17
   479  00FD63  09                 	db	9
   480  00FD64  07                 	db	7
   481  00FD65  36                 	db	54
   482  00FD66  49                 	db	73
   483  00FD67  49                 	db	73
   484  00FD68  49                 	db	73
   485  00FD69  36                 	db	54
   486  00FD6A  46                 	db	70
   487  00FD6B  49                 	db	73
   488  00FD6C  49                 	db	73
   489  00FD6D  29                 	db	41
   490  00FD6E  1E                 	db	30
   491  00FD6F  00                 	db	0
   492  00FD70  00                 	db	0
   493  00FD71  14                 	db	20
   494  00FD72  00                 	db	0
   495  00FD73  00                 	db	0
   496  00FD74  00                 	db	0
   497  00FD75  40                 	db	64
   498  00FD76  34                 	db	52
   499  00FD77  00                 	db	0
   500  00FD78  00                 	db	0
   501  00FD79  00                 	db	0
   502  00FD7A  08                 	db	8
   503  00FD7B  14                 	db	20
   504  00FD7C  22                 	db	34
   505  00FD7D  41                 	db	65
   506  00FD7E  14                 	db	20
   507  00FD7F  14                 	db	20
   508  00FD80  14                 	db	20
   509  00FD81  14                 	db	20
   510  00FD82  14                 	db	20
   511  00FD83  00                 	db	0
   512  00FD84  41                 	db	65
   513  00FD85  22                 	db	34
   514  00FD86  14                 	db	20
   515  00FD87  08                 	db	8
   516  00FD88  02                 	db	2
   517  00FD89  01                 	db	1
   518  00FD8A  59                 	db	89
   519  00FD8B  09                 	db	9
   520  00FD8C  06                 	db	6
   521  00FD8D  3E                 	db	62
   522  00FD8E  41                 	db	65
   523  00FD8F  5D                 	db	93
   524  00FD90  59                 	db	89
   525  00FD91  4E                 	db	78
   526  00FD92  7C                 	db	124
   527  00FD93  12                 	db	18
   528  00FD94  11                 	db	17
   529  00FD95  12                 	db	18
   530  00FD96  7C                 	db	124
   531  00FD97  7F                 	db	127
   532  00FD98  49                 	db	73
   533  00FD99  49                 	db	73
   534  00FD9A  49                 	db	73
   535  00FD9B  36                 	db	54
   536  00FD9C  3E                 	db	62
   537  00FD9D  41                 	db	65
   538  00FD9E  41                 	db	65
   539  00FD9F  41                 	db	65
   540  00FDA0  22                 	db	34
   541  00FDA1  7F                 	db	127
   542  00FDA2  41                 	db	65
   543  00FDA3  41                 	db	65
   544  00FDA4  41                 	db	65
   545  00FDA5  3E                 	db	62
   546  00FDA6  7F                 	db	127
   547  00FDA7  49                 	db	73
   548  00FDA8  49                 	db	73
   549  00FDA9  49                 	db	73
   550  00FDAA  41                 	db	65
   551  00FDAB  7F                 	db	127
   552  00FDAC  09                 	db	9
   553  00FDAD  09                 	db	9
   554  00FDAE  09                 	db	9
   555  00FDAF  01                 	db	1
   556  00FDB0  3E                 	db	62
   557  00FDB1  41                 	db	65
   558  00FDB2  41                 	db	65
   559  00FDB3  51                 	db	81
   560  00FDB4  73                 	db	115
   561  00FDB5  7F                 	db	127
   562  00FDB6  08                 	db	8
   563  00FDB7  08                 	db	8
   564  00FDB8  08                 	db	8
   565  00FDB9  7F                 	db	127
   566  00FDBA  00                 	db	0
   567  00FDBB  41                 	db	65
   568  00FDBC  7F                 	db	127
   569  00FDBD  41                 	db	65
   570  00FDBE  00                 	db	0
   571  00FDBF  20                 	db	32
   572  00FDC0  40                 	db	64
   573  00FDC1  41                 	db	65
   574  00FDC2  3F                 	db	63
   575  00FDC3  01                 	db	1
   576  00FDC4  7F                 	db	127
   577  00FDC5  08                 	db	8
   578  00FDC6  14                 	db	20
   579  00FDC7  22                 	db	34
   580  00FDC8  41                 	db	65
   581  00FDC9  7F                 	db	127
   582  00FDCA  40                 	db	64
   583  00FDCB  40                 	db	64
   584  00FDCC  40                 	db	64
   585  00FDCD  40                 	db	64
   586  00FDCE  7F                 	db	127
   587  00FDCF  02                 	db	2
   588  00FDD0  1C                 	db	28
   589  00FDD1  02                 	db	2
   590  00FDD2  7F                 	db	127
   591  00FDD3  7F                 	db	127
   592  00FDD4  04                 	db	4
   593  00FDD5  08                 	db	8
   594  00FDD6  10                 	db	16
   595  00FDD7  7F                 	db	127
   596  00FDD8  3E                 	db	62
   597  00FDD9  41                 	db	65
   598  00FDDA  41                 	db	65
   599  00FDDB  41                 	db	65
   600  00FDDC  3E                 	db	62
   601  00FDDD  7F                 	db	127
   602  00FDDE  09                 	db	9
   603  00FDDF  09                 	db	9
   604  00FDE0  09                 	db	9
   605  00FDE1  06                 	db	6
   606  00FDE2  3E                 	db	62
   607  00FDE3  41                 	db	65
   608  00FDE4  51                 	db	81
   609  00FDE5  21                 	db	33
   610  00FDE6  5E                 	db	94
   611  00FDE7  7F                 	db	127
   612  00FDE8  09                 	db	9
   613  00FDE9  19                 	db	25
   614  00FDEA  29                 	db	41
   615  00FDEB  46                 	db	70
   616  00FDEC                     __end_of_font:
   617                           	opt stack 0
   618  00FDEC                     _font2:
   619                           	opt stack 0
   620  00FDEC  26                 	db	38
   621  00FDED  49                 	db	73
   622  00FDEE  49                 	db	73
   623  00FDEF  49                 	db	73
   624  00FDF0  32                 	db	50
   625  00FDF1  03                 	db	3
   626  00FDF2  01                 	db	1
   627  00FDF3  7F                 	db	127
   628  00FDF4  01                 	db	1
   629  00FDF5  03                 	db	3
   630  00FDF6  3F                 	db	63
   631  00FDF7  40                 	db	64
   632  00FDF8  40                 	db	64
   633  00FDF9  40                 	db	64
   634  00FDFA  3F                 	db	63
   635  00FDFB  1F                 	db	31
   636  00FDFC  20                 	db	32
   637  00FDFD  40                 	db	64
   638  00FDFE  20                 	db	32
   639  00FDFF  1F                 	db	31
   640  00FE00  3F                 	db	63
   641  00FE01  40                 	db	64
   642  00FE02  38                 	db	56
   643  00FE03  40                 	db	64
   644  00FE04  3F                 	db	63
   645  00FE05  63                 	db	99
   646  00FE06  14                 	db	20
   647  00FE07  08                 	db	8
   648  00FE08  14                 	db	20
   649  00FE09  63                 	db	99
   650  00FE0A  03                 	db	3
   651  00FE0B  04                 	db	4
   652  00FE0C  78                 	db	120
   653  00FE0D  04                 	db	4
   654  00FE0E  03                 	db	3
   655  00FE0F  61                 	db	97
   656  00FE10  59                 	db	89
   657  00FE11  49                 	db	73
   658  00FE12  4D                 	db	77
   659  00FE13  43                 	db	67
   660  00FE14  00                 	db	0
   661  00FE15  7F                 	db	127
   662  00FE16  41                 	db	65
   663  00FE17  41                 	db	65
   664  00FE18  41                 	db	65
   665  00FE19  02                 	db	2
   666  00FE1A  04                 	db	4
   667  00FE1B  08                 	db	8
   668  00FE1C  10                 	db	16
   669  00FE1D  20                 	db	32
   670  00FE1E  00                 	db	0
   671  00FE1F  41                 	db	65
   672  00FE20  41                 	db	65
   673  00FE21  41                 	db	65
   674  00FE22  7F                 	db	127
   675  00FE23  04                 	db	4
   676  00FE24  02                 	db	2
   677  00FE25  01                 	db	1
   678  00FE26  02                 	db	2
   679  00FE27  04                 	db	4
   680  00FE28  40                 	db	64
   681  00FE29  40                 	db	64
   682  00FE2A  40                 	db	64
   683  00FE2B  40                 	db	64
   684  00FE2C  40                 	db	64
   685  00FE2D  00                 	db	0
   686  00FE2E  03                 	db	3
   687  00FE2F  07                 	db	7
   688  00FE30  08                 	db	8
   689  00FE31  00                 	db	0
   690  00FE32  20                 	db	32
   691  00FE33  54                 	db	84
   692  00FE34  54                 	db	84
   693  00FE35  78                 	db	120
   694  00FE36  40                 	db	64
   695  00FE37  7F                 	db	127
   696  00FE38  28                 	db	40
   697  00FE39  44                 	db	68
   698  00FE3A  44                 	db	68
   699  00FE3B  38                 	db	56
   700  00FE3C  38                 	db	56
   701  00FE3D  44                 	db	68
   702  00FE3E  44                 	db	68
   703  00FE3F  44                 	db	68
   704  00FE40  28                 	db	40
   705  00FE41  38                 	db	56
   706  00FE42  44                 	db	68
   707  00FE43  44                 	db	68
   708  00FE44  28                 	db	40
   709  00FE45  7F                 	db	127
   710  00FE46  38                 	db	56
   711  00FE47  54                 	db	84
   712  00FE48  54                 	db	84
   713  00FE49  54                 	db	84
   714  00FE4A  18                 	db	24
   715  00FE4B  00                 	db	0
   716  00FE4C  08                 	db	8
   717  00FE4D  7E                 	db	126
   718  00FE4E  09                 	db	9
   719  00FE4F  02                 	db	2
   720  00FE50  18                 	db	24
   721  00FE51  A4                 	db	164
   722  00FE52  A4                 	db	164
   723  00FE53  9C                 	db	156
   724  00FE54  78                 	db	120
   725  00FE55  7F                 	db	127
   726  00FE56  08                 	db	8
   727  00FE57  04                 	db	4
   728  00FE58  04                 	db	4
   729  00FE59  78                 	db	120
   730  00FE5A  00                 	db	0
   731  00FE5B  44                 	db	68
   732  00FE5C  7D                 	db	125
   733  00FE5D  40                 	db	64
   734  00FE5E  00                 	db	0
   735  00FE5F  20                 	db	32
   736  00FE60  40                 	db	64
   737  00FE61  40                 	db	64
   738  00FE62  3D                 	db	61
   739  00FE63  00                 	db	0
   740  00FE64  7F                 	db	127
   741  00FE65  10                 	db	16
   742  00FE66  28                 	db	40
   743  00FE67  44                 	db	68
   744  00FE68  00                 	db	0
   745  00FE69  00                 	db	0
   746  00FE6A  41                 	db	65
   747  00FE6B  7F                 	db	127
   748  00FE6C  40                 	db	64
   749  00FE6D  00                 	db	0
   750  00FE6E  7C                 	db	124
   751  00FE6F  04                 	db	4
   752  00FE70  78                 	db	120
   753  00FE71  04                 	db	4
   754  00FE72  78                 	db	120
   755  00FE73  7C                 	db	124
   756  00FE74  08                 	db	8
   757  00FE75  04                 	db	4
   758  00FE76  04                 	db	4
   759  00FE77  78                 	db	120
   760  00FE78  38                 	db	56
   761  00FE79  44                 	db	68
   762  00FE7A  44                 	db	68
   763  00FE7B  44                 	db	68
   764  00FE7C  38                 	db	56
   765  00FE7D  FC                 	db	252
   766  00FE7E  18                 	db	24
   767  00FE7F  24                 	db	36
   768  00FE80  24                 	db	36
   769  00FE81  18                 	db	24
   770  00FE82  18                 	db	24
   771  00FE83  24                 	db	36
   772  00FE84  24                 	db	36
   773  00FE85  18                 	db	24
   774  00FE86  FC                 	db	252
   775  00FE87  7C                 	db	124
   776  00FE88  08                 	db	8
   777  00FE89  04                 	db	4
   778  00FE8A  04                 	db	4
   779  00FE8B  08                 	db	8
   780  00FE8C  48                 	db	72
   781  00FE8D  54                 	db	84
   782  00FE8E  54                 	db	84
   783  00FE8F  54                 	db	84
   784  00FE90  24                 	db	36
   785  00FE91  04                 	db	4
   786  00FE92  04                 	db	4
   787  00FE93  3F                 	db	63
   788  00FE94  44                 	db	68
   789  00FE95  24                 	db	36
   790  00FE96  3C                 	db	60
   791  00FE97  40                 	db	64
   792  00FE98  40                 	db	64
   793  00FE99  20                 	db	32
   794  00FE9A  7C                 	db	124
   795  00FE9B  1C                 	db	28
   796  00FE9C  20                 	db	32
   797  00FE9D  40                 	db	64
   798  00FE9E  20                 	db	32
   799  00FE9F  1C                 	db	28
   800  00FEA0  3C                 	db	60
   801  00FEA1  40                 	db	64
   802  00FEA2  30                 	db	48
   803  00FEA3  40                 	db	64
   804  00FEA4  3C                 	db	60
   805  00FEA5  44                 	db	68
   806  00FEA6  28                 	db	40
   807  00FEA7  10                 	db	16
   808  00FEA8  28                 	db	40
   809  00FEA9  44                 	db	68
   810  00FEAA  4C                 	db	76
   811  00FEAB  90                 	db	144
   812  00FEAC  90                 	db	144
   813  00FEAD  90                 	db	144
   814  00FEAE  7C                 	db	124
   815  00FEAF  44                 	db	68
   816  00FEB0  64                 	db	100
   817  00FEB1  54                 	db	84
   818  00FEB2  4C                 	db	76
   819  00FEB3  44                 	db	68
   820  00FEB4  00                 	db	0
   821  00FEB5  08                 	db	8
   822  00FEB6  36                 	db	54
   823  00FEB7  41                 	db	65
   824  00FEB8  00                 	db	0
   825  00FEB9  00                 	db	0
   826  00FEBA  00                 	db	0
   827  00FEBB  77                 	db	119
   828  00FEBC  00                 	db	0
   829  00FEBD  00                 	db	0
   830  00FEBE  00                 	db	0
   831  00FEBF  41                 	db	65
   832  00FEC0  36                 	db	54
   833  00FEC1  08                 	db	8
   834  00FEC2  00                 	db	0
   835  00FEC3  02                 	db	2
   836  00FEC4  01                 	db	1
   837  00FEC5  02                 	db	2
   838  00FEC6  04                 	db	4
   839  00FEC7  02                 	db	2
   840  00FEC8                     __end_of_font2:
   841                           	opt stack 0
   842  00FEC8                     _octpowers:
   843                           	opt stack 0
   844  00FEC8  0001               	dw	1
   845  00FECA  0008               	dw	8
   846  00FECC  0040               	dw	64
   847  00FECE  0200               	dw	512
   848  00FED0  1000               	dw	4096
   849  00FED2  8000               	dw	32768
   850  00FED4                     __end_of_octpowers:
   851                           	opt stack 0
   852  00FED4                     _dpowers:
   853                           	opt stack 0
   854  00FED4  0001               	dw	1
   855  00FED6  000A               	dw	10
   856  00FED8  0064               	dw	100
   857  00FEDA  03E8               	dw	1000
   858  00FEDC  2710               	dw	10000
   859  00FEDE                     __end_of_dpowers:
   860                           	opt stack 0
   861  00FEDE                     _hexpowers:
   862                           	opt stack 0
   863  00FEDE  0001               	dw	1
   864  00FEE0  0010               	dw	16
   865  00FEE2  0100               	dw	256
   866  00FEE4  1000               	dw	4096
   867  00FEE6                     __end_of_hexpowers:
   868                           	opt stack 0
   869  0000                     _ADCON1	set	4033
   870  0000                     _CCP1CON	set	4029
   871  0000                     _CCP2CON	set	4026
   872  0000                     _CCPR1L	set	4030
   873  0000                     _CCPR2L	set	4027
   874  0000                     _INTCON2bits	set	4081
   875  0000                     _INTCONbits	set	4082
   876  0000                     _OSCCON	set	4051
   877  0000                     _PIE1bits	set	3997
   878  0000                     _PIR1bits	set	3998
   879  0000                     _PORTA	set	3968
   880  0000                     _PORTBbits	set	3969
   881  0000                     _PORTD	set	3971
   882  0000                     _PORTDbits	set	3971
   883  0000                     _PORTE	set	3972
   884  0000                     _PR2	set	4043
   885  0000                     _RCSTA	set	4011
   886  0000                     _RCSTAbits	set	4011
   887  0000                     _SPBRG	set	4015
   888  0000                     _SPBRGH	set	4016
   889  0000                     _SSPBUF	set	4041
   890  0000                     _SSPCON1	set	4038
   891  0000                     _SSPSTAT	set	4039
   892  0000                     _SSPSTATbits	set	4039
   893  0000                     _T0CON	set	4053
   894  0000                     _T0CONbits	set	4053
   895  0000                     _T1CON	set	4045
   896  0000                     _T1CONbits	set	4045
   897  0000                     _T2CON	set	4042
   898  0000                     _T3CON	set	4017
   899  0000                     _T3CONbits	set	4017
   900  0000                     _TMR0H	set	4055
   901  0000                     _TMR0L	set	4054
   902  0000                     _TMR1H	set	4047
   903  0000                     _TMR1L	set	4046
   904  0000                     _TMR3L	set	4018
   905  0000                     _TRISA	set	3986
   906  0000                     _TRISB	set	3987
   907  0000                     _TRISBbits	set	3987
   908  0000                     _TRISC	set	3988
   909  0000                     _TRISCbits	set	3988
   910  0000                     _TRISD	set	3989
   911  0000                     _TRISDbits	set	3989
   912  0000                     _TRISE	set	3990
   913  0000                     _TXREG	set	4013
   914  0000                     _TXSTA	set	4012
   915  0000                     _TXSTAbits	set	4012
   916  0000                     _RBPU	set	32655
   917  0000                     _TRMT	set	32097
   918  00FEE6                     STR_3:
   919  00FEE6  25                 	db	37
   920  00FEE7  30                 	db	48	;'0'
   921  00FEE8  32                 	db	50	;'2'
   922  00FEE9  78                 	db	120	;'x'
   923  00FEEA  3A                 	db	58	;':'
   924  00FEEB  25                 	db	37
   925  00FEEC  30                 	db	48	;'0'
   926  00FEED  32                 	db	50	;'2'
   927  00FEEE  78                 	db	120	;'x'
   928  00FEEF  3A                 	db	58	;':'
   929  00FEF0  25                 	db	37
   930  00FEF1  30                 	db	48	;'0'
   931  00FEF2  32                 	db	50	;'2'
   932  00FEF3  78                 	db	120	;'x'
   933  00FEF4  20                 	db	32
   934  00FEF5  25                 	db	37
   935  00FEF6  30                 	db	48	;'0'
   936  00FEF7  32                 	db	50	;'2'
   937  00FEF8  78                 	db	120	;'x'
   938  00FEF9  2F                 	db	47
   939  00FEFA  25                 	db	37
   940  00FEFB  30                 	db	48	;'0'
   941  00FEFC  32                 	db	50	;'2'
   942  00FEFD  78                 	db	120	;'x'
   943  00FEFE  2F                 	db	47
   944  00FEFF  25                 	db	37
   945  00FF00  30                 	db	48	;'0'
   946  00FF01  32                 	db	50	;'2'
   947  00FF02  78                 	db	120	;'x'
   948  00FF03  00                 	db	0
   949  00FF04                     STR_5:
   950  00FF04  52                 	db	82	;'R'
   951  00FF05  50                 	db	80	;'P'
   952  00FF06  4D                 	db	77	;'M'
   953  00FF07  20                 	db	32
   954  00FF08  3D                 	db	61	;'='
   955  00FF09  20                 	db	32
   956  00FF0A  25                 	db	37
   957  00FF0B  64                 	db	100	;'d'
   958  00FF0C  20                 	db	32
   959  00FF0D  64                 	db	100	;'d'
   960  00FF0E  75                 	db	117	;'u'
   961  00FF0F  74                 	db	116	;'t'
   962  00FF10  79                 	db	121	;'y'
   963  00FF11  5F                 	db	95	;'_'
   964  00FF12  63                 	db	99	;'c'
   965  00FF13  79                 	db	121	;'y'
   966  00FF14  63                 	db	99	;'c'
   967  00FF15  6C                 	db	108	;'l'
   968  00FF16  65                 	db	101	;'e'
   969  00FF17  20                 	db	32
   970  00FF18  3D                 	db	61	;'='
   971  00FF19  20                 	db	32
   972  00FF1A  25                 	db	37
   973  00FF1B  64                 	db	100	;'d'
   974  00FF1C  0D                 	db	13
   975  00FF1D  0A                 	db	10
   976  00FF1E  00                 	db	0
   977  00FF1F                     STR_1:
   978  00FF1F  44                 	db	68	;'D'
   979  00FF20  75                 	db	117	;'u'
   980  00FF21  74                 	db	116	;'t'
   981  00FF22  79                 	db	121	;'y'
   982  00FF23  20                 	db	32
   983  00FF24  43                 	db	67	;'C'
   984  00FF25  79                 	db	121	;'y'
   985  00FF26  63                 	db	99	;'c'
   986  00FF27  6C                 	db	108	;'l'
   987  00FF28  65                 	db	101	;'e'
   988  00FF29  20                 	db	32
   989  00FF2A  69                 	db	105	;'i'
   990  00FF2B  73                 	db	115	;'s'
   991  00FF2C  20                 	db	32
   992  00FF2D  61                 	db	97	;'a'
   993  00FF2E  74                 	db	116	;'t'
   994  00FF2F  20                 	db	32
   995  00FF30  31                 	db	49	;'1'
   996  00FF31  30                 	db	48	;'0'
   997  00FF32  30                 	db	48	;'0'
   998  00FF33  20                 	db	32
   999  00FF34  0D                 	db	13
  1000  00FF35  0A                 	db	10
  1001  00FF36  00                 	db	0
  1002  00FF37                     STR_9:
  1003  00FF37  45                 	db	69	;'E'
  1004  00FF38  43                 	db	67	;'C'
  1005  00FF39  45                 	db	69	;'E'
  1006  00FF3A  33                 	db	51	;'3'
  1007  00FF3B  33                 	db	51	;'3'
  1008  00FF3C  30                 	db	48	;'0'
  1009  00FF3D  31                 	db	49	;'1'
  1010  00FF3E  4C                 	db	76	;'L'
  1011  00FF3F  20                 	db	32
  1012  00FF40  53                 	db	83	;'S'
  1013  00FF41  70                 	db	112	;'p'
  1014  00FF42  72                 	db	114	;'r'
  1015  00FF43  69                 	db	105	;'i'
  1016  00FF44  6E                 	db	110	;'n'
  1017  00FF45  67                 	db	103	;'g'
  1018  00FF46  20                 	db	32
  1019  00FF47  32                 	db	50	;'2'
  1020  00FF48  32                 	db	50	;'2'
  1021  00FF49  2D                 	db	45
  1022  00FF4A  53                 	db	83	;'S'
  1023  00FF4B  33                 	db	51	;'3'
  1024  00FF4C  00                 	db	0
  1025  00FF4D                     STR_7:
  1026  00FF4D  43                 	db	67	;'C'
  1027  00FF4E  61                 	db	97	;'a'
  1028  00FF4F  6E                 	db	110	;'n'
  1029  00FF50  6E                 	db	110	;'n'
  1030  00FF51  6F                 	db	111	;'o'
  1031  00FF52  74                 	db	116	;'t'
  1032  00FF53  20                 	db	32
  1033  00FF54  66                 	db	102	;'f'
  1034  00FF55  69                 	db	105	;'i'
  1035  00FF56  6E                 	db	110	;'n'
  1036  00FF57  64                 	db	100	;'d'
  1037  00FF58  20                 	db	32
  1038  00FF59  62                 	db	98	;'b'
  1039  00FF5A  75                 	db	117	;'u'
  1040  00FF5B  74                 	db	116	;'t'
  1041  00FF5C  74                 	db	116	;'t'
  1042  00FF5D  6F                 	db	111	;'o'
  1043  00FF5E  6E                 	db	110	;'n'
  1044  00FF5F  20                 	db	32
  1045  00FF60  0D                 	db	13
  1046  00FF61  0A                 	db	10
  1047  00FF62  00                 	db	0
  1048  00FF63                     STR_2:
  1049  00FF63  44                 	db	68	;'D'
  1050  00FF64  75                 	db	117	;'u'
  1051  00FF65  74                 	db	116	;'t'
  1052  00FF66  79                 	db	121	;'y'
  1053  00FF67  20                 	db	32
  1054  00FF68  43                 	db	67	;'C'
  1055  00FF69  79                 	db	121	;'y'
  1056  00FF6A  63                 	db	99	;'c'
  1057  00FF6B  6C                 	db	108	;'l'
  1058  00FF6C  65                 	db	101	;'e'
  1059  00FF6D  20                 	db	32
  1060  00FF6E  69                 	db	105	;'i'
  1061  00FF6F  73                 	db	115	;'s'
  1062  00FF70  20                 	db	32
  1063  00FF71  61                 	db	97	;'a'
  1064  00FF72  74                 	db	116	;'t'
  1065  00FF73  20                 	db	32
  1066  00FF74  30                 	db	48	;'0'
  1067  00FF75  20                 	db	32
  1068  00FF76  0D                 	db	13
  1069  00FF77  0A                 	db	10
  1070  00FF78  00                 	db	0
  1071  00FF79                     STR_4:
  1072  00FF79  20                 	db	32
  1073  00FF7A  54                 	db	84	;'T'
  1074  00FF7B  65                 	db	101	;'e'
  1075  00FF7C  6D                 	db	109	;'m'
  1076  00FF7D  70                 	db	112	;'p'
  1077  00FF7E  20                 	db	32
  1078  00FF7F  3D                 	db	61	;'='
  1079  00FF80  20                 	db	32
  1080  00FF81  25                 	db	37
  1081  00FF82  64                 	db	100	;'d'
  1082  00FF83  20                 	db	32
  1083  00FF84  43                 	db	67	;'C'
  1084  00FF85  20                 	db	32
  1085  00FF86  3D                 	db	61	;'='
  1086  00FF87  20                 	db	32
  1087  00FF88  25                 	db	37
  1088  00FF89  64                 	db	100	;'d'
  1089  00FF8A  20                 	db	32
  1090  00FF8B  46                 	db	70	;'F'
  1091  00FF8C  20                 	db	32
  1092  00FF8D  00                 	db	0
  1093  00FF8E                     STR_20:
  1094  00FF8E  30                 	db	48	;'0'
  1095  00FF8F  31                 	db	49	;'1'
  1096  00FF90  32                 	db	50	;'2'
  1097  00FF91  33                 	db	51	;'3'
  1098  00FF92  34                 	db	52	;'4'
  1099  00FF93  35                 	db	53	;'5'
  1100  00FF94  36                 	db	54	;'6'
  1101  00FF95  37                 	db	55	;'7'
  1102  00FF96  38                 	db	56	;'8'
  1103  00FF97  39                 	db	57	;'9'
  1104  00FF98  41                 	db	65	;'A'
  1105  00FF99  42                 	db	66	;'B'
  1106  00FF9A  43                 	db	67	;'C'
  1107  00FF9B  44                 	db	68	;'D'
  1108  00FF9C  45                 	db	69	;'E'
  1109  00FF9D  46                 	db	70	;'F'
  1110  00FF9E  00                 	db	0
  1111  00FF9F                     STR_21:
  1112  00FF9F  30                 	db	48	;'0'
  1113  00FFA0  31                 	db	49	;'1'
  1114  00FFA1  32                 	db	50	;'2'
  1115  00FFA2  33                 	db	51	;'3'
  1116  00FFA3  34                 	db	52	;'4'
  1117  00FFA4  35                 	db	53	;'5'
  1118  00FFA5  36                 	db	54	;'6'
  1119  00FFA6  37                 	db	55	;'7'
  1120  00FFA7  38                 	db	56	;'8'
  1121  00FFA8  39                 	db	57	;'9'
  1122  00FFA9  61                 	db	97	;'a'
  1123  00FFAA  62                 	db	98	;'b'
  1124  00FFAB  63                 	db	99	;'c'
  1125  00FFAC  64                 	db	100	;'d'
  1126  00FFAD  65                 	db	101	;'e'
  1127  00FFAE  66                 	db	102	;'f'
  1128  00FFAF  00                 	db	0
  1129  00FFB0                     STR_6:
  1130  00FFB0  4E                 	db	78	;'N'
  1131  00FFB1  45                 	db	69	;'E'
  1132  00FFB2  43                 	db	67	;'C'
  1133  00FFB3  5F                 	db	95	;'_'
  1134  00FFB4  43                 	db	67	;'C'
  1135  00FFB5  6F                 	db	111	;'o'
  1136  00FFB6  64                 	db	100	;'d'
  1137  00FFB7  65                 	db	101	;'e'
  1138  00FFB8  20                 	db	32
  1139  00FFB9  3D                 	db	61	;'='
  1140  00FFBA  20                 	db	32
  1141  00FFBB  25                 	db	37
  1142  00FFBC  78                 	db	120	;'x'
  1143  00FFBD  0D                 	db	13
  1144  00FFBE  0A                 	db	10
  1145  00FFBF  00                 	db	0
  1146  00FFC0                     STR_8:
  1147  00FFC0  62                 	db	98	;'b'
  1148  00FFC1  75                 	db	117	;'u'
  1149  00FFC2  74                 	db	116	;'t'
  1150  00FFC3  74                 	db	116	;'t'
  1151  00FFC4  6F                 	db	111	;'o'
  1152  00FFC5  6E                 	db	110	;'n'
  1153  00FFC6  20                 	db	32
  1154  00FFC7  3D                 	db	61	;'='
  1155  00FFC8  20                 	db	32
  1156  00FFC9  25                 	db	37
  1157  00FFCA  64                 	db	100	;'d'
  1158  00FFCB  20                 	db	32
  1159  00FFCC  0D                 	db	13
  1160  00FFCD  0A                 	db	10
  1161  00FFCE  00                 	db	0
  1162  00FFCF                     STR_10:
  1163  00FFCF  54                 	db	84	;'T'
  1164  00FFD0  65                 	db	101	;'e'
  1165  00FFD1  6D                 	db	109	;'m'
  1166  00FFD2  70                 	db	112	;'p'
  1167  00FFD3  65                 	db	101	;'e'
  1168  00FFD4  72                 	db	114	;'r'
  1169  00FFD5  61                 	db	97	;'a'
  1170  00FFD6  74                 	db	116	;'t'
  1171  00FFD7  75                 	db	117	;'u'
  1172  00FFD8  72                 	db	114	;'r'
  1173  00FFD9  65                 	db	101	;'e'
  1174  00FFDA  3A                 	db	58	;':'
  1175  00FFDB  00                 	db	0
  1176  00FFDC                     STR_15:
  1177  00FFDC  20                 	db	32
  1178  00FFDD  20                 	db	32
  1179  00FFDE  46                 	db	70	;'F'
  1180  00FFDF  41                 	db	65	;'A'
  1181  00FFE0  4E                 	db	78	;'N'
  1182  00FFE1  00                 	db	0
  1183  00FFE2                     STR_13:
  1184  00FFE2  54                 	db	84	;'T'
  1185  00FFE3  69                 	db	105	;'i'
  1186  00FFE4  6D                 	db	109	;'m'
  1187  00FFE5  65                 	db	101	;'e'
  1188  00FFE6  00                 	db	0
  1189  00FFE7                     STR_14:
  1190  00FFE7  44                 	db	68	;'D'
  1191  00FFE8  61                 	db	97	;'a'
  1192  00FFE9  74                 	db	116	;'t'
  1193  00FFEA  65                 	db	101	;'e'
  1194  00FFEB  00                 	db	0
  1195  00FFEC                     STR_18:
  1196  00FFEC  4F                 	db	79	;'O'
  1197  00FFED  4E                 	db	78	;'N'
  1198  00FFEE  20                 	db	32
  1199  00FFEF  00                 	db	0
  1200  00FFF0                     STR_19:
  1201  00FFF0  4F                 	db	79	;'O'
  1202  00FFF1  46                 	db	70	;'F'
  1203  00FFF2  46                 	db	70	;'F'
  1204  00FFF3  00                 	db	0
  1205  00FFF4                     STR_17:
  1206  00FFF4  52                 	db	82	;'R'
  1207  00FFF5  50                 	db	80	;'P'
  1208  00FFF6  4D                 	db	77	;'M'
  1209  00FFF7  00                 	db	0
  1210  00FFF8                     STR_11:
  1211  00FFF8  43                 	db	67	;'C'
  1212  00FFF9  2F                 	db	47
  1213  00FFFA  00                 	db	0
  1214  00FFFB                     STR_16:
  1215  00FFFB  44                 	db	68	;'D'
  1216  00FFFC  43                 	db	67	;'C'
  1217  00FFFD  00                 	db	0
  1218  0000                     
  1219                           ; #config settings
  1220  00FFFE  00                 	db	0	; dummy byte at the end
  1221  0000                     
  1222                           	psect	cinit
  1223  00200C                     __pcinit:
  1224                           	opt stack 0
  1225  00200C                     start_initialization:
  1226                           	opt stack 0
  1227  00200C                     __initialization:
  1228                           	opt stack 0
  1229                           
  1230                           ; Clear objects allocated to BANK0 (8 bytes)
  1231  00200C  EE00  F0F5         	lfsr	0,__pbssBANK0
  1232  002010  0E08               	movlw	8
  1233  002012                     clear_0:
  1234  002012  6AEE               	clrf	postinc0,c
  1235  002014  06E8               	decf	wreg,f,c
  1236  002016  E1FD               	bnz	clear_0
  1237                           
  1238                           ; Clear objects allocated to COMRAM (44 bytes)
  1239  002018  EE00  F041         	lfsr	0,__pbssCOMRAM
  1240  00201C  0E2C               	movlw	44
  1241  00201E                     clear_1:
  1242  00201E  6AEE               	clrf	postinc0,c
  1243  002020  06E8               	decf	wreg,f,c
  1244  002022  E1FD               	bnz	clear_1
  1245                           
  1246                           ; Initialize objects allocated to BANK1 (117 bytes)
  1247                           ; load TBLPTR registers with __pidataBANK1
  1248  002024  0E08               	movlw	low __pidataBANK1
  1249  002026  6EF6               	movwf	tblptrl,c
  1250  002028  0E21               	movlw	high __pidataBANK1
  1251  00202A  6EF7               	movwf	tblptrh,c
  1252  00202C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1253  00202E  6EF8               	movwf	tblptru,c
  1254  002030  EE01  F000         	lfsr	0,__pdataBANK1
  1255  002034  EE10 F075          	lfsr	1,117
  1256  002038                     copy_data0:
  1257  002038  0009               	tblrd		*+
  1258  00203A  CFF5 FFEE          	movff	tablat,postinc0
  1259  00203E  50E5               	movf	postdec1,w,c
  1260  002040  50E1               	movf	fsr1l,w,c
  1261  002042  E1FA               	bnz	copy_data0
  1262                           
  1263                           ; Initialize objects allocated to BANK0 (101 bytes)
  1264                           ; load TBLPTR registers with __pidataBANK0
  1265  002044  0E54               	movlw	low __pidataBANK0
  1266  002046  6EF6               	movwf	tblptrl,c
  1267  002048  0E22               	movlw	high __pidataBANK0
  1268  00204A  6EF7               	movwf	tblptrh,c
  1269  00204C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1270  00204E  6EF8               	movwf	tblptru,c
  1271  002050  EE00  F080         	lfsr	0,__pdataBANK0
  1272  002054  EE10 F065          	lfsr	1,101
  1273  002058                     copy_data1:
  1274  002058  0009               	tblrd		*+
  1275  00205A  CFF5 FFEE          	movff	tablat,postinc0
  1276  00205E  50E5               	movf	postdec1,w,c
  1277  002060  50E1               	movf	fsr1l,w,c
  1278  002062  E1FA               	bnz	copy_data1
  1279                           
  1280                           ; Initialize objects allocated to COMRAM (3 bytes)
  1281                           ; load TBLPTR registers with __pidataCOMRAM
  1282  002064  0E84               	movlw	low __pidataCOMRAM
  1283  002066  6EF6               	movwf	tblptrl,c
  1284  002068  0E2A               	movlw	high __pidataCOMRAM
  1285  00206A  6EF7               	movwf	tblptrh,c
  1286  00206C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1287  00206E  6EF8               	movwf	tblptru,c
  1288  002070  0009               	tblrd		*+	;fetch initializer
  1289  002072  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1290  002076  0009               	tblrd		*+	;fetch initializer
  1291  002078  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1292  00207C  0009               	tblrd		*+	;fetch initializer
  1293  00207E  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1294  002082                     end_of_initialization:
  1295                           	opt stack 0
  1296  002082                     __end_of__initialization:
  1297                           	opt stack 0
  1298  002082  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1299  002084  6EF8               	movwf	tblptru,c
  1300  002086  0100               	movlb	0
  1301  002088  EFDA  F007         	goto	_main	;jump to C main() function
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1l	equ	0xFE1
  1310                           
  1311                           	psect	bssCOMRAM
  1312  000041                     __pbssCOMRAM:
  1313                           	opt stack 0
  1314  000041                     _DS1621_tempC:
  1315                           	opt stack 0
  1316  000041                     	ds	2
  1317  000043                     _DS1621_tempF:
  1318                           	opt stack 0
  1319  000043                     	ds	2
  1320  000045                     _Time_Elapsed:
  1321                           	opt stack 0
  1322  000045                     	ds	2
  1323  000047                     _nec_ok:
  1324                           	opt stack 0
  1325  000047                     	ds	2
  1326  000049                     _rpm:
  1327                           	opt stack 0
  1328  000049                     	ds	2
  1329  00004B                     _rps:
  1330                           	opt stack 0
  1331  00004B                     	ds	2
  1332  00004D                     _txt:
  1333                           	opt stack 0
  1334  00004D                     	ds	2
  1335  00004F                     _FAN:
  1336                           	opt stack 0
  1337  00004F                     	ds	1
  1338  000050                     _Nec_code1:
  1339                           	opt stack 0
  1340  000050                     	ds	1
  1341  000051                     _Nec_state:
  1342                           	opt stack 0
  1343  000051                     	ds	1
  1344  000052                     __tft_type:
  1345                           	opt stack 0
  1346  000052                     	ds	1
  1347  000053                     _alarm_date:
  1348                           	opt stack 0
  1349  000053                     	ds	1
  1350  000054                     _alarm_hour:
  1351                           	opt stack 0
  1352  000054                     	ds	1
  1353  000055                     _alarm_minute:
  1354                           	opt stack 0
  1355  000055                     	ds	1
  1356  000056                     _alarm_second:
  1357                           	opt stack 0
  1358  000056                     	ds	1
  1359  000057                     _bit_count:
  1360                           	opt stack 0
  1361  000057                     	ds	1
  1362  000058                     _colstart:
  1363                           	opt stack 0
  1364  000058                     	ds	1
  1365  000059                     _day:
  1366                           	opt stack 0
  1367  000059                     	ds	1
  1368  00005A                     _dow:
  1369                           	opt stack 0
  1370  00005A                     	ds	1
  1371  00005B                     _duty_cycle:
  1372                           	opt stack 0
  1373  00005B                     	ds	1
  1374  00005C                     _found:
  1375                           	opt stack 0
  1376  00005C                     	ds	1
  1377  00005D                     _hour:
  1378                           	opt stack 0
  1379  00005D                     	ds	1
  1380  00005E                     _i:
  1381                           	opt stack 0
  1382  00005E                     	ds	1
  1383  00005F                     _minute:
  1384                           	opt stack 0
  1385  00005F                     	ds	1
  1386  000060                     _month:
  1387                           	opt stack 0
  1388  000060                     	ds	1
  1389  000061                     _rowstart:
  1390                           	opt stack 0
  1391  000061                     	ds	1
  1392  000062                     _second:
  1393                           	opt stack 0
  1394  000062                     	ds	1
  1395  000063                     _setup_alarm_hour:
  1396                           	opt stack 0
  1397  000063                     	ds	1
  1398  000064                     _setup_alarm_minute:
  1399                           	opt stack 0
  1400  000064                     	ds	1
  1401  000065                     _setup_alarm_second:
  1402                           	opt stack 0
  1403  000065                     	ds	1
  1404  000066                     _setup_day:
  1405                           	opt stack 0
  1406  000066                     	ds	1
  1407  000067                     _setup_hour:
  1408                           	opt stack 0
  1409  000067                     	ds	1
  1410  000068                     _setup_minute:
  1411                           	opt stack 0
  1412  000068                     	ds	1
  1413  000069                     _setup_month:
  1414                           	opt stack 0
  1415  000069                     	ds	1
  1416  00006A                     _setup_second:
  1417                           	opt stack 0
  1418  00006A                     	ds	1
  1419  00006B                     _setup_year:
  1420                           	opt stack 0
  1421  00006B                     	ds	1
  1422  00006C                     _year:
  1423                           	opt stack 0
  1424  00006C                     	ds	1
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           postdec1	equ	0xFE5
  1432                           fsr1l	equ	0xFE1
  1433                           
  1434                           	psect	dataCOMRAM
  1435  00006D                     __pdataCOMRAM:
  1436                           	opt stack 0
  1437  00006D                     _setup_fan_temp:
  1438                           	opt stack 0
  1439  00006D                     	ds	1
  1440  00006E                     _tempSecond:
  1441                           	opt stack 0
  1442  00006E                     	ds	1
  1443  00006F                     _wrap:
  1444                           	opt stack 0
  1445  00006F                     	ds	1
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           postinc0	equ	0xFEE
  1451                           wreg	equ	0xFE8
  1452                           postdec1	equ	0xFE5
  1453                           fsr1l	equ	0xFE1
  1454                           
  1455                           	psect	bssBANK0
  1456  0000F5                     __pbssBANK0:
  1457                           	opt stack 0
  1458  0000F5                     _Nec_code:
  1459                           	opt stack 0
  1460  0000F5                     	ds	4
  1461  0000F9                     _ALARMEN:
  1462                           	opt stack 0
  1463  0000F9                     	ds	2
  1464  0000FB                     _nbr:
  1465                           	opt stack 0
  1466  0000FB                     	ds	2
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1l	equ	0xFE1
  1475                           
  1476                           	psect	dataBANK0
  1477  000080                     __pdataBANK0:
  1478                           	opt stack 0
  1479  000080                     _alarm_time:
  1480                           	opt stack 0
  1481  000080                     	ds	9
  1482  000089                     _setup_alarm_time:
  1483                           	opt stack 0
  1484  000089                     	ds	9
  1485  000092                     _setup_date:
  1486                           	opt stack 0
  1487  000092                     	ds	9
  1488  00009B                     _setup_time:
  1489                           	opt stack 0
  1490  00009B                     	ds	9
  1491  0000A4                     _D1:
  1492                           	opt stack 0
  1493  0000A4                     	ds	8
  1494  0000AC                     _D2:
  1495                           	opt stack 0
  1496  0000AC                     	ds	7
  1497  0000B3                     _setup_fan_text:
  1498                           	opt stack 0
  1499  0000B3                     	ds	5
  1500  0000B8                     _Alarm_SW_Txt:
  1501                           	opt stack 0
  1502  0000B8                     	ds	4
  1503  0000BC                     _RTC_ALARM_Txt:
  1504                           	opt stack 0
  1505  0000BC                     	ds	2
  1506  0000BE                     _date:
  1507                           	opt stack 0
  1508  0000BE                     	ds	9
  1509  0000C7                     _time:
  1510                           	opt stack 0
  1511  0000C7                     	ds	9
  1512  0000D0                     _RPM_Txt:
  1513                           	opt stack 0
  1514  0000D0                     	ds	5
  1515  0000D5                     _DC_Txt:
  1516                           	opt stack 0
  1517  0000D5                     	ds	4
  1518  0000D9                     _Fan_SW_Txt:
  1519                           	opt stack 0
  1520  0000D9                     	ds	4
  1521  0000DD                     _tempC:
  1522                           	opt stack 0
  1523  0000DD                     	ds	4
  1524  0000E1                     _tempF:
  1525                           	opt stack 0
  1526  0000E1                     	ds	4
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           postdec1	equ	0xFE5
  1534                           fsr1l	equ	0xFE1
  1535                           
  1536                           	psect	dataBANK1
  1537  000100                     __pdataBANK1:
  1538                           	opt stack 0
  1539  000100                     _color:
  1540                           	opt stack 0
  1541  000100                     	ds	42
  1542  00012A                     _D3:
  1543                           	opt stack 0
  1544  00012A                     	ds	21
  1545  00013F                     _array1:
  1546                           	opt stack 0
  1547  00013F                     	ds	21
  1548  000154                     _buffer:
  1549                           	opt stack 0
  1550  000154                     	ds	33
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           postdec1	equ	0xFE5
  1558                           fsr1l	equ	0xFE1
  1559                           
  1560                           	psect	cstackBANK1
  1561  000175                     __pcstackBANK1:
  1562                           	opt stack 0
  1563  000175                     printf@idx:
  1564                           	opt stack 0
  1565                           
  1566                           ; 1 bytes @ 0x0
  1567  000175                     	ds	1
  1568  000176                     printf@cp:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x1
  1572  000176                     	ds	2
  1573  000178                     _printf$1771:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x3
  1577  000178                     	ds	2
  1578  00017A                     _printf$1772:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x5
  1582  00017A                     	ds	2
  1583  00017C                     _printf$1778:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x7
  1587  00017C                     	ds	2
  1588  00017E                     printf@len:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x9
  1592  00017E                     	ds	2
  1593  000180                     printf@ap:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0xB
  1597  000180                     	ds	2
  1598  000182                     printf@val:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0xD
  1602  000182                     	ds	2
  1603  000184                     printf@prec:
  1604                           	opt stack 0
  1605                           
  1606                           ; 1 bytes @ 0xF
  1607  000184                     	ds	1
  1608  000185                     printf@width:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x10
  1612  000185                     	ds	2
  1613  000187                     printf@c:
  1614                           	opt stack 0
  1615                           
  1616                           ; 1 bytes @ 0x12
  1617  000187                     	ds	1
  1618  000188                     printf@flag:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x13
  1622  000188                     	ds	2
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           
  1632                           	psect	cstackBANK0
  1633  0000E5                     __pcstackBANK0:
  1634                           	opt stack 0
  1635  0000E5                     ??_drawtext:
  1636  0000E5                     do_update_pwm@dc_f:
  1637                           	opt stack 0
  1638                           
  1639                           ; 3 bytes @ 0x0
  1640  0000E5                     	ds	2
  1641  0000E7                     drawtext@x:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x2
  1645  0000E7                     	ds	1
  1646  0000E8                     do_update_pwm@duty_cycle:
  1647                           	opt stack 0
  1648  0000E8                     drawtext@textsize:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x3
  1652  0000E8                     	ds	1
  1653  0000E9                     do_update_pwm@dc_I:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x4
  1657  0000E9                     	ds	1
  1658  0000EA                     drawtext@i:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x5
  1662  0000EA                     	ds	2
  1663  0000EC                     drawtext@cursor_y:
  1664                           	opt stack 0
  1665                           
  1666                           ; 1 bytes @ 0x7
  1667  0000EC                     	ds	1
  1668  0000ED                     drawtext@cursor_x:
  1669                           	opt stack 0
  1670                           
  1671                           ; 1 bytes @ 0x8
  1672  0000ED                     	ds	1
  1673  0000EE                     ??_Update_Screen:
  1674                           
  1675                           ; 0 bytes @ 0x9
  1676  0000EE                     	ds	2
  1677  0000F0                     Update_Screen@neg_tempF:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0xB
  1681  0000F0                     	ds	2
  1682  0000F2                     
  1683                           ; 0 bytes @ 0xD
  1684  0000F2                     	ds	1
  1685  0000F3                     main@j:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0xE
  1689  0000F3                     	ds	2
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1l	equ	0xFE1
  1698                           
  1699                           	psect	cstackCOMRAM
  1700  000001                     __pcstackCOMRAM:
  1701                           	opt stack 0
  1702  000001                     ??_INT0_isr:
  1703  000001                     
  1704                           ; 2 bytes @ 0x0
  1705  000001                     	ds	2
  1706  000003                     ??_chkisr:
  1707                           
  1708                           ; 0 bytes @ 0x2
  1709  000003                     	ds	14
  1710  000011                     ??_isdigit:
  1711  000011                     ?_strlen:
  1712                           	opt stack 0
  1713  000011                     ?___wmul:
  1714                           	opt stack 0
  1715  000011                     ?___lwdiv:
  1716                           	opt stack 0
  1717  000011                     ?___ftpack:
  1718                           	opt stack 0
  1719  000011                     ?___fttol:
  1720                           	opt stack 0
  1721  000011                     putch@c:
  1722                           	opt stack 0
  1723  000011                     spiwrite@x:
  1724                           	opt stack 0
  1725  000011                     I2C_Read@ack:
  1726                           	opt stack 0
  1727  000011                     I2C_Write@outByte:
  1728                           	opt stack 0
  1729  000011                     OpenUSART@spbrg:
  1730                           	opt stack 0
  1731  000011                     ___wmul@multiplier:
  1732                           	opt stack 0
  1733  000011                     ___lwdiv@dividend:
  1734                           	opt stack 0
  1735  000011                     strcpy@to:
  1736                           	opt stack 0
  1737  000011                     strlen@s:
  1738                           	opt stack 0
  1739  000011                     ___ftpack@arg:
  1740                           	opt stack 0
  1741  000011                     ___fttol@f1:
  1742                           	opt stack 0
  1743  000011                     I2C_Init@c:
  1744                           	opt stack 0
  1745                           
  1746                           ; 4 bytes @ 0x10
  1747  000011                     	ds	1
  1748  000012                     spiwrite@spidata:
  1749                           	opt stack 0
  1750  000012                     I2C_Read@n:
  1751                           	opt stack 0
  1752  000012                     I2C_Write@n:
  1753                           	opt stack 0
  1754  000012                     _isdigit$2301:
  1755                           	opt stack 0
  1756                           
  1757                           ; 1 bytes @ 0x11
  1758  000012                     	ds	1
  1759  000013                     ??_strlen:
  1760  000013                     write_command@cmd_:
  1761                           	opt stack 0
  1762  000013                     write_data@data_:
  1763                           	opt stack 0
  1764  000013                     I2C_Read@inByte:
  1765                           	opt stack 0
  1766  000013                     I2C_Write_Cmd_Only@Cmd:
  1767                           	opt stack 0
  1768  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1769                           	opt stack 0
  1770  000013                     DS3231_Setup_Time@Device:
  1771                           	opt stack 0
  1772  000013                     OpenUSART@config:
  1773                           	opt stack 0
  1774  000013                     isdigit@c:
  1775                           	opt stack 0
  1776  000013                     ___wmul@multiplicand:
  1777                           	opt stack 0
  1778  000013                     ___lwdiv@divisor:
  1779                           	opt stack 0
  1780  000013                     strcpy@from:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x12
  1784  000013                     	ds	1
  1785  000014                     ?_DS1621_Read_Temp:
  1786                           	opt stack 0
  1787  000014                     setAddrWindow@y0:
  1788                           	opt stack 0
  1789  000014                     I2C_Write_Cmd_Only@Device:
  1790                           	opt stack 0
  1791  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1792                           	opt stack 0
  1793  000014                     DS3231_Read_Time@Address:
  1794                           	opt stack 0
  1795  000014                     DS3231_Setup_Time@Address:
  1796                           	opt stack 0
  1797  000014                     ___ftpack@exp:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x13
  1801  000014                     	ds	1
  1802  000015                     ??___fttol:
  1803  000015                     setAddrWindow@x1:
  1804                           	opt stack 0
  1805  000015                     I2C_Write_Cmd_Write_Data@Device:
  1806                           	opt stack 0
  1807  000015                     DS3231_Read_Time@Device:
  1808                           	opt stack 0
  1809  000015                     ___ftpack@sign:
  1810                           	opt stack 0
  1811  000015                     ___lwdiv@counter:
  1812                           	opt stack 0
  1813  000015                     ___wmul@product:
  1814                           	opt stack 0
  1815  000015                     strcpy@cp:
  1816                           	opt stack 0
  1817  000015                     strlen@cp:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x14
  1821  000015                     	ds	1
  1822  000016                     ??___ftpack:
  1823  000016                     setAddrWindow@y1:
  1824                           	opt stack 0
  1825  000016                     DS1621_Init@Device:
  1826                           	opt stack 0
  1827  000016                     DS1621_Read_Temp@Cmd:
  1828                           	opt stack 0
  1829  000016                     ___lwdiv@quotient:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x15
  1833  000016                     	ds	1
  1834  000017                     ?___awdiv:
  1835                           	opt stack 0
  1836  000017                     setAddrWindow@x0:
  1837                           	opt stack 0
  1838  000017                     DS1621_Read_Temp@Data_Ret:
  1839                           	opt stack 0
  1840  000017                     delay_ms@ms:
  1841                           	opt stack 0
  1842  000017                     ___awdiv@dividend:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x16
  1846  000017                     	ds	1
  1847  000018                     ?___lwmod:
  1848                           	opt stack 0
  1849  000018                     drawPixel@y:
  1850                           	opt stack 0
  1851  000018                     drawFastVLine@y:
  1852                           	opt stack 0
  1853  000018                     fillRectangle@y:
  1854                           	opt stack 0
  1855  000018                     DS1621_Read_Temp@Device:
  1856                           	opt stack 0
  1857  000018                     ___lwmod@dividend:
  1858                           	opt stack 0
  1859                           
  1860                           ; 2 bytes @ 0x17
  1861  000018                     	ds	1
  1862  000019                     ??_delay_ms:
  1863  000019                     ?___lbtoft:
  1864                           	opt stack 0
  1865  000019                     drawFastVLine@h:
  1866                           	opt stack 0
  1867  000019                     fillRectangle@w:
  1868                           	opt stack 0
  1869  000019                     drawPixel@color:
  1870                           	opt stack 0
  1871  000019                     ___awdiv@divisor:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x18
  1875  000019                     	ds	1
  1876  00001A                     fillRectangle@h:
  1877                           	opt stack 0
  1878  00001A                     ___fttol@sign1:
  1879                           	opt stack 0
  1880  00001A                     drawFastVLine@color:
  1881                           	opt stack 0
  1882  00001A                     ___lwmod@divisor:
  1883                           	opt stack 0
  1884                           
  1885                           ; 2 bytes @ 0x19
  1886  00001A                     	ds	1
  1887  00001B                     drawPixel@x:
  1888                           	opt stack 0
  1889  00001B                     ___awdiv@counter:
  1890                           	opt stack 0
  1891  00001B                     delay_ms@count:
  1892                           	opt stack 0
  1893  00001B                     fillRectangle@color:
  1894                           	opt stack 0
  1895  00001B                     ___fttol@lval:
  1896                           	opt stack 0
  1897                           
  1898                           ; 4 bytes @ 0x1A
  1899  00001B                     	ds	1
  1900  00001C                     ??_drawFastVLine:
  1901  00001C                     ___awdiv@sign:
  1902                           	opt stack 0
  1903  00001C                     ___lbtoft@c:
  1904                           	opt stack 0
  1905  00001C                     ___lwmod@counter:
  1906                           	opt stack 0
  1907  00001C                     drawCircle@x0:
  1908                           	opt stack 0
  1909                           
  1910                           ; 2 bytes @ 0x1B
  1911  00001C                     	ds	1
  1912  00001D                     ??_fillRectangle:
  1913  00001D                     ?_printf:
  1914                           	opt stack 0
  1915  00001D                     ?___ftmul:
  1916                           	opt stack 0
  1917  00001D                     printf@f:
  1918                           	opt stack 0
  1919  00001D                     ___awdiv@quotient:
  1920                           	opt stack 0
  1921  00001D                     ___ftmul@f1:
  1922                           	opt stack 0
  1923                           
  1924                           ; 3 bytes @ 0x1C
  1925  00001D                     	ds	1
  1926  00001E                     drawCircle@y0:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x1D
  1930  00001E                     	ds	1
  1931  00001F                     ?_get_RPM:
  1932                           	opt stack 0
  1933  00001F                     ?___awmod:
  1934                           	opt stack 0
  1935  00001F                     ___fttol@exp1:
  1936                           	opt stack 0
  1937  00001F                     Set_DC_RGB@duty_cycle:
  1938                           	opt stack 0
  1939  00001F                     Set_RPM_RGB@rpm:
  1940                           	opt stack 0
  1941  00001F                     ___awmod@dividend:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x1E
  1945  00001F                     	ds	1
  1946  000020                     drawFastVLine@hi:
  1947                           	opt stack 0
  1948  000020                     drawCircle@r:
  1949                           	opt stack 0
  1950  000020                     ___ftmul@f2:
  1951                           	opt stack 0
  1952                           
  1953                           ; 3 bytes @ 0x1F
  1954  000020                     	ds	1
  1955  000021                     ??_Set_RPM_RGB:
  1956  000021                     Set_DC_RGB@d1color_C:
  1957                           	opt stack 0
  1958  000021                     drawFastVLine@lo:
  1959                           	opt stack 0
  1960  000021                     fillRectangle@hi:
  1961                           	opt stack 0
  1962  000021                     get_RPM@RPS:
  1963                           	opt stack 0
  1964  000021                     ___awmod@divisor:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x20
  1968  000021                     	ds	1
  1969  000022                     Set_DC_RGB@d1color_I:
  1970                           	opt stack 0
  1971  000022                     drawFastVLine@x:
  1972                           	opt stack 0
  1973  000022                     fillRectangle@lo:
  1974                           	opt stack 0
  1975  000022                     Set_RPM_RGB@RPM:
  1976                           	opt stack 0
  1977  000022                     drawCircle@color:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x21
  1981  000022                     	ds	1
  1982  000023                     ??___ftmul:
  1983  000023                     fillRect@y:
  1984                           	opt stack 0
  1985  000023                     fillRectangle@x:
  1986                           	opt stack 0
  1987  000023                     ___awmod@counter:
  1988                           	opt stack 0
  1989                           
  1990                           ; 1 bytes @ 0x22
  1991  000023                     	ds	1
  1992  000024                     ??_drawCircle:
  1993  000024                     Set_RPM_RGB@mask:
  1994                           	opt stack 0
  1995  000024                     fillRect@w:
  1996                           	opt stack 0
  1997  000024                     ___awmod@sign:
  1998                           	opt stack 0
  1999  000024                     fillScreen@color:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0x23
  2003  000024                     	ds	1
  2004  000025                     Set_RPM_RGB@maskedValue:
  2005                           	opt stack 0
  2006  000025                     fillRect@h:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0x24
  2010  000025                     	ds	1
  2011  000026                     ___ftmul@exp:
  2012                           	opt stack 0
  2013  000026                     fillRect@color:
  2014                           	opt stack 0
  2015  000026                     drawCircle@ddF_x:
  2016                           	opt stack 0
  2017                           
  2018                           ; 2 bytes @ 0x25
  2019  000026                     	ds	1
  2020  000027                     ___ftmul@f3_as_product:
  2021                           	opt stack 0
  2022                           
  2023                           ; 3 bytes @ 0x26
  2024  000027                     	ds	1
  2025  000028                     ??_fillRect:
  2026  000028                     drawCircle@ddF_y:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x27
  2030  000028                     	ds	2
  2031  00002A                     ___ftmul@cntr:
  2032                           	opt stack 0
  2033  00002A                     drawCircle@f:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x29
  2037  00002A                     	ds	1
  2038  00002B                     ??_printf:
  2039  00002B                     fillRect@x:
  2040                           	opt stack 0
  2041  00002B                     ___ftmul@sign:
  2042                           	opt stack 0
  2043                           
  2044                           ; 1 bytes @ 0x2A
  2045  00002B                     	ds	1
  2046  00002C                     ?___ftdiv:
  2047                           	opt stack 0
  2048  00002C                     fillRect@i:
  2049                           	opt stack 0
  2050  00002C                     drawCircle@x:
  2051                           	opt stack 0
  2052  00002C                     ___ftdiv@f1:
  2053                           	opt stack 0
  2054                           
  2055                           ; 3 bytes @ 0x2B
  2056  00002C                     	ds	2
  2057  00002E                     drawChar@y:
  2058                           	opt stack 0
  2059  00002E                     drawCircle@y:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x2D
  2063  00002E                     	ds	1
  2064  00002F                     drawChar@c:
  2065                           	opt stack 0
  2066  00002F                     ___ftdiv@f2:
  2067                           	opt stack 0
  2068                           
  2069                           ; 3 bytes @ 0x2E
  2070  00002F                     	ds	1
  2071  000030                     drawChar@color:
  2072                           	opt stack 0
  2073                           
  2074                           ; 2 bytes @ 0x2F
  2075  000030                     	ds	2
  2076  000032                     ??___ftdiv:
  2077  000032                     drawChar@bg:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x31
  2081  000032                     	ds	2
  2082  000034                     drawChar@size:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0x33
  2086  000034                     	ds	1
  2087  000035                     drawChar@line:
  2088                           	opt stack 0
  2089  000035                     ___ftdiv@cntr:
  2090                           	opt stack 0
  2091                           
  2092                           ; 1 bytes @ 0x34
  2093  000035                     	ds	1
  2094  000036                     drawChar@x:
  2095                           	opt stack 0
  2096  000036                     ___ftdiv@f3:
  2097                           	opt stack 0
  2098                           
  2099                           ; 3 bytes @ 0x35
  2100  000036                     	ds	1
  2101  000037                     drawChar@j:
  2102                           	opt stack 0
  2103                           
  2104                           ; 1 bytes @ 0x36
  2105  000037                     	ds	1
  2106  000038                     drawChar@i:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x37
  2110  000038                     	ds	1
  2111  000039                     drawtext@y:
  2112                           	opt stack 0
  2113  000039                     ___ftdiv@exp:
  2114                           	opt stack 0
  2115                           
  2116                           ; 1 bytes @ 0x38
  2117  000039                     	ds	1
  2118  00003A                     ___ftdiv@sign:
  2119                           	opt stack 0
  2120  00003A                     drawtext@_text:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x39
  2124  00003A                     	ds	1
  2125  00003B                     ??_do_update_pwm:
  2126                           
  2127                           ; 0 bytes @ 0x3A
  2128  00003B                     	ds	1
  2129  00003C                     drawtext@color:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x3B
  2133  00003C                     	ds	2
  2134  00003E                     drawtext@bg:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x3D
  2138  00003E                     	ds	2
  2139  000040                     drawtext@size:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0x3F
  2143  000040                     	ds	1
  2144  000041                     tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           postinc0	equ	0xFEE
  2149                           wreg	equ	0xFE8
  2150                           postdec1	equ	0xFE5
  2151                           fsr1l	equ	0xFE1
  2152                           
  2153                           ; 0 bytes @ 0x40
  2154 ;;
  2155 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2156 ;;
  2157 ;; *************** function _main *****************
  2158 ;; Defined at:
  2159 ;;		line 119 in file "lap12p1.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;		None
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  j               2   14[BANK0 ] int 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;		None               void
  2166 ;; Registers used:
  2167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;Total ram usage:        3 bytes
  2178 ;; Hardware stack levels required when called:   11
  2179 ;; This function calls:
  2180 ;;		_Activate_Buzzer
  2181 ;;		_DS1621_Read_Temp
  2182 ;;		_DS3231_Read_Time
  2183 ;;		_DS3231_Setup_Time
  2184 ;;		_Deactivate_Buzzer
  2185 ;;		_Decrease_Speed
  2186 ;;		_Do_Beep
  2187 ;;		_Do_Init
  2188 ;;		_Increase_Speed
  2189 ;;		_Initialize_Screen
  2190 ;;		_Set_DC_RGB
  2191 ;;		_Set_RPM_RGB
  2192 ;;		_Toggle_Fan
  2193 ;;		_Update_Screen
  2194 ;;		_Wait_Half_Second
  2195 ;;		___awdiv
  2196 ;;		___wmul
  2197 ;;		_do_update_pwm
  2198 ;;		_get_RPM
  2199 ;;		_printf
  2200 ;; This function is called by:
  2201 ;;		Startup code after reset
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text0
  2206  000FB4                     __ptext0:
  2207                           	opt stack 0
  2208  000FB4                     _main:
  2209                           	opt stack 20
  2210                           
  2211                           ;lap12p1.c: 121: Do_Init();
  2212                           
  2213                           ;incstack = 0
  2214  000FB4  EC3C  F012         	call	_Do_Init	;wreg free
  2215                           
  2216                           ;lap12p1.c: 122: T3CONbits.TMR3ON=1;
  2217  000FB8  80B1               	bsf	4017,0,c	;volatile
  2218                           
  2219                           ;lap12p1.c: 123: Initialize_Screen();
  2220  000FBA  ECA5  F006         	call	_Initialize_Screen	;wreg free
  2221                           
  2222                           ;lap12p1.c: 124: duty_cycle=50;
  2223  000FBE  0E32               	movlw	50
  2224  000FC0  6E5B               	movwf	_duty_cycle,c
  2225                           
  2226                           ;lap12p1.c: 125: do_update_pwm(duty_cycle);
  2227  000FC2  505B               	movf	_duty_cycle,w,c
  2228  000FC4  ECD5  F00E         	call	_do_update_pwm
  2229  000FC8  D000               	goto	l7365
  2230  000FCA                     l7365:
  2231                           
  2232                           ;lap12p1.c: 128: {
  2233                           ;lap12p1.c: 130: DS3231_Read_Time();
  2234  000FCA  EC5D  F011         	call	_DS3231_Read_Time	;wreg free
  2235                           
  2236                           ;lap12p1.c: 131: if(tempSecond != second)
  2237  000FCE  5062               	movf	_second,w,c
  2238  000FD0  186E               	xorwf	_tempSecond,w,c
  2239  000FD2  B4D8               	btfsc	status,2,c
  2240  000FD4  D069               	goto	l7389
  2241                           
  2242                           ;lap12p1.c: 132: {
  2243                           ;lap12p1.c: 133: tempSecond = second;
  2244  000FD6  C062  F06E         	movff	_second,_tempSecond
  2245                           
  2246                           ;lap12p1.c: 134: DS1621_tempC = DS1621_Read_Temp();
  2247  000FDA  ECD1  F012         	call	_DS1621_Read_Temp	;wreg free
  2248  000FDE  C014  F041         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2249  000FE2  C015  F042         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2250                           
  2251                           ;lap12p1.c: 135: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2252  000FE6  C041  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2253  000FEA  C042  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2254  000FEE  0E00               	movlw	0
  2255  000FF0  6E14               	movwf	___wmul@multiplicand+1,c
  2256  000FF2  0E09               	movlw	9
  2257  000FF4  6E13               	movwf	___wmul@multiplicand,c
  2258  000FF6  EC15  F014         	call	___wmul	;wreg free
  2259  000FFA  C011  F017         	movff	?___wmul,___awdiv@dividend
  2260  000FFE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2261  001002  0E00               	movlw	0
  2262  001004  6E1A               	movwf	___awdiv@divisor+1,c
  2263  001006  0E05               	movlw	5
  2264  001008  6E19               	movwf	___awdiv@divisor,c
  2265  00100A  EC36  F00F         	call	___awdiv	;wreg free
  2266  00100E  0E20               	movlw	32
  2267  001010  2417               	addwf	?___awdiv,w,c
  2268  001012  6E43               	movwf	_DS1621_tempF,c
  2269  001014  0E00               	movlw	0
  2270  001016  2018               	addwfc	?___awdiv+1,w,c
  2271  001018  6E44               	movwf	_DS1621_tempF+1,c
  2272                           
  2273                           ;lap12p1.c: 136: rpm = get_RPM();
  2274  00101A  ECF1  F012         	call	_get_RPM	;wreg free
  2275  00101E  C01F  F049         	movff	?_get_RPM,_rpm
  2276  001022  C020  F04A         	movff	?_get_RPM+1,_rpm+1
  2277                           
  2278                           ;lap12p1.c: 137: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,
  2279                           ;lap12p1.c: 138: day,year);
  2280  001026  0EE6               	movlw	low STR_3
  2281  001028  6E1D               	movwf	printf@f,c
  2282  00102A  0EFE               	movlw	high STR_3
  2283  00102C  6E1E               	movwf	printf@f+1,c
  2284  00102E  C05D  F01F         	movff	_hour,?_printf+2
  2285  001032  6A20               	clrf	?_printf+3,c
  2286  001034  C05F  F021         	movff	_minute,?_printf+4
  2287  001038  6A22               	clrf	?_printf+5,c
  2288  00103A  C062  F023         	movff	_second,?_printf+6
  2289  00103E  6A24               	clrf	?_printf+7,c
  2290  001040  C060  F025         	movff	_month,?_printf+8
  2291  001044  6A26               	clrf	?_printf+9,c
  2292  001046  C059  F027         	movff	_day,?_printf+10
  2293  00104A  6A28               	clrf	?_printf+11,c
  2294  00104C  C06C  F029         	movff	_year,?_printf+12
  2295  001050  6A2A               	clrf	?_printf+13,c
  2296  001052  EC0E  F000         	call	_printf	;wreg free
  2297                           
  2298                           ;lap12p1.c: 139: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2299  001056  0E79               	movlw	low STR_4
  2300  001058  6E1D               	movwf	printf@f,c
  2301  00105A  0EFF               	movlw	high STR_4
  2302  00105C  6E1E               	movwf	printf@f+1,c
  2303  00105E  C041  F01F         	movff	_DS1621_tempC,?_printf+2
  2304  001062  C042  F020         	movff	_DS1621_tempC+1,?_printf+3
  2305  001066  C043  F021         	movff	_DS1621_tempF,?_printf+4
  2306  00106A  C044  F022         	movff	_DS1621_tempF+1,?_printf+5
  2307  00106E  EC0E  F000         	call	_printf	;wreg free
  2308                           
  2309                           ;lap12p1.c: 140: printf ("RPM = %d duty_cycle = %d\r\n", rpm, duty_cycle);
  2310  001072  0E04               	movlw	low STR_5
  2311  001074  6E1D               	movwf	printf@f,c
  2312  001076  0EFF               	movlw	high STR_5
  2313  001078  6E1E               	movwf	printf@f+1,c
  2314  00107A  C049  F01F         	movff	_rpm,?_printf+2
  2315  00107E  C04A  F020         	movff	_rpm+1,?_printf+3
  2316  001082  C05B  F021         	movff	_duty_cycle,?_printf+4
  2317  001086  6A22               	clrf	?_printf+5,c
  2318  001088  EC0E  F000         	call	_printf	;wreg free
  2319                           
  2320                           ;lap12p1.c: 141: Set_DC_RGB(duty_cycle);
  2321  00108C  C05B  F01F         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2322  001090  6A20               	clrf	Set_DC_RGB@duty_cycle+1,c
  2323  001092  EC6D  F013         	call	_Set_DC_RGB	;wreg free
  2324                           
  2325                           ;lap12p1.c: 142: Set_RPM_RGB(rpm);
  2326  001096  C049  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2327  00109A  C04A  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2328  00109E  EC8F  F011         	call	_Set_RPM_RGB	;wreg free
  2329                           
  2330                           ;lap12p1.c: 143: Update_Screen();
  2331  0010A2  ECBB  F004         	call	_Update_Screen	;wreg free
  2332  0010A6  D000               	goto	l7389
  2333  0010A8                     l7389:
  2334                           
  2335                           ;lap12p1.c: 144: }
  2336                           ;lap12p1.c: 147: if (nec_ok == 1)
  2337  0010A8  0447               	decf	_nec_ok,w,c
  2338  0010AA  1048               	iorwf	_nec_ok+1,w,c
  2339  0010AC  A4D8               	btfss	status,2,c
  2340  0010AE  D78D               	goto	l7365
  2341                           
  2342                           ;lap12p1.c: 148: {
  2343                           ;lap12p1.c: 151: nec_ok = 0;
  2344  0010B0  0E00               	movlw	0
  2345  0010B2  6E48               	movwf	_nec_ok+1,c
  2346  0010B4  0E00               	movlw	0
  2347  0010B6  6E47               	movwf	_nec_ok,c
  2348                           
  2349                           ;lap12p1.c: 152: printf ("NEC_Code = %x\r\n", Nec_code1);
  2350  0010B8  0EB0               	movlw	low STR_6
  2351  0010BA  6E1D               	movwf	printf@f,c
  2352  0010BC  0EFF               	movlw	high STR_6
  2353  0010BE  6E1E               	movwf	printf@f+1,c
  2354  0010C0  C050  F01F         	movff	_Nec_code1,?_printf+2
  2355  0010C4  6A20               	clrf	?_printf+3,c
  2356  0010C6  EC0E  F000         	call	_printf	;wreg free
  2357                           
  2358                           ;lap12p1.c: 154: INTCONbits.INT0IE = 1;
  2359  0010CA  88F2               	bsf	intcon,4,c	;volatile
  2360                           
  2361                           ;lap12p1.c: 155: INTCON2bits.INTEDG0 = 0;
  2362  0010CC  9CF1               	bcf	intcon2,6,c	;volatile
  2363                           
  2364                           ;lap12p1.c: 157: found = 0xff;
  2365  0010CE  685C               	setf	_found,c
  2366                           
  2367                           ;lap12p1.c: 158: for (int j=0; j< 21; j++)
  2368  0010D0  0E00               	movlw	0
  2369  0010D2  0100               	movlb	0	; () banked
  2370  0010D4  6FF4               	movwf	(main@j+1)& (0+255),b
  2371  0010D6  0E00               	movlw	0
  2372  0010D8  6FF3               	movwf	main@j& (0+255),b
  2373                           
  2374                           ; BSR set to: 0
  2375  0010DA  0100               	movlb	0	; () banked
  2376  0010DC  BFF4               	btfsc	(main@j+1)& (0+255),7,b
  2377  0010DE  D00A               	goto	l7407
  2378  0010E0  0100               	movlb	0	; () banked
  2379  0010E2  51F4               	movf	(main@j+1)& (0+255),w,b
  2380  0010E4  E125               	bnz	l272
  2381  0010E6  0E15               	movlw	21
  2382  0010E8  0100               	movlb	0	; () banked
  2383  0010EA  5DF3               	subwf	main@j& (0+255),w,b
  2384  0010EC  B0D8               	btfsc	status,0,c
  2385  0010EE  D020               	goto	l272
  2386  0010F0  D001               	goto	l7407
  2387                           
  2388                           ; BSR set to: 0
  2389  0010F2  D01E               	goto	l272
  2390  0010F4                     l7407:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;lap12p1.c: 159: {
  2394                           ;lap12p1.c: 160: if (Nec_code1 == array1[j])
  2395  0010F4  0E3F               	movlw	low _array1
  2396  0010F6  0100               	movlb	0	; () banked
  2397  0010F8  25F3               	addwf	main@j& (0+255),w,b
  2398  0010FA  6ED9               	movwf	fsr2l,c
  2399  0010FC  0E01               	movlw	high _array1
  2400  0010FE  0100               	movlb	0	; () banked
  2401  001100  21F4               	addwfc	(main@j+1)& (0+255),w,b
  2402  001102  6EDA               	movwf	fsr2h,c
  2403  001104  5050               	movf	_Nec_code1,w,c
  2404  001106  18DE               	xorwf	postinc2,w,c
  2405  001108  A4D8               	btfss	status,2,c
  2406  00110A  D008               	goto	l7413
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;lap12p1.c: 161: {
  2410                           ;lap12p1.c: 162: found = j;
  2411  00110C  C0F3  F05C         	movff	main@j,_found
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;lap12p1.c: 163: j = 21;
  2415  001110  0E00               	movlw	0
  2416  001112  0100               	movlb	0	; () banked
  2417  001114  6FF4               	movwf	(main@j+1)& (0+255),b
  2418  001116  0E15               	movlw	21
  2419  001118  6FF3               	movwf	main@j& (0+255),b
  2420  00111A  D000               	goto	l7413
  2421  00111C                     l7413:
  2422                           
  2423                           ; BSR set to: 0
  2424  00111C  0100               	movlb	0	; () banked
  2425  00111E  4BF3               	infsnz	main@j& (0+255),f,b
  2426  001120  2BF4               	incf	(main@j+1)& (0+255),f,b
  2427                           
  2428                           ; BSR set to: 0
  2429  001122  0100               	movlb	0	; () banked
  2430  001124  BFF4               	btfsc	(main@j+1)& (0+255),7,b
  2431  001126  D7E6               	goto	l7407
  2432  001128  0100               	movlb	0	; () banked
  2433  00112A  51F4               	movf	(main@j+1)& (0+255),w,b
  2434  00112C  E101               	bnz	u6320
  2435  00112E  D7DB               	goto	L1
  2436  001130                     u6320:
  2437  001130                     l272:
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;lap12p1.c: 164: }
  2441                           ;lap12p1.c: 165: }
  2442                           ;lap12p1.c: 166: PORTBbits.RB7 = 0 ;
  2443  001130  9E81               	bcf	3969,7,c	;volatile
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;lap12p1.c: 167: Activate_Buzzer();
  2447  001132  ECD1  F014         	call	_Activate_Buzzer	;wreg free
  2448                           
  2449                           ;lap12p1.c: 168: PORTE = D3[found];
  2450  001136  505C               	movf	_found,w,c
  2451  001138  0D01               	mullw	1
  2452  00113A  0E2A               	movlw	low _D3
  2453  00113C  24F3               	addwf	prodl,w,c
  2454  00113E  6ED9               	movwf	fsr2l,c
  2455  001140  0E01               	movlw	high _D3
  2456  001142  20F4               	addwfc	prodh,w,c
  2457  001144  6EDA               	movwf	fsr2h,c
  2458  001146  50DF               	movf	indf2,w,c
  2459  001148  6E84               	movwf	3972,c	;volatile
  2460                           
  2461                           ;lap12p1.c: 169: Wait_Half_Second();
  2462  00114A  EC87  F014         	call	_Wait_Half_Second	;wreg free
  2463                           
  2464                           ;lap12p1.c: 170: PORTBbits.RB7 = 1 ;
  2465  00114E  8E81               	bsf	3969,7,c	;volatile
  2466                           
  2467                           ;lap12p1.c: 171: Deactivate_Buzzer();
  2468  001150  EC32  F015         	call	_Deactivate_Buzzer	;wreg free
  2469                           
  2470                           ;lap12p1.c: 172: if (found == 0xff)
  2471  001154  285C               	incf	_found,w,c
  2472  001156  A4D8               	btfss	status,2,c
  2473  001158  D00A               	goto	l7431
  2474                           
  2475                           ;lap12p1.c: 173: {
  2476                           ;lap12p1.c: 174: printf ("Cannot find button \r\n", found);
  2477  00115A  0E4D               	movlw	low STR_7
  2478  00115C  6E1D               	movwf	printf@f,c
  2479  00115E  0EFF               	movlw	high STR_7
  2480  001160  6E1E               	movwf	printf@f+1,c
  2481  001162  C05C  F01F         	movff	_found,?_printf+2
  2482  001166  6A20               	clrf	?_printf+3,c
  2483  001168  EC0E  F000         	call	_printf	;wreg free
  2484                           
  2485                           ;lap12p1.c: 175: }
  2486  00116C  D72E               	goto	l7365
  2487  00116E                     l7431:
  2488                           
  2489                           ;lap12p1.c: 176: else
  2490                           ;lap12p1.c: 177: {
  2491                           ;lap12p1.c: 178: Do_Beep();
  2492  00116E  EC94  F014         	call	_Do_Beep	;wreg free
  2493                           
  2494                           ;lap12p1.c: 179: printf ("button = %d \r\n", found);
  2495  001172  0EC0               	movlw	low STR_8
  2496  001174  6E1D               	movwf	printf@f,c
  2497  001176  0EFF               	movlw	high STR_8
  2498  001178  6E1E               	movwf	printf@f+1,c
  2499  00117A  C05C  F01F         	movff	_found,?_printf+2
  2500  00117E  6A20               	clrf	?_printf+3,c
  2501  001180  EC0E  F000         	call	_printf	;wreg free
  2502                           
  2503                           ;lap12p1.c: 180: if (found == 5)
  2504  001184  0E05               	movlw	5
  2505  001186  185C               	xorwf	_found,w,c
  2506  001188  A4D8               	btfss	status,2,c
  2507  00118A  D003               	goto	l7439
  2508                           
  2509                           ;lap12p1.c: 181: {
  2510                           ;lap12p1.c: 182: Toggle_Fan();
  2511  00118C  ECAA  F014         	call	_Toggle_Fan	;wreg free
  2512                           
  2513                           ;lap12p1.c: 183: }
  2514  001190  D71C               	goto	l7365
  2515  001192                     l7439:
  2516                           
  2517                           ;lap12p1.c: 184: else if (found == 6)
  2518  001192  0E06               	movlw	6
  2519  001194  185C               	xorwf	_found,w,c
  2520  001196  A4D8               	btfss	status,2,c
  2521  001198  D003               	goto	l7443
  2522                           
  2523                           ;lap12p1.c: 185: {
  2524                           ;lap12p1.c: 186: Decrease_Speed();
  2525  00119A  ECE9  F013         	call	_Decrease_Speed	;wreg free
  2526                           
  2527                           ;lap12p1.c: 187: }
  2528  00119E  D715               	goto	l7365
  2529  0011A0                     l7443:
  2530                           
  2531                           ;lap12p1.c: 188: else if (found == 7)
  2532  0011A0  0E07               	movlw	7
  2533  0011A2  185C               	xorwf	_found,w,c
  2534  0011A4  A4D8               	btfss	status,2,c
  2535  0011A6  D003               	goto	l7447
  2536                           
  2537                           ;lap12p1.c: 189: {
  2538                           ;lap12p1.c: 190: Increase_Speed();
  2539  0011A8  ECD1  F013         	call	_Increase_Speed	;wreg free
  2540                           
  2541                           ;lap12p1.c: 191: }
  2542  0011AC  D70E               	goto	l7365
  2543  0011AE                     l7447:
  2544                           
  2545                           ;lap12p1.c: 192: else if (found == 8)
  2546  0011AE  0E08               	movlw	8
  2547  0011B0  185C               	xorwf	_found,w,c
  2548  0011B2  A4D8               	btfss	status,2,c
  2549  0011B4  D70A               	goto	l7365
  2550                           
  2551                           ;lap12p1.c: 193: {
  2552                           ;lap12p1.c: 194: DS3231_Setup_Time();
  2553  0011B6  ECF7  F010         	call	_DS3231_Setup_Time	;wreg free
  2554  0011BA  D707               	goto	l7365
  2555  0011BC  EF0C  F000         	goto	start
  2556  0011C0                     __end_of_main:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodh	equ	0xFF4
  2563                           prodl	equ	0xFF3
  2564                           intcon	equ	0xFF2
  2565                           intcon2	equ	0xFF1
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postdec1	equ	0xFE5
  2569                           fsr1l	equ	0xFE1
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           fsr2h	equ	0xFDA
  2573                           fsr2l	equ	0xFD9
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function _get_RPM *****************
  2577 ;; Defined at:
  2578 ;;		line 23 in file "Fan_Support.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;		None
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  RPS             2   32[COMRAM] int 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  2   30[COMRAM] int 
  2585 ;; Registers used:
  2586 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2592 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;Total ram usage:        4 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    4
  2599 ;; This function calls:
  2600 ;;		___awdiv
  2601 ;;		___wmul
  2602 ;; This function is called by:
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text1
  2608  0025E2                     __ptext1:
  2609                           	opt stack 0
  2610  0025E2                     _get_RPM:
  2611                           	opt stack 26
  2612                           
  2613                           ;Fan_Support.c: 25: int RPS = TMR3L / 2;
  2614                           
  2615                           ;incstack = 0
  2616  0025E2  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  2617  0025E6  6A18               	clrf	___awdiv@dividend+1,c
  2618  0025E8  0E00               	movlw	0
  2619  0025EA  6E1A               	movwf	___awdiv@divisor+1,c
  2620  0025EC  0E02               	movlw	2
  2621  0025EE  6E19               	movwf	___awdiv@divisor,c
  2622  0025F0  EC36  F00F         	call	___awdiv	;wreg free
  2623  0025F4  C017  F021         	movff	?___awdiv,get_RPM@RPS
  2624  0025F8  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  2625                           
  2626                           ;Fan_Support.c: 27: TMR3L = 0;
  2627  0025FC  0E00               	movlw	0
  2628  0025FE  6EB2               	movwf	4018,c	;volatile
  2629                           
  2630                           ;Fan_Support.c: 28: return (RPS * 60);
  2631  002600  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  2632  002604  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  2633  002608  0E00               	movlw	0
  2634  00260A  6E14               	movwf	___wmul@multiplicand+1,c
  2635  00260C  0E3C               	movlw	60
  2636  00260E  6E13               	movwf	___wmul@multiplicand,c
  2637  002610  EC15  F014         	call	___wmul	;wreg free
  2638  002614  C011  F01F         	movff	?___wmul,?_get_RPM
  2639  002618  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  2640  00261C  D000               	goto	l37
  2641  00261E                     l37:
  2642  00261E  0012               	return		;funcret
  2643  002620                     __end_of_get_RPM:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           tblptrh	equ	0xFF7
  2647                           tblptrl	equ	0xFF6
  2648                           tablat	equ	0xFF5
  2649                           prodh	equ	0xFF4
  2650                           prodl	equ	0xFF3
  2651                           intcon	equ	0xFF2
  2652                           intcon2	equ	0xFF1
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           postdec1	equ	0xFE5
  2656                           fsr1l	equ	0xFE1
  2657                           indf2	equ	0xFDF
  2658                           postinc2	equ	0xFDE
  2659                           fsr2h	equ	0xFDA
  2660                           fsr2l	equ	0xFD9
  2661                           status	equ	0xFD8
  2662                           
  2663 ;; *************** function _Update_Screen *****************
  2664 ;; Defined at:
  2665 ;;		line 69 in file "Main_Screen.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;		None
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  neg_tempF       2   11[BANK0 ] int 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  2  123[None  ] int 
  2672 ;; Registers used:
  2673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;Total ram usage:        4 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:   10
  2686 ;; This function calls:
  2687 ;;		___awdiv
  2688 ;;		___awmod
  2689 ;;		_drawtext
  2690 ;;		_strcpy
  2691 ;; This function is called by:
  2692 ;;		_main
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text2
  2697  000976                     __ptext2:
  2698                           	opt stack 0
  2699  000976                     _Update_Screen:
  2700                           	opt stack 20
  2701                           
  2702                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  2703                           
  2704                           ;incstack = 0
  2705  000976  AE41               	btfss	_DS1621_tempC,7,c
  2706  000978  D01C               	goto	l7195
  2707                           
  2708                           ;Main_Screen.c: 72: {
  2709                           ;Main_Screen.c: 73: tempC[0] = '-';
  2710  00097A  0E2D               	movlw	45
  2711  00097C  0100               	movlb	0	; () banked
  2712  00097E  6FDD               	movwf	_tempC& (0+255),b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  2716  000980  0E7F               	movlw	127
  2717  000982  1441               	andwf	_DS1621_tempC,w,c
  2718  000984  6E17               	movwf	___awdiv@dividend,c
  2719  000986  6A18               	clrf	___awdiv@dividend+1,c
  2720  000988  0E00               	movlw	0
  2721  00098A  6E1A               	movwf	___awdiv@divisor+1,c
  2722  00098C  0E0A               	movlw	10
  2723  00098E  6E19               	movwf	___awdiv@divisor,c
  2724  000990  EC36  F00F         	call	___awdiv	;wreg free
  2725  000994  5017               	movf	?___awdiv,w,c
  2726  000996  0F30               	addlw	48
  2727  000998  0100               	movlb	0	; () banked
  2728  00099A  6FDE               	movwf	(_tempC+1)& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  2732  00099C  0E7F               	movlw	127
  2733  00099E  1441               	andwf	_DS1621_tempC,w,c
  2734  0009A0  6E1F               	movwf	___awmod@dividend,c
  2735  0009A2  6A20               	clrf	___awmod@dividend+1,c
  2736  0009A4  0E00               	movlw	0
  2737  0009A6  6E22               	movwf	___awmod@divisor+1,c
  2738  0009A8  0E0A               	movlw	10
  2739  0009AA  6E21               	movwf	___awmod@divisor,c
  2740  0009AC  ECC5  F00F         	call	___awmod	;wreg free
  2741  0009B0  D01B               	goto	L2
  2742  0009B2                     l7195:
  2743                           
  2744                           ;Main_Screen.c: 77: else
  2745                           ;Main_Screen.c: 78: {
  2746                           ;Main_Screen.c: 79: tempC[0] = '+';
  2747  0009B2  0E2B               	movlw	43
  2748  0009B4  0100               	movlb	0	; () banked
  2749  0009B6  6FDD               	movwf	_tempC& (0+255),b
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  2753  0009B8  C041  F017         	movff	_DS1621_tempC,___awdiv@dividend
  2754  0009BC  C042  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  2755  0009C0  0E00               	movlw	0
  2756  0009C2  6E1A               	movwf	___awdiv@divisor+1,c
  2757  0009C4  0E0A               	movlw	10
  2758  0009C6  6E19               	movwf	___awdiv@divisor,c
  2759  0009C8  EC36  F00F         	call	___awdiv	;wreg free
  2760  0009CC  5017               	movf	?___awdiv,w,c
  2761  0009CE  0F30               	addlw	48
  2762  0009D0  0100               	movlb	0	; () banked
  2763  0009D2  6FDE               	movwf	(_tempC+1)& (0+255),b
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  2767  0009D4  C041  F01F         	movff	_DS1621_tempC,___awmod@dividend
  2768  0009D8  C042  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  2769  0009DC  0E00               	movlw	0
  2770  0009DE  6E22               	movwf	___awmod@divisor+1,c
  2771  0009E0  0E0A               	movlw	10
  2772  0009E2  6E21               	movwf	___awmod@divisor,c
  2773  0009E4  ECC5  F00F         	call	___awmod	;wreg free
  2774  0009E8                     L2:
  2775  0009E8  501F               	movf	?___awmod,w,c
  2776  0009EA  0F30               	addlw	48
  2777  0009EC  0100               	movlb	0	; () banked
  2778  0009EE  6FDF               	movwf	(_tempC+2)& (0+255),b
  2779  0009F0  D000               	goto	l7201
  2780  0009F2                     l7201:
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;Main_Screen.c: 82: }
  2784                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  2785  0009F2  AE44               	btfss	_DS1621_tempF+1,7,c
  2786  0009F4  D029               	goto	l7211
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;Main_Screen.c: 85: {
  2790                           ;Main_Screen.c: 86: tempF[0] = '-';
  2791  0009F6  0E2D               	movlw	45
  2792  0009F8  0100               	movlb	0	; () banked
  2793  0009FA  6FE1               	movwf	_tempF& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  2797  0009FC  C043  F0EE         	movff	_DS1621_tempF,??_Update_Screen
  2798  000A00  C044  F0EF         	movff	_DS1621_tempF+1,??_Update_Screen+1
  2799  000A04  0100               	movlb	0	; () banked
  2800  000A06  1FEE               	comf	??_Update_Screen& (0+255),f,b
  2801  000A08  1FEF               	comf	(??_Update_Screen+1)& (0+255),f,b
  2802  000A0A  4BEE               	infsnz	??_Update_Screen& (0+255),f,b
  2803  000A0C  2BEF               	incf	(??_Update_Screen+1)& (0+255),f,b
  2804  000A0E  C0EE  F0F0         	movff	??_Update_Screen,Update_Screen@neg_tempF
  2805  000A12  C0EF  F0F1         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  2809  000A16  C0F0  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  2810  000A1A  C0F1  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  2811  000A1E  0E00               	movlw	0
  2812  000A20  6E1A               	movwf	___awdiv@divisor+1,c
  2813  000A22  0E0A               	movlw	10
  2814  000A24  6E19               	movwf	___awdiv@divisor,c
  2815  000A26  EC36  F00F         	call	___awdiv	;wreg free
  2816  000A2A  5017               	movf	?___awdiv,w,c
  2817  000A2C  0F30               	addlw	48
  2818  000A2E  0100               	movlb	0	; () banked
  2819  000A30  6FE2               	movwf	(_tempF+1)& (0+255),b
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  2823  000A32  C0F0  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  2824  000A36  C0F1  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  2825  000A3A  0E00               	movlw	0
  2826  000A3C  6E22               	movwf	___awmod@divisor+1,c
  2827  000A3E  0E0A               	movlw	10
  2828  000A40  6E21               	movwf	___awmod@divisor,c
  2829  000A42  ECC5  F00F         	call	___awmod	;wreg free
  2830  000A46  D01B               	goto	L3
  2831  000A48                     l7211:
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;Main_Screen.c: 91: else
  2835                           ;Main_Screen.c: 92: {
  2836                           ;Main_Screen.c: 93: tempF[0] = '+';
  2837  000A48  0E2B               	movlw	43
  2838  000A4A  0100               	movlb	0	; () banked
  2839  000A4C  6FE1               	movwf	_tempF& (0+255),b
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  2843  000A4E  C043  F017         	movff	_DS1621_tempF,___awdiv@dividend
  2844  000A52  C044  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  2845  000A56  0E00               	movlw	0
  2846  000A58  6E1A               	movwf	___awdiv@divisor+1,c
  2847  000A5A  0E0A               	movlw	10
  2848  000A5C  6E19               	movwf	___awdiv@divisor,c
  2849  000A5E  EC36  F00F         	call	___awdiv	;wreg free
  2850  000A62  5017               	movf	?___awdiv,w,c
  2851  000A64  0F30               	addlw	48
  2852  000A66  0100               	movlb	0	; () banked
  2853  000A68  6FE2               	movwf	(_tempF+1)& (0+255),b
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  2857  000A6A  C043  F01F         	movff	_DS1621_tempF,___awmod@dividend
  2858  000A6E  C044  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  2859  000A72  0E00               	movlw	0
  2860  000A74  6E22               	movwf	___awmod@divisor+1,c
  2861  000A76  0E0A               	movlw	10
  2862  000A78  6E21               	movwf	___awmod@divisor,c
  2863  000A7A  ECC5  F00F         	call	___awmod	;wreg free
  2864  000A7E                     L3:
  2865  000A7E  501F               	movf	?___awmod,w,c
  2866  000A80  0F30               	addlw	48
  2867  000A82  0100               	movlb	0	; () banked
  2868  000A84  6FE3               	movwf	(_tempF+2)& (0+255),b
  2869  000A86  D000               	goto	l7217
  2870  000A88                     l7217:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;Main_Screen.c: 96: }
  2874                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  2875  000A88  385D               	swapf	_hour,w,c
  2876  000A8A  0B0F               	andlw	15
  2877  000A8C  0F30               	addlw	48
  2878  000A8E  0100               	movlb	0	; () banked
  2879  000A90  6FC7               	movwf	_time& (0+255),b
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  2883  000A92  505D               	movf	_hour,w,c
  2884  000A94  0B0F               	andlw	15
  2885  000A96  0F30               	addlw	48
  2886  000A98  0100               	movlb	0	; () banked
  2887  000A9A  6FC8               	movwf	(_time+1)& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  2891  000A9C  385F               	swapf	_minute,w,c
  2892  000A9E  0B0F               	andlw	15
  2893  000AA0  0F30               	addlw	48
  2894  000AA2  0100               	movlb	0	; () banked
  2895  000AA4  6FCA               	movwf	(_time+3)& (0+255),b
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f) + '0';
  2899  000AA6  505F               	movf	_minute,w,c
  2900  000AA8  0B0F               	andlw	15
  2901  000AAA  0F30               	addlw	48
  2902  000AAC  0100               	movlb	0	; () banked
  2903  000AAE  6FCB               	movwf	(_time+4)& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  2907  000AB0  3862               	swapf	_second,w,c
  2908  000AB2  0B0F               	andlw	15
  2909  000AB4  0F30               	addlw	48
  2910  000AB6  0100               	movlb	0	; () banked
  2911  000AB8  6FCD               	movwf	(_time+6)& (0+255),b
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;Main_Screen.c: 105: time[7] = (second & 0x0f) + '0';
  2915  000ABA  5062               	movf	_second,w,c
  2916  000ABC  0B0F               	andlw	15
  2917  000ABE  0F30               	addlw	48
  2918  000AC0  0100               	movlb	0	; () banked
  2919  000AC2  6FCE               	movwf	(_time+7)& (0+255),b
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  2923  000AC4  3860               	swapf	_month,w,c
  2924  000AC6  0B0F               	andlw	15
  2925  000AC8  0F30               	addlw	48
  2926  000ACA  0100               	movlb	0	; () banked
  2927  000ACC  6FBE               	movwf	_date& (0+255),b
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;Main_Screen.c: 108: date[1] = (month & 0x0f) + '0';
  2931  000ACE  5060               	movf	_month,w,c
  2932  000AD0  0B0F               	andlw	15
  2933  000AD2  0F30               	addlw	48
  2934  000AD4  0100               	movlb	0	; () banked
  2935  000AD6  6FBF               	movwf	(_date+1)& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;Main_Screen.c: 110: date[3] = (day>>4) + '0';
  2939  000AD8  3859               	swapf	_day,w,c
  2940  000ADA  0B0F               	andlw	15
  2941  000ADC  0F30               	addlw	48
  2942  000ADE  0100               	movlb	0	; () banked
  2943  000AE0  6FC1               	movwf	(_date+3)& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;Main_Screen.c: 111: date[4] = (day & 0x0f) + '0';
  2947  000AE2  5059               	movf	_day,w,c
  2948  000AE4  0B0F               	andlw	15
  2949  000AE6  0F30               	addlw	48
  2950  000AE8  0100               	movlb	0	; () banked
  2951  000AEA  6FC2               	movwf	(_date+4)& (0+255),b
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;Main_Screen.c: 113: date[6] = (year>>4) + '0';
  2955  000AEC  386C               	swapf	_year,w,c
  2956  000AEE  0B0F               	andlw	15
  2957  000AF0  0F30               	addlw	48
  2958  000AF2  0100               	movlb	0	; () banked
  2959  000AF4  6FC4               	movwf	(_date+6)& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;Main_Screen.c: 114: date[7] = (year & 0x0f) + '0';
  2963  000AF6  506C               	movf	_year,w,c
  2964  000AF8  0B0F               	andlw	15
  2965  000AFA  0F30               	addlw	48
  2966  000AFC  0100               	movlb	0	; () banked
  2967  000AFE  6FC5               	movwf	(_date+7)& (0+255),b
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;Main_Screen.c: 117: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  2971  000B00  044F               	decf	_FAN,w,c
  2972  000B02  A4D8               	btfss	status,2,c
  2973  000B04  D00B               	goto	l7245
  2974                           
  2975                           ; BSR set to: 0
  2976  000B06  0ED9               	movlw	low _Fan_SW_Txt
  2977  000B08  6E11               	movwf	strcpy@to,c
  2978  000B0A  0E00               	movlw	high _Fan_SW_Txt
  2979  000B0C  6E12               	movwf	strcpy@to+1,c
  2980  000B0E  0EEC               	movlw	low STR_18
  2981  000B10  6E13               	movwf	strcpy@from,c
  2982  000B12  0EFF               	movlw	high STR_18
  2983  000B14  6E14               	movwf	strcpy@from+1,c
  2984  000B16  EC87  F013         	call	_strcpy	;wreg free
  2985  000B1A  D00B               	goto	l7247
  2986  000B1C                     l7245:
  2987                           
  2988                           ;Main_Screen.c: 118: else strcpy(Fan_SW_Txt, "OFF");
  2989  000B1C  0ED9               	movlw	low _Fan_SW_Txt
  2990  000B1E  6E11               	movwf	strcpy@to,c
  2991  000B20  0E00               	movlw	high _Fan_SW_Txt
  2992  000B22  6E12               	movwf	strcpy@to+1,c
  2993  000B24  0EF0               	movlw	low STR_19
  2994  000B26  6E13               	movwf	strcpy@from,c
  2995  000B28  0EFF               	movlw	high STR_19
  2996  000B2A  6E14               	movwf	strcpy@from+1,c
  2997  000B2C  EC87  F013         	call	_strcpy	;wreg free
  2998  000B30  D000               	goto	l7247
  2999  000B32                     l7247:
  3000                           
  3001                           ;Main_Screen.c: 121: DC_Txt[0] = (duty_cycle/100) % 10 + '0';
  3002  000B32  0E00               	movlw	0
  3003  000B34  6E1A               	movwf	___awdiv@divisor+1,c
  3004  000B36  0E64               	movlw	100
  3005  000B38  6E19               	movwf	___awdiv@divisor,c
  3006  000B3A  C05B  F017         	movff	_duty_cycle,___awdiv@dividend
  3007  000B3E  6A18               	clrf	___awdiv@dividend+1,c
  3008  000B40  EC36  F00F         	call	___awdiv	;wreg free
  3009  000B44  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3010  000B48  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3011  000B4C  0E00               	movlw	0
  3012  000B4E  6E22               	movwf	___awmod@divisor+1,c
  3013  000B50  0E0A               	movlw	10
  3014  000B52  6E21               	movwf	___awmod@divisor,c
  3015  000B54  ECC5  F00F         	call	___awmod	;wreg free
  3016  000B58  501F               	movf	?___awmod,w,c
  3017  000B5A  0F30               	addlw	48
  3018  000B5C  0100               	movlb	0	; () banked
  3019  000B5E  6FD5               	movwf	_DC_Txt& (0+255),b
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;Main_Screen.c: 123: DC_Txt[1] = (duty_cycle/10) % 10 + '0';
  3023  000B60  0E00               	movlw	0
  3024  000B62  6E1A               	movwf	___awdiv@divisor+1,c
  3025  000B64  0E0A               	movlw	10
  3026  000B66  6E19               	movwf	___awdiv@divisor,c
  3027  000B68  C05B  F017         	movff	_duty_cycle,___awdiv@dividend
  3028  000B6C  6A18               	clrf	___awdiv@dividend+1,c
  3029  000B6E  EC36  F00F         	call	___awdiv	;wreg free
  3030  000B72  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3031  000B76  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3032  000B7A  0E00               	movlw	0
  3033  000B7C  6E22               	movwf	___awmod@divisor+1,c
  3034  000B7E  0E0A               	movlw	10
  3035  000B80  6E21               	movwf	___awmod@divisor,c
  3036  000B82  ECC5  F00F         	call	___awmod	;wreg free
  3037  000B86  501F               	movf	?___awmod,w,c
  3038  000B88  0F30               	addlw	48
  3039  000B8A  0100               	movlb	0	; () banked
  3040  000B8C  6FD6               	movwf	(_DC_Txt+1)& (0+255),b
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;Main_Screen.c: 124: DC_Txt[2] = (duty_cycle) % 10 + '0';
  3044  000B8E  C05B  F01F         	movff	_duty_cycle,___awmod@dividend
  3045  000B92  6A20               	clrf	___awmod@dividend+1,c
  3046  000B94  0E00               	movlw	0
  3047  000B96  6E22               	movwf	___awmod@divisor+1,c
  3048  000B98  0E0A               	movlw	10
  3049  000B9A  6E21               	movwf	___awmod@divisor,c
  3050  000B9C  ECC5  F00F         	call	___awmod	;wreg free
  3051  000BA0  501F               	movf	?___awmod,w,c
  3052  000BA2  0F30               	addlw	48
  3053  000BA4  0100               	movlb	0	; () banked
  3054  000BA6  6FD7               	movwf	(_DC_Txt+2)& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main_Screen.c: 127: RPM_Txt[0] = rpm/1000 + '0';
  3058  000BA8  C049  F017         	movff	_rpm,___awdiv@dividend
  3059  000BAC  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3060  000BB0  0E03               	movlw	3
  3061  000BB2  6E1A               	movwf	___awdiv@divisor+1,c
  3062  000BB4  0EE8               	movlw	232
  3063  000BB6  6E19               	movwf	___awdiv@divisor,c
  3064  000BB8  EC36  F00F         	call	___awdiv	;wreg free
  3065  000BBC  5017               	movf	?___awdiv,w,c
  3066  000BBE  0F30               	addlw	48
  3067  000BC0  0100               	movlb	0	; () banked
  3068  000BC2  6FD0               	movwf	_RPM_Txt& (0+255),b
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;Main_Screen.c: 129: RPM_Txt[1] = (rpm/100) % 10 + '0';
  3072  000BC4  0E00               	movlw	0
  3073  000BC6  6E1A               	movwf	___awdiv@divisor+1,c
  3074  000BC8  0E64               	movlw	100
  3075  000BCA  6E19               	movwf	___awdiv@divisor,c
  3076  000BCC  C049  F017         	movff	_rpm,___awdiv@dividend
  3077  000BD0  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3078  000BD4  EC36  F00F         	call	___awdiv	;wreg free
  3079  000BD8  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3080  000BDC  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3081  000BE0  0E00               	movlw	0
  3082  000BE2  6E22               	movwf	___awmod@divisor+1,c
  3083  000BE4  0E0A               	movlw	10
  3084  000BE6  6E21               	movwf	___awmod@divisor,c
  3085  000BE8  ECC5  F00F         	call	___awmod	;wreg free
  3086  000BEC  501F               	movf	?___awmod,w,c
  3087  000BEE  0F30               	addlw	48
  3088  000BF0  0100               	movlb	0	; () banked
  3089  000BF2  6FD1               	movwf	(_RPM_Txt+1)& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;Main_Screen.c: 130: RPM_Txt[2] = (rpm/10) % 10 + '0';
  3093  000BF4  0E00               	movlw	0
  3094  000BF6  6E1A               	movwf	___awdiv@divisor+1,c
  3095  000BF8  0E0A               	movlw	10
  3096  000BFA  6E19               	movwf	___awdiv@divisor,c
  3097  000BFC  C049  F017         	movff	_rpm,___awdiv@dividend
  3098  000C00  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3099  000C04  EC36  F00F         	call	___awdiv	;wreg free
  3100  000C08  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3101  000C0C  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3102  000C10  0E00               	movlw	0
  3103  000C12  6E22               	movwf	___awmod@divisor+1,c
  3104  000C14  0E0A               	movlw	10
  3105  000C16  6E21               	movwf	___awmod@divisor,c
  3106  000C18  ECC5  F00F         	call	___awmod	;wreg free
  3107  000C1C  501F               	movf	?___awmod,w,c
  3108  000C1E  0F30               	addlw	48
  3109  000C20  0100               	movlb	0	; () banked
  3110  000C22  6FD2               	movwf	(_RPM_Txt+2)& (0+255),b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;Main_Screen.c: 131: RPM_Txt[3] = rpm % 10 + '0';
  3114  000C24  C049  F01F         	movff	_rpm,___awmod@dividend
  3115  000C28  C04A  F020         	movff	_rpm+1,___awmod@dividend+1
  3116  000C2C  0E00               	movlw	0
  3117  000C2E  6E22               	movwf	___awmod@divisor+1,c
  3118  000C30  0E0A               	movlw	10
  3119  000C32  6E21               	movwf	___awmod@divisor,c
  3120  000C34  ECC5  F00F         	call	___awmod	;wreg free
  3121  000C38  501F               	movf	?___awmod,w,c
  3122  000C3A  0F30               	addlw	48
  3123  000C3C  0100               	movlb	0	; () banked
  3124  000C3E  6FD3               	movwf	(_RPM_Txt+3)& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;Main_Screen.c: 133: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3128  000C40  0E17               	movlw	23
  3129  000C42  6E39               	movwf	drawtext@y,c
  3130  000C44  0EDD               	movlw	low _tempC
  3131  000C46  6E3A               	movwf	drawtext@_text,c
  3132  000C48  0E00               	movlw	high _tempC
  3133  000C4A  6E3B               	movwf	drawtext@_text+1,c
  3134  000C4C  0EFF               	movlw	255
  3135  000C4E  6E3D               	movwf	drawtext@color+1,c
  3136  000C50  0EE0               	movlw	224
  3137  000C52  6E3C               	movwf	drawtext@color,c
  3138  000C54  0E00               	movlw	0
  3139  000C56  6E3F               	movwf	drawtext@bg+1,c
  3140  000C58  0E00               	movlw	0
  3141  000C5A  6E3E               	movwf	drawtext@bg,c
  3142  000C5C  0E02               	movlw	2
  3143  000C5E  6E40               	movwf	drawtext@size,c
  3144  000C60  0E01               	movlw	1
  3145  000C62  EC18  F00B         	call	_drawtext
  3146                           
  3147                           ;Main_Screen.c: 134: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3148  000C66  0E17               	movlw	23
  3149  000C68  6E39               	movwf	drawtext@y,c
  3150  000C6A  0EE1               	movlw	low _tempF
  3151  000C6C  6E3A               	movwf	drawtext@_text,c
  3152  000C6E  0E00               	movlw	high _tempF
  3153  000C70  6E3B               	movwf	drawtext@_text+1,c
  3154  000C72  0EFF               	movlw	255
  3155  000C74  6E3D               	movwf	drawtext@color+1,c
  3156  000C76  0EE0               	movlw	224
  3157  000C78  6E3C               	movwf	drawtext@color,c
  3158  000C7A  0E00               	movlw	0
  3159  000C7C  6E3F               	movwf	drawtext@bg+1,c
  3160  000C7E  0E00               	movlw	0
  3161  000C80  6E3E               	movwf	drawtext@bg,c
  3162  000C82  0E02               	movlw	2
  3163  000C84  6E40               	movwf	drawtext@size,c
  3164  000C86  0E46               	movlw	70
  3165  000C88  EC18  F00B         	call	_drawtext
  3166                           
  3167                           ;Main_Screen.c: 135: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3168  000C8C  0E34               	movlw	52
  3169  000C8E  6E39               	movwf	drawtext@y,c
  3170  000C90  0EC7               	movlw	low _time
  3171  000C92  6E3A               	movwf	drawtext@_text,c
  3172  000C94  0E00               	movlw	high _time
  3173  000C96  6E3B               	movwf	drawtext@_text+1,c
  3174  000C98  0E07               	movlw	7
  3175  000C9A  6E3D               	movwf	drawtext@color+1,c
  3176  000C9C  683C               	setf	drawtext@color,c
  3177  000C9E  0E00               	movlw	0
  3178  000CA0  6E3F               	movwf	drawtext@bg+1,c
  3179  000CA2  0E00               	movlw	0
  3180  000CA4  6E3E               	movwf	drawtext@bg,c
  3181  000CA6  0E02               	movlw	2
  3182  000CA8  6E40               	movwf	drawtext@size,c
  3183  000CAA  0E0F               	movlw	15
  3184  000CAC  EC18  F00B         	call	_drawtext
  3185                           
  3186                           ;Main_Screen.c: 136: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3187  000CB0  0E52               	movlw	82
  3188  000CB2  6E39               	movwf	drawtext@y,c
  3189  000CB4  0EBE               	movlw	low _date
  3190  000CB6  6E3A               	movwf	drawtext@_text,c
  3191  000CB8  0E00               	movlw	high _date
  3192  000CBA  6E3B               	movwf	drawtext@_text+1,c
  3193  000CBC  0E07               	movlw	7
  3194  000CBE  6E3D               	movwf	drawtext@color+1,c
  3195  000CC0  0EE0               	movlw	224
  3196  000CC2  6E3C               	movwf	drawtext@color,c
  3197  000CC4  0E00               	movlw	0
  3198  000CC6  6E3F               	movwf	drawtext@bg+1,c
  3199  000CC8  0E00               	movlw	0
  3200  000CCA  6E3E               	movwf	drawtext@bg,c
  3201  000CCC  0E02               	movlw	2
  3202  000CCE  6E40               	movwf	drawtext@size,c
  3203  000CD0  0E0F               	movlw	15
  3204  000CD2  EC18  F00B         	call	_drawtext
  3205                           
  3206                           ;Main_Screen.c: 138: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  3207  000CD6  0E82               	movlw	130
  3208  000CD8  6E39               	movwf	drawtext@y,c
  3209  000CDA  0ED9               	movlw	low _Fan_SW_Txt
  3210  000CDC  6E3A               	movwf	drawtext@_text,c
  3211  000CDE  0E00               	movlw	high _Fan_SW_Txt
  3212  000CE0  6E3B               	movwf	drawtext@_text+1,c
  3213  000CE2  0EF8               	movlw	248
  3214  000CE4  6E3D               	movwf	drawtext@color+1,c
  3215  000CE6  0E00               	movlw	0
  3216  000CE8  6E3C               	movwf	drawtext@color,c
  3217  000CEA  0E00               	movlw	0
  3218  000CEC  6E3F               	movwf	drawtext@bg+1,c
  3219  000CEE  0E00               	movlw	0
  3220  000CF0  6E3E               	movwf	drawtext@bg,c
  3221  000CF2  0E01               	movlw	1
  3222  000CF4  6E40               	movwf	drawtext@size,c
  3223  000CF6  0E5F               	movlw	95
  3224  000CF8  EC18  F00B         	call	_drawtext
  3225                           
  3226                           ;Main_Screen.c: 139: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3227  000CFC  0E96               	movlw	150
  3228  000CFE  6E39               	movwf	drawtext@y,c
  3229  000D00  0ED5               	movlw	low _DC_Txt
  3230  000D02  6E3A               	movwf	drawtext@_text,c
  3231  000D04  0E00               	movlw	high _DC_Txt
  3232  000D06  6E3B               	movwf	drawtext@_text+1,c
  3233  000D08  0E07               	movlw	7
  3234  000D0A  6E3D               	movwf	drawtext@color+1,c
  3235  000D0C  0EE0               	movlw	224
  3236  000D0E  6E3C               	movwf	drawtext@color,c
  3237  000D10  0E00               	movlw	0
  3238  000D12  6E3F               	movwf	drawtext@bg+1,c
  3239  000D14  0E00               	movlw	0
  3240  000D16  6E3E               	movwf	drawtext@bg,c
  3241  000D18  0E01               	movlw	1
  3242  000D1A  6E40               	movwf	drawtext@size,c
  3243  000D1C  0E0A               	movlw	10
  3244  000D1E  EC18  F00B         	call	_drawtext
  3245                           
  3246                           ;Main_Screen.c: 140: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3247  000D22  0E96               	movlw	150
  3248  000D24  6E39               	movwf	drawtext@y,c
  3249  000D26  0ED0               	movlw	low _RPM_Txt
  3250  000D28  6E3A               	movwf	drawtext@_text,c
  3251  000D2A  0E00               	movlw	high _RPM_Txt
  3252  000D2C  6E3B               	movwf	drawtext@_text+1,c
  3253  000D2E  0E07               	movlw	7
  3254  000D30  6E3D               	movwf	drawtext@color+1,c
  3255  000D32  0EE0               	movlw	224
  3256  000D34  6E3C               	movwf	drawtext@color,c
  3257  000D36  0E00               	movlw	0
  3258  000D38  6E3F               	movwf	drawtext@bg+1,c
  3259  000D3A  0E00               	movlw	0
  3260  000D3C  6E3E               	movwf	drawtext@bg,c
  3261  000D3E  0E01               	movlw	1
  3262  000D40  6E40               	movwf	drawtext@size,c
  3263  000D42  0E5D               	movlw	93
  3264  000D44  EC18  F00B         	call	_drawtext
  3265  000D48  0012               	return		;funcret
  3266  000D4A                     __end_of_Update_Screen:
  3267                           	opt stack 0
  3268                           tblptru	equ	0xFF8
  3269                           tblptrh	equ	0xFF7
  3270                           tblptrl	equ	0xFF6
  3271                           tablat	equ	0xFF5
  3272                           prodh	equ	0xFF4
  3273                           prodl	equ	0xFF3
  3274                           intcon	equ	0xFF2
  3275                           intcon2	equ	0xFF1
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           postdec1	equ	0xFE5
  3279                           fsr1l	equ	0xFE1
  3280                           indf2	equ	0xFDF
  3281                           postinc2	equ	0xFDE
  3282                           fsr2h	equ	0xFDA
  3283                           fsr2l	equ	0xFD9
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function ___awmod *****************
  3287 ;; Defined at:
  3288 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  dividend        2   30[COMRAM] int 
  3291 ;;  divisor         2   32[COMRAM] int 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;  sign            1   35[COMRAM] unsigned char 
  3294 ;;  counter         1   34[COMRAM] unsigned char 
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  2   30[COMRAM] int 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3304 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;Total ram usage:        6 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		Nothing
  3313 ;; This function is called by:
  3314 ;;		_Update_Screen
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text3
  3319  001F8A                     __ptext3:
  3320                           	opt stack 0
  3321  001F8A                     ___awmod:
  3322                           	opt stack 26
  3323                           
  3324                           ;incstack = 0
  3325  001F8A  0E00               	movlw	0
  3326  001F8C  6E24               	movwf	___awmod@sign,c
  3327  001F8E  AE20               	btfss	___awmod@dividend+1,7,c
  3328  001F90  D007               	goto	l6973
  3329  001F92  6C1F               	negf	___awmod@dividend,c
  3330  001F94  1E20               	comf	___awmod@dividend+1,f,c
  3331  001F96  B0D8               	btfsc	status,0,c
  3332  001F98  2A20               	incf	___awmod@dividend+1,f,c
  3333  001F9A  0E01               	movlw	1
  3334  001F9C  6E24               	movwf	___awmod@sign,c
  3335  001F9E  D000               	goto	l6973
  3336  001FA0                     l6973:
  3337  001FA0  AE22               	btfss	___awmod@divisor+1,7,c
  3338  001FA2  D005               	goto	l6977
  3339  001FA4  6C21               	negf	___awmod@divisor,c
  3340  001FA6  1E22               	comf	___awmod@divisor+1,f,c
  3341  001FA8  B0D8               	btfsc	status,0,c
  3342  001FAA  2A22               	incf	___awmod@divisor+1,f,c
  3343  001FAC  D000               	goto	l6977
  3344  001FAE                     l6977:
  3345  001FAE  5021               	movf	___awmod@divisor,w,c
  3346  001FB0  1022               	iorwf	___awmod@divisor+1,w,c
  3347  001FB2  B4D8               	btfsc	status,2,c
  3348  001FB4  D01D               	goto	l6993
  3349  001FB6  0E01               	movlw	1
  3350  001FB8  6E23               	movwf	___awmod@counter,c
  3351  001FBA  D005               	goto	l6983
  3352  001FBC                     l6981:
  3353  001FBC  90D8               	bcf	status,0,c
  3354  001FBE  3621               	rlcf	___awmod@divisor,f,c
  3355  001FC0  3622               	rlcf	___awmod@divisor+1,f,c
  3356  001FC2  2A23               	incf	___awmod@counter,f,c
  3357  001FC4  D000               	goto	l6983
  3358  001FC6                     l6983:
  3359  001FC6  BE22               	btfsc	___awmod@divisor+1,7,c
  3360  001FC8  D002               	goto	l6985
  3361  001FCA  D7F8               	goto	l6981
  3362  001FCC  D000               	goto	l6985
  3363  001FCE                     l6985:
  3364  001FCE  5021               	movf	___awmod@divisor,w,c
  3365  001FD0  5C1F               	subwf	___awmod@dividend,w,c
  3366  001FD2  5022               	movf	___awmod@divisor+1,w,c
  3367  001FD4  5820               	subwfb	___awmod@dividend+1,w,c
  3368  001FD6  A0D8               	btfss	status,0,c
  3369  001FD8  D005               	goto	l6989
  3370  001FDA  5021               	movf	___awmod@divisor,w,c
  3371  001FDC  5E1F               	subwf	___awmod@dividend,f,c
  3372  001FDE  5022               	movf	___awmod@divisor+1,w,c
  3373  001FE0  5A20               	subwfb	___awmod@dividend+1,f,c
  3374  001FE2  D000               	goto	l6989
  3375  001FE4                     l6989:
  3376  001FE4  90D8               	bcf	status,0,c
  3377  001FE6  3222               	rrcf	___awmod@divisor+1,f,c
  3378  001FE8  3221               	rrcf	___awmod@divisor,f,c
  3379  001FEA  2E23               	decfsz	___awmod@counter,f,c
  3380  001FEC  D7F0               	goto	l6985
  3381  001FEE  D000               	goto	l6993
  3382  001FF0                     l6993:
  3383  001FF0  5024               	movf	___awmod@sign,w,c
  3384  001FF2  B4D8               	btfsc	status,2,c
  3385  001FF4  D005               	goto	l6997
  3386  001FF6  6C1F               	negf	___awmod@dividend,c
  3387  001FF8  1E20               	comf	___awmod@dividend+1,f,c
  3388  001FFA  B0D8               	btfsc	status,0,c
  3389  001FFC  2A20               	incf	___awmod@dividend+1,f,c
  3390  001FFE  D000               	goto	l6997
  3391  002000                     l6997:
  3392  002000  C01F  F01F         	movff	___awmod@dividend,?___awmod
  3393  002004  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  3394  002008  D000               	goto	l1183
  3395  00200A                     l1183:
  3396  00200A  0012               	return		;funcret
  3397  00200C                     __end_of___awmod:
  3398                           	opt stack 0
  3399                           tblptru	equ	0xFF8
  3400                           tblptrh	equ	0xFF7
  3401                           tblptrl	equ	0xFF6
  3402                           tablat	equ	0xFF5
  3403                           prodh	equ	0xFF4
  3404                           prodl	equ	0xFF3
  3405                           intcon	equ	0xFF2
  3406                           intcon2	equ	0xFF1
  3407                           postinc0	equ	0xFEE
  3408                           wreg	equ	0xFE8
  3409                           postdec1	equ	0xFE5
  3410                           fsr1l	equ	0xFE1
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8
  3416                           
  3417 ;; *************** function _Toggle_Fan *****************
  3418 ;; Defined at:
  3419 ;;		line 31 in file "Fan_Support.c"
  3420 ;; Parameters:    Size  Location     Type
  3421 ;;		None
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;		None               void
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0, cstack
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;Total ram usage:        0 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    7
  3440 ;; This function calls:
  3441 ;;		_Turn_Off_Fan
  3442 ;;		_Turn_On_Fan
  3443 ;; This function is called by:
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text4
  3449  002954                     __ptext4:
  3450                           	opt stack 0
  3451  002954                     _Toggle_Fan:
  3452                           	opt stack 23
  3453                           
  3454                           ;Fan_Support.c: 33: if (FAN==0)
  3455                           
  3456                           ;incstack = 0
  3457  002954  504F               	movf	_FAN,w,c
  3458  002956  A4D8               	btfss	status,2,c
  3459  002958  D003               	goto	l7013
  3460                           
  3461                           ;Fan_Support.c: 34: {
  3462                           ;Fan_Support.c: 35: Turn_On_Fan();
  3463  00295A  EC05  F015         	call	_Turn_On_Fan	;wreg free
  3464                           
  3465                           ;Fan_Support.c: 36: }
  3466  00295E  D003               	goto	l42
  3467  002960                     l7013:
  3468                           
  3469                           ;Fan_Support.c: 37: else
  3470                           ;Fan_Support.c: 38: {
  3471                           ;Fan_Support.c: 39: Turn_Off_Fan();
  3472  002960  EC2E  F015         	call	_Turn_Off_Fan	;wreg free
  3473  002964  D000               	goto	l42
  3474  002966                     l42:
  3475  002966  0012               	return		;funcret
  3476  002968                     __end_of_Toggle_Fan:
  3477                           	opt stack 0
  3478                           tblptru	equ	0xFF8
  3479                           tblptrh	equ	0xFF7
  3480                           tblptrl	equ	0xFF6
  3481                           tablat	equ	0xFF5
  3482                           prodh	equ	0xFF4
  3483                           prodl	equ	0xFF3
  3484                           intcon	equ	0xFF2
  3485                           intcon2	equ	0xFF1
  3486                           postinc0	equ	0xFEE
  3487                           wreg	equ	0xFE8
  3488                           postdec1	equ	0xFE5
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _Turn_On_Fan *****************
  3497 ;; Defined at:
  3498 ;;		line 49 in file "Fan_Support.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;		None               void
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;Total ram usage:        0 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    6
  3519 ;; This function calls:
  3520 ;;		_do_update_pwm
  3521 ;; This function is called by:
  3522 ;;		_Toggle_Fan
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text5
  3527  002A0A                     __ptext5:
  3528                           	opt stack 0
  3529  002A0A                     _Turn_On_Fan:
  3530                           	opt stack 23
  3531                           
  3532                           ;Fan_Support.c: 51: FAN=1;
  3533                           
  3534                           ;incstack = 0
  3535  002A0A  0E01               	movlw	1
  3536  002A0C  6E4F               	movwf	_FAN,c
  3537                           
  3538                           ;Fan_Support.c: 52: do_update_pwm(duty_cycle);
  3539  002A0E  505B               	movf	_duty_cycle,w,c
  3540  002A10  ECD5  F00E         	call	_do_update_pwm
  3541                           
  3542                           ;Fan_Support.c: 53: PORTBbits.RB4=1;
  3543  002A14  8881               	bsf	3969,4,c	;volatile
  3544  002A16  0012               	return		;funcret
  3545  002A18                     __end_of_Turn_On_Fan:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           prodh	equ	0xFF4
  3552                           prodl	equ	0xFF3
  3553                           intcon	equ	0xFF2
  3554                           intcon2	equ	0xFF1
  3555                           postinc0	equ	0xFEE
  3556                           wreg	equ	0xFE8
  3557                           postdec1	equ	0xFE5
  3558                           fsr1l	equ	0xFE1
  3559                           indf2	equ	0xFDF
  3560                           postinc2	equ	0xFDE
  3561                           fsr2h	equ	0xFDA
  3562                           fsr2l	equ	0xFD9
  3563                           status	equ	0xFD8
  3564                           
  3565 ;; *************** function _Turn_Off_Fan *****************
  3566 ;; Defined at:
  3567 ;;		line 43 in file "Fan_Support.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;		None
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;		None
  3572 ;; Return value:  Size  Location     Type
  3573 ;;		None               void
  3574 ;; Registers used:
  3575 ;;		wreg, status,2
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;Total ram usage:        0 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    3
  3588 ;; This function calls:
  3589 ;;		Nothing
  3590 ;; This function is called by:
  3591 ;;		_Toggle_Fan
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text6
  3596  002A5C                     __ptext6:
  3597                           	opt stack 0
  3598  002A5C                     _Turn_Off_Fan:
  3599                           	opt stack 26
  3600                           
  3601                           ;Fan_Support.c: 45: FAN=0;
  3602                           
  3603                           ;incstack = 0
  3604  002A5C  0E00               	movlw	0
  3605  002A5E  6E4F               	movwf	_FAN,c
  3606                           
  3607                           ;Fan_Support.c: 46: PORTBbits.RB4=0;
  3608  002A60  9881               	bcf	3969,4,c	;volatile
  3609  002A62  0012               	return		;funcret
  3610  002A64                     __end_of_Turn_Off_Fan:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           intcon	equ	0xFF2
  3619                           intcon2	equ	0xFF1
  3620                           postinc0	equ	0xFEE
  3621                           wreg	equ	0xFE8
  3622                           postdec1	equ	0xFE5
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           postinc2	equ	0xFDE
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _Set_RPM_RGB *****************
  3631 ;; Defined at:
  3632 ;;		line 111 in file "Fan_Support.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;  rpm             2   30[COMRAM] int 
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;  RPM             2   33[COMRAM] int 
  3637 ;;  maskedValue     1   36[COMRAM] unsigned char 
  3638 ;;  mask            1   35[COMRAM] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;		None               void
  3641 ;; Registers used:
  3642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3648 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;Total ram usage:        7 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    4
  3655 ;; This function calls:
  3656 ;;		___awdiv
  3657 ;; This function is called by:
  3658 ;;		_main
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text7
  3663  00231E                     __ptext7:
  3664                           	opt stack 0
  3665  00231E                     _Set_RPM_RGB:
  3666                           	opt stack 26
  3667                           
  3668                           ;Fan_Support.c: 113: unsigned char mask = 0xC7;
  3669                           
  3670                           ;incstack = 0
  3671  00231E  0EC7               	movlw	199
  3672  002320  6E24               	movwf	Set_RPM_RGB@mask,c
  3673                           
  3674                           ;Fan_Support.c: 114: unsigned char maskedValue;
  3675                           ;Fan_Support.c: 115: maskedValue = PORTD & mask;
  3676  002322  5083               	movf	3971,w,c	;volatile
  3677  002324  1424               	andwf	Set_RPM_RGB@mask,w,c
  3678  002326  6E25               	movwf	Set_RPM_RGB@maskedValue,c
  3679                           
  3680                           ;Fan_Support.c: 116: int RPM= (rpm/500);
  3681  002328  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  3682  00232C  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  3683  002330  0E01               	movlw	1
  3684  002332  6E1A               	movwf	___awdiv@divisor+1,c
  3685  002334  0EF4               	movlw	244
  3686  002336  6E19               	movwf	___awdiv@divisor,c
  3687  002338  EC36  F00F         	call	___awdiv	;wreg free
  3688  00233C  C017  F022         	movff	?___awdiv,Set_RPM_RGB@RPM
  3689  002340  C018  F023         	movff	?___awdiv+1,Set_RPM_RGB@RPM+1
  3690                           
  3691                           ;Fan_Support.c: 117: if (rpm < 1){
  3692  002344  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  3693  002346  D005               	goto	l7059
  3694  002348  5020               	movf	Set_RPM_RGB@rpm+1,w,c
  3695  00234A  E106               	bnz	l7061
  3696  00234C  041F               	decf	Set_RPM_RGB@rpm,w,c
  3697  00234E  B0D8               	btfsc	status,0,c
  3698  002350  D003               	goto	l7061
  3699  002352                     l7059:
  3700                           
  3701                           ;Fan_Support.c: 118: PORTD = maskedValue;
  3702  002352  C025  FF83         	movff	Set_RPM_RGB@maskedValue,3971	;volatile
  3703                           
  3704                           ;Fan_Support.c: 119: }
  3705  002356  D011               	goto	l71
  3706  002358                     l7061:
  3707                           
  3708                           ;Fan_Support.c: 120: else{
  3709                           ;Fan_Support.c: 121: PORTD = maskedValue | (D2[RPM] << 3);
  3710  002358  0EAC               	movlw	low _D2
  3711  00235A  2422               	addwf	Set_RPM_RGB@RPM,w,c
  3712  00235C  6ED9               	movwf	fsr2l,c
  3713  00235E  0E00               	movlw	high _D2
  3714  002360  2023               	addwfc	Set_RPM_RGB@RPM+1,w,c
  3715  002362  6EDA               	movwf	fsr2h,c
  3716  002364  50DF               	movf	indf2,w,c
  3717  002366  6E21               	movwf	??_Set_RPM_RGB& (0+255),c
  3718  002368  90D8               	bcf	status,0,c
  3719  00236A  3621               	rlcf	??_Set_RPM_RGB,f,c
  3720  00236C  90D8               	bcf	status,0,c
  3721  00236E  3621               	rlcf	??_Set_RPM_RGB,f,c
  3722  002370  90D8               	bcf	status,0,c
  3723  002372  3421               	rlcf	??_Set_RPM_RGB,w,c
  3724  002374  1025               	iorwf	Set_RPM_RGB@maskedValue,w,c
  3725  002376  6E83               	movwf	3971,c	;volatile
  3726  002378  D000               	goto	l71
  3727  00237A                     l71:
  3728  00237A  0012               	return		;funcret
  3729  00237C                     __end_of_Set_RPM_RGB:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           prodh	equ	0xFF4
  3736                           prodl	equ	0xFF3
  3737                           intcon	equ	0xFF2
  3738                           intcon2	equ	0xFF1
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postdec1	equ	0xFE5
  3742                           fsr1l	equ	0xFE1
  3743                           indf2	equ	0xFDF
  3744                           postinc2	equ	0xFDE
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function _Set_DC_RGB *****************
  3750 ;; Defined at:
  3751 ;;		line 100 in file "Fan_Support.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  duty_cycle      2   30[COMRAM] int 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  d1color_I       1   33[COMRAM] unsigned char 
  3756 ;;  d1color_C       1   32[COMRAM] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;		None               void
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;Total ram usage:        4 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    4
  3773 ;; This function calls:
  3774 ;;		___awdiv
  3775 ;; This function is called by:
  3776 ;;		_main
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text8
  3781  0026DA                     __ptext8:
  3782                           	opt stack 0
  3783  0026DA                     _Set_DC_RGB:
  3784                           	opt stack 26
  3785                           
  3786                           ;Fan_Support.c: 102: unsigned char d1color_I;
  3787                           ;Fan_Support.c: 103: unsigned char d1color_C = 0x00;
  3788                           
  3789                           ;incstack = 0
  3790  0026DA  0E00               	movlw	0
  3791  0026DC  6E21               	movwf	Set_DC_RGB@d1color_C,c
  3792                           
  3793                           ;Fan_Support.c: 104: d1color_I = duty_cycle / 10;
  3794  0026DE  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  3795  0026E2  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  3796  0026E6  0E00               	movlw	0
  3797  0026E8  6E1A               	movwf	___awdiv@divisor+1,c
  3798  0026EA  0E0A               	movlw	10
  3799  0026EC  6E19               	movwf	___awdiv@divisor,c
  3800  0026EE  EC36  F00F         	call	___awdiv	;wreg free
  3801  0026F2  5017               	movf	?___awdiv,w,c
  3802  0026F4  6E22               	movwf	Set_DC_RGB@d1color_I,c
  3803                           
  3804                           ;Fan_Support.c: 105: if (d1color_I >7) d1color_I =7;
  3805  0026F6  0E07               	movlw	7
  3806  0026F8  6422               	cpfsgt	Set_DC_RGB@d1color_I,c
  3807  0026FA  D003               	goto	l7047
  3808  0026FC  0E07               	movlw	7
  3809  0026FE  6E22               	movwf	Set_DC_RGB@d1color_I,c
  3810  002700  D000               	goto	l7047
  3811  002702                     l7047:
  3812                           
  3813                           ;Fan_Support.c: 107: d1color_C = (char) d1color_I;
  3814  002702  C022  F021         	movff	Set_DC_RGB@d1color_I,Set_DC_RGB@d1color_C
  3815                           
  3816                           ;Fan_Support.c: 108: PORTA = (d1color_C << 1);
  3817  002706  5021               	movf	Set_DC_RGB@d1color_C,w,c
  3818  002708  2421               	addwf	Set_DC_RGB@d1color_C,w,c
  3819  00270A  6E80               	movwf	3968,c	;volatile
  3820  00270C  0012               	return		;funcret
  3821  00270E                     __end_of_Set_DC_RGB:
  3822                           	opt stack 0
  3823                           tblptru	equ	0xFF8
  3824                           tblptrh	equ	0xFF7
  3825                           tblptrl	equ	0xFF6
  3826                           tablat	equ	0xFF5
  3827                           prodh	equ	0xFF4
  3828                           prodl	equ	0xFF3
  3829                           intcon	equ	0xFF2
  3830                           intcon2	equ	0xFF1
  3831                           postinc0	equ	0xFEE
  3832                           wreg	equ	0xFE8
  3833                           postdec1	equ	0xFE5
  3834                           fsr1l	equ	0xFE1
  3835                           indf2	equ	0xFDF
  3836                           postinc2	equ	0xFDE
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function ___awdiv *****************
  3842 ;; Defined at:
  3843 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  dividend        2   22[COMRAM] int 
  3846 ;;  divisor         2   24[COMRAM] int 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  quotient        2   28[COMRAM] int 
  3849 ;;  sign            1   27[COMRAM] unsigned char 
  3850 ;;  counter         1   26[COMRAM] unsigned char 
  3851 ;; Return value:  Size  Location     Type
  3852 ;;                  2   22[COMRAM] int 
  3853 ;; Registers used:
  3854 ;;		wreg, status,2, status,0
  3855 ;; Tracked objects:
  3856 ;;		On entry : 0/0
  3857 ;;		On exit  : 0/0
  3858 ;;		Unchanged: 0/0
  3859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3860 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;Total ram usage:        8 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    3
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_get_RPM
  3871 ;;		_Set_DC_RGB
  3872 ;;		_Set_RPM_RGB
  3873 ;;		_main
  3874 ;;		_Update_Screen
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text9
  3879  001E6C                     __ptext9:
  3880                           	opt stack 0
  3881  001E6C                     ___awdiv:
  3882                           	opt stack 26
  3883                           
  3884                           ;incstack = 0
  3885  001E6C  0E00               	movlw	0
  3886  001E6E  6E1C               	movwf	___awdiv@sign,c
  3887  001E70  AE1A               	btfss	___awdiv@divisor+1,7,c
  3888  001E72  D007               	goto	l6929
  3889  001E74  6C19               	negf	___awdiv@divisor,c
  3890  001E76  1E1A               	comf	___awdiv@divisor+1,f,c
  3891  001E78  B0D8               	btfsc	status,0,c
  3892  001E7A  2A1A               	incf	___awdiv@divisor+1,f,c
  3893  001E7C  0E01               	movlw	1
  3894  001E7E  6E1C               	movwf	___awdiv@sign,c
  3895  001E80  D000               	goto	l6929
  3896  001E82                     l6929:
  3897  001E82  AE18               	btfss	___awdiv@dividend+1,7,c
  3898  001E84  D007               	goto	l6935
  3899  001E86  6C17               	negf	___awdiv@dividend,c
  3900  001E88  1E18               	comf	___awdiv@dividend+1,f,c
  3901  001E8A  B0D8               	btfsc	status,0,c
  3902  001E8C  2A18               	incf	___awdiv@dividend+1,f,c
  3903  001E8E  0E01               	movlw	1
  3904  001E90  1A1C               	xorwf	___awdiv@sign,f,c
  3905  001E92  D000               	goto	l6935
  3906  001E94                     l6935:
  3907  001E94  0E00               	movlw	0
  3908  001E96  6E1E               	movwf	___awdiv@quotient+1,c
  3909  001E98  0E00               	movlw	0
  3910  001E9A  6E1D               	movwf	___awdiv@quotient,c
  3911  001E9C  5019               	movf	___awdiv@divisor,w,c
  3912  001E9E  101A               	iorwf	___awdiv@divisor+1,w,c
  3913  001EA0  B4D8               	btfsc	status,2,c
  3914  001EA2  D021               	goto	l6957
  3915  001EA4  0E01               	movlw	1
  3916  001EA6  6E1B               	movwf	___awdiv@counter,c
  3917  001EA8  D005               	goto	l6943
  3918  001EAA                     l6941:
  3919  001EAA  90D8               	bcf	status,0,c
  3920  001EAC  3619               	rlcf	___awdiv@divisor,f,c
  3921  001EAE  361A               	rlcf	___awdiv@divisor+1,f,c
  3922  001EB0  2A1B               	incf	___awdiv@counter,f,c
  3923  001EB2  D000               	goto	l6943
  3924  001EB4                     l6943:
  3925  001EB4  BE1A               	btfsc	___awdiv@divisor+1,7,c
  3926  001EB6  D002               	goto	l6945
  3927  001EB8  D7F8               	goto	l6941
  3928  001EBA  D000               	goto	l6945
  3929  001EBC                     l6945:
  3930  001EBC  90D8               	bcf	status,0,c
  3931  001EBE  361D               	rlcf	___awdiv@quotient,f,c
  3932  001EC0  361E               	rlcf	___awdiv@quotient+1,f,c
  3933  001EC2  5019               	movf	___awdiv@divisor,w,c
  3934  001EC4  5C17               	subwf	___awdiv@dividend,w,c
  3935  001EC6  501A               	movf	___awdiv@divisor+1,w,c
  3936  001EC8  5818               	subwfb	___awdiv@dividend+1,w,c
  3937  001ECA  A0D8               	btfss	status,0,c
  3938  001ECC  D006               	goto	l6953
  3939  001ECE  5019               	movf	___awdiv@divisor,w,c
  3940  001ED0  5E17               	subwf	___awdiv@dividend,f,c
  3941  001ED2  501A               	movf	___awdiv@divisor+1,w,c
  3942  001ED4  5A18               	subwfb	___awdiv@dividend+1,f,c
  3943  001ED6  801D               	bsf	___awdiv@quotient,0,c
  3944  001ED8  D000               	goto	l6953
  3945  001EDA                     l6953:
  3946  001EDA  90D8               	bcf	status,0,c
  3947  001EDC  321A               	rrcf	___awdiv@divisor+1,f,c
  3948  001EDE  3219               	rrcf	___awdiv@divisor,f,c
  3949  001EE0  2E1B               	decfsz	___awdiv@counter,f,c
  3950  001EE2  D7EC               	goto	l6945
  3951  001EE4  D000               	goto	l6957
  3952  001EE6                     l6957:
  3953  001EE6  501C               	movf	___awdiv@sign,w,c
  3954  001EE8  B4D8               	btfsc	status,2,c
  3955  001EEA  D005               	goto	l6961
  3956  001EEC  6C1D               	negf	___awdiv@quotient,c
  3957  001EEE  1E1E               	comf	___awdiv@quotient+1,f,c
  3958  001EF0  B0D8               	btfsc	status,0,c
  3959  001EF2  2A1E               	incf	___awdiv@quotient+1,f,c
  3960  001EF4  D000               	goto	l6961
  3961  001EF6                     l6961:
  3962  001EF6  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3963  001EFA  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3964  001EFE  D000               	goto	l1170
  3965  001F00                     l1170:
  3966  001F00  0012               	return		;funcret
  3967  001F02                     __end_of___awdiv:
  3968                           	opt stack 0
  3969                           tblptru	equ	0xFF8
  3970                           tblptrh	equ	0xFF7
  3971                           tblptrl	equ	0xFF6
  3972                           tablat	equ	0xFF5
  3973                           prodh	equ	0xFF4
  3974                           prodl	equ	0xFF3
  3975                           intcon	equ	0xFF2
  3976                           intcon2	equ	0xFF1
  3977                           postinc0	equ	0xFEE
  3978                           wreg	equ	0xFE8
  3979                           postdec1	equ	0xFE5
  3980                           fsr1l	equ	0xFE1
  3981                           indf2	equ	0xFDF
  3982                           postinc2	equ	0xFDE
  3983                           fsr2h	equ	0xFDA
  3984                           fsr2l	equ	0xFD9
  3985                           status	equ	0xFD8
  3986                           
  3987 ;; *************** function _Initialize_Screen *****************
  3988 ;; Defined at:
  3989 ;;		line 34 in file "Main_Screen.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;		None
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;		None
  3994 ;; Return value:  Size  Location     Type
  3995 ;;		None               void
  3996 ;; Registers used:
  3997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;Total ram usage:        0 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:   10
  4010 ;; This function calls:
  4011 ;;		_LCD_Reset
  4012 ;;		_TFT_GreenTab_Initialize
  4013 ;;		_drawCircle
  4014 ;;		_drawtext
  4015 ;;		_fillScreen
  4016 ;;		_strcpy
  4017 ;; This function is called by:
  4018 ;;		_main
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text10
  4023  000D4A                     __ptext10:
  4024                           	opt stack 0
  4025  000D4A                     _Initialize_Screen:
  4026                           	opt stack 20
  4027                           
  4028                           ;Main_Screen.c: 36: LCD_Reset();
  4029                           
  4030                           ;incstack = 0
  4031  000D4A  ECC8  F014         	call	_LCD_Reset	;wreg free
  4032                           
  4033                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4034  000D4E  EC00  F014         	call	_TFT_GreenTab_Initialize	;wreg free
  4035                           
  4036                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4037  000D52  0E00               	movlw	0
  4038  000D54  6E25               	movwf	fillScreen@color+1,c
  4039  000D56  0E00               	movlw	0
  4040  000D58  6E24               	movwf	fillScreen@color,c
  4041  000D5A  EC6C  F014         	call	_fillScreen	;wreg free
  4042                           
  4043                           ;Main_Screen.c: 39: txt = buffer;
  4044  000D5E  0E54               	movlw	low _buffer
  4045  000D60  6E4D               	movwf	_txt,c
  4046  000D62  0E01               	movlw	high _buffer
  4047  000D64  6E4E               	movwf	_txt+1,c
  4048                           
  4049                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 22-S3");
  4050  000D66  C04D  F011         	movff	_txt,strcpy@to
  4051  000D6A  C04E  F012         	movff	_txt+1,strcpy@to+1
  4052  000D6E  0E37               	movlw	low STR_9
  4053  000D70  6E13               	movwf	strcpy@from,c
  4054  000D72  0EFF               	movlw	high STR_9
  4055  000D74  6E14               	movwf	strcpy@from+1,c
  4056  000D76  EC87  F013         	call	_strcpy	;wreg free
  4057                           
  4058                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4059  000D7A  0E01               	movlw	1
  4060  000D7C  6E39               	movwf	drawtext@y,c
  4061  000D7E  C04D  F03A         	movff	_txt,drawtext@_text
  4062  000D82  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4063  000D86  0EFF               	movlw	255
  4064  000D88  6E3D               	movwf	drawtext@color+1,c
  4065  000D8A  683C               	setf	drawtext@color,c
  4066  000D8C  0E00               	movlw	0
  4067  000D8E  6E3F               	movwf	drawtext@bg+1,c
  4068  000D90  0E00               	movlw	0
  4069  000D92  6E3E               	movwf	drawtext@bg,c
  4070  000D94  0E01               	movlw	1
  4071  000D96  6E40               	movwf	drawtext@size,c
  4072  000D98  0E01               	movlw	1
  4073  000D9A  EC18  F00B         	call	_drawtext
  4074                           
  4075                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4076  000D9E  C04D  F011         	movff	_txt,strcpy@to
  4077  000DA2  C04E  F012         	movff	_txt+1,strcpy@to+1
  4078  000DA6  0ECF               	movlw	low STR_10
  4079  000DA8  6E13               	movwf	strcpy@from,c
  4080  000DAA  0EFF               	movlw	high STR_10
  4081  000DAC  6E14               	movwf	strcpy@from+1,c
  4082  000DAE  EC87  F013         	call	_strcpy	;wreg free
  4083                           
  4084                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4085  000DB2  0E0B               	movlw	11
  4086  000DB4  6E39               	movwf	drawtext@y,c
  4087  000DB6  C04D  F03A         	movff	_txt,drawtext@_text
  4088  000DBA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4089  000DBE  0EF8               	movlw	248
  4090  000DC0  6E3D               	movwf	drawtext@color+1,c
  4091  000DC2  0E1F               	movlw	31
  4092  000DC4  6E3C               	movwf	drawtext@color,c
  4093  000DC6  0E00               	movlw	0
  4094  000DC8  6E3F               	movwf	drawtext@bg+1,c
  4095  000DCA  0E00               	movlw	0
  4096  000DCC  6E3E               	movwf	drawtext@bg,c
  4097  000DCE  0E01               	movlw	1
  4098  000DD0  6E40               	movwf	drawtext@size,c
  4099  000DD2  0E18               	movlw	24
  4100  000DD4  EC18  F00B         	call	_drawtext
  4101                           
  4102                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  4103  000DD8  0E00               	movlw	0
  4104  000DDA  6E1D               	movwf	drawCircle@x0+1,c
  4105  000DDC  0E28               	movlw	40
  4106  000DDE  6E1C               	movwf	drawCircle@x0,c
  4107  000DE0  0E00               	movlw	0
  4108  000DE2  6E1F               	movwf	drawCircle@y0+1,c
  4109  000DE4  0E17               	movlw	23
  4110  000DE6  6E1E               	movwf	drawCircle@y0,c
  4111  000DE8  0E00               	movlw	0
  4112  000DEA  6E21               	movwf	drawCircle@r+1,c
  4113  000DEC  0E02               	movlw	2
  4114  000DEE  6E20               	movwf	drawCircle@r,c
  4115  000DF0  0EFF               	movlw	255
  4116  000DF2  6E23               	movwf	drawCircle@color+1,c
  4117  000DF4  0EE0               	movlw	224
  4118  000DF6  6E22               	movwf	drawCircle@color,c
  4119  000DF8  ECE0  F008         	call	_drawCircle	;wreg free
  4120                           
  4121                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  4122  000DFC  C04D  F011         	movff	_txt,strcpy@to
  4123  000E00  C04E  F012         	movff	_txt+1,strcpy@to+1
  4124  000E04  0EF8               	movlw	low STR_11
  4125  000E06  6E13               	movwf	strcpy@from,c
  4126  000E08  0EFF               	movlw	high STR_11
  4127  000E0A  6E14               	movwf	strcpy@from+1,c
  4128  000E0C  EC87  F013         	call	_strcpy	;wreg free
  4129                           
  4130                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  4131  000E10  0E17               	movlw	23
  4132  000E12  6E39               	movwf	drawtext@y,c
  4133  000E14  C04D  F03A         	movff	_txt,drawtext@_text
  4134  000E18  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4135  000E1C  0EFF               	movlw	255
  4136  000E1E  6E3D               	movwf	drawtext@color+1,c
  4137  000E20  0EE0               	movlw	224
  4138  000E22  6E3C               	movwf	drawtext@color,c
  4139  000E24  0E00               	movlw	0
  4140  000E26  6E3F               	movwf	drawtext@bg+1,c
  4141  000E28  0E00               	movlw	0
  4142  000E2A  6E3E               	movwf	drawtext@bg,c
  4143  000E2C  0E02               	movlw	2
  4144  000E2E  6E40               	movwf	drawtext@size,c
  4145  000E30  0E2D               	movlw	45
  4146  000E32  EC18  F00B         	call	_drawtext
  4147                           
  4148                           ;Main_Screen.c: 49: strcpy(txt, "F");
  4149  000E36  C04D  F011         	movff	_txt,strcpy@to
  4150  000E3A  C04E  F012         	movff	_txt+1,strcpy@to+1
  4151  000E3E  0E9D               	movlw	low (STR_20+15)
  4152  000E40  6E13               	movwf	strcpy@from,c
  4153  000E42  0EFF               	movlw	high (STR_20+15)
  4154  000E44  6E14               	movwf	strcpy@from+1,c
  4155  000E46  EC87  F013         	call	_strcpy	;wreg free
  4156                           
  4157                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  4158  000E4A  0E00               	movlw	0
  4159  000E4C  6E1D               	movwf	drawCircle@x0+1,c
  4160  000E4E  0E6E               	movlw	110
  4161  000E50  6E1C               	movwf	drawCircle@x0,c
  4162  000E52  0E00               	movlw	0
  4163  000E54  6E1F               	movwf	drawCircle@y0+1,c
  4164  000E56  0E17               	movlw	23
  4165  000E58  6E1E               	movwf	drawCircle@y0,c
  4166  000E5A  0E00               	movlw	0
  4167  000E5C  6E21               	movwf	drawCircle@r+1,c
  4168  000E5E  0E02               	movlw	2
  4169  000E60  6E20               	movwf	drawCircle@r,c
  4170  000E62  0EFF               	movlw	255
  4171  000E64  6E23               	movwf	drawCircle@color+1,c
  4172  000E66  0EE0               	movlw	224
  4173  000E68  6E22               	movwf	drawCircle@color,c
  4174  000E6A  ECE0  F008         	call	_drawCircle	;wreg free
  4175                           
  4176                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  4177  000E6E  0E17               	movlw	23
  4178  000E70  6E39               	movwf	drawtext@y,c
  4179  000E72  C04D  F03A         	movff	_txt,drawtext@_text
  4180  000E76  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4181  000E7A  0EFF               	movlw	255
  4182  000E7C  6E3D               	movwf	drawtext@color+1,c
  4183  000E7E  0EE0               	movlw	224
  4184  000E80  6E3C               	movwf	drawtext@color,c
  4185  000E82  0E00               	movlw	0
  4186  000E84  6E3F               	movwf	drawtext@bg+1,c
  4187  000E86  0E00               	movlw	0
  4188  000E88  6E3E               	movwf	drawtext@bg,c
  4189  000E8A  0E02               	movlw	2
  4190  000E8C  6E40               	movwf	drawtext@size,c
  4191  000E8E  0E73               	movlw	115
  4192  000E90  EC18  F00B         	call	_drawtext
  4193                           
  4194                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  4195  000E94  C04D  F011         	movff	_txt,strcpy@to
  4196  000E98  C04E  F012         	movff	_txt+1,strcpy@to+1
  4197  000E9C  0EE2               	movlw	low STR_13
  4198  000E9E  6E13               	movwf	strcpy@from,c
  4199  000EA0  0EFF               	movlw	high STR_13
  4200  000EA2  6E14               	movwf	strcpy@from+1,c
  4201  000EA4  EC87  F013         	call	_strcpy	;wreg free
  4202                           
  4203                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  4204  000EA8  0E28               	movlw	40
  4205  000EAA  6E39               	movwf	drawtext@y,c
  4206  000EAC  C04D  F03A         	movff	_txt,drawtext@_text
  4207  000EB0  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4208  000EB4  0E00               	movlw	0
  4209  000EB6  6E3D               	movwf	drawtext@color+1,c
  4210  000EB8  0E1F               	movlw	31
  4211  000EBA  6E3C               	movwf	drawtext@color,c
  4212  000EBC  0E00               	movlw	0
  4213  000EBE  6E3F               	movwf	drawtext@bg+1,c
  4214  000EC0  0E00               	movlw	0
  4215  000EC2  6E3E               	movwf	drawtext@bg,c
  4216  000EC4  0E01               	movlw	1
  4217  000EC6  6E40               	movwf	drawtext@size,c
  4218  000EC8  0E32               	movlw	50
  4219  000ECA  EC18  F00B         	call	_drawtext
  4220                           
  4221                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  4222  000ECE  C04D  F011         	movff	_txt,strcpy@to
  4223  000ED2  C04E  F012         	movff	_txt+1,strcpy@to+1
  4224  000ED6  0EE7               	movlw	low STR_14
  4225  000ED8  6E13               	movwf	strcpy@from,c
  4226  000EDA  0EFF               	movlw	high STR_14
  4227  000EDC  6E14               	movwf	strcpy@from+1,c
  4228  000EDE  EC87  F013         	call	_strcpy	;wreg free
  4229                           
  4230                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  4231  000EE2  0E47               	movlw	71
  4232  000EE4  6E39               	movwf	drawtext@y,c
  4233  000EE6  C04D  F03A         	movff	_txt,drawtext@_text
  4234  000EEA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4235  000EEE  0EF8               	movlw	248
  4236  000EF0  6E3D               	movwf	drawtext@color+1,c
  4237  000EF2  0E00               	movlw	0
  4238  000EF4  6E3C               	movwf	drawtext@color,c
  4239  000EF6  0E00               	movlw	0
  4240  000EF8  6E3F               	movwf	drawtext@bg+1,c
  4241  000EFA  0E00               	movlw	0
  4242  000EFC  6E3E               	movwf	drawtext@bg,c
  4243  000EFE  0E01               	movlw	1
  4244  000F00  6E40               	movwf	drawtext@size,c
  4245  000F02  0E32               	movlw	50
  4246  000F04  EC18  F00B         	call	_drawtext
  4247                           
  4248                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  4249  000F08  C04D  F011         	movff	_txt,strcpy@to
  4250  000F0C  C04E  F012         	movff	_txt+1,strcpy@to+1
  4251  000F10  0EDC               	movlw	low STR_15
  4252  000F12  6E13               	movwf	strcpy@from,c
  4253  000F14  0EFF               	movlw	high STR_15
  4254  000F16  6E14               	movwf	strcpy@from+1,c
  4255  000F18  EC87  F013         	call	_strcpy	;wreg free
  4256                           
  4257                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  4258  000F1C  0E78               	movlw	120
  4259  000F1E  6E39               	movwf	drawtext@y,c
  4260  000F20  C04D  F03A         	movff	_txt,drawtext@_text
  4261  000F24  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4262  000F28  0E00               	movlw	0
  4263  000F2A  6E3D               	movwf	drawtext@color+1,c
  4264  000F2C  0E1F               	movlw	31
  4265  000F2E  6E3C               	movwf	drawtext@color,c
  4266  000F30  0E00               	movlw	0
  4267  000F32  6E3F               	movwf	drawtext@bg+1,c
  4268  000F34  0E00               	movlw	0
  4269  000F36  6E3E               	movwf	drawtext@bg,c
  4270  000F38  0E01               	movlw	1
  4271  000F3A  6E40               	movwf	drawtext@size,c
  4272  000F3C  0E55               	movlw	85
  4273  000F3E  EC18  F00B         	call	_drawtext
  4274                           
  4275                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  4276  000F42  C04D  F011         	movff	_txt,strcpy@to
  4277  000F46  C04E  F012         	movff	_txt+1,strcpy@to+1
  4278  000F4A  0EFB               	movlw	low STR_16
  4279  000F4C  6E13               	movwf	strcpy@from,c
  4280  000F4E  0EFF               	movlw	high STR_16
  4281  000F50  6E14               	movwf	strcpy@from+1,c
  4282  000F52  EC87  F013         	call	_strcpy	;wreg free
  4283                           
  4284                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  4285  000F56  0E8C               	movlw	140
  4286  000F58  6E39               	movwf	drawtext@y,c
  4287  000F5A  C04D  F03A         	movff	_txt,drawtext@_text
  4288  000F5E  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4289  000F62  0EFF               	movlw	255
  4290  000F64  6E3D               	movwf	drawtext@color+1,c
  4291  000F66  683C               	setf	drawtext@color,c
  4292  000F68  0E00               	movlw	0
  4293  000F6A  6E3F               	movwf	drawtext@bg+1,c
  4294  000F6C  0E00               	movlw	0
  4295  000F6E  6E3E               	movwf	drawtext@bg,c
  4296  000F70  0E01               	movlw	1
  4297  000F72  6E40               	movwf	drawtext@size,c
  4298  000F74  0E0C               	movlw	12
  4299  000F76  EC18  F00B         	call	_drawtext
  4300                           
  4301                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  4302  000F7A  C04D  F011         	movff	_txt,strcpy@to
  4303  000F7E  C04E  F012         	movff	_txt+1,strcpy@to+1
  4304  000F82  0EF4               	movlw	low STR_17
  4305  000F84  6E13               	movwf	strcpy@from,c
  4306  000F86  0EFF               	movlw	high STR_17
  4307  000F88  6E14               	movwf	strcpy@from+1,c
  4308  000F8A  EC87  F013         	call	_strcpy	;wreg free
  4309                           
  4310                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  4311  000F8E  0E8C               	movlw	140
  4312  000F90  6E39               	movwf	drawtext@y,c
  4313  000F92  C04D  F03A         	movff	_txt,drawtext@_text
  4314  000F96  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4315  000F9A  0EFF               	movlw	255
  4316  000F9C  6E3D               	movwf	drawtext@color+1,c
  4317  000F9E  683C               	setf	drawtext@color,c
  4318  000FA0  0E00               	movlw	0
  4319  000FA2  6E3F               	movwf	drawtext@bg+1,c
  4320  000FA4  0E00               	movlw	0
  4321  000FA6  6E3E               	movwf	drawtext@bg,c
  4322  000FA8  0E01               	movlw	1
  4323  000FAA  6E40               	movwf	drawtext@size,c
  4324  000FAC  0E5F               	movlw	95
  4325  000FAE  EC18  F00B         	call	_drawtext
  4326  000FB2  0012               	return		;funcret
  4327  000FB4                     __end_of_Initialize_Screen:
  4328                           	opt stack 0
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           prodh	equ	0xFF4
  4334                           prodl	equ	0xFF3
  4335                           intcon	equ	0xFF2
  4336                           intcon2	equ	0xFF1
  4337                           postinc0	equ	0xFEE
  4338                           wreg	equ	0xFE8
  4339                           postdec1	equ	0xFE5
  4340                           fsr1l	equ	0xFE1
  4341                           indf2	equ	0xFDF
  4342                           postinc2	equ	0xFDE
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _strcpy *****************
  4348 ;; Defined at:
  4349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  to              2   16[COMRAM] PTR unsigned char 
  4352 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4353 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4354 ;;		 -> STR_19(4), STR_18(4), STR_17(4), STR_16(3), 
  4355 ;;		 -> STR_15(6), STR_14(5), STR_13(5), STR_12(2), 
  4356 ;;		 -> STR_11(3), STR_10(13), STR_9(22), 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4359 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  2   16[COMRAM] PTR unsigned char 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4369 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;Total ram usage:        6 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    3
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_Initialize_Screen
  4380 ;;		_Update_Screen
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text11
  4385  00270E                     __ptext11:
  4386                           	opt stack 0
  4387  00270E                     _strcpy:
  4388                           	opt stack 26
  4389                           
  4390                           ;incstack = 0
  4391  00270E  C011  F015         	movff	strcpy@to,strcpy@cp
  4392  002712  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4393  002716  D005               	goto	l6795
  4394  002718                     l6793:
  4395  002718  4A15               	infsnz	strcpy@cp,f,c
  4396  00271A  2A16               	incf	strcpy@cp+1,f,c
  4397  00271C  4A13               	infsnz	strcpy@from,f,c
  4398  00271E  2A14               	incf	strcpy@from+1,f,c
  4399  002720  D000               	goto	l6795
  4400  002722                     l6795:
  4401  002722  C013  FFF6         	movff	strcpy@from,tblptrl
  4402  002726  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4403  00272A                     	if	0	;tblptru may be non-zero
  4404  00272A                     	endif
  4405  00272A                     	if	0	;tblptru may be non-zero
  4406  00272A                     	endif
  4407  00272A  C015  FFD9         	movff	strcpy@cp,fsr2l
  4408  00272E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4409  002732  0008               	tblrd		*
  4410  002734  CFF5 FFDF          	movff	tablat,indf2
  4411  002738  50DF               	movf	indf2,w,c
  4412  00273A  A4D8               	btfss	status,2,c
  4413  00273C  D7ED               	goto	l6793
  4414                           
  4415                           ;	Return value of _strcpy is never used
  4416  00273E  0012               	return		;funcret
  4417  002740                     __end_of_strcpy:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           intcon2	equ	0xFF1
  4427                           postinc0	equ	0xFEE
  4428                           wreg	equ	0xFE8
  4429                           postdec1	equ	0xFE5
  4430                           fsr1l	equ	0xFE1
  4431                           indf2	equ	0xFDF
  4432                           postinc2	equ	0xFDE
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function _fillScreen *****************
  4438 ;; Defined at:
  4439 ;;		line 619 in file "ST7735_TFT.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  color           2   35[COMRAM] unsigned int 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;		None
  4444 ;; Return value:  Size  Location     Type
  4445 ;;		None               void
  4446 ;; Registers used:
  4447 ;;		wreg, status,2, status,0, cstack
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4453 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;Total ram usage:        2 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    7
  4460 ;; This function calls:
  4461 ;;		_fillRectangle
  4462 ;; This function is called by:
  4463 ;;		_Initialize_Screen
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text12
  4468  0028D8                     __ptext12:
  4469                           	opt stack 0
  4470  0028D8                     _fillScreen:
  4471                           	opt stack 22
  4472                           
  4473                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4474                           
  4475                           ;incstack = 0
  4476  0028D8  0E00               	movlw	0
  4477  0028DA  6E18               	movwf	fillRectangle@y,c
  4478  0028DC  0E80               	movlw	128
  4479  0028DE  6E19               	movwf	fillRectangle@w,c
  4480  0028E0  0EA0               	movlw	160
  4481  0028E2  6E1A               	movwf	fillRectangle@h,c
  4482  0028E4  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4483  0028E8  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4484  0028EC  0E00               	movlw	0
  4485  0028EE  EC04  F00E         	call	_fillRectangle
  4486  0028F2  0012               	return		;funcret
  4487  0028F4                     __end_of_fillScreen:
  4488                           	opt stack 0
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           prodh	equ	0xFF4
  4494                           prodl	equ	0xFF3
  4495                           intcon	equ	0xFF2
  4496                           intcon2	equ	0xFF1
  4497                           postinc0	equ	0xFEE
  4498                           wreg	equ	0xFE8
  4499                           postdec1	equ	0xFE5
  4500                           fsr1l	equ	0xFE1
  4501                           indf2	equ	0xFDF
  4502                           postinc2	equ	0xFDE
  4503                           fsr2h	equ	0xFDA
  4504                           fsr2l	equ	0xFD9
  4505                           status	equ	0xFD8
  4506                           
  4507 ;; *************** function _fillRectangle *****************
  4508 ;; Defined at:
  4509 ;;		line 503 in file "ST7735_TFT.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;  x               1    wreg     unsigned char 
  4512 ;;  y               1   23[COMRAM] unsigned char 
  4513 ;;  w               1   24[COMRAM] unsigned char 
  4514 ;;  h               1   25[COMRAM] unsigned char 
  4515 ;;  color           2   26[COMRAM] unsigned int 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  x               1   34[COMRAM] unsigned char 
  4518 ;;  lo              1   33[COMRAM] unsigned char 
  4519 ;;  hi              1   32[COMRAM] unsigned char 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;		None               void
  4522 ;; Registers used:
  4523 ;;		wreg, status,2, status,0, cstack
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4529 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;Total ram usage:       12 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    6
  4536 ;; This function calls:
  4537 ;;		_setAddrWindow
  4538 ;;		_spiwrite
  4539 ;; This function is called by:
  4540 ;;		_fillScreen
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           	psect	text13
  4545  001C08                     __ptext13:
  4546                           	opt stack 0
  4547  001C08                     _fillRectangle:
  4548                           	opt stack 22
  4549                           
  4550                           ;incstack = 0
  4551                           ;fillRectangle@x stored from wreg
  4552  001C08  6E23               	movwf	fillRectangle@x,c
  4553                           
  4554                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4555                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4556  001C0A  0E80               	movlw	128
  4557  001C0C  6023               	cpfslt	fillRectangle@x,c
  4558  001C0E  D069               	goto	l497
  4559  001C10  0E9F               	movlw	159
  4560  001C12  6418               	cpfsgt	fillRectangle@y,c
  4561  001C14  D001               	goto	l6305
  4562                           
  4563                           ;ST7735_TFT.c: 507: return;
  4564  001C16  D065               	goto	l497
  4565  001C18                     l6305:
  4566                           
  4567                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4568  001C18  0EFF               	movlw	255
  4569  001C1A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4570  001C1C  0EFF               	movlw	255
  4571  001C1E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4572  001C20  5019               	movf	fillRectangle@w,w,c
  4573  001C22  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4574  001C26  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4575  001C28  261F               	addwf	??_fillRectangle+2,f,c
  4576  001C2A  0E00               	movlw	0
  4577  001C2C  2220               	addwfc	??_fillRectangle+3,f,c
  4578  001C2E  501D               	movf	??_fillRectangle,w,c
  4579  001C30  261F               	addwf	??_fillRectangle+2,f,c
  4580  001C32  501E               	movf	??_fillRectangle+1,w,c
  4581  001C34  2220               	addwfc	??_fillRectangle+3,f,c
  4582  001C36  BE20               	btfsc	??_fillRectangle+3,7,c
  4583  001C38  D00A               	goto	l498
  4584  001C3A  5020               	movf	??_fillRectangle+3,w,c
  4585  001C3C  E104               	bnz	u5120
  4586  001C3E  0E80               	movlw	128
  4587  001C40  5C1F               	subwf	??_fillRectangle+2,w,c
  4588  001C42  A0D8               	btfss	status,0,c
  4589  001C44  D004               	goto	l498
  4590  001C46                     u5120:
  4591                           
  4592                           ;ST7735_TFT.c: 509: w = 128 - x;
  4593  001C46  5023               	movf	fillRectangle@x,w,c
  4594  001C48  0800               	sublw	0
  4595  001C4A  0F80               	addlw	128
  4596  001C4C  6E19               	movwf	fillRectangle@w,c
  4597  001C4E                     l498:
  4598                           
  4599                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4600  001C4E  0EFF               	movlw	255
  4601  001C50  6E1D               	movwf	??_fillRectangle& (0+255),c
  4602  001C52  0EFF               	movlw	255
  4603  001C54  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4604  001C56  501A               	movf	fillRectangle@h,w,c
  4605  001C58  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4606  001C5C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4607  001C5E  261F               	addwf	??_fillRectangle+2,f,c
  4608  001C60  0E00               	movlw	0
  4609  001C62  2220               	addwfc	??_fillRectangle+3,f,c
  4610  001C64  501D               	movf	??_fillRectangle,w,c
  4611  001C66  261F               	addwf	??_fillRectangle+2,f,c
  4612  001C68  501E               	movf	??_fillRectangle+1,w,c
  4613  001C6A  2220               	addwfc	??_fillRectangle+3,f,c
  4614  001C6C  BE20               	btfsc	??_fillRectangle+3,7,c
  4615  001C6E  D00B               	goto	l6311
  4616  001C70  5020               	movf	??_fillRectangle+3,w,c
  4617  001C72  E104               	bnz	u5130
  4618  001C74  0EA0               	movlw	160
  4619  001C76  5C1F               	subwf	??_fillRectangle+2,w,c
  4620  001C78  A0D8               	btfss	status,0,c
  4621  001C7A  D005               	goto	l6311
  4622  001C7C                     u5130:
  4623                           
  4624                           ;ST7735_TFT.c: 511: h = 160 - y;
  4625  001C7C  5018               	movf	fillRectangle@y,w,c
  4626  001C7E  0800               	sublw	0
  4627  001C80  0FA0               	addlw	160
  4628  001C82  6E1A               	movwf	fillRectangle@h,c
  4629  001C84  D000               	goto	l6311
  4630  001C86                     l6311:
  4631                           
  4632                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4633  001C86  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4634  001C8A  5023               	movf	fillRectangle@x,w,c
  4635  001C8C  2419               	addwf	fillRectangle@w,w,c
  4636  001C8E  6E1D               	movwf	??_fillRectangle& (0+255),c
  4637  001C90  041D               	decf	??_fillRectangle,w,c
  4638  001C92  6E15               	movwf	setAddrWindow@x1,c
  4639  001C94  5018               	movf	fillRectangle@y,w,c
  4640  001C96  241A               	addwf	fillRectangle@h,w,c
  4641  001C98  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4642  001C9A  041E               	decf	??_fillRectangle+1,w,c
  4643  001C9C  6E16               	movwf	setAddrWindow@y1,c
  4644  001C9E  5023               	movf	fillRectangle@x,w,c
  4645  001CA0  EC15  F012         	call	_setAddrWindow
  4646                           
  4647                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4648  001CA4  501C               	movf	fillRectangle@color+1,w,c
  4649  001CA6  6E21               	movwf	fillRectangle@hi,c
  4650  001CA8  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4651                           
  4652                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
  4653  001CAC  8083               	bsf	3971,0,c	;volatile
  4654                           
  4655                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
  4656  001CAE  9283               	bcf	3971,1,c	;volatile
  4657                           
  4658                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4659  001CB0  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4660  001CB4                     l6323:
  4661  001CB4  5018               	movf	fillRectangle@y,w,c
  4662  001CB6  B4D8               	btfsc	status,2,c
  4663  001CB8  D013               	goto	l501
  4664  001CBA  D001               	goto	l500
  4665  001CBC  D011               	goto	l501
  4666  001CBE                     l500:
  4667                           
  4668                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4669  001CBE  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4670  001CC2                     l6327:
  4671  001CC2  5023               	movf	fillRectangle@x,w,c
  4672  001CC4  B4D8               	btfsc	status,2,c
  4673  001CC6  D00A               	goto	l6337
  4674  001CC8  D001               	goto	l6331
  4675  001CCA  D008               	goto	l6337
  4676  001CCC                     l6331:
  4677                           
  4678                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4679  001CCC  5021               	movf	fillRectangle@hi,w,c
  4680  001CCE  ECB4  F014         	call	_spiwrite
  4681                           
  4682                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4683  001CD2  5022               	movf	fillRectangle@lo,w,c
  4684  001CD4  ECB4  F014         	call	_spiwrite
  4685  001CD8  0623               	decf	fillRectangle@x,f,c
  4686  001CDA  D7F3               	goto	l6327
  4687  001CDC                     l6337:
  4688  001CDC  0618               	decf	fillRectangle@y,f,c
  4689  001CDE  D7EA               	goto	l6323
  4690  001CE0                     l501:
  4691                           
  4692                           ;ST7735_TFT.c: 521: }
  4693                           ;ST7735_TFT.c: 522: }
  4694                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
  4695  001CE0  8283               	bsf	3971,1,c	;volatile
  4696  001CE2                     l497:
  4697  001CE2  0012               	return		;funcret
  4698  001CE4                     __end_of_fillRectangle:
  4699                           	opt stack 0
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           intcon2	equ	0xFF1
  4708                           postinc0	equ	0xFEE
  4709                           wreg	equ	0xFE8
  4710                           postdec1	equ	0xFE5
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _drawtext *****************
  4719 ;; Defined at:
  4720 ;;		line 474 in file "ST7735_TFT.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  x               1    wreg     unsigned char 
  4723 ;;  y               1   56[COMRAM] unsigned char 
  4724 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4725 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  4726 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  4727 ;;		 -> buffer(33), 
  4728 ;;  color           2   59[COMRAM] unsigned int 
  4729 ;;  bg              2   61[COMRAM] unsigned int 
  4730 ;;  size            1   63[COMRAM] unsigned char 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  x               1    2[BANK0 ] unsigned char 
  4733 ;;  i               2    5[BANK0 ] unsigned int 
  4734 ;;  textsize        2    3[BANK0 ] unsigned int 
  4735 ;;  cursor_x        1    8[BANK0 ] unsigned char 
  4736 ;;  cursor_y        1    7[BANK0 ] unsigned char 
  4737 ;; Return value:  Size  Location     Type
  4738 ;;		None               void
  4739 ;; Registers used:
  4740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4746 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Totals:         8       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;Total ram usage:       17 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    9
  4753 ;; This function calls:
  4754 ;;		_drawChar
  4755 ;;		_strlen
  4756 ;; This function is called by:
  4757 ;;		_Initialize_Screen
  4758 ;;		_Update_Screen
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text14
  4763  001630                     __ptext14:
  4764                           	opt stack 0
  4765  001630                     _drawtext:
  4766                           	opt stack 20
  4767                           
  4768                           ;incstack = 0
  4769                           ;drawtext@x stored from wreg
  4770  001630  0100               	movlb	0	; () banked
  4771  001632  6FE7               	movwf	drawtext@x& (0+255),b
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4775                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4776                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4777  001634  C0E7  F0ED         	movff	drawtext@x,drawtext@cursor_x
  4778                           
  4779                           ; BSR set to: 0
  4780  001638  C039  F0EC         	movff	drawtext@y,drawtext@cursor_y
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4784  00163C  C03A  F011         	movff	drawtext@_text,strlen@s
  4785  001640  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4786  001644  EC10  F013         	call	_strlen	;wreg free
  4787  001648  C011  F0E8         	movff	?_strlen,drawtext@textsize
  4788  00164C  C012  F0E9         	movff	?_strlen+1,drawtext@textsize+1
  4789                           
  4790                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4791  001650  0E00               	movlw	0
  4792  001652  0100               	movlb	0	; () banked
  4793  001654  6FEB               	movwf	(drawtext@i+1)& (0+255),b
  4794  001656  0E00               	movlw	0
  4795  001658  6FEA               	movwf	drawtext@i& (0+255),b
  4796  00165A  D06A               	goto	l6831
  4797  00165C                     l6805:
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4801  00165C  506F               	movf	_wrap,w,c
  4802  00165E  B4D8               	btfsc	status,2,c
  4803  001660  D03A               	goto	l6821
  4804                           
  4805                           ; BSR set to: 0
  4806  001662  5040               	movf	drawtext@size,w,c
  4807  001664  0D05               	mullw	5
  4808  001666  0100               	movlb	0	; () banked
  4809  001668  51ED               	movf	drawtext@cursor_x& (0+255),w,b
  4810  00166A  0100               	movlb	0	; () banked
  4811  00166C  6FE5               	movwf	??_drawtext& (0+255),b
  4812  00166E  6BE6               	clrf	(??_drawtext+1)& (0+255),b
  4813  001670  50F3               	movf	prodl,w,c
  4814  001672  0100               	movlb	0	; () banked
  4815  001674  27E5               	addwf	??_drawtext& (0+255),f,b
  4816  001676  50F4               	movf	prodh,w,c
  4817  001678  0100               	movlb	0	; () banked
  4818  00167A  23E6               	addwfc	(??_drawtext+1)& (0+255),f,b
  4819  00167C  0100               	movlb	0	; () banked
  4820  00167E  BFE6               	btfsc	(??_drawtext+1)& (0+255),7,b
  4821  001680  D02A               	goto	l6821
  4822  001682  0100               	movlb	0	; () banked
  4823  001684  51E6               	movf	(??_drawtext+1)& (0+255),w,b
  4824  001686  E105               	bnz	u5890
  4825  001688  0E81               	movlw	129
  4826  00168A  0100               	movlb	0	; () banked
  4827  00168C  5DE5               	subwf	??_drawtext& (0+255),w,b
  4828  00168E  A0D8               	btfss	status,0,c
  4829  001690  D022               	goto	l6821
  4830  001692                     u5890:
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4834  001692  0E00               	movlw	0
  4835  001694  0100               	movlb	0	; () banked
  4836  001696  6FED               	movwf	drawtext@cursor_x& (0+255),b
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4840  001698  5040               	movf	drawtext@size,w,c
  4841  00169A  0D07               	mullw	7
  4842  00169C  50F3               	movf	prodl,w,c
  4843  00169E  0100               	movlb	0	; () banked
  4844  0016A0  25EC               	addwf	drawtext@cursor_y& (0+255),w,b
  4845  0016A2  0F03               	addlw	3
  4846  0016A4  0100               	movlb	0	; () banked
  4847  0016A6  6FEC               	movwf	drawtext@cursor_y& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4851  0016A8  0EA0               	movlw	160
  4852  0016AA  0100               	movlb	0	; () banked
  4853  0016AC  65EC               	cpfsgt	drawtext@cursor_y& (0+255),b
  4854  0016AE  D004               	goto	l6817
  4855                           
  4856                           ; BSR set to: 0
  4857  0016B0  0EA0               	movlw	160
  4858  0016B2  0100               	movlb	0	; () banked
  4859  0016B4  6FEC               	movwf	drawtext@cursor_y& (0+255),b
  4860  0016B6  D000               	goto	l6817
  4861  0016B8                     l6817:
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4865  0016B8  0100               	movlb	0	; () banked
  4866  0016BA  51EA               	movf	drawtext@i& (0+255),w,b
  4867  0016BC  243A               	addwf	drawtext@_text,w,c
  4868  0016BE  6ED9               	movwf	fsr2l,c
  4869  0016C0  0100               	movlb	0	; () banked
  4870  0016C2  51EB               	movf	(drawtext@i+1)& (0+255),w,b
  4871  0016C4  203B               	addwfc	drawtext@_text+1,w,c
  4872  0016C6  6EDA               	movwf	fsr2h,c
  4873  0016C8  0E20               	movlw	32
  4874  0016CA  18DE               	xorwf	postinc2,w,c
  4875  0016CC  B4D8               	btfsc	status,2,c
  4876  0016CE  D02C               	goto	l6829
  4877  0016D0  D002               	goto	l6821
  4878                           
  4879                           ; BSR set to: 0
  4880  0016D2  D02A               	goto	l6829
  4881                           
  4882                           ; BSR set to: 0
  4883  0016D4  D000               	goto	l6821
  4884  0016D6                     l6821:
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4888  0016D6  C0EC  F02E         	movff	drawtext@cursor_y,drawChar@y
  4889  0016DA  0100               	movlb	0	; () banked
  4890  0016DC  51EA               	movf	drawtext@i& (0+255),w,b
  4891  0016DE  243A               	addwf	drawtext@_text,w,c
  4892  0016E0  6ED9               	movwf	fsr2l,c
  4893  0016E2  0100               	movlb	0	; () banked
  4894  0016E4  51EB               	movf	(drawtext@i+1)& (0+255),w,b
  4895  0016E6  203B               	addwfc	drawtext@_text+1,w,c
  4896  0016E8  6EDA               	movwf	fsr2h,c
  4897  0016EA  50DF               	movf	indf2,w,c
  4898  0016EC  6E2F               	movwf	drawChar@c,c
  4899  0016EE  C03C  F030         	movff	drawtext@color,drawChar@color
  4900  0016F2  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4901  0016F6  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4902  0016FA  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4903  0016FE  C040  F034         	movff	drawtext@size,drawChar@size
  4904  001702  0100               	movlb	0	; () banked
  4905  001704  51ED               	movf	drawtext@cursor_x& (0+255),w,b
  4906  001706  EC6D  F00A         	call	_drawChar
  4907                           
  4908                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4909  00170A  5040               	movf	drawtext@size,w,c
  4910  00170C  0D06               	mullw	6
  4911  00170E  50F3               	movf	prodl,w,c
  4912  001710  0100               	movlb	0	; () banked
  4913  001712  25ED               	addwf	drawtext@cursor_x& (0+255),w,b
  4914  001714  0100               	movlb	0	; () banked
  4915  001716  6FED               	movwf	drawtext@cursor_x& (0+255),b
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4919  001718  0E80               	movlw	128
  4920  00171A  0100               	movlb	0	; () banked
  4921  00171C  65ED               	cpfsgt	drawtext@cursor_x& (0+255),b
  4922  00171E  D004               	goto	l6829
  4923                           
  4924                           ; BSR set to: 0
  4925  001720  0E80               	movlw	128
  4926  001722  0100               	movlb	0	; () banked
  4927  001724  6FED               	movwf	drawtext@cursor_x& (0+255),b
  4928                           
  4929                           ; BSR set to: 0
  4930  001726  D000               	goto	l6829
  4931  001728                     l6829:
  4932                           
  4933                           ; BSR set to: 0
  4934  001728  0100               	movlb	0	; () banked
  4935  00172A  4BEA               	infsnz	drawtext@i& (0+255),f,b
  4936  00172C  2BEB               	incf	(drawtext@i+1)& (0+255),f,b
  4937  00172E  D000               	goto	l6831
  4938  001730                     l6831:
  4939                           
  4940                           ; BSR set to: 0
  4941  001730  0100               	movlb	0	; () banked
  4942  001732  51E8               	movf	drawtext@textsize& (0+255),w,b
  4943  001734  0100               	movlb	0	; () banked
  4944  001736  5DEA               	subwf	drawtext@i& (0+255),w,b
  4945  001738  0100               	movlb	0	; () banked
  4946  00173A  51E9               	movf	(drawtext@textsize+1)& (0+255),w,b
  4947  00173C  0100               	movlb	0	; () banked
  4948  00173E  59EB               	subwfb	(drawtext@i+1)& (0+255),w,b
  4949  001740  A0D8               	btfss	status,0,c
  4950  001742  D78C               	goto	l6805
  4951                           
  4952                           ; BSR set to: 0
  4953                           
  4954                           ; BSR set to: 0
  4955  001744  0012               	return		;funcret
  4956  001746                     __end_of_drawtext:
  4957                           	opt stack 0
  4958                           tblptru	equ	0xFF8
  4959                           tblptrh	equ	0xFF7
  4960                           tblptrl	equ	0xFF6
  4961                           tablat	equ	0xFF5
  4962                           prodh	equ	0xFF4
  4963                           prodl	equ	0xFF3
  4964                           intcon	equ	0xFF2
  4965                           intcon2	equ	0xFF1
  4966                           postinc0	equ	0xFEE
  4967                           wreg	equ	0xFE8
  4968                           postdec1	equ	0xFE5
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _strlen *****************
  4977 ;; Defined at:
  4978 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4981 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  4982 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  4983 ;;		 -> buffer(33), 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4986 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  4987 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  4988 ;;		 -> buffer(33), 
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  2   16[COMRAM] unsigned int 
  4991 ;; Registers used:
  4992 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4998 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5000 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;Total ram usage:        6 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    3
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_drawtext
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text15
  5013  002620                     __ptext15:
  5014                           	opt stack 0
  5015  002620                     _strlen:
  5016                           	opt stack 25
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;incstack = 0
  5020  002620  C011  F015         	movff	strlen@s,strlen@cp
  5021  002624  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5022  002628  D003               	goto	l6295
  5023  00262A                     l6293:
  5024  00262A  4A15               	infsnz	strlen@cp,f,c
  5025  00262C  2A16               	incf	strlen@cp+1,f,c
  5026  00262E  D000               	goto	l6295
  5027  002630                     l6295:
  5028  002630  C015  FFD9         	movff	strlen@cp,fsr2l
  5029  002634  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5030  002638  50DF               	movf	indf2,w,c
  5031  00263A  A4D8               	btfss	status,2,c
  5032  00263C  D7F6               	goto	l6293
  5033  00263E  C011  F013         	movff	strlen@s,??_strlen
  5034  002642  C012  F014         	movff	strlen@s+1,??_strlen+1
  5035  002646  1E13               	comf	??_strlen,f,c
  5036  002648  1E14               	comf	??_strlen+1,f,c
  5037  00264A  4A13               	infsnz	??_strlen,f,c
  5038  00264C  2A14               	incf	??_strlen+1,f,c
  5039  00264E  5015               	movf	strlen@cp,w,c
  5040  002650  2413               	addwf	??_strlen,w,c
  5041  002652  6E11               	movwf	?_strlen,c
  5042  002654  5016               	movf	strlen@cp+1,w,c
  5043  002656  2014               	addwfc	??_strlen+1,w,c
  5044  002658  6E12               	movwf	?_strlen+1,c
  5045  00265A  D000               	goto	l1539
  5046  00265C                     l1539:
  5047  00265C  0012               	return		;funcret
  5048  00265E                     __end_of_strlen:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           intcon2	equ	0xFF1
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           postdec1	equ	0xFE5
  5061                           fsr1l	equ	0xFE1
  5062                           indf2	equ	0xFDF
  5063                           postinc2	equ	0xFDE
  5064                           fsr2h	equ	0xFDA
  5065                           fsr2l	equ	0xFD9
  5066                           status	equ	0xFD8
  5067                           
  5068 ;; *************** function _drawChar *****************
  5069 ;; Defined at:
  5070 ;;		line 447 in file "ST7735_TFT.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  x               1    wreg     unsigned char 
  5073 ;;  y               1   45[COMRAM] unsigned char 
  5074 ;;  c               1   46[COMRAM] unsigned char 
  5075 ;;  color           2   47[COMRAM] unsigned int 
  5076 ;;  bg              2   49[COMRAM] unsigned int 
  5077 ;;  size            1   51[COMRAM] unsigned char 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  x               1   53[COMRAM] unsigned char 
  5080 ;;  line            1   52[COMRAM] unsigned char 
  5081 ;;  i               1   55[COMRAM] unsigned char 
  5082 ;;  j               1   54[COMRAM] unsigned char 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;		None               void
  5085 ;; Registers used:
  5086 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5092 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;Total ram usage:       11 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    8
  5099 ;; This function calls:
  5100 ;;		___wmul
  5101 ;;		_drawPixel
  5102 ;;		_fillRect
  5103 ;; This function is called by:
  5104 ;;		_drawtext
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text16
  5109  0014DA                     __ptext16:
  5110                           	opt stack 0
  5111  0014DA                     _drawChar:
  5112                           	opt stack 20
  5113                           
  5114                           ;incstack = 0
  5115                           ;drawChar@x stored from wreg
  5116  0014DA  6E36               	movwf	drawChar@x,c
  5117                           
  5118                           ;ST7735_TFT.c: 449: char i, j;
  5119                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5120  0014DC  0E80               	movlw	128
  5121  0014DE  6036               	cpfslt	drawChar@x,c
  5122  0014E0  D0A6               	goto	l460
  5123  0014E2  0E9F               	movlw	159
  5124  0014E4  642E               	cpfsgt	drawChar@y,c
  5125  0014E6  D001               	goto	l6241
  5126                           
  5127                           ;ST7735_TFT.c: 451: return;
  5128  0014E8  D0A2               	goto	l460
  5129  0014EA                     l6241:
  5130                           
  5131                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5132  0014EA  5034               	movf	drawChar@size,w,c
  5133  0014EC  A4D8               	btfss	status,2,c
  5134  0014EE  D003               	goto	l6245
  5135  0014F0  0E01               	movlw	1
  5136  0014F2  6E34               	movwf	drawChar@size,c
  5137  0014F4  D000               	goto	l6245
  5138  0014F6                     l6245:
  5139                           
  5140                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5141  0014F6  0E1F               	movlw	31
  5142  0014F8  642F               	cpfsgt	drawChar@c,c
  5143  0014FA  D004               	goto	l6249
  5144  0014FC  0E7E               	movlw	126
  5145  0014FE  642F               	cpfsgt	drawChar@c,c
  5146  001500  D003               	goto	l462
  5147  001502  D000               	goto	l6249
  5148  001504                     l6249:
  5149                           
  5150                           ;ST7735_TFT.c: 454: c = '?';
  5151  001504  0E3F               	movlw	63
  5152  001506  6E2F               	movwf	drawChar@c,c
  5153  001508                     l462:
  5154                           
  5155                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5156  001508  0E00               	movlw	0
  5157  00150A  6E38               	movwf	drawChar@i,c
  5158  00150C                     l6251:
  5159  00150C  0E04               	movlw	4
  5160  00150E  6438               	cpfsgt	drawChar@i,c
  5161  001510  D001               	goto	l6255
  5162  001512  D08D               	goto	l460
  5163  001514                     l6255:
  5164                           
  5165                           ;ST7735_TFT.c: 456: unsigned char line;
  5166                           ;ST7735_TFT.c: 457: if(c < 'S')
  5167  001514  0E53               	movlw	83
  5168  001516  602F               	cpfslt	drawChar@c,c
  5169  001518  D015               	goto	l6259
  5170                           
  5171                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5172  00151A  0EE0               	movlw	224
  5173  00151C  242F               	addwf	drawChar@c,w,c
  5174  00151E  6E11               	movwf	___wmul@multiplier,c
  5175  001520  6A12               	clrf	___wmul@multiplier+1,c
  5176  001522  0EFF               	movlw	255
  5177  001524  2212               	addwfc	___wmul@multiplier+1,f,c
  5178  001526  0E00               	movlw	0
  5179  001528  6E14               	movwf	___wmul@multiplicand+1,c
  5180  00152A  0E05               	movlw	5
  5181  00152C  6E13               	movwf	___wmul@multiplicand,c
  5182  00152E  EC15  F014         	call	___wmul	;wreg free
  5183  001532  5038               	movf	drawChar@i,w,c
  5184  001534  2611               	addwf	?___wmul,f,c
  5185  001536  0E00               	movlw	0
  5186  001538  2212               	addwfc	?___wmul+1,f,c
  5187  00153A  0EED               	movlw	low _font
  5188  00153C  2411               	addwf	?___wmul,w,c
  5189  00153E  6EF6               	movwf	tblptrl,c
  5190  001540  0EFC               	movlw	high _font
  5191  001542  D014               	goto	L4
  5192  001544                     l6259:
  5193                           
  5194                           ;ST7735_TFT.c: 459: else
  5195                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5196  001544  0EAD               	movlw	173
  5197  001546  242F               	addwf	drawChar@c,w,c
  5198  001548  6E11               	movwf	___wmul@multiplier,c
  5199  00154A  6A12               	clrf	___wmul@multiplier+1,c
  5200  00154C  0EFF               	movlw	255
  5201  00154E  2212               	addwfc	___wmul@multiplier+1,f,c
  5202  001550  0E00               	movlw	0
  5203  001552  6E14               	movwf	___wmul@multiplicand+1,c
  5204  001554  0E05               	movlw	5
  5205  001556  6E13               	movwf	___wmul@multiplicand,c
  5206  001558  EC15  F014         	call	___wmul	;wreg free
  5207  00155C  5038               	movf	drawChar@i,w,c
  5208  00155E  2611               	addwf	?___wmul,f,c
  5209  001560  0E00               	movlw	0
  5210  001562  2212               	addwfc	?___wmul+1,f,c
  5211  001564  0EEC               	movlw	low _font2
  5212  001566  2411               	addwf	?___wmul,w,c
  5213  001568  6EF6               	movwf	tblptrl,c
  5214  00156A  0EFD               	movlw	high _font2
  5215  00156C                     L4:
  5216  00156C  2012               	addwfc	?___wmul+1,w,c
  5217  00156E  6EF7               	movwf	tblptrh,c
  5218  001570                     	if	0	;There are less than 3 active tblptr bytes
  5219  001570                     	endif
  5220  001570  0008               	tblrd		*
  5221  001572  CFF5 F035          	movff	tablat,drawChar@line
  5222  001576  D000               	goto	l6261
  5223  001578                     l6261:
  5224                           
  5225                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5226  001578  0E00               	movlw	0
  5227  00157A  6E37               	movwf	drawChar@j,c
  5228  00157C                     l6263:
  5229  00157C  0E06               	movlw	6
  5230  00157E  6437               	cpfsgt	drawChar@j,c
  5231  001580  D001               	goto	l469
  5232  001582  D053               	goto	l6287
  5233  001584                     l469:
  5234                           
  5235                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5236  001584  A035               	btfss	drawChar@line,0,c
  5237  001586  D023               	goto	l6273
  5238                           
  5239                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5240  001588  0434               	decf	drawChar@size,w,c
  5241  00158A  A4D8               	btfss	status,2,c
  5242  00158C  D00C               	goto	l6271
  5243  00158E  502E               	movf	drawChar@y,w,c
  5244  001590  2437               	addwf	drawChar@j,w,c
  5245  001592  6E18               	movwf	drawPixel@y,c
  5246  001594  C030  F019         	movff	drawChar@color,drawPixel@color
  5247  001598  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5248  00159C  5036               	movf	drawChar@x,w,c
  5249  00159E  2438               	addwf	drawChar@i,w,c
  5250  0015A0  ECB9  F013         	call	_drawPixel
  5251  0015A4  D03E               	goto	l6281
  5252  0015A6                     l6271:
  5253                           
  5254                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5255  0015A6  5037               	movf	drawChar@j,w,c
  5256  0015A8  0234               	mulwf	drawChar@size,c
  5257  0015AA  50F3               	movf	prodl,w,c
  5258  0015AC  242E               	addwf	drawChar@y,w,c
  5259  0015AE  6E23               	movwf	fillRect@y,c
  5260  0015B0  C034  F024         	movff	drawChar@size,fillRect@w
  5261  0015B4  C034  F025         	movff	drawChar@size,fillRect@h
  5262  0015B8  C030  F026         	movff	drawChar@color,fillRect@color
  5263  0015BC  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5264  0015C0  5038               	movf	drawChar@i,w,c
  5265  0015C2  0234               	mulwf	drawChar@size,c
  5266  0015C4  50F3               	movf	prodl,w,c
  5267  0015C6  2436               	addwf	drawChar@x,w,c
  5268  0015C8  EC88  F012         	call	_fillRect
  5269                           
  5270                           ;ST7735_TFT.c: 465: }
  5271  0015CC  D02A               	goto	l6281
  5272  0015CE                     l6273:
  5273                           
  5274                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5275  0015CE  5030               	movf	drawChar@color,w,c
  5276  0015D0  1832               	xorwf	drawChar@bg,w,c
  5277  0015D2  E104               	bnz	u5050
  5278  0015D4  5031               	movf	drawChar@color+1,w,c
  5279  0015D6  1833               	xorwf	drawChar@bg+1,w,c
  5280  0015D8  B4D8               	btfsc	status,2,c
  5281  0015DA  D023               	goto	l6281
  5282  0015DC                     u5050:
  5283                           
  5284                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5285  0015DC  0434               	decf	drawChar@size,w,c
  5286  0015DE  A4D8               	btfss	status,2,c
  5287  0015E0  D00C               	goto	l6279
  5288  0015E2  502E               	movf	drawChar@y,w,c
  5289  0015E4  2437               	addwf	drawChar@j,w,c
  5290  0015E6  6E18               	movwf	drawPixel@y,c
  5291  0015E8  C032  F019         	movff	drawChar@bg,drawPixel@color
  5292  0015EC  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5293  0015F0  5036               	movf	drawChar@x,w,c
  5294  0015F2  2438               	addwf	drawChar@i,w,c
  5295  0015F4  ECB9  F013         	call	_drawPixel
  5296  0015F8  D014               	goto	l6281
  5297  0015FA                     l6279:
  5298                           
  5299                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5300  0015FA  5037               	movf	drawChar@j,w,c
  5301  0015FC  0234               	mulwf	drawChar@size,c
  5302  0015FE  50F3               	movf	prodl,w,c
  5303  001600  242E               	addwf	drawChar@y,w,c
  5304  001602  6E23               	movwf	fillRect@y,c
  5305  001604  C034  F024         	movff	drawChar@size,fillRect@w
  5306  001608  C034  F025         	movff	drawChar@size,fillRect@h
  5307  00160C  C032  F026         	movff	drawChar@bg,fillRect@color
  5308  001610  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5309  001614  5038               	movf	drawChar@i,w,c
  5310  001616  0234               	mulwf	drawChar@size,c
  5311  001618  50F3               	movf	prodl,w,c
  5312  00161A  2436               	addwf	drawChar@x,w,c
  5313  00161C  EC88  F012         	call	_fillRect
  5314  001620  D000               	goto	l6281
  5315  001622                     l6281:
  5316  001622  2A37               	incf	drawChar@j,f,c
  5317  001624  90D8               	bcf	status,0,c
  5318  001626  3235               	rrcf	drawChar@line,f,c
  5319  001628  D7A9               	goto	l6263
  5320  00162A                     l6287:
  5321  00162A  2A38               	incf	drawChar@i,f,c
  5322  00162C  D76F               	goto	l6251
  5323  00162E                     l460:
  5324  00162E  0012               	return		;funcret
  5325  001630                     __end_of_drawChar:
  5326                           	opt stack 0
  5327                           tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           intcon	equ	0xFF2
  5334                           intcon2	equ	0xFF1
  5335                           postinc0	equ	0xFEE
  5336                           wreg	equ	0xFE8
  5337                           postdec1	equ	0xFE5
  5338                           fsr1l	equ	0xFE1
  5339                           indf2	equ	0xFDF
  5340                           postinc2	equ	0xFDE
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           
  5345 ;; *************** function _fillRect *****************
  5346 ;; Defined at:
  5347 ;;		line 437 in file "ST7735_TFT.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;  x               1    wreg     unsigned char 
  5350 ;;  y               1   34[COMRAM] unsigned char 
  5351 ;;  w               1   35[COMRAM] unsigned char 
  5352 ;;  h               1   36[COMRAM] unsigned char 
  5353 ;;  color           2   37[COMRAM] unsigned int 
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;  x               1   42[COMRAM] unsigned char 
  5356 ;;  i               2   43[COMRAM] int 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;		None               void
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5366 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;Total ram usage:       11 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    7
  5373 ;; This function calls:
  5374 ;;		_drawFastVLine
  5375 ;; This function is called by:
  5376 ;;		_drawChar
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text17
  5381  002510                     __ptext17:
  5382                           	opt stack 0
  5383  002510                     _fillRect:
  5384                           	opt stack 20
  5385                           
  5386                           ;incstack = 0
  5387                           ;fillRect@x stored from wreg
  5388  002510  6E2B               	movwf	fillRect@x,c
  5389                           
  5390                           ;ST7735_TFT.c: 439: signed int i;
  5391                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5392  002512  C02B  F02C         	movff	fillRect@x,fillRect@i
  5393  002516  6A2D               	clrf	fillRect@i+1,c
  5394  002518  D00E               	goto	l5879
  5395  00251A                     l5875:
  5396                           
  5397                           ;ST7735_TFT.c: 442: {
  5398                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5399  00251A  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5400  00251E  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5401  002522  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5402  002526  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5403  00252A  502C               	movf	fillRect@i,w,c
  5404  00252C  EC81  F00F         	call	_drawFastVLine
  5405  002530  4A2C               	infsnz	fillRect@i,f,c
  5406  002532  2A2D               	incf	fillRect@i+1,f,c
  5407  002534  D000               	goto	l5879
  5408  002536                     l5879:
  5409  002536  5024               	movf	fillRect@w,w,c
  5410  002538  C02B  F028         	movff	fillRect@x,??_fillRect
  5411  00253C  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5412  00253E  2628               	addwf	??_fillRect,f,c
  5413  002540  0E00               	movlw	0
  5414  002542  2229               	addwfc	??_fillRect+1,f,c
  5415  002544  5028               	movf	??_fillRect,w,c
  5416  002546  5C2C               	subwf	fillRect@i,w,c
  5417  002548  502D               	movf	fillRect@i+1,w,c
  5418  00254A  0A80               	xorlw	128
  5419  00254C  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5420  00254E  5029               	movf	??_fillRect+1,w,c
  5421  002550  0A80               	xorlw	128
  5422  002552  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5423  002554  A0D8               	btfss	status,0,c
  5424  002556  D7E1               	goto	l5875
  5425  002558  0012               	return		;funcret
  5426  00255A                     __end_of_fillRect:
  5427                           	opt stack 0
  5428                           tblptru	equ	0xFF8
  5429                           tblptrh	equ	0xFF7
  5430                           tblptrl	equ	0xFF6
  5431                           tablat	equ	0xFF5
  5432                           prodh	equ	0xFF4
  5433                           prodl	equ	0xFF3
  5434                           intcon	equ	0xFF2
  5435                           intcon2	equ	0xFF1
  5436                           postinc0	equ	0xFEE
  5437                           wreg	equ	0xFE8
  5438                           postdec1	equ	0xFE5
  5439                           fsr1l	equ	0xFE1
  5440                           indf2	equ	0xFDF
  5441                           postinc2	equ	0xFDE
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8
  5445                           
  5446 ;; *************** function _drawFastVLine *****************
  5447 ;; Defined at:
  5448 ;;		line 416 in file "ST7735_TFT.c"
  5449 ;; Parameters:    Size  Location     Type
  5450 ;;  x               1    wreg     unsigned char 
  5451 ;;  y               1   23[COMRAM] unsigned char 
  5452 ;;  h               1   24[COMRAM] unsigned char 
  5453 ;;  color           2   25[COMRAM] unsigned int 
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  x               1   33[COMRAM] unsigned char 
  5456 ;;  lo              1   32[COMRAM] unsigned char 
  5457 ;;  hi              1   31[COMRAM] unsigned char 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;		None               void
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, status,0, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5467 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;Total ram usage:       11 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    6
  5474 ;; This function calls:
  5475 ;;		_setAddrWindow
  5476 ;;		_spiwrite
  5477 ;; This function is called by:
  5478 ;;		_fillRect
  5479 ;;		_fillCircleHelper
  5480 ;;		_fillCircle
  5481 ;;		_drawRect
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text18
  5486  001F02                     __ptext18:
  5487                           	opt stack 0
  5488  001F02                     _drawFastVLine:
  5489                           	opt stack 20
  5490                           
  5491                           ;incstack = 0
  5492                           ;drawFastVLine@x stored from wreg
  5493  001F02  6E22               	movwf	drawFastVLine@x,c
  5494                           
  5495                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5496                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5497  001F04  0E80               	movlw	128
  5498  001F06  6022               	cpfslt	drawFastVLine@x,c
  5499  001F08  D03F               	goto	l444
  5500  001F0A  0E9F               	movlw	159
  5501  001F0C  6418               	cpfsgt	drawFastVLine@y,c
  5502  001F0E  D001               	goto	l5779
  5503                           
  5504                           ;ST7735_TFT.c: 420: return;
  5505  001F10  D03B               	goto	l444
  5506  001F12                     l5779:
  5507                           
  5508                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5509  001F12  0EFF               	movlw	255
  5510  001F14  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5511  001F16  0EFF               	movlw	255
  5512  001F18  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5513  001F1A  5019               	movf	drawFastVLine@h,w,c
  5514  001F1C  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5515  001F20  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5516  001F22  261E               	addwf	??_drawFastVLine+2,f,c
  5517  001F24  0E00               	movlw	0
  5518  001F26  221F               	addwfc	??_drawFastVLine+3,f,c
  5519  001F28  501C               	movf	??_drawFastVLine,w,c
  5520  001F2A  261E               	addwf	??_drawFastVLine+2,f,c
  5521  001F2C  501D               	movf	??_drawFastVLine+1,w,c
  5522  001F2E  221F               	addwfc	??_drawFastVLine+3,f,c
  5523  001F30  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5524  001F32  D00B               	goto	l5783
  5525  001F34  501F               	movf	??_drawFastVLine+3,w,c
  5526  001F36  E104               	bnz	u4460
  5527  001F38  0EA0               	movlw	160
  5528  001F3A  5C1E               	subwf	??_drawFastVLine+2,w,c
  5529  001F3C  A0D8               	btfss	status,0,c
  5530  001F3E  D005               	goto	l5783
  5531  001F40                     u4460:
  5532                           
  5533                           ;ST7735_TFT.c: 422: h = 160 - y;
  5534  001F40  5018               	movf	drawFastVLine@y,w,c
  5535  001F42  0800               	sublw	0
  5536  001F44  0FA0               	addlw	160
  5537  001F46  6E19               	movwf	drawFastVLine@h,c
  5538  001F48  D000               	goto	l5783
  5539  001F4A                     l5783:
  5540                           
  5541                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5542  001F4A  501B               	movf	drawFastVLine@color+1,w,c
  5543  001F4C  6E20               	movwf	drawFastVLine@hi,c
  5544  001F4E  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5545                           
  5546                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5547  001F52  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5548  001F56  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5549  001F5A  5018               	movf	drawFastVLine@y,w,c
  5550  001F5C  2419               	addwf	drawFastVLine@h,w,c
  5551  001F5E  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5552  001F60  041C               	decf	??_drawFastVLine,w,c
  5553  001F62  6E16               	movwf	setAddrWindow@y1,c
  5554  001F64  5022               	movf	drawFastVLine@x,w,c
  5555  001F66  EC15  F012         	call	_setAddrWindow
  5556                           
  5557                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
  5558  001F6A  8083               	bsf	3971,0,c	;volatile
  5559                           
  5560                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
  5561  001F6C  9283               	bcf	3971,1,c	;volatile
  5562                           
  5563                           ;ST7735_TFT.c: 428: while (h--) {
  5564  001F6E  D007               	goto	l5795
  5565  001F70                     l5793:
  5566                           
  5567                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5568  001F70  5020               	movf	drawFastVLine@hi,w,c
  5569  001F72  ECB4  F014         	call	_spiwrite
  5570                           
  5571                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5572  001F76  5021               	movf	drawFastVLine@lo,w,c
  5573  001F78  ECB4  F014         	call	_spiwrite
  5574  001F7C  D000               	goto	l5795
  5575  001F7E                     l5795:
  5576  001F7E  0619               	decf	drawFastVLine@h,f,c
  5577  001F80  2819               	incf	drawFastVLine@h,w,c
  5578  001F82  A4D8               	btfss	status,2,c
  5579  001F84  D7F5               	goto	l5793
  5580                           
  5581                           ;ST7735_TFT.c: 431: }
  5582                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
  5583  001F86  8283               	bsf	3971,1,c	;volatile
  5584  001F88                     l444:
  5585  001F88  0012               	return		;funcret
  5586  001F8A                     __end_of_drawFastVLine:
  5587                           	opt stack 0
  5588                           tblptru	equ	0xFF8
  5589                           tblptrh	equ	0xFF7
  5590                           tblptrl	equ	0xFF6
  5591                           tablat	equ	0xFF5
  5592                           prodh	equ	0xFF4
  5593                           prodl	equ	0xFF3
  5594                           intcon	equ	0xFF2
  5595                           intcon2	equ	0xFF1
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           fsr2h	equ	0xFDA
  5603                           fsr2l	equ	0xFD9
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function _drawCircle *****************
  5607 ;; Defined at:
  5608 ;;		line 528 in file "ST7735_TFT.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  x0              2   27[COMRAM] int 
  5611 ;;  y0              2   29[COMRAM] int 
  5612 ;;  r               2   31[COMRAM] int 
  5613 ;;  color           2   33[COMRAM] unsigned int 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  y               2   45[COMRAM] int 
  5616 ;;  x               2   43[COMRAM] int 
  5617 ;;  f               2   41[COMRAM] int 
  5618 ;;  ddF_y           2   39[COMRAM] int 
  5619 ;;  ddF_x           2   37[COMRAM] int 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;		None               void
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5629 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;Total ram usage:       20 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    7
  5636 ;; This function calls:
  5637 ;;		_drawPixel
  5638 ;; This function is called by:
  5639 ;;		_Initialize_Screen
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           	psect	text19
  5644  0011C0                     __ptext19:
  5645                           	opt stack 0
  5646  0011C0                     _drawCircle:
  5647                           	opt stack 22
  5648                           
  5649                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  5650                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  5651                           
  5652                           ;incstack = 0
  5653  0011C0  C020  F024         	movff	drawCircle@r,??_drawCircle
  5654  0011C4  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  5655  0011C8  1E24               	comf	??_drawCircle,f,c
  5656  0011CA  1E25               	comf	??_drawCircle+1,f,c
  5657  0011CC  4A24               	infsnz	??_drawCircle,f,c
  5658  0011CE  2A25               	incf	??_drawCircle+1,f,c
  5659  0011D0  0E01               	movlw	1
  5660  0011D2  2424               	addwf	??_drawCircle,w,c
  5661  0011D4  6E2A               	movwf	drawCircle@f,c
  5662  0011D6  0E00               	movlw	0
  5663  0011D8  2025               	addwfc	??_drawCircle+1,w,c
  5664  0011DA  6E2B               	movwf	drawCircle@f+1,c
  5665  0011DC  0E00               	movlw	0
  5666  0011DE  6E27               	movwf	drawCircle@ddF_x+1,c
  5667  0011E0  0E01               	movlw	1
  5668  0011E2  6E26               	movwf	drawCircle@ddF_x,c
  5669  0011E4  C020  F024         	movff	drawCircle@r,??_drawCircle
  5670  0011E8  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  5671  0011EC  90D8               	bcf	status,0,c
  5672  0011EE  3624               	rlcf	??_drawCircle,f,c
  5673  0011F0  3625               	rlcf	??_drawCircle+1,f,c
  5674  0011F2  1E24               	comf	??_drawCircle,f,c
  5675  0011F4  1E25               	comf	??_drawCircle+1,f,c
  5676  0011F6  4A24               	infsnz	??_drawCircle,f,c
  5677  0011F8  2A25               	incf	??_drawCircle+1,f,c
  5678  0011FA  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  5679  0011FE  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  5680  001202  0E00               	movlw	0
  5681  001204  6E2D               	movwf	drawCircle@x+1,c
  5682  001206  0E00               	movlw	0
  5683  001208  6E2C               	movwf	drawCircle@x,c
  5684  00120A  C020  F02E         	movff	drawCircle@r,drawCircle@y
  5685  00120E  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  5686                           
  5687                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  5688  001212  501E               	movf	drawCircle@y0,w,c
  5689  001214  2420               	addwf	drawCircle@r,w,c
  5690  001216  6E18               	movwf	drawPixel@y,c
  5691  001218  C022  F019         	movff	drawCircle@color,drawPixel@color
  5692  00121C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5693  001220  501C               	movf	drawCircle@x0,w,c
  5694  001222  ECB9  F013         	call	_drawPixel
  5695                           
  5696                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  5697  001226  5020               	movf	drawCircle@r,w,c
  5698  001228  0800               	sublw	0
  5699  00122A  241E               	addwf	drawCircle@y0,w,c
  5700  00122C  6E18               	movwf	drawPixel@y,c
  5701  00122E  C022  F019         	movff	drawCircle@color,drawPixel@color
  5702  001232  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5703  001236  501C               	movf	drawCircle@x0,w,c
  5704  001238  ECB9  F013         	call	_drawPixel
  5705                           
  5706                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  5707  00123C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  5708  001240  C022  F019         	movff	drawCircle@color,drawPixel@color
  5709  001244  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5710  001248  501C               	movf	drawCircle@x0,w,c
  5711  00124A  2420               	addwf	drawCircle@r,w,c
  5712  00124C  ECB9  F013         	call	_drawPixel
  5713                           
  5714                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  5715  001250  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  5716  001254  C022  F019         	movff	drawCircle@color,drawPixel@color
  5717  001258  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5718  00125C  5020               	movf	drawCircle@r,w,c
  5719  00125E  0800               	sublw	0
  5720  001260  241C               	addwf	drawCircle@x0,w,c
  5721  001262  ECB9  F013         	call	_drawPixel
  5722                           
  5723                           ;ST7735_TFT.c: 536: while (x < y) {
  5724  001266  D078               	goto	l6879
  5725  001268                     l6851:
  5726                           
  5727                           ;ST7735_TFT.c: 537: if (f >= 0) {
  5728  001268  BE2B               	btfsc	drawCircle@f+1,7,c
  5729  00126A  D00B               	goto	l508
  5730                           
  5731                           ;ST7735_TFT.c: 538: y--;
  5732  00126C  062E               	decf	drawCircle@y,f,c
  5733  00126E  A0D8               	btfss	status,0,c
  5734  001270  062F               	decf	drawCircle@y+1,f,c
  5735                           
  5736                           ;ST7735_TFT.c: 539: ddF_y += 2;
  5737  001272  0E02               	movlw	2
  5738  001274  2628               	addwf	drawCircle@ddF_y,f,c
  5739  001276  0E00               	movlw	0
  5740  001278  2229               	addwfc	drawCircle@ddF_y+1,f,c
  5741                           
  5742                           ;ST7735_TFT.c: 540: f += ddF_y;
  5743  00127A  5028               	movf	drawCircle@ddF_y,w,c
  5744  00127C  262A               	addwf	drawCircle@f,f,c
  5745  00127E  5029               	movf	drawCircle@ddF_y+1,w,c
  5746  001280  222B               	addwfc	drawCircle@f+1,f,c
  5747  001282                     l508:
  5748                           
  5749                           ;ST7735_TFT.c: 541: }
  5750                           ;ST7735_TFT.c: 542: x++;
  5751  001282  4A2C               	infsnz	drawCircle@x,f,c
  5752  001284  2A2D               	incf	drawCircle@x+1,f,c
  5753                           
  5754                           ;ST7735_TFT.c: 543: ddF_x += 2;
  5755  001286  0E02               	movlw	2
  5756  001288  2626               	addwf	drawCircle@ddF_x,f,c
  5757  00128A  0E00               	movlw	0
  5758  00128C  2227               	addwfc	drawCircle@ddF_x+1,f,c
  5759                           
  5760                           ;ST7735_TFT.c: 544: f += ddF_x;
  5761  00128E  5026               	movf	drawCircle@ddF_x,w,c
  5762  001290  262A               	addwf	drawCircle@f,f,c
  5763  001292  5027               	movf	drawCircle@ddF_x+1,w,c
  5764  001294  222B               	addwfc	drawCircle@f+1,f,c
  5765                           
  5766                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  5767  001296  501E               	movf	drawCircle@y0,w,c
  5768  001298  242E               	addwf	drawCircle@y,w,c
  5769  00129A  6E18               	movwf	drawPixel@y,c
  5770  00129C  C022  F019         	movff	drawCircle@color,drawPixel@color
  5771  0012A0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5772  0012A4  501C               	movf	drawCircle@x0,w,c
  5773  0012A6  242C               	addwf	drawCircle@x,w,c
  5774  0012A8  ECB9  F013         	call	_drawPixel
  5775                           
  5776                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  5777  0012AC  501E               	movf	drawCircle@y0,w,c
  5778  0012AE  242E               	addwf	drawCircle@y,w,c
  5779  0012B0  6E18               	movwf	drawPixel@y,c
  5780  0012B2  C022  F019         	movff	drawCircle@color,drawPixel@color
  5781  0012B6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5782  0012BA  502C               	movf	drawCircle@x,w,c
  5783  0012BC  0800               	sublw	0
  5784  0012BE  241C               	addwf	drawCircle@x0,w,c
  5785  0012C0  ECB9  F013         	call	_drawPixel
  5786                           
  5787                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  5788  0012C4  502E               	movf	drawCircle@y,w,c
  5789  0012C6  0800               	sublw	0
  5790  0012C8  241E               	addwf	drawCircle@y0,w,c
  5791  0012CA  6E18               	movwf	drawPixel@y,c
  5792  0012CC  C022  F019         	movff	drawCircle@color,drawPixel@color
  5793  0012D0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5794  0012D4  501C               	movf	drawCircle@x0,w,c
  5795  0012D6  242C               	addwf	drawCircle@x,w,c
  5796  0012D8  ECB9  F013         	call	_drawPixel
  5797                           
  5798                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  5799  0012DC  502E               	movf	drawCircle@y,w,c
  5800  0012DE  0800               	sublw	0
  5801  0012E0  241E               	addwf	drawCircle@y0,w,c
  5802  0012E2  6E18               	movwf	drawPixel@y,c
  5803  0012E4  C022  F019         	movff	drawCircle@color,drawPixel@color
  5804  0012E8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5805  0012EC  502C               	movf	drawCircle@x,w,c
  5806  0012EE  0800               	sublw	0
  5807  0012F0  241C               	addwf	drawCircle@x0,w,c
  5808  0012F2  ECB9  F013         	call	_drawPixel
  5809                           
  5810                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  5811  0012F6  501E               	movf	drawCircle@y0,w,c
  5812  0012F8  242C               	addwf	drawCircle@x,w,c
  5813  0012FA  6E18               	movwf	drawPixel@y,c
  5814  0012FC  C022  F019         	movff	drawCircle@color,drawPixel@color
  5815  001300  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5816  001304  501C               	movf	drawCircle@x0,w,c
  5817  001306  242E               	addwf	drawCircle@y,w,c
  5818  001308  ECB9  F013         	call	_drawPixel
  5819                           
  5820                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  5821  00130C  501E               	movf	drawCircle@y0,w,c
  5822  00130E  242C               	addwf	drawCircle@x,w,c
  5823  001310  6E18               	movwf	drawPixel@y,c
  5824  001312  C022  F019         	movff	drawCircle@color,drawPixel@color
  5825  001316  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5826  00131A  502E               	movf	drawCircle@y,w,c
  5827  00131C  0800               	sublw	0
  5828  00131E  241C               	addwf	drawCircle@x0,w,c
  5829  001320  ECB9  F013         	call	_drawPixel
  5830                           
  5831                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  5832  001324  502C               	movf	drawCircle@x,w,c
  5833  001326  0800               	sublw	0
  5834  001328  241E               	addwf	drawCircle@y0,w,c
  5835  00132A  6E18               	movwf	drawPixel@y,c
  5836  00132C  C022  F019         	movff	drawCircle@color,drawPixel@color
  5837  001330  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5838  001334  501C               	movf	drawCircle@x0,w,c
  5839  001336  242E               	addwf	drawCircle@y,w,c
  5840  001338  ECB9  F013         	call	_drawPixel
  5841                           
  5842                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  5843  00133C  502C               	movf	drawCircle@x,w,c
  5844  00133E  0800               	sublw	0
  5845  001340  241E               	addwf	drawCircle@y0,w,c
  5846  001342  6E18               	movwf	drawPixel@y,c
  5847  001344  C022  F019         	movff	drawCircle@color,drawPixel@color
  5848  001348  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5849  00134C  502E               	movf	drawCircle@y,w,c
  5850  00134E  0800               	sublw	0
  5851  001350  241C               	addwf	drawCircle@x0,w,c
  5852  001352  ECB9  F013         	call	_drawPixel
  5853  001356  D000               	goto	l6879
  5854  001358                     l6879:
  5855  001358  502E               	movf	drawCircle@y,w,c
  5856  00135A  5C2C               	subwf	drawCircle@x,w,c
  5857  00135C  502D               	movf	drawCircle@x+1,w,c
  5858  00135E  0A80               	xorlw	128
  5859  001360  6E24               	movwf	??_drawCircle& (0+255),c
  5860  001362  502F               	movf	drawCircle@y+1,w,c
  5861  001364  0A80               	xorlw	128
  5862  001366  5824               	subwfb	??_drawCircle& (0+255),w,c
  5863  001368  A0D8               	btfss	status,0,c
  5864  00136A  D77E               	goto	l6851
  5865  00136C  0012               	return		;funcret
  5866  00136E                     __end_of_drawCircle:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           tblptrh	equ	0xFF7
  5870                           tblptrl	equ	0xFF6
  5871                           tablat	equ	0xFF5
  5872                           prodh	equ	0xFF4
  5873                           prodl	equ	0xFF3
  5874                           intcon	equ	0xFF2
  5875                           intcon2	equ	0xFF1
  5876                           postinc0	equ	0xFEE
  5877                           wreg	equ	0xFE8
  5878                           postdec1	equ	0xFE5
  5879                           fsr1l	equ	0xFE1
  5880                           indf2	equ	0xFDF
  5881                           postinc2	equ	0xFDE
  5882                           fsr2h	equ	0xFDA
  5883                           fsr2l	equ	0xFD9
  5884                           status	equ	0xFD8
  5885                           
  5886 ;; *************** function _drawPixel *****************
  5887 ;; Defined at:
  5888 ;;		line 407 in file "ST7735_TFT.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;  x               1    wreg     unsigned char 
  5891 ;;  y               1   23[COMRAM] unsigned char 
  5892 ;;  color           2   24[COMRAM] unsigned int 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  x               1   26[COMRAM] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5904 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;Total ram usage:        4 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    6
  5911 ;; This function calls:
  5912 ;;		_setAddrWindow
  5913 ;;		_write_data
  5914 ;; This function is called by:
  5915 ;;		_drawChar
  5916 ;;		_drawCircle
  5917 ;;		_drawCircleHelper
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           	psect	text20
  5922  002772                     __ptext20:
  5923                           	opt stack 0
  5924  002772                     _drawPixel:
  5925                           	opt stack 21
  5926                           
  5927                           ;incstack = 0
  5928                           ;drawPixel@x stored from wreg
  5929  002772  6E1B               	movwf	drawPixel@x,c
  5930                           
  5931                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5932  002774  0E80               	movlw	128
  5933  002776  601B               	cpfslt	drawPixel@x,c
  5934  002778  D013               	goto	l438
  5935  00277A  0E9F               	movlw	159
  5936  00277C  6418               	cpfsgt	drawPixel@y,c
  5937  00277E  D001               	goto	l5867
  5938                           
  5939                           ;ST7735_TFT.c: 410: return;
  5940  002780  D00F               	goto	l438
  5941  002782                     l5867:
  5942                           
  5943                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5944  002782  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5945  002786  281B               	incf	drawPixel@x,w,c
  5946  002788  6E15               	movwf	setAddrWindow@x1,c
  5947  00278A  2818               	incf	drawPixel@y,w,c
  5948  00278C  6E16               	movwf	setAddrWindow@y1,c
  5949  00278E  501B               	movf	drawPixel@x,w,c
  5950  002790  EC15  F012         	call	_setAddrWindow
  5951                           
  5952                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5953  002794  501A               	movf	drawPixel@color+1,w,c
  5954  002796  ECF5  F014         	call	_write_data
  5955                           
  5956                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5957  00279A  5019               	movf	drawPixel@color,w,c
  5958  00279C  ECF5  F014         	call	_write_data
  5959  0027A0                     l438:
  5960  0027A0  0012               	return		;funcret
  5961  0027A2                     __end_of_drawPixel:
  5962                           	opt stack 0
  5963                           tblptru	equ	0xFF8
  5964                           tblptrh	equ	0xFF7
  5965                           tblptrl	equ	0xFF6
  5966                           tablat	equ	0xFF5
  5967                           prodh	equ	0xFF4
  5968                           prodl	equ	0xFF3
  5969                           intcon	equ	0xFF2
  5970                           intcon2	equ	0xFF1
  5971                           postinc0	equ	0xFEE
  5972                           wreg	equ	0xFE8
  5973                           postdec1	equ	0xFE5
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           postinc2	equ	0xFDE
  5977                           fsr2h	equ	0xFDA
  5978                           fsr2l	equ	0xFD9
  5979                           status	equ	0xFD8
  5980                           
  5981 ;; *************** function _setAddrWindow *****************
  5982 ;; Defined at:
  5983 ;;		line 392 in file "ST7735_TFT.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  x0              1    wreg     unsigned char 
  5986 ;;  y0              1   19[COMRAM] unsigned char 
  5987 ;;  x1              1   20[COMRAM] unsigned char 
  5988 ;;  y1              1   21[COMRAM] unsigned char 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  x0              1   22[COMRAM] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;		None               void
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6000 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;Total ram usage:        4 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    5
  6007 ;; This function calls:
  6008 ;;		_write_command
  6009 ;;		_write_data
  6010 ;; This function is called by:
  6011 ;;		_drawPixel
  6012 ;;		_drawFastVLine
  6013 ;;		_fillRectangle
  6014 ;;		_drawFastHLine
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text21
  6019  00242A                     __ptext21:
  6020                           	opt stack 0
  6021  00242A                     _setAddrWindow:
  6022                           	opt stack 20
  6023                           
  6024                           ;incstack = 0
  6025                           ;setAddrWindow@x0 stored from wreg
  6026  00242A  6E17               	movwf	setAddrWindow@x0,c
  6027                           
  6028                           ;ST7735_TFT.c: 394: write_command(0x2A);
  6029  00242C  0E2A               	movlw	42
  6030  00242E  ECFD  F014         	call	_write_command
  6031                           
  6032                           ;ST7735_TFT.c: 395: write_data(0);
  6033  002432  0E00               	movlw	0
  6034  002434  ECF5  F014         	call	_write_data
  6035                           
  6036                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  6037  002438  5017               	movf	setAddrWindow@x0,w,c
  6038  00243A  2458               	addwf	_colstart,w,c
  6039  00243C  ECF5  F014         	call	_write_data
  6040                           
  6041                           ;ST7735_TFT.c: 397: write_data(0);
  6042  002440  0E00               	movlw	0
  6043  002442  ECF5  F014         	call	_write_data
  6044                           
  6045                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  6046  002446  5015               	movf	setAddrWindow@x1,w,c
  6047  002448  2458               	addwf	_colstart,w,c
  6048  00244A  ECF5  F014         	call	_write_data
  6049                           
  6050                           ;ST7735_TFT.c: 399: write_command(0x2B);
  6051  00244E  0E2B               	movlw	43
  6052  002450  ECFD  F014         	call	_write_command
  6053                           
  6054                           ;ST7735_TFT.c: 400: write_data(0);
  6055  002454  0E00               	movlw	0
  6056  002456  ECF5  F014         	call	_write_data
  6057                           
  6058                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  6059  00245A  5014               	movf	setAddrWindow@y0,w,c
  6060  00245C  2461               	addwf	_rowstart,w,c
  6061  00245E  ECF5  F014         	call	_write_data
  6062                           
  6063                           ;ST7735_TFT.c: 402: write_data(0);
  6064  002462  0E00               	movlw	0
  6065  002464  ECF5  F014         	call	_write_data
  6066                           
  6067                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  6068  002468  5016               	movf	setAddrWindow@y1,w,c
  6069  00246A  2461               	addwf	_rowstart,w,c
  6070  00246C  ECF5  F014         	call	_write_data
  6071                           
  6072                           ;ST7735_TFT.c: 404: write_command(0x2C);
  6073  002470  0E2C               	movlw	44
  6074  002472  ECFD  F014         	call	_write_command
  6075  002476  0012               	return		;funcret
  6076  002478                     __end_of_setAddrWindow:
  6077                           	opt stack 0
  6078                           tblptru	equ	0xFF8
  6079                           tblptrh	equ	0xFF7
  6080                           tblptrl	equ	0xFF6
  6081                           tablat	equ	0xFF5
  6082                           prodh	equ	0xFF4
  6083                           prodl	equ	0xFF3
  6084                           intcon	equ	0xFF2
  6085                           intcon2	equ	0xFF1
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           postdec1	equ	0xFE5
  6089                           fsr1l	equ	0xFE1
  6090                           indf2	equ	0xFDF
  6091                           postinc2	equ	0xFDE
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function _TFT_GreenTab_Initialize *****************
  6097 ;; Defined at:
  6098 ;;		line 644 in file "ST7735_TFT.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;		None
  6103 ;; Return value:  Size  Location     Type
  6104 ;;		None               void
  6105 ;; Registers used:
  6106 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;Total ram usage:        0 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; Hardware stack levels required when called:    6
  6119 ;; This function calls:
  6120 ;;		_Rcmd1
  6121 ;;		_Rcmd2red
  6122 ;;		_Rcmd3
  6123 ;;		_write_command
  6124 ;;		_write_data
  6125 ;; This function is called by:
  6126 ;;		_Initialize_Screen
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           	psect	text22
  6131  002800                     __ptext22:
  6132                           	opt stack 0
  6133  002800                     _TFT_GreenTab_Initialize:
  6134                           	opt stack 23
  6135                           
  6136                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
  6137                           
  6138                           ;incstack = 0
  6139  002800  8283               	bsf	3971,1,c	;volatile
  6140                           
  6141                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
  6142  002802  9083               	bcf	3971,0,c	;volatile
  6143                           
  6144                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  6145  002804  0E80               	movlw	128
  6146  002806  6EC7               	movwf	4039,c	;volatile
  6147                           
  6148                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  6149  002808  0E30               	movlw	48
  6150  00280A  6EC6               	movwf	4038,c	;volatile
  6151                           
  6152                           ;ST7735_TFT.c: 653: Rcmd1();
  6153  00280C  ECA3  F00B         	call	_Rcmd1	;wreg free
  6154                           
  6155                           ;ST7735_TFT.c: 654: Rcmd2red();
  6156  002810  EC2F  F013         	call	_Rcmd2red	;wreg free
  6157                           
  6158                           ;ST7735_TFT.c: 655: Rcmd3();
  6159  002814  ECA7  F00C         	call	_Rcmd3	;wreg free
  6160                           
  6161                           ;ST7735_TFT.c: 656: write_command(0x36);
  6162  002818  0E36               	movlw	54
  6163  00281A  ECFD  F014         	call	_write_command
  6164                           
  6165                           ;ST7735_TFT.c: 657: write_data(0xC0);
  6166  00281E  0EC0               	movlw	192
  6167  002820  ECF5  F014         	call	_write_data
  6168                           
  6169                           ;ST7735_TFT.c: 658: _tft_type = 1;
  6170  002824  0E01               	movlw	1
  6171  002826  6E52               	movwf	__tft_type,c
  6172  002828  0012               	return		;funcret
  6173  00282A                     __end_of_TFT_GreenTab_Initialize:
  6174                           	opt stack 0
  6175                           tblptru	equ	0xFF8
  6176                           tblptrh	equ	0xFF7
  6177                           tblptrl	equ	0xFF6
  6178                           tablat	equ	0xFF5
  6179                           prodh	equ	0xFF4
  6180                           prodl	equ	0xFF3
  6181                           intcon	equ	0xFF2
  6182                           intcon2	equ	0xFF1
  6183                           postinc0	equ	0xFEE
  6184                           wreg	equ	0xFE8
  6185                           postdec1	equ	0xFE5
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           fsr2h	equ	0xFDA
  6190                           fsr2l	equ	0xFD9
  6191                           status	equ	0xFD8
  6192                           
  6193 ;; *************** function _Rcmd3 *****************
  6194 ;; Defined at:
  6195 ;;		line 338 in file "ST7735_TFT.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;		None
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;		None
  6200 ;; Return value:  Size  Location     Type
  6201 ;;		None               void
  6202 ;; Registers used:
  6203 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;Total ram usage:        0 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    5
  6216 ;; This function calls:
  6217 ;;		_delay_ms
  6218 ;;		_write_command
  6219 ;;		_write_data
  6220 ;; This function is called by:
  6221 ;;		_TFT_GreenTab_Initialize
  6222 ;;		_TFT_BlackTab_Initialize
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text23
  6227  00194E                     __ptext23:
  6228                           	opt stack 0
  6229  00194E                     _Rcmd3:
  6230                           	opt stack 23
  6231                           
  6232                           ;ST7735_TFT.c: 340: write_command(0xE0);
  6233                           
  6234                           ;incstack = 0
  6235  00194E  0EE0               	movlw	224
  6236  001950  ECFD  F014         	call	_write_command
  6237                           
  6238                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6239  001954  0E02               	movlw	2
  6240  001956  ECF5  F014         	call	_write_data
  6241  00195A  0E1C               	movlw	28
  6242  00195C  ECF5  F014         	call	_write_data
  6243  001960  0E07               	movlw	7
  6244  001962  ECF5  F014         	call	_write_data
  6245  001966  0E12               	movlw	18
  6246  001968  ECF5  F014         	call	_write_data
  6247                           
  6248                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6249  00196C  0E37               	movlw	55
  6250  00196E  ECF5  F014         	call	_write_data
  6251  001972  0E32               	movlw	50
  6252  001974  ECF5  F014         	call	_write_data
  6253  001978  0E29               	movlw	41
  6254  00197A  ECF5  F014         	call	_write_data
  6255  00197E  0E2D               	movlw	45
  6256  001980  ECF5  F014         	call	_write_data
  6257                           
  6258                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6259  001984  0E29               	movlw	41
  6260  001986  ECF5  F014         	call	_write_data
  6261  00198A  0E25               	movlw	37
  6262  00198C  ECF5  F014         	call	_write_data
  6263  001990  0E2B               	movlw	43
  6264  001992  ECF5  F014         	call	_write_data
  6265  001996  0E39               	movlw	57
  6266  001998  ECF5  F014         	call	_write_data
  6267                           
  6268                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6269  00199C  0E00               	movlw	0
  6270  00199E  ECF5  F014         	call	_write_data
  6271  0019A2  0E01               	movlw	1
  6272  0019A4  ECF5  F014         	call	_write_data
  6273  0019A8  0E03               	movlw	3
  6274  0019AA  ECF5  F014         	call	_write_data
  6275  0019AE  0E10               	movlw	16
  6276  0019B0  ECF5  F014         	call	_write_data
  6277                           
  6278                           ;ST7735_TFT.c: 345: write_command(0xE1);
  6279  0019B4  0EE1               	movlw	225
  6280  0019B6  ECFD  F014         	call	_write_command
  6281                           
  6282                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6283  0019BA  0E03               	movlw	3
  6284  0019BC  ECF5  F014         	call	_write_data
  6285  0019C0  0E1D               	movlw	29
  6286  0019C2  ECF5  F014         	call	_write_data
  6287  0019C6  0E07               	movlw	7
  6288  0019C8  ECF5  F014         	call	_write_data
  6289  0019CC  0E06               	movlw	6
  6290  0019CE  ECF5  F014         	call	_write_data
  6291                           
  6292                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6293  0019D2  0E2E               	movlw	46
  6294  0019D4  ECF5  F014         	call	_write_data
  6295  0019D8  0E2C               	movlw	44
  6296  0019DA  ECF5  F014         	call	_write_data
  6297  0019DE  0E29               	movlw	41
  6298  0019E0  ECF5  F014         	call	_write_data
  6299  0019E4  0E2D               	movlw	45
  6300  0019E6  ECF5  F014         	call	_write_data
  6301                           
  6302                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6303  0019EA  0E2E               	movlw	46
  6304  0019EC  ECF5  F014         	call	_write_data
  6305  0019F0  0E2E               	movlw	46
  6306  0019F2  ECF5  F014         	call	_write_data
  6307  0019F6  0E37               	movlw	55
  6308  0019F8  ECF5  F014         	call	_write_data
  6309  0019FC  0E3F               	movlw	63
  6310  0019FE  ECF5  F014         	call	_write_data
  6311                           
  6312                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6313  001A02  0E00               	movlw	0
  6314  001A04  ECF5  F014         	call	_write_data
  6315  001A08  0E00               	movlw	0
  6316  001A0A  ECF5  F014         	call	_write_data
  6317  001A0E  0E02               	movlw	2
  6318  001A10  ECF5  F014         	call	_write_data
  6319  001A14  0E10               	movlw	16
  6320  001A16  ECF5  F014         	call	_write_data
  6321                           
  6322                           ;ST7735_TFT.c: 350: write_command(0x13);
  6323  001A1A  0E13               	movlw	19
  6324  001A1C  ECFD  F014         	call	_write_command
  6325                           
  6326                           ;ST7735_TFT.c: 351: delay_ms(10);
  6327  001A20  0E00               	movlw	0
  6328  001A22  6E18               	movwf	delay_ms@ms+1,c
  6329  001A24  0E0A               	movlw	10
  6330  001A26  6E17               	movwf	delay_ms@ms,c
  6331  001A28  ECEC  F011         	call	_delay_ms	;wreg free
  6332                           
  6333                           ;ST7735_TFT.c: 352: write_command(0x29);
  6334  001A2C  0E29               	movlw	41
  6335  001A2E  ECFD  F014         	call	_write_command
  6336                           
  6337                           ;ST7735_TFT.c: 353: delay_ms(100);
  6338  001A32  0E00               	movlw	0
  6339  001A34  6E18               	movwf	delay_ms@ms+1,c
  6340  001A36  0E64               	movlw	100
  6341  001A38  6E17               	movwf	delay_ms@ms,c
  6342  001A3A  ECEC  F011         	call	_delay_ms	;wreg free
  6343  001A3E  0012               	return		;funcret
  6344  001A40                     __end_of_Rcmd3:
  6345                           	opt stack 0
  6346                           tblptru	equ	0xFF8
  6347                           tblptrh	equ	0xFF7
  6348                           tblptrl	equ	0xFF6
  6349                           tablat	equ	0xFF5
  6350                           prodh	equ	0xFF4
  6351                           prodl	equ	0xFF3
  6352                           intcon	equ	0xFF2
  6353                           intcon2	equ	0xFF1
  6354                           postinc0	equ	0xFEE
  6355                           wreg	equ	0xFE8
  6356                           postdec1	equ	0xFE5
  6357                           fsr1l	equ	0xFE1
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           fsr2h	equ	0xFDA
  6361                           fsr2l	equ	0xFD9
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _Rcmd2red *****************
  6365 ;; Defined at:
  6366 ;;		line 328 in file "ST7735_TFT.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;		None               void
  6373 ;; Registers used:
  6374 ;;		wreg, status,2, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    5
  6387 ;; This function calls:
  6388 ;;		_write_command
  6389 ;;		_write_data
  6390 ;; This function is called by:
  6391 ;;		_TFT_GreenTab_Initialize
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text24
  6396  00265E                     __ptext24:
  6397                           	opt stack 0
  6398  00265E                     _Rcmd2red:
  6399                           	opt stack 23
  6400                           
  6401                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6402                           
  6403                           ;incstack = 0
  6404  00265E  0E2A               	movlw	42
  6405  002660  ECFD  F014         	call	_write_command
  6406                           
  6407                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6408  002664  0E00               	movlw	0
  6409  002666  ECF5  F014         	call	_write_data
  6410  00266A  0E00               	movlw	0
  6411  00266C  ECF5  F014         	call	_write_data
  6412                           
  6413                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6414  002670  0E00               	movlw	0
  6415  002672  ECF5  F014         	call	_write_data
  6416  002676  0E7F               	movlw	127
  6417  002678  ECF5  F014         	call	_write_data
  6418                           
  6419                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6420  00267C  0E2B               	movlw	43
  6421  00267E  ECFD  F014         	call	_write_command
  6422                           
  6423                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6424  002682  0E00               	movlw	0
  6425  002684  ECF5  F014         	call	_write_data
  6426  002688  0E00               	movlw	0
  6427  00268A  ECF5  F014         	call	_write_data
  6428                           
  6429                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6430  00268E  0E00               	movlw	0
  6431  002690  ECF5  F014         	call	_write_data
  6432  002694  0E9F               	movlw	159
  6433  002696  ECF5  F014         	call	_write_data
  6434  00269A  0012               	return		;funcret
  6435  00269C                     __end_of_Rcmd2red:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           intcon2	equ	0xFF1
  6445                           postinc0	equ	0xFEE
  6446                           wreg	equ	0xFE8
  6447                           postdec1	equ	0xFE5
  6448                           fsr1l	equ	0xFE1
  6449                           indf2	equ	0xFDF
  6450                           postinc2	equ	0xFDE
  6451                           fsr2h	equ	0xFDA
  6452                           fsr2l	equ	0xFD9
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function _Rcmd1 *****************
  6456 ;; Defined at:
  6457 ;;		line 281 in file "ST7735_TFT.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    5
  6478 ;; This function calls:
  6479 ;;		_delay_ms
  6480 ;;		_write_command
  6481 ;;		_write_data
  6482 ;; This function is called by:
  6483 ;;		_TFT_GreenTab_Initialize
  6484 ;;		_TFT_BlackTab_Initialize
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           	psect	text25
  6489  001746                     __ptext25:
  6490                           	opt stack 0
  6491  001746                     _Rcmd1:
  6492                           	opt stack 23
  6493                           
  6494                           ;ST7735_TFT.c: 283: write_command(0x01);
  6495                           
  6496                           ;incstack = 0
  6497  001746  0E01               	movlw	1
  6498  001748  ECFD  F014         	call	_write_command
  6499                           
  6500                           ;ST7735_TFT.c: 284: delay_ms(150);
  6501  00174C  0E00               	movlw	0
  6502  00174E  6E18               	movwf	delay_ms@ms+1,c
  6503  001750  0E96               	movlw	150
  6504  001752  6E17               	movwf	delay_ms@ms,c
  6505  001754  ECEC  F011         	call	_delay_ms	;wreg free
  6506                           
  6507                           ;ST7735_TFT.c: 285: write_command(0x11);
  6508  001758  0E11               	movlw	17
  6509  00175A  ECFD  F014         	call	_write_command
  6510                           
  6511                           ;ST7735_TFT.c: 286: delay_ms(500);
  6512  00175E  0E01               	movlw	1
  6513  001760  6E18               	movwf	delay_ms@ms+1,c
  6514  001762  0EF4               	movlw	244
  6515  001764  6E17               	movwf	delay_ms@ms,c
  6516  001766  ECEC  F011         	call	_delay_ms	;wreg free
  6517                           
  6518                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6519  00176A  0EB1               	movlw	177
  6520  00176C  ECFD  F014         	call	_write_command
  6521                           
  6522                           ;ST7735_TFT.c: 288: write_data(0x01);
  6523  001770  0E01               	movlw	1
  6524  001772  ECF5  F014         	call	_write_data
  6525                           
  6526                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6527  001776  0E2C               	movlw	44
  6528  001778  ECF5  F014         	call	_write_data
  6529                           
  6530                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6531  00177C  0E2D               	movlw	45
  6532  00177E  ECF5  F014         	call	_write_data
  6533                           
  6534                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6535  001782  0EB2               	movlw	178
  6536  001784  ECFD  F014         	call	_write_command
  6537                           
  6538                           ;ST7735_TFT.c: 292: write_data(0x01);
  6539  001788  0E01               	movlw	1
  6540  00178A  ECF5  F014         	call	_write_data
  6541                           
  6542                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6543  00178E  0E2C               	movlw	44
  6544  001790  ECF5  F014         	call	_write_data
  6545                           
  6546                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6547  001794  0E2D               	movlw	45
  6548  001796  ECF5  F014         	call	_write_data
  6549                           
  6550                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6551  00179A  0EB3               	movlw	179
  6552  00179C  ECFD  F014         	call	_write_command
  6553                           
  6554                           ;ST7735_TFT.c: 296: write_data(0x01);
  6555  0017A0  0E01               	movlw	1
  6556  0017A2  ECF5  F014         	call	_write_data
  6557                           
  6558                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6559  0017A6  0E2C               	movlw	44
  6560  0017A8  ECF5  F014         	call	_write_data
  6561                           
  6562                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6563  0017AC  0E2D               	movlw	45
  6564  0017AE  ECF5  F014         	call	_write_data
  6565                           
  6566                           ;ST7735_TFT.c: 299: write_data(0x01);
  6567  0017B2  0E01               	movlw	1
  6568  0017B4  ECF5  F014         	call	_write_data
  6569                           
  6570                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6571  0017B8  0E2C               	movlw	44
  6572  0017BA  ECF5  F014         	call	_write_data
  6573                           
  6574                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6575  0017BE  0E2D               	movlw	45
  6576  0017C0  ECF5  F014         	call	_write_data
  6577                           
  6578                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6579  0017C4  0EB4               	movlw	180
  6580  0017C6  ECFD  F014         	call	_write_command
  6581                           
  6582                           ;ST7735_TFT.c: 303: write_data(0x07);
  6583  0017CA  0E07               	movlw	7
  6584  0017CC  ECF5  F014         	call	_write_data
  6585                           
  6586                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6587  0017D0  0EC0               	movlw	192
  6588  0017D2  ECFD  F014         	call	_write_command
  6589                           
  6590                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6591  0017D6  0EA2               	movlw	162
  6592  0017D8  ECF5  F014         	call	_write_data
  6593                           
  6594                           ;ST7735_TFT.c: 306: write_data(0x02);
  6595  0017DC  0E02               	movlw	2
  6596  0017DE  ECF5  F014         	call	_write_data
  6597                           
  6598                           ;ST7735_TFT.c: 307: write_data(0x84);
  6599  0017E2  0E84               	movlw	132
  6600  0017E4  ECF5  F014         	call	_write_data
  6601                           
  6602                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6603  0017E8  0EC1               	movlw	193
  6604  0017EA  ECFD  F014         	call	_write_command
  6605                           
  6606                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6607  0017EE  0EC5               	movlw	197
  6608  0017F0  ECF5  F014         	call	_write_data
  6609                           
  6610                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6611  0017F4  0EC2               	movlw	194
  6612  0017F6  ECFD  F014         	call	_write_command
  6613                           
  6614                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6615  0017FA  0E0A               	movlw	10
  6616  0017FC  ECF5  F014         	call	_write_data
  6617                           
  6618                           ;ST7735_TFT.c: 312: write_data(0x00);
  6619  001800  0E00               	movlw	0
  6620  001802  ECF5  F014         	call	_write_data
  6621                           
  6622                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6623  001806  0EC3               	movlw	195
  6624  001808  ECFD  F014         	call	_write_command
  6625                           
  6626                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6627  00180C  0E8A               	movlw	138
  6628  00180E  ECF5  F014         	call	_write_data
  6629                           
  6630                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6631  001812  0E2A               	movlw	42
  6632  001814  ECF5  F014         	call	_write_data
  6633                           
  6634                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6635  001818  0EC4               	movlw	196
  6636  00181A  ECFD  F014         	call	_write_command
  6637                           
  6638                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6639  00181E  0E8A               	movlw	138
  6640  001820  ECF5  F014         	call	_write_data
  6641                           
  6642                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6643  001824  0EEE               	movlw	238
  6644  001826  ECF5  F014         	call	_write_data
  6645                           
  6646                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6647  00182A  0EC5               	movlw	197
  6648  00182C  ECFD  F014         	call	_write_command
  6649                           
  6650                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6651  001830  0E0E               	movlw	14
  6652  001832  ECF5  F014         	call	_write_data
  6653                           
  6654                           ;ST7735_TFT.c: 321: write_command(0x20);
  6655  001836  0E20               	movlw	32
  6656  001838  ECFD  F014         	call	_write_command
  6657                           
  6658                           ;ST7735_TFT.c: 322: write_command(0x36);
  6659  00183C  0E36               	movlw	54
  6660  00183E  ECFD  F014         	call	_write_command
  6661                           
  6662                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6663  001842  0EC8               	movlw	200
  6664  001844  ECF5  F014         	call	_write_data
  6665                           
  6666                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6667  001848  0E3A               	movlw	58
  6668  00184A  ECFD  F014         	call	_write_command
  6669                           
  6670                           ;ST7735_TFT.c: 325: write_data(0x05);
  6671  00184E  0E05               	movlw	5
  6672  001850  ECF5  F014         	call	_write_data
  6673  001854  0012               	return		;funcret
  6674  001856                     __end_of_Rcmd1:
  6675                           	opt stack 0
  6676                           tblptru	equ	0xFF8
  6677                           tblptrh	equ	0xFF7
  6678                           tblptrl	equ	0xFF6
  6679                           tablat	equ	0xFF5
  6680                           prodh	equ	0xFF4
  6681                           prodl	equ	0xFF3
  6682                           intcon	equ	0xFF2
  6683                           intcon2	equ	0xFF1
  6684                           postinc0	equ	0xFEE
  6685                           wreg	equ	0xFE8
  6686                           postdec1	equ	0xFE5
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           postinc2	equ	0xFDE
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _write_data *****************
  6695 ;; Defined at:
  6696 ;;		line 209 in file "ST7735_TFT.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  data_           1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  data_           1   18[COMRAM] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;		None               void
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;Total ram usage:        1 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    4
  6717 ;; This function calls:
  6718 ;;		_spiwrite
  6719 ;; This function is called by:
  6720 ;;		_Rcmd1
  6721 ;;		_Rcmd2red
  6722 ;;		_Rcmd3
  6723 ;;		_setAddrWindow
  6724 ;;		_drawPixel
  6725 ;;		_TFT_GreenTab_Initialize
  6726 ;;		_Bcmd
  6727 ;;		_setScrollDefinition
  6728 ;;		_Rcmd2green
  6729 ;;		_VerticalScroll
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text26
  6734  0029EA                     __ptext26:
  6735                           	opt stack 0
  6736  0029EA                     _write_data:
  6737                           	opt stack 20
  6738                           
  6739                           ;incstack = 0
  6740                           ;write_data@data_ stored from wreg
  6741  0029EA  6E13               	movwf	write_data@data_,c
  6742                           
  6743                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
  6744  0029EC  9283               	bcf	3971,1,c	;volatile
  6745                           
  6746                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
  6747  0029EE  8083               	bsf	3971,0,c	;volatile
  6748                           
  6749                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6750  0029F0  5013               	movf	write_data@data_,w,c
  6751  0029F2  ECB4  F014         	call	_spiwrite
  6752                           
  6753                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
  6754  0029F6  8283               	bsf	3971,1,c	;volatile
  6755  0029F8  0012               	return		;funcret
  6756  0029FA                     __end_of_write_data:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           intcon	equ	0xFF2
  6765                           intcon2	equ	0xFF1
  6766                           postinc0	equ	0xFEE
  6767                           wreg	equ	0xFE8
  6768                           postdec1	equ	0xFE5
  6769                           fsr1l	equ	0xFE1
  6770                           indf2	equ	0xFDF
  6771                           postinc2	equ	0xFDE
  6772                           fsr2h	equ	0xFDA
  6773                           fsr2l	equ	0xFD9
  6774                           status	equ	0xFD8
  6775                           
  6776 ;; *************** function _write_command *****************
  6777 ;; Defined at:
  6778 ;;		line 198 in file "ST7735_TFT.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  cmd_            1    wreg     unsigned char 
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  cmd_            1   18[COMRAM] unsigned char 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;		None               void
  6785 ;; Registers used:
  6786 ;;		wreg, status,2, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6795 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;Total ram usage:        1 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:    4
  6799 ;; This function calls:
  6800 ;;		_spiwrite
  6801 ;; This function is called by:
  6802 ;;		_Rcmd1
  6803 ;;		_Rcmd2red
  6804 ;;		_Rcmd3
  6805 ;;		_setAddrWindow
  6806 ;;		_TFT_GreenTab_Initialize
  6807 ;;		_Bcmd
  6808 ;;		_setScrollDefinition
  6809 ;;		_Rcmd2green
  6810 ;;		_VerticalScroll
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text27
  6815  0029FA                     __ptext27:
  6816                           	opt stack 0
  6817  0029FA                     _write_command:
  6818                           	opt stack 20
  6819                           
  6820                           ;incstack = 0
  6821                           ;write_command@cmd_ stored from wreg
  6822  0029FA  6E13               	movwf	write_command@cmd_,c
  6823                           
  6824                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
  6825  0029FC  9283               	bcf	3971,1,c	;volatile
  6826                           
  6827                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
  6828  0029FE  9083               	bcf	3971,0,c	;volatile
  6829                           
  6830                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6831  002A00  5013               	movf	write_command@cmd_,w,c
  6832  002A02  ECB4  F014         	call	_spiwrite
  6833                           
  6834                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
  6835  002A06  8283               	bsf	3971,1,c	;volatile
  6836  002A08  0012               	return		;funcret
  6837  002A0A                     __end_of_write_command:
  6838                           	opt stack 0
  6839                           tblptru	equ	0xFF8
  6840                           tblptrh	equ	0xFF7
  6841                           tblptrl	equ	0xFF6
  6842                           tablat	equ	0xFF5
  6843                           prodh	equ	0xFF4
  6844                           prodl	equ	0xFF3
  6845                           intcon	equ	0xFF2
  6846                           intcon2	equ	0xFF1
  6847                           postinc0	equ	0xFEE
  6848                           wreg	equ	0xFE8
  6849                           postdec1	equ	0xFE5
  6850                           fsr1l	equ	0xFE1
  6851                           indf2	equ	0xFDF
  6852                           postinc2	equ	0xFDE
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857 ;; *************** function _spiwrite *****************
  6858 ;; Defined at:
  6859 ;;		line 189 in file "ST7735_TFT.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;  spidata         1    wreg     unsigned char 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  spidata         1   17[COMRAM] unsigned char 
  6864 ;;  x               1   16[COMRAM] unsigned char 
  6865 ;; Return value:  Size  Location     Type
  6866 ;;		None               void
  6867 ;; Registers used:
  6868 ;;		wreg
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;Total ram usage:        2 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    3
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_write_command
  6885 ;;		_write_data
  6886 ;;		_drawFastVLine
  6887 ;;		_fillRectangle
  6888 ;;		_drawFastHLine
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text28
  6893  002968                     __ptext28:
  6894                           	opt stack 0
  6895  002968                     _spiwrite:
  6896                           	opt stack 22
  6897                           
  6898                           ;incstack = 0
  6899                           ;spiwrite@spidata stored from wreg
  6900  002968  6E12               	movwf	spiwrite@spidata,c
  6901                           
  6902                           ;ST7735_TFT.c: 191: char x;
  6903                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6904  00296A  969E               	bcf	3998,3,c	;volatile
  6905                           
  6906                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6907  00296C  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6908                           
  6909                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6910  002970  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6911                           
  6912                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6913  002974  D000               	goto	l394
  6914  002976                     l394:
  6915  002976  A0C7               	btfss	4039,0,c	;volatile
  6916  002978  D7FE               	goto	l394
  6917  00297A  0012               	return		;funcret
  6918  00297C                     __end_of_spiwrite:
  6919                           	opt stack 0
  6920                           tblptru	equ	0xFF8
  6921                           tblptrh	equ	0xFF7
  6922                           tblptrl	equ	0xFF6
  6923                           tablat	equ	0xFF5
  6924                           prodh	equ	0xFF4
  6925                           prodl	equ	0xFF3
  6926                           intcon	equ	0xFF2
  6927                           intcon2	equ	0xFF1
  6928                           postinc0	equ	0xFEE
  6929                           wreg	equ	0xFE8
  6930                           postdec1	equ	0xFE5
  6931                           fsr1l	equ	0xFE1
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           fsr2h	equ	0xFDA
  6935                           fsr2l	equ	0xFD9
  6936                           status	equ	0xFD8
  6937                           
  6938 ;; *************** function _LCD_Reset *****************
  6939 ;; Defined at:
  6940 ;;		line 217 in file "ST7735_TFT.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;		None               void
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;Total ram usage:        0 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    5
  6961 ;; This function calls:
  6962 ;;		_delay_ms
  6963 ;; This function is called by:
  6964 ;;		_Initialize_Screen
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text29
  6969  002990                     __ptext29:
  6970                           	opt stack 0
  6971  002990                     _LCD_Reset:
  6972                           	opt stack 24
  6973                           
  6974                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
  6975                           
  6976                           ;incstack = 0
  6977  002990  9483               	bcf	3971,2,c	;volatile
  6978                           
  6979                           ;ST7735_TFT.c: 220: delay_ms(100);
  6980  002992  0E00               	movlw	0
  6981  002994  6E18               	movwf	delay_ms@ms+1,c
  6982  002996  0E64               	movlw	100
  6983  002998  6E17               	movwf	delay_ms@ms,c
  6984  00299A  ECEC  F011         	call	_delay_ms	;wreg free
  6985                           
  6986                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
  6987  00299E  8483               	bsf	3971,2,c	;volatile
  6988  0029A0  0012               	return		;funcret
  6989  0029A2                     __end_of_LCD_Reset:
  6990                           	opt stack 0
  6991                           tblptru	equ	0xFF8
  6992                           tblptrh	equ	0xFF7
  6993                           tblptrl	equ	0xFF6
  6994                           tablat	equ	0xFF5
  6995                           prodh	equ	0xFF4
  6996                           prodl	equ	0xFF3
  6997                           intcon	equ	0xFF2
  6998                           intcon2	equ	0xFF1
  6999                           postinc0	equ	0xFEE
  7000                           wreg	equ	0xFE8
  7001                           postdec1	equ	0xFE5
  7002                           fsr1l	equ	0xFE1
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _delay_ms *****************
  7010 ;; Defined at:
  7011 ;;		line 64 in file "ST7735_TFT.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  ms              2   22[COMRAM] int 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  count           2   26[COMRAM] int 
  7016 ;; Return value:  Size  Location     Type
  7017 ;;		None               void
  7018 ;; Registers used:
  7019 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7025 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;Total ram usage:        6 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    4
  7032 ;; This function calls:
  7033 ;;		___wmul
  7034 ;; This function is called by:
  7035 ;;		_LCD_Reset
  7036 ;;		_Rcmd1
  7037 ;;		_Rcmd3
  7038 ;;		_Bcmd
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	text30
  7043  0023D8                     __ptext30:
  7044                           	opt stack 0
  7045  0023D8                     _delay_ms:
  7046                           	opt stack 23
  7047                           
  7048                           ;ST7735_TFT.c: 70: int count;
  7049                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
  7050                           
  7051                           ;incstack = 0
  7052  0023D8  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7053  0023DC  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7054  0023E0  0E00               	movlw	0
  7055  0023E2  6E14               	movwf	___wmul@multiplicand+1,c
  7056  0023E4  0E7D               	movlw	125
  7057  0023E6  6E13               	movwf	___wmul@multiplicand,c
  7058  0023E8  EC15  F014         	call	___wmul	;wreg free
  7059  0023EC  C011  F01B         	movff	?___wmul,delay_ms@count
  7060  0023F0  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7061                           
  7062                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  7063  0023F4  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7064  0023F8  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7065  0023FC  1E19               	comf	??_delay_ms,f,c
  7066  0023FE  1E1A               	comf	??_delay_ms+1,f,c
  7067  002400  4A19               	infsnz	??_delay_ms,f,c
  7068  002402  2A1A               	incf	??_delay_ms+1,f,c
  7069  002404  0EFF               	movlw	255
  7070  002406  2419               	addwf	??_delay_ms,w,c
  7071  002408  6E1B               	movwf	delay_ms@count,c
  7072  00240A  0EFF               	movlw	255
  7073  00240C  201A               	addwfc	??_delay_ms+1,w,c
  7074  00240E  6E1C               	movwf	delay_ms@count+1,c
  7075                           
  7076                           ;ST7735_TFT.c: 74: T0CON = 0x03;
  7077  002410  0E03               	movlw	3
  7078  002412  6ED5               	movwf	4053,c	;volatile
  7079                           
  7080                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
  7081  002414  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7082                           
  7083                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
  7084  002418  501C               	movf	delay_ms@count+1,w,c
  7085  00241A  6ED7               	movwf	4055,c	;volatile
  7086                           
  7087                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
  7088  00241C  94F2               	bcf	intcon,2,c	;volatile
  7089                           
  7090                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
  7091  00241E  8ED5               	bsf	4053,7,c	;volatile
  7092                           
  7093                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
  7094  002420  D000               	goto	l384
  7095  002422                     l384:
  7096  002422  A4F2               	btfss	intcon,2,c	;volatile
  7097  002424  D7FE               	goto	l384
  7098                           
  7099                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
  7100  002426  9ED5               	bcf	4053,7,c	;volatile
  7101  002428  0012               	return		;funcret
  7102  00242A                     __end_of_delay_ms:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           intcon2	equ	0xFF1
  7112                           postinc0	equ	0xFEE
  7113                           wreg	equ	0xFE8
  7114                           postdec1	equ	0xFE5
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           fsr2h	equ	0xFDA
  7119                           fsr2l	equ	0xFD9
  7120                           status	equ	0xFD8
  7121                           
  7122 ;; *************** function _Increase_Speed *****************
  7123 ;; Defined at:
  7124 ;;		line 56 in file "Fan_Support.c"
  7125 ;; Parameters:    Size  Location     Type
  7126 ;;		None
  7127 ;; Auto vars:     Size  Location     Type
  7128 ;;		None
  7129 ;; Return value:  Size  Location     Type
  7130 ;;		None               void
  7131 ;; Registers used:
  7132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;Total ram usage:        0 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    6
  7145 ;; This function calls:
  7146 ;;		_Do_Beep
  7147 ;;		_do_update_pwm
  7148 ;;		_printf
  7149 ;; This function is called by:
  7150 ;;		_main
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text31
  7155  0027A2                     __ptext31:
  7156                           	opt stack 0
  7157  0027A2                     _Increase_Speed:
  7158                           	opt stack 24
  7159                           
  7160                           ;Fan_Support.c: 58: if(duty_cycle == 100)
  7161                           
  7162                           ;incstack = 0
  7163  0027A2  0E64               	movlw	100
  7164  0027A4  185B               	xorwf	_duty_cycle,w,c
  7165  0027A6  A4D8               	btfss	status,2,c
  7166  0027A8  D00C               	goto	l7023
  7167                           
  7168                           ;Fan_Support.c: 59: {
  7169                           ;Fan_Support.c: 60: Do_Beep();
  7170  0027AA  EC94  F014         	call	_Do_Beep	;wreg free
  7171                           
  7172                           ;Fan_Support.c: 61: printf("Duty Cycle is at 100 \r\n");
  7173  0027AE  0E1F               	movlw	low STR_1
  7174  0027B0  6E1D               	movwf	printf@f,c
  7175  0027B2  0EFF               	movlw	high STR_1
  7176  0027B4  6E1E               	movwf	printf@f+1,c
  7177  0027B6  EC0E  F000         	call	_printf	;wreg free
  7178                           
  7179                           ;Fan_Support.c: 62: do_update_pwm(duty_cycle);
  7180  0027BA  505B               	movf	_duty_cycle,w,c
  7181  0027BC  ECD5  F00E         	call	_do_update_pwm
  7182                           
  7183                           ;Fan_Support.c: 63: }
  7184  0027C0  D007               	goto	l53
  7185  0027C2                     l7023:
  7186                           
  7187                           ;Fan_Support.c: 64: else
  7188                           ;Fan_Support.c: 65: {
  7189                           ;Fan_Support.c: 66: duty_cycle = duty_cycle + 5;
  7190  0027C2  505B               	movf	_duty_cycle,w,c
  7191  0027C4  0F05               	addlw	5
  7192  0027C6  6E5B               	movwf	_duty_cycle,c
  7193                           
  7194                           ;Fan_Support.c: 67: do_update_pwm(duty_cycle);
  7195  0027C8  505B               	movf	_duty_cycle,w,c
  7196  0027CA  ECD5  F00E         	call	_do_update_pwm
  7197  0027CE  D000               	goto	l53
  7198  0027D0                     l53:
  7199  0027D0  0012               	return		;funcret
  7200  0027D2                     __end_of_Increase_Speed:
  7201                           	opt stack 0
  7202                           tblptru	equ	0xFF8
  7203                           tblptrh	equ	0xFF7
  7204                           tblptrl	equ	0xFF6
  7205                           tablat	equ	0xFF5
  7206                           prodh	equ	0xFF4
  7207                           prodl	equ	0xFF3
  7208                           intcon	equ	0xFF2
  7209                           intcon2	equ	0xFF1
  7210                           postinc0	equ	0xFEE
  7211                           wreg	equ	0xFE8
  7212                           postdec1	equ	0xFE5
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function _Do_Init *****************
  7221 ;; Defined at:
  7222 ;;		line 96 in file "lap12p1.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;		None               void
  7229 ;; Registers used:
  7230 ;;		wreg, status,2, status,0, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    7
  7243 ;; This function calls:
  7244 ;;		_DS1621_Init
  7245 ;;		_I2C_Init
  7246 ;;		_init_INTERRUPT
  7247 ;;		_init_UART
  7248 ;; This function is called by:
  7249 ;;		_main
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           	psect	text32
  7254  002478                     __ptext32:
  7255                           	opt stack 0
  7256  002478                     _Do_Init:
  7257                           	opt stack 23
  7258                           
  7259                           ;lap12p1.c: 98: init_UART();
  7260                           
  7261                           ;incstack = 0
  7262  002478  ECBE  F014         	call	_init_UART	;wreg free
  7263                           
  7264                           ;lap12p1.c: 99: OSCCON=0x70;
  7265  00247C  0E70               	movlw	112
  7266  00247E  6ED3               	movwf	4051,c	;volatile
  7267                           
  7268                           ;lap12p1.c: 101: ADCON1=0x0F;
  7269  002480  0E0F               	movlw	15
  7270  002482  6EC1               	movwf	4033,c	;volatile
  7271                           
  7272                           ;lap12p1.c: 102: TRISA = 0x00;
  7273  002484  0E00               	movlw	0
  7274  002486  6E92               	movwf	3986,c	;volatile
  7275                           
  7276                           ;lap12p1.c: 103: TRISB = 0x11;
  7277  002488  0E11               	movlw	17
  7278  00248A  6E93               	movwf	3987,c	;volatile
  7279                           
  7280                           ;lap12p1.c: 104: TRISC = 0x01;
  7281  00248C  0E01               	movlw	1
  7282  00248E  6E94               	movwf	3988,c	;volatile
  7283                           
  7284                           ;lap12p1.c: 105: TRISD = 0x40;
  7285  002490  0E40               	movlw	64
  7286  002492  6E95               	movwf	3989,c	;volatile
  7287                           
  7288                           ;lap12p1.c: 106: TRISE = 0x00;
  7289  002494  0E00               	movlw	0
  7290  002496  6E96               	movwf	3990,c	;volatile
  7291                           
  7292                           ;lap12p1.c: 109: RBPU=0;
  7293  002498  9EF1               	bcf	intcon2,7,c	;volatile
  7294                           
  7295                           ;lap12p1.c: 110: TMR3L = 0x00;
  7296  00249A  0E00               	movlw	0
  7297  00249C  6EB2               	movwf	4018,c	;volatile
  7298                           
  7299                           ;lap12p1.c: 111: T3CON = 0x03;
  7300  00249E  0E03               	movlw	3
  7301  0024A0  6EB1               	movwf	4017,c	;volatile
  7302                           
  7303                           ;lap12p1.c: 112: I2C_Init(100000);
  7304  0024A2  0EA0               	movlw	160
  7305  0024A4  6E11               	movwf	I2C_Init@c,c
  7306  0024A6  0E86               	movlw	134
  7307  0024A8  6E12               	movwf	I2C_Init@c+1,c
  7308  0024AA  0E01               	movlw	1
  7309  0024AC  6E13               	movwf	I2C_Init@c+2,c
  7310  0024AE  0E00               	movlw	0
  7311  0024B0  6E14               	movwf	I2C_Init@c+3,c
  7312  0024B2  EC1F  F015         	call	_I2C_Init	;wreg free
  7313                           
  7314                           ;lap12p1.c: 114: DS1621_Init();
  7315  0024B6  EC5D  F014         	call	_DS1621_Init	;wreg free
  7316                           
  7317                           ;lap12p1.c: 115: init_INTERRUPT();
  7318  0024BA  ECA0  F013         	call	_init_INTERRUPT	;wreg free
  7319                           
  7320                           ;lap12p1.c: 116: FAN = 0;
  7321  0024BE  0E00               	movlw	0
  7322  0024C0  6E4F               	movwf	_FAN,c
  7323  0024C2  0012               	return		;funcret
  7324  0024C4                     __end_of_Do_Init:
  7325                           	opt stack 0
  7326                           tblptru	equ	0xFF8
  7327                           tblptrh	equ	0xFF7
  7328                           tblptrl	equ	0xFF6
  7329                           tablat	equ	0xFF5
  7330                           prodh	equ	0xFF4
  7331                           prodl	equ	0xFF3
  7332                           intcon	equ	0xFF2
  7333                           intcon2	equ	0xFF1
  7334                           postinc0	equ	0xFEE
  7335                           wreg	equ	0xFE8
  7336                           postdec1	equ	0xFE5
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           fsr2h	equ	0xFDA
  7341                           fsr2l	equ	0xFD9
  7342                           status	equ	0xFD8
  7343                           
  7344 ;; *************** function _init_UART *****************
  7345 ;; Defined at:
  7346 ;;		line 90 in file "lap12p1.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;		None
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;		None
  7351 ;; Return value:  Size  Location     Type
  7352 ;;		None               void
  7353 ;; Registers used:
  7354 ;;		wreg, status,2, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;Total ram usage:        0 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    4
  7367 ;; This function calls:
  7368 ;;		_OpenUSART
  7369 ;; This function is called by:
  7370 ;;		_Do_Init
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text33
  7375  00297C                     __ptext33:
  7376                           	opt stack 0
  7377  00297C                     _init_UART:
  7378                           	opt stack 25
  7379                           
  7380                           ;lap12p1.c: 92: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  7381                           
  7382                           ;incstack = 0
  7383  00297C  0E00               	movlw	0
  7384  00297E  6E12               	movwf	OpenUSART@spbrg+1,c
  7385  002980  0E19               	movlw	25
  7386  002982  6E11               	movwf	OpenUSART@spbrg,c
  7387  002984  0E3C               	movlw	60
  7388  002986  ECBF  F010         	call	_OpenUSART
  7389                           
  7390                           ;lap12p1.c: 93: OSCCON = 0x70;
  7391  00298A  0E70               	movlw	112
  7392  00298C  6ED3               	movwf	4051,c	;volatile
  7393  00298E  0012               	return		;funcret
  7394  002990                     __end_of_init_UART:
  7395                           	opt stack 0
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           intcon	equ	0xFF2
  7403                           intcon2	equ	0xFF1
  7404                           postinc0	equ	0xFEE
  7405                           wreg	equ	0xFE8
  7406                           postdec1	equ	0xFE5
  7407                           fsr1l	equ	0xFE1
  7408                           indf2	equ	0xFDF
  7409                           postinc2	equ	0xFDE
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8
  7413                           
  7414 ;; *************** function _OpenUSART *****************
  7415 ;; Defined at:
  7416 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  config          1    wreg     unsigned char 
  7419 ;;  spbrg           2   16[COMRAM] unsigned int 
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;  config          1   18[COMRAM] unsigned char 
  7422 ;; Return value:  Size  Location     Type
  7423 ;;		None               void
  7424 ;; Registers used:
  7425 ;;		wreg, status,2
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;Total ram usage:        3 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:    3
  7438 ;; This function calls:
  7439 ;;		Nothing
  7440 ;; This function is called by:
  7441 ;;		_init_UART
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445                           	psect	text34
  7446  00217E                     __ptext34:
  7447                           	opt stack 0
  7448  00217E                     _OpenUSART:
  7449                           	opt stack 25
  7450                           
  7451                           ;incstack = 0
  7452                           ;OpenUSART@config stored from wreg
  7453  00217E  6E13               	movwf	OpenUSART@config,c
  7454  002180  0E00               	movlw	0
  7455  002182  6EAC               	movwf	4012,c	;volatile
  7456  002184  0E00               	movlw	0
  7457  002186  6EAB               	movwf	4011,c	;volatile
  7458  002188  A013               	btfss	OpenUSART@config,0,c
  7459  00218A  D002               	goto	l6089
  7460  00218C  88AC               	bsf	4012,4,c	;volatile
  7461  00218E  D000               	goto	l6089
  7462  002190                     l6089:
  7463  002190  A213               	btfss	OpenUSART@config,1,c
  7464  002192  D003               	goto	l6093
  7465  002194  8CAC               	bsf	4012,6,c	;volatile
  7466  002196  8CAB               	bsf	4011,6,c	;volatile
  7467  002198  D000               	goto	l6093
  7468  00219A                     l6093:
  7469  00219A  A413               	btfss	OpenUSART@config,2,c
  7470  00219C  D002               	goto	l6097
  7471  00219E  8EAC               	bsf	4012,7,c	;volatile
  7472  0021A0  D000               	goto	l6097
  7473  0021A2                     l6097:
  7474  0021A2  A613               	btfss	OpenUSART@config,3,c
  7475  0021A4  D002               	goto	l965
  7476  0021A6  88AB               	bsf	4011,4,c	;volatile
  7477  0021A8  D002               	goto	l6101
  7478  0021AA                     l965:
  7479  0021AA  8AAB               	bsf	4011,5,c	;volatile
  7480  0021AC  D000               	goto	l6101
  7481  0021AE                     l6101:
  7482  0021AE  B813               	btfsc	OpenUSART@config,4,c
  7483  0021B0  84AC               	bsf	4012,2,c	;volatile
  7484  0021B2  989E               	bcf	3998,4,c	;volatile
  7485  0021B4  AA13               	btfss	OpenUSART@config,5,c
  7486  0021B6  D002               	goto	l6109
  7487  0021B8  86AB               	bsf	4011,3,c	;volatile
  7488  0021BA  D000               	goto	l6109
  7489  0021BC                     l6109:
  7490  0021BC  AC13               	btfss	OpenUSART@config,6,c
  7491  0021BE  D002               	goto	l969
  7492  0021C0  8A9D               	bsf	3997,5,c	;volatile
  7493  0021C2  D001               	goto	l970
  7494  0021C4                     l969:
  7495  0021C4  9A9D               	bcf	3997,5,c	;volatile
  7496  0021C6                     l970:
  7497  0021C6  9A9E               	bcf	3998,5,c	;volatile
  7498  0021C8  AE13               	btfss	OpenUSART@config,7,c
  7499  0021CA  D002               	goto	l971
  7500  0021CC  889D               	bsf	3997,4,c	;volatile
  7501  0021CE  D001               	goto	l972
  7502  0021D0                     l971:
  7503  0021D0  989D               	bcf	3997,4,c	;volatile
  7504  0021D2                     l972:
  7505  0021D2  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7506  0021D6  5012               	movf	OpenUSART@spbrg+1,w,c
  7507  0021D8  6EB0               	movwf	4016,c	;volatile
  7508  0021DA  8AAC               	bsf	4012,5,c	;volatile
  7509  0021DC  8EAB               	bsf	4011,7,c	;volatile
  7510  0021DE  9C94               	bcf	3988,6,c	;volatile
  7511  0021E0  8E94               	bsf	3988,7,c	;volatile
  7512  0021E2  B8AC               	btfsc	4012,4,c	;volatile
  7513  0021E4  BEAC               	btfsc	4012,7,c	;volatile
  7514  0021E6  D002               	goto	l974
  7515  0021E8  8C94               	bsf	3988,6,c	;volatile
  7516  0021EA  D000               	goto	l974
  7517  0021EC                     l974:
  7518  0021EC  0012               	return		;funcret
  7519  0021EE                     __end_of_OpenUSART:
  7520                           	opt stack 0
  7521                           tblptru	equ	0xFF8
  7522                           tblptrh	equ	0xFF7
  7523                           tblptrl	equ	0xFF6
  7524                           tablat	equ	0xFF5
  7525                           prodh	equ	0xFF4
  7526                           prodl	equ	0xFF3
  7527                           intcon	equ	0xFF2
  7528                           intcon2	equ	0xFF1
  7529                           postinc0	equ	0xFEE
  7530                           wreg	equ	0xFE8
  7531                           postdec1	equ	0xFE5
  7532                           fsr1l	equ	0xFE1
  7533                           indf2	equ	0xFDF
  7534                           postinc2	equ	0xFDE
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _init_INTERRUPT *****************
  7540 ;; Defined at:
  7541 ;;		line 14 in file "Interrupt.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;		None               void
  7548 ;; Registers used:
  7549 ;;		wreg, status,2
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;Total ram usage:        0 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    3
  7562 ;; This function calls:
  7563 ;;		Nothing
  7564 ;; This function is called by:
  7565 ;;		_Do_Init
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           	psect	text35
  7570  002740                     __ptext35:
  7571                           	opt stack 0
  7572  002740                     _init_INTERRUPT:
  7573                           	opt stack 26
  7574                           
  7575                           ;Interrupt.c: 16: INTCONbits.INT0IF = 0;
  7576                           
  7577                           ;incstack = 0
  7578  002740  92F2               	bcf	intcon,1,c	;volatile
  7579                           
  7580                           ;Interrupt.c: 17: INTCON2bits.INTEDG0 = 0;
  7581  002742  9CF1               	bcf	intcon2,6,c	;volatile
  7582                           
  7583                           ;Interrupt.c: 18: INTCONbits.INT0IE = 1;
  7584  002744  88F2               	bsf	intcon,4,c	;volatile
  7585                           
  7586                           ;Interrupt.c: 19: TMR1H = 0;
  7587  002746  0E00               	movlw	0
  7588  002748  6ECF               	movwf	4047,c	;volatile
  7589                           
  7590                           ;Interrupt.c: 20: TMR1L = 0;
  7591  00274A  0E00               	movlw	0
  7592  00274C  6ECE               	movwf	4046,c	;volatile
  7593                           
  7594                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
  7595  00274E  909E               	bcf	3998,0,c	;volatile
  7596                           
  7597                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
  7598  002750  809D               	bsf	3997,0,c	;volatile
  7599                           
  7600                           ;Interrupt.c: 23: INTCONbits.PEIE = 1;
  7601  002752  8CF2               	bsf	intcon,6,c	;volatile
  7602                           
  7603                           ;Interrupt.c: 24: INTCONbits.GIE = 1;
  7604  002754  8EF2               	bsf	intcon,7,c	;volatile
  7605                           
  7606                           ;Interrupt.c: 25: nec_ok = 0;
  7607  002756  0E00               	movlw	0
  7608  002758  6E48               	movwf	_nec_ok+1,c
  7609  00275A  0E00               	movlw	0
  7610  00275C  6E47               	movwf	_nec_ok,c
  7611                           
  7612                           ;Interrupt.c: 26: Nec_code = 0x00;
  7613  00275E  0E00               	movlw	0
  7614  002760  0100               	movlb	0	; () banked
  7615  002762  6FF5               	movwf	_Nec_code& (0+255),b
  7616  002764  0E00               	movlw	0
  7617  002766  6FF6               	movwf	(_Nec_code+1)& (0+255),b
  7618  002768  0E00               	movlw	0
  7619  00276A  6FF7               	movwf	(_Nec_code+2)& (0+255),b
  7620  00276C  0E00               	movlw	0
  7621  00276E  6FF8               	movwf	(_Nec_code+3)& (0+255),b
  7622                           
  7623                           ; BSR set to: 0
  7624  002770  0012               	return		;funcret
  7625  002772                     __end_of_init_INTERRUPT:
  7626                           	opt stack 0
  7627                           tblptru	equ	0xFF8
  7628                           tblptrh	equ	0xFF7
  7629                           tblptrl	equ	0xFF6
  7630                           tablat	equ	0xFF5
  7631                           prodh	equ	0xFF4
  7632                           prodl	equ	0xFF3
  7633                           intcon	equ	0xFF2
  7634                           intcon2	equ	0xFF1
  7635                           postinc0	equ	0xFEE
  7636                           wreg	equ	0xFE8
  7637                           postdec1	equ	0xFE5
  7638                           fsr1l	equ	0xFE1
  7639                           indf2	equ	0xFDF
  7640                           postinc2	equ	0xFDE
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function _I2C_Init *****************
  7646 ;; Defined at:
  7647 ;;		line 14 in file "I2C_Soft.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  c               4   16[COMRAM] unsigned long 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;		None
  7652 ;; Return value:  Size  Location     Type
  7653 ;;		None               void
  7654 ;; Registers used:
  7655 ;;		wreg, cstack
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7661 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;Total ram usage:        4 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    4
  7668 ;; This function calls:
  7669 ;;		_i2cHighScl
  7670 ;;		_i2cHighSda
  7671 ;; This function is called by:
  7672 ;;		_Do_Init
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           	psect	text36
  7677  002A3E                     __ptext36:
  7678                           	opt stack 0
  7679  002A3E                     _I2C_Init:
  7680                           	opt stack 25
  7681                           
  7682                           ;I2C_Soft.c: 16: i2cHighScl();
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;incstack = 0
  7686  002A3E  EC13  F015         	call	_i2cHighScl	;wreg free
  7687                           
  7688                           ;I2C_Soft.c: 17: i2cHighSda();
  7689  002A42  EC3A  F015         	call	_i2cHighSda	;wreg free
  7690  002A46  0012               	return		;funcret
  7691  002A48                     __end_of_I2C_Init:
  7692                           	opt stack 0
  7693                           tblptru	equ	0xFF8
  7694                           tblptrh	equ	0xFF7
  7695                           tblptrl	equ	0xFF6
  7696                           tablat	equ	0xFF5
  7697                           prodh	equ	0xFF4
  7698                           prodl	equ	0xFF3
  7699                           intcon	equ	0xFF2
  7700                           intcon2	equ	0xFF1
  7701                           postinc0	equ	0xFEE
  7702                           wreg	equ	0xFE8
  7703                           postdec1	equ	0xFE5
  7704                           fsr1l	equ	0xFE1
  7705                           indf2	equ	0xFDF
  7706                           postinc2	equ	0xFDE
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function _DS1621_Init *****************
  7712 ;; Defined at:
  7713 ;;		line 21 in file "I2C_Support.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;  Device          1   21[COMRAM] unsigned char 
  7718 ;; Return value:  Size  Location     Type
  7719 ;;		None               void
  7720 ;; Registers used:
  7721 ;;		wreg, status,2, status,0, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;Total ram usage:        1 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    6
  7734 ;; This function calls:
  7735 ;;		_I2C_Write_Cmd_Only
  7736 ;;		_I2C_Write_Cmd_Write_Data
  7737 ;; This function is called by:
  7738 ;;		_Do_Init
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text37
  7743  0028BA                     __ptext37:
  7744                           	opt stack 0
  7745  0028BA                     _DS1621_Init:
  7746                           	opt stack 23
  7747                           
  7748                           ;I2C_Support.c: 23: char Device = 0x48;
  7749                           
  7750                           ;incstack = 0
  7751  0028BA  0E48               	movlw	72
  7752  0028BC  6E16               	movwf	DS1621_Init@Device,c
  7753                           
  7754                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7755  0028BE  0EAC               	movlw	172
  7756  0028C0  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7757  0028C2  0E02               	movlw	2
  7758  0028C4  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7759  0028C6  5016               	movf	DS1621_Init@Device,w,c
  7760  0028C8  EC4D  F014         	call	_I2C_Write_Cmd_Write_Data
  7761                           
  7762                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7763  0028CC  0EEE               	movlw	238
  7764  0028CE  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7765  0028D0  5016               	movf	DS1621_Init@Device,w,c
  7766  0028D2  EC7A  F014         	call	_I2C_Write_Cmd_Only
  7767  0028D6  0012               	return		;funcret
  7768  0028D8                     __end_of_DS1621_Init:
  7769                           	opt stack 0
  7770                           tblptru	equ	0xFF8
  7771                           tblptrh	equ	0xFF7
  7772                           tblptrl	equ	0xFF6
  7773                           tablat	equ	0xFF5
  7774                           prodh	equ	0xFF4
  7775                           prodl	equ	0xFF3
  7776                           intcon	equ	0xFF2
  7777                           intcon2	equ	0xFF1
  7778                           postinc0	equ	0xFEE
  7779                           wreg	equ	0xFE8
  7780                           postdec1	equ	0xFE5
  7781                           fsr1l	equ	0xFE1
  7782                           indf2	equ	0xFDF
  7783                           postinc2	equ	0xFDE
  7784                           fsr2h	equ	0xFDA
  7785                           fsr2l	equ	0xFD9
  7786                           status	equ	0xFD8
  7787                           
  7788 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7789 ;; Defined at:
  7790 ;;		line 152 in file "I2C_Soft.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;  Device          1    wreg     unsigned char 
  7793 ;;  Cmd             1   18[COMRAM] unsigned char 
  7794 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;  Device          1   20[COMRAM] unsigned char 
  7797 ;; Return value:  Size  Location     Type
  7798 ;;		None               void
  7799 ;; Registers used:
  7800 ;;		wreg, status,2, status,0, cstack
  7801 ;; Tracked objects:
  7802 ;;		On entry : 0/0
  7803 ;;		On exit  : 0/0
  7804 ;;		Unchanged: 0/0
  7805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7806 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7809 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;Total ram usage:        3 bytes
  7811 ;; Hardware stack levels used:    1
  7812 ;; Hardware stack levels required when called:    5
  7813 ;; This function calls:
  7814 ;;		_I2C_Start
  7815 ;;		_I2C_Stop
  7816 ;;		_I2C_Write
  7817 ;; This function is called by:
  7818 ;;		_DS1621_Init
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           	psect	text38
  7823  00289A                     __ptext38:
  7824                           	opt stack 0
  7825  00289A                     _I2C_Write_Cmd_Write_Data:
  7826                           	opt stack 23
  7827                           
  7828                           ;incstack = 0
  7829                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7830  00289A  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7831                           
  7832                           ;I2C_Soft.c: 154: I2C_Start();
  7833  00289C  ECE3  F014         	call	_I2C_Start	;wreg free
  7834                           
  7835                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  7836  0028A0  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7837  0028A2  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7838  0028A4  EC4E  F013         	call	_I2C_Write
  7839                           
  7840                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  7841  0028A8  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7842  0028AA  EC4E  F013         	call	_I2C_Write
  7843                           
  7844                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  7845  0028AE  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7846  0028B0  EC4E  F013         	call	_I2C_Write
  7847                           
  7848                           ;I2C_Soft.c: 158: I2C_Stop();
  7849  0028B4  ECDA  F014         	call	_I2C_Stop	;wreg free
  7850  0028B8  0012               	return		;funcret
  7851  0028BA                     __end_of_I2C_Write_Cmd_Write_Data:
  7852                           	opt stack 0
  7853                           tblptru	equ	0xFF8
  7854                           tblptrh	equ	0xFF7
  7855                           tblptrl	equ	0xFF6
  7856                           tablat	equ	0xFF5
  7857                           prodh	equ	0xFF4
  7858                           prodl	equ	0xFF3
  7859                           intcon	equ	0xFF2
  7860                           intcon2	equ	0xFF1
  7861                           postinc0	equ	0xFEE
  7862                           wreg	equ	0xFE8
  7863                           postdec1	equ	0xFE5
  7864                           fsr1l	equ	0xFE1
  7865                           indf2	equ	0xFDF
  7866                           postinc2	equ	0xFDE
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _I2C_Write_Cmd_Only *****************
  7872 ;; Defined at:
  7873 ;;		line 144 in file "I2C_Soft.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  Device          1    wreg     unsigned char 
  7876 ;;  Cmd             1   18[COMRAM] unsigned char 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  Device          1   19[COMRAM] unsigned char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;		None               void
  7881 ;; Registers used:
  7882 ;;		wreg, status,2, status,0, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7888 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;Total ram usage:        2 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    5
  7895 ;; This function calls:
  7896 ;;		_I2C_Start
  7897 ;;		_I2C_Stop
  7898 ;;		_I2C_Write
  7899 ;; This function is called by:
  7900 ;;		_DS1621_Init
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           	psect	text39
  7905  0028F4                     __ptext39:
  7906                           	opt stack 0
  7907  0028F4                     _I2C_Write_Cmd_Only:
  7908                           	opt stack 23
  7909                           
  7910                           ;incstack = 0
  7911                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7912  0028F4  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7913                           
  7914                           ;I2C_Soft.c: 146: I2C_Start();
  7915  0028F6  ECE3  F014         	call	_I2C_Start	;wreg free
  7916                           
  7917                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  7918  0028FA  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7919  0028FC  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7920  0028FE  EC4E  F013         	call	_I2C_Write
  7921                           
  7922                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  7923  002902  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7924  002904  EC4E  F013         	call	_I2C_Write
  7925                           
  7926                           ;I2C_Soft.c: 149: I2C_Stop();
  7927  002908  ECDA  F014         	call	_I2C_Stop	;wreg free
  7928  00290C  0012               	return		;funcret
  7929  00290E                     __end_of_I2C_Write_Cmd_Only:
  7930                           	opt stack 0
  7931                           tblptru	equ	0xFF8
  7932                           tblptrh	equ	0xFF7
  7933                           tblptrl	equ	0xFF6
  7934                           tablat	equ	0xFF5
  7935                           prodh	equ	0xFF4
  7936                           prodl	equ	0xFF3
  7937                           intcon	equ	0xFF2
  7938                           intcon2	equ	0xFF1
  7939                           postinc0	equ	0xFEE
  7940                           wreg	equ	0xFE8
  7941                           postdec1	equ	0xFE5
  7942                           fsr1l	equ	0xFE1
  7943                           indf2	equ	0xFDF
  7944                           postinc2	equ	0xFDE
  7945                           fsr2h	equ	0xFDA
  7946                           fsr2l	equ	0xFD9
  7947                           status	equ	0xFD8
  7948                           
  7949 ;; *************** function _Decrease_Speed *****************
  7950 ;; Defined at:
  7951 ;;		line 71 in file "Fan_Support.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;		None
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;		None
  7956 ;; Return value:  Size  Location     Type
  7957 ;;		None               void
  7958 ;; Registers used:
  7959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;Total ram usage:        0 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    6
  7972 ;; This function calls:
  7973 ;;		_Do_Beep
  7974 ;;		_do_update_pwm
  7975 ;;		_printf
  7976 ;; This function is called by:
  7977 ;;		_main
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text40
  7982  0027D2                     __ptext40:
  7983                           	opt stack 0
  7984  0027D2                     _Decrease_Speed:
  7985                           	opt stack 24
  7986                           
  7987                           ;Fan_Support.c: 73: if (duty_cycle == 0)
  7988                           
  7989                           ;incstack = 0
  7990  0027D2  505B               	movf	_duty_cycle,w,c
  7991  0027D4  A4D8               	btfss	status,2,c
  7992  0027D6  D00C               	goto	l7035
  7993                           
  7994                           ;Fan_Support.c: 74: {
  7995                           ;Fan_Support.c: 75: Do_Beep();
  7996  0027D8  EC94  F014         	call	_Do_Beep	;wreg free
  7997                           
  7998                           ;Fan_Support.c: 76: printf("Duty Cycle is at 0 \r\n");
  7999  0027DC  0E63               	movlw	low STR_2
  8000  0027DE  6E1D               	movwf	printf@f,c
  8001  0027E0  0EFF               	movlw	high STR_2
  8002  0027E2  6E1E               	movwf	printf@f+1,c
  8003  0027E4  EC0E  F000         	call	_printf	;wreg free
  8004                           
  8005                           ;Fan_Support.c: 77: do_update_pwm(duty_cycle);
  8006  0027E8  505B               	movf	_duty_cycle,w,c
  8007  0027EA  ECD5  F00E         	call	_do_update_pwm
  8008                           
  8009                           ;Fan_Support.c: 78: }
  8010  0027EE  D007               	goto	l58
  8011  0027F0                     l7035:
  8012                           
  8013                           ;Fan_Support.c: 79: else
  8014                           ;Fan_Support.c: 80: {
  8015                           ;Fan_Support.c: 81: duty_cycle = duty_cycle - 5;
  8016  0027F0  505B               	movf	_duty_cycle,w,c
  8017  0027F2  0FFB               	addlw	251
  8018  0027F4  6E5B               	movwf	_duty_cycle,c
  8019                           
  8020                           ;Fan_Support.c: 82: do_update_pwm(duty_cycle);
  8021  0027F6  505B               	movf	_duty_cycle,w,c
  8022  0027F8  ECD5  F00E         	call	_do_update_pwm
  8023  0027FC  D000               	goto	l58
  8024  0027FE                     l58:
  8025  0027FE  0012               	return		;funcret
  8026  002800                     __end_of_Decrease_Speed:
  8027                           	opt stack 0
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           intcon2	equ	0xFF1
  8036                           postinc0	equ	0xFEE
  8037                           wreg	equ	0xFE8
  8038                           postdec1	equ	0xFE5
  8039                           fsr1l	equ	0xFE1
  8040                           indf2	equ	0xFDF
  8041                           postinc2	equ	0xFDE
  8042                           fsr2h	equ	0xFDA
  8043                           fsr2l	equ	0xFD9
  8044                           status	equ	0xFD8
  8045                           
  8046 ;; *************** function _printf *****************
  8047 ;; Defined at:
  8048 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  f               2   28[COMRAM] PTR const unsigned char 
  8051 ;;		 -> STR_8(15), STR_7(22), STR_6(16), STR_5(27), 
  8052 ;;		 -> STR_4(21), STR_3(30), STR_2(22), STR_1(24), 
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;  idx             1    0[BANK1 ] unsigned char 
  8055 ;;  tmpval          4    0        struct .
  8056 ;;  flag            2   19[BANK1 ] unsigned short 
  8057 ;;  width           2   16[BANK1 ] int 
  8058 ;;  val             2   13[BANK1 ] unsigned int 
  8059 ;;  ap              2   11[BANK1 ] PTR void [1]
  8060 ;;		 -> ?_printf(2), 
  8061 ;;  len             2    9[BANK1 ] unsigned int 
  8062 ;;  cp              2    1[BANK1 ] PTR const unsigned char 
  8063 ;;		 -> printf@c(1), 
  8064 ;;  c               1   18[BANK1 ] char 
  8065 ;;  prec            1   15[BANK1 ] char 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  2   28[COMRAM] int 
  8068 ;; Registers used:
  8069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8075 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Locals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8078 ;;      Totals:        18       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8079 ;;Total ram usage:       39 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    4
  8082 ;; This function calls:
  8083 ;;		___lwdiv
  8084 ;;		___lwmod
  8085 ;;		___wmul
  8086 ;;		_isdigit
  8087 ;;		_putch
  8088 ;; This function is called by:
  8089 ;;		_Increase_Speed
  8090 ;;		_Decrease_Speed
  8091 ;;		_main
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text41
  8096  00001C                     __ptext41:
  8097                           	opt stack 0
  8098  00001C                     _printf:
  8099                           	opt stack 26
  8100                           
  8101                           ;doprnt.c: 466: va_list ap;
  8102                           ;doprnt.c: 499: signed char c;
  8103                           ;doprnt.c: 501: int width;
  8104                           ;doprnt.c: 506: signed char prec;
  8105                           ;doprnt.c: 508: unsigned short flag;
  8106                           ;doprnt.c: 523: union {
  8107                           ;doprnt.c: 524: unsigned long vd;
  8108                           ;doprnt.c: 525: double integ;
  8109                           ;doprnt.c: 526: } tmpval;
  8110                           ;doprnt.c: 528: unsigned int val;
  8111                           ;doprnt.c: 529: unsigned len;
  8112                           ;doprnt.c: 530: const char * cp;
  8113                           ;doprnt.c: 533: *ap = __va_start();
  8114                           
  8115                           ;incstack = 0
  8116  00001C  0E1F               	movlw	low (?_printf+2)
  8117  00001E  0101               	movlb	1	; () banked
  8118  000020  6F80               	movwf	printf@ap& (0+255),b
  8119  000022  0E00               	movlw	high (?_printf+2)
  8120  000024  0101               	movlb	1	; () banked
  8121  000026  6F81               	movwf	(printf@ap+1)& (0+255),b
  8122                           
  8123                           ;doprnt.c: 536: while(c = *f++) {
  8124  000028  EFAA  F004         	goto	l6739
  8125  00002C                     l6433:
  8126                           
  8127                           ; BSR set to: 1
  8128                           ;doprnt.c: 538: if(c != '%')
  8129  00002C  0E25               	movlw	37
  8130  00002E  0101               	movlb	1	; () banked
  8131  000030  1987               	xorwf	printf@c& (0+255),w,b
  8132  000032  B4D8               	btfsc	status,2,c
  8133  000034  D006               	goto	l6437
  8134                           
  8135                           ; BSR set to: 1
  8136                           ;doprnt.c: 540: {
  8137                           ;doprnt.c: 541: (putch(c) );
  8138  000036  0101               	movlb	1	; () banked
  8139  000038  5187               	movf	printf@c& (0+255),w,b
  8140  00003A  EC0C  F015         	call	_putch
  8141                           
  8142                           ;doprnt.c: 542: continue;
  8143  00003E  EFAA  F004         	goto	l6739
  8144  000042                     l6437:
  8145                           
  8146                           ;doprnt.c: 543: }
  8147                           ;doprnt.c: 546: width = 0;
  8148  000042  0E00               	movlw	0
  8149  000044  0101               	movlb	1	; () banked
  8150  000046  6F86               	movwf	(printf@width+1)& (0+255),b
  8151  000048  0E00               	movlw	0
  8152  00004A  6F85               	movwf	printf@width& (0+255),b
  8153                           
  8154                           ;doprnt.c: 548: flag = 0;
  8155  00004C  0E00               	movlw	0
  8156  00004E  0101               	movlb	1	; () banked
  8157  000050  6F89               	movwf	(printf@flag+1)& (0+255),b
  8158  000052  0E00               	movlw	0
  8159  000054  6F88               	movwf	printf@flag& (0+255),b
  8160                           
  8161                           ; BSR set to: 1
  8162                           ;doprnt.c: 551: switch(*f) {
  8163                           
  8164                           ;doprnt.c: 550: for(;;) {
  8165  000056  D00F               	goto	l6449
  8166  000058                     l6439:
  8167                           
  8168                           ;doprnt.c: 554: flag |= 0x08;
  8169  000058  0101               	movlb	1	; () banked
  8170  00005A  8788               	bsf	printf@flag& (0+255),3,b
  8171  00005C  D008               	goto	L7
  8172  00005E                     l6441:
  8173                           
  8174                           ;doprnt.c: 561: flag |= 0x01;
  8175  00005E  0101               	movlb	1	; () banked
  8176  000060  8188               	bsf	printf@flag& (0+255),0,b
  8177  000062  D005               	goto	L7
  8178  000064                     l6443:
  8179                           
  8180                           ;doprnt.c: 574: flag |= 0x800;
  8181  000064  0101               	movlb	1	; () banked
  8182  000066  8789               	bsf	(printf@flag+1)& (0+255),3,b
  8183  000068  D002               	goto	L7
  8184  00006A                     l6445:
  8185                           
  8186                           ;doprnt.c: 580: flag |= 0x04;
  8187  00006A  0101               	movlb	1	; () banked
  8188  00006C  8588               	bsf	printf@flag& (0+255),2,b
  8189  00006E                     L7:
  8190                           
  8191                           ;doprnt.c: 581: f++;
  8192  00006E  4A1D               	infsnz	printf@f,f,c
  8193  000070  2A1E               	incf	printf@f+1,f,c
  8194                           
  8195                           ;doprnt.c: 582: continue;
  8196  000072  D001               	goto	l6449
  8197                           
  8198                           ; BSR set to: 1
  8199                           ;doprnt.c: 584: }
  8200  000074  D014               	goto	l822
  8201  000076                     l6449:
  8202  000076  C01D  FFF6         	movff	printf@f,tblptrl
  8203  00007A  C01E  FFF7         	movff	printf@f+1,tblptrh
  8204  00007E                     	if	0	;tblptru may be non-zero
  8205  00007E                     	endif
  8206  00007E                     	if	0	;tblptru may be non-zero
  8207  00007E                     	endif
  8208  00007E  0008               	tblrd		*
  8209  000080  50F5               	movf	tablat,w,c
  8210                           
  8211                           ; Switch size 1, requested type "space"
  8212                           ; Number of cases is 4, Range of values is 32 to 48
  8213                           ; switch strategies available:
  8214                           ; Name         Instructions Cycles
  8215                           ; simple_byte           13     7 (average)
  8216                           ;	Chosen strategy is simple_byte
  8217  000082  0A20               	xorlw	32	; case 32
  8218  000084  B4D8               	btfsc	status,2,c
  8219  000086  D7EB               	goto	l6441
  8220  000088  0A03               	xorlw	3	; case 35
  8221  00008A  B4D8               	btfsc	status,2,c
  8222  00008C  D7EB               	goto	l6443
  8223  00008E  0A0E               	xorlw	14	; case 45
  8224  000090  B4D8               	btfsc	status,2,c
  8225  000092  D7E2               	goto	l6439
  8226  000094  0A1D               	xorlw	29	; case 48
  8227  000096  B4D8               	btfsc	status,2,c
  8228  000098  D7E8               	goto	l6445
  8229                           
  8230                           ;doprnt.c: 585: break;
  8231  00009A  D001               	goto	l822
  8232                           
  8233                           ;doprnt.c: 586: }
  8234  00009C  D7EC               	goto	l6449
  8235  00009E                     l822:
  8236                           
  8237                           ;doprnt.c: 593: if(flag & 0x08)
  8238  00009E  0101               	movlb	1	; () banked
  8239  0000A0  A788               	btfss	printf@flag& (0+255),3,b
  8240  0000A2  D003               	goto	l6453
  8241                           
  8242                           ; BSR set to: 1
  8243                           ;doprnt.c: 594: flag &= ~0x04;
  8244  0000A4  0101               	movlb	1	; () banked
  8245  0000A6  9588               	bcf	printf@flag& (0+255),2,b
  8246  0000A8  D000               	goto	l6453
  8247  0000AA                     l6453:
  8248                           
  8249                           ; BSR set to: 1
  8250                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8251  0000AA  C01D  FFF6         	movff	printf@f,tblptrl
  8252  0000AE  C01E  FFF7         	movff	printf@f+1,tblptrh
  8253  0000B2                     	if	0	;tblptru may be non-zero
  8254  0000B2                     	endif
  8255  0000B2                     	if	0	;tblptru may be non-zero
  8256  0000B2                     	endif
  8257  0000B2  0008               	tblrd		*
  8258  0000B4  50F5               	movf	tablat,w,c
  8259  0000B6  EC3C  F014         	call	_isdigit
  8260  0000BA  A0D8               	btfss	status,0,c
  8261  0000BC  D038               	goto	l6465
  8262                           
  8263                           ;doprnt.c: 598: width = 0;
  8264  0000BE  0E00               	movlw	0
  8265  0000C0  0101               	movlb	1	; () banked
  8266  0000C2  6F86               	movwf	(printf@width+1)& (0+255),b
  8267  0000C4  0E00               	movlw	0
  8268  0000C6  6F85               	movwf	printf@width& (0+255),b
  8269  0000C8  D000               	goto	l6457
  8270  0000CA                     l6457:
  8271                           
  8272                           ;doprnt.c: 600: width *= 10;
  8273  0000CA  C185  F011         	movff	printf@width,___wmul@multiplier
  8274  0000CE  C186  F012         	movff	printf@width+1,___wmul@multiplier+1
  8275  0000D2  0E00               	movlw	0
  8276  0000D4  6E14               	movwf	___wmul@multiplicand+1,c
  8277  0000D6  0E0A               	movlw	10
  8278  0000D8  6E13               	movwf	___wmul@multiplicand,c
  8279  0000DA  EC15  F014         	call	___wmul	;wreg free
  8280  0000DE  C011  F185         	movff	?___wmul,printf@width
  8281  0000E2  C012  F186         	movff	?___wmul+1,printf@width+1
  8282                           
  8283                           ;doprnt.c: 601: width += *f++ - '0';
  8284  0000E6  0ED0               	movlw	208
  8285  0000E8  6E2B               	movwf	??_printf& (0+255),c
  8286  0000EA  0EFF               	movlw	255
  8287  0000EC  6E2C               	movwf	(??_printf+1)& (0+255),c
  8288  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  8289  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  8290  0000F6                     	if	0	;tblptru may be non-zero
  8291  0000F6                     	endif
  8292  0000F6                     	if	0	;tblptru may be non-zero
  8293  0000F6                     	endif
  8294  0000F6  0008               	tblrd		*
  8295  0000F8  50F5               	movf	tablat,w,c
  8296  0000FA  6E2D               	movwf	(??_printf+2)& (0+255),c
  8297  0000FC  6A2E               	clrf	(??_printf+3)& (0+255),c
  8298  0000FE  502B               	movf	??_printf,w,c
  8299  000100  262D               	addwf	??_printf+2,f,c
  8300  000102  502C               	movf	??_printf+1,w,c
  8301  000104  222E               	addwfc	??_printf+3,f,c
  8302  000106  502D               	movf	??_printf+2,w,c
  8303  000108  0101               	movlb	1	; () banked
  8304  00010A  2785               	addwf	printf@width& (0+255),f,b
  8305  00010C  502E               	movf	??_printf+3,w,c
  8306  00010E  0101               	movlb	1	; () banked
  8307  000110  2386               	addwfc	(printf@width+1)& (0+255),f,b
  8308                           
  8309                           ; BSR set to: 1
  8310  000112  4A1D               	infsnz	printf@f,f,c
  8311  000114  2A1E               	incf	printf@f+1,f,c
  8312                           
  8313                           ; BSR set to: 1
  8314                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8315  000116  C01D  FFF6         	movff	printf@f,tblptrl
  8316  00011A  C01E  FFF7         	movff	printf@f+1,tblptrh
  8317  00011E                     	if	0	;tblptru may be non-zero
  8318  00011E                     	endif
  8319  00011E                     	if	0	;tblptru may be non-zero
  8320  00011E                     	endif
  8321  00011E  0008               	tblrd		*
  8322  000120  50F5               	movf	tablat,w,c
  8323  000122  EC3C  F014         	call	_isdigit
  8324  000126  A0D8               	btfss	status,0,c
  8325  000128  D01B               	goto	l6473
  8326  00012A  D7CF               	goto	l6457
  8327                           
  8328                           ;doprnt.c: 604: } else if(*f == '*') {
  8329  00012C  D019               	goto	l6473
  8330  00012E                     l6465:
  8331  00012E  C01D  FFF6         	movff	printf@f,tblptrl
  8332  000132  C01E  FFF7         	movff	printf@f+1,tblptrh
  8333  000136                     	if	0	;tblptru may be non-zero
  8334  000136                     	endif
  8335  000136                     	if	0	;tblptru may be non-zero
  8336  000136                     	endif
  8337  000136  0008               	tblrd		*
  8338  000138  50F5               	movf	tablat,w,c
  8339  00013A  0A2A               	xorlw	42
  8340  00013C  A4D8               	btfss	status,2,c
  8341  00013E  D010               	goto	l6473
  8342                           
  8343                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  8344  000140  C180  FFD9         	movff	printf@ap,fsr2l
  8345  000144  C181  FFDA         	movff	printf@ap+1,fsr2h
  8346  000148  CFDE F185          	movff	postinc2,printf@width
  8347  00014C  CFDD F186          	movff	postdec2,printf@width+1
  8348  000150  0E02               	movlw	2
  8349  000152  0101               	movlb	1	; () banked
  8350  000154  2780               	addwf	printf@ap& (0+255),f,b
  8351  000156  0E00               	movlw	0
  8352  000158  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8353                           
  8354                           ; BSR set to: 1
  8355                           ;doprnt.c: 606: f++;
  8356  00015A  4A1D               	infsnz	printf@f,f,c
  8357  00015C  2A1E               	incf	printf@f+1,f,c
  8358                           
  8359                           ; BSR set to: 1
  8360  00015E  D000               	goto	l6473
  8361  000160                     l6473:
  8362                           
  8363                           ;doprnt.c: 608: }
  8364                           ;doprnt.c: 611: if(*f == '.') {
  8365  000160  C01D  FFF6         	movff	printf@f,tblptrl
  8366  000164  C01E  FFF7         	movff	printf@f+1,tblptrh
  8367  000168                     	if	0	;tblptru may be non-zero
  8368  000168                     	endif
  8369  000168                     	if	0	;tblptru may be non-zero
  8370  000168                     	endif
  8371  000168  0008               	tblrd		*
  8372  00016A  50F5               	movf	tablat,w,c
  8373  00016C  0A2E               	xorlw	46
  8374  00016E  A4D8               	btfss	status,2,c
  8375  000170  D03E               	goto	l6493
  8376                           
  8377                           ;doprnt.c: 612: flag |= 0x4000;
  8378  000172  0101               	movlb	1	; () banked
  8379  000174  8D89               	bsf	(printf@flag+1)& (0+255),6,b
  8380                           
  8381                           ;doprnt.c: 613: f++;
  8382  000176  4A1D               	infsnz	printf@f,f,c
  8383  000178  2A1E               	incf	printf@f+1,f,c
  8384                           
  8385                           ; BSR set to: 1
  8386                           ;doprnt.c: 615: if(*f == '*') {
  8387  00017A  C01D  FFF6         	movff	printf@f,tblptrl
  8388  00017E  C01E  FFF7         	movff	printf@f+1,tblptrh
  8389  000182                     	if	0	;tblptru may be non-zero
  8390  000182                     	endif
  8391  000182                     	if	0	;tblptru may be non-zero
  8392  000182                     	endif
  8393  000182  0008               	tblrd		*
  8394  000184  50F5               	movf	tablat,w,c
  8395  000186  0A2A               	xorlw	42
  8396  000188  A4D8               	btfss	status,2,c
  8397  00018A  D00F               	goto	l6485
  8398                           
  8399                           ; BSR set to: 1
  8400                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  8401  00018C  C180  FFD9         	movff	printf@ap,fsr2l
  8402  000190  C181  FFDA         	movff	printf@ap+1,fsr2h
  8403  000194  50DF               	movf	indf2,w,c
  8404  000196  0101               	movlb	1	; () banked
  8405  000198  6F84               	movwf	printf@prec& (0+255),b
  8406                           
  8407                           ; BSR set to: 1
  8408  00019A  0E02               	movlw	2
  8409  00019C  0101               	movlb	1	; () banked
  8410  00019E  2780               	addwf	printf@ap& (0+255),f,b
  8411  0001A0  0E00               	movlw	0
  8412  0001A2  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8413                           
  8414                           ; BSR set to: 1
  8415                           ;doprnt.c: 617: f++;
  8416  0001A4  4A1D               	infsnz	printf@f,f,c
  8417  0001A6  2A1E               	incf	printf@f+1,f,c
  8418                           
  8419                           ;doprnt.c: 618: } else
  8420  0001A8  D0C1               	goto	l6543
  8421  0001AA                     l6485:
  8422                           
  8423                           ; BSR set to: 1
  8424                           ;doprnt.c: 620: {
  8425                           ;doprnt.c: 621: prec = 0;
  8426  0001AA  0E00               	movlw	0
  8427  0001AC  0101               	movlb	1	; () banked
  8428  0001AE  6F84               	movwf	printf@prec& (0+255),b
  8429                           
  8430                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  8431  0001B0  D012               	goto	l6491
  8432  0001B2                     l6487:
  8433                           
  8434                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  8435  0001B2  C01D  FFF6         	movff	printf@f,tblptrl
  8436  0001B6  C01E  FFF7         	movff	printf@f+1,tblptrh
  8437  0001BA                     	if	0	;tblptru may be non-zero
  8438  0001BA                     	endif
  8439  0001BA                     	if	0	;tblptru may be non-zero
  8440  0001BA                     	endif
  8441  0001BA  0008               	tblrd		*
  8442  0001BC  CFF5 F02B          	movff	tablat,??_printf
  8443  0001C0  0101               	movlb	1	; () banked
  8444  0001C2  5184               	movf	printf@prec& (0+255),w,b
  8445  0001C4  0D0A               	mullw	10
  8446  0001C6  50F3               	movf	prodl,w,c
  8447  0001C8  242B               	addwf	??_printf,w,c
  8448  0001CA  0FD0               	addlw	208
  8449  0001CC  0101               	movlb	1	; () banked
  8450  0001CE  6F84               	movwf	printf@prec& (0+255),b
  8451                           
  8452                           ; BSR set to: 1
  8453  0001D0  4A1D               	infsnz	printf@f,f,c
  8454  0001D2  2A1E               	incf	printf@f+1,f,c
  8455  0001D4  D000               	goto	l6491
  8456  0001D6                     l6491:
  8457                           
  8458                           ; BSR set to: 1
  8459  0001D6  C01D  FFF6         	movff	printf@f,tblptrl
  8460  0001DA  C01E  FFF7         	movff	printf@f+1,tblptrh
  8461  0001DE                     	if	0	;tblptru may be non-zero
  8462  0001DE                     	endif
  8463  0001DE                     	if	0	;tblptru may be non-zero
  8464  0001DE                     	endif
  8465  0001DE  0008               	tblrd		*
  8466  0001E0  50F5               	movf	tablat,w,c
  8467  0001E2  EC3C  F014         	call	_isdigit
  8468  0001E6  A0D8               	btfss	status,0,c
  8469  0001E8  D0A1               	goto	l6543
  8470  0001EA  D7E3               	goto	l6487
  8471                           
  8472                           ;doprnt.c: 624: }
  8473                           ;doprnt.c: 625: } else {
  8474  0001EC  D09F               	goto	l6543
  8475  0001EE                     l6493:
  8476                           
  8477                           ;doprnt.c: 626: prec = 0;
  8478  0001EE  0E00               	movlw	0
  8479  0001F0  0101               	movlb	1	; () banked
  8480  0001F2  6F84               	movwf	printf@prec& (0+255),b
  8481                           
  8482                           ; BSR set to: 1
  8483                           ;doprnt.c: 630: }
  8484                           ;doprnt.c: 635: switch(c = *f++) {
  8485  0001F4  D09B               	goto	l6543
  8486                           
  8487                           ; BSR set to: 1
  8488                           ;doprnt.c: 638: goto alldone;
  8489                           
  8490                           ;doprnt.c: 637: case 0:
  8491  0001F6  D3BE               	goto	l941
  8492  0001F8                     l6495:
  8493                           
  8494                           ; BSR set to: 1
  8495                           ;doprnt.c: 691: flag |= 0x40;
  8496  0001F8  0101               	movlb	1	; () banked
  8497  0001FA  8D88               	bsf	printf@flag& (0+255),6,b
  8498                           
  8499                           ; BSR set to: 1
  8500                           ;doprnt.c: 698: case 'i':
  8501                           ;doprnt.c: 699: break;
  8502                           
  8503                           ; BSR set to: 1
  8504                           
  8505                           ;doprnt.c: 697: case 'd':
  8506                           
  8507                           ;doprnt.c: 693: break;
  8508  0001FC  D0BB               	goto	l6545
  8509  0001FE                     l6497:
  8510                           
  8511                           ; BSR set to: 1
  8512                           ;doprnt.c: 714: flag |= 0x20;
  8513  0001FE  0101               	movlb	1	; () banked
  8514  000200  8B88               	bsf	printf@flag& (0+255),5,b
  8515  000202                     l844:
  8516                           
  8517                           ; BSR set to: 1
  8518                           ;doprnt.c: 721: flag |= 0x80;
  8519  000202  0101               	movlb	1	; () banked
  8520  000204  8F88               	bsf	printf@flag& (0+255),7,b
  8521                           
  8522                           ;doprnt.c: 723: break;
  8523  000206  D0B6               	goto	l6545
  8524  000208                     l6499:
  8525                           
  8526                           ; BSR set to: 1
  8527                           ;doprnt.c: 753: if(prec && prec < len)
  8528  000208  0101               	movlb	1	; () banked
  8529  00020A  5184               	movf	printf@prec& (0+255),w,b
  8530  00020C  0101               	movlb	1	; () banked
  8531  00020E  B4D8               	btfsc	status,2,c
  8532  000210  D015               	goto	l6505
  8533                           
  8534                           ; BSR set to: 1
  8535  000212  C184  F02B         	movff	printf@prec,??_printf
  8536  000216  6A2C               	clrf	(??_printf+1)& (0+255),c
  8537  000218  BE2B               	btfsc	??_printf& (0+255),7,c
  8538  00021A  062C               	decf	(??_printf+1)& (0+255),f,c
  8539  00021C  0101               	movlb	1	; () banked
  8540  00021E  517E               	movf	printf@len& (0+255),w,b
  8541  000220  5C2B               	subwf	??_printf,w,c
  8542  000222  0101               	movlb	1	; () banked
  8543  000224  517F               	movf	(printf@len+1)& (0+255),w,b
  8544  000226  582C               	subwfb	??_printf+1,w,c
  8545  000228  B0D8               	btfsc	status,0,c
  8546  00022A  D008               	goto	l6505
  8547                           
  8548                           ; BSR set to: 1
  8549                           ;doprnt.c: 754: len = prec;
  8550  00022C  0101               	movlb	1	; () banked
  8551  00022E  5184               	movf	printf@prec& (0+255),w,b
  8552  000230  0101               	movlb	1	; () banked
  8553  000232  6F7E               	movwf	printf@len& (0+255),b
  8554  000234  6B7F               	clrf	(printf@len+1)& (0+255),b
  8555  000236  BF7E               	btfsc	printf@len& (0+255),7,b
  8556  000238  077F               	decf	(printf@len+1)& (0+255),f,b
  8557  00023A  D000               	goto	l6505
  8558  00023C                     l6505:
  8559                           
  8560                           ; BSR set to: 1
  8561                           ;doprnt.c: 757: if(width > len)
  8562  00023C  0101               	movlb	1	; () banked
  8563  00023E  5185               	movf	printf@width& (0+255),w,b
  8564  000240  0101               	movlb	1	; () banked
  8565  000242  5D7E               	subwf	printf@len& (0+255),w,b
  8566  000244  0101               	movlb	1	; () banked
  8567  000246  5186               	movf	(printf@width+1)& (0+255),w,b
  8568  000248  0101               	movlb	1	; () banked
  8569  00024A  597F               	subwfb	(printf@len+1)& (0+255),w,b
  8570  00024C  B0D8               	btfsc	status,0,c
  8571  00024E  D009               	goto	l6509
  8572                           
  8573                           ; BSR set to: 1
  8574                           ;doprnt.c: 758: width -= len;
  8575  000250  0101               	movlb	1	; () banked
  8576  000252  517E               	movf	printf@len& (0+255),w,b
  8577  000254  0101               	movlb	1	; () banked
  8578  000256  5F85               	subwf	printf@width& (0+255),f,b
  8579  000258  0101               	movlb	1	; () banked
  8580  00025A  517F               	movf	(printf@len+1)& (0+255),w,b
  8581  00025C  0101               	movlb	1	; () banked
  8582  00025E  5B86               	subwfb	(printf@width+1)& (0+255),f,b
  8583  000260  D006               	goto	l6511
  8584  000262                     l6509:
  8585                           
  8586                           ; BSR set to: 1
  8587                           ;doprnt.c: 759: else
  8588                           ;doprnt.c: 760: width = 0;
  8589  000262  0E00               	movlw	0
  8590  000264  0101               	movlb	1	; () banked
  8591  000266  6F86               	movwf	(printf@width+1)& (0+255),b
  8592  000268  0E00               	movlw	0
  8593  00026A  6F85               	movwf	printf@width& (0+255),b
  8594  00026C  D000               	goto	l6511
  8595  00026E                     l6511:
  8596                           
  8597                           ; BSR set to: 1
  8598                           ;doprnt.c: 762: if(!(flag & 0x08))
  8599  00026E  0101               	movlb	1	; () banked
  8600  000270  A788               	btfss	printf@flag& (0+255),3,b
  8601  000272  D006               	goto	l6517
  8602  000274  D01D               	goto	l6523
  8603                           
  8604                           ; BSR set to: 1
  8605                           ;doprnt.c: 764: while(width--)
  8606  000276  D004               	goto	l6517
  8607  000278                     l6515:
  8608                           
  8609                           ; BSR set to: 1
  8610                           ;doprnt.c: 765: (putch(' ') );
  8611  000278  0E20               	movlw	32
  8612  00027A  EC0C  F015         	call	_putch
  8613  00027E  D000               	goto	l6517
  8614  000280                     l6517:
  8615  000280  0101               	movlb	1	; () banked
  8616  000282  0785               	decf	printf@width& (0+255),f,b
  8617  000284  A0D8               	btfss	status,0,c
  8618  000286  0786               	decf	(printf@width+1)& (0+255),f,b
  8619  000288  0101               	movlb	1	; () banked
  8620  00028A  2985               	incf	printf@width& (0+255),w,b
  8621  00028C  E1F5               	bnz	l6515
  8622  00028E  0101               	movlb	1	; () banked
  8623  000290  2986               	incf	(printf@width+1)& (0+255),w,b
  8624  000292  B4D8               	btfsc	status,2,c
  8625  000294  D00D               	goto	l6523
  8626  000296  D7F0               	goto	l6515
  8627                           
  8628                           ; BSR set to: 1
  8629                           ;doprnt.c: 767: while(len--)
  8630                           
  8631                           ; BSR set to: 1
  8632  000298  D00B               	goto	l6523
  8633  00029A                     l6519:
  8634                           
  8635                           ; BSR set to: 1
  8636                           ;doprnt.c: 768: (putch(*cp++) );
  8637  00029A  C176  FFD9         	movff	printf@cp,fsr2l
  8638  00029E  C177  FFDA         	movff	printf@cp+1,fsr2h
  8639  0002A2  50DF               	movf	indf2,w,c
  8640  0002A4  EC0C  F015         	call	_putch
  8641  0002A8  0101               	movlb	1	; () banked
  8642  0002AA  4B76               	infsnz	printf@cp& (0+255),f,b
  8643  0002AC  2B77               	incf	(printf@cp+1)& (0+255),f,b
  8644  0002AE  D000               	goto	l6523
  8645  0002B0                     l6523:
  8646                           
  8647                           ; BSR set to: 1
  8648  0002B0  0101               	movlb	1	; () banked
  8649  0002B2  077E               	decf	printf@len& (0+255),f,b
  8650  0002B4  A0D8               	btfss	status,0,c
  8651  0002B6  077F               	decf	(printf@len+1)& (0+255),f,b
  8652  0002B8  0101               	movlb	1	; () banked
  8653  0002BA  297E               	incf	printf@len& (0+255),w,b
  8654  0002BC  E1EE               	bnz	l6519
  8655  0002BE  0101               	movlb	1	; () banked
  8656  0002C0  297F               	incf	(printf@len+1)& (0+255),w,b
  8657  0002C2  A4D8               	btfss	status,2,c
  8658  0002C4  D7EA               	goto	l6519
  8659                           
  8660                           ; BSR set to: 1
  8661                           ;doprnt.c: 770: if(flag & 0x08)
  8662  0002C6  0101               	movlb	1	; () banked
  8663  0002C8  B788               	btfsc	printf@flag& (0+255),3,b
  8664  0002CA  D006               	goto	l6529
  8665  0002CC  D343               	goto	l6739
  8666                           
  8667                           ; BSR set to: 1
  8668                           ;doprnt.c: 771: while(width--)
  8669  0002CE  D004               	goto	l6529
  8670  0002D0                     l6527:
  8671                           
  8672                           ; BSR set to: 1
  8673                           ;doprnt.c: 772: (putch(' ') );
  8674  0002D0  0E20               	movlw	32
  8675  0002D2  EC0C  F015         	call	_putch
  8676  0002D6  D000               	goto	l6529
  8677  0002D8                     l6529:
  8678  0002D8  0101               	movlb	1	; () banked
  8679  0002DA  0785               	decf	printf@width& (0+255),f,b
  8680  0002DC  A0D8               	btfss	status,0,c
  8681  0002DE  0786               	decf	(printf@width+1)& (0+255),f,b
  8682  0002E0  0101               	movlb	1	; () banked
  8683  0002E2  2985               	incf	printf@width& (0+255),w,b
  8684  0002E4  E1F5               	bnz	l6527
  8685  0002E6  0101               	movlb	1	; () banked
  8686  0002E8  2986               	incf	(printf@width+1)& (0+255),w,b
  8687  0002EA  B4D8               	btfsc	status,2,c
  8688  0002EC  D333               	goto	l6739
  8689  0002EE  D7F0               	goto	l6527
  8690                           
  8691                           ; BSR set to: 1
  8692                           ;doprnt.c: 774: continue;
  8693                           
  8694                           ; BSR set to: 1
  8695  0002F0  D331               	goto	l6739
  8696  0002F2                     l6531:
  8697                           
  8698                           ; BSR set to: 1
  8699                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8700  0002F2  C180  FFD9         	movff	printf@ap,fsr2l
  8701  0002F6  C181  FFDA         	movff	printf@ap+1,fsr2h
  8702  0002FA  50DF               	movf	indf2,w,c
  8703  0002FC  0101               	movlb	1	; () banked
  8704  0002FE  6F87               	movwf	printf@c& (0+255),b
  8705                           
  8706                           ; BSR set to: 1
  8707  000300  0E02               	movlw	2
  8708  000302  0101               	movlb	1	; () banked
  8709  000304  2780               	addwf	printf@ap& (0+255),f,b
  8710  000306  0E00               	movlw	0
  8711  000308  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8712  00030A  D000               	goto	l6535
  8713  00030C                     l6535:
  8714                           
  8715                           ; BSR set to: 1
  8716                           ;doprnt.c: 805: cp = (char *)&c;
  8717  00030C  0E87               	movlw	low printf@c
  8718  00030E  0101               	movlb	1	; () banked
  8719  000310  6F76               	movwf	printf@cp& (0+255),b
  8720  000312  0E01               	movlw	high printf@c
  8721  000314  0101               	movlb	1	; () banked
  8722  000316  6F77               	movwf	(printf@cp+1)& (0+255),b
  8723                           
  8724                           ; BSR set to: 1
  8725                           ;doprnt.c: 806: len = 1;
  8726  000318  0E00               	movlw	0
  8727  00031A  0101               	movlb	1	; () banked
  8728  00031C  6F7F               	movwf	(printf@len+1)& (0+255),b
  8729  00031E  0E01               	movlw	1
  8730  000320  6F7E               	movwf	printf@len& (0+255),b
  8731                           
  8732                           ;doprnt.c: 807: goto dostring;
  8733  000322  D772               	goto	l6499
  8734  000324                     l6539:
  8735                           
  8736                           ; BSR set to: 1
  8737                           ;doprnt.c: 818: flag |= 0xC0;
  8738  000324  0EC0               	movlw	192
  8739  000326  0101               	movlb	1	; () banked
  8740  000328  1388               	iorwf	printf@flag& (0+255),f,b
  8741                           
  8742                           ; BSR set to: 1
  8743                           ;doprnt.c: 822: }
  8744                           
  8745                           ;doprnt.c: 819: break;
  8746  00032A  D024               	goto	l6545
  8747  00032C                     l6543:
  8748  00032C  C01D  FFF6         	movff	printf@f,tblptrl
  8749  000330  C01E  FFF7         	movff	printf@f+1,tblptrh
  8750  000334  4A1D               	infsnz	printf@f,f,c
  8751  000336  2A1E               	incf	printf@f+1,f,c
  8752  000338                     	if	0	;tblptru may be non-zero
  8753  000338                     	endif
  8754  000338                     	if	0	;tblptru may be non-zero
  8755  000338                     	endif
  8756  000338  0008               	tblrd		*
  8757  00033A  CFF5 F187          	movff	tablat,printf@c
  8758  00033E  0101               	movlb	1	; () banked
  8759  000340  5187               	movf	printf@c& (0+255),w,b
  8760                           
  8761                           ; Switch size 1, requested type "space"
  8762                           ; Number of cases is 8, Range of values is 0 to 120
  8763                           ; switch strategies available:
  8764                           ; Name         Instructions Cycles
  8765                           ; simple_byte           25    13 (average)
  8766                           ;	Chosen strategy is simple_byte
  8767  000342  0A00               	xorlw	0	; case 0
  8768  000344  B4D8               	btfsc	status,2,c
  8769  000346  D316               	goto	l941
  8770  000348  0A58               	xorlw	88	; case 88
  8771  00034A  B4D8               	btfsc	status,2,c
  8772  00034C  D758               	goto	l6497
  8773  00034E  0A3B               	xorlw	59	; case 99
  8774  000350  B4D8               	btfsc	status,2,c
  8775  000352  D7CF               	goto	l6531
  8776  000354  0A07               	xorlw	7	; case 100
  8777  000356  B4D8               	btfsc	status,2,c
  8778  000358  D00D               	goto	l6545
  8779  00035A  0A0D               	xorlw	13	; case 105
  8780  00035C  B4D8               	btfsc	status,2,c
  8781  00035E  D00A               	goto	l6545
  8782  000360  0A06               	xorlw	6	; case 111
  8783  000362  B4D8               	btfsc	status,2,c
  8784  000364  D749               	goto	l6495
  8785  000366  0A1A               	xorlw	26	; case 117
  8786  000368  B4D8               	btfsc	status,2,c
  8787  00036A  D7DC               	goto	l6539
  8788  00036C  0A0D               	xorlw	13	; case 120
  8789  00036E  B4D8               	btfsc	status,2,c
  8790  000370  D748               	goto	l844
  8791  000372  D7CC               	goto	l6535
  8792  000374                     l6545:
  8793                           
  8794                           ; BSR set to: 1
  8795                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8796  000374  0EC0               	movlw	192
  8797  000376  0101               	movlb	1	; () banked
  8798  000378  1588               	andwf	printf@flag& (0+255),w,b
  8799  00037A  6E2B               	movwf	??_printf& (0+255),c
  8800  00037C  0E00               	movlw	0
  8801  00037E  0101               	movlb	1	; () banked
  8802  000380  1589               	andwf	(printf@flag+1)& (0+255),w,b
  8803  000382  6E2C               	movwf	(??_printf+1)& (0+255),c
  8804  000384  502B               	movf	??_printf,w,c
  8805  000386  102C               	iorwf	??_printf+1,w,c
  8806  000388  A4D8               	btfss	status,2,c
  8807  00038A  D019               	goto	l6557
  8808                           
  8809                           ; BSR set to: 1
  8810                           ;doprnt.c: 1253: {
  8811                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8812  00038C  C180  FFD9         	movff	printf@ap,fsr2l
  8813  000390  C181  FFDA         	movff	printf@ap+1,fsr2h
  8814  000394  CFDE F182          	movff	postinc2,printf@val
  8815  000398  CFDD F183          	movff	postdec2,printf@val+1
  8816                           
  8817                           ; BSR set to: 1
  8818  00039C  0E02               	movlw	2
  8819  00039E  0101               	movlb	1	; () banked
  8820  0003A0  2780               	addwf	printf@ap& (0+255),f,b
  8821  0003A2  0E00               	movlw	0
  8822  0003A4  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8823                           
  8824                           ; BSR set to: 1
  8825                           ;doprnt.c: 1261: if((int)val < 0) {
  8826  0003A6  0101               	movlb	1	; () banked
  8827  0003A8  AF83               	btfss	(printf@val+1)& (0+255),7,b
  8828  0003AA  D017               	goto	l6561
  8829                           
  8830                           ; BSR set to: 1
  8831                           ;doprnt.c: 1262: flag |= 0x03;
  8832  0003AC  0E03               	movlw	3
  8833  0003AE  0101               	movlb	1	; () banked
  8834  0003B0  1388               	iorwf	printf@flag& (0+255),f,b
  8835                           
  8836                           ; BSR set to: 1
  8837                           ;doprnt.c: 1263: val = -val;
  8838  0003B2  0101               	movlb	1	; () banked
  8839  0003B4  6D82               	negf	printf@val& (0+255),b
  8840  0003B6  1F83               	comf	(printf@val+1)& (0+255),f,b
  8841  0003B8  B0D8               	btfsc	status,0,c
  8842  0003BA  2B83               	incf	(printf@val+1)& (0+255),f,b
  8843                           
  8844                           ; BSR set to: 1
  8845                           ;doprnt.c: 1264: }
  8846                           ;doprnt.c: 1266: }
  8847  0003BC  D00E               	goto	l6561
  8848  0003BE                     l6557:
  8849                           
  8850                           ; BSR set to: 1
  8851                           ;doprnt.c: 1268: else
  8852                           ;doprnt.c: 1273: {
  8853                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8854  0003BE  C180  FFD9         	movff	printf@ap,fsr2l
  8855  0003C2  C181  FFDA         	movff	printf@ap+1,fsr2h
  8856  0003C6  CFDE F182          	movff	postinc2,printf@val
  8857  0003CA  CFDD F183          	movff	postdec2,printf@val+1
  8858                           
  8859                           ; BSR set to: 1
  8860  0003CE  0E02               	movlw	2
  8861  0003D0  0101               	movlb	1	; () banked
  8862  0003D2  2780               	addwf	printf@ap& (0+255),f,b
  8863  0003D4  0E00               	movlw	0
  8864  0003D6  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8865  0003D8  D000               	goto	l6561
  8866  0003DA                     l6561:
  8867                           
  8868                           ; BSR set to: 1
  8869                           ;doprnt.c: 1287: }
  8870                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8871  0003DA  0101               	movlb	1	; () banked
  8872  0003DC  5184               	movf	printf@prec& (0+255),w,b
  8873  0003DE  0101               	movlb	1	; () banked
  8874  0003E0  A4D8               	btfss	status,2,c
  8875  0003E2  D073               	goto	l6611
  8876                           
  8877                           ; BSR set to: 1
  8878  0003E4  0101               	movlb	1	; () banked
  8879  0003E6  5182               	movf	printf@val& (0+255),w,b
  8880  0003E8  0101               	movlb	1	; () banked
  8881  0003EA  1183               	iorwf	(printf@val+1)& (0+255),w,b
  8882  0003EC  A4D8               	btfss	status,2,c
  8883  0003EE  D06D               	goto	l6611
  8884                           
  8885                           ; BSR set to: 1
  8886                           ;doprnt.c: 1291: prec++;
  8887  0003F0  0101               	movlb	1	; () banked
  8888  0003F2  2B84               	incf	printf@prec& (0+255),f,b
  8889                           
  8890                           ; BSR set to: 1
  8891                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8892  0003F4  D06A               	goto	l6611
  8893                           
  8894                           ; BSR set to: 1
  8895                           
  8896                           ;doprnt.c: 1299: case 0x00:
  8897  0003F6  D000               	goto	l6567
  8898  0003F8                     l6567:
  8899                           
  8900                           ; BSR set to: 1
  8901                           ;doprnt.c: 1302: case 0xC0:
  8902                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8903  0003F8  0E01               	movlw	1
  8904  0003FA  0101               	movlb	1	; () banked
  8905  0003FC  6F87               	movwf	printf@c& (0+255),b
  8906  0003FE                     l6569:
  8907                           
  8908                           ; BSR set to: 1
  8909  0003FE  0E05               	movlw	5
  8910  000400  0101               	movlb	1	; () banked
  8911  000402  1987               	xorwf	printf@c& (0+255),w,b
  8912  000404  B4D8               	btfsc	status,2,c
  8913  000406  D071               	goto	l6613
  8914  000408  D001               	goto	l6573
  8915                           
  8916                           ; BSR set to: 1
  8917  00040A  D06F               	goto	l6613
  8918  00040C                     l6573:
  8919                           
  8920                           ; BSR set to: 1
  8921                           ;doprnt.c: 1306: if(val < dpowers[c])
  8922  00040C  0101               	movlb	1	; () banked
  8923  00040E  5187               	movf	printf@c& (0+255),w,b
  8924  000410  0D02               	mullw	2
  8925  000412  0ED4               	movlw	low _dpowers
  8926  000414  24F3               	addwf	prodl,w,c
  8927  000416  6EF6               	movwf	tblptrl,c
  8928  000418  0EFE               	movlw	high _dpowers
  8929  00041A  20F4               	addwfc	prodh,w,c
  8930  00041C  6EF7               	movwf	tblptrh,c
  8931  00041E                     	if	0	;There are less than 3 active tblptr bytes
  8932  00041E                     	endif
  8933  00041E  0009               	tblrd		*+
  8934  000420  50F5               	movf	tablat,w,c
  8935  000422  0101               	movlb	1	; () banked
  8936  000424  5D82               	subwf	printf@val& (0+255),w,b
  8937  000426  0009               	tblrd		*+
  8938  000428  50F5               	movf	tablat,w,c
  8939  00042A  0101               	movlb	1	; () banked
  8940  00042C  5983               	subwfb	(printf@val+1)& (0+255),w,b
  8941  00042E  A0D8               	btfss	status,0,c
  8942  000430  D05C               	goto	l6613
  8943  000432  D001               	goto	l6577
  8944                           
  8945                           ; BSR set to: 1
  8946                           ;doprnt.c: 1307: break;
  8947  000434  D05A               	goto	l6613
  8948  000436                     l6577:
  8949                           
  8950                           ; BSR set to: 1
  8951  000436  0101               	movlb	1	; () banked
  8952  000438  2B87               	incf	printf@c& (0+255),f,b
  8953  00043A  D7E1               	goto	l6569
  8954                           
  8955                           ; BSR set to: 1
  8956                           ;doprnt.c: 1309: break;
  8957                           
  8958                           ; BSR set to: 1
  8959  00043C  D056               	goto	l6613
  8960  00043E                     l6581:
  8961                           
  8962                           ; BSR set to: 1
  8963                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8964  00043E  0E01               	movlw	1
  8965  000440  0101               	movlb	1	; () banked
  8966  000442  6F87               	movwf	printf@c& (0+255),b
  8967  000444                     l6583:
  8968                           
  8969                           ; BSR set to: 1
  8970  000444  0E04               	movlw	4
  8971  000446  0101               	movlb	1	; () banked
  8972  000448  1987               	xorwf	printf@c& (0+255),w,b
  8973  00044A  B4D8               	btfsc	status,2,c
  8974  00044C  D04E               	goto	l6613
  8975  00044E  D001               	goto	l6587
  8976                           
  8977                           ; BSR set to: 1
  8978  000450  D04C               	goto	l6613
  8979  000452                     l6587:
  8980                           
  8981                           ; BSR set to: 1
  8982                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8983  000452  0101               	movlb	1	; () banked
  8984  000454  5187               	movf	printf@c& (0+255),w,b
  8985  000456  0D02               	mullw	2
  8986  000458  0EDE               	movlw	low _hexpowers
  8987  00045A  24F3               	addwf	prodl,w,c
  8988  00045C  6EF6               	movwf	tblptrl,c
  8989  00045E  0EFE               	movlw	high _hexpowers
  8990  000460  20F4               	addwfc	prodh,w,c
  8991  000462  6EF7               	movwf	tblptrh,c
  8992  000464                     	if	0	;There are less than 3 active tblptr bytes
  8993  000464                     	endif
  8994  000464  0009               	tblrd		*+
  8995  000466  50F5               	movf	tablat,w,c
  8996  000468  0101               	movlb	1	; () banked
  8997  00046A  5D82               	subwf	printf@val& (0+255),w,b
  8998  00046C  0009               	tblrd		*+
  8999  00046E  50F5               	movf	tablat,w,c
  9000  000470  0101               	movlb	1	; () banked
  9001  000472  5983               	subwfb	(printf@val+1)& (0+255),w,b
  9002  000474  A0D8               	btfss	status,0,c
  9003  000476  D039               	goto	l6613
  9004  000478  D001               	goto	l6591
  9005                           
  9006                           ; BSR set to: 1
  9007                           ;doprnt.c: 1318: break;
  9008  00047A  D037               	goto	l6613
  9009  00047C                     l6591:
  9010                           
  9011                           ; BSR set to: 1
  9012  00047C  0101               	movlb	1	; () banked
  9013  00047E  2B87               	incf	printf@c& (0+255),f,b
  9014  000480  D7E1               	goto	l6583
  9015                           
  9016                           ; BSR set to: 1
  9017                           ;doprnt.c: 1320: break;
  9018                           
  9019                           ; BSR set to: 1
  9020  000482  D033               	goto	l6613
  9021  000484                     l6595:
  9022                           
  9023                           ; BSR set to: 1
  9024                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  9025  000484  0E01               	movlw	1
  9026  000486  0101               	movlb	1	; () banked
  9027  000488  6F87               	movwf	printf@c& (0+255),b
  9028  00048A                     l6597:
  9029                           
  9030                           ; BSR set to: 1
  9031  00048A  0E06               	movlw	6
  9032  00048C  0101               	movlb	1	; () banked
  9033  00048E  1987               	xorwf	printf@c& (0+255),w,b
  9034  000490  B4D8               	btfsc	status,2,c
  9035  000492  D02B               	goto	l6613
  9036  000494  D001               	goto	l6601
  9037                           
  9038                           ; BSR set to: 1
  9039  000496  D029               	goto	l6613
  9040  000498                     l6601:
  9041                           
  9042                           ; BSR set to: 1
  9043                           ;doprnt.c: 1329: if(val < octpowers[c])
  9044  000498  0101               	movlb	1	; () banked
  9045  00049A  5187               	movf	printf@c& (0+255),w,b
  9046  00049C  0D02               	mullw	2
  9047  00049E  0EC8               	movlw	low _octpowers
  9048  0004A0  24F3               	addwf	prodl,w,c
  9049  0004A2  6EF6               	movwf	tblptrl,c
  9050  0004A4  0EFE               	movlw	high _octpowers
  9051  0004A6  20F4               	addwfc	prodh,w,c
  9052  0004A8  6EF7               	movwf	tblptrh,c
  9053  0004AA                     	if	0	;There are less than 3 active tblptr bytes
  9054  0004AA                     	endif
  9055  0004AA  0009               	tblrd		*+
  9056  0004AC  50F5               	movf	tablat,w,c
  9057  0004AE  0101               	movlb	1	; () banked
  9058  0004B0  5D82               	subwf	printf@val& (0+255),w,b
  9059  0004B2  0009               	tblrd		*+
  9060  0004B4  50F5               	movf	tablat,w,c
  9061  0004B6  0101               	movlb	1	; () banked
  9062  0004B8  5983               	subwfb	(printf@val+1)& (0+255),w,b
  9063  0004BA  A0D8               	btfss	status,0,c
  9064  0004BC  D016               	goto	l6613
  9065  0004BE  D001               	goto	l6605
  9066                           
  9067                           ; BSR set to: 1
  9068                           ;doprnt.c: 1330: break;
  9069  0004C0  D014               	goto	l6613
  9070  0004C2                     l6605:
  9071                           
  9072                           ; BSR set to: 1
  9073  0004C2  0101               	movlb	1	; () banked
  9074  0004C4  2B87               	incf	printf@c& (0+255),f,b
  9075  0004C6  D7E1               	goto	l6597
  9076                           
  9077                           ; BSR set to: 1
  9078                           ;doprnt.c: 1336: }
  9079                           
  9080                           ; BSR set to: 1
  9081                           ;doprnt.c: 1332: break;
  9082                           
  9083                           ; BSR set to: 1
  9084  0004C8  D010               	goto	l6613
  9085  0004CA                     l6611:
  9086                           
  9087                           ; BSR set to: 1
  9088  0004CA  0101               	movlb	1	; () banked
  9089  0004CC  5188               	movf	printf@flag& (0+255),w,b
  9090  0004CE  0BC0               	andlw	192
  9091                           
  9092                           ; Switch size 1, requested type "space"
  9093                           ; Number of cases is 4, Range of values is 0 to 192
  9094                           ; switch strategies available:
  9095                           ; Name         Instructions Cycles
  9096                           ; simple_byte           13     7 (average)
  9097                           ;	Chosen strategy is simple_byte
  9098  0004D0  0A00               	xorlw	0	; case 0
  9099  0004D2  B4D8               	btfsc	status,2,c
  9100  0004D4  D791               	goto	l6567
  9101  0004D6  0A40               	xorlw	64	; case 64
  9102  0004D8  B4D8               	btfsc	status,2,c
  9103  0004DA  D7D4               	goto	l6595
  9104  0004DC  0AC0               	xorlw	192	; case 128
  9105  0004DE  B4D8               	btfsc	status,2,c
  9106  0004E0  D7AE               	goto	l6581
  9107  0004E2  0A40               	xorlw	64	; case 192
  9108  0004E4  B4D8               	btfsc	status,2,c
  9109  0004E6  D788               	goto	l6567
  9110  0004E8  D000               	goto	l6613
  9111  0004EA                     l6613:
  9112                           
  9113                           ; BSR set to: 1
  9114                           ;doprnt.c: 1339: if(c < prec)
  9115  0004EA  0101               	movlb	1	; () banked
  9116  0004EC  5187               	movf	printf@c& (0+255),w,b
  9117  0004EE  0A80               	xorlw	128
  9118  0004F0  6E2B               	movwf	??_printf& (0+255),c
  9119  0004F2  0101               	movlb	1	; () banked
  9120  0004F4  5184               	movf	printf@prec& (0+255),w,b
  9121  0004F6  0A80               	xorlw	128
  9122  0004F8  5C2B               	subwf	??_printf& (0+255),w,c
  9123  0004FA  B0D8               	btfsc	status,0,c
  9124  0004FC  D003               	goto	l6617
  9125                           
  9126                           ; BSR set to: 1
  9127                           ;doprnt.c: 1340: c = prec;
  9128  0004FE  C184  F187         	movff	printf@prec,printf@c
  9129  000502  D00D               	goto	l6621
  9130  000504                     l6617:
  9131                           
  9132                           ; BSR set to: 1
  9133                           ;doprnt.c: 1341: else if(prec < c)
  9134  000504  0101               	movlb	1	; () banked
  9135  000506  5184               	movf	printf@prec& (0+255),w,b
  9136  000508  0A80               	xorlw	128
  9137  00050A  6E2B               	movwf	??_printf& (0+255),c
  9138  00050C  0101               	movlb	1	; () banked
  9139  00050E  5187               	movf	printf@c& (0+255),w,b
  9140  000510  0A80               	xorlw	128
  9141  000512  5C2B               	subwf	??_printf& (0+255),w,c
  9142  000514  B0D8               	btfsc	status,0,c
  9143  000516  D003               	goto	l6621
  9144                           
  9145                           ; BSR set to: 1
  9146                           ;doprnt.c: 1342: prec = c;
  9147  000518  C187  F184         	movff	printf@c,printf@prec
  9148                           
  9149                           ; BSR set to: 1
  9150  00051C  D000               	goto	l6621
  9151  00051E                     l6621:
  9152                           
  9153                           ; BSR set to: 1
  9154                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9155  00051E  0101               	movlb	1	; () banked
  9156  000520  5185               	movf	printf@width& (0+255),w,b
  9157  000522  0101               	movlb	1	; () banked
  9158  000524  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9159  000526  B4D8               	btfsc	status,2,c
  9160  000528  D011               	goto	l6627
  9161                           
  9162                           ; BSR set to: 1
  9163  00052A  0E03               	movlw	3
  9164  00052C  0101               	movlb	1	; () banked
  9165  00052E  1588               	andwf	printf@flag& (0+255),w,b
  9166  000530  6E2B               	movwf	??_printf& (0+255),c
  9167  000532  0E00               	movlw	0
  9168  000534  0101               	movlb	1	; () banked
  9169  000536  1589               	andwf	(printf@flag+1)& (0+255),w,b
  9170  000538  6E2C               	movwf	(??_printf+1)& (0+255),c
  9171  00053A  502B               	movf	??_printf,w,c
  9172  00053C  102C               	iorwf	??_printf+1,w,c
  9173  00053E  B4D8               	btfsc	status,2,c
  9174  000540  D005               	goto	l6627
  9175                           
  9176                           ; BSR set to: 1
  9177                           ;doprnt.c: 1346: width--;
  9178  000542  0101               	movlb	1	; () banked
  9179  000544  0785               	decf	printf@width& (0+255),f,b
  9180  000546  A0D8               	btfss	status,0,c
  9181  000548  0786               	decf	(printf@width+1)& (0+255),f,b
  9182  00054A  D000               	goto	l6627
  9183  00054C                     l6627:
  9184                           
  9185                           ; BSR set to: 1
  9186                           ;doprnt.c: 1348: if(flag & 0x4000) {
  9187  00054C  0101               	movlb	1	; () banked
  9188  00054E  AD89               	btfss	(printf@flag+1)& (0+255),6,b
  9189  000550  D020               	goto	l6635
  9190                           
  9191                           ; BSR set to: 1
  9192                           ;doprnt.c: 1349: if(width > prec)
  9193  000552  0E80               	movlw	128
  9194  000554  0101               	movlb	1	; () banked
  9195  000556  BF84               	btfsc	printf@prec& (0+255),7,b
  9196  000558  0E7F               	movlw	127
  9197  00055A  6E2B               	movwf	??_printf& (0+255),c
  9198  00055C  0101               	movlb	1	; () banked
  9199  00055E  5185               	movf	printf@width& (0+255),w,b
  9200  000560  0101               	movlb	1	; () banked
  9201  000562  5D84               	subwf	printf@prec& (0+255),w,b
  9202  000564  0101               	movlb	1	; () banked
  9203  000566  5186               	movf	(printf@width+1)& (0+255),w,b
  9204  000568  0A80               	xorlw	128
  9205  00056A  582B               	subwfb	??_printf& (0+255),w,c
  9206  00056C  B0D8               	btfsc	status,0,c
  9207  00056E  D00B               	goto	l6633
  9208                           
  9209                           ; BSR set to: 1
  9210                           ;doprnt.c: 1350: width -= prec;
  9211  000570  0101               	movlb	1	; () banked
  9212  000572  5184               	movf	printf@prec& (0+255),w,b
  9213  000574  0101               	movlb	1	; () banked
  9214  000576  5F85               	subwf	printf@width& (0+255),f,b
  9215  000578  0E00               	movlw	0
  9216  00057A  0101               	movlb	1	; () banked
  9217  00057C  BF84               	btfsc	printf@prec& (0+255),7,b
  9218  00057E  0EFF               	movlw	255
  9219  000580  0101               	movlb	1	; () banked
  9220  000582  5B86               	subwfb	(printf@width+1)& (0+255),f,b
  9221  000584  D006               	goto	l6635
  9222  000586                     l6633:
  9223                           
  9224                           ; BSR set to: 1
  9225                           ;doprnt.c: 1351: else
  9226                           ;doprnt.c: 1352: width = 0;
  9227  000586  0E00               	movlw	0
  9228  000588  0101               	movlb	1	; () banked
  9229  00058A  6F86               	movwf	(printf@width+1)& (0+255),b
  9230  00058C  0E00               	movlw	0
  9231  00058E  6F85               	movwf	printf@width& (0+255),b
  9232                           
  9233                           ; BSR set to: 1
  9234  000590  D000               	goto	l6635
  9235  000592                     l6635:
  9236                           
  9237                           ; BSR set to: 1
  9238                           ;doprnt.c: 1353: }
  9239                           ;doprnt.c: 1357: if((flag & (
  9240                           ;doprnt.c: 1359: 0x04|
  9241                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  9242  000592  0EC4               	movlw	196
  9243  000594  6E2B               	movwf	??_printf& (0+255),c
  9244  000596  0E08               	movlw	8
  9245  000598  6E2C               	movwf	(??_printf+1)& (0+255),c
  9246  00059A  C188  F02D         	movff	printf@flag,??_printf+2
  9247  00059E  C189  F02E         	movff	printf@flag+1,??_printf+3
  9248  0005A2  502B               	movf	??_printf,w,c
  9249  0005A4  162D               	andwf	??_printf+2,f,c
  9250  0005A6  502C               	movf	??_printf+1,w,c
  9251  0005A8  162E               	andwf	??_printf+3,f,c
  9252  0005AA  0E40               	movlw	64
  9253  0005AC  182D               	xorwf	??_printf+2,w,c
  9254  0005AE  E10F               	bnz	l6641
  9255  0005B0  0E08               	movlw	8
  9256  0005B2  182E               	xorwf	??_printf+3,w,c
  9257  0005B4  A4D8               	btfss	status,2,c
  9258  0005B6  D00B               	goto	l6641
  9259                           
  9260                           ; BSR set to: 1
  9261                           ;doprnt.c: 1362: if(width)
  9262  0005B8  0101               	movlb	1	; () banked
  9263  0005BA  5185               	movf	printf@width& (0+255),w,b
  9264  0005BC  0101               	movlb	1	; () banked
  9265  0005BE  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9266  0005C0  B4D8               	btfsc	status,2,c
  9267  0005C2  D02F               	goto	l6649
  9268                           
  9269                           ; BSR set to: 1
  9270                           ;doprnt.c: 1363: width--;
  9271  0005C4  0101               	movlb	1	; () banked
  9272  0005C6  0785               	decf	printf@width& (0+255),f,b
  9273  0005C8  A0D8               	btfss	status,0,c
  9274  0005CA  0786               	decf	(printf@width+1)& (0+255),f,b
  9275                           
  9276                           ; BSR set to: 1
  9277                           ;doprnt.c: 1364: } else
  9278  0005CC  D02A               	goto	l6649
  9279  0005CE                     l6641:
  9280                           
  9281                           ; BSR set to: 1
  9282                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9283  0005CE  0EC0               	movlw	192
  9284  0005D0  6E2B               	movwf	??_printf& (0+255),c
  9285  0005D2  0E08               	movlw	8
  9286  0005D4  6E2C               	movwf	(??_printf+1)& (0+255),c
  9287  0005D6  C188  F02D         	movff	printf@flag,??_printf+2
  9288  0005DA  C189  F02E         	movff	printf@flag+1,??_printf+3
  9289  0005DE  502B               	movf	??_printf,w,c
  9290  0005E0  162D               	andwf	??_printf+2,f,c
  9291  0005E2  502C               	movf	??_printf+1,w,c
  9292  0005E4  162E               	andwf	??_printf+3,f,c
  9293  0005E6  0E80               	movlw	128
  9294  0005E8  182D               	xorwf	??_printf+2,w,c
  9295  0005EA  E11B               	bnz	l6649
  9296  0005EC  0E08               	movlw	8
  9297  0005EE  182E               	xorwf	??_printf+3,w,c
  9298  0005F0  A4D8               	btfss	status,2,c
  9299  0005F2  D017               	goto	l6649
  9300                           
  9301                           ; BSR set to: 1
  9302                           ;doprnt.c: 1372: if(width > 2)
  9303  0005F4  0101               	movlb	1	; () banked
  9304  0005F6  BF86               	btfsc	(printf@width+1)& (0+255),7,b
  9305  0005F8  D00E               	goto	l6647
  9306  0005FA  0101               	movlb	1	; () banked
  9307  0005FC  5186               	movf	(printf@width+1)& (0+255),w,b
  9308  0005FE  E105               	bnz	u5640
  9309  000600  0E03               	movlw	3
  9310  000602  0101               	movlb	1	; () banked
  9311  000604  5D85               	subwf	printf@width& (0+255),w,b
  9312  000606  A0D8               	btfss	status,0,c
  9313  000608  D006               	goto	l6647
  9314  00060A                     u5640:
  9315                           
  9316                           ; BSR set to: 1
  9317                           ;doprnt.c: 1373: width -= 2;
  9318  00060A  0101               	movlb	1	; () banked
  9319  00060C  0EFE               	movlw	254
  9320  00060E  2785               	addwf	printf@width& (0+255),f,b
  9321  000610  0EFF               	movlw	255
  9322  000612  2386               	addwfc	(printf@width+1)& (0+255),f,b
  9323  000614  D006               	goto	l6649
  9324  000616                     l6647:
  9325                           
  9326                           ; BSR set to: 1
  9327                           ;doprnt.c: 1374: else
  9328                           ;doprnt.c: 1375: width = 0;
  9329  000616  0E00               	movlw	0
  9330  000618  0101               	movlb	1	; () banked
  9331  00061A  6F86               	movwf	(printf@width+1)& (0+255),b
  9332  00061C  0E00               	movlw	0
  9333  00061E  6F85               	movwf	printf@width& (0+255),b
  9334                           
  9335                           ; BSR set to: 1
  9336                           
  9337                           ; BSR set to: 1
  9338  000620  D000               	goto	l6649
  9339  000622                     l6649:
  9340                           
  9341                           ; BSR set to: 1
  9342                           ;doprnt.c: 1376: }
  9343                           ;doprnt.c: 1381: if(width > c)
  9344  000622  0E80               	movlw	128
  9345  000624  0101               	movlb	1	; () banked
  9346  000626  BF87               	btfsc	printf@c& (0+255),7,b
  9347  000628  0E7F               	movlw	127
  9348  00062A  6E2B               	movwf	??_printf& (0+255),c
  9349  00062C  0101               	movlb	1	; () banked
  9350  00062E  5185               	movf	printf@width& (0+255),w,b
  9351  000630  0101               	movlb	1	; () banked
  9352  000632  5D87               	subwf	printf@c& (0+255),w,b
  9353  000634  0101               	movlb	1	; () banked
  9354  000636  5186               	movf	(printf@width+1)& (0+255),w,b
  9355  000638  0A80               	xorlw	128
  9356  00063A  582B               	subwfb	??_printf& (0+255),w,c
  9357  00063C  B0D8               	btfsc	status,0,c
  9358  00063E  D00B               	goto	l6653
  9359                           
  9360                           ; BSR set to: 1
  9361                           ;doprnt.c: 1382: width -= c;
  9362  000640  0101               	movlb	1	; () banked
  9363  000642  5187               	movf	printf@c& (0+255),w,b
  9364  000644  0101               	movlb	1	; () banked
  9365  000646  5F85               	subwf	printf@width& (0+255),f,b
  9366  000648  0E00               	movlw	0
  9367  00064A  0101               	movlb	1	; () banked
  9368  00064C  BF87               	btfsc	printf@c& (0+255),7,b
  9369  00064E  0EFF               	movlw	255
  9370  000650  0101               	movlb	1	; () banked
  9371  000652  5B86               	subwfb	(printf@width+1)& (0+255),f,b
  9372  000654  D006               	goto	l6655
  9373  000656                     l6653:
  9374                           
  9375                           ; BSR set to: 1
  9376                           ;doprnt.c: 1383: else
  9377                           ;doprnt.c: 1384: width = 0;
  9378  000656  0E00               	movlw	0
  9379  000658  0101               	movlb	1	; () banked
  9380  00065A  6F86               	movwf	(printf@width+1)& (0+255),b
  9381  00065C  0E00               	movlw	0
  9382  00065E  6F85               	movwf	printf@width& (0+255),b
  9383  000660  D000               	goto	l6655
  9384  000662                     l6655:
  9385                           
  9386                           ; BSR set to: 1
  9387                           ;doprnt.c: 1387: if(flag & 0x04) {
  9388  000662  0101               	movlb	1	; () banked
  9389  000664  A588               	btfss	printf@flag& (0+255),2,b
  9390  000666  D055               	goto	l6681
  9391                           
  9392                           ; BSR set to: 1
  9393                           ;doprnt.c: 1392: if(flag & 0x03)
  9394  000668  0E03               	movlw	3
  9395  00066A  0101               	movlb	1	; () banked
  9396  00066C  1588               	andwf	printf@flag& (0+255),w,b
  9397  00066E  6E2B               	movwf	??_printf& (0+255),c
  9398  000670  0E00               	movlw	0
  9399  000672  0101               	movlb	1	; () banked
  9400  000674  1589               	andwf	(printf@flag+1)& (0+255),w,b
  9401  000676  6E2C               	movwf	(??_printf+1)& (0+255),c
  9402  000678  502B               	movf	??_printf,w,c
  9403  00067A  102C               	iorwf	??_printf+1,w,c
  9404  00067C  B4D8               	btfsc	status,2,c
  9405  00067E  D004               	goto	l898
  9406                           
  9407                           ; BSR set to: 1
  9408                           ;doprnt.c: 1393: (putch('-') );
  9409  000680  0E2D               	movlw	45
  9410  000682  EC0C  F015         	call	_putch
  9411  000686  D030               	goto	l6675
  9412  000688                     l898:
  9413                           
  9414                           ; BSR set to: 1
  9415                           ;doprnt.c: 1396: else
  9416                           ;doprnt.c: 1399: if(flag & 0x01)
  9417  000688  0101               	movlb	1	; () banked
  9418  00068A  A188               	btfss	printf@flag& (0+255),0,b
  9419  00068C  D004               	goto	l6663
  9420                           
  9421                           ; BSR set to: 1
  9422                           ;doprnt.c: 1400: (putch(' ') );
  9423  00068E  0E20               	movlw	32
  9424  000690  EC0C  F015         	call	_putch
  9425  000694  D029               	goto	l6675
  9426  000696                     l6663:
  9427                           
  9428                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9429  000696  0EC0               	movlw	192
  9430  000698  6E2B               	movwf	??_printf& (0+255),c
  9431  00069A  0E08               	movlw	8
  9432  00069C  6E2C               	movwf	(??_printf+1)& (0+255),c
  9433  00069E  C188  F02D         	movff	printf@flag,??_printf+2
  9434  0006A2  C189  F02E         	movff	printf@flag+1,??_printf+3
  9435  0006A6  502B               	movf	??_printf,w,c
  9436  0006A8  162D               	andwf	??_printf+2,f,c
  9437  0006AA  502C               	movf	??_printf+1,w,c
  9438  0006AC  162E               	andwf	??_printf+3,f,c
  9439  0006AE  0E80               	movlw	128
  9440  0006B0  182D               	xorwf	??_printf+2,w,c
  9441  0006B2  E11A               	bnz	l6675
  9442  0006B4  0E08               	movlw	8
  9443  0006B6  182E               	xorwf	??_printf+3,w,c
  9444  0006B8  A4D8               	btfss	status,2,c
  9445  0006BA  D016               	goto	l6675
  9446                           
  9447                           ;doprnt.c: 1404: (putch('0') );
  9448  0006BC  0E30               	movlw	48
  9449  0006BE  EC0C  F015         	call	_putch
  9450                           
  9451                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  9452  0006C2  0101               	movlb	1	; () banked
  9453  0006C4  BB88               	btfsc	printf@flag& (0+255),5,b
  9454  0006C6  D005               	goto	l6671
  9455                           
  9456                           ; BSR set to: 1
  9457  0006C8  0E00               	movlw	0
  9458  0006CA  0101               	movlb	1	; () banked
  9459  0006CC  6F79               	movwf	(_printf$1771+1)& (0+255),b
  9460  0006CE  0E78               	movlw	120
  9461  0006D0  D004               	goto	L8
  9462  0006D2                     l6671:
  9463                           
  9464                           ; BSR set to: 1
  9465  0006D2  0E00               	movlw	0
  9466  0006D4  0101               	movlb	1	; () banked
  9467  0006D6  6F79               	movwf	(_printf$1771+1)& (0+255),b
  9468  0006D8  0E58               	movlw	88
  9469  0006DA                     L8:
  9470  0006DA  6F78               	movwf	_printf$1771& (0+255),b
  9471  0006DC  D000               	goto	l6673
  9472  0006DE                     l6673:
  9473                           
  9474                           ; BSR set to: 1
  9475  0006DE  0101               	movlb	1	; () banked
  9476  0006E0  5178               	movf	_printf$1771& (0+255),w,b
  9477  0006E2  EC0C  F015         	call	_putch
  9478  0006E6  D000               	goto	l6675
  9479  0006E8                     l6675:
  9480                           
  9481                           ;doprnt.c: 1412: }
  9482                           ;doprnt.c: 1415: if(width)
  9483  0006E8  0101               	movlb	1	; () banked
  9484  0006EA  5185               	movf	printf@width& (0+255),w,b
  9485  0006EC  0101               	movlb	1	; () banked
  9486  0006EE  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9487  0006F0  B4D8               	btfsc	status,2,c
  9488  0006F2  D10C               	goto	l6731
  9489  0006F4                     l6677:
  9490                           
  9491                           ; BSR set to: 1
  9492                           ;doprnt.c: 1417: (putch('0') );
  9493  0006F4  0E30               	movlw	48
  9494  0006F6  EC0C  F015         	call	_putch
  9495                           
  9496                           ;doprnt.c: 1418: while(--width);
  9497  0006FA  0101               	movlb	1	; () banked
  9498  0006FC  0785               	decf	printf@width& (0+255),f,b
  9499  0006FE  A0D8               	btfss	status,0,c
  9500  000700  0786               	decf	(printf@width+1)& (0+255),f,b
  9501  000702  0101               	movlb	1	; () banked
  9502  000704  5185               	movf	printf@width& (0+255),w,b
  9503  000706  0101               	movlb	1	; () banked
  9504  000708  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9505  00070A  B4D8               	btfsc	status,2,c
  9506  00070C  D0FF               	goto	l6731
  9507  00070E  D7F2               	goto	l6677
  9508                           
  9509                           ; BSR set to: 1
  9510                           ;doprnt.c: 1420: } else
  9511                           
  9512                           ; BSR set to: 1
  9513  000710  D0FD               	goto	l6731
  9514  000712                     l6681:
  9515                           
  9516                           ; BSR set to: 1
  9517                           ;doprnt.c: 1422: {
  9518                           ;doprnt.c: 1424: if(width
  9519                           ;doprnt.c: 1426: && !(flag & 0x08)
  9520                           ;doprnt.c: 1428: )
  9521  000712  0101               	movlb	1	; () banked
  9522  000714  5185               	movf	printf@width& (0+255),w,b
  9523  000716  0101               	movlb	1	; () banked
  9524  000718  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9525  00071A  B4D8               	btfsc	status,2,c
  9526  00071C  D012               	goto	l6689
  9527                           
  9528                           ; BSR set to: 1
  9529  00071E  0101               	movlb	1	; () banked
  9530  000720  B788               	btfsc	printf@flag& (0+255),3,b
  9531  000722  D00F               	goto	l6689
  9532  000724                     l6685:
  9533                           
  9534                           ; BSR set to: 1
  9535                           ;doprnt.c: 1430: (putch(' ') );
  9536  000724  0E20               	movlw	32
  9537  000726  EC0C  F015         	call	_putch
  9538                           
  9539                           ;doprnt.c: 1431: while(--width);
  9540  00072A  0101               	movlb	1	; () banked
  9541  00072C  0785               	decf	printf@width& (0+255),f,b
  9542  00072E  A0D8               	btfss	status,0,c
  9543  000730  0786               	decf	(printf@width+1)& (0+255),f,b
  9544  000732  0101               	movlb	1	; () banked
  9545  000734  5185               	movf	printf@width& (0+255),w,b
  9546  000736  0101               	movlb	1	; () banked
  9547  000738  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9548  00073A  B4D8               	btfsc	status,2,c
  9549  00073C  D002               	goto	l6689
  9550  00073E  D7F2               	goto	l6685
  9551                           
  9552                           ; BSR set to: 1
  9553  000740  D000               	goto	l6689
  9554  000742                     l6689:
  9555                           
  9556                           ; BSR set to: 1
  9557                           ;doprnt.c: 1438: if(flag & 0x03)
  9558  000742  0E03               	movlw	3
  9559  000744  0101               	movlb	1	; () banked
  9560  000746  1588               	andwf	printf@flag& (0+255),w,b
  9561  000748  6E2B               	movwf	??_printf& (0+255),c
  9562  00074A  0E00               	movlw	0
  9563  00074C  0101               	movlb	1	; () banked
  9564  00074E  1589               	andwf	(printf@flag+1)& (0+255),w,b
  9565  000750  6E2C               	movwf	(??_printf+1)& (0+255),c
  9566  000752  502B               	movf	??_printf,w,c
  9567  000754  102C               	iorwf	??_printf+1,w,c
  9568  000756  B4D8               	btfsc	status,2,c
  9569  000758  D004               	goto	l914
  9570                           
  9571                           ; BSR set to: 1
  9572                           ;doprnt.c: 1439: (putch('-') );
  9573  00075A  0E2D               	movlw	45
  9574  00075C  EC0C  F015         	call	_putch
  9575  000760  D007               	goto	l6695
  9576  000762                     l914:
  9577                           
  9578                           ; BSR set to: 1
  9579                           ;doprnt.c: 1443: else if(flag & 0x01)
  9580  000762  0101               	movlb	1	; () banked
  9581  000764  A188               	btfss	printf@flag& (0+255),0,b
  9582  000766  D004               	goto	l6695
  9583                           
  9584                           ; BSR set to: 1
  9585                           ;doprnt.c: 1444: (putch(' ') );
  9586  000768  0E20               	movlw	32
  9587  00076A  EC0C  F015         	call	_putch
  9588  00076E  D000               	goto	l6695
  9589  000770                     l6695:
  9590                           
  9591                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  9592  000770  0EC0               	movlw	192
  9593  000772  6E2B               	movwf	??_printf& (0+255),c
  9594  000774  0E08               	movlw	8
  9595  000776  6E2C               	movwf	(??_printf+1)& (0+255),c
  9596  000778  C188  F02D         	movff	printf@flag,??_printf+2
  9597  00077C  C189  F02E         	movff	printf@flag+1,??_printf+3
  9598  000780  502B               	movf	??_printf,w,c
  9599  000782  162D               	andwf	??_printf+2,f,c
  9600  000784  502C               	movf	??_printf+1,w,c
  9601  000786  162E               	andwf	??_printf+3,f,c
  9602  000788  0E40               	movlw	64
  9603  00078A  182D               	xorwf	??_printf+2,w,c
  9604  00078C  E108               	bnz	l6699
  9605  00078E  0E08               	movlw	8
  9606  000790  182E               	xorwf	??_printf+3,w,c
  9607  000792  A4D8               	btfss	status,2,c
  9608  000794  D004               	goto	l6699
  9609                           
  9610                           ;doprnt.c: 1449: (putch('0') );
  9611  000796  0E30               	movlw	48
  9612  000798  EC0C  F015         	call	_putch
  9613  00079C  D0B7               	goto	l6731
  9614  00079E                     l6699:
  9615                           
  9616                           ;doprnt.c: 1450: else
  9617                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9618  00079E  0EC0               	movlw	192
  9619  0007A0  6E2B               	movwf	??_printf& (0+255),c
  9620  0007A2  0E08               	movlw	8
  9621  0007A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  9622  0007A6  C188  F02D         	movff	printf@flag,??_printf+2
  9623  0007AA  C189  F02E         	movff	printf@flag+1,??_printf+3
  9624  0007AE  502B               	movf	??_printf,w,c
  9625  0007B0  162D               	andwf	??_printf+2,f,c
  9626  0007B2  502C               	movf	??_printf+1,w,c
  9627  0007B4  162E               	andwf	??_printf+3,f,c
  9628  0007B6  0E80               	movlw	128
  9629  0007B8  182D               	xorwf	??_printf+2,w,c
  9630  0007BA  E103               	bnz	u5791
  9631  0007BC  0E08               	movlw	8
  9632  0007BE  182E               	xorwf	??_printf+3,w,c
  9633  0007C0  A4D8               	btfss	status,2,c
  9634  0007C2                     u5791:
  9635  0007C2  D0A4               	goto	l6731
  9636                           
  9637                           ;doprnt.c: 1458: (putch('0') );
  9638  0007C4  0E30               	movlw	48
  9639  0007C6  EC0C  F015         	call	_putch
  9640                           
  9641                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  9642  0007CA  0101               	movlb	1	; () banked
  9643  0007CC  BB88               	btfsc	printf@flag& (0+255),5,b
  9644  0007CE  D005               	goto	l6707
  9645                           
  9646                           ; BSR set to: 1
  9647  0007D0  0E00               	movlw	0
  9648  0007D2  0101               	movlb	1	; () banked
  9649  0007D4  6F7B               	movwf	(_printf$1772+1)& (0+255),b
  9650  0007D6  0E78               	movlw	120
  9651  0007D8  D004               	goto	L9
  9652  0007DA                     l6707:
  9653                           
  9654                           ; BSR set to: 1
  9655  0007DA  0E00               	movlw	0
  9656  0007DC  0101               	movlb	1	; () banked
  9657  0007DE  6F7B               	movwf	(_printf$1772+1)& (0+255),b
  9658  0007E0  0E58               	movlw	88
  9659  0007E2                     L9:
  9660  0007E2  6F7A               	movwf	_printf$1772& (0+255),b
  9661  0007E4  D000               	goto	l6709
  9662  0007E6                     l6709:
  9663                           
  9664                           ; BSR set to: 1
  9665  0007E6  0101               	movlb	1	; () banked
  9666  0007E8  517A               	movf	_printf$1772& (0+255),w,b
  9667  0007EA  EC0C  F015         	call	_putch
  9668                           
  9669                           ;doprnt.c: 1466: }
  9670                           ;doprnt.c: 1469: }
  9671                           ;doprnt.c: 1474: while(prec--) {
  9672  0007EE  D08E               	goto	l6731
  9673                           
  9674                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  9675  0007F0  D078               	goto	l6727
  9676                           
  9677                           ;doprnt.c: 1478: {
  9678                           ;doprnt.c: 1483: case 0x00:
  9679  0007F2  D000               	goto	l6711
  9680  0007F4                     l6711:
  9681                           
  9682                           ;doprnt.c: 1486: case 0xC0:
  9683                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9684  0007F4  0101               	movlb	1	; () banked
  9685  0007F6  5184               	movf	printf@prec& (0+255),w,b
  9686  0007F8  0D02               	mullw	2
  9687  0007FA  0ED4               	movlw	low _dpowers
  9688  0007FC  24F3               	addwf	prodl,w,c
  9689  0007FE  6EF6               	movwf	tblptrl,c
  9690  000800  0EFE               	movlw	high _dpowers
  9691  000802  20F4               	addwfc	prodh,w,c
  9692  000804  6EF7               	movwf	tblptrh,c
  9693  000806                     	if	0	;There are less than 3 active tblptr bytes
  9694  000806                     	endif
  9695  000806  0009               	tblrd		*+
  9696  000808  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9697  00080C  000A               	tblrd		*-
  9698  00080E  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9699  000812  C182  F011         	movff	printf@val,___lwdiv@dividend
  9700  000816  C183  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9701  00081A  ECBE  F011         	call	___lwdiv	;wreg free
  9702  00081E  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  9703  000822  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  9704  000826  0E00               	movlw	0
  9705  000828  6E1B               	movwf	___lwmod@divisor+1,c
  9706  00082A  0E0A               	movlw	10
  9707  00082C  6E1A               	movwf	___lwmod@divisor,c
  9708  00082E  EC62  F012         	call	___lwmod	;wreg free
  9709  000832  5018               	movf	?___lwmod,w,c
  9710  000834  D052               	goto	L10
  9711  000836                     l6713:
  9712                           
  9713                           ; BSR set to: 1
  9714                           ;doprnt.c: 1499: {
  9715                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9716  000836  C182  F011         	movff	printf@val,___lwdiv@dividend
  9717  00083A  C183  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9718  00083E  0101               	movlb	1	; () banked
  9719  000840  5184               	movf	printf@prec& (0+255),w,b
  9720  000842  0D02               	mullw	2
  9721  000844  0EDE               	movlw	low _hexpowers
  9722  000846  24F3               	addwf	prodl,w,c
  9723  000848  6EF6               	movwf	tblptrl,c
  9724  00084A  0EFE               	movlw	high _hexpowers
  9725  00084C  20F4               	addwfc	prodh,w,c
  9726  00084E  6EF7               	movwf	tblptrh,c
  9727  000850                     	if	0	;There are less than 3 active tblptr bytes
  9728  000850                     	endif
  9729  000850  0009               	tblrd		*+
  9730  000852  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9731  000856  000A               	tblrd		*-
  9732  000858  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9733  00085C  ECBE  F011         	call	___lwdiv	;wreg free
  9734  000860  5011               	movf	?___lwdiv,w,c
  9735  000862  0B0F               	andlw	15
  9736  000864  0101               	movlb	1	; () banked
  9737  000866  6F75               	movwf	printf@idx& (0+255),b
  9738                           
  9739                           ; BSR set to: 1
  9740                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  9741  000868  0101               	movlb	1	; () banked
  9742  00086A  BB88               	btfsc	printf@flag& (0+255),5,b
  9743  00086C  D005               	goto	l6719
  9744                           
  9745                           ; BSR set to: 1
  9746  00086E  0E9F               	movlw	low STR_21
  9747  000870  0101               	movlb	1	; () banked
  9748  000872  6F7C               	movwf	_printf$1778& (0+255),b
  9749  000874  0EFF               	movlw	high STR_21
  9750  000876  D004               	goto	L11
  9751  000878                     l6719:
  9752                           
  9753                           ; BSR set to: 1
  9754  000878  0E8E               	movlw	low STR_20
  9755  00087A  0101               	movlb	1	; () banked
  9756  00087C  6F7C               	movwf	_printf$1778& (0+255),b
  9757  00087E  0EFF               	movlw	high STR_20
  9758  000880                     L11:
  9759  000880  0101               	movlb	1	; () banked
  9760  000882  6F7D               	movwf	(_printf$1778+1)& (0+255),b
  9761  000884  D000               	goto	l6721
  9762  000886                     l6721:
  9763                           
  9764                           ; BSR set to: 1
  9765  000886  0101               	movlb	1	; () banked
  9766  000888  5175               	movf	printf@idx& (0+255),w,b
  9767  00088A  0D01               	mullw	1
  9768  00088C  C17C  F02B         	movff	_printf$1778,??_printf
  9769  000890  C17D  F02C         	movff	_printf$1778+1,??_printf+1
  9770  000894  50F3               	movf	prodl,w,c
  9771  000896  262B               	addwf	??_printf,f,c
  9772  000898  50F4               	movf	prodh,w,c
  9773  00089A  222C               	addwfc	??_printf+1,f,c
  9774  00089C  C02B  FFF6         	movff	??_printf,tblptrl
  9775  0008A0  C02C  FFF7         	movff	??_printf+1,tblptrh
  9776  0008A4                     	if	0	;tblptru may be non-zero
  9777  0008A4                     	endif
  9778  0008A4                     	if	0	;tblptru may be non-zero
  9779  0008A4                     	endif
  9780  0008A4  0008               	tblrd		*
  9781  0008A6  CFF5 F187          	movff	tablat,printf@c
  9782                           
  9783                           ;doprnt.c: 1508: }
  9784                           ;doprnt.c: 1510: break;
  9785  0008AA  D02B               	goto	l6729
  9786  0008AC                     l6723:
  9787                           
  9788                           ; BSR set to: 1
  9789                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  9790  0008AC  C182  F011         	movff	printf@val,___lwdiv@dividend
  9791  0008B0  C183  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9792  0008B4  0101               	movlb	1	; () banked
  9793  0008B6  5184               	movf	printf@prec& (0+255),w,b
  9794  0008B8  0D02               	mullw	2
  9795  0008BA  0EC8               	movlw	low _octpowers
  9796  0008BC  24F3               	addwf	prodl,w,c
  9797  0008BE  6EF6               	movwf	tblptrl,c
  9798  0008C0  0EFE               	movlw	high _octpowers
  9799  0008C2  20F4               	addwfc	prodh,w,c
  9800  0008C4  6EF7               	movwf	tblptrh,c
  9801  0008C6                     	if	0	;There are less than 3 active tblptr bytes
  9802  0008C6                     	endif
  9803  0008C6  0009               	tblrd		*+
  9804  0008C8  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9805  0008CC  000A               	tblrd		*-
  9806  0008CE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9807  0008D2  ECBE  F011         	call	___lwdiv	;wreg free
  9808  0008D6  5011               	movf	?___lwdiv,w,c
  9809  0008D8  0B07               	andlw	7
  9810  0008DA                     L10:
  9811  0008DA  0F30               	addlw	48
  9812  0008DC  0101               	movlb	1	; () banked
  9813  0008DE  6F87               	movwf	printf@c& (0+255),b
  9814                           
  9815                           ; BSR set to: 1
  9816                           ;doprnt.c: 1523: }
  9817                           
  9818                           ;doprnt.c: 1520: break;
  9819  0008E0  D010               	goto	l6729
  9820  0008E2                     l6727:
  9821  0008E2  0101               	movlb	1	; () banked
  9822  0008E4  5188               	movf	printf@flag& (0+255),w,b
  9823  0008E6  0BC0               	andlw	192
  9824                           
  9825                           ; Switch size 1, requested type "space"
  9826                           ; Number of cases is 4, Range of values is 0 to 192
  9827                           ; switch strategies available:
  9828                           ; Name         Instructions Cycles
  9829                           ; simple_byte           13     7 (average)
  9830                           ;	Chosen strategy is simple_byte
  9831  0008E8  0A00               	xorlw	0	; case 0
  9832  0008EA  B4D8               	btfsc	status,2,c
  9833  0008EC  D783               	goto	l6711
  9834  0008EE  0A40               	xorlw	64	; case 64
  9835  0008F0  B4D8               	btfsc	status,2,c
  9836  0008F2  D7DC               	goto	l6723
  9837  0008F4  0AC0               	xorlw	192	; case 128
  9838  0008F6  B4D8               	btfsc	status,2,c
  9839  0008F8  D79E               	goto	l6713
  9840  0008FA  0A40               	xorlw	64	; case 192
  9841  0008FC  B4D8               	btfsc	status,2,c
  9842  0008FE  D77A               	goto	l6711
  9843  000900  D000               	goto	l6729
  9844  000902                     l6729:
  9845                           
  9846                           ; BSR set to: 1
  9847                           ;doprnt.c: 1524: (putch(c) );
  9848  000902  0101               	movlb	1	; () banked
  9849  000904  5187               	movf	printf@c& (0+255),w,b
  9850  000906  EC0C  F015         	call	_putch
  9851  00090A  D000               	goto	l6731
  9852  00090C                     l6731:
  9853  00090C  0101               	movlb	1	; () banked
  9854  00090E  0784               	decf	printf@prec& (0+255),f,b
  9855  000910  0101               	movlb	1	; () banked
  9856  000912  2984               	incf	printf@prec& (0+255),w,b
  9857  000914  A4D8               	btfss	status,2,c
  9858  000916  D7E5               	goto	l6727
  9859                           
  9860                           ; BSR set to: 1
  9861                           ;doprnt.c: 1525: }
  9862                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  9863  000918  0101               	movlb	1	; () banked
  9864  00091A  A788               	btfss	printf@flag& (0+255),3,b
  9865  00091C  D01B               	goto	l6739
  9866                           
  9867                           ; BSR set to: 1
  9868  00091E  0101               	movlb	1	; () banked
  9869  000920  BF86               	btfsc	(printf@width+1)& (0+255),7,b
  9870  000922  D018               	goto	l6739
  9871  000924  0101               	movlb	1	; () banked
  9872  000926  5186               	movf	(printf@width+1)& (0+255),w,b
  9873  000928  E106               	bnz	l6735
  9874  00092A  0101               	movlb	1	; () banked
  9875  00092C  0585               	decf	printf@width& (0+255),w,b
  9876  00092E  B0D8               	btfsc	status,0,c
  9877  000930  D002               	goto	l6735
  9878  000932  D010               	goto	l6739
  9879  000934  D000               	goto	l6735
  9880  000936                     l6735:
  9881                           
  9882                           ; BSR set to: 1
  9883                           ;doprnt.c: 1530: (putch(' ') );
  9884  000936  0E20               	movlw	32
  9885  000938  EC0C  F015         	call	_putch
  9886                           
  9887                           ;doprnt.c: 1531: while(--width);
  9888  00093C  0101               	movlb	1	; () banked
  9889  00093E  0785               	decf	printf@width& (0+255),f,b
  9890  000940  A0D8               	btfss	status,0,c
  9891  000942  0786               	decf	(printf@width+1)& (0+255),f,b
  9892  000944  0101               	movlb	1	; () banked
  9893  000946  5185               	movf	printf@width& (0+255),w,b
  9894  000948  0101               	movlb	1	; () banked
  9895  00094A  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9896  00094C  B4D8               	btfsc	status,2,c
  9897  00094E  D002               	goto	l6739
  9898  000950  D7F2               	goto	l6735
  9899                           
  9900                           ; BSR set to: 1
  9901                           
  9902                           ; BSR set to: 1
  9903  000952  D000               	goto	l6739
  9904  000954                     l6739:
  9905  000954  C01D  FFF6         	movff	printf@f,tblptrl
  9906  000958  C01E  FFF7         	movff	printf@f+1,tblptrh
  9907  00095C  4A1D               	infsnz	printf@f,f,c
  9908  00095E  2A1E               	incf	printf@f+1,f,c
  9909  000960                     	if	0	;tblptru may be non-zero
  9910  000960                     	endif
  9911  000960                     	if	0	;tblptru may be non-zero
  9912  000960                     	endif
  9913  000960  0008               	tblrd		*
  9914  000962  CFF5 F187          	movff	tablat,printf@c
  9915  000966  0101               	movlb	1	; () banked
  9916  000968  5187               	movf	printf@c& (0+255),w,b
  9917  00096A  B4D8               	btfsc	status,2,c
  9918  00096C  D003               	goto	l941
  9919  00096E  EF16  F000         	goto	l6433
  9920                           
  9921                           ; BSR set to: 1
  9922  000972  D000               	goto	l941
  9923  000974                     l941:
  9924                           
  9925                           ; BSR set to: 1
  9926  000974  0012               	return		;funcret
  9927  000976                     __end_of_printf:
  9928                           	opt stack 0
  9929                           tblptru	equ	0xFF8
  9930                           tblptrh	equ	0xFF7
  9931                           tblptrl	equ	0xFF6
  9932                           tablat	equ	0xFF5
  9933                           prodh	equ	0xFF4
  9934                           prodl	equ	0xFF3
  9935                           intcon	equ	0xFF2
  9936                           intcon2	equ	0xFF1
  9937                           postinc0	equ	0xFEE
  9938                           wreg	equ	0xFE8
  9939                           postdec1	equ	0xFE5
  9940                           fsr1l	equ	0xFE1
  9941                           indf2	equ	0xFDF
  9942                           postinc2	equ	0xFDE
  9943                           postdec2	equ	0xFDD
  9944                           fsr2h	equ	0xFDA
  9945                           fsr2l	equ	0xFD9
  9946                           status	equ	0xFD8
  9947                           
  9948 ;; *************** function _putch *****************
  9949 ;; Defined at:
  9950 ;;		line 84 in file "lap12p1.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;  c               1    wreg     unsigned char 
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;  c               1   16[COMRAM] unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;		None               void
  9957 ;; Registers used:
  9958 ;;		wreg
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;Total ram usage:        1 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    3
  9971 ;; This function calls:
  9972 ;;		Nothing
  9973 ;; This function is called by:
  9974 ;;		_printf
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           	psect	text42
  9979  002A18                     __ptext42:
  9980                           	opt stack 0
  9981  002A18                     _putch:
  9982                           	opt stack 26
  9983                           
  9984                           ; BSR set to: 1
  9985                           ;incstack = 0
  9986                           ;putch@c stored from wreg
  9987  002A18  6E11               	movwf	putch@c,c
  9988                           
  9989                           ;lap12p1.c: 86: while (!TRMT);
  9990  002A1A  D000               	goto	l256
  9991  002A1C                     l256:
  9992  002A1C  A2AC               	btfss	4012,1,c	;volatile
  9993  002A1E  D7FE               	goto	l256
  9994                           
  9995                           ;lap12p1.c: 87: TXREG = c;
  9996  002A20  C011  FFAD         	movff	putch@c,4013	;volatile
  9997  002A24  0012               	return		;funcret
  9998  002A26                     __end_of_putch:
  9999                           	opt stack 0
 10000                           tblptru	equ	0xFF8
 10001                           tblptrh	equ	0xFF7
 10002                           tblptrl	equ	0xFF6
 10003                           tablat	equ	0xFF5
 10004                           prodh	equ	0xFF4
 10005                           prodl	equ	0xFF3
 10006                           intcon	equ	0xFF2
 10007                           intcon2	equ	0xFF1
 10008                           postinc0	equ	0xFEE
 10009                           wreg	equ	0xFE8
 10010                           postdec1	equ	0xFE5
 10011                           fsr1l	equ	0xFE1
 10012                           indf2	equ	0xFDF
 10013                           postinc2	equ	0xFDE
 10014                           postdec2	equ	0xFDD
 10015                           fsr2h	equ	0xFDA
 10016                           fsr2l	equ	0xFD9
 10017                           status	equ	0xFD8
 10018                           
 10019 ;; *************** function _isdigit *****************
 10020 ;; Defined at:
 10021 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;  c               1    wreg     unsigned char 
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  c               1   18[COMRAM] unsigned char 
 10026 ;; Return value:  Size  Location     Type
 10027 ;;		None               void
 10028 ;; Registers used:
 10029 ;;		wreg, status,2, status,0
 10030 ;; Tracked objects:
 10031 ;;		On entry : 0/0
 10032 ;;		On exit  : 0/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;Total ram usage:        3 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; Hardware stack levels required when called:    3
 10042 ;; This function calls:
 10043 ;;		Nothing
 10044 ;; This function is called by:
 10045 ;;		_printf
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text43
 10050  002878                     __ptext43:
 10051                           	opt stack 0
 10052  002878                     _isdigit:
 10053                           	opt stack 26
 10054                           
 10055                           ;incstack = 0
 10056                           ;isdigit@c stored from wreg
 10057  002878  6E13               	movwf	isdigit@c,c
 10058  00287A  0E00               	movlw	0
 10059  00287C  6E12               	movwf	_isdigit$2301,c
 10060  00287E  0E3A               	movlw	58
 10061  002880  6013               	cpfslt	isdigit@c,c
 10062  002882  D006               	goto	l6377
 10063  002884  0E2F               	movlw	47
 10064  002886  6413               	cpfsgt	isdigit@c,c
 10065  002888  D003               	goto	l6377
 10066  00288A  0E01               	movlw	1
 10067  00288C  6E12               	movwf	_isdigit$2301,c
 10068  00288E  D000               	goto	l6377
 10069  002890                     l6377:
 10070  002890  C012  F011         	movff	_isdigit$2301,??_isdigit
 10071  002894  3011               	rrcf	??_isdigit,w,c
 10072  002896  D000               	goto	l1408
 10073  002898                     l1408:
 10074  002898  0012               	return		;funcret
 10075  00289A                     __end_of_isdigit:
 10076                           	opt stack 0
 10077                           tblptru	equ	0xFF8
 10078                           tblptrh	equ	0xFF7
 10079                           tblptrl	equ	0xFF6
 10080                           tablat	equ	0xFF5
 10081                           prodh	equ	0xFF4
 10082                           prodl	equ	0xFF3
 10083                           intcon	equ	0xFF2
 10084                           intcon2	equ	0xFF1
 10085                           postinc0	equ	0xFEE
 10086                           wreg	equ	0xFE8
 10087                           postdec1	equ	0xFE5
 10088                           fsr1l	equ	0xFE1
 10089                           indf2	equ	0xFDF
 10090                           postinc2	equ	0xFDE
 10091                           postdec2	equ	0xFDD
 10092                           fsr2h	equ	0xFDA
 10093                           fsr2l	equ	0xFD9
 10094                           status	equ	0xFD8
 10095                           
 10096 ;; *************** function ___wmul *****************
 10097 ;; Defined at:
 10098 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10099 ;; Parameters:    Size  Location     Type
 10100 ;;  multiplier      2   16[COMRAM] unsigned int 
 10101 ;;  multiplicand    2   18[COMRAM] unsigned int 
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;  product         2   20[COMRAM] unsigned int 
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  2   16[COMRAM] unsigned int 
 10106 ;; Registers used:
 10107 ;;		wreg, status,2, status,0, prodl, prodh
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10113 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10117 ;;Total ram usage:        6 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    3
 10120 ;; This function calls:
 10121 ;;		Nothing
 10122 ;; This function is called by:
 10123 ;;		_get_RPM
 10124 ;;		_main
 10125 ;;		_delay_ms
 10126 ;;		_drawChar
 10127 ;;		_printf
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           	psect	text44
 10132  00282A                     __ptext44:
 10133                           	opt stack 0
 10134  00282A                     ___wmul:
 10135                           	opt stack 26
 10136                           
 10137                           ;incstack = 0
 10138  00282A  5011               	movf	___wmul@multiplier,w,c
 10139  00282C  0213               	mulwf	___wmul@multiplicand,c
 10140  00282E  CFF3 F015          	movff	prodl,___wmul@product
 10141  002832  CFF4 F016          	movff	prodh,___wmul@product+1
 10142  002836  5011               	movf	___wmul@multiplier,w,c
 10143  002838  0214               	mulwf	___wmul@multiplicand+1,c
 10144  00283A  50F3               	movf	prodl,w,c
 10145  00283C  2616               	addwf	___wmul@product+1,f,c
 10146  00283E  5012               	movf	___wmul@multiplier+1,w,c
 10147  002840  0213               	mulwf	___wmul@multiplicand,c
 10148  002842  50F3               	movf	prodl,w,c
 10149  002844  2616               	addwf	___wmul@product+1,f,c
 10150  002846  C015  F011         	movff	___wmul@product,?___wmul
 10151  00284A  C016  F012         	movff	___wmul@product+1,?___wmul+1
 10152  00284E  D000               	goto	l977
 10153  002850                     l977:
 10154  002850  0012               	return		;funcret
 10155  002852                     __end_of___wmul:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           intcon	equ	0xFF2
 10164                           intcon2	equ	0xFF1
 10165                           postinc0	equ	0xFEE
 10166                           wreg	equ	0xFE8
 10167                           postdec1	equ	0xFE5
 10168                           fsr1l	equ	0xFE1
 10169                           indf2	equ	0xFDF
 10170                           postinc2	equ	0xFDE
 10171                           postdec2	equ	0xFDD
 10172                           fsr2h	equ	0xFDA
 10173                           fsr2l	equ	0xFD9
 10174                           status	equ	0xFD8
 10175                           
 10176 ;; *************** function ___lwmod *****************
 10177 ;; Defined at:
 10178 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  dividend        2   23[COMRAM] unsigned int 
 10181 ;;  divisor         2   25[COMRAM] unsigned int 
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;  counter         1   27[COMRAM] unsigned char 
 10184 ;; Return value:  Size  Location     Type
 10185 ;;                  2   23[COMRAM] unsigned int 
 10186 ;; Registers used:
 10187 ;;		wreg, status,2, status,0
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10193 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;Total ram usage:        5 bytes
 10198 ;; Hardware stack levels used:    1
 10199 ;; Hardware stack levels required when called:    3
 10200 ;; This function calls:
 10201 ;;		Nothing
 10202 ;; This function is called by:
 10203 ;;		_printf
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text45
 10208  0024C4                     __ptext45:
 10209                           	opt stack 0
 10210  0024C4                     ___lwmod:
 10211                           	opt stack 26
 10212                           
 10213                           ;incstack = 0
 10214  0024C4  501A               	movf	___lwmod@divisor,w,c
 10215  0024C6  101B               	iorwf	___lwmod@divisor+1,w,c
 10216  0024C8  B4D8               	btfsc	status,2,c
 10217  0024CA  D01D               	goto	l1510
 10218  0024CC  0E01               	movlw	1
 10219  0024CE  6E1C               	movwf	___lwmod@counter,c
 10220  0024D0  D005               	goto	l6409
 10221  0024D2                     l6407:
 10222  0024D2  90D8               	bcf	status,0,c
 10223  0024D4  361A               	rlcf	___lwmod@divisor,f,c
 10224  0024D6  361B               	rlcf	___lwmod@divisor+1,f,c
 10225  0024D8  2A1C               	incf	___lwmod@counter,f,c
 10226  0024DA  D000               	goto	l6409
 10227  0024DC                     l6409:
 10228  0024DC  BE1B               	btfsc	___lwmod@divisor+1,7,c
 10229  0024DE  D002               	goto	l6411
 10230  0024E0  D7F8               	goto	l6407
 10231  0024E2  D000               	goto	l6411
 10232  0024E4                     l6411:
 10233  0024E4  501A               	movf	___lwmod@divisor,w,c
 10234  0024E6  5C18               	subwf	___lwmod@dividend,w,c
 10235  0024E8  501B               	movf	___lwmod@divisor+1,w,c
 10236  0024EA  5819               	subwfb	___lwmod@dividend+1,w,c
 10237  0024EC  A0D8               	btfss	status,0,c
 10238  0024EE  D005               	goto	l6415
 10239  0024F0  501A               	movf	___lwmod@divisor,w,c
 10240  0024F2  5E18               	subwf	___lwmod@dividend,f,c
 10241  0024F4  501B               	movf	___lwmod@divisor+1,w,c
 10242  0024F6  5A19               	subwfb	___lwmod@dividend+1,f,c
 10243  0024F8  D000               	goto	l6415
 10244  0024FA                     l6415:
 10245  0024FA  90D8               	bcf	status,0,c
 10246  0024FC  321B               	rrcf	___lwmod@divisor+1,f,c
 10247  0024FE  321A               	rrcf	___lwmod@divisor,f,c
 10248  002500  2E1C               	decfsz	___lwmod@counter,f,c
 10249  002502  D7F0               	goto	l6411
 10250  002504  D000               	goto	l1510
 10251  002506                     l1510:
 10252  002506  C018  F018         	movff	___lwmod@dividend,?___lwmod
 10253  00250A  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 10254  00250E  0012               	return		;funcret
 10255  002510                     __end_of___lwmod:
 10256                           	opt stack 0
 10257                           tblptru	equ	0xFF8
 10258                           tblptrh	equ	0xFF7
 10259                           tblptrl	equ	0xFF6
 10260                           tablat	equ	0xFF5
 10261                           prodh	equ	0xFF4
 10262                           prodl	equ	0xFF3
 10263                           intcon	equ	0xFF2
 10264                           intcon2	equ	0xFF1
 10265                           postinc0	equ	0xFEE
 10266                           wreg	equ	0xFE8
 10267                           postdec1	equ	0xFE5
 10268                           fsr1l	equ	0xFE1
 10269                           indf2	equ	0xFDF
 10270                           postinc2	equ	0xFDE
 10271                           postdec2	equ	0xFDD
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function ___lwdiv *****************
 10277 ;; Defined at:
 10278 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;  dividend        2   16[COMRAM] unsigned int 
 10281 ;;  divisor         2   18[COMRAM] unsigned int 
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  quotient        2   21[COMRAM] unsigned int 
 10284 ;;  counter         1   20[COMRAM] unsigned char 
 10285 ;; Return value:  Size  Location     Type
 10286 ;;                  2   16[COMRAM] unsigned int 
 10287 ;; Registers used:
 10288 ;;		wreg, status,2, status,0
 10289 ;; Tracked objects:
 10290 ;;		On entry : 0/0
 10291 ;;		On exit  : 0/0
 10292 ;;		Unchanged: 0/0
 10293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10294 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10297 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;Total ram usage:        7 bytes
 10299 ;; Hardware stack levels used:    1
 10300 ;; Hardware stack levels required when called:    3
 10301 ;; This function calls:
 10302 ;;		Nothing
 10303 ;; This function is called by:
 10304 ;;		_printf
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text46
 10309  00237C                     __ptext46:
 10310                           	opt stack 0
 10311  00237C                     ___lwdiv:
 10312                           	opt stack 26
 10313                           
 10314                           ;incstack = 0
 10315  00237C  0E00               	movlw	0
 10316  00237E  6E17               	movwf	___lwdiv@quotient+1,c
 10317  002380  0E00               	movlw	0
 10318  002382  6E16               	movwf	___lwdiv@quotient,c
 10319  002384  5013               	movf	___lwdiv@divisor,w,c
 10320  002386  1014               	iorwf	___lwdiv@divisor+1,w,c
 10321  002388  B4D8               	btfsc	status,2,c
 10322  00238A  D021               	goto	l1500
 10323  00238C  0E01               	movlw	1
 10324  00238E  6E15               	movwf	___lwdiv@counter,c
 10325  002390  D005               	goto	l6389
 10326  002392                     l6387:
 10327  002392  90D8               	bcf	status,0,c
 10328  002394  3613               	rlcf	___lwdiv@divisor,f,c
 10329  002396  3614               	rlcf	___lwdiv@divisor+1,f,c
 10330  002398  2A15               	incf	___lwdiv@counter,f,c
 10331  00239A  D000               	goto	l6389
 10332  00239C                     l6389:
 10333  00239C  BE14               	btfsc	___lwdiv@divisor+1,7,c
 10334  00239E  D002               	goto	l6391
 10335  0023A0  D7F8               	goto	l6387
 10336  0023A2  D000               	goto	l6391
 10337  0023A4                     l6391:
 10338  0023A4  90D8               	bcf	status,0,c
 10339  0023A6  3616               	rlcf	___lwdiv@quotient,f,c
 10340  0023A8  3617               	rlcf	___lwdiv@quotient+1,f,c
 10341  0023AA  5013               	movf	___lwdiv@divisor,w,c
 10342  0023AC  5C11               	subwf	___lwdiv@dividend,w,c
 10343  0023AE  5014               	movf	___lwdiv@divisor+1,w,c
 10344  0023B0  5812               	subwfb	___lwdiv@dividend+1,w,c
 10345  0023B2  A0D8               	btfss	status,0,c
 10346  0023B4  D006               	goto	l6399
 10347  0023B6  5013               	movf	___lwdiv@divisor,w,c
 10348  0023B8  5E11               	subwf	___lwdiv@dividend,f,c
 10349  0023BA  5014               	movf	___lwdiv@divisor+1,w,c
 10350  0023BC  5A12               	subwfb	___lwdiv@dividend+1,f,c
 10351  0023BE  8016               	bsf	___lwdiv@quotient,0,c
 10352  0023C0  D000               	goto	l6399
 10353  0023C2                     l6399:
 10354  0023C2  90D8               	bcf	status,0,c
 10355  0023C4  3214               	rrcf	___lwdiv@divisor+1,f,c
 10356  0023C6  3213               	rrcf	___lwdiv@divisor,f,c
 10357  0023C8  2E15               	decfsz	___lwdiv@counter,f,c
 10358  0023CA  D7EC               	goto	l6391
 10359  0023CC  D000               	goto	l1500
 10360  0023CE                     l1500:
 10361  0023CE  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
 10362  0023D2  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10363  0023D6  0012               	return		;funcret
 10364  0023D8                     __end_of___lwdiv:
 10365                           	opt stack 0
 10366                           tblptru	equ	0xFF8
 10367                           tblptrh	equ	0xFF7
 10368                           tblptrl	equ	0xFF6
 10369                           tablat	equ	0xFF5
 10370                           prodh	equ	0xFF4
 10371                           prodl	equ	0xFF3
 10372                           intcon	equ	0xFF2
 10373                           intcon2	equ	0xFF1
 10374                           postinc0	equ	0xFEE
 10375                           wreg	equ	0xFE8
 10376                           postdec1	equ	0xFE5
 10377                           fsr1l	equ	0xFE1
 10378                           indf2	equ	0xFDF
 10379                           postinc2	equ	0xFDE
 10380                           postdec2	equ	0xFDD
 10381                           fsr2h	equ	0xFDA
 10382                           fsr2l	equ	0xFD9
 10383                           status	equ	0xFD8
 10384                           
 10385 ;; *************** function _do_update_pwm *****************
 10386 ;; Defined at:
 10387 ;;		line 86 in file "Fan_Support.c"
 10388 ;; Parameters:    Size  Location     Type
 10389 ;;  duty_cycle      1    wreg     unsigned char 
 10390 ;; Auto vars:     Size  Location     Type
 10391 ;;  duty_cycle      1    3[BANK0 ] unsigned char 
 10392 ;;  dc_f            3    0[BANK0 ] float 
 10393 ;;  dc_I            2    4[BANK0 ] int 
 10394 ;; Return value:  Size  Location     Type
 10395 ;;		None               void
 10396 ;; Registers used:
 10397 ;;		wreg, status,2, status,0, cstack
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;Total ram usage:        9 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    5
 10410 ;; This function calls:
 10411 ;;		___ftdiv
 10412 ;;		___ftmul
 10413 ;;		___fttol
 10414 ;;		___lbtoft
 10415 ;; This function is called by:
 10416 ;;		_Turn_On_Fan
 10417 ;;		_Increase_Speed
 10418 ;;		_Decrease_Speed
 10419 ;;		_main
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           	psect	text47
 10424  001DAA                     __ptext47:
 10425                           	opt stack 0
 10426  001DAA                     _do_update_pwm:
 10427                           	opt stack 25
 10428                           
 10429                           ;incstack = 0
 10430                           ;do_update_pwm@duty_cycle stored from wreg
 10431  001DAA  0100               	movlb	0	; () banked
 10432  001DAC  6FE8               	movwf	do_update_pwm@duty_cycle& (0+255),b
 10433                           
 10434                           ; BSR set to: 0
 10435                           ;Fan_Support.c: 88: float dc_f;
 10436                           ;Fan_Support.c: 89: int dc_I;
 10437                           ;Fan_Support.c: 90: PR2 = 0b00000100 ;
 10438  001DAE  0E04               	movlw	4
 10439  001DB0  6ECB               	movwf	4043,c	;volatile
 10440                           
 10441                           ;Fan_Support.c: 91: T2CON = 0b00000111 ;
 10442  001DB2  0E07               	movlw	7
 10443  001DB4  6ECA               	movwf	4042,c	;volatile
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;Fan_Support.c: 92: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 10447  001DB6  0E00               	movlw	0
 10448  001DB8  6E20               	movwf	___ftmul@f2,c
 10449  001DBA  0E80               	movlw	128
 10450  001DBC  6E21               	movwf	___ftmul@f2+1,c
 10451  001DBE  0E40               	movlw	64
 10452  001DC0  6E22               	movwf	___ftmul@f2+2,c
 10453  001DC2  0100               	movlb	0	; () banked
 10454  001DC4  51E8               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 10455  001DC6  EC29  F014         	call	___lbtoft
 10456  001DCA  C019  F01D         	movff	?___lbtoft,___ftmul@f1
 10457  001DCE  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
 10458  001DD2  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
 10459  001DD6  EC2B  F00C         	call	___ftmul	;wreg free
 10460  001DDA  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
 10461  001DDE  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
 10462  001DE2  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
 10463  001DE6  0E00               	movlw	0
 10464  001DE8  6E2F               	movwf	___ftdiv@f2,c
 10465  001DEA  0EA0               	movlw	160
 10466  001DEC  6E30               	movwf	___ftdiv@f2+1,c
 10467  001DEE  0E41               	movlw	65
 10468  001DF0  6E31               	movwf	___ftdiv@f2+2,c
 10469  001DF2  EC93  F00D         	call	___ftdiv	;wreg free
 10470  001DF6  C02C  F0E5         	movff	?___ftdiv,do_update_pwm@dc_f
 10471  001DFA  C02D  F0E6         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 10472  001DFE  C02E  F0E7         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 10473                           
 10474                           ;Fan_Support.c: 94: dc_I = (int) dc_f;
 10475  001E02  C0E5  F011         	movff	do_update_pwm@dc_f,___fttol@f1
 10476  001E06  C0E6  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 10477  001E0A  C0E7  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 10478  001E0E  EC20  F00D         	call	___fttol	;wreg free
 10479  001E12  C011  F0E9         	movff	?___fttol,do_update_pwm@dc_I
 10480  001E16  C012  F0EA         	movff	?___fttol+1,do_update_pwm@dc_I+1
 10481                           
 10482                           ;Fan_Support.c: 95: if (dc_I > duty_cycle) dc_I++;
 10483  001E1A  0100               	movlb	0	; () banked
 10484  001E1C  51E8               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 10485  001E1E  6E3B               	movwf	??_do_update_pwm& (0+255),c
 10486  001E20  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
 10487  001E22  0100               	movlb	0	; () banked
 10488  001E24  51E9               	movf	do_update_pwm@dc_I& (0+255),w,b
 10489  001E26  5C3B               	subwf	??_do_update_pwm,w,c
 10490  001E28  503C               	movf	??_do_update_pwm+1,w,c
 10491  001E2A  0A80               	xorlw	128
 10492  001E2C  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
 10493  001E2E  0100               	movlb	0	; () banked
 10494  001E30  51EA               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
 10495  001E32  0A80               	xorlw	128
 10496  001E34  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 10497  001E36  B0D8               	btfsc	status,0,c
 10498  001E38  D004               	goto	l6075
 10499                           
 10500                           ; BSR set to: 0
 10501  001E3A  0100               	movlb	0	; () banked
 10502  001E3C  4BE9               	infsnz	do_update_pwm@dc_I& (0+255),f,b
 10503  001E3E  2BEA               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
 10504  001E40  D000               	goto	l6075
 10505  001E42                     l6075:
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;Fan_Support.c: 96: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 10509  001E42  C0E9  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 10510  001E46  0E03               	movlw	3
 10511  001E48  163B               	andwf	??_do_update_pwm,f,c
 10512  001E4A  383B               	swapf	??_do_update_pwm,w,c
 10513  001E4C  0BF0               	andlw	240
 10514  001E4E  090C               	iorlw	12
 10515  001E50  6EBD               	movwf	4029,c	;volatile
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;Fan_Support.c: 97: CCPR1L = (dc_I) >> 2;
 10519  001E52  C0E9  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 10520  001E56  C0EA  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 10521  001E5A  343C               	rlcf	??_do_update_pwm+1,w,c
 10522  001E5C  323C               	rrcf	??_do_update_pwm+1,f,c
 10523  001E5E  323B               	rrcf	??_do_update_pwm,f,c
 10524  001E60  343C               	rlcf	??_do_update_pwm+1,w,c
 10525  001E62  323C               	rrcf	??_do_update_pwm+1,f,c
 10526  001E64  323B               	rrcf	??_do_update_pwm,f,c
 10527  001E66  503B               	movf	??_do_update_pwm,w,c
 10528  001E68  6EBE               	movwf	4030,c	;volatile
 10529                           
 10530                           ; BSR set to: 0
 10531  001E6A  0012               	return		;funcret
 10532  001E6C                     __end_of_do_update_pwm:
 10533                           	opt stack 0
 10534                           tblptru	equ	0xFF8
 10535                           tblptrh	equ	0xFF7
 10536                           tblptrl	equ	0xFF6
 10537                           tablat	equ	0xFF5
 10538                           prodh	equ	0xFF4
 10539                           prodl	equ	0xFF3
 10540                           intcon	equ	0xFF2
 10541                           intcon2	equ	0xFF1
 10542                           postinc0	equ	0xFEE
 10543                           wreg	equ	0xFE8
 10544                           postdec1	equ	0xFE5
 10545                           fsr1l	equ	0xFE1
 10546                           indf2	equ	0xFDF
 10547                           postinc2	equ	0xFDE
 10548                           postdec2	equ	0xFDD
 10549                           fsr2h	equ	0xFDA
 10550                           fsr2l	equ	0xFD9
 10551                           status	equ	0xFD8
 10552                           
 10553 ;; *************** function ___lbtoft *****************
 10554 ;; Defined at:
 10555 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;  c               1    wreg     unsigned char 
 10558 ;; Auto vars:     Size  Location     Type
 10559 ;;  c               1   27[COMRAM] unsigned char 
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  3   24[COMRAM] float 
 10562 ;; Registers used:
 10563 ;;		wreg, status,2, status,0, cstack
 10564 ;; Tracked objects:
 10565 ;;		On entry : 0/0
 10566 ;;		On exit  : 0/0
 10567 ;;		Unchanged: 0/0
 10568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10569 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;Total ram usage:        4 bytes
 10574 ;; Hardware stack levels used:    1
 10575 ;; Hardware stack levels required when called:    4
 10576 ;; This function calls:
 10577 ;;		___ftpack
 10578 ;; This function is called by:
 10579 ;;		_do_update_pwm
 10580 ;; This function uses a non-reentrant model
 10581 ;;
 10582                           
 10583                           	psect	text48
 10584  002852                     __ptext48:
 10585                           	opt stack 0
 10586  002852                     ___lbtoft:
 10587                           	opt stack 25
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;incstack = 0
 10591                           ;___lbtoft@c stored from wreg
 10592  002852  6E1C               	movwf	___lbtoft@c,c
 10593  002854  501C               	movf	___lbtoft@c,w,c
 10594  002856  6E11               	movwf	___ftpack@arg,c
 10595  002858  6A12               	clrf	___ftpack@arg+1,c
 10596  00285A  6A13               	clrf	___ftpack@arg+2,c
 10597  00285C  0E8E               	movlw	142
 10598  00285E  6E14               	movwf	___ftpack@exp,c
 10599  002860  0E00               	movlw	0
 10600  002862  6E15               	movwf	___ftpack@sign,c
 10601  002864  EC72  F00E         	call	___ftpack	;wreg free
 10602  002868  C011  F019         	movff	?___ftpack,?___lbtoft
 10603  00286C  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 10604  002870  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 10605  002874  D000               	goto	l1434
 10606  002876                     l1434:
 10607  002876  0012               	return		;funcret
 10608  002878                     __end_of___lbtoft:
 10609                           	opt stack 0
 10610                           tblptru	equ	0xFF8
 10611                           tblptrh	equ	0xFF7
 10612                           tblptrl	equ	0xFF6
 10613                           tablat	equ	0xFF5
 10614                           prodh	equ	0xFF4
 10615                           prodl	equ	0xFF3
 10616                           intcon	equ	0xFF2
 10617                           intcon2	equ	0xFF1
 10618                           postinc0	equ	0xFEE
 10619                           wreg	equ	0xFE8
 10620                           postdec1	equ	0xFE5
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           postdec2	equ	0xFDD
 10625                           fsr2h	equ	0xFDA
 10626                           fsr2l	equ	0xFD9
 10627                           status	equ	0xFD8
 10628                           
 10629 ;; *************** function ___fttol *****************
 10630 ;; Defined at:
 10631 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 10632 ;; Parameters:    Size  Location     Type
 10633 ;;  f1              3   16[COMRAM] float 
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  lval            4   26[COMRAM] unsigned long 
 10636 ;;  exp1            1   30[COMRAM] unsigned char 
 10637 ;;  sign1           1   25[COMRAM] unsigned char 
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  4   16[COMRAM] long 
 10640 ;; Registers used:
 10641 ;;		wreg, status,2, status,0
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;Total ram usage:       15 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:    3
 10654 ;; This function calls:
 10655 ;;		Nothing
 10656 ;; This function is called by:
 10657 ;;		_do_update_pwm
 10658 ;; This function uses a non-reentrant model
 10659 ;;
 10660                           
 10661                           	psect	text49
 10662  001A40                     __ptext49:
 10663                           	opt stack 0
 10664  001A40                     ___fttol:
 10665                           	opt stack 26
 10666                           
 10667                           ;incstack = 0
 10668  001A40  C013  F015         	movff	___fttol@f1+2,??___fttol
 10669  001A44  6A16               	clrf	(??___fttol+1)& (0+255),c
 10670  001A46  6A17               	clrf	(??___fttol+2)& (0+255),c
 10671  001A48  3412               	rlcf	___fttol@f1+1,w,c
 10672  001A4A  3615               	rlcf	??___fttol& (0+255),f,c
 10673  001A4C  E301               	bnc	u4741
 10674  001A4E  8016               	bsf	(??___fttol+1)& (0+255),0,c
 10675  001A50                     u4741:
 10676  001A50  5015               	movf	??___fttol,w,c
 10677  001A52  6E1F               	movwf	___fttol@exp1,c
 10678  001A54  501F               	movf	___fttol@exp1,w,c
 10679  001A56  A4D8               	btfss	status,2,c
 10680  001A58  D002               	goto	l6021
 10681  001A5A  D039               	goto	l6045
 10682  001A5C  D063               	goto	l1393
 10683  001A5E                     l6021:
 10684  001A5E  0E17               	movlw	23
 10685  001A60  6E15               	movwf	??___fttol& (0+255),c
 10686  001A62  C011  F016         	movff	___fttol@f1,??___fttol+1
 10687  001A66  C012  F017         	movff	___fttol@f1+1,??___fttol+2
 10688  001A6A  C013  F018         	movff	___fttol@f1+2,??___fttol+3
 10689  001A6E  2815               	incf	??___fttol,w,c
 10690  001A70  6E19               	movwf	(??___fttol+4)& (0+255),c
 10691  001A72  D004               	goto	u4760
 10692  001A74                     u4765:
 10693  001A74  90D8               	bcf	status,0,c
 10694  001A76  3218               	rrcf	??___fttol+3,f,c
 10695  001A78  3217               	rrcf	??___fttol+2,f,c
 10696  001A7A  3216               	rrcf	??___fttol+1,f,c
 10697  001A7C                     u4760:
 10698  001A7C  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
 10699  001A7E  D7FA               	goto	u4765
 10700  001A80  5016               	movf	??___fttol+1,w,c
 10701  001A82  6E1A               	movwf	___fttol@sign1,c
 10702  001A84  8E12               	bsf	___fttol@f1+1,7,c
 10703  001A86  0EFF               	movlw	255
 10704  001A88  1611               	andwf	___fttol@f1,f,c
 10705  001A8A  0EFF               	movlw	255
 10706  001A8C  1612               	andwf	___fttol@f1+1,f,c
 10707  001A8E  0E00               	movlw	0
 10708  001A90  1613               	andwf	___fttol@f1+2,f,c
 10709  001A92  5011               	movf	___fttol@f1,w,c
 10710  001A94  6E1B               	movwf	___fttol@lval,c
 10711  001A96  5012               	movf	___fttol@f1+1,w,c
 10712  001A98  6E1C               	movwf	___fttol@lval+1,c
 10713  001A9A  5013               	movf	___fttol@f1+2,w,c
 10714  001A9C  6E1D               	movwf	___fttol@lval+2,c
 10715  001A9E  6A1E               	clrf	___fttol@lval+3,c
 10716  001AA0  0E8E               	movlw	142
 10717  001AA2  5E1F               	subwf	___fttol@exp1,f,c
 10718  001AA4  AE1F               	btfss	___fttol@exp1,7,c
 10719  001AA6  D010               	goto	l6043
 10720  001AA8  501F               	movf	___fttol@exp1,w,c
 10721  001AAA  0A80               	xorlw	128
 10722  001AAC  0F8F               	addlw	143
 10723  001AAE  B0D8               	btfsc	status,0,c
 10724  001AB0  D003               	goto	l6039
 10725  001AB2  D00D               	goto	l6045
 10726  001AB4  D037               	goto	l1393
 10727  001AB6  D000               	goto	l6039
 10728  001AB8                     l6039:
 10729  001AB8  90D8               	bcf	status,0,c
 10730  001ABA  321E               	rrcf	___fttol@lval+3,f,c
 10731  001ABC  321D               	rrcf	___fttol@lval+2,f,c
 10732  001ABE  321C               	rrcf	___fttol@lval+1,f,c
 10733  001AC0  321B               	rrcf	___fttol@lval,f,c
 10734  001AC2  3E1F               	incfsz	___fttol@exp1,f,c
 10735  001AC4  D7F9               	goto	l6039
 10736  001AC6  D019               	goto	l6053
 10737  001AC8                     l6043:
 10738  001AC8  0E17               	movlw	23
 10739  001ACA  641F               	cpfsgt	___fttol@exp1,c
 10740  001ACC  D011               	goto	l6051
 10741  001ACE                     l6045:
 10742  001ACE  0E00               	movlw	0
 10743  001AD0  6E11               	movwf	?___fttol,c
 10744  001AD2  0E00               	movlw	0
 10745  001AD4  6E12               	movwf	?___fttol+1,c
 10746  001AD6  0E00               	movlw	0
 10747  001AD8  6E13               	movwf	?___fttol+2,c
 10748  001ADA  0E00               	movlw	0
 10749  001ADC  6E14               	movwf	?___fttol+3,c
 10750  001ADE  D022               	goto	l1393
 10751  001AE0  D007               	goto	l6051
 10752  001AE2                     l6049:
 10753  001AE2  90D8               	bcf	status,0,c
 10754  001AE4  361B               	rlcf	___fttol@lval,f,c
 10755  001AE6  361C               	rlcf	___fttol@lval+1,f,c
 10756  001AE8  361D               	rlcf	___fttol@lval+2,f,c
 10757  001AEA  361E               	rlcf	___fttol@lval+3,f,c
 10758  001AEC  061F               	decf	___fttol@exp1,f,c
 10759  001AEE  D000               	goto	l6051
 10760  001AF0                     l6051:
 10761  001AF0  501F               	movf	___fttol@exp1,w,c
 10762  001AF2  B4D8               	btfsc	status,2,c
 10763  001AF4  D002               	goto	l6053
 10764  001AF6  D7F5               	goto	l6049
 10765  001AF8  D000               	goto	l6053
 10766  001AFA                     l6053:
 10767  001AFA  501A               	movf	___fttol@sign1,w,c
 10768  001AFC  B4D8               	btfsc	status,2,c
 10769  001AFE  D009               	goto	l6057
 10770  001B00  1E1E               	comf	___fttol@lval+3,f,c
 10771  001B02  1E1D               	comf	___fttol@lval+2,f,c
 10772  001B04  1E1C               	comf	___fttol@lval+1,f,c
 10773  001B06  6C1B               	negf	___fttol@lval,c
 10774  001B08  0E00               	movlw	0
 10775  001B0A  221C               	addwfc	___fttol@lval+1,f,c
 10776  001B0C  221D               	addwfc	___fttol@lval+2,f,c
 10777  001B0E  221E               	addwfc	___fttol@lval+3,f,c
 10778  001B10  D000               	goto	l6057
 10779  001B12                     l6057:
 10780  001B12  C01B  F011         	movff	___fttol@lval,?___fttol
 10781  001B16  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
 10782  001B1A  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
 10783  001B1E  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
 10784  001B22  D000               	goto	l1393
 10785  001B24                     l1393:
 10786  001B24  0012               	return		;funcret
 10787  001B26                     __end_of___fttol:
 10788                           	opt stack 0
 10789                           tblptru	equ	0xFF8
 10790                           tblptrh	equ	0xFF7
 10791                           tblptrl	equ	0xFF6
 10792                           tablat	equ	0xFF5
 10793                           prodh	equ	0xFF4
 10794                           prodl	equ	0xFF3
 10795                           intcon	equ	0xFF2
 10796                           intcon2	equ	0xFF1
 10797                           postinc0	equ	0xFEE
 10798                           wreg	equ	0xFE8
 10799                           postdec1	equ	0xFE5
 10800                           fsr1l	equ	0xFE1
 10801                           indf2	equ	0xFDF
 10802                           postinc2	equ	0xFDE
 10803                           postdec2	equ	0xFDD
 10804                           fsr2h	equ	0xFDA
 10805                           fsr2l	equ	0xFD9
 10806                           status	equ	0xFD8
 10807                           
 10808 ;; *************** function ___ftmul *****************
 10809 ;; Defined at:
 10810 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;  f1              3   28[COMRAM] float 
 10813 ;;  f2              3   31[COMRAM] float 
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;  f3_as_produc    3   38[COMRAM] unsigned um
 10816 ;;  sign            1   42[COMRAM] unsigned char 
 10817 ;;  cntr            1   41[COMRAM] unsigned char 
 10818 ;;  exp             1   37[COMRAM] unsigned char 
 10819 ;; Return value:  Size  Location     Type
 10820 ;;                  3   28[COMRAM] float 
 10821 ;; Registers used:
 10822 ;;		wreg, status,2, status,0, cstack
 10823 ;; Tracked objects:
 10824 ;;		On entry : 0/0
 10825 ;;		On exit  : 0/0
 10826 ;;		Unchanged: 0/0
 10827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10828 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10829 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10830 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10831 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10832 ;;Total ram usage:       15 bytes
 10833 ;; Hardware stack levels used:    1
 10834 ;; Hardware stack levels required when called:    4
 10835 ;; This function calls:
 10836 ;;		___ftpack
 10837 ;; This function is called by:
 10838 ;;		_do_update_pwm
 10839 ;; This function uses a non-reentrant model
 10840 ;;
 10841                           
 10842                           	psect	text50
 10843  001856                     __ptext50:
 10844                           	opt stack 0
 10845  001856                     ___ftmul:
 10846                           	opt stack 25
 10847                           
 10848                           ;incstack = 0
 10849  001856  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
 10850  00185A  6A24               	clrf	(??___ftmul+1)& (0+255),c
 10851  00185C  6A25               	clrf	(??___ftmul+2)& (0+255),c
 10852  00185E  341E               	rlcf	___ftmul@f1+1,w,c
 10853  001860  3623               	rlcf	??___ftmul& (0+255),f,c
 10854  001862  E301               	bnc	u4681
 10855  001864  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 10856  001866                     u4681:
 10857  001866  5023               	movf	??___ftmul,w,c
 10858  001868  6E26               	movwf	___ftmul@exp,c
 10859  00186A  5026               	movf	___ftmul@exp,w,c
 10860  00186C  A4D8               	btfss	status,2,c
 10861  00186E  D002               	goto	l5973
 10862  001870  D00E               	goto	l5975
 10863  001872  D06C               	goto	l1372
 10864  001874                     l5973:
 10865  001874  C022  F023         	movff	___ftmul@f2+2,??___ftmul
 10866  001878  6A24               	clrf	(??___ftmul+1)& (0+255),c
 10867  00187A  6A25               	clrf	(??___ftmul+2)& (0+255),c
 10868  00187C  3421               	rlcf	___ftmul@f2+1,w,c
 10869  00187E  3623               	rlcf	??___ftmul& (0+255),f,c
 10870  001880  E301               	bnc	u4701
 10871  001882  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 10872  001884                     u4701:
 10873  001884  5023               	movf	??___ftmul,w,c
 10874  001886  6E2B               	movwf	___ftmul@sign,c
 10875  001888  502B               	movf	___ftmul@sign,w,c
 10876  00188A  A4D8               	btfss	status,2,c
 10877  00188C  D007               	goto	l5979
 10878  00188E                     l5975:
 10879  00188E  0E00               	movlw	0
 10880  001890  6E1D               	movwf	?___ftmul,c
 10881  001892  0E00               	movlw	0
 10882  001894  6E1E               	movwf	?___ftmul+1,c
 10883  001896  0E00               	movlw	0
 10884  001898  6E1F               	movwf	?___ftmul+2,c
 10885  00189A  D058               	goto	l1372
 10886  00189C                     l5979:
 10887  00189C  502B               	movf	___ftmul@sign,w,c
 10888  00189E  0F7B               	addlw	123
 10889  0018A0  2626               	addwf	___ftmul@exp,f,c
 10890  0018A2  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
 10891  0018A6  5022               	movf	___ftmul@f2+2,w,c
 10892  0018A8  1A2B               	xorwf	___ftmul@sign,f,c
 10893  0018AA  0E80               	movlw	128
 10894  0018AC  162B               	andwf	___ftmul@sign,f,c
 10895  0018AE  8E1E               	bsf	___ftmul@f1+1,7,c
 10896  0018B0  8E21               	bsf	___ftmul@f2+1,7,c
 10897  0018B2  0EFF               	movlw	255
 10898  0018B4  1620               	andwf	___ftmul@f2,f,c
 10899  0018B6  0EFF               	movlw	255
 10900  0018B8  1621               	andwf	___ftmul@f2+1,f,c
 10901  0018BA  0E00               	movlw	0
 10902  0018BC  1622               	andwf	___ftmul@f2+2,f,c
 10903  0018BE  0E00               	movlw	0
 10904  0018C0  6E27               	movwf	___ftmul@f3_as_product,c
 10905  0018C2  0E00               	movlw	0
 10906  0018C4  6E28               	movwf	___ftmul@f3_as_product+1,c
 10907  0018C6  0E00               	movlw	0
 10908  0018C8  6E29               	movwf	___ftmul@f3_as_product+2,c
 10909  0018CA  0E07               	movlw	7
 10910  0018CC  6E2A               	movwf	___ftmul@cntr,c
 10911  0018CE  D000               	goto	l5993
 10912  0018D0                     l5993:
 10913  0018D0  A01D               	btfss	___ftmul@f1,0,c
 10914  0018D2  D007               	goto	l5997
 10915  0018D4  5020               	movf	___ftmul@f2,w,c
 10916  0018D6  2627               	addwf	___ftmul@f3_as_product,f,c
 10917  0018D8  5021               	movf	___ftmul@f2+1,w,c
 10918  0018DA  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 10919  0018DC  5022               	movf	___ftmul@f2+2,w,c
 10920  0018DE  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 10921  0018E0  D000               	goto	l5997
 10922  0018E2                     l5997:
 10923  0018E2  90D8               	bcf	status,0,c
 10924  0018E4  321F               	rrcf	___ftmul@f1+2,f,c
 10925  0018E6  321E               	rrcf	___ftmul@f1+1,f,c
 10926  0018E8  321D               	rrcf	___ftmul@f1,f,c
 10927  0018EA  90D8               	bcf	status,0,c
 10928  0018EC  3620               	rlcf	___ftmul@f2,f,c
 10929  0018EE  3621               	rlcf	___ftmul@f2+1,f,c
 10930  0018F0  3622               	rlcf	___ftmul@f2+2,f,c
 10931  0018F2  2E2A               	decfsz	___ftmul@cntr,f,c
 10932  0018F4  D7ED               	goto	l5993
 10933  0018F6  D000               	goto	l6001
 10934  0018F8                     l6001:
 10935  0018F8  0E09               	movlw	9
 10936  0018FA  6E2A               	movwf	___ftmul@cntr,c
 10937  0018FC  D000               	goto	l6003
 10938  0018FE                     l6003:
 10939  0018FE  A01D               	btfss	___ftmul@f1,0,c
 10940  001900  D007               	goto	l6007
 10941  001902  5020               	movf	___ftmul@f2,w,c
 10942  001904  2627               	addwf	___ftmul@f3_as_product,f,c
 10943  001906  5021               	movf	___ftmul@f2+1,w,c
 10944  001908  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 10945  00190A  5022               	movf	___ftmul@f2+2,w,c
 10946  00190C  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 10947  00190E  D000               	goto	l6007
 10948  001910                     l6007:
 10949  001910  90D8               	bcf	status,0,c
 10950  001912  321F               	rrcf	___ftmul@f1+2,f,c
 10951  001914  321E               	rrcf	___ftmul@f1+1,f,c
 10952  001916  321D               	rrcf	___ftmul@f1,f,c
 10953  001918  90D8               	bcf	status,0,c
 10954  00191A  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 10955  00191C  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 10956  00191E  3227               	rrcf	___ftmul@f3_as_product,f,c
 10957  001920  2E2A               	decfsz	___ftmul@cntr,f,c
 10958  001922  D7ED               	goto	l6003
 10959  001924  D000               	goto	l6011
 10960  001926                     l6011:
 10961  001926  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 10962  00192A  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10963  00192E  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10964  001932  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 10965  001936  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 10966  00193A  EC72  F00E         	call	___ftpack	;wreg free
 10967  00193E  C011  F01D         	movff	?___ftpack,?___ftmul
 10968  001942  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 10969  001946  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 10970  00194A  D000               	goto	l1372
 10971  00194C                     l1372:
 10972  00194C  0012               	return		;funcret
 10973  00194E                     __end_of___ftmul:
 10974                           	opt stack 0
 10975                           tblptru	equ	0xFF8
 10976                           tblptrh	equ	0xFF7
 10977                           tblptrl	equ	0xFF6
 10978                           tablat	equ	0xFF5
 10979                           prodh	equ	0xFF4
 10980                           prodl	equ	0xFF3
 10981                           intcon	equ	0xFF2
 10982                           intcon2	equ	0xFF1
 10983                           postinc0	equ	0xFEE
 10984                           wreg	equ	0xFE8
 10985                           postdec1	equ	0xFE5
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           fsr2h	equ	0xFDA
 10991                           fsr2l	equ	0xFD9
 10992                           status	equ	0xFD8
 10993                           
 10994 ;; *************** function ___ftdiv *****************
 10995 ;; Defined at:
 10996 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;  f1              3   43[COMRAM] float 
 10999 ;;  f2              3   46[COMRAM] float 
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;  f3              3   53[COMRAM] float 
 11002 ;;  sign            1   57[COMRAM] unsigned char 
 11003 ;;  exp             1   56[COMRAM] unsigned char 
 11004 ;;  cntr            1   52[COMRAM] unsigned char 
 11005 ;; Return value:  Size  Location     Type
 11006 ;;                  3   43[COMRAM] float 
 11007 ;; Registers used:
 11008 ;;		wreg, status,2, status,0, cstack
 11009 ;; Tracked objects:
 11010 ;;		On entry : 0/0
 11011 ;;		On exit  : 0/0
 11012 ;;		Unchanged: 0/0
 11013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11014 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;Total ram usage:       15 bytes
 11019 ;; Hardware stack levels used:    1
 11020 ;; Hardware stack levels required when called:    4
 11021 ;; This function calls:
 11022 ;;		___ftpack
 11023 ;; This function is called by:
 11024 ;;		_do_update_pwm
 11025 ;; This function uses a non-reentrant model
 11026 ;;
 11027                           
 11028                           	psect	text51
 11029  001B26                     __ptext51:
 11030                           	opt stack 0
 11031  001B26                     ___ftdiv:
 11032                           	opt stack 25
 11033                           
 11034                           ;incstack = 0
 11035  001B26  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 11036  001B2A  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 11037  001B2C  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 11038  001B2E  342D               	rlcf	___ftdiv@f1+1,w,c
 11039  001B30  3632               	rlcf	??___ftdiv& (0+255),f,c
 11040  001B32  E301               	bnc	u4631
 11041  001B34  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 11042  001B36                     u4631:
 11043  001B36  5032               	movf	??___ftdiv,w,c
 11044  001B38  6E39               	movwf	___ftdiv@exp,c
 11045  001B3A  5039               	movf	___ftdiv@exp,w,c
 11046  001B3C  A4D8               	btfss	status,2,c
 11047  001B3E  D002               	goto	l5927
 11048  001B40  D00E               	goto	l5929
 11049  001B42  D061               	goto	l1357
 11050  001B44                     l5927:
 11051  001B44  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 11052  001B48  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 11053  001B4A  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 11054  001B4C  3430               	rlcf	___ftdiv@f2+1,w,c
 11055  001B4E  3632               	rlcf	??___ftdiv& (0+255),f,c
 11056  001B50  E301               	bnc	u4651
 11057  001B52  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 11058  001B54                     u4651:
 11059  001B54  5032               	movf	??___ftdiv,w,c
 11060  001B56  6E3A               	movwf	___ftdiv@sign,c
 11061  001B58  503A               	movf	___ftdiv@sign,w,c
 11062  001B5A  A4D8               	btfss	status,2,c
 11063  001B5C  D007               	goto	l5933
 11064  001B5E                     l5929:
 11065  001B5E  0E00               	movlw	0
 11066  001B60  6E2C               	movwf	?___ftdiv,c
 11067  001B62  0E00               	movlw	0
 11068  001B64  6E2D               	movwf	?___ftdiv+1,c
 11069  001B66  0E00               	movlw	0
 11070  001B68  6E2E               	movwf	?___ftdiv+2,c
 11071  001B6A  D04D               	goto	l1357
 11072  001B6C                     l5933:
 11073  001B6C  0E00               	movlw	0
 11074  001B6E  6E36               	movwf	___ftdiv@f3,c
 11075  001B70  0E00               	movlw	0
 11076  001B72  6E37               	movwf	___ftdiv@f3+1,c
 11077  001B74  0E00               	movlw	0
 11078  001B76  6E38               	movwf	___ftdiv@f3+2,c
 11079  001B78  503A               	movf	___ftdiv@sign,w,c
 11080  001B7A  0F89               	addlw	137
 11081  001B7C  5E39               	subwf	___ftdiv@exp,f,c
 11082  001B7E  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 11083  001B82  5031               	movf	___ftdiv@f2+2,w,c
 11084  001B84  1A3A               	xorwf	___ftdiv@sign,f,c
 11085  001B86  0E80               	movlw	128
 11086  001B88  163A               	andwf	___ftdiv@sign,f,c
 11087  001B8A  8E2D               	bsf	___ftdiv@f1+1,7,c
 11088  001B8C  0EFF               	movlw	255
 11089  001B8E  162C               	andwf	___ftdiv@f1,f,c
 11090  001B90  0EFF               	movlw	255
 11091  001B92  162D               	andwf	___ftdiv@f1+1,f,c
 11092  001B94  0E00               	movlw	0
 11093  001B96  162E               	andwf	___ftdiv@f1+2,f,c
 11094  001B98  8E30               	bsf	___ftdiv@f2+1,7,c
 11095  001B9A  0EFF               	movlw	255
 11096  001B9C  162F               	andwf	___ftdiv@f2,f,c
 11097  001B9E  0EFF               	movlw	255
 11098  001BA0  1630               	andwf	___ftdiv@f2+1,f,c
 11099  001BA2  0E00               	movlw	0
 11100  001BA4  1631               	andwf	___ftdiv@f2+2,f,c
 11101  001BA6  0E18               	movlw	24
 11102  001BA8  6E35               	movwf	___ftdiv@cntr,c
 11103  001BAA  D000               	goto	l5953
 11104  001BAC                     l5953:
 11105  001BAC  90D8               	bcf	status,0,c
 11106  001BAE  3636               	rlcf	___ftdiv@f3,f,c
 11107  001BB0  3637               	rlcf	___ftdiv@f3+1,f,c
 11108  001BB2  3638               	rlcf	___ftdiv@f3+2,f,c
 11109  001BB4  502F               	movf	___ftdiv@f2,w,c
 11110  001BB6  5C2C               	subwf	___ftdiv@f1,w,c
 11111  001BB8  5030               	movf	___ftdiv@f2+1,w,c
 11112  001BBA  582D               	subwfb	___ftdiv@f1+1,w,c
 11113  001BBC  5031               	movf	___ftdiv@f2+2,w,c
 11114  001BBE  582E               	subwfb	___ftdiv@f1+2,w,c
 11115  001BC0  A0D8               	btfss	status,0,c
 11116  001BC2  D007               	goto	l1360
 11117  001BC4  502F               	movf	___ftdiv@f2,w,c
 11118  001BC6  5E2C               	subwf	___ftdiv@f1,f,c
 11119  001BC8  5030               	movf	___ftdiv@f2+1,w,c
 11120  001BCA  5A2D               	subwfb	___ftdiv@f1+1,f,c
 11121  001BCC  5031               	movf	___ftdiv@f2+2,w,c
 11122  001BCE  5A2E               	subwfb	___ftdiv@f1+2,f,c
 11123  001BD0  8036               	bsf	___ftdiv@f3,0,c
 11124  001BD2                     l1360:
 11125  001BD2  90D8               	bcf	status,0,c
 11126  001BD4  362C               	rlcf	___ftdiv@f1,f,c
 11127  001BD6  362D               	rlcf	___ftdiv@f1+1,f,c
 11128  001BD8  362E               	rlcf	___ftdiv@f1+2,f,c
 11129  001BDA  2E35               	decfsz	___ftdiv@cntr,f,c
 11130  001BDC  D7E7               	goto	l5953
 11131  001BDE  D000               	goto	l5963
 11132  001BE0                     l5963:
 11133  001BE0  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 11134  001BE4  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11135  001BE8  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11136  001BEC  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 11137  001BF0  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 11138  001BF4  EC72  F00E         	call	___ftpack	;wreg free
 11139  001BF8  C011  F02C         	movff	?___ftpack,?___ftdiv
 11140  001BFC  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 11141  001C00  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 11142  001C04  D000               	goto	l1357
 11143  001C06                     l1357:
 11144  001C06  0012               	return		;funcret
 11145  001C08                     __end_of___ftdiv:
 11146                           	opt stack 0
 11147                           tblptru	equ	0xFF8
 11148                           tblptrh	equ	0xFF7
 11149                           tblptrl	equ	0xFF6
 11150                           tablat	equ	0xFF5
 11151                           prodh	equ	0xFF4
 11152                           prodl	equ	0xFF3
 11153                           intcon	equ	0xFF2
 11154                           intcon2	equ	0xFF1
 11155                           postinc0	equ	0xFEE
 11156                           wreg	equ	0xFE8
 11157                           postdec1	equ	0xFE5
 11158                           fsr1l	equ	0xFE1
 11159                           indf2	equ	0xFDF
 11160                           postinc2	equ	0xFDE
 11161                           postdec2	equ	0xFDD
 11162                           fsr2h	equ	0xFDA
 11163                           fsr2l	equ	0xFD9
 11164                           status	equ	0xFD8
 11165                           
 11166 ;; *************** function ___ftpack *****************
 11167 ;; Defined at:
 11168 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11169 ;; Parameters:    Size  Location     Type
 11170 ;;  arg             3   16[COMRAM] unsigned um
 11171 ;;  exp             1   19[COMRAM] unsigned char 
 11172 ;;  sign            1   20[COMRAM] unsigned char 
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;		None
 11175 ;; Return value:  Size  Location     Type
 11176 ;;                  3   16[COMRAM] float 
 11177 ;; Registers used:
 11178 ;;		wreg, status,2, status,0
 11179 ;; Tracked objects:
 11180 ;;		On entry : 0/0
 11181 ;;		On exit  : 0/0
 11182 ;;		Unchanged: 0/0
 11183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11184 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11188 ;;Total ram usage:        8 bytes
 11189 ;; Hardware stack levels used:    1
 11190 ;; Hardware stack levels required when called:    3
 11191 ;; This function calls:
 11192 ;;		Nothing
 11193 ;; This function is called by:
 11194 ;;		___ftdiv
 11195 ;;		___ftmul
 11196 ;;		___lbtoft
 11197 ;; This function uses a non-reentrant model
 11198 ;;
 11199                           
 11200                           	psect	text52
 11201  001CE4                     __ptext52:
 11202                           	opt stack 0
 11203  001CE4                     ___ftpack:
 11204                           	opt stack 25
 11205                           
 11206                           ;incstack = 0
 11207  001CE4  5014               	movf	___ftpack@exp,w,c
 11208  001CE6  B4D8               	btfsc	status,2,c
 11209  001CE8  D005               	goto	l5817
 11210  001CEA  5011               	movf	___ftpack@arg,w,c
 11211  001CEC  1012               	iorwf	___ftpack@arg+1,w,c
 11212  001CEE  1013               	iorwf	___ftpack@arg+2,w,c
 11213  001CF0  A4D8               	btfss	status,2,c
 11214  001CF2  D00E               	goto	l5823
 11215  001CF4                     l5817:
 11216  001CF4  0E00               	movlw	0
 11217  001CF6  6E11               	movwf	?___ftpack,c
 11218  001CF8  0E00               	movlw	0
 11219  001CFA  6E12               	movwf	?___ftpack+1,c
 11220  001CFC  0E00               	movlw	0
 11221  001CFE  6E13               	movwf	?___ftpack+2,c
 11222  001D00  D053               	goto	l1285
 11223  001D02  D006               	goto	l5823
 11224  001D04                     l5821:
 11225  001D04  2A14               	incf	___ftpack@exp,f,c
 11226  001D06  90D8               	bcf	status,0,c
 11227  001D08  3213               	rrcf	___ftpack@arg+2,f,c
 11228  001D0A  3212               	rrcf	___ftpack@arg+1,f,c
 11229  001D0C  3211               	rrcf	___ftpack@arg,f,c
 11230  001D0E  D000               	goto	l5823
 11231  001D10                     l5823:
 11232  001D10  0E00               	movlw	0
 11233  001D12  1411               	andwf	___ftpack@arg,w,c
 11234  001D14  6E16               	movwf	??___ftpack& (0+255),c
 11235  001D16  0E00               	movlw	0
 11236  001D18  1412               	andwf	___ftpack@arg+1,w,c
 11237  001D1A  6E17               	movwf	(??___ftpack+1)& (0+255),c
 11238  001D1C  0EFE               	movlw	254
 11239  001D1E  1413               	andwf	___ftpack@arg+2,w,c
 11240  001D20  6E18               	movwf	(??___ftpack+2)& (0+255),c
 11241  001D22  5016               	movf	??___ftpack,w,c
 11242  001D24  1017               	iorwf	??___ftpack+1,w,c
 11243  001D26  1018               	iorwf	??___ftpack+2,w,c
 11244  001D28  B4D8               	btfsc	status,2,c
 11245  001D2A  D00E               	goto	l5829
 11246  001D2C  D7EB               	goto	l5821
 11247  001D2E  D00C               	goto	l5829
 11248  001D30                     l5825:
 11249  001D30  2A14               	incf	___ftpack@exp,f,c
 11250  001D32  0E01               	movlw	1
 11251  001D34  2611               	addwf	___ftpack@arg,f,c
 11252  001D36  0E00               	movlw	0
 11253  001D38  2212               	addwfc	___ftpack@arg+1,f,c
 11254  001D3A  0E00               	movlw	0
 11255  001D3C  2213               	addwfc	___ftpack@arg+2,f,c
 11256  001D3E  90D8               	bcf	status,0,c
 11257  001D40  3213               	rrcf	___ftpack@arg+2,f,c
 11258  001D42  3212               	rrcf	___ftpack@arg+1,f,c
 11259  001D44  3211               	rrcf	___ftpack@arg,f,c
 11260  001D46  D000               	goto	l5829
 11261  001D48                     l5829:
 11262  001D48  0E00               	movlw	0
 11263  001D4A  1411               	andwf	___ftpack@arg,w,c
 11264  001D4C  6E16               	movwf	??___ftpack& (0+255),c
 11265  001D4E  0E00               	movlw	0
 11266  001D50  1412               	andwf	___ftpack@arg+1,w,c
 11267  001D52  6E17               	movwf	(??___ftpack+1)& (0+255),c
 11268  001D54  0EFF               	movlw	255
 11269  001D56  1413               	andwf	___ftpack@arg+2,w,c
 11270  001D58  6E18               	movwf	(??___ftpack+2)& (0+255),c
 11271  001D5A  5016               	movf	??___ftpack,w,c
 11272  001D5C  1017               	iorwf	??___ftpack+1,w,c
 11273  001D5E  1018               	iorwf	??___ftpack+2,w,c
 11274  001D60  B4D8               	btfsc	status,2,c
 11275  001D62  D008               	goto	l5833
 11276  001D64  D7E5               	goto	l5825
 11277  001D66  D006               	goto	l5833
 11278  001D68                     l5831:
 11279  001D68  0614               	decf	___ftpack@exp,f,c
 11280  001D6A  90D8               	bcf	status,0,c
 11281  001D6C  3611               	rlcf	___ftpack@arg,f,c
 11282  001D6E  3612               	rlcf	___ftpack@arg+1,f,c
 11283  001D70  3613               	rlcf	___ftpack@arg+2,f,c
 11284  001D72  D000               	goto	l5833
 11285  001D74                     l5833:
 11286  001D74  BE12               	btfsc	___ftpack@arg+1,7,c
 11287  001D76  D004               	goto	l1296
 11288  001D78  0E02               	movlw	2
 11289  001D7A  6014               	cpfslt	___ftpack@exp,c
 11290  001D7C  D7F5               	goto	l5831
 11291  001D7E  D000               	goto	l1296
 11292  001D80                     l1296:
 11293  001D80  B014               	btfsc	___ftpack@exp,0,c
 11294  001D82  D002               	goto	l5839
 11295  001D84  9E12               	bcf	___ftpack@arg+1,7,c
 11296  001D86  D000               	goto	l5839
 11297  001D88                     l5839:
 11298  001D88  90D8               	bcf	status,0,c
 11299  001D8A  3214               	rrcf	___ftpack@exp,f,c
 11300  001D8C  5014               	movf	___ftpack@exp,w,c
 11301  001D8E  1213               	iorwf	___ftpack@arg+2,f,c
 11302  001D90  5015               	movf	___ftpack@sign,w,c
 11303  001D92  B4D8               	btfsc	status,2,c
 11304  001D94  D002               	goto	l5845
 11305  001D96  8E13               	bsf	___ftpack@arg+2,7,c
 11306  001D98  D000               	goto	l5845
 11307  001D9A                     l5845:
 11308  001D9A  C011  F011         	movff	___ftpack@arg,?___ftpack
 11309  001D9E  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 11310  001DA2  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 11311  001DA6  D000               	goto	l1285
 11312  001DA8                     l1285:
 11313  001DA8  0012               	return		;funcret
 11314  001DAA                     __end_of___ftpack:
 11315                           	opt stack 0
 11316                           tblptru	equ	0xFF8
 11317                           tblptrh	equ	0xFF7
 11318                           tblptrl	equ	0xFF6
 11319                           tablat	equ	0xFF5
 11320                           prodh	equ	0xFF4
 11321                           prodl	equ	0xFF3
 11322                           intcon	equ	0xFF2
 11323                           intcon2	equ	0xFF1
 11324                           postinc0	equ	0xFEE
 11325                           wreg	equ	0xFE8
 11326                           postdec1	equ	0xFE5
 11327                           fsr1l	equ	0xFE1
 11328                           indf2	equ	0xFDF
 11329                           postinc2	equ	0xFDE
 11330                           postdec2	equ	0xFDD
 11331                           fsr2h	equ	0xFDA
 11332                           fsr2l	equ	0xFD9
 11333                           status	equ	0xFD8
 11334                           
 11335 ;; *************** function _Do_Beep *****************
 11336 ;; Defined at:
 11337 ;;		line 10 in file "Utils.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;		None
 11340 ;; Auto vars:     Size  Location     Type
 11341 ;;		None
 11342 ;; Return value:  Size  Location     Type
 11343 ;;                  2   16[None  ] int 
 11344 ;; Registers used:
 11345 ;;		wreg, status,2, cstack
 11346 ;; Tracked objects:
 11347 ;;		On entry : 0/0
 11348 ;;		On exit  : 0/0
 11349 ;;		Unchanged: 0/0
 11350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11355 ;;Total ram usage:        0 bytes
 11356 ;; Hardware stack levels used:    1
 11357 ;; Hardware stack levels required when called:    4
 11358 ;; This function calls:
 11359 ;;		_Activate_Buzzer
 11360 ;;		_Deactivate_Buzzer
 11361 ;;		_Wait_Half_Second
 11362 ;; This function is called by:
 11363 ;;		_Increase_Speed
 11364 ;;		_Decrease_Speed
 11365 ;;		_main
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           	psect	text53
 11370  002928                     __ptext53:
 11371                           	opt stack 0
 11372  002928                     _Do_Beep:
 11373                           	opt stack 25
 11374                           
 11375                           ;Utils.c: 12: Activate_Buzzer();
 11376                           
 11377                           ;incstack = 0
 11378  002928  ECD1  F014         	call	_Activate_Buzzer	;wreg free
 11379                           
 11380                           ;Utils.c: 13: Wait_Half_Second();
 11381  00292C  EC87  F014         	call	_Wait_Half_Second	;wreg free
 11382                           
 11383                           ;Utils.c: 14: Activate_Buzzer();
 11384  002930  ECD1  F014         	call	_Activate_Buzzer	;wreg free
 11385                           
 11386                           ;Utils.c: 15: Wait_Half_Second();
 11387  002934  EC87  F014         	call	_Wait_Half_Second	;wreg free
 11388                           
 11389                           ;Utils.c: 16: Deactivate_Buzzer();
 11390  002938  EC32  F015         	call	_Deactivate_Buzzer	;wreg free
 11391  00293C  0012               	return		;funcret
 11392  00293E                     __end_of_Do_Beep:
 11393                           	opt stack 0
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           intcon2	equ	0xFF1
 11402                           postinc0	equ	0xFEE
 11403                           wreg	equ	0xFE8
 11404                           postdec1	equ	0xFE5
 11405                           fsr1l	equ	0xFE1
 11406                           indf2	equ	0xFDF
 11407                           postinc2	equ	0xFDE
 11408                           postdec2	equ	0xFDD
 11409                           fsr2h	equ	0xFDA
 11410                           fsr2l	equ	0xFD9
 11411                           status	equ	0xFD8
 11412                           
 11413 ;; *************** function _Wait_Half_Second *****************
 11414 ;; Defined at:
 11415 ;;		line 25 in file "Utils.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;		None
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;		None
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  2  135[None  ] int 
 11422 ;; Registers used:
 11423 ;;		wreg, status,2
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11433 ;;Total ram usage:        0 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    3
 11436 ;; This function calls:
 11437 ;;		Nothing
 11438 ;; This function is called by:
 11439 ;;		_main
 11440 ;;		_Do_Beep
 11441 ;;		_Wait_One_Sec
 11442 ;; This function uses a non-reentrant model
 11443 ;;
 11444                           
 11445                           	psect	text54
 11446  00290E                     __ptext54:
 11447                           	opt stack 0
 11448  00290E                     _Wait_Half_Second:
 11449                           	opt stack 27
 11450                           
 11451                           ;Utils.c: 27: T0CON = 0x02;
 11452                           
 11453                           ;incstack = 0
 11454  00290E  0E02               	movlw	2
 11455  002910  6ED5               	movwf	4053,c	;volatile
 11456                           
 11457                           ;Utils.c: 28: TMR0L = 0xDB;
 11458  002912  0EDB               	movlw	219
 11459  002914  6ED6               	movwf	4054,c	;volatile
 11460                           
 11461                           ;Utils.c: 29: TMR0H = 0x0B;
 11462  002916  0E0B               	movlw	11
 11463  002918  6ED7               	movwf	4055,c	;volatile
 11464                           
 11465                           ;Utils.c: 30: INTCONbits.TMR0IF = 0;
 11466  00291A  94F2               	bcf	intcon,2,c	;volatile
 11467                           
 11468                           ;Utils.c: 31: T0CONbits.TMR0ON = 1;
 11469  00291C  8ED5               	bsf	4053,7,c	;volatile
 11470                           
 11471                           ;Utils.c: 32: while (INTCONbits.TMR0IF == 0);
 11472  00291E  D000               	goto	l593
 11473  002920                     l593:
 11474  002920  A4F2               	btfss	intcon,2,c	;volatile
 11475  002922  D7FE               	goto	l593
 11476                           
 11477                           ;Utils.c: 33: T0CONbits.TMR0ON = 0;
 11478  002924  9ED5               	bcf	4053,7,c	;volatile
 11479  002926  0012               	return		;funcret
 11480  002928                     __end_of_Wait_Half_Second:
 11481                           	opt stack 0
 11482                           tblptru	equ	0xFF8
 11483                           tblptrh	equ	0xFF7
 11484                           tblptrl	equ	0xFF6
 11485                           tablat	equ	0xFF5
 11486                           prodh	equ	0xFF4
 11487                           prodl	equ	0xFF3
 11488                           intcon	equ	0xFF2
 11489                           intcon2	equ	0xFF1
 11490                           postinc0	equ	0xFEE
 11491                           wreg	equ	0xFE8
 11492                           postdec1	equ	0xFE5
 11493                           fsr1l	equ	0xFE1
 11494                           indf2	equ	0xFDF
 11495                           postinc2	equ	0xFDE
 11496                           postdec2	equ	0xFDD
 11497                           fsr2h	equ	0xFDA
 11498                           fsr2l	equ	0xFD9
 11499                           status	equ	0xFD8
 11500                           
 11501 ;; *************** function _Deactivate_Buzzer *****************
 11502 ;; Defined at:
 11503 ;;		line 44 in file "Utils.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;		None
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;		None
 11508 ;; Return value:  Size  Location     Type
 11509 ;;                  2  137[None  ] int 
 11510 ;; Registers used:
 11511 ;;		wreg, status,2
 11512 ;; Tracked objects:
 11513 ;;		On entry : 0/0
 11514 ;;		On exit  : 0/0
 11515 ;;		Unchanged: 0/0
 11516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11521 ;;Total ram usage:        0 bytes
 11522 ;; Hardware stack levels used:    1
 11523 ;; Hardware stack levels required when called:    3
 11524 ;; This function calls:
 11525 ;;		Nothing
 11526 ;; This function is called by:
 11527 ;;		_main
 11528 ;;		_Do_Beep
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           	psect	text55
 11533  002A64                     __ptext55:
 11534                           	opt stack 0
 11535  002A64                     _Deactivate_Buzzer:
 11536                           	opt stack 25
 11537                           
 11538                           ;Utils.c: 46: CCP2CON = 0x0;
 11539                           
 11540                           ;incstack = 0
 11541  002A64  0E00               	movlw	0
 11542  002A66  6EBA               	movwf	4026,c	;volatile
 11543                           
 11544                           ;Utils.c: 47: PORTBbits.RB3 = 0;
 11545  002A68  9681               	bcf	3969,3,c	;volatile
 11546  002A6A  0012               	return		;funcret
 11547  002A6C                     __end_of_Deactivate_Buzzer:
 11548                           	opt stack 0
 11549                           tblptru	equ	0xFF8
 11550                           tblptrh	equ	0xFF7
 11551                           tblptrl	equ	0xFF6
 11552                           tablat	equ	0xFF5
 11553                           prodh	equ	0xFF4
 11554                           prodl	equ	0xFF3
 11555                           intcon	equ	0xFF2
 11556                           intcon2	equ	0xFF1
 11557                           postinc0	equ	0xFEE
 11558                           wreg	equ	0xFE8
 11559                           postdec1	equ	0xFE5
 11560                           fsr1l	equ	0xFE1
 11561                           indf2	equ	0xFDF
 11562                           postinc2	equ	0xFDE
 11563                           postdec2	equ	0xFDD
 11564                           fsr2h	equ	0xFDA
 11565                           fsr2l	equ	0xFD9
 11566                           status	equ	0xFD8
 11567                           
 11568 ;; *************** function _Activate_Buzzer *****************
 11569 ;; Defined at:
 11570 ;;		line 36 in file "Utils.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;		None
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;		None
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  2  131[None  ] int 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;Total ram usage:        0 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:    3
 11591 ;; This function calls:
 11592 ;;		Nothing
 11593 ;; This function is called by:
 11594 ;;		_main
 11595 ;;		_Do_Beep
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           	psect	text56
 11600  0029A2                     __ptext56:
 11601                           	opt stack 0
 11602  0029A2                     _Activate_Buzzer:
 11603                           	opt stack 25
 11604                           
 11605                           ;Utils.c: 38: PR2 = 0b11111001 ;
 11606                           
 11607                           ;incstack = 0
 11608  0029A2  0EF9               	movlw	249
 11609  0029A4  6ECB               	movwf	4043,c	;volatile
 11610                           
 11611                           ;Utils.c: 39: T2CON = 0b00000101 ;
 11612  0029A6  0E05               	movlw	5
 11613  0029A8  6ECA               	movwf	4042,c	;volatile
 11614                           
 11615                           ;Utils.c: 40: CCPR2L = 0b01001010 ;
 11616  0029AA  0E4A               	movlw	74
 11617  0029AC  6EBB               	movwf	4027,c	;volatile
 11618                           
 11619                           ;Utils.c: 41: CCP2CON = 0b00111100 ;
 11620  0029AE  0E3C               	movlw	60
 11621  0029B0  6EBA               	movwf	4026,c	;volatile
 11622  0029B2  0012               	return		;funcret
 11623  0029B4                     __end_of_Activate_Buzzer:
 11624                           	opt stack 0
 11625                           tblptru	equ	0xFF8
 11626                           tblptrh	equ	0xFF7
 11627                           tblptrl	equ	0xFF6
 11628                           tablat	equ	0xFF5
 11629                           prodh	equ	0xFF4
 11630                           prodl	equ	0xFF3
 11631                           intcon	equ	0xFF2
 11632                           intcon2	equ	0xFF1
 11633                           postinc0	equ	0xFEE
 11634                           wreg	equ	0xFE8
 11635                           postdec1	equ	0xFE5
 11636                           fsr1l	equ	0xFE1
 11637                           indf2	equ	0xFDF
 11638                           postinc2	equ	0xFDE
 11639                           postdec2	equ	0xFDD
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           
 11644 ;; *************** function _DS3231_Setup_Time *****************
 11645 ;; Defined at:
 11646 ;;		line 64 in file "I2C_Support.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;		None
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;  Address         1   19[COMRAM] unsigned char 
 11651 ;;  Device          1   18[COMRAM] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;		None               void
 11654 ;; Registers used:
 11655 ;;		wreg, status,2, status,0, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;Total ram usage:        2 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    5
 11668 ;; This function calls:
 11669 ;;		_I2C_Start
 11670 ;;		_I2C_Stop
 11671 ;;		_I2C_Write
 11672 ;; This function is called by:
 11673 ;;		_main
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           	psect	text57
 11678  0021EE                     __ptext57:
 11679                           	opt stack 0
 11680  0021EE                     _DS3231_Setup_Time:
 11681                           	opt stack 25
 11682                           
 11683                           ;I2C_Support.c: 66: char Device = 0x68;
 11684                           
 11685                           ;incstack = 0
 11686  0021EE  0E68               	movlw	104
 11687  0021F0  6E13               	movwf	DS3231_Setup_Time@Device,c
 11688                           
 11689                           ;I2C_Support.c: 67: char Address = 0x00;
 11690  0021F2  0E00               	movlw	0
 11691  0021F4  6E14               	movwf	DS3231_Setup_Time@Address,c
 11692                           
 11693                           ;I2C_Support.c: 68: second = 0x00;
 11694  0021F6  0E00               	movlw	0
 11695  0021F8  6E62               	movwf	_second,c
 11696                           
 11697                           ;I2C_Support.c: 69: minute = 0x00;
 11698  0021FA  0E00               	movlw	0
 11699  0021FC  6E5F               	movwf	_minute,c
 11700                           
 11701                           ;I2C_Support.c: 70: hour = 0x00;
 11702  0021FE  0E00               	movlw	0
 11703  002200  6E5D               	movwf	_hour,c
 11704                           
 11705                           ;I2C_Support.c: 71: dow = 0x00;
 11706  002202  0E00               	movlw	0
 11707  002204  6E5A               	movwf	_dow,c
 11708                           
 11709                           ;I2C_Support.c: 72: day = 0x00;
 11710  002206  0E00               	movlw	0
 11711  002208  6E59               	movwf	_day,c
 11712                           
 11713                           ;I2C_Support.c: 73: month = 0x00;
 11714  00220A  0E00               	movlw	0
 11715  00220C  6E60               	movwf	_month,c
 11716                           
 11717                           ;I2C_Support.c: 74: year = 0x00;
 11718  00220E  0E00               	movlw	0
 11719  002210  6E6C               	movwf	_year,c
 11720                           
 11721                           ;I2C_Support.c: 75: I2C_Start();
 11722  002212  ECE3  F014         	call	_I2C_Start	;wreg free
 11723                           
 11724                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
 11725  002216  5013               	movf	DS3231_Setup_Time@Device,w,c
 11726  002218  2413               	addwf	DS3231_Setup_Time@Device,w,c
 11727  00221A  EC4E  F013         	call	_I2C_Write
 11728                           
 11729                           ;I2C_Support.c: 77: I2C_Write(Address);
 11730  00221E  5014               	movf	DS3231_Setup_Time@Address,w,c
 11731  002220  EC4E  F013         	call	_I2C_Write
 11732                           
 11733                           ;I2C_Support.c: 78: I2C_Write(second);
 11734  002224  5062               	movf	_second,w,c
 11735  002226  EC4E  F013         	call	_I2C_Write
 11736                           
 11737                           ;I2C_Support.c: 79: I2C_Write(minute);
 11738  00222A  505F               	movf	_minute,w,c
 11739  00222C  EC4E  F013         	call	_I2C_Write
 11740                           
 11741                           ;I2C_Support.c: 80: I2C_Write(hour);
 11742  002230  505D               	movf	_hour,w,c
 11743  002232  EC4E  F013         	call	_I2C_Write
 11744                           
 11745                           ;I2C_Support.c: 81: I2C_Write(dow);
 11746  002236  505A               	movf	_dow,w,c
 11747  002238  EC4E  F013         	call	_I2C_Write
 11748                           
 11749                           ;I2C_Support.c: 82: I2C_Write(day);
 11750  00223C  5059               	movf	_day,w,c
 11751  00223E  EC4E  F013         	call	_I2C_Write
 11752                           
 11753                           ;I2C_Support.c: 83: I2C_Write(month);
 11754  002242  5060               	movf	_month,w,c
 11755  002244  EC4E  F013         	call	_I2C_Write
 11756                           
 11757                           ;I2C_Support.c: 84: I2C_Write(year);
 11758  002248  506C               	movf	_year,w,c
 11759  00224A  EC4E  F013         	call	_I2C_Write
 11760                           
 11761                           ;I2C_Support.c: 85: I2C_Stop();
 11762  00224E  ECDA  F014         	call	_I2C_Stop	;wreg free
 11763  002252  0012               	return		;funcret
 11764  002254                     __end_of_DS3231_Setup_Time:
 11765                           	opt stack 0
 11766                           tblptru	equ	0xFF8
 11767                           tblptrh	equ	0xFF7
 11768                           tblptrl	equ	0xFF6
 11769                           tablat	equ	0xFF5
 11770                           prodh	equ	0xFF4
 11771                           prodl	equ	0xFF3
 11772                           intcon	equ	0xFF2
 11773                           intcon2	equ	0xFF1
 11774                           postinc0	equ	0xFEE
 11775                           wreg	equ	0xFE8
 11776                           postdec1	equ	0xFE5
 11777                           fsr1l	equ	0xFE1
 11778                           indf2	equ	0xFDF
 11779                           postinc2	equ	0xFDE
 11780                           postdec2	equ	0xFDD
 11781                           fsr2h	equ	0xFDA
 11782                           fsr2l	equ	0xFD9
 11783                           status	equ	0xFD8
 11784                           
 11785 ;; *************** function _DS3231_Read_Time *****************
 11786 ;; Defined at:
 11787 ;;		line 43 in file "I2C_Support.c"
 11788 ;; Parameters:    Size  Location     Type
 11789 ;;		None
 11790 ;; Auto vars:     Size  Location     Type
 11791 ;;  Device          1   20[COMRAM] unsigned char 
 11792 ;;  Address         1   19[COMRAM] unsigned char 
 11793 ;; Return value:  Size  Location     Type
 11794 ;;		None               void
 11795 ;; Registers used:
 11796 ;;		wreg, status,2, status,0, cstack
 11797 ;; Tracked objects:
 11798 ;;		On entry : 0/0
 11799 ;;		On exit  : 0/0
 11800 ;;		Unchanged: 0/0
 11801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;Total ram usage:        2 bytes
 11807 ;; Hardware stack levels used:    1
 11808 ;; Hardware stack levels required when called:    6
 11809 ;; This function calls:
 11810 ;;		_I2C_ReStart
 11811 ;;		_I2C_Read
 11812 ;;		_I2C_Start
 11813 ;;		_I2C_Stop
 11814 ;;		_I2C_Write
 11815 ;; This function is called by:
 11816 ;;		_main
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           	psect	text58
 11821  0022BA                     __ptext58:
 11822                           	opt stack 0
 11823  0022BA                     _DS3231_Read_Time:
 11824                           	opt stack 24
 11825                           
 11826                           ;I2C_Support.c: 45: char Device = 0x68;
 11827                           
 11828                           ;incstack = 0
 11829  0022BA  0E68               	movlw	104
 11830  0022BC  6E15               	movwf	DS3231_Read_Time@Device,c
 11831                           
 11832                           ;I2C_Support.c: 46: char Address = 0x00;
 11833  0022BE  0E00               	movlw	0
 11834  0022C0  6E14               	movwf	DS3231_Read_Time@Address,c
 11835                           
 11836                           ;I2C_Support.c: 47: I2C_Start();
 11837  0022C2  ECE3  F014         	call	_I2C_Start	;wreg free
 11838                           
 11839                           ;I2C_Support.c: 48: I2C_Write((Device << 1) | 0);
 11840  0022C6  5015               	movf	DS3231_Read_Time@Device,w,c
 11841  0022C8  2415               	addwf	DS3231_Read_Time@Device,w,c
 11842  0022CA  EC4E  F013         	call	_I2C_Write
 11843                           
 11844                           ;I2C_Support.c: 49: I2C_Write(Address);
 11845  0022CE  5014               	movf	DS3231_Read_Time@Address,w,c
 11846  0022D0  EC4E  F013         	call	_I2C_Write
 11847                           
 11848                           ;I2C_Support.c: 50: I2C_ReStart();
 11849  0022D4  EC9F  F014         	call	_I2C_ReStart	;wreg free
 11850                           
 11851                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 1);
 11852  0022D8  80D8               	bsf	status,0,c
 11853  0022DA  3415               	rlcf	DS3231_Read_Time@Device,w,c
 11854  0022DC  EC4E  F013         	call	_I2C_Write
 11855                           
 11856                           ;I2C_Support.c: 52: second = I2C_Read(1);
 11857  0022E0  0E01               	movlw	1
 11858  0022E2  ECAD  F012         	call	_I2C_Read
 11859  0022E6  6E62               	movwf	_second,c
 11860                           
 11861                           ;I2C_Support.c: 53: minute = I2C_Read(1);
 11862  0022E8  0E01               	movlw	1
 11863  0022EA  ECAD  F012         	call	_I2C_Read
 11864  0022EE  6E5F               	movwf	_minute,c
 11865                           
 11866                           ;I2C_Support.c: 54: hour = I2C_Read(1);
 11867  0022F0  0E01               	movlw	1
 11868  0022F2  ECAD  F012         	call	_I2C_Read
 11869  0022F6  6E5D               	movwf	_hour,c
 11870                           
 11871                           ;I2C_Support.c: 55: dow = I2C_Read(1);
 11872  0022F8  0E01               	movlw	1
 11873  0022FA  ECAD  F012         	call	_I2C_Read
 11874  0022FE  6E5A               	movwf	_dow,c
 11875                           
 11876                           ;I2C_Support.c: 56: day = I2C_Read(1);
 11877  002300  0E01               	movlw	1
 11878  002302  ECAD  F012         	call	_I2C_Read
 11879  002306  6E59               	movwf	_day,c
 11880                           
 11881                           ;I2C_Support.c: 57: month = I2C_Read(1);
 11882  002308  0E01               	movlw	1
 11883  00230A  ECAD  F012         	call	_I2C_Read
 11884  00230E  6E60               	movwf	_month,c
 11885                           
 11886                           ;I2C_Support.c: 58: year = I2C_Read(0);
 11887  002310  0E00               	movlw	0
 11888  002312  ECAD  F012         	call	_I2C_Read
 11889  002316  6E6C               	movwf	_year,c
 11890                           
 11891                           ;I2C_Support.c: 60: I2C_Stop();
 11892  002318  ECDA  F014         	call	_I2C_Stop	;wreg free
 11893  00231C  0012               	return		;funcret
 11894  00231E                     __end_of_DS3231_Read_Time:
 11895                           	opt stack 0
 11896                           tblptru	equ	0xFF8
 11897                           tblptrh	equ	0xFF7
 11898                           tblptrl	equ	0xFF6
 11899                           tablat	equ	0xFF5
 11900                           prodh	equ	0xFF4
 11901                           prodl	equ	0xFF3
 11902                           intcon	equ	0xFF2
 11903                           intcon2	equ	0xFF1
 11904                           postinc0	equ	0xFEE
 11905                           wreg	equ	0xFE8
 11906                           postdec1	equ	0xFE5
 11907                           fsr1l	equ	0xFE1
 11908                           indf2	equ	0xFDF
 11909                           postinc2	equ	0xFDE
 11910                           postdec2	equ	0xFDD
 11911                           fsr2h	equ	0xFDA
 11912                           fsr2l	equ	0xFD9
 11913                           status	equ	0xFD8
 11914                           
 11915 ;; *************** function _DS1621_Read_Temp *****************
 11916 ;; Defined at:
 11917 ;;		line 28 in file "I2C_Support.c"
 11918 ;; Parameters:    Size  Location     Type
 11919 ;;		None
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;  Device          1   23[COMRAM] unsigned char 
 11922 ;;  Data_Ret        1   22[COMRAM] char 
 11923 ;;  Cmd             1   21[COMRAM] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  2   19[COMRAM] int 
 11926 ;; Registers used:
 11927 ;;		wreg, status,2, status,0, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11934 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;Total ram usage:        5 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    6
 11940 ;; This function calls:
 11941 ;;		_I2C_ReStart
 11942 ;;		_I2C_Read
 11943 ;;		_I2C_Start
 11944 ;;		_I2C_Stop
 11945 ;;		_I2C_Write
 11946 ;; This function is called by:
 11947 ;;		_main
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           	psect	text59
 11952  0025A2                     __ptext59:
 11953                           	opt stack 0
 11954  0025A2                     _DS1621_Read_Temp:
 11955                           	opt stack 24
 11956                           
 11957                           ;I2C_Support.c: 30: char Device = 0x48;
 11958                           
 11959                           ;incstack = 0
 11960  0025A2  0E48               	movlw	72
 11961  0025A4  6E18               	movwf	DS1621_Read_Temp@Device,c
 11962                           
 11963                           ;I2C_Support.c: 31: char Cmd = 0xAA;
 11964  0025A6  0EAA               	movlw	170
 11965  0025A8  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 11966                           
 11967                           ;I2C_Support.c: 32: signed char Data_Ret;
 11968                           ;I2C_Support.c: 33: I2C_Start();
 11969  0025AA  ECE3  F014         	call	_I2C_Start	;wreg free
 11970                           
 11971                           ;I2C_Support.c: 34: I2C_Write((Device << 1) | 0);
 11972  0025AE  5018               	movf	DS1621_Read_Temp@Device,w,c
 11973  0025B0  2418               	addwf	DS1621_Read_Temp@Device,w,c
 11974  0025B2  EC4E  F013         	call	_I2C_Write
 11975                           
 11976                           ;I2C_Support.c: 35: I2C_Write(Cmd);
 11977  0025B6  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 11978  0025B8  EC4E  F013         	call	_I2C_Write
 11979                           
 11980                           ;I2C_Support.c: 36: I2C_ReStart();
 11981  0025BC  EC9F  F014         	call	_I2C_ReStart	;wreg free
 11982                           
 11983                           ;I2C_Support.c: 37: I2C_Write((Device << 1) | 1);
 11984  0025C0  80D8               	bsf	status,0,c
 11985  0025C2  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 11986  0025C4  EC4E  F013         	call	_I2C_Write
 11987                           
 11988                           ;I2C_Support.c: 38: Data_Ret = I2C_Read(0);
 11989  0025C8  0E00               	movlw	0
 11990  0025CA  ECAD  F012         	call	_I2C_Read
 11991  0025CE  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 11992                           
 11993                           ;I2C_Support.c: 39: I2C_Stop();
 11994  0025D0  ECDA  F014         	call	_I2C_Stop	;wreg free
 11995                           
 11996                           ;I2C_Support.c: 40: return Data_Ret;
 11997  0025D4  5017               	movf	DS1621_Read_Temp@Data_Ret,w,c
 11998  0025D6  6E14               	movwf	?_DS1621_Read_Temp,c
 11999  0025D8  6A15               	clrf	?_DS1621_Read_Temp+1,c
 12000  0025DA  BE14               	btfsc	?_DS1621_Read_Temp,7,c
 12001  0025DC  0615               	decf	?_DS1621_Read_Temp+1,f,c
 12002  0025DE  D000               	goto	l788
 12003  0025E0                     l788:
 12004  0025E0  0012               	return		;funcret
 12005  0025E2                     __end_of_DS1621_Read_Temp:
 12006                           	opt stack 0
 12007                           tblptru	equ	0xFF8
 12008                           tblptrh	equ	0xFF7
 12009                           tblptrl	equ	0xFF6
 12010                           tablat	equ	0xFF5
 12011                           prodh	equ	0xFF4
 12012                           prodl	equ	0xFF3
 12013                           intcon	equ	0xFF2
 12014                           intcon2	equ	0xFF1
 12015                           postinc0	equ	0xFEE
 12016                           wreg	equ	0xFE8
 12017                           postdec1	equ	0xFE5
 12018                           fsr1l	equ	0xFE1
 12019                           indf2	equ	0xFDF
 12020                           postinc2	equ	0xFDE
 12021                           postdec2	equ	0xFDD
 12022                           fsr2h	equ	0xFDA
 12023                           fsr2l	equ	0xFD9
 12024                           status	equ	0xFD8
 12025                           
 12026 ;; *************** function _I2C_Write *****************
 12027 ;; Defined at:
 12028 ;;		line 41 in file "I2C_Soft.c"
 12029 ;; Parameters:    Size  Location     Type
 12030 ;;  outByte         1    wreg     unsigned char 
 12031 ;; Auto vars:     Size  Location     Type
 12032 ;;  outByte         1   16[COMRAM] unsigned char 
 12033 ;;  n               1   17[COMRAM] unsigned char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;		None               void
 12036 ;; Registers used:
 12037 ;;		wreg, status,2, status,0, cstack
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12047 ;;Total ram usage:        2 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    4
 12050 ;; This function calls:
 12051 ;;		_i2cHighScl
 12052 ;;		_i2cHighSda
 12053 ;;		_i2cLowScl
 12054 ;;		_i2cLowSda
 12055 ;; This function is called by:
 12056 ;;		_I2C_Write_Cmd_Only
 12057 ;;		_I2C_Write_Cmd_Write_Data
 12058 ;;		_DS1621_Read_Temp
 12059 ;;		_DS3231_Read_Time
 12060 ;;		_DS3231_Setup_Time
 12061 ;;		_I2C_Write_Address_Read_One_Byte
 12062 ;;		_I2C_Write_Address_Write_One_Byte
 12063 ;;		_I2C_Write_Cmd_Read_One_Byte
 12064 ;; This function uses a non-reentrant model
 12065 ;;
 12066                           
 12067                           	psect	text60
 12068  00269C                     __ptext60:
 12069                           	opt stack 0
 12070  00269C                     _I2C_Write:
 12071                           	opt stack 23
 12072                           
 12073                           ;incstack = 0
 12074                           ;I2C_Write@outByte stored from wreg
 12075  00269C  6E11               	movwf	I2C_Write@outByte,c
 12076                           
 12077                           ;I2C_Soft.c: 43: unsigned char n;
 12078                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
 12079  00269E  0E00               	movlw	0
 12080  0026A0  6E12               	movwf	I2C_Write@n,c
 12081  0026A2                     l5883:
 12082  0026A2  0E07               	movlw	7
 12083  0026A4  6412               	cpfsgt	I2C_Write@n,c
 12084  0026A6  D001               	goto	l639
 12085  0026A8  D011               	goto	l5901
 12086  0026AA                     l639:
 12087                           
 12088                           ;I2C_Soft.c: 45: {
 12089                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
 12090  0026AA  AE11               	btfss	I2C_Write@outByte,7,c
 12091  0026AC  D003               	goto	l5889
 12092  0026AE  EC3A  F015         	call	_i2cHighSda	;wreg free
 12093  0026B2  D003               	goto	l5891
 12094  0026B4                     l5889:
 12095                           
 12096                           ;I2C_Soft.c: 47: else i2cLowSda();
 12097  0026B4  EC29  F015         	call	_i2cLowSda	;wreg free
 12098  0026B8  D000               	goto	l5891
 12099  0026BA                     l5891:
 12100                           
 12101                           ;I2C_Soft.c: 48: i2cHighScl();
 12102  0026BA  EC13  F015         	call	_i2cHighScl	;wreg free
 12103                           
 12104                           ;I2C_Soft.c: 49: i2cLowScl();
 12105  0026BE  EC36  F015         	call	_i2cLowScl	;wreg free
 12106                           
 12107                           ;I2C_Soft.c: 50: outByte = outByte << 1;
 12108  0026C2  5011               	movf	I2C_Write@outByte,w,c
 12109  0026C4  2411               	addwf	I2C_Write@outByte,w,c
 12110  0026C6  6E11               	movwf	I2C_Write@outByte,c
 12111  0026C8  2A12               	incf	I2C_Write@n,f,c
 12112  0026CA  D7EB               	goto	l5883
 12113  0026CC                     l5901:
 12114                           
 12115                           ;I2C_Soft.c: 51: }
 12116                           ;I2C_Soft.c: 52: i2cHighSda();
 12117  0026CC  EC3A  F015         	call	_i2cHighSda	;wreg free
 12118                           
 12119                           ;I2C_Soft.c: 53: i2cHighScl();
 12120  0026D0  EC13  F015         	call	_i2cHighScl	;wreg free
 12121                           
 12122                           ;I2C_Soft.c: 54: i2cLowScl();
 12123  0026D4  EC36  F015         	call	_i2cLowScl	;wreg free
 12124  0026D8  0012               	return		;funcret
 12125  0026DA                     __end_of_I2C_Write:
 12126                           	opt stack 0
 12127                           tblptru	equ	0xFF8
 12128                           tblptrh	equ	0xFF7
 12129                           tblptrl	equ	0xFF6
 12130                           tablat	equ	0xFF5
 12131                           prodh	equ	0xFF4
 12132                           prodl	equ	0xFF3
 12133                           intcon	equ	0xFF2
 12134                           intcon2	equ	0xFF1
 12135                           postinc0	equ	0xFEE
 12136                           wreg	equ	0xFE8
 12137                           postdec1	equ	0xFE5
 12138                           fsr1l	equ	0xFE1
 12139                           indf2	equ	0xFDF
 12140                           postinc2	equ	0xFDE
 12141                           postdec2	equ	0xFDD
 12142                           fsr2h	equ	0xFDA
 12143                           fsr2l	equ	0xFD9
 12144                           status	equ	0xFD8
 12145                           
 12146 ;; *************** function _I2C_Stop *****************
 12147 ;; Defined at:
 12148 ;;		line 88 in file "I2C_Soft.c"
 12149 ;; Parameters:    Size  Location     Type
 12150 ;;		None
 12151 ;; Auto vars:     Size  Location     Type
 12152 ;;		None
 12153 ;; Return value:  Size  Location     Type
 12154 ;;		None               void
 12155 ;; Registers used:
 12156 ;;		wreg, cstack
 12157 ;; Tracked objects:
 12158 ;;		On entry : 0/0
 12159 ;;		On exit  : 0/0
 12160 ;;		Unchanged: 0/0
 12161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12166 ;;Total ram usage:        0 bytes
 12167 ;; Hardware stack levels used:    1
 12168 ;; Hardware stack levels required when called:    4
 12169 ;; This function calls:
 12170 ;;		_i2cHighScl
 12171 ;;		_i2cHighSda
 12172 ;;		_i2cLowScl
 12173 ;;		_i2cLowSda
 12174 ;; This function is called by:
 12175 ;;		_I2C_Write_Cmd_Only
 12176 ;;		_I2C_Write_Cmd_Write_Data
 12177 ;;		_DS1621_Read_Temp
 12178 ;;		_DS3231_Read_Time
 12179 ;;		_DS3231_Setup_Time
 12180 ;;		_I2C_Write_Address_Read_One_Byte
 12181 ;;		_I2C_Write_Address_Write_One_Byte
 12182 ;;		_I2C_Write_Cmd_Read_One_Byte
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           	psect	text61
 12187  0029B4                     __ptext61:
 12188                           	opt stack 0
 12189  0029B4                     _I2C_Stop:
 12190                           	opt stack 23
 12191                           
 12192                           ;I2C_Soft.c: 90: i2cLowScl();
 12193                           
 12194                           ;incstack = 0
 12195  0029B4  EC36  F015         	call	_i2cLowScl	;wreg free
 12196                           
 12197                           ;I2C_Soft.c: 91: i2cLowSda();
 12198  0029B8  EC29  F015         	call	_i2cLowSda	;wreg free
 12199                           
 12200                           ;I2C_Soft.c: 92: i2cHighScl();
 12201  0029BC  EC13  F015         	call	_i2cHighScl	;wreg free
 12202                           
 12203                           ;I2C_Soft.c: 93: i2cHighSda();
 12204  0029C0  EC3A  F015         	call	_i2cHighSda	;wreg free
 12205  0029C4  0012               	return		;funcret
 12206  0029C6                     __end_of_I2C_Stop:
 12207                           	opt stack 0
 12208                           tblptru	equ	0xFF8
 12209                           tblptrh	equ	0xFF7
 12210                           tblptrl	equ	0xFF6
 12211                           tablat	equ	0xFF5
 12212                           prodh	equ	0xFF4
 12213                           prodl	equ	0xFF3
 12214                           intcon	equ	0xFF2
 12215                           intcon2	equ	0xFF1
 12216                           postinc0	equ	0xFEE
 12217                           wreg	equ	0xFE8
 12218                           postdec1	equ	0xFE5
 12219                           fsr1l	equ	0xFE1
 12220                           indf2	equ	0xFDF
 12221                           postinc2	equ	0xFDE
 12222                           postdec2	equ	0xFDD
 12223                           fsr2h	equ	0xFDA
 12224                           fsr2l	equ	0xFD9
 12225                           status	equ	0xFD8
 12226                           
 12227 ;; *************** function _I2C_Start *****************
 12228 ;; Defined at:
 12229 ;;		line 71 in file "I2C_Soft.c"
 12230 ;; Parameters:    Size  Location     Type
 12231 ;;		None
 12232 ;; Auto vars:     Size  Location     Type
 12233 ;;		None
 12234 ;; Return value:  Size  Location     Type
 12235 ;;		None               void
 12236 ;; Registers used:
 12237 ;;		wreg, cstack
 12238 ;; Tracked objects:
 12239 ;;		On entry : 0/0
 12240 ;;		On exit  : 0/0
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12247 ;;Total ram usage:        0 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    4
 12250 ;; This function calls:
 12251 ;;		_i2cHighScl
 12252 ;;		_i2cHighSda
 12253 ;;		_i2cLowScl
 12254 ;;		_i2cLowSda
 12255 ;; This function is called by:
 12256 ;;		_I2C_Write_Cmd_Only
 12257 ;;		_I2C_Write_Cmd_Write_Data
 12258 ;;		_DS1621_Read_Temp
 12259 ;;		_DS3231_Read_Time
 12260 ;;		_DS3231_Setup_Time
 12261 ;;		_I2C_Write_Address_Read_One_Byte
 12262 ;;		_I2C_Write_Address_Write_One_Byte
 12263 ;;		_I2C_Write_Cmd_Read_One_Byte
 12264 ;; This function uses a non-reentrant model
 12265 ;;
 12266                           
 12267                           	psect	text62
 12268  0029C6                     __ptext62:
 12269                           	opt stack 0
 12270  0029C6                     _I2C_Start:
 12271                           	opt stack 23
 12272                           
 12273                           ;I2C_Soft.c: 73: i2cHighSda();
 12274                           
 12275                           ;incstack = 0
 12276  0029C6  EC3A  F015         	call	_i2cHighSda	;wreg free
 12277                           
 12278                           ;I2C_Soft.c: 74: i2cHighScl();
 12279  0029CA  EC13  F015         	call	_i2cHighScl	;wreg free
 12280                           
 12281                           ;I2C_Soft.c: 75: i2cLowSda();
 12282  0029CE  EC29  F015         	call	_i2cLowSda	;wreg free
 12283                           
 12284                           ;I2C_Soft.c: 76: i2cLowScl();
 12285  0029D2  EC36  F015         	call	_i2cLowScl	;wreg free
 12286  0029D6  0012               	return		;funcret
 12287  0029D8                     __end_of_I2C_Start:
 12288                           	opt stack 0
 12289                           tblptru	equ	0xFF8
 12290                           tblptrh	equ	0xFF7
 12291                           tblptrl	equ	0xFF6
 12292                           tablat	equ	0xFF5
 12293                           prodh	equ	0xFF4
 12294                           prodl	equ	0xFF3
 12295                           intcon	equ	0xFF2
 12296                           intcon2	equ	0xFF1
 12297                           postinc0	equ	0xFEE
 12298                           wreg	equ	0xFE8
 12299                           postdec1	equ	0xFE5
 12300                           fsr1l	equ	0xFE1
 12301                           indf2	equ	0xFDF
 12302                           postinc2	equ	0xFDE
 12303                           postdec2	equ	0xFDD
 12304                           fsr2h	equ	0xFDA
 12305                           fsr2l	equ	0xFD9
 12306                           status	equ	0xFD8
 12307                           
 12308 ;; *************** function _I2C_Read *****************
 12309 ;; Defined at:
 12310 ;;		line 20 in file "I2C_Soft.c"
 12311 ;; Parameters:    Size  Location     Type
 12312 ;;  ack             1    wreg     unsigned char 
 12313 ;; Auto vars:     Size  Location     Type
 12314 ;;  ack             1   16[COMRAM] unsigned char 
 12315 ;;  inByte          1   18[COMRAM] unsigned char 
 12316 ;;  n               1   17[COMRAM] unsigned char 
 12317 ;; Return value:  Size  Location     Type
 12318 ;;                  1    wreg      unsigned char 
 12319 ;; Registers used:
 12320 ;;		wreg, status,2, status,0, cstack
 12321 ;; Tracked objects:
 12322 ;;		On entry : 0/0
 12323 ;;		On exit  : 0/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12327 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12330 ;;Total ram usage:        3 bytes
 12331 ;; Hardware stack levels used:    1
 12332 ;; Hardware stack levels required when called:    5
 12333 ;; This function calls:
 12334 ;;		_i2cAck
 12335 ;;		_i2cHighScl
 12336 ;;		_i2cHighSda
 12337 ;;		_i2cLowScl
 12338 ;;		_i2cNack
 12339 ;; This function is called by:
 12340 ;;		_DS1621_Read_Temp
 12341 ;;		_DS3231_Read_Time
 12342 ;;		_I2C_Write_Address_Read_One_Byte
 12343 ;;		_I2C_Write_Cmd_Read_One_Byte
 12344 ;; This function uses a non-reentrant model
 12345 ;;
 12346                           
 12347                           	psect	text63
 12348  00255A                     __ptext63:
 12349                           	opt stack 0
 12350  00255A                     _I2C_Read:
 12351                           	opt stack 24
 12352                           
 12353                           ;incstack = 0
 12354                           ;I2C_Read@ack stored from wreg
 12355  00255A  6E11               	movwf	I2C_Read@ack,c
 12356                           
 12357                           ;I2C_Soft.c: 22: unsigned char inByte, n;
 12358                           ;I2C_Soft.c: 23: i2cHighSda();
 12359  00255C  EC3A  F015         	call	_i2cHighSda	;wreg free
 12360                           
 12361                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
 12362  002560  0E00               	movlw	0
 12363  002562  6E12               	movwf	I2C_Read@n,c
 12364  002564                     l6885:
 12365  002564  0E07               	movlw	7
 12366  002566  6412               	cpfsgt	I2C_Read@n,c
 12367  002568  D001               	goto	l6889
 12368  00256A  D00F               	goto	l6903
 12369  00256C                     l6889:
 12370                           
 12371                           ;I2C_Soft.c: 25: {
 12372                           ;I2C_Soft.c: 26: i2cHighScl();
 12373  00256C  EC13  F015         	call	_i2cHighScl	;wreg free
 12374                           
 12375                           ;I2C_Soft.c: 28: if (PORTDbits.RD6)
 12376  002570  AC83               	btfss	3971,6,c	;volatile
 12377  002572  D003               	goto	l6895
 12378                           
 12379                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
 12380  002574  80D8               	bsf	status,0,c
 12381  002576  3613               	rlcf	I2C_Read@inByte,f,c
 12382  002578  D004               	goto	l6897
 12383  00257A                     l6895:
 12384                           
 12385                           ;I2C_Soft.c: 30: else
 12386                           ;I2C_Soft.c: 31: inByte = inByte << 1;
 12387  00257A  5013               	movf	I2C_Read@inByte,w,c
 12388  00257C  2413               	addwf	I2C_Read@inByte,w,c
 12389  00257E  6E13               	movwf	I2C_Read@inByte,c
 12390  002580  D000               	goto	l6897
 12391  002582                     l6897:
 12392                           
 12393                           ;I2C_Soft.c: 32: i2cLowScl();
 12394  002582  EC36  F015         	call	_i2cLowScl	;wreg free
 12395  002586  2A12               	incf	I2C_Read@n,f,c
 12396  002588  D7ED               	goto	l6885
 12397  00258A                     l6903:
 12398                           
 12399                           ;I2C_Soft.c: 33: }
 12400                           ;I2C_Soft.c: 34: if (ack) i2cAck();
 12401  00258A  5011               	movf	I2C_Read@ack,w,c
 12402  00258C  B4D8               	btfsc	status,2,c
 12403  00258E  D003               	goto	l6907
 12404  002590  ECEC  F014         	call	_i2cAck	;wreg free
 12405  002594  D003               	goto	l6909
 12406  002596                     l6907:
 12407                           
 12408                           ;I2C_Soft.c: 35: else i2cNack();
 12409  002596  EC24  F015         	call	_i2cNack	;wreg free
 12410  00259A  D000               	goto	l6909
 12411  00259C                     l6909:
 12412                           
 12413                           ;I2C_Soft.c: 38: return(inByte);
 12414  00259C  5013               	movf	I2C_Read@inByte,w,c
 12415  00259E  D000               	goto	l636
 12416  0025A0                     l636:
 12417  0025A0  0012               	return		;funcret
 12418  0025A2                     __end_of_I2C_Read:
 12419                           	opt stack 0
 12420                           tblptru	equ	0xFF8
 12421                           tblptrh	equ	0xFF7
 12422                           tblptrl	equ	0xFF6
 12423                           tablat	equ	0xFF5
 12424                           prodh	equ	0xFF4
 12425                           prodl	equ	0xFF3
 12426                           intcon	equ	0xFF2
 12427                           intcon2	equ	0xFF1
 12428                           postinc0	equ	0xFEE
 12429                           wreg	equ	0xFE8
 12430                           postdec1	equ	0xFE5
 12431                           fsr1l	equ	0xFE1
 12432                           indf2	equ	0xFDF
 12433                           postinc2	equ	0xFDE
 12434                           postdec2	equ	0xFDD
 12435                           fsr2h	equ	0xFDA
 12436                           fsr2l	equ	0xFD9
 12437                           status	equ	0xFD8
 12438                           
 12439 ;; *************** function _i2cNack *****************
 12440 ;; Defined at:
 12441 ;;		line 57 in file "I2C_Soft.c"
 12442 ;; Parameters:    Size  Location     Type
 12443 ;;		None
 12444 ;; Auto vars:     Size  Location     Type
 12445 ;;		None
 12446 ;; Return value:  Size  Location     Type
 12447 ;;		None               void
 12448 ;; Registers used:
 12449 ;;		wreg, cstack
 12450 ;; Tracked objects:
 12451 ;;		On entry : 0/0
 12452 ;;		On exit  : 0/0
 12453 ;;		Unchanged: 0/0
 12454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12459 ;;Total ram usage:        0 bytes
 12460 ;; Hardware stack levels used:    1
 12461 ;; Hardware stack levels required when called:    4
 12462 ;; This function calls:
 12463 ;;		_i2cHighScl
 12464 ;;		_i2cLowScl
 12465 ;; This function is called by:
 12466 ;;		_I2C_Read
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470                           	psect	text64
 12471  002A48                     __ptext64:
 12472                           	opt stack 0
 12473  002A48                     _i2cNack:
 12474                           	opt stack 24
 12475                           
 12476                           ;I2C_Soft.c: 59: i2cHighScl();
 12477                           
 12478                           ;incstack = 0
 12479  002A48  EC13  F015         	call	_i2cHighScl	;wreg free
 12480                           
 12481                           ;I2C_Soft.c: 60: i2cLowScl();
 12482  002A4C  EC36  F015         	call	_i2cLowScl	;wreg free
 12483  002A50  0012               	return		;funcret
 12484  002A52                     __end_of_i2cNack:
 12485                           	opt stack 0
 12486                           tblptru	equ	0xFF8
 12487                           tblptrh	equ	0xFF7
 12488                           tblptrl	equ	0xFF6
 12489                           tablat	equ	0xFF5
 12490                           prodh	equ	0xFF4
 12491                           prodl	equ	0xFF3
 12492                           intcon	equ	0xFF2
 12493                           intcon2	equ	0xFF1
 12494                           postinc0	equ	0xFEE
 12495                           wreg	equ	0xFE8
 12496                           postdec1	equ	0xFE5
 12497                           fsr1l	equ	0xFE1
 12498                           indf2	equ	0xFDF
 12499                           postinc2	equ	0xFDE
 12500                           postdec2	equ	0xFDD
 12501                           fsr2h	equ	0xFDA
 12502                           fsr2l	equ	0xFD9
 12503                           status	equ	0xFD8
 12504                           
 12505 ;; *************** function _i2cAck *****************
 12506 ;; Defined at:
 12507 ;;		line 63 in file "I2C_Soft.c"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;		None
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;		None
 12512 ;; Return value:  Size  Location     Type
 12513 ;;		None               void
 12514 ;; Registers used:
 12515 ;;		wreg, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12525 ;;Total ram usage:        0 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    4
 12528 ;; This function calls:
 12529 ;;		_i2cHighScl
 12530 ;;		_i2cHighSda
 12531 ;;		_i2cLowScl
 12532 ;;		_i2cLowSda
 12533 ;; This function is called by:
 12534 ;;		_I2C_Read
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           	psect	text65
 12539  0029D8                     __ptext65:
 12540                           	opt stack 0
 12541  0029D8                     _i2cAck:
 12542                           	opt stack 24
 12543                           
 12544                           ;I2C_Soft.c: 65: i2cLowSda();
 12545                           
 12546                           ;incstack = 0
 12547  0029D8  EC29  F015         	call	_i2cLowSda	;wreg free
 12548                           
 12549                           ;I2C_Soft.c: 66: i2cHighScl();
 12550  0029DC  EC13  F015         	call	_i2cHighScl	;wreg free
 12551                           
 12552                           ;I2C_Soft.c: 67: i2cLowScl();
 12553  0029E0  EC36  F015         	call	_i2cLowScl	;wreg free
 12554                           
 12555                           ;I2C_Soft.c: 68: i2cHighSda();
 12556  0029E4  EC3A  F015         	call	_i2cHighSda	;wreg free
 12557  0029E8  0012               	return		;funcret
 12558  0029EA                     __end_of_i2cAck:
 12559                           	opt stack 0
 12560                           tblptru	equ	0xFF8
 12561                           tblptrh	equ	0xFF7
 12562                           tblptrl	equ	0xFF6
 12563                           tablat	equ	0xFF5
 12564                           prodh	equ	0xFF4
 12565                           prodl	equ	0xFF3
 12566                           intcon	equ	0xFF2
 12567                           intcon2	equ	0xFF1
 12568                           postinc0	equ	0xFEE
 12569                           wreg	equ	0xFE8
 12570                           postdec1	equ	0xFE5
 12571                           fsr1l	equ	0xFE1
 12572                           indf2	equ	0xFDF
 12573                           postinc2	equ	0xFDE
 12574                           postdec2	equ	0xFDD
 12575                           fsr2h	equ	0xFDA
 12576                           fsr2l	equ	0xFD9
 12577                           status	equ	0xFD8
 12578                           
 12579 ;; *************** function _I2C_ReStart *****************
 12580 ;; Defined at:
 12581 ;;		line 79 in file "I2C_Soft.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;		None
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;		None
 12586 ;; Return value:  Size  Location     Type
 12587 ;;		None               void
 12588 ;; Registers used:
 12589 ;;		wreg, cstack
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;Total ram usage:        0 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; Hardware stack levels required when called:    4
 12602 ;; This function calls:
 12603 ;;		_i2cHighScl
 12604 ;;		_i2cHighSda
 12605 ;;		_i2cLowScl
 12606 ;;		_i2cLowSda
 12607 ;; This function is called by:
 12608 ;;		_DS1621_Read_Temp
 12609 ;;		_DS3231_Read_Time
 12610 ;;		_I2C_Write_Address_Read_One_Byte
 12611 ;;		_I2C_Write_Cmd_Read_One_Byte
 12612 ;; This function uses a non-reentrant model
 12613 ;;
 12614                           
 12615                           	psect	text66
 12616  00293E                     __ptext66:
 12617                           	opt stack 0
 12618  00293E                     _I2C_ReStart:
 12619                           	opt stack 25
 12620                           
 12621                           ;I2C_Soft.c: 81: i2cLowScl();
 12622                           
 12623                           ;incstack = 0
 12624  00293E  EC36  F015         	call	_i2cLowScl	;wreg free
 12625                           
 12626                           ;I2C_Soft.c: 82: i2cHighSda();
 12627  002942  EC3A  F015         	call	_i2cHighSda	;wreg free
 12628                           
 12629                           ;I2C_Soft.c: 83: i2cHighScl();
 12630  002946  EC13  F015         	call	_i2cHighScl	;wreg free
 12631                           
 12632                           ;I2C_Soft.c: 84: i2cLowSda();
 12633  00294A  EC29  F015         	call	_i2cLowSda	;wreg free
 12634                           
 12635                           ;I2C_Soft.c: 85: i2cLowScl();
 12636  00294E  EC36  F015         	call	_i2cLowScl	;wreg free
 12637  002952  0012               	return		;funcret
 12638  002954                     __end_of_I2C_ReStart:
 12639                           	opt stack 0
 12640                           tblptru	equ	0xFF8
 12641                           tblptrh	equ	0xFF7
 12642                           tblptrl	equ	0xFF6
 12643                           tablat	equ	0xFF5
 12644                           prodh	equ	0xFF4
 12645                           prodl	equ	0xFF3
 12646                           intcon	equ	0xFF2
 12647                           intcon2	equ	0xFF1
 12648                           postinc0	equ	0xFEE
 12649                           wreg	equ	0xFE8
 12650                           postdec1	equ	0xFE5
 12651                           fsr1l	equ	0xFE1
 12652                           indf2	equ	0xFDF
 12653                           postinc2	equ	0xFDE
 12654                           postdec2	equ	0xFDD
 12655                           fsr2h	equ	0xFDA
 12656                           fsr2l	equ	0xFD9
 12657                           status	equ	0xFD8
 12658                           
 12659 ;; *************** function _i2cLowSda *****************
 12660 ;; Defined at:
 12661 ;;		line 102 in file "I2C_Soft.c"
 12662 ;; Parameters:    Size  Location     Type
 12663 ;;		None
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;		None
 12666 ;; Return value:  Size  Location     Type
 12667 ;;		None               void
 12668 ;; Registers used:
 12669 ;;		None
 12670 ;; Tracked objects:
 12671 ;;		On entry : 0/0
 12672 ;;		On exit  : 0/0
 12673 ;;		Unchanged: 0/0
 12674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12679 ;;Total ram usage:        0 bytes
 12680 ;; Hardware stack levels used:    1
 12681 ;; Hardware stack levels required when called:    3
 12682 ;; This function calls:
 12683 ;;		Nothing
 12684 ;; This function is called by:
 12685 ;;		_I2C_Write
 12686 ;;		_i2cAck
 12687 ;;		_I2C_Start
 12688 ;;		_I2C_ReStart
 12689 ;;		_I2C_Stop
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           	psect	text67
 12694  002A52                     __ptext67:
 12695                           	opt stack 0
 12696  002A52                     _i2cLowSda:
 12697                           	opt stack 23
 12698                           
 12699                           ;I2C_Soft.c: 104: PORTDbits.RD6 = 0;
 12700                           
 12701                           ;incstack = 0
 12702  002A52  9C83               	bcf	3971,6,c	;volatile
 12703                           
 12704                           ;I2C_Soft.c: 105: TRISDbits.RD6 = 0;
 12705  002A54  9C95               	bcf	3989,6,c	;volatile
 12706                           
 12707                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 12708  002A56  D000               	nop2		;2 cycle nop
 12709  002A58  D000               	nop2		;2 cycle nop
 12710  002A5A  0012               	return		;funcret
 12711  002A5C                     __end_of_i2cLowSda:
 12712                           	opt stack 0
 12713                           tblptru	equ	0xFF8
 12714                           tblptrh	equ	0xFF7
 12715                           tblptrl	equ	0xFF6
 12716                           tablat	equ	0xFF5
 12717                           prodh	equ	0xFF4
 12718                           prodl	equ	0xFF3
 12719                           intcon	equ	0xFF2
 12720                           intcon2	equ	0xFF1
 12721                           postinc0	equ	0xFEE
 12722                           wreg	equ	0xFE8
 12723                           postdec1	equ	0xFE5
 12724                           fsr1l	equ	0xFE1
 12725                           indf2	equ	0xFDF
 12726                           postinc2	equ	0xFDE
 12727                           postdec2	equ	0xFDD
 12728                           fsr2h	equ	0xFDA
 12729                           fsr2l	equ	0xFD9
 12730                           status	equ	0xFD8
 12731                           
 12732 ;; *************** function _i2cLowScl *****************
 12733 ;; Defined at:
 12734 ;;		line 115 in file "I2C_Soft.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;		None
 12737 ;; Auto vars:     Size  Location     Type
 12738 ;;		None
 12739 ;; Return value:  Size  Location     Type
 12740 ;;		None               void
 12741 ;; Registers used:
 12742 ;;		None
 12743 ;; Tracked objects:
 12744 ;;		On entry : 0/0
 12745 ;;		On exit  : 0/0
 12746 ;;		Unchanged: 0/0
 12747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12752 ;;Total ram usage:        0 bytes
 12753 ;; Hardware stack levels used:    1
 12754 ;; Hardware stack levels required when called:    3
 12755 ;; This function calls:
 12756 ;;		Nothing
 12757 ;; This function is called by:
 12758 ;;		_I2C_Read
 12759 ;;		_I2C_Write
 12760 ;;		_i2cNack
 12761 ;;		_i2cAck
 12762 ;;		_I2C_Start
 12763 ;;		_I2C_ReStart
 12764 ;;		_I2C_Stop
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text68
 12769  002A6C                     __ptext68:
 12770                           	opt stack 0
 12771  002A6C                     _i2cLowScl:
 12772                           	opt stack 23
 12773                           
 12774                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
 12775                           
 12776                           ;incstack = 0
 12777  002A6C  9881               	bcf	3969,4,c	;volatile
 12778                           
 12779                           ;I2C_Soft.c: 118: TRISBbits.RB4 = 0;
 12780  002A6E  9893               	bcf	3987,4,c	;volatile
 12781                           
 12782                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 12783  002A70  D000               	nop2		;2 cycle nop
 12784  002A72  0012               	return		;funcret
 12785  002A74                     __end_of_i2cLowScl:
 12786                           	opt stack 0
 12787                           tblptru	equ	0xFF8
 12788                           tblptrh	equ	0xFF7
 12789                           tblptrl	equ	0xFF6
 12790                           tablat	equ	0xFF5
 12791                           prodh	equ	0xFF4
 12792                           prodl	equ	0xFF3
 12793                           intcon	equ	0xFF2
 12794                           intcon2	equ	0xFF1
 12795                           postinc0	equ	0xFEE
 12796                           wreg	equ	0xFE8
 12797                           postdec1	equ	0xFE5
 12798                           fsr1l	equ	0xFE1
 12799                           indf2	equ	0xFDF
 12800                           postinc2	equ	0xFDE
 12801                           postdec2	equ	0xFDD
 12802                           fsr2h	equ	0xFDA
 12803                           fsr2l	equ	0xFD9
 12804                           status	equ	0xFD8
 12805                           
 12806 ;; *************** function _i2cHighSda *****************
 12807 ;; Defined at:
 12808 ;;		line 96 in file "I2C_Soft.c"
 12809 ;; Parameters:    Size  Location     Type
 12810 ;;		None
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;		None
 12813 ;; Return value:  Size  Location     Type
 12814 ;;		None               void
 12815 ;; Registers used:
 12816 ;;		None
 12817 ;; Tracked objects:
 12818 ;;		On entry : 0/0
 12819 ;;		On exit  : 0/0
 12820 ;;		Unchanged: 0/0
 12821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12826 ;;Total ram usage:        0 bytes
 12827 ;; Hardware stack levels used:    1
 12828 ;; Hardware stack levels required when called:    3
 12829 ;; This function calls:
 12830 ;;		Nothing
 12831 ;; This function is called by:
 12832 ;;		_I2C_Init
 12833 ;;		_I2C_Read
 12834 ;;		_I2C_Write
 12835 ;;		_i2cAck
 12836 ;;		_I2C_Start
 12837 ;;		_I2C_ReStart
 12838 ;;		_I2C_Stop
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           	psect	text69
 12843  002A74                     __ptext69:
 12844                           	opt stack 0
 12845  002A74                     _i2cHighSda:
 12846                           	opt stack 25
 12847                           
 12848                           ;I2C_Soft.c: 98: TRISDbits.RD6 = 1;
 12849                           
 12850                           ;incstack = 0
 12851  002A74  8C95               	bsf	3989,6,c	;volatile
 12852                           
 12853                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 12854  002A76  D000               	nop2		;2 cycle nop
 12855  002A78  D000               	nop2		;2 cycle nop
 12856  002A7A  0012               	return		;funcret
 12857  002A7C                     __end_of_i2cHighSda:
 12858                           	opt stack 0
 12859                           tblptru	equ	0xFF8
 12860                           tblptrh	equ	0xFF7
 12861                           tblptrl	equ	0xFF6
 12862                           tablat	equ	0xFF5
 12863                           prodh	equ	0xFF4
 12864                           prodl	equ	0xFF3
 12865                           intcon	equ	0xFF2
 12866                           intcon2	equ	0xFF1
 12867                           postinc0	equ	0xFEE
 12868                           wreg	equ	0xFE8
 12869                           postdec1	equ	0xFE5
 12870                           fsr1l	equ	0xFE1
 12871                           indf2	equ	0xFDF
 12872                           postinc2	equ	0xFDE
 12873                           postdec2	equ	0xFDD
 12874                           fsr2h	equ	0xFDA
 12875                           fsr2l	equ	0xFD9
 12876                           status	equ	0xFD8
 12877                           
 12878 ;; *************** function _i2cHighScl *****************
 12879 ;; Defined at:
 12880 ;;		line 109 in file "I2C_Soft.c"
 12881 ;; Parameters:    Size  Location     Type
 12882 ;;		None
 12883 ;; Auto vars:     Size  Location     Type
 12884 ;;		None
 12885 ;; Return value:  Size  Location     Type
 12886 ;;		None               void
 12887 ;; Registers used:
 12888 ;;		wreg
 12889 ;; Tracked objects:
 12890 ;;		On entry : 0/0
 12891 ;;		On exit  : 0/0
 12892 ;;		Unchanged: 0/0
 12893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12898 ;;Total ram usage:        0 bytes
 12899 ;; Hardware stack levels used:    1
 12900 ;; Hardware stack levels required when called:    3
 12901 ;; This function calls:
 12902 ;;		Nothing
 12903 ;; This function is called by:
 12904 ;;		_I2C_Init
 12905 ;;		_I2C_Read
 12906 ;;		_I2C_Write
 12907 ;;		_i2cNack
 12908 ;;		_i2cAck
 12909 ;;		_I2C_Start
 12910 ;;		_I2C_ReStart
 12911 ;;		_I2C_Stop
 12912 ;; This function uses a non-reentrant model
 12913 ;;
 12914                           
 12915                           	psect	text70
 12916  002A26                     __ptext70:
 12917                           	opt stack 0
 12918  002A26                     _i2cHighScl:
 12919                           	opt stack 25
 12920                           
 12921                           ;I2C_Soft.c: 111: TRISBbits.RB4 = 1;
 12922                           
 12923                           ;incstack = 0
 12924  002A26  8893               	bsf	3987,4,c	;volatile
 12925                           
 12926                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 12927  002A28  0E06               	movlw	6
 12928  002A2A                     u6517:
 12929  002A2A  2EE8               	decfsz	wreg,f,c
 12930  002A2C  D7FE               	goto	u6517
 12931  002A2E  D000               	nop2		;nop
 12932  002A30  0012               	return		;funcret
 12933  002A32                     __end_of_i2cHighScl:
 12934                           	opt stack 0
 12935                           tblptru	equ	0xFF8
 12936                           tblptrh	equ	0xFF7
 12937                           tblptrl	equ	0xFF6
 12938                           tablat	equ	0xFF5
 12939                           prodh	equ	0xFF4
 12940                           prodl	equ	0xFF3
 12941                           intcon	equ	0xFF2
 12942                           intcon2	equ	0xFF1
 12943                           postinc0	equ	0xFEE
 12944                           wreg	equ	0xFE8
 12945                           postdec1	equ	0xFE5
 12946                           fsr1l	equ	0xFE1
 12947                           indf2	equ	0xFDF
 12948                           postinc2	equ	0xFDE
 12949                           postdec2	equ	0xFDD
 12950                           fsr2h	equ	0xFDA
 12951                           fsr2l	equ	0xFD9
 12952                           status	equ	0xFD8
 12953                           
 12954 ;; *************** function _chkisr *****************
 12955 ;; Defined at:
 12956 ;;		line 29 in file "Interrupt.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;		None
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;		None
 12961 ;; Return value:  Size  Location     Type
 12962 ;;		None               void
 12963 ;; Registers used:
 12964 ;;		wreg, status,2, status,0, cstack
 12965 ;; Tracked objects:
 12966 ;;		On entry : 0/0
 12967 ;;		On exit  : 0/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12974 ;;Total ram usage:       14 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; Hardware stack levels required when called:    2
 12977 ;; This function calls:
 12978 ;;		_INT0_isr
 12979 ;;		_TIMER1_isr
 12980 ;; This function is called by:
 12981 ;;		Interrupt level 2
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           	psect	intcode
 12986  000008                     __pintcode:
 12987                           	opt stack 0
 12988  000008                     _chkisr:
 12989                           	opt stack 20
 12990                           
 12991                           ;incstack = 0
 12992  000008  CFFA F003          	movff	pclath,??_chkisr
 12993  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 12994  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 12995  000014  ED46  F010         	call	int_func,f	;refresh shadow registers
 12996                           pclatu	equ	0xFFB
 12997                           pclath	equ	0xFFA
 12998                           tblptru	equ	0xFF8
 12999                           tblptrh	equ	0xFF7
 13000                           tblptrl	equ	0xFF6
 13001                           tablat	equ	0xFF5
 13002                           prodh	equ	0xFF4
 13003                           prodl	equ	0xFF3
 13004                           intcon	equ	0xFF2
 13005                           intcon2	equ	0xFF1
 13006                           postinc0	equ	0xFEE
 13007                           fsr0l	equ	0xFE9
 13008                           wreg	equ	0xFE8
 13009                           postdec1	equ	0xFE5
 13010                           fsr1l	equ	0xFE1
 13011                           indf2	equ	0xFDF
 13012                           postinc2	equ	0xFDE
 13013                           postdec2	equ	0xFDD
 13014                           fsr2h	equ	0xFDA
 13015                           fsr2l	equ	0xFD9
 13016                           status	equ	0xFD8
 13017                           
 13018                           	psect	intcode_body
 13019  00208C                     __pintcode_body:
 13020                           	opt stack 20
 13021  00208C                     int_func:
 13022                           	opt stack 20
 13023  00208C  0006               	pop		; remove dummy address from shadow register refresh
 13024  00208E  CFEA F006          	movff	fsr0h,??_chkisr+3
 13025  002092  CFE1 F007          	movff	fsr1l,??_chkisr+4
 13026  002096  CFE2 F008          	movff	fsr1h,??_chkisr+5
 13027  00209A  CFD9 F009          	movff	fsr2l,??_chkisr+6
 13028  00209E  CFDA F00A          	movff	fsr2h,??_chkisr+7
 13029  0020A2  CFF3 F00B          	movff	prodl,??_chkisr+8
 13030  0020A6  CFF4 F00C          	movff	prodh,??_chkisr+9
 13031  0020AA  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 13032  0020AE  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 13033  0020B2  CFF8 F00F          	movff	tblptru,??_chkisr+12
 13034  0020B6  CFF5 F010          	movff	tablat,??_chkisr+13
 13035                           
 13036                           ;Interrupt.c: 31: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 13037  0020BA  A09E               	btfss	3998,0,c	;volatile
 13038  0020BC  D003               	goto	i2l5741
 13039  0020BE  EC19  F015         	call	_TIMER1_isr	;wreg free
 13040  0020C2  D000               	goto	i2l5741
 13041  0020C4                     i2l5741:
 13042                           
 13043                           ;Interrupt.c: 32: if (INTCONbits.INT0IF == 1) INT0_isr();
 13044  0020C4  A2F2               	btfss	intcon,1,c	;volatile
 13045  0020C6  D003               	goto	i2l727
 13046  0020C8  ECB7  F009         	call	_INT0_isr	;wreg free
 13047  0020CC  D000               	goto	i2l727
 13048  0020CE                     i2l727:
 13049  0020CE  C010  FFF5         	movff	??_chkisr+13,tablat
 13050  0020D2  C00F  FFF8         	movff	??_chkisr+12,tblptru
 13051  0020D6  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 13052  0020DA  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 13053  0020DE  C00C  FFF4         	movff	??_chkisr+9,prodh
 13054  0020E2  C00B  FFF3         	movff	??_chkisr+8,prodl
 13055  0020E6  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 13056  0020EA  C009  FFD9         	movff	??_chkisr+6,fsr2l
 13057  0020EE  C008  FFE2         	movff	??_chkisr+5,fsr1h
 13058  0020F2  C007  FFE1         	movff	??_chkisr+4,fsr1l
 13059  0020F6  C006  FFEA         	movff	??_chkisr+3,fsr0h
 13060  0020FA  C005  FFE9         	movff	??_chkisr+2,fsr0l
 13061  0020FE  C004  FFFB         	movff	??_chkisr+1,pclatu
 13062  002102  C003  FFFA         	movff	??_chkisr,pclath
 13063  002106  0011               	retfie		f
 13064  002108                     __end_of_chkisr:
 13065                           	opt stack 0
 13066                           pclatu	equ	0xFFB
 13067                           pclath	equ	0xFFA
 13068                           tblptru	equ	0xFF8
 13069                           tblptrh	equ	0xFF7
 13070                           tblptrl	equ	0xFF6
 13071                           tablat	equ	0xFF5
 13072                           prodh	equ	0xFF4
 13073                           prodl	equ	0xFF3
 13074                           intcon	equ	0xFF2
 13075                           intcon2	equ	0xFF1
 13076                           postinc0	equ	0xFEE
 13077                           fsr0h	equ	0xFEA
 13078                           fsr0l	equ	0xFE9
 13079                           wreg	equ	0xFE8
 13080                           postdec1	equ	0xFE5
 13081                           fsr1h	equ	0xFE2
 13082                           fsr1l	equ	0xFE1
 13083                           indf2	equ	0xFDF
 13084                           postinc2	equ	0xFDE
 13085                           postdec2	equ	0xFDD
 13086                           fsr2h	equ	0xFDA
 13087                           fsr2l	equ	0xFD9
 13088                           status	equ	0xFD8
 13089                           
 13090 ;; *************** function _TIMER1_isr *****************
 13091 ;; Defined at:
 13092 ;;		line 35 in file "Interrupt.c"
 13093 ;; Parameters:    Size  Location     Type
 13094 ;;		None
 13095 ;; Auto vars:     Size  Location     Type
 13096 ;;		None
 13097 ;; Return value:  Size  Location     Type
 13098 ;;		None               void
 13099 ;; Registers used:
 13100 ;;		wreg, status,2
 13101 ;; Tracked objects:
 13102 ;;		On entry : 0/0
 13103 ;;		On exit  : 0/0
 13104 ;;		Unchanged: 0/0
 13105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13110 ;;Total ram usage:        0 bytes
 13111 ;; Hardware stack levels used:    1
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		_chkisr
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text72
 13120  002A32                     __ptext72:
 13121                           	opt stack 0
 13122  002A32                     _TIMER1_isr:
 13123                           	opt stack 21
 13124                           
 13125                           ;Interrupt.c: 37: Nec_state = 0;
 13126                           
 13127                           ;incstack = 0
 13128  002A32  0E00               	movlw	0
 13129  002A34  6E51               	movwf	_Nec_state,c
 13130                           
 13131                           ;Interrupt.c: 38: INTCON2bits.INTEDG0 = 0;
 13132  002A36  9CF1               	bcf	intcon2,6,c	;volatile
 13133                           
 13134                           ;Interrupt.c: 39: T1CONbits.TMR1ON = 0;
 13135  002A38  90CD               	bcf	4045,0,c	;volatile
 13136                           
 13137                           ;Interrupt.c: 40: PIR1bits.TMR1IF = 0;
 13138  002A3A  909E               	bcf	3998,0,c	;volatile
 13139  002A3C  0012               	return		;funcret
 13140  002A3E                     __end_of_TIMER1_isr:
 13141                           	opt stack 0
 13142                           pclatu	equ	0xFFB
 13143                           pclath	equ	0xFFA
 13144                           tblptru	equ	0xFF8
 13145                           tblptrh	equ	0xFF7
 13146                           tblptrl	equ	0xFF6
 13147                           tablat	equ	0xFF5
 13148                           prodh	equ	0xFF4
 13149                           prodl	equ	0xFF3
 13150                           intcon	equ	0xFF2
 13151                           intcon2	equ	0xFF1
 13152                           postinc0	equ	0xFEE
 13153                           fsr0h	equ	0xFEA
 13154                           fsr0l	equ	0xFE9
 13155                           wreg	equ	0xFE8
 13156                           postdec1	equ	0xFE5
 13157                           fsr1h	equ	0xFE2
 13158                           fsr1l	equ	0xFE1
 13159                           indf2	equ	0xFDF
 13160                           postinc2	equ	0xFDE
 13161                           postdec2	equ	0xFDD
 13162                           fsr2h	equ	0xFDA
 13163                           fsr2l	equ	0xFD9
 13164                           status	equ	0xFD8
 13165                           
 13166 ;; *************** function _INT0_isr *****************
 13167 ;; Defined at:
 13168 ;;		line 49 in file "Interrupt.c"
 13169 ;; Parameters:    Size  Location     Type
 13170 ;;		None
 13171 ;; Auto vars:     Size  Location     Type
 13172 ;;		None
 13173 ;; Return value:  Size  Location     Type
 13174 ;;		None               void
 13175 ;; Registers used:
 13176 ;;		wreg, status,2, status,0, cstack
 13177 ;; Tracked objects:
 13178 ;;		On entry : 0/0
 13179 ;;		On exit  : 0/0
 13180 ;;		Unchanged: 0/0
 13181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13186 ;;Total ram usage:        2 bytes
 13187 ;; Hardware stack levels used:    1
 13188 ;; Hardware stack levels required when called:    1
 13189 ;; This function calls:
 13190 ;;		_force_nec_state0
 13191 ;; This function is called by:
 13192 ;;		_chkisr
 13193 ;; This function uses a non-reentrant model
 13194 ;;
 13195                           
 13196                           	psect	text73
 13197  00136E                     __ptext73:
 13198                           	opt stack 0
 13199  00136E                     _INT0_isr:
 13200                           	opt stack 20
 13201                           
 13202                           ;Interrupt.c: 52: INTCONbits.INT0IF = 0;
 13203                           
 13204                           ;incstack = 0
 13205  00136E  92F2               	bcf	intcon,1,c	;volatile
 13206                           
 13207                           ;Interrupt.c: 53: if (Nec_state != 0)
 13208  001370  5051               	movf	_Nec_state,w,c
 13209  001372  B4D8               	btfsc	status,2,c
 13210  001374  D0A0               	goto	i2l5363
 13211                           
 13212                           ;Interrupt.c: 54: {
 13213                           ;Interrupt.c: 55: Time_Elapsed = (TMR1H << 8) | TMR1L;
 13214  001376  50CE               	movf	4046,w,c	;volatile
 13215  001378  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 13216  00137C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 13217  00137E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 13218  001382  6A01               	clrf	??_INT0_isr,c
 13219  001384  1001               	iorwf	??_INT0_isr,w,c
 13220  001386  6E45               	movwf	_Time_Elapsed,c
 13221  001388  5002               	movf	??_INT0_isr+1,w,c
 13222  00138A  6E46               	movwf	_Time_Elapsed+1,c
 13223                           
 13224                           ;Interrupt.c: 56: TMR1H = 0;
 13225  00138C  0E00               	movlw	0
 13226  00138E  6ECF               	movwf	4047,c	;volatile
 13227                           
 13228                           ;Interrupt.c: 57: TMR1L = 0;
 13229  001390  0E00               	movlw	0
 13230  001392  6ECE               	movwf	4046,c	;volatile
 13231                           
 13232                           ;Interrupt.c: 58: }
 13233                           ;Interrupt.c: 60: switch(Nec_state)
 13234  001394  D090               	goto	i2l5363
 13235  001396                     i2l5291:
 13236                           
 13237                           ;Interrupt.c: 63: {
 13238                           ;Interrupt.c: 65: TMR1H = 0;
 13239  001396  0E00               	movlw	0
 13240  001398  6ECF               	movwf	4047,c	;volatile
 13241                           
 13242                           ;Interrupt.c: 66: TMR1L = 0;
 13243  00139A  0E00               	movlw	0
 13244  00139C  6ECE               	movwf	4046,c	;volatile
 13245                           
 13246                           ;Interrupt.c: 67: PIR1bits.TMR1IF = 0;
 13247  00139E  909E               	bcf	3998,0,c	;volatile
 13248                           
 13249                           ;Interrupt.c: 68: T1CON= 0x90;
 13250  0013A0  0E90               	movlw	144
 13251  0013A2  6ECD               	movwf	4045,c	;volatile
 13252                           
 13253                           ;Interrupt.c: 69: T1CONbits.TMR1ON = 1;
 13254  0013A4  80CD               	bsf	4045,0,c	;volatile
 13255                           
 13256                           ;Interrupt.c: 70: bit_count = 0;
 13257  0013A6  0E00               	movlw	0
 13258  0013A8  6E57               	movwf	_bit_count,c
 13259                           
 13260                           ;Interrupt.c: 71: Nec_code = 0;
 13261  0013AA  0E00               	movlw	0
 13262  0013AC  0100               	movlb	0	; () banked
 13263  0013AE  6FF5               	movwf	_Nec_code& (0+255),b
 13264  0013B0  0E00               	movlw	0
 13265  0013B2  6FF6               	movwf	(_Nec_code+1)& (0+255),b
 13266  0013B4  0E00               	movlw	0
 13267  0013B6  6FF7               	movwf	(_Nec_code+2)& (0+255),b
 13268  0013B8  0E00               	movlw	0
 13269  0013BA  6FF8               	movwf	(_Nec_code+3)& (0+255),b
 13270                           
 13271                           ;Interrupt.c: 72: Nec_state = 1;
 13272  0013BC  0E01               	movlw	1
 13273  0013BE  6E51               	movwf	_Nec_state,c
 13274  0013C0  D078               	goto	i2l5357
 13275                           
 13276                           ; BSR set to: 0
 13277                           ;Interrupt.c: 74: return;
 13278                           
 13279                           ; BSR set to: 0
 13280                           ;Interrupt.c: 73: INTCON2bits.INTEDG0 = 1;
 13281  0013C2  D08A               	goto	i2l739
 13282  0013C4                     i2l5301:
 13283                           
 13284                           ;Interrupt.c: 78: {
 13285                           ;Interrupt.c: 79: if ((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
 13286  0013C4  0E35               	movlw	53
 13287  0013C6  5C45               	subwf	_Time_Elapsed,w,c
 13288  0013C8  0E21               	movlw	33
 13289  0013CA  5846               	subwfb	_Time_Elapsed+1,w,c
 13290  0013CC  A0D8               	btfss	status,0,c
 13291  0013CE  D009               	goto	i2l5307
 13292  0013D0  0E1C               	movlw	28
 13293  0013D2  5C45               	subwf	_Time_Elapsed,w,c
 13294  0013D4  0E25               	movlw	37
 13295  0013D6  5846               	subwfb	_Time_Elapsed+1,w,c
 13296  0013D8  B0D8               	btfsc	status,0,c
 13297  0013DA  D003               	goto	i2l5307
 13298                           
 13299                           ;Interrupt.c: 80: Nec_state = 2;
 13300  0013DC  0E02               	movlw	2
 13301  0013DE  6E51               	movwf	_Nec_state,c
 13302  0013E0  D02A               	goto	i2l5333
 13303  0013E2                     i2l5307:
 13304                           
 13305                           ;Interrupt.c: 81: else
 13306                           ;Interrupt.c: 82: force_nec_state0();
 13307  0013E2  EC3E  F015         	call	_force_nec_state0	;wreg free
 13308  0013E6  D027               	goto	i2l5333
 13309  0013E8  D026               	goto	i2l5333
 13310                           
 13311                           ;Interrupt.c: 84: return;
 13312                           
 13313                           ;Interrupt.c: 83: INTCON2bits.INTEDG0 = 0;
 13314  0013EA  D076               	goto	i2l739
 13315  0013EC                     i2l5313:
 13316                           
 13317                           ;Interrupt.c: 88: {
 13318                           ;Interrupt.c: 89: if ((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
 13319  0013EC  0EA1               	movlw	161
 13320  0013EE  5C45               	subwf	_Time_Elapsed,w,c
 13321  0013F0  0E0F               	movlw	15
 13322  0013F2  5846               	subwfb	_Time_Elapsed+1,w,c
 13323  0013F4  A0D8               	btfss	status,0,c
 13324  0013F6  D009               	goto	i2l5319
 13325  0013F8  0E88               	movlw	136
 13326  0013FA  5C45               	subwf	_Time_Elapsed,w,c
 13327  0013FC  0E13               	movlw	19
 13328  0013FE  5846               	subwfb	_Time_Elapsed+1,w,c
 13329  001400  B0D8               	btfsc	status,0,c
 13330  001402  D003               	goto	i2l5319
 13331  001404                     
 13332                           ;Interrupt.c: 90: Nec_state = 3;
 13333  001404  0E03               	movlw	3
 13334  001406  6E51               	movwf	_Nec_state,c
 13335  001408  D054               	goto	i2l5357
 13336  00140A                     i2l5319:
 13337                           
 13338                           ;Interrupt.c: 91: else
 13339                           ;Interrupt.c: 92: force_nec_state0();
 13340  00140A  EC3E  F015         	call	_force_nec_state0	;wreg free
 13341  00140E  D051               	goto	i2l5357
 13342  001410  D050               	goto	i2l5357
 13343                           
 13344                           ;Interrupt.c: 94: return;
 13345                           
 13346                           ;Interrupt.c: 93: INTCON2bits.INTEDG0 = 1;
 13347  001412  D062               	goto	i2l739
 13348  001414                     i2l5325:
 13349                           
 13350                           ;Interrupt.c: 98: {
 13351                           ;Interrupt.c: 99: if ((Time_Elapsed > 400) && (Time_Elapsed < 700))
 13352  001414  0E91               	movlw	145
 13353  001416  5C45               	subwf	_Time_Elapsed,w,c
 13354  001418  0E01               	movlw	1
 13355  00141A  5846               	subwfb	_Time_Elapsed+1,w,c
 13356  00141C  A0D8               	btfss	status,0,c
 13357  00141E  D008               	goto	i2l5331
 13358  001420  0EBC               	movlw	188
 13359  001422  5C45               	subwf	_Time_Elapsed,w,c
 13360  001424  0E02               	movlw	2
 13361  001426  5846               	subwfb	_Time_Elapsed+1,w,c
 13362  001428  B0D8               	btfsc	status,0,c
 13363  00142A  D002               	goto	i2l5331
 13364                           
 13365                           ;Interrupt.c: 100: Nec_state = 4;
 13366  00142C  0E04               	movlw	4
 13367  00142E  D7D7               	goto	L12
 13368  001430                     i2l5331:
 13369                           
 13370                           ;Interrupt.c: 101: else
 13371                           ;Interrupt.c: 102: force_nec_state0();
 13372  001430  EC3E  F015         	call	_force_nec_state0	;wreg free
 13373  001434  D000               	goto	i2l5333
 13374  001436                     i2l5333:
 13375                           
 13376                           ;Interrupt.c: 103: INTCON2bits.INTEDG0 = 0;
 13377  001436  9CF1               	bcf	intcon2,6,c	;volatile
 13378                           
 13379                           ;Interrupt.c: 104: return;
 13380  001438  D04F               	goto	i2l739
 13381  00143A                     i2l5337:
 13382                           
 13383                           ;Interrupt.c: 108: {
 13384                           ;Interrupt.c: 109: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
 13385  00143A  0E91               	movlw	145
 13386  00143C  5C45               	subwf	_Time_Elapsed,w,c
 13387  00143E  0E01               	movlw	1
 13388  001440  5846               	subwfb	_Time_Elapsed+1,w,c
 13389  001442  A0D8               	btfss	status,0,c
 13390  001444  D033               	goto	i2l5355
 13391  001446  0E08               	movlw	8
 13392  001448  5C45               	subwf	_Time_Elapsed,w,c
 13393  00144A  0E07               	movlw	7
 13394  00144C  5846               	subwfb	_Time_Elapsed+1,w,c
 13395  00144E  B0D8               	btfsc	status,0,c
 13396  001450  D02D               	goto	i2l5355
 13397                           
 13398                           ;Interrupt.c: 110: {
 13399                           ;Interrupt.c: 111: Nec_code = Nec_code << 1;
 13400  001452  90D8               	bcf	status,0,c
 13401  001454  0100               	movlb	0	; () banked
 13402  001456  35F5               	rlcf	_Nec_code& (0+255),w,b
 13403  001458  0100               	movlb	0	; () banked
 13404  00145A  6FF5               	movwf	_Nec_code& (0+255),b
 13405  00145C  0100               	movlb	0	; () banked
 13406  00145E  35F6               	rlcf	(_Nec_code+1)& (0+255),w,b
 13407  001460  0100               	movlb	0	; () banked
 13408  001462  6FF6               	movwf	(_Nec_code+1)& (0+255),b
 13409  001464  0100               	movlb	0	; () banked
 13410  001466  35F7               	rlcf	(_Nec_code+2)& (0+255),w,b
 13411  001468  0100               	movlb	0	; () banked
 13412  00146A  6FF7               	movwf	(_Nec_code+2)& (0+255),b
 13413  00146C  0100               	movlb	0	; () banked
 13414  00146E  35F8               	rlcf	(_Nec_code+3)& (0+255),w,b
 13415  001470  0100               	movlb	0	; () banked
 13416  001472  6FF8               	movwf	(_Nec_code+3)& (0+255),b
 13417                           
 13418                           ;Interrupt.c: 112: if (Time_Elapsed > 1000)
 13419  001474  0EE9               	movlw	233
 13420  001476  5C45               	subwf	_Time_Elapsed,w,c
 13421  001478  0E03               	movlw	3
 13422  00147A  5846               	subwfb	_Time_Elapsed+1,w,c
 13423  00147C  A0D8               	btfss	status,0,c
 13424  00147E  D008               	goto	i2l5345
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;Interrupt.c: 113: Nec_code++;
 13428  001480  0E01               	movlw	1
 13429  001482  0100               	movlb	0	; () banked
 13430  001484  27F5               	addwf	_Nec_code& (0+255),f,b
 13431  001486  0E00               	movlw	0
 13432  001488  23F6               	addwfc	(_Nec_code+1)& (0+255),f,b
 13433  00148A  23F7               	addwfc	(_Nec_code+2)& (0+255),f,b
 13434  00148C  23F8               	addwfc	(_Nec_code+3)& (0+255),f,b
 13435  00148E  D000               	goto	i2l5345
 13436  001490                     i2l5345:
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;Interrupt.c: 115: bit_count++;
 13440  001490  2A57               	incf	_bit_count,f,c
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;Interrupt.c: 116: if (bit_count > 31)
 13444  001492  0E1F               	movlw	31
 13445  001494  6457               	cpfsgt	_bit_count,c
 13446  001496  D7B6               	goto	L13
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;Interrupt.c: 117: {
 13450                           ;Interrupt.c: 118: nec_ok = 1;
 13451  001498  0E00               	movlw	0
 13452  00149A  6E48               	movwf	_nec_ok+1,c
 13453  00149C  0E01               	movlw	1
 13454  00149E  6E47               	movwf	_nec_ok,c
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;Interrupt.c: 119: Nec_code1 = (char) ((Nec_code >> 8));
 13458  0014A0  C0F6  F050         	movff	_Nec_code+1,_Nec_code1
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;Interrupt.c: 120: INTCONbits.INT0IE = 0;
 13462  0014A4  98F2               	bcf	intcon,4,c	;volatile
 13463                           
 13464                           ;Interrupt.c: 121: Nec_state = 0;
 13465  0014A6  0E00               	movlw	0
 13466  0014A8  6E51               	movwf	_Nec_state,c
 13467  0014AA  D7AC               	goto	L13
 13468  0014AC                     i2l5355:
 13469                           
 13470                           ;Interrupt.c: 125: else
 13471                           ;Interrupt.c: 126: force_nec_state0();
 13472  0014AC  EC3E  F015         	call	_force_nec_state0	;wreg free
 13473  0014B0  D000               	goto	i2l5357
 13474  0014B2                     i2l5357:
 13475                           
 13476                           ;Interrupt.c: 127: INTCON2bits.INTEDG0 = 1;
 13477  0014B2  8CF1               	bsf	intcon2,6,c	;volatile
 13478                           
 13479                           ;Interrupt.c: 129: }
 13480                           ;Interrupt.c: 130: }
 13481                           
 13482                           ;Interrupt.c: 128: return;
 13483  0014B4  D011               	goto	i2l739
 13484  0014B6                     i2l5363:
 13485  0014B6  5051               	movf	_Nec_state,w,c
 13486                           
 13487                           ; Switch size 1, requested type "space"
 13488                           ; Number of cases is 5, Range of values is 0 to 4
 13489                           ; switch strategies available:
 13490                           ; Name         Instructions Cycles
 13491                           ; simple_byte           16     9 (average)
 13492                           ;	Chosen strategy is simple_byte
 13493  0014B8  0A00               	xorlw	0	; case 0
 13494  0014BA  B4D8               	btfsc	status,2,c
 13495  0014BC  D76C               	goto	i2l5291
 13496  0014BE  0A01               	xorlw	1	; case 1
 13497  0014C0  B4D8               	btfsc	status,2,c
 13498  0014C2  D780               	goto	i2l5301
 13499  0014C4  0A03               	xorlw	3	; case 2
 13500  0014C6  B4D8               	btfsc	status,2,c
 13501  0014C8  D791               	goto	i2l5313
 13502  0014CA  0A01               	xorlw	1	; case 3
 13503  0014CC  B4D8               	btfsc	status,2,c
 13504  0014CE  D7A2               	goto	i2l5325
 13505  0014D0  0A07               	xorlw	7	; case 4
 13506  0014D2  B4D8               	btfsc	status,2,c
 13507  0014D4  D7B2               	goto	i2l5337
 13508  0014D6  D000               	goto	i2l739
 13509  0014D8                     i2l739:
 13510  0014D8  0012               	return		;funcret
 13511  0014DA                     __end_of_INT0_isr:
 13512                           	opt stack 0
 13513                           pclatu	equ	0xFFB
 13514                           pclath	equ	0xFFA
 13515                           tblptru	equ	0xFF8
 13516                           tblptrh	equ	0xFF7
 13517                           tblptrl	equ	0xFF6
 13518                           tablat	equ	0xFF5
 13519                           prodh	equ	0xFF4
 13520                           prodl	equ	0xFF3
 13521                           intcon	equ	0xFF2
 13522                           intcon2	equ	0xFF1
 13523                           postinc0	equ	0xFEE
 13524                           fsr0h	equ	0xFEA
 13525                           fsr0l	equ	0xFE9
 13526                           wreg	equ	0xFE8
 13527                           postdec1	equ	0xFE5
 13528                           fsr1h	equ	0xFE2
 13529                           fsr1l	equ	0xFE1
 13530                           indf2	equ	0xFDF
 13531                           postinc2	equ	0xFDE
 13532                           postdec2	equ	0xFDD
 13533                           fsr2h	equ	0xFDA
 13534                           fsr2l	equ	0xFD9
 13535                           status	equ	0xFD8
 13536                           
 13537 ;; *************** function _force_nec_state0 *****************
 13538 ;; Defined at:
 13539 ;;		line 43 in file "Interrupt.c"
 13540 ;; Parameters:    Size  Location     Type
 13541 ;;		None
 13542 ;; Auto vars:     Size  Location     Type
 13543 ;;		None
 13544 ;; Return value:  Size  Location     Type
 13545 ;;		None               void
 13546 ;; Registers used:
 13547 ;;		wreg, status,2
 13548 ;; Tracked objects:
 13549 ;;		On entry : 0/0
 13550 ;;		On exit  : 0/0
 13551 ;;		Unchanged: 0/0
 13552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;Total ram usage:        0 bytes
 13558 ;; Hardware stack levels used:    1
 13559 ;; This function calls:
 13560 ;;		Nothing
 13561 ;; This function is called by:
 13562 ;;		_INT0_isr
 13563 ;; This function uses a non-reentrant model
 13564 ;;
 13565                           
 13566                           	psect	text74
 13567  002A7C                     __ptext74:
 13568                           	opt stack 0
 13569  002A7C                     _force_nec_state0:
 13570                           	opt stack 20
 13571                           
 13572                           ;Interrupt.c: 45: Nec_state=0;
 13573                           
 13574                           ;incstack = 0
 13575  002A7C  0E00               	movlw	0
 13576  002A7E  6E51               	movwf	_Nec_state,c
 13577                           
 13578                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
 13579  002A80  90CD               	bcf	4045,0,c	;volatile
 13580  002A82  0012               	return		;funcret
 13581  002A84                     __end_of_force_nec_state0:
 13582                           	opt stack 0
 13583                           pclatu	equ	0xFFB
 13584                           pclath	equ	0xFFA
 13585                           tblptru	equ	0xFF8
 13586                           tblptrh	equ	0xFF7
 13587                           tblptrl	equ	0xFF6
 13588                           tablat	equ	0xFF5
 13589                           prodh	equ	0xFF4
 13590                           prodl	equ	0xFF3
 13591                           intcon	equ	0xFF2
 13592                           intcon2	equ	0xFF1
 13593                           postinc0	equ	0xFEE
 13594                           fsr0h	equ	0xFEA
 13595                           fsr0l	equ	0xFE9
 13596                           wreg	equ	0xFE8
 13597                           postdec1	equ	0xFE5
 13598                           fsr1h	equ	0xFE2
 13599                           fsr1l	equ	0xFE1
 13600                           indf2	equ	0xFDF
 13601                           postinc2	equ	0xFDE
 13602                           postdec2	equ	0xFDD
 13603                           fsr2h	equ	0xFDA
 13604                           fsr2l	equ	0xFD9
 13605                           status	equ	0xFD8
 13606                           pclatu	equ	0xFFB
 13607                           pclath	equ	0xFFA
 13608                           tblptru	equ	0xFF8
 13609                           tblptrh	equ	0xFF7
 13610                           tblptrl	equ	0xFF6
 13611                           tablat	equ	0xFF5
 13612                           prodh	equ	0xFF4
 13613                           prodl	equ	0xFF3
 13614                           intcon	equ	0xFF2
 13615                           intcon2	equ	0xFF1
 13616                           postinc0	equ	0xFEE
 13617                           fsr0h	equ	0xFEA
 13618                           fsr0l	equ	0xFE9
 13619                           wreg	equ	0xFE8
 13620                           postdec1	equ	0xFE5
 13621                           fsr1h	equ	0xFE2
 13622                           fsr1l	equ	0xFE1
 13623                           indf2	equ	0xFDF
 13624                           postinc2	equ	0xFDE
 13625                           postdec2	equ	0xFDD
 13626                           fsr2h	equ	0xFDA
 13627                           fsr2l	equ	0xFD9
 13628                           status	equ	0xFD8
 13629                           
 13630                           	psect	rparam
 13631  0000                     pclatu	equ	0xFFB
 13632                           pclath	equ	0xFFA
 13633                           tblptru	equ	0xFF8
 13634                           tblptrh	equ	0xFF7
 13635                           tblptrl	equ	0xFF6
 13636                           tablat	equ	0xFF5
 13637                           prodh	equ	0xFF4
 13638                           prodl	equ	0xFF3
 13639                           intcon	equ	0xFF2
 13640                           intcon2	equ	0xFF1
 13641                           postinc0	equ	0xFEE
 13642                           fsr0h	equ	0xFEA
 13643                           fsr0l	equ	0xFE9
 13644                           wreg	equ	0xFE8
 13645                           postdec1	equ	0xFE5
 13646                           fsr1h	equ	0xFE2
 13647                           fsr1l	equ	0xFE1
 13648                           indf2	equ	0xFDF
 13649                           postinc2	equ	0xFDE
 13650                           postdec2	equ	0xFDD
 13651                           fsr2h	equ	0xFDA
 13652                           fsr2l	equ	0xFD9
 13653                           status	equ	0xFD8


Data Sizes:
    Strings     280
    Constant    505
    Data        221
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     111
    BANK0           128     16     125
    BANK1           256     21     138
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[13]), STR_9(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf$1778	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_21(CODE[17]), STR_20(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_8(CODE[15]), STR_7(CODE[22]), STR_6(CODE[16]), STR_5(CODE[27]), 
		 -> STR_4(CODE[21]), STR_3(CODE[30]), STR_2(CODE[22]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Turn_On_Fan->_do_update_pwm
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _printf->___lwmod
    ___lwmod->___lwdiv
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _Increase_Speed->_do_update_pwm
    _Decrease_Speed->_do_update_pwm

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _Increase_Speed->_printf
    _Decrease_Speed->_printf

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  120510
                                             13 BANK0      3     3      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                   _Wait_Half_Second
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   22483
                                              9 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1733
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          7     5      2    2395
                                             30 COMRAM     7     5      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           4     2      2    2336
                                             30 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM     8     0      8
                                              0 BANK0      9     9      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   14141
                            _Do_Beep
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   14141
                            _Do_Beep
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              43    29     14    6107
                                             28 COMRAM    18     4     14
                                              0 BANK1     21    21      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     631
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     3     3      0
                                              0 BANK0      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_Half_Second
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   _Wait_Half_Second
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     15      8A       7       53.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      7D       5       97.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     176      34        0.0%
DATA                 0      0     176       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 28 18:44:34 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 00A4                                 _D2 00AC  
                               _D3 012A                                 l42 2966  
                               l53 27D0                                 l37 261E  
                               l71 237A                                 l58 27FE  
                     ___awdiv@sign 001C               __size_of_Turn_On_Fan 000E  
              ___wmul@multiplicand 0013                    ??_Update_Screen 00EE  
                              l500 1CBE                                l501 1CE0  
                              l256 2A1C                                l272 1130  
                              l508 1282                                l444 1F88  
                              l460 162E                                l438 27A0  
                              l462 1508                                l384 2422  
                              l394 2976                                l636 25A0  
                              l469 1584                                l822 009E  
                              l639 26AA                                l593 2920  
                              l497 1CE2                                l914 0762  
                              l498 1C4E                                l844 0202  
                              l941 0974                                _FAN 004F  
                              l970 21C6                                l971 21D0  
                              l788 25E0                                l972 21D2  
                              l965 21AA                                l974 21EC  
                              l977 2850                                l969 21C4  
                              l898 0688                  ?_Wait_Half_Second 0001  
                              _PR2 000FCB                                _day 0059  
                _Deactivate_Buzzer 2A64               __size_of_I2C_ReStart 0016  
                              _dow 005A                                _nbr 00FB  
                              _rpm 0049              __size_of_Turn_Off_Fan 0008  
                              _rps 004B                                _txt 004D  
                     ___awmod@sign 0024                                prod 000FF3  
                              wreg 000FE8                 ??_Wait_Half_Second 0011  
               ?_Deactivate_Buzzer 0001                         _Fan_SW_Txt 00D9  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 2800                       ___ftdiv@cntr 0035  
                     ___ftdiv@sign 003A                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1170 1F00  
                             l1500 23CE                               l1510 2506  
                             l1183 200A                               l1360 1BD2  
                             l1408 2898                               l1434 2876  
                             l1372 194C                     drawFastVLine@x 0022  
                             l1285 1DA8                               l1357 1C06  
                   drawFastVLine@y 0018                               l1296 1D80  
                             l1393 1B24                               l1539 265C  
                             l6001 18F8                               l6011 1926  
                             l6003 18FE                               l6021 1A5E  
                             l6101 21AE                               l6007 1910  
                             l6051 1AF0                               l6043 1AC8  
                             l6045 1ACE                               l6053 1AFA  
                             l6109 21BC                               l7013 2960  
                             l6039 1AB8                               l7023 27C2  
                             l6311 1C86                               l6057 1B12  
                             l6049 1AE2                               l6241 14EA  
                             l6305 1C18                               l7201 09F2  
                             l6075 1E42                               l6411 24E4  
                             l7035 27F0                               l6251 150C  
                             l6331 1CCC                               l6323 1CB4  
                             l7211 0A48                               l6093 219A  
                             l6261 1578                               l6245 14F6  
                             l7061 2358     I2C_Write_Cmd_Write_Data@Device 0015  
                             l6415 24FA                               l6407 24D2  
                             l6511 026E                               l6271 15A6  
                             l6263 157C                               l6255 1514  
                             l6327 1CC2                               l7047 2702  
                             l6409 24DC                               l6601 0498  
                             l6505 023C                               l6441 005E  
                             l6433 002C                               l6097 21A2  
                             l6089 2190                               l6281 1622  
                             l6273 15CE                               l6249 1504  
                             l6337 1CDC                               l7217 0A88  
                             l6611 04CA                               l6531 02F2  
                             l6515 0278                               l6523 02B0  
                             l6443 0064                               l6259 1544  
                             l7059 2352                               l5901 26CC  
                             l5821 1D04                               l6621 051E  
                             l6605 04C2                               l6613 04EA  
                             l6517 0280                               l6509 0262  
                             l6453 00AA                               l6445 006A  
                             l6437 0042                               l6293 262A  
                             l7245 0B1C                               l7413 111C  
                             l5831 1D68                               l5823 1D10  
                             l6391 23A4                               l6711 07F4  
                             l6535 030C                               l6527 02D0  
                             l6519 029A                               l6543 032C  
                             l6439 0058                               l6279 15FA  
                             l6287 162A                               l6295 2630  
                             l7247 0B32                               l7431 116E  
                             l7407 10F4                               l5833 1D74  
                             l5825 1D30                               l5817 1CF4  
                             l6377 2890                               l6721 0886  
                             l6713 0836                               l6641 05CE  
                             l6633 0586                               l6617 0504  
                             l6561 03DA                               l6529 02D8  
                             l6545 0374                               l6473 0160  
                             l6457 00CA                               l6465 012E  
                             l6449 0076                               l6387 2392  
                             l6723 08AC                               l6707 07DA  
                             l6731 090C                               l6635 0592  
                             l6627 054C                               l6539 0324  
                             l6491 01D6                               l7195 09B2  
                             l7443 11A0                               l5845 1D9A  
                             l5829 1D48                               l5933 1B6C  
                             l6389 239C                               l6709 07E6  
                             l6653 0656                               l6581 043E  
                             l6573 040C                               l6557 03BE  
                             l6485 01AA                               l6493 01EE  
                             l6821 16D6                               l6805 165C  
                             l7365 0FCA                               l6903 258A  
                             l5839 1D88                               l5927 1B44  
                             l6399 23C2                               l6735 0936  
                             l6719 0878                               l6727 08E2  
                             l6671 06D2                               l6663 0696  
                             l6655 0662                               l6647 0616  
                             l6591 047C                               l6583 0444  
                             l6567 03F8                               l6495 01F8  
                             l6487 01B2                               l5783 1F4A  
                             l6831 1730                               l7447 11AE  
                             l7439 1192                               l5953 1BAC  
                             l5929 1B5E                               l6729 0902  
                             l6673 06DE                               l6681 0712  
                             l6649 0622                               l6577 0436  
                             l6569 03FE                               l6497 01FE  
                             l5793 1F70                               l6817 16B8  
                             l6907 2596                               l5891 26BA  
                             l5883 26A2                               l5963 1BE0  
                             l6675 06E8                               l6595 0484  
                             l6587 0452                               l6499 0208  
                             l6739 0954                               l5867 2782  
                             l6851 1268                               l5795 1F7E  
                             l5779 1F12                               l5875 251A  
                             l6909 259C                               l5973 1874  
                             l6685 0724                               l6677 06F4  
                             l6597 048A                               l6829 1728  
                             l6941 1EAA                               l7389 10A8  
                             l5975 188E                               l6695 0770  
                             l5879 2536                               l6943 1EB4  
                             l6935 1E94                               l5889 26B4  
                             l5993 18D0                               l6689 0742  
                             l6793 2718                               l6961 1EF6  
                             l6953 1EDA                               l6945 1EBC  
                             l6929 1E82                               l5979 189C  
                             l6699 079E                               l6795 2722  
                             l6885 2564                               l5997 18E2  
                             l6957 1EE6                               l6981 1FBC  
                             l6973 1FA0                               l6895 257A  
                             l6879 1358                               l6983 1FC6  
                             l6897 2582                               l6889 256C  
                             l6985 1FCE                               l6993 1FF0  
                             l6977 1FAE                               l6997 2000  
                             l6989 1FE4                               STR_1 FF1F  
                             STR_2 FF63                               STR_3 FEE6  
                             STR_4 FF79                               STR_5 FF04  
                             STR_6 FFB0                               STR_7 FF4D  
                             STR_8 FFC0                               STR_9 FF37  
                             u5120 1C46                               u5050 15DC  
                             u5130 1C7C                               u4460 1F40  
                             u4701 1884                               u4631 1B36  
                             u6320 1130                               u4651 1B54  
                             u4741 1A50                               u4760 1A7C  
                             u5640 060A                               u4681 1866  
                             u6517 2A2A                               u4765 1A74  
                             u5791 07C2                               u5890 1692  
                             _RBPU 007F8F                               _TRMT 007D61  
                     _DS1621_tempC 0041                       _DS1621_tempF 0043  
              ??_Deactivate_Buzzer 0011                               _date 00BE  
                             _main 0FB4                               _font FCED  
                     ___ftpack@arg 0011                               _hour 005D  
                     ___ftpack@exp 0014                   __end_of_I2C_Init 2A48  
                 __end_of_I2C_Read 25A2                               _time 00C7  
                             _year 006C                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 29C6  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                  __end_of_Do_Beep 293E                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 24C4  
                   _Increase_Speed 27A2                    ??_drawFastVLine 001C  
                     ___ftmul@cntr 002A                    __end_of_i2cNack 2A52  
                     ___param_bank 000010                       ___ftmul@sign 002B  
                     ___fttol@exp1 001F                       _Turn_Off_Fan 2A5C  
                     ___fttol@lval 001B                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 14DA          __end_of_Deactivate_Buzzer 2A6C  
                  ??_do_update_pwm 003B                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 1F02                    drawCircle@ddF_x 0026  
                            STR_10 FFCF                    drawCircle@ddF_y 0028  
                            STR_11 FFF8                              STR_12 FF9D  
                            STR_20 FF8E                              STR_13 FFE2  
                            STR_21 FF9F                              STR_14 FFE7  
                            STR_15 FFDC                              STR_16 FFFB  
                            STR_17 FFF4                              STR_18 FFEC  
                            STR_19 FFF0                    __end_of___awmod 200C  
                  __end_of___ftdiv 1C08                    __end_of___ftmul 194E  
                            _T0CON 000FD5                    ___awdiv@divisor 0019  
                            _T1CON 000FCD                    __end_of___fttol 1B26  
                            _T2CON 000FCA                              _T3CON 000FB1  
                  __end_of___lwdiv 23D8                    __end_of___lwmod 2510  
                            i2l727 20CE                              i2l739 14D8  
                  ___awdiv@counter 001B                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _PORTD 000F83                              _PORTE 000F84  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                    __end_of_get_RPM 2620  
                            _Rcmd1 1746                              _Rcmd3 194E  
                       _i2cHighSda 2A74                         _i2cHighScl 2A26  
                  __end_of_dpowers FEDE                              _color 0100  
                            _font2 FDEC                              _found 005C  
                  __end_of_isdigit 289A                              _tempC 00DD  
                            _tempF 00E1                              _month 0060  
                    ___ftpack@sign 0015                              _putch 2A18  
                            main@j 00F3                  __end_of_I2C_Start 29D8  
                __end_of_I2C_Write 26DA                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
           __end_of_Increase_Speed 27D2                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 200C                      ??_Set_RPM_RGB 0021  
                     __end_of_main 11C0                       __end_of_font FDEC  
                 __end_of_Rcmd2red 269C                   ??_Decrease_Speed 003E  
                           ??_main 00F2                      ___fttol@sign1 001A  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 29A2                         _Set_DC_RGB 26DA  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
          __size_of_init_INTERRUPT 0032                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                             _CCPR1L 000FBE  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0017  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                   __end_of___ftpack 1DAA  
                 __end_of___lbtoft 2878                          ??_Do_Beep 0011  
                           _DC_Txt 00D5                             i2l5301 13C4  
                           i2l5313 13EC                          ??_Do_Init 0017  
                           i2l5331 1430                             i2l5307 13E2  
                           i2l5333 1436                             i2l5325 1414  
                           i2l5319 140A                             i2l5345 1490  
                           i2l5337 143A                             i2l5355 14AC  
                           i2l5291 1396                             i2l5363 14B6  
                           i2l5357 14B2                             i2l5741 20C4  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                  ?_Increase_Speed 0001                          ??_i2cNack 0011  
                     _Alarm_SW_Txt 00B8                   _force_nec_state0 2A7C  
                 __end_of_delay_ms 242A                             _i2cAck 29D8  
                 __end_of_fillRect 255A                   __end_of_drawChar 1630  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 282A                          ??___awdiv 001B  
                 __end_of_drawtext 1746                          ??___awmod 0023  
                        ??___ftdiv 0032                          ??___ftmul 0023  
                        ??___fttol 0015                             _chkisr 0008  
                        ??___lwdiv 0015                             _array1 013F  
                        ??___lwmod 001C                             _buffer 0154  
                           _nec_ok 0047                             clear_0 2012  
                           clear_1 201E                   ___awdiv@quotient 001D  
                           _minute 005F                             _second 0062  
          DS3231_Setup_Time@Device 0013                    ___awmod@divisor 0021  
                        ??_get_RPM 0021         __size_of_Deactivate_Buzzer 0008  
                  ___awmod@counter 0023                             _printf 001C  
                     drawtext@size 0040                             _strcpy 270E  
                           _strlen 2620              ___ftmul@f3_as_product 0027  
              __end_of_Set_RPM_RGB 237C                         _Toggle_Fan 2954  
                     __pdataCOMRAM 006D                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FCEC  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 28BA  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 297C  
                       __accesstop 0080            __end_of__initialization 2082  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0064  
               _setup_alarm_second 0065                      ___rparam_used 000001  
                       ___ftdiv@f1 002C                         ___ftdiv@f2 002F  
                       ___ftdiv@f3 0036                         ___lbtoft@c 001C  
                       ___ftmul@f1 001D                         ___ftmul@f2 0020  
                       ___fttol@f1 0011                      __end_of_Rcmd1 1856  
                    __end_of_Rcmd3 1A40                     __pcstackCOMRAM 0001  
                     __pidataBANK0 2254                       __pidataBANK1 2108  
                    __end_of_font2 FEC8                  __end_of_i2cLowSda 2A5C  
                __end_of_i2cLowScl 2A74                      __end_of_putch 2A26  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                        ?_Set_DC_RGB 001F  
                       ??_I2C_Read 0011                       _alarm_minute 0055  
                     _alarm_second 0056                         ??_I2C_Stop 0011  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 21EE  
                          ??_putch 0011                         __pbssBANK0 00F5  
                 _setup_alarm_hour 0063                   _setup_alarm_time 0089  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014          __size_of_Wait_Half_Second 001A  
                  spiwrite@spidata 0012                         _alarm_date 0053  
                       ??_INT0_isr 0001                         _alarm_hour 0054  
                       _alarm_time 0080                            ?_i2cAck 0001  
             Set_DC_RGB@duty_cycle 001F                 __CFG_CCP2MX$PORTBE 000000  
                    ??_Turn_On_Fan 003E                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                        _Set_RPM_RGB 231E  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
                          _CCP1CON 000FBD   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                            _ALARMEN 00F9  
                        ?___ftpack 0011                          ?___lbtoft 0019  
                       I2C_Write@n 0012                            ?_printf 001D  
                          ?_strcpy 0011                            ?_strlen 0011  
                      ?_Toggle_Fan 0001                  ??_Activate_Buzzer 0011  
                       _fillScreen 28D8              __end_of_Update_Screen 0D4A  
                       _drawCircle 11C0                     _init_INTERRUPT 2740  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                            _RPM_Txt 00D0  
            __end_of_fillRectangle 1CE4                            _Do_Beep 2928  
                        ?_drawtext 0039                  _DS3231_Setup_Time 21EE  
                          _Do_Init 2478           _I2C_Write_Cmd_Write_Data 289A  
       __end_of_I2C_Write_Cmd_Only 290E                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                            _i2cNack 2A48  
               __end_of_TIMER1_isr 2A3E                 ?_DS3231_Setup_Time 0001  
                    _write_command 29FA                          _I2C_Start 29C6  
                        _I2C_Write 269C                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __size_of_Set_DC_RGB 0034                __end_of_DS1621_Init 28D8  
                __end_of_drawPixel 27A2                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 1F8A                            ___awdiv 1E6C  
                          ___awmod 1F8A                            ___ftdiv 1B26  
                  __size_of___wmul 0028                            ___ftmul 1856  
                          ___fttol 1A40                            ___lwdiv 237C  
                          ___lwmod 24C4                    __size_of_chkisr 2100  
                        ?_spiwrite 0001                            __pcinit 200C  
                       ??___ftpack 0016                         ??___lbtoft 001C  
                          __ramtop 1000                            _get_RPM 25E2  
                          __ptext0 0FB4                            __ptext1 25E2  
                          __ptext2 0976                            __ptext3 1F8A  
                          __ptext4 2954                            __ptext5 2A0A  
        __size_of_DS1621_Read_Temp 0040                            __ptext6 2A5C  
                          __ptext7 231E                            __ptext8 26DA  
                          __ptext9 1E6C                    __size_of_printf 095A  
                __end_of_init_UART 2990                __end_of_Turn_On_Fan 2A18  
           __end_of_init_INTERRUPT 2772                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FEE6           __end_of_force_nec_state0 2A84  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FED4              __end_of_do_update_pwm 1E6C  
                          _isdigit 2878                          _T3CONbits 000FB1  
                 ___awmod@dividend 001F                         _duty_cycle 005B  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 2954  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 2254  
                 ??_Increase_Speed 003E                         ??_drawChar 0035  
                        _LCD_Reset 2990                      _setAddrWindow 242A  
                   __pintcode_body 208C                         delay_ms@ms 0017  
             end_of_initialization 2082                  __end_of_octpowers FED4  
                       ??_drawtext 00E5                     ?_write_command 0001  
                    __Lmediumconst FCEC          __size_of_DS3231_Read_Time 0064  
                          int_func 208C            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                       get_RPM@RPS 0021                __size_of_Toggle_Fan 0014  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 0187                            printf@f 001D  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
      I2C_Write_Cmd_Write_Data@Cmd 0013                   drawtext@cursor_x 00ED  
                 drawtext@cursor_y 00EC                          _PORTBbits 000F81  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 0092  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 009B                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISBbits 000F93                          _TRISCbits 000F94  
                        _TRISDbits 000F95                       ??_i2cHighSda 0011  
                     ??_i2cHighScl 0011                Set_DC_RGB@d1color_C 0021  
              Set_DC_RGB@d1color_I 0022                  __size_of_I2C_Init 000A  
                __size_of_I2C_Read 0048                  __size_of_I2C_Stop 0012  
                   ?_setAddrWindow 0014                         ?_LCD_Reset 0001  
                 drawtext@textsize 00E8                         drawPixel@x 001B  
                       drawPixel@y 0018                   _Wait_Half_Second 290E  
                      _DS1621_Init 28BA                        ___ftdiv@exp 0039  
                      printf@width 0185                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 016C                     __end_of_i2cAck 29EA  
                      ___ftmul@exp 0026           DS1621_Read_Temp@Data_Ret 0017  
                      _Turn_On_Fan 2A0A                 __end_of_i2cHighSda 2A7C  
               __end_of_i2cHighScl 2A32                     __end_of___wmul 2852  
                    delay_ms@count 001B                         _write_data 29EA  
                    __pidataCOMRAM 2A84                     __end_of_chkisr 2108  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 293E  
                       drawtext@bg 003E                          _Nec_code1 0050  
                        _i2cLowSda 2A52                          _i2cLowScl 2A6C  
                   __end_of_printf 0976                       ??_Set_DC_RGB 0021  
                   __end_of_strcpy 2740                     __end_of_strlen 265E  
                        _Nec_state 0051                start_initialization 200C  
           Update_Screen@neg_tempF 00F0         __size_of_DS3231_Setup_Time 0066  
          __size_of_Decrease_Speed 002E                    ??_write_command 0013  
                        _OpenUSART 217E                   __CFG_OSC$INTIO67 000000  
                      ??_I2C_Start 0011                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 29A2                 __end_of_Set_DC_RGB 270E  
                         ??___wmul 0015                       ?_Set_RPM_RGB 001F  
                    ?_Turn_Off_Fan 0001                           ??_chkisr 0003  
                      __pdataBANK0 0080                        __pdataBANK1 0100  
                  setAddrWindow@x0 0017                    setAddrWindow@x1 0015  
                  setAddrWindow@y0 0014                    setAddrWindow@y1 0016  
                         ??_printf 002B                   _DS1621_Read_Temp 25A2  
                         ??_strcpy 0015                           ??_strlen 0013  
                     ??_Toggle_Fan 003E                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                        __pbssCOMRAM 0041  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00E5                      __pcstackBANK1 0175  
                      ??_LCD_Reset 001D                       _isdigit$2301 0012  
                __size_of_delay_ms 0052                           ?_Do_Beep 0001  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 22BA                           ?_i2cNack 0001  
                __size_of_drawtext 0116                   ___lwdiv@dividend 0011  
               __end_of_Toggle_Fan 2968                        I2C_Read@ack 0011  
                        _bit_count 0057                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 282A                     ??_Turn_Off_Fan 0011  
                    __pmediumconst FCEC                           ?___awdiv 0017  
                         ?___awmod 001F                           ?___ftdiv 002C  
                         ?___ftmul 001D                           ?___fttol 0011  
                        __tft_type 0052                           ?___lwdiv 0011  
               _I2C_Write_Cmd_Only 28F4                           ?___lwmod 0018  
               drawFastVLine@color 001A                        ?_write_data 0001  
                        _drawPixel 2772                           ?_get_RPM 001F  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 2A3E                           _I2C_Read 255A  
                         _I2C_Stop 29B4                  _Initialize_Screen 0D4A  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 297C                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FEDE  
               ?_Initialize_Screen 0001                   ___lwdiv@quotient 0016  
                   __size_of_putch 000E            __end_of_Activate_Buzzer 29B4  
                   ___wmul@product 0015                ??_Initialize_Screen 0041  
                         _INT0_isr 136E                          _octpowers FEC8  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           __size_of_Update_Screen 03D4             DS3231_Read_Time@Device 0015  
                         _PIR1bits 000F9E                   ??_init_INTERRUPT 0011  
                        _setup_day 0066                  DS1621_Init@Device 0016  
                        fillRect@h 0025                          fillRect@i 002C  
                        fillRect@w 0024                          fillRect@x 002B  
                        fillRect@y 0023                          drawChar@c 002F  
                        drawChar@i 0038                          drawChar@j 0037  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
         __end_of_Wait_Half_Second 2928                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 0FB4                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 0188  
                       printf@prec 0184                         ?_init_UART 0001  
                   _Decrease_Speed 27D2                        _INTCON2bits 000FF1  
                        copy_data0 2038                          copy_data1 2058  
                        drawtext@i 00EA             __size_of_drawFastVLine 0088  
                        drawtext@x 00E7                          drawtext@y 0039  
                         _Nec_code 00F5                  write_command@cmd_ 0013  
                      ??_OpenUSART 0013                   __size_of_Do_Beep 0016  
                     ?_DS1621_Init 0001                           _Rcmd2red 265E  
                 __size_of_Do_Init 004C                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0045  
                 __size_of_i2cNack 000A                      _RTC_ALARM_Txt 00BC  
                         __Hrparam 0000             __size_of_do_update_pwm 00C2  
               __end_of_fillScreen 28F4                           __Lrparam 0000  
               __end_of_drawCircle 136E                       ?_Turn_On_Fan 0001  
                 __size_of___awdiv 0096                   __size_of___awmod 0082  
                 __size_of___ftdiv 00E2                   __size_of___ftmul 00F8  
                 __size_of___fttol 00E6                   __size_of___lwdiv 005C  
                 __size_of___lwmod 004C               __size_of_Set_RPM_RGB 005E  
                         ___ftpack 1CE4                           ___lbtoft 2852  
                     ?_I2C_ReStart 0001                   __size_of_get_RPM 003E  
                    _Update_Screen 0976                     _setup_fan_temp 006D  
                   _setup_fan_text 00B3                   __size_of_isdigit 0022  
                         _delay_ms 23D8             __end_of_Decrease_Speed 2800  
                  ___lwdiv@divisor 0013                    ___lwdiv@counter 0015  
                         __ptext10 0D4A                           __ptext11 270E  
                         __ptext20 2772                           __ptext12 28D8  
                         __ptext21 242A                           __ptext13 1C08  
                         __ptext30 23D8                           __ptext22 2800  
                         __ptext14 1630                           __ptext31 27A2  
                         __ptext23 194E                           __ptext15 2620  
                         __ptext40 27D2                           __ptext32 2478  
                         __ptext24 265E                           __ptext16 14DA  
                         __ptext41 001C                           __ptext33 297C  
                         __ptext25 1746                           __ptext17 2510  
                         __ptext50 1856                           __ptext42 2A18  
                         __ptext34 217E                           __ptext26 29EA  
                         __ptext18 1F02                           __ptext51 1B26  
                         __ptext43 2878                           __ptext35 2740  
                         __ptext27 29FA                           __ptext19 11C0  
                         __ptext60 269C                           __ptext52 1CE4  
                         __ptext44 282A                           __ptext36 2A3E  
                         __ptext28 2968                           __ptext61 29B4  
                         __ptext53 2928                           __ptext45 24C4  
                         __ptext37 28BA                           __ptext29 2990  
                         __ptext70 2A26                           __ptext62 29C6  
                         __ptext54 290E                           __ptext46 237C  
                         __ptext38 289A                           __ptext63 255A  
                         __ptext55 2A64                           __ptext47 1DAA  
                         __ptext39 28F4                           __ptext72 2A32  
                         __ptext64 2A48                           __ptext56 29A2  
                         __ptext48 2852                           __ptext73 136E  
                         __ptext65 29D8                           __ptext57 21EE  
                         __ptext49 1A40                           __ptext74 2A7C  
                         __ptext66 293E                           __ptext58 22BA  
                         __ptext67 2A52                           __ptext59 25A2  
                         __ptext68 2A6C                           __ptext69 2A74  
                         _fillRect 2510                           _drawChar 14DA  
             __end_of_Turn_Off_Fan 2A64   __size_of_TFT_GreenTab_Initialize 002A  
                         _colstart 0058                           _drawtext 1630  
                       strcpy@from 0013                      _fillRectangle 1C08  
         __end_of_DS1621_Read_Temp 25E2                   ?_Activate_Buzzer 0001  
                    __size_of_main 020C            __size_of_Increase_Speed 0030  
                  fillRectangle@hi 0021                    fillRectangle@lo 0022  
                    _drawFastVLine 1F02                          printf@idx 0175  
                        printf@len 017E                           _spiwrite 2968  
                        printf@val 0182                        ??_drawPixel 001B  
                         _rowstart 0061           __end_of_DS3231_Read_Time 231E  
       __size_of_Initialize_Screen 026A                     ?_Update_Screen 0001  
                       _INTCONbits 000FF2                      _do_update_pwm 1DAA  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                  ?_Decrease_Speed 0001                           isdigit@c 0013  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                   ___lwmod@dividend 0018  
            __end_of_write_command 2A0A                    fillScreen@color 0024  
          do_update_pwm@duty_cycle 00E8                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 0180                           printf@cp 0176  
                     ??_write_data 0013                         _TIMER1_isr 2A32  
                    fillRect@color 0026                        _printf$1771 0178  
                      _printf$1772 017A                        _printf$1778 017C  
                   ?_do_update_pwm 0001                    ___lwmod@divisor 001A  
                         strcpy@cp 0015                           strlen@cp 0015  
                         strcpy@to 0011              I2C_Write_Cmd_Only@Cmd 0013  
                  ___lwmod@counter 001C             Set_RPM_RGB@maskedValue 0025  
                     _setup_minute 0068                       _setup_second 006A  
                  Set_RPM_RGB@mask 0024              __end_of_setAddrWindow 2478  
               fillRectangle@color 001B                  do_update_pwm@dc_I 00E9  
                do_update_pwm@dc_f 00E5                     Set_RPM_RGB@RPM 0022  
                    drawChar@color 0030                        _setup_month 0069  
                   Set_RPM_RGB@rpm 001F                 __end_of_write_data 29FA  
        __size_of_force_nec_state0 0008                       drawChar@line 0035  
                     drawChar@size 0034  __size_of_I2C_Write_Cmd_Write_Data 0020  
             __size_of_DS1621_Init 001E          ?_I2C_Write_Cmd_Write_Data 0013  
