

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 28 15:33:55 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           	psect	idataCOMRAM
    98  002A7E                     __pidataCOMRAM:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _setup_fan_temp
   102  002A7E  4B                 	db	75
   103                           
   104                           ;initializer for _tempSecond
   105  002A7F  FF                 	db	255
   106                           
   107                           ;initializer for _wrap
   108  002A80  01                 	db	1
   109                           
   110                           	psect	idataBANK0
   111  0021EE                     __pidataBANK0:
   112                           	opt stack 0
   113                           
   114                           ;initializer for _D1
   115  0021EE  F0                 	db	240
   116  0021EF  F1                 	db	241
   117  0021F0  F2                 	db	242
   118  0021F1  F3                 	db	243
   119  0021F2  F4                 	db	244
   120  0021F3  F5                 	db	245
   121  0021F4  F6                 	db	246
   122  0021F5  F7                 	db	247
   123  0021F6  F7                 	db	247
   124  0021F7  F7                 	db	247
   125  0021F8  F7                 	db	247
   126                           
   127                           ;initializer for _alarm_time
   128  0021F9  30                 	db	48
   129  0021FA  30                 	db	48
   130  0021FB  3A                 	db	58
   131  0021FC  30                 	db	48
   132  0021FD  30                 	db	48
   133  0021FE  3A                 	db	58
   134  0021FF  30                 	db	48
   135  002200  30                 	db	48
   136  002201  00                 	db	0
   137                           
   138                           ;initializer for _setup_alarm_time
   139  002202  30                 	db	48
   140  002203  30                 	db	48
   141  002204  3A                 	db	58
   142  002205  30                 	db	48
   143  002206  30                 	db	48
   144  002207  3A                 	db	58
   145  002208  30                 	db	48
   146  002209  30                 	db	48
   147  00220A  00                 	db	0
   148                           
   149                           ;initializer for _setup_date
   150  00220B  30                 	db	48
   151  00220C  31                 	db	49
   152  00220D  2F                 	db	47
   153  00220E  30                 	db	48
   154  00220F  31                 	db	49
   155  002210  2F                 	db	47
   156  002211  30                 	db	48
   157  002212  30                 	db	48
   158  002213  00                 	db	0
   159                           
   160                           ;initializer for _setup_time
   161  002214  30                 	db	48
   162  002215  30                 	db	48
   163  002216  3A                 	db	58
   164  002217  30                 	db	48
   165  002218  30                 	db	48
   166  002219  3A                 	db	58
   167  00221A  30                 	db	48
   168  00221B  30                 	db	48
   169  00221C  00                 	db	0
   170                           
   171                           ;initializer for _D2
   172  00221D  F0                 	db	240
   173  00221E  F1                 	db	241
   174  00221F  F3                 	db	243
   175  002220  F2                 	db	242
   176  002221  F4                 	db	244
   177  002222  F5                 	db	245
   178  002223  F6                 	db	246
   179  002224  F7                 	db	247
   180                           
   181                           ;initializer for _setup_fan_text
   182  002225  30                 	db	48
   183  002226  37                 	db	55
   184  002227  35                 	db	53
   185  002228  46                 	db	70
   186  002229  00                 	db	0
   187                           
   188                           ;initializer for _Alarm_SW_Txt
   189  00222A  4F                 	db	79
   190  00222B  46                 	db	70
   191  00222C  46                 	db	70
   192  00222D  00                 	db	0
   193                           
   194                           ;initializer for _RTC_ALARM_Txt
   195  00222E  30                 	db	48
   196  00222F  00                 	db	0
   197                           
   198                           ;initializer for _date
   199  002230  30                 	db	48
   200  002231  30                 	db	48
   201  002232  2F                 	db	47
   202  002233  30                 	db	48
   203  002234  30                 	db	48
   204  002235  2F                 	db	47
   205  002236  30                 	db	48
   206  002237  30                 	db	48
   207  002238  00                 	db	0
   208                           
   209                           ;initializer for _time
   210  002239  30                 	db	48
   211  00223A  30                 	db	48
   212  00223B  3A                 	db	58
   213  00223C  30                 	db	48
   214  00223D  30                 	db	48
   215  00223E  3A                 	db	58
   216  00223F  30                 	db	48
   217  002240  30                 	db	48
   218  002241  00                 	db	0
   219                           
   220                           ;initializer for _RPM_Txt
   221  002242  30                 	db	48
   222  002243  30                 	db	48
   223  002244  30                 	db	48
   224  002245  30                 	db	48
   225  002246  00                 	db	0
   226                           
   227                           ;initializer for _DC_Txt
   228  002247  30                 	db	48
   229  002248  30                 	db	48
   230  002249  30                 	db	48
   231  00224A  00                 	db	0
   232                           
   233                           ;initializer for _Fan_SW_Txt
   234  00224B  4F                 	db	79
   235  00224C  46                 	db	70
   236  00224D  46                 	db	70
   237  00224E  00                 	db	0
   238                           
   239                           ;initializer for _tempC
   240  00224F  2B                 	db	43
   241  002250  32                 	db	50
   242  002251  35                 	db	53
   243  002252  00                 	db	0
   244                           
   245                           ;initializer for _tempF
   246  002253  2B                 	db	43
   247  002254  37                 	db	55
   248  002255  37                 	db	55
   249  002256  00                 	db	0
   250                           
   251                           	psect	idataBANK1
   252  002108                     __pidataBANK1:
   253                           	opt stack 0
   254                           
   255                           ;initializer for _color
   256  002108  F800               	dw	63488
   257  00210A  F800               	dw	63488
   258  00210C  F800               	dw	63488
   259  00210E  001F               	dw	31
   260  002110  001F               	dw	31
   261  002112  07E0               	dw	2016
   262  002114  F81F               	dw	63519
   263  002116  F81F               	dw	63519
   264  002118  F81F               	dw	63519
   265  00211A  0000               	dw	0
   266  00211C  0000               	dw	0
   267  00211E  0000               	dw	0
   268  002120  0000               	dw	0
   269  002122  0000               	dw	0
   270  002124  0000               	dw	0
   271  002126  0000               	dw	0
   272  002128  0000               	dw	0
   273  00212A  0000               	dw	0
   274  00212C  0000               	dw	0
   275  00212E  0000               	dw	0
   276  002130  0000               	dw	0
   277                           
   278                           ;initializer for _D3
   279  002132  01                 	db	1
   280  002133  01                 	db	1
   281  002134  01                 	db	1
   282  002135  04                 	db	4
   283  002136  04                 	db	4
   284  002137  02                 	db	2
   285  002138  05                 	db	5
   286  002139  05                 	db	5
   287  00213A  05                 	db	5
   288  00213B  07                 	db	7
   289  00213C  07                 	db	7
   290  00213D  07                 	db	7
   291  00213E  07                 	db	7
   292  00213F  07                 	db	7
   293  002140  07                 	db	7
   294  002141  07                 	db	7
   295  002142  07                 	db	7
   296  002143  07                 	db	7
   297  002144  07                 	db	7
   298  002145  07                 	db	7
   299  002146  07                 	db	7
   300                           
   301                           ;initializer for _array1
   302  002147  A2                 	db	162
   303  002148  62                 	db	98
   304  002149  E2                 	db	226
   305  00214A  22                 	db	34
   306  00214B  02                 	db	2
   307  00214C  C2                 	db	194
   308  00214D  E0                 	db	224
   309  00214E  A8                 	db	168
   310  00214F  90                 	db	144
   311  002150  68                 	db	104
   312  002151  98                 	db	152
   313  002152  B0                 	db	176
   314  002153  30                 	db	48
   315  002154  18                 	db	24
   316  002155  7A                 	db	122
   317  002156  10                 	db	16
   318  002157  38                 	db	56
   319  002158  5A                 	db	90
   320  002159  42                 	db	66
   321  00215A  4A                 	db	74
   322  00215B  52                 	db	82
   323                           
   324                           ;initializer for _buffer
   325  00215C  20                 	db	32
   326  00215D  45                 	db	69
   327  00215E  43                 	db	67
   328  00215F  45                 	db	69
   329  002160  33                 	db	51
   330  002161  33                 	db	51
   331  002162  30                 	db	48
   332  002163  31                 	db	49
   333  002164  4C                 	db	76
   334  002165  20                 	db	32
   335  002166  53                 	db	83
   336  002167  70                 	db	112
   337  002168  27                 	db	39
   338  002169  32                 	db	50
   339  00216A  32                 	db	50
   340  00216B  20                 	db	32
   341  00216C  4C                 	db	76
   342  00216D  31                 	db	49
   343  00216E  32                 	db	50
   344  00216F  00                 	db	0
   345  002170  00                 	db	0
   346  002171  00                 	db	0
   347  002172  00                 	db	0
   348  002173  00                 	db	0
   349  002174  00                 	db	0
   350  002175  00                 	db	0
   351  002176  00                 	db	0
   352  002177  00                 	db	0
   353  002178  00                 	db	0
   354  002179  00                 	db	0
   355  00217A  00                 	db	0
   356  00217B  00                 	db	0
   357  00217C  00                 	db	0
   358                           
   359                           	psect	mediumconst
   360  00F9EC                     __pmediumconst:
   361                           	opt stack 0
   362  00F9EC  00                 	db	0
   363  00F9ED                     _font:
   364                           	opt stack 0
   365  00F9ED  00                 	db	0
   366  00F9EE  00                 	db	0
   367  00F9EF  00                 	db	0
   368  00F9F0  00                 	db	0
   369  00F9F1  00                 	db	0
   370  00F9F2  00                 	db	0
   371  00F9F3  00                 	db	0
   372  00F9F4  5F                 	db	95
   373  00F9F5  00                 	db	0
   374  00F9F6  00                 	db	0
   375  00F9F7  00                 	db	0
   376  00F9F8  07                 	db	7
   377  00F9F9  00                 	db	0
   378  00F9FA  07                 	db	7
   379  00F9FB  00                 	db	0
   380  00F9FC  14                 	db	20
   381  00F9FD  7F                 	db	127
   382  00F9FE  14                 	db	20
   383  00F9FF  7F                 	db	127
   384  00FA00  14                 	db	20
   385  00FA01  24                 	db	36
   386  00FA02  2A                 	db	42
   387  00FA03  7F                 	db	127
   388  00FA04  2A                 	db	42
   389  00FA05  12                 	db	18
   390  00FA06  23                 	db	35
   391  00FA07  13                 	db	19
   392  00FA08  08                 	db	8
   393  00FA09  64                 	db	100
   394  00FA0A  62                 	db	98
   395  00FA0B  36                 	db	54
   396  00FA0C  49                 	db	73
   397  00FA0D  56                 	db	86
   398  00FA0E  20                 	db	32
   399  00FA0F  50                 	db	80
   400  00FA10  00                 	db	0
   401  00FA11  08                 	db	8
   402  00FA12  07                 	db	7
   403  00FA13  03                 	db	3
   404  00FA14  00                 	db	0
   405  00FA15  00                 	db	0
   406  00FA16  1C                 	db	28
   407  00FA17  22                 	db	34
   408  00FA18  41                 	db	65
   409  00FA19  00                 	db	0
   410  00FA1A  00                 	db	0
   411  00FA1B  41                 	db	65
   412  00FA1C  22                 	db	34
   413  00FA1D  1C                 	db	28
   414  00FA1E  00                 	db	0
   415  00FA1F  2A                 	db	42
   416  00FA20  1C                 	db	28
   417  00FA21  7F                 	db	127
   418  00FA22  1C                 	db	28
   419  00FA23  2A                 	db	42
   420  00FA24  08                 	db	8
   421  00FA25  08                 	db	8
   422  00FA26  3E                 	db	62
   423  00FA27  08                 	db	8
   424  00FA28  08                 	db	8
   425  00FA29  00                 	db	0
   426  00FA2A  80                 	db	128
   427  00FA2B  70                 	db	112
   428  00FA2C  30                 	db	48
   429  00FA2D  00                 	db	0
   430  00FA2E  08                 	db	8
   431  00FA2F  08                 	db	8
   432  00FA30  08                 	db	8
   433  00FA31  08                 	db	8
   434  00FA32  08                 	db	8
   435  00FA33  00                 	db	0
   436  00FA34  00                 	db	0
   437  00FA35  60                 	db	96
   438  00FA36  60                 	db	96
   439  00FA37  00                 	db	0
   440  00FA38  20                 	db	32
   441  00FA39  10                 	db	16
   442  00FA3A  08                 	db	8
   443  00FA3B  04                 	db	4
   444  00FA3C  02                 	db	2
   445  00FA3D  3E                 	db	62
   446  00FA3E  51                 	db	81
   447  00FA3F  49                 	db	73
   448  00FA40  45                 	db	69
   449  00FA41  3E                 	db	62
   450  00FA42  00                 	db	0
   451  00FA43  42                 	db	66
   452  00FA44  7F                 	db	127
   453  00FA45  40                 	db	64
   454  00FA46  00                 	db	0
   455  00FA47  72                 	db	114
   456  00FA48  49                 	db	73
   457  00FA49  49                 	db	73
   458  00FA4A  49                 	db	73
   459  00FA4B  46                 	db	70
   460  00FA4C  21                 	db	33
   461  00FA4D  41                 	db	65
   462  00FA4E  49                 	db	73
   463  00FA4F  4D                 	db	77
   464  00FA50  33                 	db	51
   465  00FA51  18                 	db	24
   466  00FA52  14                 	db	20
   467  00FA53  12                 	db	18
   468  00FA54  7F                 	db	127
   469  00FA55  10                 	db	16
   470  00FA56  27                 	db	39
   471  00FA57  45                 	db	69
   472  00FA58  45                 	db	69
   473  00FA59  45                 	db	69
   474  00FA5A  39                 	db	57
   475  00FA5B  3C                 	db	60
   476  00FA5C  4A                 	db	74
   477  00FA5D  49                 	db	73
   478  00FA5E  49                 	db	73
   479  00FA5F  31                 	db	49
   480  00FA60  41                 	db	65
   481  00FA61  21                 	db	33
   482  00FA62  11                 	db	17
   483  00FA63  09                 	db	9
   484  00FA64  07                 	db	7
   485  00FA65  36                 	db	54
   486  00FA66  49                 	db	73
   487  00FA67  49                 	db	73
   488  00FA68  49                 	db	73
   489  00FA69  36                 	db	54
   490  00FA6A  46                 	db	70
   491  00FA6B  49                 	db	73
   492  00FA6C  49                 	db	73
   493  00FA6D  29                 	db	41
   494  00FA6E  1E                 	db	30
   495  00FA6F  00                 	db	0
   496  00FA70  00                 	db	0
   497  00FA71  14                 	db	20
   498  00FA72  00                 	db	0
   499  00FA73  00                 	db	0
   500  00FA74  00                 	db	0
   501  00FA75  40                 	db	64
   502  00FA76  34                 	db	52
   503  00FA77  00                 	db	0
   504  00FA78  00                 	db	0
   505  00FA79  00                 	db	0
   506  00FA7A  08                 	db	8
   507  00FA7B  14                 	db	20
   508  00FA7C  22                 	db	34
   509  00FA7D  41                 	db	65
   510  00FA7E  14                 	db	20
   511  00FA7F  14                 	db	20
   512  00FA80  14                 	db	20
   513  00FA81  14                 	db	20
   514  00FA82  14                 	db	20
   515  00FA83  00                 	db	0
   516  00FA84  41                 	db	65
   517  00FA85  22                 	db	34
   518  00FA86  14                 	db	20
   519  00FA87  08                 	db	8
   520  00FA88  02                 	db	2
   521  00FA89  01                 	db	1
   522  00FA8A  59                 	db	89
   523  00FA8B  09                 	db	9
   524  00FA8C  06                 	db	6
   525  00FA8D  3E                 	db	62
   526  00FA8E  41                 	db	65
   527  00FA8F  5D                 	db	93
   528  00FA90  59                 	db	89
   529  00FA91  4E                 	db	78
   530  00FA92  7C                 	db	124
   531  00FA93  12                 	db	18
   532  00FA94  11                 	db	17
   533  00FA95  12                 	db	18
   534  00FA96  7C                 	db	124
   535  00FA97  7F                 	db	127
   536  00FA98  49                 	db	73
   537  00FA99  49                 	db	73
   538  00FA9A  49                 	db	73
   539  00FA9B  36                 	db	54
   540  00FA9C  3E                 	db	62
   541  00FA9D  41                 	db	65
   542  00FA9E  41                 	db	65
   543  00FA9F  41                 	db	65
   544  00FAA0  22                 	db	34
   545  00FAA1  7F                 	db	127
   546  00FAA2  41                 	db	65
   547  00FAA3  41                 	db	65
   548  00FAA4  41                 	db	65
   549  00FAA5  3E                 	db	62
   550  00FAA6  7F                 	db	127
   551  00FAA7  49                 	db	73
   552  00FAA8  49                 	db	73
   553  00FAA9  49                 	db	73
   554  00FAAA  41                 	db	65
   555  00FAAB  7F                 	db	127
   556  00FAAC  09                 	db	9
   557  00FAAD  09                 	db	9
   558  00FAAE  09                 	db	9
   559  00FAAF  01                 	db	1
   560  00FAB0  3E                 	db	62
   561  00FAB1  41                 	db	65
   562  00FAB2  41                 	db	65
   563  00FAB3  51                 	db	81
   564  00FAB4  73                 	db	115
   565  00FAB5  7F                 	db	127
   566  00FAB6  08                 	db	8
   567  00FAB7  08                 	db	8
   568  00FAB8  08                 	db	8
   569  00FAB9  7F                 	db	127
   570  00FABA  00                 	db	0
   571  00FABB  41                 	db	65
   572  00FABC  7F                 	db	127
   573  00FABD  41                 	db	65
   574  00FABE  00                 	db	0
   575  00FABF  20                 	db	32
   576  00FAC0  40                 	db	64
   577  00FAC1  41                 	db	65
   578  00FAC2  3F                 	db	63
   579  00FAC3  01                 	db	1
   580  00FAC4  7F                 	db	127
   581  00FAC5  08                 	db	8
   582  00FAC6  14                 	db	20
   583  00FAC7  22                 	db	34
   584  00FAC8  41                 	db	65
   585  00FAC9  7F                 	db	127
   586  00FACA  40                 	db	64
   587  00FACB  40                 	db	64
   588  00FACC  40                 	db	64
   589  00FACD  40                 	db	64
   590  00FACE  7F                 	db	127
   591  00FACF  02                 	db	2
   592  00FAD0  1C                 	db	28
   593  00FAD1  02                 	db	2
   594  00FAD2  7F                 	db	127
   595  00FAD3  7F                 	db	127
   596  00FAD4  04                 	db	4
   597  00FAD5  08                 	db	8
   598  00FAD6  10                 	db	16
   599  00FAD7  7F                 	db	127
   600  00FAD8  3E                 	db	62
   601  00FAD9  41                 	db	65
   602  00FADA  41                 	db	65
   603  00FADB  41                 	db	65
   604  00FADC  3E                 	db	62
   605  00FADD  7F                 	db	127
   606  00FADE  09                 	db	9
   607  00FADF  09                 	db	9
   608  00FAE0  09                 	db	9
   609  00FAE1  06                 	db	6
   610  00FAE2  3E                 	db	62
   611  00FAE3  41                 	db	65
   612  00FAE4  51                 	db	81
   613  00FAE5  21                 	db	33
   614  00FAE6  5E                 	db	94
   615  00FAE7  7F                 	db	127
   616  00FAE8  09                 	db	9
   617  00FAE9  19                 	db	25
   618  00FAEA  29                 	db	41
   619  00FAEB  46                 	db	70
   620  00FAEC                     __end_of_font:
   621                           	opt stack 0
   622  00FAEC                     _font2:
   623                           	opt stack 0
   624  00FAEC  26                 	db	38
   625  00FAED  49                 	db	73
   626  00FAEE  49                 	db	73
   627  00FAEF  49                 	db	73
   628  00FAF0  32                 	db	50
   629  00FAF1  03                 	db	3
   630  00FAF2  01                 	db	1
   631  00FAF3  7F                 	db	127
   632  00FAF4  01                 	db	1
   633  00FAF5  03                 	db	3
   634  00FAF6  3F                 	db	63
   635  00FAF7  40                 	db	64
   636  00FAF8  40                 	db	64
   637  00FAF9  40                 	db	64
   638  00FAFA  3F                 	db	63
   639  00FAFB  1F                 	db	31
   640  00FAFC  20                 	db	32
   641  00FAFD  40                 	db	64
   642  00FAFE  20                 	db	32
   643  00FAFF  1F                 	db	31
   644  00FB00  3F                 	db	63
   645  00FB01  40                 	db	64
   646  00FB02  38                 	db	56
   647  00FB03  40                 	db	64
   648  00FB04  3F                 	db	63
   649  00FB05  63                 	db	99
   650  00FB06  14                 	db	20
   651  00FB07  08                 	db	8
   652  00FB08  14                 	db	20
   653  00FB09  63                 	db	99
   654  00FB0A  03                 	db	3
   655  00FB0B  04                 	db	4
   656  00FB0C  78                 	db	120
   657  00FB0D  04                 	db	4
   658  00FB0E  03                 	db	3
   659  00FB0F  61                 	db	97
   660  00FB10  59                 	db	89
   661  00FB11  49                 	db	73
   662  00FB12  4D                 	db	77
   663  00FB13  43                 	db	67
   664  00FB14  00                 	db	0
   665  00FB15  7F                 	db	127
   666  00FB16  41                 	db	65
   667  00FB17  41                 	db	65
   668  00FB18  41                 	db	65
   669  00FB19  02                 	db	2
   670  00FB1A  04                 	db	4
   671  00FB1B  08                 	db	8
   672  00FB1C  10                 	db	16
   673  00FB1D  20                 	db	32
   674  00FB1E  00                 	db	0
   675  00FB1F  41                 	db	65
   676  00FB20  41                 	db	65
   677  00FB21  41                 	db	65
   678  00FB22  7F                 	db	127
   679  00FB23  04                 	db	4
   680  00FB24  02                 	db	2
   681  00FB25  01                 	db	1
   682  00FB26  02                 	db	2
   683  00FB27  04                 	db	4
   684  00FB28  40                 	db	64
   685  00FB29  40                 	db	64
   686  00FB2A  40                 	db	64
   687  00FB2B  40                 	db	64
   688  00FB2C  40                 	db	64
   689  00FB2D  00                 	db	0
   690  00FB2E  03                 	db	3
   691  00FB2F  07                 	db	7
   692  00FB30  08                 	db	8
   693  00FB31  00                 	db	0
   694  00FB32  20                 	db	32
   695  00FB33  54                 	db	84
   696  00FB34  54                 	db	84
   697  00FB35  78                 	db	120
   698  00FB36  40                 	db	64
   699  00FB37  7F                 	db	127
   700  00FB38  28                 	db	40
   701  00FB39  44                 	db	68
   702  00FB3A  44                 	db	68
   703  00FB3B  38                 	db	56
   704  00FB3C  38                 	db	56
   705  00FB3D  44                 	db	68
   706  00FB3E  44                 	db	68
   707  00FB3F  44                 	db	68
   708  00FB40  28                 	db	40
   709  00FB41  38                 	db	56
   710  00FB42  44                 	db	68
   711  00FB43  44                 	db	68
   712  00FB44  28                 	db	40
   713  00FB45  7F                 	db	127
   714  00FB46  38                 	db	56
   715  00FB47  54                 	db	84
   716  00FB48  54                 	db	84
   717  00FB49  54                 	db	84
   718  00FB4A  18                 	db	24
   719  00FB4B  00                 	db	0
   720  00FB4C  08                 	db	8
   721  00FB4D  7E                 	db	126
   722  00FB4E  09                 	db	9
   723  00FB4F  02                 	db	2
   724  00FB50  18                 	db	24
   725  00FB51  A4                 	db	164
   726  00FB52  A4                 	db	164
   727  00FB53  9C                 	db	156
   728  00FB54  78                 	db	120
   729  00FB55  7F                 	db	127
   730  00FB56  08                 	db	8
   731  00FB57  04                 	db	4
   732  00FB58  04                 	db	4
   733  00FB59  78                 	db	120
   734  00FB5A  00                 	db	0
   735  00FB5B  44                 	db	68
   736  00FB5C  7D                 	db	125
   737  00FB5D  40                 	db	64
   738  00FB5E  00                 	db	0
   739  00FB5F  20                 	db	32
   740  00FB60  40                 	db	64
   741  00FB61  40                 	db	64
   742  00FB62  3D                 	db	61
   743  00FB63  00                 	db	0
   744  00FB64  7F                 	db	127
   745  00FB65  10                 	db	16
   746  00FB66  28                 	db	40
   747  00FB67  44                 	db	68
   748  00FB68  00                 	db	0
   749  00FB69  00                 	db	0
   750  00FB6A  41                 	db	65
   751  00FB6B  7F                 	db	127
   752  00FB6C  40                 	db	64
   753  00FB6D  00                 	db	0
   754  00FB6E  7C                 	db	124
   755  00FB6F  04                 	db	4
   756  00FB70  78                 	db	120
   757  00FB71  04                 	db	4
   758  00FB72  78                 	db	120
   759  00FB73  7C                 	db	124
   760  00FB74  08                 	db	8
   761  00FB75  04                 	db	4
   762  00FB76  04                 	db	4
   763  00FB77  78                 	db	120
   764  00FB78  38                 	db	56
   765  00FB79  44                 	db	68
   766  00FB7A  44                 	db	68
   767  00FB7B  44                 	db	68
   768  00FB7C  38                 	db	56
   769  00FB7D  FC                 	db	252
   770  00FB7E  18                 	db	24
   771  00FB7F  24                 	db	36
   772  00FB80  24                 	db	36
   773  00FB81  18                 	db	24
   774  00FB82  18                 	db	24
   775  00FB83  24                 	db	36
   776  00FB84  24                 	db	36
   777  00FB85  18                 	db	24
   778  00FB86  FC                 	db	252
   779  00FB87  7C                 	db	124
   780  00FB88  08                 	db	8
   781  00FB89  04                 	db	4
   782  00FB8A  04                 	db	4
   783  00FB8B  08                 	db	8
   784  00FB8C  48                 	db	72
   785  00FB8D  54                 	db	84
   786  00FB8E  54                 	db	84
   787  00FB8F  54                 	db	84
   788  00FB90  24                 	db	36
   789  00FB91  04                 	db	4
   790  00FB92  04                 	db	4
   791  00FB93  3F                 	db	63
   792  00FB94  44                 	db	68
   793  00FB95  24                 	db	36
   794  00FB96  3C                 	db	60
   795  00FB97  40                 	db	64
   796  00FB98  40                 	db	64
   797  00FB99  20                 	db	32
   798  00FB9A  7C                 	db	124
   799  00FB9B  1C                 	db	28
   800  00FB9C  20                 	db	32
   801  00FB9D  40                 	db	64
   802  00FB9E  20                 	db	32
   803  00FB9F  1C                 	db	28
   804  00FBA0  3C                 	db	60
   805  00FBA1  40                 	db	64
   806  00FBA2  30                 	db	48
   807  00FBA3  40                 	db	64
   808  00FBA4  3C                 	db	60
   809  00FBA5  44                 	db	68
   810  00FBA6  28                 	db	40
   811  00FBA7  10                 	db	16
   812  00FBA8  28                 	db	40
   813  00FBA9  44                 	db	68
   814  00FBAA  4C                 	db	76
   815  00FBAB  90                 	db	144
   816  00FBAC  90                 	db	144
   817  00FBAD  90                 	db	144
   818  00FBAE  7C                 	db	124
   819  00FBAF  44                 	db	68
   820  00FBB0  64                 	db	100
   821  00FBB1  54                 	db	84
   822  00FBB2  4C                 	db	76
   823  00FBB3  44                 	db	68
   824  00FBB4  00                 	db	0
   825  00FBB5  08                 	db	8
   826  00FBB6  36                 	db	54
   827  00FBB7  41                 	db	65
   828  00FBB8  00                 	db	0
   829  00FBB9  00                 	db	0
   830  00FBBA  00                 	db	0
   831  00FBBB  77                 	db	119
   832  00FBBC  00                 	db	0
   833  00FBBD  00                 	db	0
   834  00FBBE  00                 	db	0
   835  00FBBF  41                 	db	65
   836  00FBC0  36                 	db	54
   837  00FBC1  08                 	db	8
   838  00FBC2  00                 	db	0
   839  00FBC3  02                 	db	2
   840  00FBC4  01                 	db	1
   841  00FBC5  02                 	db	2
   842  00FBC6  04                 	db	4
   843  00FBC7  02                 	db	2
   844  00FBC8                     __end_of_font2:
   845                           	opt stack 0
   846  00FBC8                     _octpowers:
   847                           	opt stack 0
   848  00FBC8  0001               	dw	1
   849  00FBCA  0008               	dw	8
   850  00FBCC  0040               	dw	64
   851  00FBCE  0200               	dw	512
   852  00FBD0  1000               	dw	4096
   853  00FBD2  8000               	dw	32768
   854  00FBD4                     __end_of_octpowers:
   855                           	opt stack 0
   856  00FBD4                     _dpowers:
   857                           	opt stack 0
   858  00FBD4  0001               	dw	1
   859  00FBD6  000A               	dw	10
   860  00FBD8  0064               	dw	100
   861  00FBDA  03E8               	dw	1000
   862  00FBDC  2710               	dw	10000
   863  00FBDE                     __end_of_dpowers:
   864                           	opt stack 0
   865  00FBDE                     _hexpowers:
   866                           	opt stack 0
   867  00FBDE  0001               	dw	1
   868  00FBE0  0010               	dw	16
   869  00FBE2  0100               	dw	256
   870  00FBE4  1000               	dw	4096
   871  00FBE6                     __end_of_hexpowers:
   872                           	opt stack 0
   873  0000                     _PORTA	set	3968
   874  0000                     _PORTAbits	set	3968
   875  0000                     _PORTBbits	set	3969
   876  0000                     _PORTD	set	3971
   877  0000                     _PORTDbits	set	3971
   878  0000                     _PORTE	set	3972
   879  0000                     _TRISA	set	3986
   880  0000                     _TRISAbits	set	3986
   881  0000                     _TRISB	set	3987
   882  0000                     _TRISC	set	3988
   883  0000                     _TRISCbits	set	3988
   884  0000                     _TRISD	set	3989
   885  0000                     _TRISE	set	3990
   886  0000                     _ADCON1	set	4033
   887  0000                     _CCP1CON	set	4029
   888  0000                     _CCP2CON	set	4026
   889  0000                     _CCPR1L	set	4030
   890  0000                     _CCPR2L	set	4027
   891  0000                     _OSCCON	set	4051
   892  0000                     _PIE1bits	set	3997
   893  0000                     _PIR1bits	set	3998
   894  0000                     _PR2	set	4043
   895  0000                     _RCSTA	set	4011
   896  0000                     _RCSTAbits	set	4011
   897  0000                     _SPBRG	set	4015
   898  0000                     _SPBRGH	set	4016
   899  0000                     _SSPBUF	set	4041
   900  0000                     _SSPCON1	set	4038
   901  0000                     _SSPSTAT	set	4039
   902  0000                     _SSPSTATbits	set	4039
   903  0000                     _T1CON	set	4045
   904  0000                     _T1CONbits	set	4045
   905  0000                     _T2CON	set	4042
   906  0000                     _T3CON	set	4017
   907  0000                     _T3CONbits	set	4017
   908  0000                     _TMR1H	set	4047
   909  0000                     _TMR1L	set	4046
   910  0000                     _TMR3L	set	4018
   911  0000                     _TXREG	set	4013
   912  0000                     _TXSTA	set	4012
   913  0000                     _TXSTAbits	set	4012
   914  0000                     _TRMT	set	32097
   915  0000                     _T0CON	set	4053
   916  0000                     _T0CONbits	set	4053
   917  0000                     _TMR0H	set	4055
   918  0000                     _TMR0L	set	4054
   919  0000                     _INTCON2bits	set	4081
   920  0000                     _INTCONbits	set	4082
   921  0000                     _RBPU	set	32655
   922  00FBE6                     STR_3:
   923  00FBE6  25                 	db	37
   924  00FBE7  30                 	db	48	;'0'
   925  00FBE8  32                 	db	50	;'2'
   926  00FBE9  78                 	db	120	;'x'
   927  00FBEA  3A                 	db	58	;':'
   928  00FBEB  25                 	db	37
   929  00FBEC  30                 	db	48	;'0'
   930  00FBED  32                 	db	50	;'2'
   931  00FBEE  78                 	db	120	;'x'
   932  00FBEF  3A                 	db	58	;':'
   933  00FBF0  25                 	db	37
   934  00FBF1  30                 	db	48	;'0'
   935  00FBF2  32                 	db	50	;'2'
   936  00FBF3  78                 	db	120	;'x'
   937  00FBF4  20                 	db	32
   938  00FBF5  25                 	db	37
   939  00FBF6  30                 	db	48	;'0'
   940  00FBF7  32                 	db	50	;'2'
   941  00FBF8  78                 	db	120	;'x'
   942  00FBF9  2F                 	db	47
   943  00FBFA  25                 	db	37
   944  00FBFB  30                 	db	48	;'0'
   945  00FBFC  32                 	db	50	;'2'
   946  00FBFD  78                 	db	120	;'x'
   947  00FBFE  2F                 	db	47
   948  00FBFF  25                 	db	37
   949  00FC00  30                 	db	48	;'0'
   950  00FC01  32                 	db	50	;'2'
   951  00FC02  78                 	db	120	;'x'
   952  00FC03  00                 	db	0
   953  00FC04                     STR_5:
   954  00FC04  52                 	db	82	;'R'
   955  00FC05  50                 	db	80	;'P'
   956  00FC06  4D                 	db	77	;'M'
   957  00FC07  20                 	db	32
   958  00FC08  3D                 	db	61	;'='
   959  00FC09  20                 	db	32
   960  00FC0A  25                 	db	37
   961  00FC0B  64                 	db	100	;'d'
   962  00FC0C  20                 	db	32
   963  00FC0D  64                 	db	100	;'d'
   964  00FC0E  75                 	db	117	;'u'
   965  00FC0F  74                 	db	116	;'t'
   966  00FC10  79                 	db	121	;'y'
   967  00FC11  5F                 	db	95	;'_'
   968  00FC12  63                 	db	99	;'c'
   969  00FC13  79                 	db	121	;'y'
   970  00FC14  63                 	db	99	;'c'
   971  00FC15  6C                 	db	108	;'l'
   972  00FC16  65                 	db	101	;'e'
   973  00FC17  20                 	db	32
   974  00FC18  3D                 	db	61	;'='
   975  00FC19  20                 	db	32
   976  00FC1A  25                 	db	37
   977  00FC1B  64                 	db	100	;'d'
   978  00FC1C  0D                 	db	13
   979  00FC1D  0A                 	db	10
   980  00FC1E  00                 	db	0
   981  00FC1F                     STR_1:
   982  00FC1F  44                 	db	68	;'D'
   983  00FC20  75                 	db	117	;'u'
   984  00FC21  74                 	db	116	;'t'
   985  00FC22  79                 	db	121	;'y'
   986  00FC23  20                 	db	32
   987  00FC24  43                 	db	67	;'C'
   988  00FC25  79                 	db	121	;'y'
   989  00FC26  63                 	db	99	;'c'
   990  00FC27  6C                 	db	108	;'l'
   991  00FC28  65                 	db	101	;'e'
   992  00FC29  20                 	db	32
   993  00FC2A  69                 	db	105	;'i'
   994  00FC2B  73                 	db	115	;'s'
   995  00FC2C  20                 	db	32
   996  00FC2D  61                 	db	97	;'a'
   997  00FC2E  74                 	db	116	;'t'
   998  00FC2F  20                 	db	32
   999  00FC30  31                 	db	49	;'1'
  1000  00FC31  30                 	db	48	;'0'
  1001  00FC32  30                 	db	48	;'0'
  1002  00FC33  20                 	db	32
  1003  00FC34  0D                 	db	13
  1004  00FC35  0A                 	db	10
  1005  00FC36  00                 	db	0
  1006  00FC37                     STR_9:
  1007  00FC37  45                 	db	69	;'E'
  1008  00FC38  43                 	db	67	;'C'
  1009  00FC39  45                 	db	69	;'E'
  1010  00FC3A  33                 	db	51	;'3'
  1011  00FC3B  33                 	db	51	;'3'
  1012  00FC3C  30                 	db	48	;'0'
  1013  00FC3D  31                 	db	49	;'1'
  1014  00FC3E  4C                 	db	76	;'L'
  1015  00FC3F  20                 	db	32
  1016  00FC40  53                 	db	83	;'S'
  1017  00FC41  70                 	db	112	;'p'
  1018  00FC42  72                 	db	114	;'r'
  1019  00FC43  69                 	db	105	;'i'
  1020  00FC44  6E                 	db	110	;'n'
  1021  00FC45  67                 	db	103	;'g'
  1022  00FC46  20                 	db	32
  1023  00FC47  32                 	db	50	;'2'
  1024  00FC48  31                 	db	49	;'1'
  1025  00FC49  2D                 	db	45
  1026  00FC4A  53                 	db	83	;'S'
  1027  00FC4B  32                 	db	50	;'2'
  1028  00FC4C  00                 	db	0
  1029  00FC4D                     STR_7:
  1030  00FC4D  43                 	db	67	;'C'
  1031  00FC4E  61                 	db	97	;'a'
  1032  00FC4F  6E                 	db	110	;'n'
  1033  00FC50  6E                 	db	110	;'n'
  1034  00FC51  6F                 	db	111	;'o'
  1035  00FC52  74                 	db	116	;'t'
  1036  00FC53  20                 	db	32
  1037  00FC54  66                 	db	102	;'f'
  1038  00FC55  69                 	db	105	;'i'
  1039  00FC56  6E                 	db	110	;'n'
  1040  00FC57  64                 	db	100	;'d'
  1041  00FC58  20                 	db	32
  1042  00FC59  62                 	db	98	;'b'
  1043  00FC5A  75                 	db	117	;'u'
  1044  00FC5B  74                 	db	116	;'t'
  1045  00FC5C  74                 	db	116	;'t'
  1046  00FC5D  6F                 	db	111	;'o'
  1047  00FC5E  6E                 	db	110	;'n'
  1048  00FC5F  20                 	db	32
  1049  00FC60  0D                 	db	13
  1050  00FC61  0A                 	db	10
  1051  00FC62  00                 	db	0
  1052  00FC63                     STR_2:
  1053  00FC63  44                 	db	68	;'D'
  1054  00FC64  75                 	db	117	;'u'
  1055  00FC65  74                 	db	116	;'t'
  1056  00FC66  79                 	db	121	;'y'
  1057  00FC67  20                 	db	32
  1058  00FC68  43                 	db	67	;'C'
  1059  00FC69  79                 	db	121	;'y'
  1060  00FC6A  63                 	db	99	;'c'
  1061  00FC6B  6C                 	db	108	;'l'
  1062  00FC6C  65                 	db	101	;'e'
  1063  00FC6D  20                 	db	32
  1064  00FC6E  69                 	db	105	;'i'
  1065  00FC6F  73                 	db	115	;'s'
  1066  00FC70  20                 	db	32
  1067  00FC71  61                 	db	97	;'a'
  1068  00FC72  74                 	db	116	;'t'
  1069  00FC73  20                 	db	32
  1070  00FC74  30                 	db	48	;'0'
  1071  00FC75  20                 	db	32
  1072  00FC76  0D                 	db	13
  1073  00FC77  0A                 	db	10
  1074  00FC78  00                 	db	0
  1075  00FC79                     STR_4:
  1076  00FC79  20                 	db	32
  1077  00FC7A  54                 	db	84	;'T'
  1078  00FC7B  65                 	db	101	;'e'
  1079  00FC7C  6D                 	db	109	;'m'
  1080  00FC7D  70                 	db	112	;'p'
  1081  00FC7E  20                 	db	32
  1082  00FC7F  3D                 	db	61	;'='
  1083  00FC80  20                 	db	32
  1084  00FC81  25                 	db	37
  1085  00FC82  64                 	db	100	;'d'
  1086  00FC83  20                 	db	32
  1087  00FC84  43                 	db	67	;'C'
  1088  00FC85  20                 	db	32
  1089  00FC86  3D                 	db	61	;'='
  1090  00FC87  20                 	db	32
  1091  00FC88  25                 	db	37
  1092  00FC89  64                 	db	100	;'d'
  1093  00FC8A  20                 	db	32
  1094  00FC8B  46                 	db	70	;'F'
  1095  00FC8C  20                 	db	32
  1096  00FC8D  00                 	db	0
  1097  00FC8E                     STR_20:
  1098  00FC8E  30                 	db	48	;'0'
  1099  00FC8F  31                 	db	49	;'1'
  1100  00FC90  32                 	db	50	;'2'
  1101  00FC91  33                 	db	51	;'3'
  1102  00FC92  34                 	db	52	;'4'
  1103  00FC93  35                 	db	53	;'5'
  1104  00FC94  36                 	db	54	;'6'
  1105  00FC95  37                 	db	55	;'7'
  1106  00FC96  38                 	db	56	;'8'
  1107  00FC97  39                 	db	57	;'9'
  1108  00FC98  41                 	db	65	;'A'
  1109  00FC99  42                 	db	66	;'B'
  1110  00FC9A  43                 	db	67	;'C'
  1111  00FC9B  44                 	db	68	;'D'
  1112  00FC9C  45                 	db	69	;'E'
  1113  00FC9D  46                 	db	70	;'F'
  1114  00FC9E  00                 	db	0
  1115  00FC9F                     STR_21:
  1116  00FC9F  30                 	db	48	;'0'
  1117  00FCA0  31                 	db	49	;'1'
  1118  00FCA1  32                 	db	50	;'2'
  1119  00FCA2  33                 	db	51	;'3'
  1120  00FCA3  34                 	db	52	;'4'
  1121  00FCA4  35                 	db	53	;'5'
  1122  00FCA5  36                 	db	54	;'6'
  1123  00FCA6  37                 	db	55	;'7'
  1124  00FCA7  38                 	db	56	;'8'
  1125  00FCA8  39                 	db	57	;'9'
  1126  00FCA9  61                 	db	97	;'a'
  1127  00FCAA  62                 	db	98	;'b'
  1128  00FCAB  63                 	db	99	;'c'
  1129  00FCAC  64                 	db	100	;'d'
  1130  00FCAD  65                 	db	101	;'e'
  1131  00FCAE  66                 	db	102	;'f'
  1132  00FCAF  00                 	db	0
  1133  00FCB0                     STR_6:
  1134  00FCB0  4E                 	db	78	;'N'
  1135  00FCB1  45                 	db	69	;'E'
  1136  00FCB2  43                 	db	67	;'C'
  1137  00FCB3  5F                 	db	95	;'_'
  1138  00FCB4  43                 	db	67	;'C'
  1139  00FCB5  6F                 	db	111	;'o'
  1140  00FCB6  64                 	db	100	;'d'
  1141  00FCB7  65                 	db	101	;'e'
  1142  00FCB8  20                 	db	32
  1143  00FCB9  3D                 	db	61	;'='
  1144  00FCBA  20                 	db	32
  1145  00FCBB  25                 	db	37
  1146  00FCBC  78                 	db	120	;'x'
  1147  00FCBD  0D                 	db	13
  1148  00FCBE  0A                 	db	10
  1149  00FCBF  00                 	db	0
  1150  00FCC0                     STR_8:
  1151  00FCC0  62                 	db	98	;'b'
  1152  00FCC1  75                 	db	117	;'u'
  1153  00FCC2  74                 	db	116	;'t'
  1154  00FCC3  74                 	db	116	;'t'
  1155  00FCC4  6F                 	db	111	;'o'
  1156  00FCC5  6E                 	db	110	;'n'
  1157  00FCC6  20                 	db	32
  1158  00FCC7  3D                 	db	61	;'='
  1159  00FCC8  20                 	db	32
  1160  00FCC9  25                 	db	37
  1161  00FCCA  64                 	db	100	;'d'
  1162  00FCCB  20                 	db	32
  1163  00FCCC  0D                 	db	13
  1164  00FCCD  0A                 	db	10
  1165  00FCCE  00                 	db	0
  1166  00FCCF                     STR_10:
  1167  00FCCF  54                 	db	84	;'T'
  1168  00FCD0  65                 	db	101	;'e'
  1169  00FCD1  6D                 	db	109	;'m'
  1170  00FCD2  70                 	db	112	;'p'
  1171  00FCD3  65                 	db	101	;'e'
  1172  00FCD4  72                 	db	114	;'r'
  1173  00FCD5  61                 	db	97	;'a'
  1174  00FCD6  74                 	db	116	;'t'
  1175  00FCD7  75                 	db	117	;'u'
  1176  00FCD8  72                 	db	114	;'r'
  1177  00FCD9  65                 	db	101	;'e'
  1178  00FCDA  3A                 	db	58	;':'
  1179  00FCDB  00                 	db	0
  1180  00FCDC                     STR_15:
  1181  00FCDC  20                 	db	32
  1182  00FCDD  20                 	db	32
  1183  00FCDE  46                 	db	70	;'F'
  1184  00FCDF  41                 	db	65	;'A'
  1185  00FCE0  4E                 	db	78	;'N'
  1186  00FCE1  00                 	db	0
  1187  00FCE2                     STR_13:
  1188  00FCE2  54                 	db	84	;'T'
  1189  00FCE3  69                 	db	105	;'i'
  1190  00FCE4  6D                 	db	109	;'m'
  1191  00FCE5  65                 	db	101	;'e'
  1192  00FCE6  00                 	db	0
  1193  00FCE7                     STR_14:
  1194  00FCE7  44                 	db	68	;'D'
  1195  00FCE8  61                 	db	97	;'a'
  1196  00FCE9  74                 	db	116	;'t'
  1197  00FCEA  65                 	db	101	;'e'
  1198  00FCEB  00                 	db	0
  1199  00FCEC                     STR_18:
  1200  00FCEC  4F                 	db	79	;'O'
  1201  00FCED  4E                 	db	78	;'N'
  1202  00FCEE  20                 	db	32
  1203  00FCEF  00                 	db	0
  1204  00FCF0                     STR_19:
  1205  00FCF0  4F                 	db	79	;'O'
  1206  00FCF1  46                 	db	70	;'F'
  1207  00FCF2  46                 	db	70	;'F'
  1208  00FCF3  00                 	db	0
  1209  00FCF4                     STR_17:
  1210  00FCF4  52                 	db	82	;'R'
  1211  00FCF5  50                 	db	80	;'P'
  1212  00FCF6  4D                 	db	77	;'M'
  1213  00FCF7  00                 	db	0
  1214  00FCF8                     STR_11:
  1215  00FCF8  43                 	db	67	;'C'
  1216  00FCF9  2F                 	db	47
  1217  00FCFA  00                 	db	0
  1218  00FCFB                     STR_16:
  1219  00FCFB  44                 	db	68	;'D'
  1220  00FCFC  43                 	db	67	;'C'
  1221  00FCFD  00                 	db	0
  1222  0000                     
  1223                           ; #config settings
  1224  00FCFE  00                 	db	0	; dummy byte at the end
  1225  0000                     
  1226                           	psect	cinit
  1227  00200C                     __pcinit:
  1228                           	opt stack 0
  1229  00200C                     start_initialization:
  1230                           	opt stack 0
  1231  00200C                     __initialization:
  1232                           	opt stack 0
  1233                           
  1234                           ; Clear objects allocated to BANK0 (8 bytes)
  1235  00200C  EE00  F0F7         	lfsr	0,__pbssBANK0
  1236  002010  0E08               	movlw	8
  1237  002012                     clear_0:
  1238  002012  6AEE               	clrf	postinc0,c
  1239  002014  06E8               	decf	wreg,f,c
  1240  002016  E1FD               	bnz	clear_0
  1241                           
  1242                           ; Clear objects allocated to COMRAM (44 bytes)
  1243  002018  EE00  F041         	lfsr	0,__pbssCOMRAM
  1244  00201C  0E2C               	movlw	44
  1245  00201E                     clear_1:
  1246  00201E  6AEE               	clrf	postinc0,c
  1247  002020  06E8               	decf	wreg,f,c
  1248  002022  E1FD               	bnz	clear_1
  1249                           
  1250                           ; Initialize objects allocated to BANK1 (117 bytes)
  1251                           ; load TBLPTR registers with __pidataBANK1
  1252  002024  0E08               	movlw	low __pidataBANK1
  1253  002026  6EF6               	movwf	tblptrl,c
  1254  002028  0E21               	movlw	high __pidataBANK1
  1255  00202A  6EF7               	movwf	tblptrh,c
  1256  00202C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1257  00202E  6EF8               	movwf	tblptru,c
  1258  002030  EE01  F000         	lfsr	0,__pdataBANK1
  1259  002034  EE10 F075          	lfsr	1,117
  1260  002038                     copy_data0:
  1261  002038  0009               	tblrd		*+
  1262  00203A  CFF5 FFEE          	movff	tablat,postinc0
  1263  00203E  50E5               	movf	postdec1,w,c
  1264  002040  50E1               	movf	fsr1l,w,c
  1265  002042  E1FA               	bnz	copy_data0
  1266                           
  1267                           ; Initialize objects allocated to BANK0 (105 bytes)
  1268                           ; load TBLPTR registers with __pidataBANK0
  1269  002044  0EEE               	movlw	low __pidataBANK0
  1270  002046  6EF6               	movwf	tblptrl,c
  1271  002048  0E21               	movlw	high __pidataBANK0
  1272  00204A  6EF7               	movwf	tblptrh,c
  1273  00204C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1274  00204E  6EF8               	movwf	tblptru,c
  1275  002050  EE00  F080         	lfsr	0,__pdataBANK0
  1276  002054  EE10 F069          	lfsr	1,105
  1277  002058                     copy_data1:
  1278  002058  0009               	tblrd		*+
  1279  00205A  CFF5 FFEE          	movff	tablat,postinc0
  1280  00205E  50E5               	movf	postdec1,w,c
  1281  002060  50E1               	movf	fsr1l,w,c
  1282  002062  E1FA               	bnz	copy_data1
  1283                           
  1284                           ; Initialize objects allocated to COMRAM (3 bytes)
  1285                           ; load TBLPTR registers with __pidataCOMRAM
  1286  002064  0E7E               	movlw	low __pidataCOMRAM
  1287  002066  6EF6               	movwf	tblptrl,c
  1288  002068  0E2A               	movlw	high __pidataCOMRAM
  1289  00206A  6EF7               	movwf	tblptrh,c
  1290  00206C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1291  00206E  6EF8               	movwf	tblptru,c
  1292  002070  0009               	tblrd		*+	;fetch initializer
  1293  002072  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1294  002076  0009               	tblrd		*+	;fetch initializer
  1295  002078  CFF5 F06E          	movff	tablat,__pdataCOMRAM+1
  1296  00207C  0009               	tblrd		*+	;fetch initializer
  1297  00207E  CFF5 F06F          	movff	tablat,__pdataCOMRAM+2
  1298  002082                     end_of_initialization:
  1299                           	opt stack 0
  1300  002082                     __end_of__initialization:
  1301                           	opt stack 0
  1302  002082  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1303  002084  6EF8               	movwf	tblptru,c
  1304  002086  0100               	movlb	0
  1305  002088  EFDA  F007         	goto	_main	;jump to C main() function
  1306                           tblptru	equ	0xFF8
  1307                           tblptrh	equ	0xFF7
  1308                           tblptrl	equ	0xFF6
  1309                           tablat	equ	0xFF5
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           postdec1	equ	0xFE5
  1313                           fsr1l	equ	0xFE1
  1314                           
  1315                           	psect	bssCOMRAM
  1316  000041                     __pbssCOMRAM:
  1317                           	opt stack 0
  1318  000041                     _DS1621_tempC:
  1319                           	opt stack 0
  1320  000041                     	ds	2
  1321  000043                     _DS1621_tempF:
  1322                           	opt stack 0
  1323  000043                     	ds	2
  1324  000045                     _Time_Elapsed:
  1325                           	opt stack 0
  1326  000045                     	ds	2
  1327  000047                     _nec_ok:
  1328                           	opt stack 0
  1329  000047                     	ds	2
  1330  000049                     _rpm:
  1331                           	opt stack 0
  1332  000049                     	ds	2
  1333  00004B                     _rps:
  1334                           	opt stack 0
  1335  00004B                     	ds	2
  1336  00004D                     _txt:
  1337                           	opt stack 0
  1338  00004D                     	ds	2
  1339  00004F                     _FAN:
  1340                           	opt stack 0
  1341  00004F                     	ds	1
  1342  000050                     _Nec_code1:
  1343                           	opt stack 0
  1344  000050                     	ds	1
  1345  000051                     _Nec_state:
  1346                           	opt stack 0
  1347  000051                     	ds	1
  1348  000052                     __tft_type:
  1349                           	opt stack 0
  1350  000052                     	ds	1
  1351  000053                     _alarm_date:
  1352                           	opt stack 0
  1353  000053                     	ds	1
  1354  000054                     _alarm_hour:
  1355                           	opt stack 0
  1356  000054                     	ds	1
  1357  000055                     _alarm_minute:
  1358                           	opt stack 0
  1359  000055                     	ds	1
  1360  000056                     _alarm_second:
  1361                           	opt stack 0
  1362  000056                     	ds	1
  1363  000057                     _bit_count:
  1364                           	opt stack 0
  1365  000057                     	ds	1
  1366  000058                     _colstart:
  1367                           	opt stack 0
  1368  000058                     	ds	1
  1369  000059                     _day:
  1370                           	opt stack 0
  1371  000059                     	ds	1
  1372  00005A                     _dow:
  1373                           	opt stack 0
  1374  00005A                     	ds	1
  1375  00005B                     _duty_cycle:
  1376                           	opt stack 0
  1377  00005B                     	ds	1
  1378  00005C                     _found:
  1379                           	opt stack 0
  1380  00005C                     	ds	1
  1381  00005D                     _hour:
  1382                           	opt stack 0
  1383  00005D                     	ds	1
  1384  00005E                     _i:
  1385                           	opt stack 0
  1386  00005E                     	ds	1
  1387  00005F                     _minute:
  1388                           	opt stack 0
  1389  00005F                     	ds	1
  1390  000060                     _month:
  1391                           	opt stack 0
  1392  000060                     	ds	1
  1393  000061                     _rowstart:
  1394                           	opt stack 0
  1395  000061                     	ds	1
  1396  000062                     _second:
  1397                           	opt stack 0
  1398  000062                     	ds	1
  1399  000063                     _setup_alarm_hour:
  1400                           	opt stack 0
  1401  000063                     	ds	1
  1402  000064                     _setup_alarm_minute:
  1403                           	opt stack 0
  1404  000064                     	ds	1
  1405  000065                     _setup_alarm_second:
  1406                           	opt stack 0
  1407  000065                     	ds	1
  1408  000066                     _setup_day:
  1409                           	opt stack 0
  1410  000066                     	ds	1
  1411  000067                     _setup_hour:
  1412                           	opt stack 0
  1413  000067                     	ds	1
  1414  000068                     _setup_minute:
  1415                           	opt stack 0
  1416  000068                     	ds	1
  1417  000069                     _setup_month:
  1418                           	opt stack 0
  1419  000069                     	ds	1
  1420  00006A                     _setup_second:
  1421                           	opt stack 0
  1422  00006A                     	ds	1
  1423  00006B                     _setup_year:
  1424                           	opt stack 0
  1425  00006B                     	ds	1
  1426  00006C                     _year:
  1427                           	opt stack 0
  1428  00006C                     	ds	1
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec1	equ	0xFE5
  1436                           fsr1l	equ	0xFE1
  1437                           
  1438                           	psect	dataCOMRAM
  1439  00006D                     __pdataCOMRAM:
  1440                           	opt stack 0
  1441  00006D                     _setup_fan_temp:
  1442                           	opt stack 0
  1443  00006D                     	ds	1
  1444  00006E                     _tempSecond:
  1445                           	opt stack 0
  1446  00006E                     	ds	1
  1447  00006F                     _wrap:
  1448                           	opt stack 0
  1449  00006F                     	ds	1
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           postdec1	equ	0xFE5
  1457                           fsr1l	equ	0xFE1
  1458                           
  1459                           	psect	bssBANK0
  1460  0000F7                     __pbssBANK0:
  1461                           	opt stack 0
  1462  0000F7                     _Nec_code:
  1463                           	opt stack 0
  1464  0000F7                     	ds	4
  1465  0000FB                     _ALARMEN:
  1466                           	opt stack 0
  1467  0000FB                     	ds	2
  1468  0000FD                     _nbr:
  1469                           	opt stack 0
  1470  0000FD                     	ds	2
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           postinc0	equ	0xFEE
  1476                           wreg	equ	0xFE8
  1477                           postdec1	equ	0xFE5
  1478                           fsr1l	equ	0xFE1
  1479                           
  1480                           	psect	dataBANK0
  1481  000080                     __pdataBANK0:
  1482                           	opt stack 0
  1483  000080                     _D1:
  1484                           	opt stack 0
  1485  000080                     	ds	11
  1486  00008B                     _alarm_time:
  1487                           	opt stack 0
  1488  00008B                     	ds	9
  1489  000094                     _setup_alarm_time:
  1490                           	opt stack 0
  1491  000094                     	ds	9
  1492  00009D                     _setup_date:
  1493                           	opt stack 0
  1494  00009D                     	ds	9
  1495  0000A6                     _setup_time:
  1496                           	opt stack 0
  1497  0000A6                     	ds	9
  1498  0000AF                     _D2:
  1499                           	opt stack 0
  1500  0000AF                     	ds	8
  1501  0000B7                     _setup_fan_text:
  1502                           	opt stack 0
  1503  0000B7                     	ds	5
  1504  0000BC                     _Alarm_SW_Txt:
  1505                           	opt stack 0
  1506  0000BC                     	ds	4
  1507  0000C0                     _RTC_ALARM_Txt:
  1508                           	opt stack 0
  1509  0000C0                     	ds	2
  1510  0000C2                     _date:
  1511                           	opt stack 0
  1512  0000C2                     	ds	9
  1513  0000CB                     _time:
  1514                           	opt stack 0
  1515  0000CB                     	ds	9
  1516  0000D4                     _RPM_Txt:
  1517                           	opt stack 0
  1518  0000D4                     	ds	5
  1519  0000D9                     _DC_Txt:
  1520                           	opt stack 0
  1521  0000D9                     	ds	4
  1522  0000DD                     _Fan_SW_Txt:
  1523                           	opt stack 0
  1524  0000DD                     	ds	4
  1525  0000E1                     _tempC:
  1526                           	opt stack 0
  1527  0000E1                     	ds	4
  1528  0000E5                     _tempF:
  1529                           	opt stack 0
  1530  0000E5                     	ds	4
  1531                           tblptru	equ	0xFF8
  1532                           tblptrh	equ	0xFF7
  1533                           tblptrl	equ	0xFF6
  1534                           tablat	equ	0xFF5
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postdec1	equ	0xFE5
  1538                           fsr1l	equ	0xFE1
  1539                           
  1540                           	psect	dataBANK1
  1541  000100                     __pdataBANK1:
  1542                           	opt stack 0
  1543  000100                     _color:
  1544                           	opt stack 0
  1545  000100                     	ds	42
  1546  00012A                     _D3:
  1547                           	opt stack 0
  1548  00012A                     	ds	21
  1549  00013F                     _array1:
  1550                           	opt stack 0
  1551  00013F                     	ds	21
  1552  000154                     _buffer:
  1553                           	opt stack 0
  1554  000154                     	ds	33
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           postdec1	equ	0xFE5
  1562                           fsr1l	equ	0xFE1
  1563                           
  1564                           	psect	cstackBANK1
  1565  000175                     __pcstackBANK1:
  1566                           	opt stack 0
  1567  000175                     printf@idx:
  1568                           	opt stack 0
  1569                           
  1570                           ; 1 bytes @ 0x0
  1571  000175                     	ds	1
  1572  000176                     printf@cp:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x1
  1576  000176                     	ds	2
  1577  000178                     _printf$1738:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x3
  1581  000178                     	ds	2
  1582  00017A                     _printf$1739:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x5
  1586  00017A                     	ds	2
  1587  00017C                     _printf$1745:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x7
  1591  00017C                     	ds	2
  1592  00017E                     printf@len:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x9
  1596  00017E                     	ds	2
  1597  000180                     printf@ap:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0xB
  1601  000180                     	ds	2
  1602  000182                     printf@val:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0xD
  1606  000182                     	ds	2
  1607  000184                     printf@prec:
  1608                           	opt stack 0
  1609                           
  1610                           ; 1 bytes @ 0xF
  1611  000184                     	ds	1
  1612  000185                     printf@width:
  1613                           	opt stack 0
  1614                           
  1615                           ; 2 bytes @ 0x10
  1616  000185                     	ds	2
  1617  000187                     printf@c:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x12
  1621  000187                     	ds	1
  1622  000188                     printf@flag:
  1623                           	opt stack 0
  1624                           
  1625                           ; 2 bytes @ 0x13
  1626  000188                     	ds	2
  1627  00018A                     main@j:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x15
  1631  00018A                     	ds	2
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           tblptrl	equ	0xFF6
  1635                           tablat	equ	0xFF5
  1636                           postinc0	equ	0xFEE
  1637                           wreg	equ	0xFE8
  1638                           postdec1	equ	0xFE5
  1639                           fsr1l	equ	0xFE1
  1640                           
  1641                           	psect	cstackBANK0
  1642  0000E9                     __pcstackBANK0:
  1643                           	opt stack 0
  1644  0000E9                     ??_drawtext:
  1645  0000E9                     do_update_pwm@dc_f:
  1646                           	opt stack 0
  1647                           
  1648                           ; 3 bytes @ 0x0
  1649  0000E9                     	ds	2
  1650  0000EB                     drawtext@x:
  1651                           	opt stack 0
  1652                           
  1653                           ; 1 bytes @ 0x2
  1654  0000EB                     	ds	1
  1655  0000EC                     do_update_pwm@duty_cycle:
  1656                           	opt stack 0
  1657  0000EC                     drawtext@textsize:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x3
  1661  0000EC                     	ds	1
  1662  0000ED                     do_update_pwm@dc_I:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x4
  1666  0000ED                     	ds	1
  1667  0000EE                     drawtext@i:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x5
  1671  0000EE                     	ds	2
  1672  0000F0                     drawtext@cursor_y:
  1673                           	opt stack 0
  1674                           
  1675                           ; 1 bytes @ 0x7
  1676  0000F0                     	ds	1
  1677  0000F1                     drawtext@cursor_x:
  1678                           	opt stack 0
  1679                           
  1680                           ; 1 bytes @ 0x8
  1681  0000F1                     	ds	1
  1682  0000F2                     ??_Update_Screen:
  1683                           
  1684                           ; 0 bytes @ 0x9
  1685  0000F2                     	ds	2
  1686  0000F4                     Update_Screen@neg_tempF:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0xB
  1690  0000F4                     	ds	2
  1691  0000F6                     
  1692                           ; 0 bytes @ 0xD
  1693  0000F6                     	ds	1
  1694                           tblptru	equ	0xFF8
  1695                           tblptrh	equ	0xFF7
  1696                           tblptrl	equ	0xFF6
  1697                           tablat	equ	0xFF5
  1698                           postinc0	equ	0xFEE
  1699                           wreg	equ	0xFE8
  1700                           postdec1	equ	0xFE5
  1701                           fsr1l	equ	0xFE1
  1702                           
  1703                           	psect	cstackCOMRAM
  1704  000001                     __pcstackCOMRAM:
  1705                           	opt stack 0
  1706  000001                     ??_INT0_isr:
  1707  000001                     
  1708                           ; 2 bytes @ 0x0
  1709  000001                     	ds	2
  1710  000003                     ??_chkisr:
  1711                           
  1712                           ; 0 bytes @ 0x2
  1713  000003                     	ds	14
  1714  000011                     ??_isdigit:
  1715  000011                     ?_strlen:
  1716                           	opt stack 0
  1717  000011                     ?___wmul:
  1718                           	opt stack 0
  1719  000011                     ?___lwdiv:
  1720                           	opt stack 0
  1721  000011                     ?___ftpack:
  1722                           	opt stack 0
  1723  000011                     ?___fttol:
  1724                           	opt stack 0
  1725  000011                     putch@c:
  1726                           	opt stack 0
  1727  000011                     spiwrite@x:
  1728                           	opt stack 0
  1729  000011                     I2C_Read@ack:
  1730                           	opt stack 0
  1731  000011                     I2C_Write@outByte:
  1732                           	opt stack 0
  1733  000011                     OpenUSART@spbrg:
  1734                           	opt stack 0
  1735  000011                     ___wmul@multiplier:
  1736                           	opt stack 0
  1737  000011                     ___lwdiv@dividend:
  1738                           	opt stack 0
  1739  000011                     strcpy@to:
  1740                           	opt stack 0
  1741  000011                     strlen@s:
  1742                           	opt stack 0
  1743  000011                     ___ftpack@arg:
  1744                           	opt stack 0
  1745  000011                     ___fttol@f1:
  1746                           	opt stack 0
  1747  000011                     I2C_Init@c:
  1748                           	opt stack 0
  1749                           
  1750                           ; 4 bytes @ 0x10
  1751  000011                     	ds	1
  1752  000012                     spiwrite@spidata:
  1753                           	opt stack 0
  1754  000012                     I2C_Read@n:
  1755                           	opt stack 0
  1756  000012                     I2C_Write@n:
  1757                           	opt stack 0
  1758  000012                     _isdigit$2268:
  1759                           	opt stack 0
  1760                           
  1761                           ; 1 bytes @ 0x11
  1762  000012                     	ds	1
  1763  000013                     ??_strlen:
  1764  000013                     write_command@cmd_:
  1765                           	opt stack 0
  1766  000013                     write_data@data_:
  1767                           	opt stack 0
  1768  000013                     I2C_Read@inByte:
  1769                           	opt stack 0
  1770  000013                     I2C_Write_Cmd_Only@Cmd:
  1771                           	opt stack 0
  1772  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1773                           	opt stack 0
  1774  000013                     DS3231_Setup_Time@Device:
  1775                           	opt stack 0
  1776  000013                     OpenUSART@config:
  1777                           	opt stack 0
  1778  000013                     isdigit@c:
  1779                           	opt stack 0
  1780  000013                     ___wmul@multiplicand:
  1781                           	opt stack 0
  1782  000013                     ___lwdiv@divisor:
  1783                           	opt stack 0
  1784  000013                     strcpy@from:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x12
  1788  000013                     	ds	1
  1789  000014                     ?_DS1621_Read_Temp:
  1790                           	opt stack 0
  1791  000014                     setAddrWindow@y0:
  1792                           	opt stack 0
  1793  000014                     I2C_Write_Cmd_Only@Device:
  1794                           	opt stack 0
  1795  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1796                           	opt stack 0
  1797  000014                     DS3231_Read_Time@Address:
  1798                           	opt stack 0
  1799  000014                     DS3231_Setup_Time@Address:
  1800                           	opt stack 0
  1801  000014                     ___ftpack@exp:
  1802                           	opt stack 0
  1803                           
  1804                           ; 1 bytes @ 0x13
  1805  000014                     	ds	1
  1806  000015                     ??___fttol:
  1807  000015                     setAddrWindow@x1:
  1808                           	opt stack 0
  1809  000015                     I2C_Write_Cmd_Write_Data@Device:
  1810                           	opt stack 0
  1811  000015                     DS3231_Read_Time@Device:
  1812                           	opt stack 0
  1813  000015                     ___ftpack@sign:
  1814                           	opt stack 0
  1815  000015                     ___lwdiv@counter:
  1816                           	opt stack 0
  1817  000015                     ___wmul@product:
  1818                           	opt stack 0
  1819  000015                     strcpy@cp:
  1820                           	opt stack 0
  1821  000015                     strlen@cp:
  1822                           	opt stack 0
  1823                           
  1824                           ; 2 bytes @ 0x14
  1825  000015                     	ds	1
  1826  000016                     ??___ftpack:
  1827  000016                     setAddrWindow@y1:
  1828                           	opt stack 0
  1829  000016                     DS1621_Init@Device:
  1830                           	opt stack 0
  1831  000016                     DS1621_Read_Temp@Cmd:
  1832                           	opt stack 0
  1833  000016                     ___lwdiv@quotient:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x15
  1837  000016                     	ds	1
  1838  000017                     ?___awdiv:
  1839                           	opt stack 0
  1840  000017                     setAddrWindow@x0:
  1841                           	opt stack 0
  1842  000017                     DS1621_Read_Temp@Data_Ret:
  1843                           	opt stack 0
  1844  000017                     delay_ms@ms:
  1845                           	opt stack 0
  1846  000017                     ___awdiv@dividend:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x16
  1850  000017                     	ds	1
  1851  000018                     ?___lwmod:
  1852                           	opt stack 0
  1853  000018                     drawPixel@y:
  1854                           	opt stack 0
  1855  000018                     drawFastVLine@y:
  1856                           	opt stack 0
  1857  000018                     fillRectangle@y:
  1858                           	opt stack 0
  1859  000018                     DS1621_Read_Temp@Device:
  1860                           	opt stack 0
  1861  000018                     ___lwmod@dividend:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x17
  1865  000018                     	ds	1
  1866  000019                     ??_delay_ms:
  1867  000019                     ?___lbtoft:
  1868                           	opt stack 0
  1869  000019                     drawFastVLine@h:
  1870                           	opt stack 0
  1871  000019                     fillRectangle@w:
  1872                           	opt stack 0
  1873  000019                     drawPixel@color:
  1874                           	opt stack 0
  1875  000019                     ___awdiv@divisor:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x18
  1879  000019                     	ds	1
  1880  00001A                     fillRectangle@h:
  1881                           	opt stack 0
  1882  00001A                     ___fttol@sign1:
  1883                           	opt stack 0
  1884  00001A                     drawFastVLine@color:
  1885                           	opt stack 0
  1886  00001A                     ___lwmod@divisor:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x19
  1890  00001A                     	ds	1
  1891  00001B                     drawPixel@x:
  1892                           	opt stack 0
  1893  00001B                     ___awdiv@counter:
  1894                           	opt stack 0
  1895  00001B                     delay_ms@count:
  1896                           	opt stack 0
  1897  00001B                     fillRectangle@color:
  1898                           	opt stack 0
  1899  00001B                     ___fttol@lval:
  1900                           	opt stack 0
  1901                           
  1902                           ; 4 bytes @ 0x1A
  1903  00001B                     	ds	1
  1904  00001C                     ??_drawFastVLine:
  1905  00001C                     ___awdiv@sign:
  1906                           	opt stack 0
  1907  00001C                     ___lbtoft@c:
  1908                           	opt stack 0
  1909  00001C                     ___lwmod@counter:
  1910                           	opt stack 0
  1911  00001C                     drawCircle@x0:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x1B
  1915  00001C                     	ds	1
  1916  00001D                     ??_fillRectangle:
  1917  00001D                     ?_printf:
  1918                           	opt stack 0
  1919  00001D                     ?___ftmul:
  1920                           	opt stack 0
  1921  00001D                     printf@f:
  1922                           	opt stack 0
  1923  00001D                     ___awdiv@quotient:
  1924                           	opt stack 0
  1925  00001D                     ___ftmul@f1:
  1926                           	opt stack 0
  1927                           
  1928                           ; 3 bytes @ 0x1C
  1929  00001D                     	ds	1
  1930  00001E                     drawCircle@y0:
  1931                           	opt stack 0
  1932                           
  1933                           ; 2 bytes @ 0x1D
  1934  00001E                     	ds	1
  1935  00001F                     ?_get_RPM:
  1936                           	opt stack 0
  1937  00001F                     ?___awmod:
  1938                           	opt stack 0
  1939  00001F                     ___fttol@exp1:
  1940                           	opt stack 0
  1941  00001F                     Set_DC_RGB@duty_cycle:
  1942                           	opt stack 0
  1943  00001F                     Set_RPM_RGB@rpm:
  1944                           	opt stack 0
  1945  00001F                     ___awmod@dividend:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x1E
  1949  00001F                     	ds	1
  1950  000020                     drawFastVLine@hi:
  1951                           	opt stack 0
  1952  000020                     drawCircle@r:
  1953                           	opt stack 0
  1954  000020                     ___ftmul@f2:
  1955                           	opt stack 0
  1956                           
  1957                           ; 3 bytes @ 0x1F
  1958  000020                     	ds	1
  1959  000021                     Set_DC_RGB@d1color_C:
  1960                           	opt stack 0
  1961  000021                     drawFastVLine@lo:
  1962                           	opt stack 0
  1963  000021                     fillRectangle@hi:
  1964                           	opt stack 0
  1965  000021                     get_RPM@RPS:
  1966                           	opt stack 0
  1967  000021                     Set_RPM_RGB@RPM:
  1968                           	opt stack 0
  1969  000021                     ___awmod@divisor:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x20
  1973  000021                     	ds	1
  1974  000022                     drawFastVLine@x:
  1975                           	opt stack 0
  1976  000022                     fillRectangle@lo:
  1977                           	opt stack 0
  1978  000022                     Set_DC_RGB@d1color_I:
  1979                           	opt stack 0
  1980  000022                     drawCircle@color:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0x21
  1984  000022                     	ds	1
  1985  000023                     ??___ftmul:
  1986  000023                     fillRect@y:
  1987                           	opt stack 0
  1988  000023                     fillRectangle@x:
  1989                           	opt stack 0
  1990  000023                     ___awmod@counter:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0x22
  1994  000023                     	ds	1
  1995  000024                     ??_drawCircle:
  1996  000024                     fillRect@w:
  1997                           	opt stack 0
  1998  000024                     ___awmod@sign:
  1999                           	opt stack 0
  2000  000024                     fillScreen@color:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x23
  2004  000024                     	ds	1
  2005  000025                     fillRect@h:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x24
  2009  000025                     	ds	1
  2010  000026                     ___ftmul@exp:
  2011                           	opt stack 0
  2012  000026                     fillRect@color:
  2013                           	opt stack 0
  2014  000026                     drawCircle@ddF_x:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x25
  2018  000026                     	ds	1
  2019  000027                     ___ftmul@f3_as_product:
  2020                           	opt stack 0
  2021                           
  2022                           ; 3 bytes @ 0x26
  2023  000027                     	ds	1
  2024  000028                     ??_fillRect:
  2025  000028                     drawCircle@ddF_y:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0x27
  2029  000028                     	ds	2
  2030  00002A                     ___ftmul@cntr:
  2031                           	opt stack 0
  2032  00002A                     drawCircle@f:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x29
  2036  00002A                     	ds	1
  2037  00002B                     ??_printf:
  2038  00002B                     fillRect@x:
  2039                           	opt stack 0
  2040  00002B                     ___ftmul@sign:
  2041                           	opt stack 0
  2042                           
  2043                           ; 1 bytes @ 0x2A
  2044  00002B                     	ds	1
  2045  00002C                     ?___ftdiv:
  2046                           	opt stack 0
  2047  00002C                     fillRect@i:
  2048                           	opt stack 0
  2049  00002C                     drawCircle@x:
  2050                           	opt stack 0
  2051  00002C                     ___ftdiv@f1:
  2052                           	opt stack 0
  2053                           
  2054                           ; 3 bytes @ 0x2B
  2055  00002C                     	ds	2
  2056  00002E                     drawChar@y:
  2057                           	opt stack 0
  2058  00002E                     drawCircle@y:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x2D
  2062  00002E                     	ds	1
  2063  00002F                     drawChar@c:
  2064                           	opt stack 0
  2065  00002F                     ___ftdiv@f2:
  2066                           	opt stack 0
  2067                           
  2068                           ; 3 bytes @ 0x2E
  2069  00002F                     	ds	1
  2070  000030                     drawChar@color:
  2071                           	opt stack 0
  2072                           
  2073                           ; 2 bytes @ 0x2F
  2074  000030                     	ds	2
  2075  000032                     ??___ftdiv:
  2076  000032                     drawChar@bg:
  2077                           	opt stack 0
  2078                           
  2079                           ; 2 bytes @ 0x31
  2080  000032                     	ds	2
  2081  000034                     drawChar@size:
  2082                           	opt stack 0
  2083                           
  2084                           ; 1 bytes @ 0x33
  2085  000034                     	ds	1
  2086  000035                     drawChar@line:
  2087                           	opt stack 0
  2088  000035                     ___ftdiv@cntr:
  2089                           	opt stack 0
  2090                           
  2091                           ; 1 bytes @ 0x34
  2092  000035                     	ds	1
  2093  000036                     drawChar@x:
  2094                           	opt stack 0
  2095  000036                     ___ftdiv@f3:
  2096                           	opt stack 0
  2097                           
  2098                           ; 3 bytes @ 0x35
  2099  000036                     	ds	1
  2100  000037                     drawChar@j:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x36
  2104  000037                     	ds	1
  2105  000038                     drawChar@i:
  2106                           	opt stack 0
  2107                           
  2108                           ; 1 bytes @ 0x37
  2109  000038                     	ds	1
  2110  000039                     drawtext@y:
  2111                           	opt stack 0
  2112  000039                     ___ftdiv@exp:
  2113                           	opt stack 0
  2114                           
  2115                           ; 1 bytes @ 0x38
  2116  000039                     	ds	1
  2117  00003A                     ___ftdiv@sign:
  2118                           	opt stack 0
  2119  00003A                     drawtext@_text:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x39
  2123  00003A                     	ds	1
  2124  00003B                     ??_do_update_pwm:
  2125                           
  2126                           ; 0 bytes @ 0x3A
  2127  00003B                     	ds	1
  2128  00003C                     drawtext@color:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x3B
  2132  00003C                     	ds	2
  2133  00003E                     drawtext@bg:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x3D
  2137  00003E                     	ds	2
  2138  000040                     drawtext@size:
  2139                           	opt stack 0
  2140                           
  2141                           ; 1 bytes @ 0x3F
  2142  000040                     	ds	1
  2143  000041                     tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           postinc0	equ	0xFEE
  2148                           wreg	equ	0xFE8
  2149                           postdec1	equ	0xFE5
  2150                           fsr1l	equ	0xFE1
  2151                           
  2152                           ; 0 bytes @ 0x40
  2153 ;;
  2154 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2155 ;;
  2156 ;; *************** function _main *****************
  2157 ;; Defined at:
  2158 ;;		line 119 in file "lap12p1.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  j               2   21[BANK1 ] int 
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2173 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2175 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;Total ram usage:        3 bytes
  2177 ;; Hardware stack levels required when called:   11
  2178 ;; This function calls:
  2179 ;;		_Activate_Buzzer
  2180 ;;		_DS1621_Read_Temp
  2181 ;;		_DS3231_Read_Time
  2182 ;;		_DS3231_Setup_Time
  2183 ;;		_Deactivate_Buzzer
  2184 ;;		_Decrease_Speed
  2185 ;;		_Do_Beep
  2186 ;;		_Do_Init
  2187 ;;		_Increase_Speed
  2188 ;;		_Initialize_Screen
  2189 ;;		_Set_DC_RGB
  2190 ;;		_Set_RPM_RGB
  2191 ;;		_Toggle_Fan
  2192 ;;		_Update_Screen
  2193 ;;		_Wait_Half_Second
  2194 ;;		___awdiv
  2195 ;;		___wmul
  2196 ;;		_do_update_pwm
  2197 ;;		_get_RPM
  2198 ;;		_printf
  2199 ;; This function is called by:
  2200 ;;		Startup code after reset
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           	psect	text0
  2205  000FB4                     __ptext0:
  2206                           	opt stack 0
  2207  000FB4                     _main:
  2208                           	opt stack 20
  2209                           
  2210                           ;lap12p1.c: 121: Do_Init();
  2211                           
  2212                           ;incstack = 0
  2213  000FB4  EC0F  F012         	call	_Do_Init	;wreg free
  2214                           
  2215                           ;lap12p1.c: 122: T3CONbits.TMR3ON=1;
  2216  000FB8  80B1               	bsf	4017,0,c	;volatile
  2217                           
  2218                           ;lap12p1.c: 123: Initialize_Screen();
  2219  000FBA  ECA5  F006         	call	_Initialize_Screen	;wreg free
  2220                           
  2221                           ;lap12p1.c: 124: duty_cycle=50;
  2222  000FBE  0E32               	movlw	50
  2223  000FC0  6E5B               	movwf	_duty_cycle,c
  2224                           
  2225                           ;lap12p1.c: 125: do_update_pwm(duty_cycle);
  2226  000FC2  505B               	movf	_duty_cycle,w,c
  2227  000FC4  ECD5  F00E         	call	_do_update_pwm
  2228  000FC8  D000               	goto	l7349
  2229  000FCA                     l7349:
  2230                           
  2231                           ;lap12p1.c: 128: {
  2232                           ;lap12p1.c: 130: DS3231_Read_Time();
  2233  000FCA  EC5F  F011         	call	_DS3231_Read_Time	;wreg free
  2234                           
  2235                           ;lap12p1.c: 131: if(tempSecond != second)
  2236  000FCE  5062               	movf	_second,w,c
  2237  000FD0  186E               	xorwf	_tempSecond,w,c
  2238  000FD2  B4D8               	btfsc	status,2,c
  2239  000FD4  D069               	goto	l7373
  2240                           
  2241                           ;lap12p1.c: 132: {
  2242                           ;lap12p1.c: 133: tempSecond = second;
  2243  000FD6  C062  F06E         	movff	_second,_tempSecond
  2244                           
  2245                           ;lap12p1.c: 134: DS1621_tempC = DS1621_Read_Temp();
  2246  000FDA  ECE8  F012         	call	_DS1621_Read_Temp	;wreg free
  2247  000FDE  C014  F041         	movff	?_DS1621_Read_Temp,_DS1621_tempC
  2248  000FE2  C015  F042         	movff	?_DS1621_Read_Temp+1,_DS1621_tempC+1
  2249                           
  2250                           ;lap12p1.c: 135: DS1621_tempF = (DS1621_tempC * 9 / 5) + 32;
  2251  000FE6  C041  F011         	movff	_DS1621_tempC,___wmul@multiplier
  2252  000FEA  C042  F012         	movff	_DS1621_tempC+1,___wmul@multiplier+1
  2253  000FEE  0E00               	movlw	0
  2254  000FF0  6E14               	movwf	___wmul@multiplicand+1,c
  2255  000FF2  0E09               	movlw	9
  2256  000FF4  6E13               	movwf	___wmul@multiplicand,c
  2257  000FF6  EC12  F014         	call	___wmul	;wreg free
  2258  000FFA  C011  F017         	movff	?___wmul,___awdiv@dividend
  2259  000FFE  C012  F018         	movff	?___wmul+1,___awdiv@dividend+1
  2260  001002  0E00               	movlw	0
  2261  001004  6E1A               	movwf	___awdiv@divisor+1,c
  2262  001006  0E05               	movlw	5
  2263  001008  6E19               	movwf	___awdiv@divisor,c
  2264  00100A  EC36  F00F         	call	___awdiv	;wreg free
  2265  00100E  0E20               	movlw	32
  2266  001010  2417               	addwf	?___awdiv,w,c
  2267  001012  6E43               	movwf	_DS1621_tempF,c
  2268  001014  0E00               	movlw	0
  2269  001016  2018               	addwfc	?___awdiv+1,w,c
  2270  001018  6E44               	movwf	_DS1621_tempF+1,c
  2271                           
  2272                           ;lap12p1.c: 136: rpm = get_RPM();
  2273  00101A  EC08  F013         	call	_get_RPM	;wreg free
  2274  00101E  C01F  F049         	movff	?_get_RPM,_rpm
  2275  001022  C020  F04A         	movff	?_get_RPM+1,_rpm+1
  2276                           
  2277                           ;lap12p1.c: 137: printf ("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,
  2278                           ;lap12p1.c: 138: day,year);
  2279  001026  0EE6               	movlw	low STR_3
  2280  001028  6E1D               	movwf	printf@f,c
  2281  00102A  0EFB               	movlw	high STR_3
  2282  00102C  6E1E               	movwf	printf@f+1,c
  2283  00102E  C05D  F01F         	movff	_hour,?_printf+2
  2284  001032  6A20               	clrf	?_printf+3,c
  2285  001034  C05F  F021         	movff	_minute,?_printf+4
  2286  001038  6A22               	clrf	?_printf+5,c
  2287  00103A  C062  F023         	movff	_second,?_printf+6
  2288  00103E  6A24               	clrf	?_printf+7,c
  2289  001040  C060  F025         	movff	_month,?_printf+8
  2290  001044  6A26               	clrf	?_printf+9,c
  2291  001046  C059  F027         	movff	_day,?_printf+10
  2292  00104A  6A28               	clrf	?_printf+11,c
  2293  00104C  C06C  F029         	movff	_year,?_printf+12
  2294  001050  6A2A               	clrf	?_printf+13,c
  2295  001052  EC0E  F000         	call	_printf	;wreg free
  2296                           
  2297                           ;lap12p1.c: 139: printf (" Temp = %d C = %d F ", DS1621_tempC, DS1621_tempF);
  2298  001056  0E79               	movlw	low STR_4
  2299  001058  6E1D               	movwf	printf@f,c
  2300  00105A  0EFC               	movlw	high STR_4
  2301  00105C  6E1E               	movwf	printf@f+1,c
  2302  00105E  C041  F01F         	movff	_DS1621_tempC,?_printf+2
  2303  001062  C042  F020         	movff	_DS1621_tempC+1,?_printf+3
  2304  001066  C043  F021         	movff	_DS1621_tempF,?_printf+4
  2305  00106A  C044  F022         	movff	_DS1621_tempF+1,?_printf+5
  2306  00106E  EC0E  F000         	call	_printf	;wreg free
  2307                           
  2308                           ;lap12p1.c: 140: printf ("RPM = %d duty_cycle = %d\r\n", rpm, duty_cycle);
  2309  001072  0E04               	movlw	low STR_5
  2310  001074  6E1D               	movwf	printf@f,c
  2311  001076  0EFC               	movlw	high STR_5
  2312  001078  6E1E               	movwf	printf@f+1,c
  2313  00107A  C049  F01F         	movff	_rpm,?_printf+2
  2314  00107E  C04A  F020         	movff	_rpm+1,?_printf+3
  2315  001082  C05B  F021         	movff	_duty_cycle,?_printf+4
  2316  001086  6A22               	clrf	?_printf+5,c
  2317  001088  EC0E  F000         	call	_printf	;wreg free
  2318                           
  2319                           ;lap12p1.c: 141: Set_DC_RGB(duty_cycle);
  2320  00108C  C05B  F01F         	movff	_duty_cycle,Set_DC_RGB@duty_cycle
  2321  001090  6A20               	clrf	Set_DC_RGB@duty_cycle+1,c
  2322  001092  ECA4  F012         	call	_Set_DC_RGB	;wreg free
  2323                           
  2324                           ;lap12p1.c: 142: Set_RPM_RGB(rpm);
  2325  001096  C049  F01F         	movff	_rpm,Set_RPM_RGB@rpm
  2326  00109A  C04A  F020         	movff	_rpm+1,Set_RPM_RGB@rpm+1
  2327  00109E  ECC7  F012         	call	_Set_RPM_RGB	;wreg free
  2328                           
  2329                           ;lap12p1.c: 143: Update_Screen();
  2330  0010A2  ECBB  F004         	call	_Update_Screen	;wreg free
  2331  0010A6  D000               	goto	l7373
  2332  0010A8                     l7373:
  2333                           
  2334                           ;lap12p1.c: 144: }
  2335                           ;lap12p1.c: 146: if (nec_ok == 1)
  2336  0010A8  0447               	decf	_nec_ok,w,c
  2337  0010AA  1048               	iorwf	_nec_ok+1,w,c
  2338  0010AC  A4D8               	btfss	status,2,c
  2339  0010AE  D78D               	goto	l7349
  2340                           
  2341                           ;lap12p1.c: 147: {
  2342                           ;lap12p1.c: 148: nec_ok = 0;
  2343  0010B0  0E00               	movlw	0
  2344  0010B2  6E48               	movwf	_nec_ok+1,c
  2345  0010B4  0E00               	movlw	0
  2346  0010B6  6E47               	movwf	_nec_ok,c
  2347                           
  2348                           ;lap12p1.c: 150: printf ("NEC_Code = %x\r\n", Nec_code1);
  2349  0010B8  0EB0               	movlw	low STR_6
  2350  0010BA  6E1D               	movwf	printf@f,c
  2351  0010BC  0EFC               	movlw	high STR_6
  2352  0010BE  6E1E               	movwf	printf@f+1,c
  2353  0010C0  C050  F01F         	movff	_Nec_code1,?_printf+2
  2354  0010C4  6A20               	clrf	?_printf+3,c
  2355  0010C6  EC0E  F000         	call	_printf	;wreg free
  2356                           
  2357                           ;lap12p1.c: 152: INTCONbits.INT0IE = 1;
  2358  0010CA  88F2               	bsf	intcon,4,c	;volatile
  2359                           
  2360                           ;lap12p1.c: 153: INTCON2bits.INTEDG0 = 0;
  2361  0010CC  9CF1               	bcf	intcon2,6,c	;volatile
  2362                           
  2363                           ;lap12p1.c: 155: found = 0xff;
  2364  0010CE  685C               	setf	_found,c
  2365                           
  2366                           ;lap12p1.c: 156: for (int j=0; j< 21; j++)
  2367  0010D0  0E00               	movlw	0
  2368  0010D2  0101               	movlb	1	; () banked
  2369  0010D4  6F8B               	movwf	(main@j+1)& (0+255),b
  2370  0010D6  0E00               	movlw	0
  2371  0010D8  6F8A               	movwf	main@j& (0+255),b
  2372                           
  2373                           ; BSR set to: 1
  2374  0010DA  0101               	movlb	1	; () banked
  2375  0010DC  BF8B               	btfsc	(main@j+1)& (0+255),7,b
  2376  0010DE  D00A               	goto	l7391
  2377  0010E0  0101               	movlb	1	; () banked
  2378  0010E2  518B               	movf	(main@j+1)& (0+255),w,b
  2379  0010E4  E125               	bnz	l272
  2380  0010E6  0E15               	movlw	21
  2381  0010E8  0101               	movlb	1	; () banked
  2382  0010EA  5D8A               	subwf	main@j& (0+255),w,b
  2383  0010EC  B0D8               	btfsc	status,0,c
  2384  0010EE  D020               	goto	l272
  2385  0010F0  D001               	goto	l7391
  2386                           
  2387                           ; BSR set to: 1
  2388  0010F2  D01E               	goto	l272
  2389  0010F4                     l7391:
  2390                           
  2391                           ; BSR set to: 1
  2392                           ;lap12p1.c: 157: {
  2393                           ;lap12p1.c: 158: if (Nec_code1 == array1[j])
  2394  0010F4  0E3F               	movlw	low _array1
  2395  0010F6  0101               	movlb	1	; () banked
  2396  0010F8  258A               	addwf	main@j& (0+255),w,b
  2397  0010FA  6ED9               	movwf	fsr2l,c
  2398  0010FC  0E01               	movlw	high _array1
  2399  0010FE  0101               	movlb	1	; () banked
  2400  001100  218B               	addwfc	(main@j+1)& (0+255),w,b
  2401  001102  6EDA               	movwf	fsr2h,c
  2402  001104  5050               	movf	_Nec_code1,w,c
  2403  001106  18DE               	xorwf	postinc2,w,c
  2404  001108  A4D8               	btfss	status,2,c
  2405  00110A  D008               	goto	l7397
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;lap12p1.c: 159: {
  2409                           ;lap12p1.c: 160: found = j;
  2410  00110C  C18A  F05C         	movff	main@j,_found
  2411                           
  2412                           ; BSR set to: 1
  2413                           ;lap12p1.c: 161: j = 21;
  2414  001110  0E00               	movlw	0
  2415  001112  0101               	movlb	1	; () banked
  2416  001114  6F8B               	movwf	(main@j+1)& (0+255),b
  2417  001116  0E15               	movlw	21
  2418  001118  6F8A               	movwf	main@j& (0+255),b
  2419  00111A  D000               	goto	l7397
  2420  00111C                     l7397:
  2421                           
  2422                           ; BSR set to: 1
  2423  00111C  0101               	movlb	1	; () banked
  2424  00111E  4B8A               	infsnz	main@j& (0+255),f,b
  2425  001120  2B8B               	incf	(main@j+1)& (0+255),f,b
  2426                           
  2427                           ; BSR set to: 1
  2428  001122  0101               	movlb	1	; () banked
  2429  001124  BF8B               	btfsc	(main@j+1)& (0+255),7,b
  2430  001126  D7E6               	goto	l7391
  2431  001128  0101               	movlb	1	; () banked
  2432  00112A  518B               	movf	(main@j+1)& (0+255),w,b
  2433  00112C  E101               	bnz	u6320
  2434  00112E  D7DB               	goto	L1
  2435  001130                     u6320:
  2436  001130                     l272:
  2437                           
  2438                           ; BSR set to: 1
  2439                           ;lap12p1.c: 162: }
  2440                           ;lap12p1.c: 163: }
  2441                           ;lap12p1.c: 164: PORTBbits.RB7 = 0 ;
  2442  001130  9E81               	bcf	3969,7,c	;volatile
  2443                           
  2444                           ; BSR set to: 1
  2445                           ;lap12p1.c: 165: Activate_Buzzer();
  2446  001132  ECCE  F014         	call	_Activate_Buzzer	;wreg free
  2447                           
  2448                           ;lap12p1.c: 166: PORTE = D3[found];
  2449  001136  505C               	movf	_found,w,c
  2450  001138  0D01               	mullw	1
  2451  00113A  0E2A               	movlw	low _D3
  2452  00113C  24F3               	addwf	prodl,w,c
  2453  00113E  6ED9               	movwf	fsr2l,c
  2454  001140  0E01               	movlw	high _D3
  2455  001142  20F4               	addwfc	prodh,w,c
  2456  001144  6EDA               	movwf	fsr2h,c
  2457  001146  50DF               	movf	indf2,w,c
  2458  001148  6E84               	movwf	3972,c	;volatile
  2459                           
  2460                           ;lap12p1.c: 167: Wait_Half_Second();
  2461  00114A  EC84  F014         	call	_Wait_Half_Second	;wreg free
  2462                           
  2463                           ;lap12p1.c: 168: PORTBbits.RB7 = 1 ;
  2464  00114E  8E81               	bsf	3969,7,c	;volatile
  2465                           
  2466                           ;lap12p1.c: 169: Deactivate_Buzzer();
  2467  001150  EC2F  F015         	call	_Deactivate_Buzzer	;wreg free
  2468                           
  2469                           ;lap12p1.c: 170: if (found == 0xff)
  2470  001154  285C               	incf	_found,w,c
  2471  001156  A4D8               	btfss	status,2,c
  2472  001158  D00A               	goto	l7415
  2473                           
  2474                           ;lap12p1.c: 171: {
  2475                           ;lap12p1.c: 172: printf ("Cannot find button \r\n", found);
  2476  00115A  0E4D               	movlw	low STR_7
  2477  00115C  6E1D               	movwf	printf@f,c
  2478  00115E  0EFC               	movlw	high STR_7
  2479  001160  6E1E               	movwf	printf@f+1,c
  2480  001162  C05C  F01F         	movff	_found,?_printf+2
  2481  001166  6A20               	clrf	?_printf+3,c
  2482  001168  EC0E  F000         	call	_printf	;wreg free
  2483                           
  2484                           ;lap12p1.c: 173: }
  2485  00116C  D72E               	goto	l7349
  2486  00116E                     l7415:
  2487                           
  2488                           ;lap12p1.c: 174: else
  2489                           ;lap12p1.c: 175: {
  2490                           ;lap12p1.c: 176: Do_Beep();
  2491  00116E  EC91  F014         	call	_Do_Beep	;wreg free
  2492                           
  2493                           ;lap12p1.c: 177: printf ("button = %d \r\n", found);
  2494  001172  0EC0               	movlw	low STR_8
  2495  001174  6E1D               	movwf	printf@f,c
  2496  001176  0EFC               	movlw	high STR_8
  2497  001178  6E1E               	movwf	printf@f+1,c
  2498  00117A  C05C  F01F         	movff	_found,?_printf+2
  2499  00117E  6A20               	clrf	?_printf+3,c
  2500  001180  EC0E  F000         	call	_printf	;wreg free
  2501                           
  2502                           ;lap12p1.c: 178: if (found == 5)
  2503  001184  0E05               	movlw	5
  2504  001186  185C               	xorwf	_found,w,c
  2505  001188  A4D8               	btfss	status,2,c
  2506  00118A  D003               	goto	l7423
  2507                           
  2508                           ;lap12p1.c: 179: {
  2509                           ;lap12p1.c: 180: Toggle_Fan();
  2510  00118C  ECA7  F014         	call	_Toggle_Fan	;wreg free
  2511                           
  2512                           ;lap12p1.c: 181: }
  2513  001190  D71C               	goto	l7349
  2514  001192                     l7423:
  2515                           
  2516                           ;lap12p1.c: 182: else if (found == 6)
  2517  001192  0E06               	movlw	6
  2518  001194  185C               	xorwf	_found,w,c
  2519  001196  A4D8               	btfss	status,2,c
  2520  001198  D003               	goto	l7427
  2521                           
  2522                           ;lap12p1.c: 183: {
  2523                           ;lap12p1.c: 184: Decrease_Speed();
  2524  00119A  ECE6  F013         	call	_Decrease_Speed	;wreg free
  2525                           
  2526                           ;lap12p1.c: 185: }
  2527  00119E  D715               	goto	l7349
  2528  0011A0                     l7427:
  2529                           
  2530                           ;lap12p1.c: 186: else if (found == 7)
  2531  0011A0  0E07               	movlw	7
  2532  0011A2  185C               	xorwf	_found,w,c
  2533  0011A4  A4D8               	btfss	status,2,c
  2534  0011A6  D003               	goto	l7431
  2535                           
  2536                           ;lap12p1.c: 187: {
  2537                           ;lap12p1.c: 188: Increase_Speed();
  2538  0011A8  ECCE  F013         	call	_Increase_Speed	;wreg free
  2539                           
  2540                           ;lap12p1.c: 189: }
  2541  0011AC  D70E               	goto	l7349
  2542  0011AE                     l7431:
  2543                           
  2544                           ;lap12p1.c: 190: else if (found == 8)
  2545  0011AE  0E08               	movlw	8
  2546  0011B0  185C               	xorwf	_found,w,c
  2547  0011B2  A4D8               	btfss	status,2,c
  2548  0011B4  D70A               	goto	l7349
  2549                           
  2550                           ;lap12p1.c: 191: {
  2551                           ;lap12p1.c: 192: DS3231_Setup_Time();
  2552  0011B6  EC2C  F011         	call	_DS3231_Setup_Time	;wreg free
  2553  0011BA  D707               	goto	l7349
  2554  0011BC  EF0C  F000         	goto	start
  2555  0011C0                     __end_of_main:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           intcon	equ	0xFF2
  2564                           intcon2	equ	0xFF1
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           postdec1	equ	0xFE5
  2568                           fsr1l	equ	0xFE1
  2569                           indf2	equ	0xFDF
  2570                           postinc2	equ	0xFDE
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575 ;; *************** function _get_RPM *****************
  2576 ;; Defined at:
  2577 ;;		line 23 in file "Fan_Support.c"
  2578 ;; Parameters:    Size  Location     Type
  2579 ;;		None
  2580 ;; Auto vars:     Size  Location     Type
  2581 ;;  RPS             2   32[COMRAM] int 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  2   30[COMRAM] int 
  2584 ;; Registers used:
  2585 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;Total ram usage:        4 bytes
  2596 ;; Hardware stack levels used:    1
  2597 ;; Hardware stack levels required when called:    4
  2598 ;; This function calls:
  2599 ;;		___awdiv
  2600 ;;		___wmul
  2601 ;; This function is called by:
  2602 ;;		_main
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           	psect	text1
  2607  002610                     __ptext1:
  2608                           	opt stack 0
  2609  002610                     _get_RPM:
  2610                           	opt stack 26
  2611                           
  2612                           ;Fan_Support.c: 25: int RPS = TMR3L / 2;
  2613                           
  2614                           ;incstack = 0
  2615  002610  CFB2 F017          	movff	4018,___awdiv@dividend	;volatile
  2616  002614  6A18               	clrf	___awdiv@dividend+1,c
  2617  002616  0E00               	movlw	0
  2618  002618  6E1A               	movwf	___awdiv@divisor+1,c
  2619  00261A  0E02               	movlw	2
  2620  00261C  6E19               	movwf	___awdiv@divisor,c
  2621  00261E  EC36  F00F         	call	___awdiv	;wreg free
  2622  002622  C017  F021         	movff	?___awdiv,get_RPM@RPS
  2623  002626  C018  F022         	movff	?___awdiv+1,get_RPM@RPS+1
  2624                           
  2625                           ;Fan_Support.c: 27: TMR3L = 0;
  2626  00262A  0E00               	movlw	0
  2627  00262C  6EB2               	movwf	4018,c	;volatile
  2628                           
  2629                           ;Fan_Support.c: 28: return (RPS * 60);
  2630  00262E  C021  F011         	movff	get_RPM@RPS,___wmul@multiplier
  2631  002632  C022  F012         	movff	get_RPM@RPS+1,___wmul@multiplier+1
  2632  002636  0E00               	movlw	0
  2633  002638  6E14               	movwf	___wmul@multiplicand+1,c
  2634  00263A  0E3C               	movlw	60
  2635  00263C  6E13               	movwf	___wmul@multiplicand,c
  2636  00263E  EC12  F014         	call	___wmul	;wreg free
  2637  002642  C011  F01F         	movff	?___wmul,?_get_RPM
  2638  002646  C012  F020         	movff	?___wmul+1,?_get_RPM+1
  2639  00264A  D000               	goto	l37
  2640  00264C                     l37:
  2641  00264C  0012               	return		;funcret
  2642  00264E                     __end_of_get_RPM:
  2643                           	opt stack 0
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           prodh	equ	0xFF4
  2649                           prodl	equ	0xFF3
  2650                           intcon	equ	0xFF2
  2651                           intcon2	equ	0xFF1
  2652                           postinc0	equ	0xFEE
  2653                           wreg	equ	0xFE8
  2654                           postdec1	equ	0xFE5
  2655                           fsr1l	equ	0xFE1
  2656                           indf2	equ	0xFDF
  2657                           postinc2	equ	0xFDE
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _Update_Screen *****************
  2663 ;; Defined at:
  2664 ;;		line 69 in file "Main_Screen.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  neg_tempF       2   11[BANK0 ] int 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  2  123[None  ] int 
  2671 ;; Registers used:
  2672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;Total ram usage:        4 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:   10
  2685 ;; This function calls:
  2686 ;;		___awdiv
  2687 ;;		___awmod
  2688 ;;		_drawtext
  2689 ;;		_strcpy
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text2
  2696  000976                     __ptext2:
  2697                           	opt stack 0
  2698  000976                     _Update_Screen:
  2699                           	opt stack 20
  2700                           
  2701                           ;Main_Screen.c: 71: if ((DS1621_tempC & 0x80) == 0x80)
  2702                           
  2703                           ;incstack = 0
  2704  000976  AE41               	btfss	_DS1621_tempC,7,c
  2705  000978  D01C               	goto	l7179
  2706                           
  2707                           ;Main_Screen.c: 72: {
  2708                           ;Main_Screen.c: 73: tempC[0] = '-';
  2709  00097A  0E2D               	movlw	45
  2710  00097C  0100               	movlb	0	; () banked
  2711  00097E  6FE1               	movwf	_tempC& (0+255),b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;Main_Screen.c: 74: tempC[1] = (DS1621_tempC & 0x7f)/10 + '0';
  2715  000980  0E7F               	movlw	127
  2716  000982  1441               	andwf	_DS1621_tempC,w,c
  2717  000984  6E17               	movwf	___awdiv@dividend,c
  2718  000986  6A18               	clrf	___awdiv@dividend+1,c
  2719  000988  0E00               	movlw	0
  2720  00098A  6E1A               	movwf	___awdiv@divisor+1,c
  2721  00098C  0E0A               	movlw	10
  2722  00098E  6E19               	movwf	___awdiv@divisor,c
  2723  000990  EC36  F00F         	call	___awdiv	;wreg free
  2724  000994  5017               	movf	?___awdiv,w,c
  2725  000996  0F30               	addlw	48
  2726  000998  0100               	movlb	0	; () banked
  2727  00099A  6FE2               	movwf	(_tempC+1)& (0+255),b
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;Main_Screen.c: 75: tempC[2] = (DS1621_tempC & 0x7f)%10 + '0';
  2731  00099C  0E7F               	movlw	127
  2732  00099E  1441               	andwf	_DS1621_tempC,w,c
  2733  0009A0  6E1F               	movwf	___awmod@dividend,c
  2734  0009A2  6A20               	clrf	___awmod@dividend+1,c
  2735  0009A4  0E00               	movlw	0
  2736  0009A6  6E22               	movwf	___awmod@divisor+1,c
  2737  0009A8  0E0A               	movlw	10
  2738  0009AA  6E21               	movwf	___awmod@divisor,c
  2739  0009AC  ECC5  F00F         	call	___awmod	;wreg free
  2740  0009B0  D01B               	goto	L2
  2741  0009B2                     l7179:
  2742                           
  2743                           ;Main_Screen.c: 77: else
  2744                           ;Main_Screen.c: 78: {
  2745                           ;Main_Screen.c: 79: tempC[0] = '+';
  2746  0009B2  0E2B               	movlw	43
  2747  0009B4  0100               	movlb	0	; () banked
  2748  0009B6  6FE1               	movwf	_tempC& (0+255),b
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;Main_Screen.c: 80: tempC[1] = DS1621_tempC/10 + '0';
  2752  0009B8  C041  F017         	movff	_DS1621_tempC,___awdiv@dividend
  2753  0009BC  C042  F018         	movff	_DS1621_tempC+1,___awdiv@dividend+1
  2754  0009C0  0E00               	movlw	0
  2755  0009C2  6E1A               	movwf	___awdiv@divisor+1,c
  2756  0009C4  0E0A               	movlw	10
  2757  0009C6  6E19               	movwf	___awdiv@divisor,c
  2758  0009C8  EC36  F00F         	call	___awdiv	;wreg free
  2759  0009CC  5017               	movf	?___awdiv,w,c
  2760  0009CE  0F30               	addlw	48
  2761  0009D0  0100               	movlb	0	; () banked
  2762  0009D2  6FE2               	movwf	(_tempC+1)& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;Main_Screen.c: 81: tempC[2] = DS1621_tempC%10 + '0';
  2766  0009D4  C041  F01F         	movff	_DS1621_tempC,___awmod@dividend
  2767  0009D8  C042  F020         	movff	_DS1621_tempC+1,___awmod@dividend+1
  2768  0009DC  0E00               	movlw	0
  2769  0009DE  6E22               	movwf	___awmod@divisor+1,c
  2770  0009E0  0E0A               	movlw	10
  2771  0009E2  6E21               	movwf	___awmod@divisor,c
  2772  0009E4  ECC5  F00F         	call	___awmod	;wreg free
  2773  0009E8                     L2:
  2774  0009E8  501F               	movf	?___awmod,w,c
  2775  0009EA  0F30               	addlw	48
  2776  0009EC  0100               	movlb	0	; () banked
  2777  0009EE  6FE3               	movwf	(_tempC+2)& (0+255),b
  2778  0009F0  D000               	goto	l7185
  2779  0009F2                     l7185:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;Main_Screen.c: 82: }
  2783                           ;Main_Screen.c: 84: if (DS1621_tempF < 0)
  2784  0009F2  AE44               	btfss	_DS1621_tempF+1,7,c
  2785  0009F4  D029               	goto	l7195
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;Main_Screen.c: 85: {
  2789                           ;Main_Screen.c: 86: tempF[0] = '-';
  2790  0009F6  0E2D               	movlw	45
  2791  0009F8  0100               	movlb	0	; () banked
  2792  0009FA  6FE5               	movwf	_tempF& (0+255),b
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;Main_Screen.c: 87: int neg_tempF = -DS1621_tempF;
  2796  0009FC  C043  F0F2         	movff	_DS1621_tempF,??_Update_Screen
  2797  000A00  C044  F0F3         	movff	_DS1621_tempF+1,??_Update_Screen+1
  2798  000A04  0100               	movlb	0	; () banked
  2799  000A06  1FF2               	comf	??_Update_Screen& (0+255),f,b
  2800  000A08  1FF3               	comf	(??_Update_Screen+1)& (0+255),f,b
  2801  000A0A  4BF2               	infsnz	??_Update_Screen& (0+255),f,b
  2802  000A0C  2BF3               	incf	(??_Update_Screen+1)& (0+255),f,b
  2803  000A0E  C0F2  F0F4         	movff	??_Update_Screen,Update_Screen@neg_tempF
  2804  000A12  C0F3  F0F5         	movff	??_Update_Screen+1,Update_Screen@neg_tempF+1
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;Main_Screen.c: 88: tempF[1] = neg_tempF/10 + '0';
  2808  000A16  C0F4  F017         	movff	Update_Screen@neg_tempF,___awdiv@dividend
  2809  000A1A  C0F5  F018         	movff	Update_Screen@neg_tempF+1,___awdiv@dividend+1
  2810  000A1E  0E00               	movlw	0
  2811  000A20  6E1A               	movwf	___awdiv@divisor+1,c
  2812  000A22  0E0A               	movlw	10
  2813  000A24  6E19               	movwf	___awdiv@divisor,c
  2814  000A26  EC36  F00F         	call	___awdiv	;wreg free
  2815  000A2A  5017               	movf	?___awdiv,w,c
  2816  000A2C  0F30               	addlw	48
  2817  000A2E  0100               	movlb	0	; () banked
  2818  000A30  6FE6               	movwf	(_tempF+1)& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;Main_Screen.c: 89: tempF[2] = neg_tempF%10 + '0';
  2822  000A32  C0F4  F01F         	movff	Update_Screen@neg_tempF,___awmod@dividend
  2823  000A36  C0F5  F020         	movff	Update_Screen@neg_tempF+1,___awmod@dividend+1
  2824  000A3A  0E00               	movlw	0
  2825  000A3C  6E22               	movwf	___awmod@divisor+1,c
  2826  000A3E  0E0A               	movlw	10
  2827  000A40  6E21               	movwf	___awmod@divisor,c
  2828  000A42  ECC5  F00F         	call	___awmod	;wreg free
  2829  000A46  D01B               	goto	L3
  2830  000A48                     l7195:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;Main_Screen.c: 91: else
  2834                           ;Main_Screen.c: 92: {
  2835                           ;Main_Screen.c: 93: tempF[0] = '+';
  2836  000A48  0E2B               	movlw	43
  2837  000A4A  0100               	movlb	0	; () banked
  2838  000A4C  6FE5               	movwf	_tempF& (0+255),b
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;Main_Screen.c: 94: tempF[1] = DS1621_tempF/10 + '0';
  2842  000A4E  C043  F017         	movff	_DS1621_tempF,___awdiv@dividend
  2843  000A52  C044  F018         	movff	_DS1621_tempF+1,___awdiv@dividend+1
  2844  000A56  0E00               	movlw	0
  2845  000A58  6E1A               	movwf	___awdiv@divisor+1,c
  2846  000A5A  0E0A               	movlw	10
  2847  000A5C  6E19               	movwf	___awdiv@divisor,c
  2848  000A5E  EC36  F00F         	call	___awdiv	;wreg free
  2849  000A62  5017               	movf	?___awdiv,w,c
  2850  000A64  0F30               	addlw	48
  2851  000A66  0100               	movlb	0	; () banked
  2852  000A68  6FE6               	movwf	(_tempF+1)& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;Main_Screen.c: 95: tempF[2] = DS1621_tempF%10 + '0';
  2856  000A6A  C043  F01F         	movff	_DS1621_tempF,___awmod@dividend
  2857  000A6E  C044  F020         	movff	_DS1621_tempF+1,___awmod@dividend+1
  2858  000A72  0E00               	movlw	0
  2859  000A74  6E22               	movwf	___awmod@divisor+1,c
  2860  000A76  0E0A               	movlw	10
  2861  000A78  6E21               	movwf	___awmod@divisor,c
  2862  000A7A  ECC5  F00F         	call	___awmod	;wreg free
  2863  000A7E                     L3:
  2864  000A7E  501F               	movf	?___awmod,w,c
  2865  000A80  0F30               	addlw	48
  2866  000A82  0100               	movlb	0	; () banked
  2867  000A84  6FE7               	movwf	(_tempF+2)& (0+255),b
  2868  000A86  D000               	goto	l7201
  2869  000A88                     l7201:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;Main_Screen.c: 96: }
  2873                           ;Main_Screen.c: 97: time[0] = (hour>>4) + '0';
  2874  000A88  385D               	swapf	_hour,w,c
  2875  000A8A  0B0F               	andlw	15
  2876  000A8C  0F30               	addlw	48
  2877  000A8E  0100               	movlb	0	; () banked
  2878  000A90  6FCB               	movwf	_time& (0+255),b
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;Main_Screen.c: 98: time[1] = (hour & 0x0f)+ '0';
  2882  000A92  505D               	movf	_hour,w,c
  2883  000A94  0B0F               	andlw	15
  2884  000A96  0F30               	addlw	48
  2885  000A98  0100               	movlb	0	; () banked
  2886  000A9A  6FCC               	movwf	(_time+1)& (0+255),b
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;Main_Screen.c: 101: time[3] = (minute>>4) + '0';
  2890  000A9C  385F               	swapf	_minute,w,c
  2891  000A9E  0B0F               	andlw	15
  2892  000AA0  0F30               	addlw	48
  2893  000AA2  0100               	movlb	0	; () banked
  2894  000AA4  6FCE               	movwf	(_time+3)& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;Main_Screen.c: 102: time[4] = (minute & 0x0f) + '0';
  2898  000AA6  505F               	movf	_minute,w,c
  2899  000AA8  0B0F               	andlw	15
  2900  000AAA  0F30               	addlw	48
  2901  000AAC  0100               	movlb	0	; () banked
  2902  000AAE  6FCF               	movwf	(_time+4)& (0+255),b
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;Main_Screen.c: 104: time[6] = (second>>4) + '0';
  2906  000AB0  3862               	swapf	_second,w,c
  2907  000AB2  0B0F               	andlw	15
  2908  000AB4  0F30               	addlw	48
  2909  000AB6  0100               	movlb	0	; () banked
  2910  000AB8  6FD1               	movwf	(_time+6)& (0+255),b
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;Main_Screen.c: 105: time[7] = (second & 0x0f) + '0';
  2914  000ABA  5062               	movf	_second,w,c
  2915  000ABC  0B0F               	andlw	15
  2916  000ABE  0F30               	addlw	48
  2917  000AC0  0100               	movlb	0	; () banked
  2918  000AC2  6FD2               	movwf	(_time+7)& (0+255),b
  2919                           
  2920                           ; BSR set to: 0
  2921                           ;Main_Screen.c: 107: date[0] = (month>>4) + '0';
  2922  000AC4  3860               	swapf	_month,w,c
  2923  000AC6  0B0F               	andlw	15
  2924  000AC8  0F30               	addlw	48
  2925  000ACA  0100               	movlb	0	; () banked
  2926  000ACC  6FC2               	movwf	_date& (0+255),b
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;Main_Screen.c: 108: date[1] = (month & 0x0f) + '0';
  2930  000ACE  5060               	movf	_month,w,c
  2931  000AD0  0B0F               	andlw	15
  2932  000AD2  0F30               	addlw	48
  2933  000AD4  0100               	movlb	0	; () banked
  2934  000AD6  6FC3               	movwf	(_date+1)& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;Main_Screen.c: 110: date[3] = (day>>4) + '0';
  2938  000AD8  3859               	swapf	_day,w,c
  2939  000ADA  0B0F               	andlw	15
  2940  000ADC  0F30               	addlw	48
  2941  000ADE  0100               	movlb	0	; () banked
  2942  000AE0  6FC5               	movwf	(_date+3)& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;Main_Screen.c: 111: date[4] = (day & 0x0f) + '0';
  2946  000AE2  5059               	movf	_day,w,c
  2947  000AE4  0B0F               	andlw	15
  2948  000AE6  0F30               	addlw	48
  2949  000AE8  0100               	movlb	0	; () banked
  2950  000AEA  6FC6               	movwf	(_date+4)& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;Main_Screen.c: 113: date[6] = (year>>4) + '0';
  2954  000AEC  386C               	swapf	_year,w,c
  2955  000AEE  0B0F               	andlw	15
  2956  000AF0  0F30               	addlw	48
  2957  000AF2  0100               	movlb	0	; () banked
  2958  000AF4  6FC8               	movwf	(_date+6)& (0+255),b
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;Main_Screen.c: 114: date[7] = (year & 0x0f) + '0';
  2962  000AF6  506C               	movf	_year,w,c
  2963  000AF8  0B0F               	andlw	15
  2964  000AFA  0F30               	addlw	48
  2965  000AFC  0100               	movlb	0	; () banked
  2966  000AFE  6FC9               	movwf	(_date+7)& (0+255),b
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;Main_Screen.c: 117: if (FAN == 1) strcpy(Fan_SW_Txt, "ON ");
  2970  000B00  044F               	decf	_FAN,w,c
  2971  000B02  A4D8               	btfss	status,2,c
  2972  000B04  D00B               	goto	l7229
  2973                           
  2974                           ; BSR set to: 0
  2975  000B06  0EDD               	movlw	low _Fan_SW_Txt
  2976  000B08  6E11               	movwf	strcpy@to,c
  2977  000B0A  0E00               	movlw	high _Fan_SW_Txt
  2978  000B0C  6E12               	movwf	strcpy@to+1,c
  2979  000B0E  0EEC               	movlw	low STR_18
  2980  000B10  6E13               	movwf	strcpy@from,c
  2981  000B12  0EFC               	movlw	high STR_18
  2982  000B14  6E14               	movwf	strcpy@from+1,c
  2983  000B16  EC84  F013         	call	_strcpy	;wreg free
  2984  000B1A  D00B               	goto	l7231
  2985  000B1C                     l7229:
  2986                           
  2987                           ;Main_Screen.c: 118: else strcpy(Fan_SW_Txt, "OFF");
  2988  000B1C  0EDD               	movlw	low _Fan_SW_Txt
  2989  000B1E  6E11               	movwf	strcpy@to,c
  2990  000B20  0E00               	movlw	high _Fan_SW_Txt
  2991  000B22  6E12               	movwf	strcpy@to+1,c
  2992  000B24  0EF0               	movlw	low STR_19
  2993  000B26  6E13               	movwf	strcpy@from,c
  2994  000B28  0EFC               	movlw	high STR_19
  2995  000B2A  6E14               	movwf	strcpy@from+1,c
  2996  000B2C  EC84  F013         	call	_strcpy	;wreg free
  2997  000B30  D000               	goto	l7231
  2998  000B32                     l7231:
  2999                           
  3000                           ;Main_Screen.c: 121: DC_Txt[0] = (duty_cycle/100) % 10 + '0';
  3001  000B32  0E00               	movlw	0
  3002  000B34  6E1A               	movwf	___awdiv@divisor+1,c
  3003  000B36  0E64               	movlw	100
  3004  000B38  6E19               	movwf	___awdiv@divisor,c
  3005  000B3A  C05B  F017         	movff	_duty_cycle,___awdiv@dividend
  3006  000B3E  6A18               	clrf	___awdiv@dividend+1,c
  3007  000B40  EC36  F00F         	call	___awdiv	;wreg free
  3008  000B44  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3009  000B48  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3010  000B4C  0E00               	movlw	0
  3011  000B4E  6E22               	movwf	___awmod@divisor+1,c
  3012  000B50  0E0A               	movlw	10
  3013  000B52  6E21               	movwf	___awmod@divisor,c
  3014  000B54  ECC5  F00F         	call	___awmod	;wreg free
  3015  000B58  501F               	movf	?___awmod,w,c
  3016  000B5A  0F30               	addlw	48
  3017  000B5C  0100               	movlb	0	; () banked
  3018  000B5E  6FD9               	movwf	_DC_Txt& (0+255),b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;Main_Screen.c: 123: DC_Txt[1] = (duty_cycle/10) % 10 + '0';
  3022  000B60  0E00               	movlw	0
  3023  000B62  6E1A               	movwf	___awdiv@divisor+1,c
  3024  000B64  0E0A               	movlw	10
  3025  000B66  6E19               	movwf	___awdiv@divisor,c
  3026  000B68  C05B  F017         	movff	_duty_cycle,___awdiv@dividend
  3027  000B6C  6A18               	clrf	___awdiv@dividend+1,c
  3028  000B6E  EC36  F00F         	call	___awdiv	;wreg free
  3029  000B72  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3030  000B76  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3031  000B7A  0E00               	movlw	0
  3032  000B7C  6E22               	movwf	___awmod@divisor+1,c
  3033  000B7E  0E0A               	movlw	10
  3034  000B80  6E21               	movwf	___awmod@divisor,c
  3035  000B82  ECC5  F00F         	call	___awmod	;wreg free
  3036  000B86  501F               	movf	?___awmod,w,c
  3037  000B88  0F30               	addlw	48
  3038  000B8A  0100               	movlb	0	; () banked
  3039  000B8C  6FDA               	movwf	(_DC_Txt+1)& (0+255),b
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;Main_Screen.c: 124: DC_Txt[2] = (duty_cycle) % 10 + '0';
  3043  000B8E  C05B  F01F         	movff	_duty_cycle,___awmod@dividend
  3044  000B92  6A20               	clrf	___awmod@dividend+1,c
  3045  000B94  0E00               	movlw	0
  3046  000B96  6E22               	movwf	___awmod@divisor+1,c
  3047  000B98  0E0A               	movlw	10
  3048  000B9A  6E21               	movwf	___awmod@divisor,c
  3049  000B9C  ECC5  F00F         	call	___awmod	;wreg free
  3050  000BA0  501F               	movf	?___awmod,w,c
  3051  000BA2  0F30               	addlw	48
  3052  000BA4  0100               	movlb	0	; () banked
  3053  000BA6  6FDB               	movwf	(_DC_Txt+2)& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;Main_Screen.c: 127: RPM_Txt[0] = rpm/1000 + '0';
  3057  000BA8  C049  F017         	movff	_rpm,___awdiv@dividend
  3058  000BAC  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3059  000BB0  0E03               	movlw	3
  3060  000BB2  6E1A               	movwf	___awdiv@divisor+1,c
  3061  000BB4  0EE8               	movlw	232
  3062  000BB6  6E19               	movwf	___awdiv@divisor,c
  3063  000BB8  EC36  F00F         	call	___awdiv	;wreg free
  3064  000BBC  5017               	movf	?___awdiv,w,c
  3065  000BBE  0F30               	addlw	48
  3066  000BC0  0100               	movlb	0	; () banked
  3067  000BC2  6FD4               	movwf	_RPM_Txt& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;Main_Screen.c: 129: RPM_Txt[1] = (rpm/100) % 10 + '0';
  3071  000BC4  0E00               	movlw	0
  3072  000BC6  6E1A               	movwf	___awdiv@divisor+1,c
  3073  000BC8  0E64               	movlw	100
  3074  000BCA  6E19               	movwf	___awdiv@divisor,c
  3075  000BCC  C049  F017         	movff	_rpm,___awdiv@dividend
  3076  000BD0  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3077  000BD4  EC36  F00F         	call	___awdiv	;wreg free
  3078  000BD8  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3079  000BDC  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3080  000BE0  0E00               	movlw	0
  3081  000BE2  6E22               	movwf	___awmod@divisor+1,c
  3082  000BE4  0E0A               	movlw	10
  3083  000BE6  6E21               	movwf	___awmod@divisor,c
  3084  000BE8  ECC5  F00F         	call	___awmod	;wreg free
  3085  000BEC  501F               	movf	?___awmod,w,c
  3086  000BEE  0F30               	addlw	48
  3087  000BF0  0100               	movlb	0	; () banked
  3088  000BF2  6FD5               	movwf	(_RPM_Txt+1)& (0+255),b
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;Main_Screen.c: 130: RPM_Txt[2] = (rpm/10) % 10 + '0';
  3092  000BF4  0E00               	movlw	0
  3093  000BF6  6E1A               	movwf	___awdiv@divisor+1,c
  3094  000BF8  0E0A               	movlw	10
  3095  000BFA  6E19               	movwf	___awdiv@divisor,c
  3096  000BFC  C049  F017         	movff	_rpm,___awdiv@dividend
  3097  000C00  C04A  F018         	movff	_rpm+1,___awdiv@dividend+1
  3098  000C04  EC36  F00F         	call	___awdiv	;wreg free
  3099  000C08  C017  F01F         	movff	?___awdiv,___awmod@dividend
  3100  000C0C  C018  F020         	movff	?___awdiv+1,___awmod@dividend+1
  3101  000C10  0E00               	movlw	0
  3102  000C12  6E22               	movwf	___awmod@divisor+1,c
  3103  000C14  0E0A               	movlw	10
  3104  000C16  6E21               	movwf	___awmod@divisor,c
  3105  000C18  ECC5  F00F         	call	___awmod	;wreg free
  3106  000C1C  501F               	movf	?___awmod,w,c
  3107  000C1E  0F30               	addlw	48
  3108  000C20  0100               	movlb	0	; () banked
  3109  000C22  6FD6               	movwf	(_RPM_Txt+2)& (0+255),b
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;Main_Screen.c: 131: RPM_Txt[3] = rpm % 10 + '0';
  3113  000C24  C049  F01F         	movff	_rpm,___awmod@dividend
  3114  000C28  C04A  F020         	movff	_rpm+1,___awmod@dividend+1
  3115  000C2C  0E00               	movlw	0
  3116  000C2E  6E22               	movwf	___awmod@divisor+1,c
  3117  000C30  0E0A               	movlw	10
  3118  000C32  6E21               	movwf	___awmod@divisor,c
  3119  000C34  ECC5  F00F         	call	___awmod	;wreg free
  3120  000C38  501F               	movf	?___awmod,w,c
  3121  000C3A  0F30               	addlw	48
  3122  000C3C  0100               	movlb	0	; () banked
  3123  000C3E  6FD7               	movwf	(_RPM_Txt+3)& (0+255),b
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;Main_Screen.c: 133: drawtext(1, 23, tempC , 0xFFE0 , 0x0000 , 2);
  3127  000C40  0E17               	movlw	23
  3128  000C42  6E39               	movwf	drawtext@y,c
  3129  000C44  0EE1               	movlw	low _tempC
  3130  000C46  6E3A               	movwf	drawtext@_text,c
  3131  000C48  0E00               	movlw	high _tempC
  3132  000C4A  6E3B               	movwf	drawtext@_text+1,c
  3133  000C4C  0EFF               	movlw	255
  3134  000C4E  6E3D               	movwf	drawtext@color+1,c
  3135  000C50  0EE0               	movlw	224
  3136  000C52  6E3C               	movwf	drawtext@color,c
  3137  000C54  0E00               	movlw	0
  3138  000C56  6E3F               	movwf	drawtext@bg+1,c
  3139  000C58  0E00               	movlw	0
  3140  000C5A  6E3E               	movwf	drawtext@bg,c
  3141  000C5C  0E02               	movlw	2
  3142  000C5E  6E40               	movwf	drawtext@size,c
  3143  000C60  0E01               	movlw	1
  3144  000C62  EC18  F00B         	call	_drawtext
  3145                           
  3146                           ;Main_Screen.c: 134: drawtext(70, 23, tempF , 0xFFE0 , 0x0000 , 2);
  3147  000C66  0E17               	movlw	23
  3148  000C68  6E39               	movwf	drawtext@y,c
  3149  000C6A  0EE5               	movlw	low _tempF
  3150  000C6C  6E3A               	movwf	drawtext@_text,c
  3151  000C6E  0E00               	movlw	high _tempF
  3152  000C70  6E3B               	movwf	drawtext@_text+1,c
  3153  000C72  0EFF               	movlw	255
  3154  000C74  6E3D               	movwf	drawtext@color+1,c
  3155  000C76  0EE0               	movlw	224
  3156  000C78  6E3C               	movwf	drawtext@color,c
  3157  000C7A  0E00               	movlw	0
  3158  000C7C  6E3F               	movwf	drawtext@bg+1,c
  3159  000C7E  0E00               	movlw	0
  3160  000C80  6E3E               	movwf	drawtext@bg,c
  3161  000C82  0E02               	movlw	2
  3162  000C84  6E40               	movwf	drawtext@size,c
  3163  000C86  0E46               	movlw	70
  3164  000C88  EC18  F00B         	call	_drawtext
  3165                           
  3166                           ;Main_Screen.c: 135: drawtext(15 , 52 , time , 0x07FF , 0x0000 , 2);
  3167  000C8C  0E34               	movlw	52
  3168  000C8E  6E39               	movwf	drawtext@y,c
  3169  000C90  0ECB               	movlw	low _time
  3170  000C92  6E3A               	movwf	drawtext@_text,c
  3171  000C94  0E00               	movlw	high _time
  3172  000C96  6E3B               	movwf	drawtext@_text+1,c
  3173  000C98  0E07               	movlw	7
  3174  000C9A  6E3D               	movwf	drawtext@color+1,c
  3175  000C9C  683C               	setf	drawtext@color,c
  3176  000C9E  0E00               	movlw	0
  3177  000CA0  6E3F               	movwf	drawtext@bg+1,c
  3178  000CA2  0E00               	movlw	0
  3179  000CA4  6E3E               	movwf	drawtext@bg,c
  3180  000CA6  0E02               	movlw	2
  3181  000CA8  6E40               	movwf	drawtext@size,c
  3182  000CAA  0E0F               	movlw	15
  3183  000CAC  EC18  F00B         	call	_drawtext
  3184                           
  3185                           ;Main_Screen.c: 136: drawtext(15 , 82 , date , 0x07E0 , 0x0000 , 2);
  3186  000CB0  0E52               	movlw	82
  3187  000CB2  6E39               	movwf	drawtext@y,c
  3188  000CB4  0EC2               	movlw	low _date
  3189  000CB6  6E3A               	movwf	drawtext@_text,c
  3190  000CB8  0E00               	movlw	high _date
  3191  000CBA  6E3B               	movwf	drawtext@_text+1,c
  3192  000CBC  0E07               	movlw	7
  3193  000CBE  6E3D               	movwf	drawtext@color+1,c
  3194  000CC0  0EE0               	movlw	224
  3195  000CC2  6E3C               	movwf	drawtext@color,c
  3196  000CC4  0E00               	movlw	0
  3197  000CC6  6E3F               	movwf	drawtext@bg+1,c
  3198  000CC8  0E00               	movlw	0
  3199  000CCA  6E3E               	movwf	drawtext@bg,c
  3200  000CCC  0E02               	movlw	2
  3201  000CCE  6E40               	movwf	drawtext@size,c
  3202  000CD0  0E0F               	movlw	15
  3203  000CD2  EC18  F00B         	call	_drawtext
  3204                           
  3205                           ;Main_Screen.c: 138: drawtext(95, 130, Fan_SW_Txt, 0xF800 , 0x0000 , 1);
  3206  000CD6  0E82               	movlw	130
  3207  000CD8  6E39               	movwf	drawtext@y,c
  3208  000CDA  0EDD               	movlw	low _Fan_SW_Txt
  3209  000CDC  6E3A               	movwf	drawtext@_text,c
  3210  000CDE  0E00               	movlw	high _Fan_SW_Txt
  3211  000CE0  6E3B               	movwf	drawtext@_text+1,c
  3212  000CE2  0EF8               	movlw	248
  3213  000CE4  6E3D               	movwf	drawtext@color+1,c
  3214  000CE6  0E00               	movlw	0
  3215  000CE8  6E3C               	movwf	drawtext@color,c
  3216  000CEA  0E00               	movlw	0
  3217  000CEC  6E3F               	movwf	drawtext@bg+1,c
  3218  000CEE  0E00               	movlw	0
  3219  000CF0  6E3E               	movwf	drawtext@bg,c
  3220  000CF2  0E01               	movlw	1
  3221  000CF4  6E40               	movwf	drawtext@size,c
  3222  000CF6  0E5F               	movlw	95
  3223  000CF8  EC18  F00B         	call	_drawtext
  3224                           
  3225                           ;Main_Screen.c: 139: drawtext(10, 150, DC_Txt, 0x07E0, 0x0000, 1);
  3226  000CFC  0E96               	movlw	150
  3227  000CFE  6E39               	movwf	drawtext@y,c
  3228  000D00  0ED9               	movlw	low _DC_Txt
  3229  000D02  6E3A               	movwf	drawtext@_text,c
  3230  000D04  0E00               	movlw	high _DC_Txt
  3231  000D06  6E3B               	movwf	drawtext@_text+1,c
  3232  000D08  0E07               	movlw	7
  3233  000D0A  6E3D               	movwf	drawtext@color+1,c
  3234  000D0C  0EE0               	movlw	224
  3235  000D0E  6E3C               	movwf	drawtext@color,c
  3236  000D10  0E00               	movlw	0
  3237  000D12  6E3F               	movwf	drawtext@bg+1,c
  3238  000D14  0E00               	movlw	0
  3239  000D16  6E3E               	movwf	drawtext@bg,c
  3240  000D18  0E01               	movlw	1
  3241  000D1A  6E40               	movwf	drawtext@size,c
  3242  000D1C  0E0A               	movlw	10
  3243  000D1E  EC18  F00B         	call	_drawtext
  3244                           
  3245                           ;Main_Screen.c: 140: drawtext(93, 150, RPM_Txt, 0x07E0, 0x0000, 1);
  3246  000D22  0E96               	movlw	150
  3247  000D24  6E39               	movwf	drawtext@y,c
  3248  000D26  0ED4               	movlw	low _RPM_Txt
  3249  000D28  6E3A               	movwf	drawtext@_text,c
  3250  000D2A  0E00               	movlw	high _RPM_Txt
  3251  000D2C  6E3B               	movwf	drawtext@_text+1,c
  3252  000D2E  0E07               	movlw	7
  3253  000D30  6E3D               	movwf	drawtext@color+1,c
  3254  000D32  0EE0               	movlw	224
  3255  000D34  6E3C               	movwf	drawtext@color,c
  3256  000D36  0E00               	movlw	0
  3257  000D38  6E3F               	movwf	drawtext@bg+1,c
  3258  000D3A  0E00               	movlw	0
  3259  000D3C  6E3E               	movwf	drawtext@bg,c
  3260  000D3E  0E01               	movlw	1
  3261  000D40  6E40               	movwf	drawtext@size,c
  3262  000D42  0E5D               	movlw	93
  3263  000D44  EC18  F00B         	call	_drawtext
  3264  000D48  0012               	return		;funcret
  3265  000D4A                     __end_of_Update_Screen:
  3266                           	opt stack 0
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           prodh	equ	0xFF4
  3272                           prodl	equ	0xFF3
  3273                           intcon	equ	0xFF2
  3274                           intcon2	equ	0xFF1
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1l	equ	0xFE1
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function ___awmod *****************
  3286 ;; Defined at:
  3287 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;  dividend        2   30[COMRAM] int 
  3290 ;;  divisor         2   32[COMRAM] int 
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  sign            1   35[COMRAM] unsigned char 
  3293 ;;  counter         1   34[COMRAM] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  2   30[COMRAM] int 
  3296 ;; Registers used:
  3297 ;;		wreg, status,2, status,0
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;Total ram usage:        6 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    3
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_Update_Screen
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text3
  3318  001F8A                     __ptext3:
  3319                           	opt stack 0
  3320  001F8A                     ___awmod:
  3321                           	opt stack 26
  3322                           
  3323                           ;incstack = 0
  3324  001F8A  0E00               	movlw	0
  3325  001F8C  6E24               	movwf	___awmod@sign,c
  3326  001F8E  AE20               	btfss	___awmod@dividend+1,7,c
  3327  001F90  D007               	goto	l6961
  3328  001F92  6C1F               	negf	___awmod@dividend,c
  3329  001F94  1E20               	comf	___awmod@dividend+1,f,c
  3330  001F96  B0D8               	btfsc	status,0,c
  3331  001F98  2A20               	incf	___awmod@dividend+1,f,c
  3332  001F9A  0E01               	movlw	1
  3333  001F9C  6E24               	movwf	___awmod@sign,c
  3334  001F9E  D000               	goto	l6961
  3335  001FA0                     l6961:
  3336  001FA0  AE22               	btfss	___awmod@divisor+1,7,c
  3337  001FA2  D005               	goto	l6965
  3338  001FA4  6C21               	negf	___awmod@divisor,c
  3339  001FA6  1E22               	comf	___awmod@divisor+1,f,c
  3340  001FA8  B0D8               	btfsc	status,0,c
  3341  001FAA  2A22               	incf	___awmod@divisor+1,f,c
  3342  001FAC  D000               	goto	l6965
  3343  001FAE                     l6965:
  3344  001FAE  5021               	movf	___awmod@divisor,w,c
  3345  001FB0  1022               	iorwf	___awmod@divisor+1,w,c
  3346  001FB2  B4D8               	btfsc	status,2,c
  3347  001FB4  D01D               	goto	l6981
  3348  001FB6  0E01               	movlw	1
  3349  001FB8  6E23               	movwf	___awmod@counter,c
  3350  001FBA  D005               	goto	l6971
  3351  001FBC                     l6969:
  3352  001FBC  90D8               	bcf	status,0,c
  3353  001FBE  3621               	rlcf	___awmod@divisor,f,c
  3354  001FC0  3622               	rlcf	___awmod@divisor+1,f,c
  3355  001FC2  2A23               	incf	___awmod@counter,f,c
  3356  001FC4  D000               	goto	l6971
  3357  001FC6                     l6971:
  3358  001FC6  BE22               	btfsc	___awmod@divisor+1,7,c
  3359  001FC8  D002               	goto	l6973
  3360  001FCA  D7F8               	goto	l6969
  3361  001FCC  D000               	goto	l6973
  3362  001FCE                     l6973:
  3363  001FCE  5021               	movf	___awmod@divisor,w,c
  3364  001FD0  5C1F               	subwf	___awmod@dividend,w,c
  3365  001FD2  5022               	movf	___awmod@divisor+1,w,c
  3366  001FD4  5820               	subwfb	___awmod@dividend+1,w,c
  3367  001FD6  A0D8               	btfss	status,0,c
  3368  001FD8  D005               	goto	l6977
  3369  001FDA  5021               	movf	___awmod@divisor,w,c
  3370  001FDC  5E1F               	subwf	___awmod@dividend,f,c
  3371  001FDE  5022               	movf	___awmod@divisor+1,w,c
  3372  001FE0  5A20               	subwfb	___awmod@dividend+1,f,c
  3373  001FE2  D000               	goto	l6977
  3374  001FE4                     l6977:
  3375  001FE4  90D8               	bcf	status,0,c
  3376  001FE6  3222               	rrcf	___awmod@divisor+1,f,c
  3377  001FE8  3221               	rrcf	___awmod@divisor,f,c
  3378  001FEA  2E23               	decfsz	___awmod@counter,f,c
  3379  001FEC  D7F0               	goto	l6973
  3380  001FEE  D000               	goto	l6981
  3381  001FF0                     l6981:
  3382  001FF0  5024               	movf	___awmod@sign,w,c
  3383  001FF2  B4D8               	btfsc	status,2,c
  3384  001FF4  D005               	goto	l6985
  3385  001FF6  6C1F               	negf	___awmod@dividend,c
  3386  001FF8  1E20               	comf	___awmod@dividend+1,f,c
  3387  001FFA  B0D8               	btfsc	status,0,c
  3388  001FFC  2A20               	incf	___awmod@dividend+1,f,c
  3389  001FFE  D000               	goto	l6985
  3390  002000                     l6985:
  3391  002000  C01F  F01F         	movff	___awmod@dividend,?___awmod
  3392  002004  C020  F020         	movff	___awmod@dividend+1,?___awmod+1
  3393  002008  D000               	goto	l1179
  3394  00200A                     l1179:
  3395  00200A  0012               	return		;funcret
  3396  00200C                     __end_of___awmod:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           intcon2	equ	0xFF1
  3406                           postinc0	equ	0xFEE
  3407                           wreg	equ	0xFE8
  3408                           postdec1	equ	0xFE5
  3409                           fsr1l	equ	0xFE1
  3410                           indf2	equ	0xFDF
  3411                           postinc2	equ	0xFDE
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function _Toggle_Fan *****************
  3417 ;; Defined at:
  3418 ;;		line 31 in file "Fan_Support.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;		None
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;		None               void
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;Total ram usage:        0 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    7
  3439 ;; This function calls:
  3440 ;;		_Turn_Off_Fan
  3441 ;;		_Turn_On_Fan
  3442 ;; This function is called by:
  3443 ;;		_main
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text4
  3448  00294E                     __ptext4:
  3449                           	opt stack 0
  3450  00294E                     _Toggle_Fan:
  3451                           	opt stack 23
  3452                           
  3453                           ;Fan_Support.c: 33: if (FAN==0)
  3454                           
  3455                           ;incstack = 0
  3456  00294E  504F               	movf	_FAN,w,c
  3457  002950  A4D8               	btfss	status,2,c
  3458  002952  D003               	goto	l7001
  3459                           
  3460                           ;Fan_Support.c: 34: {
  3461                           ;Fan_Support.c: 35: Turn_On_Fan();
  3462  002954  EC02  F015         	call	_Turn_On_Fan	;wreg free
  3463                           
  3464                           ;Fan_Support.c: 36: }
  3465  002958  D003               	goto	l42
  3466  00295A                     l7001:
  3467                           
  3468                           ;Fan_Support.c: 37: else
  3469                           ;Fan_Support.c: 38: {
  3470                           ;Fan_Support.c: 39: Turn_Off_Fan();
  3471  00295A  EC2B  F015         	call	_Turn_Off_Fan	;wreg free
  3472  00295E  D000               	goto	l42
  3473  002960                     l42:
  3474  002960  0012               	return		;funcret
  3475  002962                     __end_of_Toggle_Fan:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           intcon	equ	0xFF2
  3484                           intcon2	equ	0xFF1
  3485                           postinc0	equ	0xFEE
  3486                           wreg	equ	0xFE8
  3487                           postdec1	equ	0xFE5
  3488                           fsr1l	equ	0xFE1
  3489                           indf2	equ	0xFDF
  3490                           postinc2	equ	0xFDE
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _Turn_On_Fan *****************
  3496 ;; Defined at:
  3497 ;;		line 49 in file "Fan_Support.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;		None
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;Total ram usage:        0 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    6
  3518 ;; This function calls:
  3519 ;;		_do_update_pwm
  3520 ;; This function is called by:
  3521 ;;		_Toggle_Fan
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text5
  3526  002A04                     __ptext5:
  3527                           	opt stack 0
  3528  002A04                     _Turn_On_Fan:
  3529                           	opt stack 23
  3530                           
  3531                           ;Fan_Support.c: 51: FAN=1;
  3532                           
  3533                           ;incstack = 0
  3534  002A04  0E01               	movlw	1
  3535  002A06  6E4F               	movwf	_FAN,c
  3536                           
  3537                           ;Fan_Support.c: 52: do_update_pwm(duty_cycle);
  3538  002A08  505B               	movf	_duty_cycle,w,c
  3539  002A0A  ECD5  F00E         	call	_do_update_pwm
  3540                           
  3541                           ;Fan_Support.c: 53: PORTBbits.RB4=1;
  3542  002A0E  8881               	bsf	3969,4,c	;volatile
  3543  002A10  0012               	return		;funcret
  3544  002A12                     __end_of_Turn_On_Fan:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           intcon	equ	0xFF2
  3553                           intcon2	equ	0xFF1
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           fsr1l	equ	0xFE1
  3558                           indf2	equ	0xFDF
  3559                           postinc2	equ	0xFDE
  3560                           fsr2h	equ	0xFDA
  3561                           fsr2l	equ	0xFD9
  3562                           status	equ	0xFD8
  3563                           
  3564 ;; *************** function _Turn_Off_Fan *****************
  3565 ;; Defined at:
  3566 ;;		line 43 in file "Fan_Support.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;		None
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;		None
  3571 ;; Return value:  Size  Location     Type
  3572 ;;		None               void
  3573 ;; Registers used:
  3574 ;;		wreg, status,2
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;Total ram usage:        0 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    3
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_Toggle_Fan
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text6
  3595  002A56                     __ptext6:
  3596                           	opt stack 0
  3597  002A56                     _Turn_Off_Fan:
  3598                           	opt stack 26
  3599                           
  3600                           ;Fan_Support.c: 45: FAN=0;
  3601                           
  3602                           ;incstack = 0
  3603  002A56  0E00               	movlw	0
  3604  002A58  6E4F               	movwf	_FAN,c
  3605                           
  3606                           ;Fan_Support.c: 46: PORTBbits.RB4=0;
  3607  002A5A  9881               	bcf	3969,4,c	;volatile
  3608  002A5C  0012               	return		;funcret
  3609  002A5E                     __end_of_Turn_Off_Fan:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           intcon2	equ	0xFF1
  3619                           postinc0	equ	0xFEE
  3620                           wreg	equ	0xFE8
  3621                           postdec1	equ	0xFE5
  3622                           fsr1l	equ	0xFE1
  3623                           indf2	equ	0xFDF
  3624                           postinc2	equ	0xFDE
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function _Set_RPM_RGB *****************
  3630 ;; Defined at:
  3631 ;;		line 111 in file "Fan_Support.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  rpm             2   30[COMRAM] int 
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  RPM             2   32[COMRAM] int 
  3636 ;; Return value:  Size  Location     Type
  3637 ;;		None               void
  3638 ;; Registers used:
  3639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;Total ram usage:        4 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    4
  3652 ;; This function calls:
  3653 ;;		___awdiv
  3654 ;; This function is called by:
  3655 ;;		_main
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text7
  3660  00258E                     __ptext7:
  3661                           	opt stack 0
  3662  00258E                     _Set_RPM_RGB:
  3663                           	opt stack 26
  3664                           
  3665                           ;Fan_Support.c: 113: int RPM= (rpm/500);
  3666                           
  3667                           ;incstack = 0
  3668  00258E  C01F  F017         	movff	Set_RPM_RGB@rpm,___awdiv@dividend
  3669  002592  C020  F018         	movff	Set_RPM_RGB@rpm+1,___awdiv@dividend+1
  3670  002596  0E01               	movlw	1
  3671  002598  6E1A               	movwf	___awdiv@divisor+1,c
  3672  00259A  0EF4               	movlw	244
  3673  00259C  6E19               	movwf	___awdiv@divisor,c
  3674  00259E  EC36  F00F         	call	___awdiv	;wreg free
  3675  0025A2  C017  F021         	movff	?___awdiv,Set_RPM_RGB@RPM
  3676  0025A6  C018  F022         	movff	?___awdiv+1,Set_RPM_RGB@RPM+1
  3677                           
  3678                           ;Fan_Support.c: 114: if (rpm < 1)
  3679  0025AA  BE20               	btfsc	Set_RPM_RGB@rpm+1,7,c
  3680  0025AC  D005               	goto	l7043
  3681  0025AE  5020               	movf	Set_RPM_RGB@rpm+1,w,c
  3682  0025B0  E105               	bnz	l7045
  3683  0025B2  041F               	decf	Set_RPM_RGB@rpm,w,c
  3684  0025B4  B0D8               	btfsc	status,0,c
  3685  0025B6  D002               	goto	l7045
  3686  0025B8                     l7043:
  3687                           
  3688                           ;Fan_Support.c: 115: PORTD = 0xF0;
  3689  0025B8  0EF0               	movlw	240
  3690  0025BA  D007               	goto	L4
  3691  0025BC                     l7045:
  3692                           
  3693                           ;Fan_Support.c: 116: else
  3694                           ;Fan_Support.c: 117: PORTD = D2[RPM];
  3695  0025BC  0EAF               	movlw	low _D2
  3696  0025BE  2421               	addwf	Set_RPM_RGB@RPM,w,c
  3697  0025C0  6ED9               	movwf	fsr2l,c
  3698  0025C2  0E00               	movlw	high _D2
  3699  0025C4  2022               	addwfc	Set_RPM_RGB@RPM+1,w,c
  3700  0025C6  6EDA               	movwf	fsr2h,c
  3701  0025C8  50DF               	movf	indf2,w,c
  3702  0025CA                     L4:
  3703  0025CA  6E83               	movwf	3971,c	;volatile
  3704  0025CC  D000               	goto	l71
  3705  0025CE                     l71:
  3706  0025CE  0012               	return		;funcret
  3707  0025D0                     __end_of_Set_RPM_RGB:
  3708                           	opt stack 0
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           intcon	equ	0xFF2
  3716                           intcon2	equ	0xFF1
  3717                           postinc0	equ	0xFEE
  3718                           wreg	equ	0xFE8
  3719                           postdec1	equ	0xFE5
  3720                           fsr1l	equ	0xFE1
  3721                           indf2	equ	0xFDF
  3722                           postinc2	equ	0xFDE
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _Set_DC_RGB *****************
  3728 ;; Defined at:
  3729 ;;		line 100 in file "Fan_Support.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  duty_cycle      2   30[COMRAM] int 
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;  d1color_I       2   33[COMRAM] int 
  3734 ;;  d1color_C       1   32[COMRAM] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;		None               void
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3744 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;Total ram usage:        5 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    4
  3751 ;; This function calls:
  3752 ;;		___awdiv
  3753 ;; This function is called by:
  3754 ;;		_main
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text8
  3759  002548                     __ptext8:
  3760                           	opt stack 0
  3761  002548                     _Set_DC_RGB:
  3762                           	opt stack 26
  3763                           
  3764                           ;Fan_Support.c: 102: int d1color_I;
  3765                           ;Fan_Support.c: 103: unsigned char d1color_C = 0x00;
  3766                           
  3767                           ;incstack = 0
  3768  002548  0E00               	movlw	0
  3769  00254A  6E21               	movwf	Set_DC_RGB@d1color_C,c
  3770                           
  3771                           ;Fan_Support.c: 104: d1color_I = duty_cycle / 10;
  3772  00254C  C01F  F017         	movff	Set_DC_RGB@duty_cycle,___awdiv@dividend
  3773  002550  C020  F018         	movff	Set_DC_RGB@duty_cycle+1,___awdiv@dividend+1
  3774  002554  0E00               	movlw	0
  3775  002556  6E1A               	movwf	___awdiv@divisor+1,c
  3776  002558  0E0A               	movlw	10
  3777  00255A  6E19               	movwf	___awdiv@divisor,c
  3778  00255C  EC36  F00F         	call	___awdiv	;wreg free
  3779  002560  C017  F022         	movff	?___awdiv,Set_DC_RGB@d1color_I
  3780  002564  C018  F023         	movff	?___awdiv+1,Set_DC_RGB@d1color_I+1
  3781                           
  3782                           ;Fan_Support.c: 105: if (d1color_I >7) d1color_I =7;
  3783  002568  BE23               	btfsc	Set_DC_RGB@d1color_I+1,7,c
  3784  00256A  D00B               	goto	l7035
  3785  00256C  5023               	movf	Set_DC_RGB@d1color_I+1,w,c
  3786  00256E  E104               	bnz	u6150
  3787  002570  0E08               	movlw	8
  3788  002572  5C22               	subwf	Set_DC_RGB@d1color_I,w,c
  3789  002574  A0D8               	btfss	status,0,c
  3790  002576  D005               	goto	l7035
  3791  002578                     u6150:
  3792  002578  0E00               	movlw	0
  3793  00257A  6E23               	movwf	Set_DC_RGB@d1color_I+1,c
  3794  00257C  0E07               	movlw	7
  3795  00257E  6E22               	movwf	Set_DC_RGB@d1color_I,c
  3796  002580  D000               	goto	l7035
  3797  002582                     l7035:
  3798                           
  3799                           ;Fan_Support.c: 107: d1color_C = (char) d1color_I << 1;
  3800  002582  5022               	movf	Set_DC_RGB@d1color_I,w,c
  3801  002584  2422               	addwf	Set_DC_RGB@d1color_I,w,c
  3802  002586  6E21               	movwf	Set_DC_RGB@d1color_C,c
  3803                           
  3804                           ;Fan_Support.c: 108: PORTA = d1color_C;
  3805  002588  C021  FF80         	movff	Set_DC_RGB@d1color_C,3968	;volatile
  3806  00258C  0012               	return		;funcret
  3807  00258E                     __end_of_Set_DC_RGB:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodh	equ	0xFF4
  3814                           prodl	equ	0xFF3
  3815                           intcon	equ	0xFF2
  3816                           intcon2	equ	0xFF1
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           postdec1	equ	0xFE5
  3820                           fsr1l	equ	0xFE1
  3821                           indf2	equ	0xFDF
  3822                           postinc2	equ	0xFDE
  3823                           fsr2h	equ	0xFDA
  3824                           fsr2l	equ	0xFD9
  3825                           status	equ	0xFD8
  3826                           
  3827 ;; *************** function ___awdiv *****************
  3828 ;; Defined at:
  3829 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  dividend        2   22[COMRAM] int 
  3832 ;;  divisor         2   24[COMRAM] int 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  quotient        2   28[COMRAM] int 
  3835 ;;  sign            1   27[COMRAM] unsigned char 
  3836 ;;  counter         1   26[COMRAM] unsigned char 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  2   22[COMRAM] int 
  3839 ;; Registers used:
  3840 ;;		wreg, status,2, status,0
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3847 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3850 ;;Total ram usage:        8 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    3
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_get_RPM
  3857 ;;		_Set_DC_RGB
  3858 ;;		_Set_RPM_RGB
  3859 ;;		_main
  3860 ;;		_Update_Screen
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text9
  3865  001E6C                     __ptext9:
  3866                           	opt stack 0
  3867  001E6C                     ___awdiv:
  3868                           	opt stack 26
  3869                           
  3870                           ;incstack = 0
  3871  001E6C  0E00               	movlw	0
  3872  001E6E  6E1C               	movwf	___awdiv@sign,c
  3873  001E70  AE1A               	btfss	___awdiv@divisor+1,7,c
  3874  001E72  D007               	goto	l6917
  3875  001E74  6C19               	negf	___awdiv@divisor,c
  3876  001E76  1E1A               	comf	___awdiv@divisor+1,f,c
  3877  001E78  B0D8               	btfsc	status,0,c
  3878  001E7A  2A1A               	incf	___awdiv@divisor+1,f,c
  3879  001E7C  0E01               	movlw	1
  3880  001E7E  6E1C               	movwf	___awdiv@sign,c
  3881  001E80  D000               	goto	l6917
  3882  001E82                     l6917:
  3883  001E82  AE18               	btfss	___awdiv@dividend+1,7,c
  3884  001E84  D007               	goto	l6923
  3885  001E86  6C17               	negf	___awdiv@dividend,c
  3886  001E88  1E18               	comf	___awdiv@dividend+1,f,c
  3887  001E8A  B0D8               	btfsc	status,0,c
  3888  001E8C  2A18               	incf	___awdiv@dividend+1,f,c
  3889  001E8E  0E01               	movlw	1
  3890  001E90  1A1C               	xorwf	___awdiv@sign,f,c
  3891  001E92  D000               	goto	l6923
  3892  001E94                     l6923:
  3893  001E94  0E00               	movlw	0
  3894  001E96  6E1E               	movwf	___awdiv@quotient+1,c
  3895  001E98  0E00               	movlw	0
  3896  001E9A  6E1D               	movwf	___awdiv@quotient,c
  3897  001E9C  5019               	movf	___awdiv@divisor,w,c
  3898  001E9E  101A               	iorwf	___awdiv@divisor+1,w,c
  3899  001EA0  B4D8               	btfsc	status,2,c
  3900  001EA2  D021               	goto	l6945
  3901  001EA4  0E01               	movlw	1
  3902  001EA6  6E1B               	movwf	___awdiv@counter,c
  3903  001EA8  D005               	goto	l6931
  3904  001EAA                     l6929:
  3905  001EAA  90D8               	bcf	status,0,c
  3906  001EAC  3619               	rlcf	___awdiv@divisor,f,c
  3907  001EAE  361A               	rlcf	___awdiv@divisor+1,f,c
  3908  001EB0  2A1B               	incf	___awdiv@counter,f,c
  3909  001EB2  D000               	goto	l6931
  3910  001EB4                     l6931:
  3911  001EB4  BE1A               	btfsc	___awdiv@divisor+1,7,c
  3912  001EB6  D002               	goto	l6933
  3913  001EB8  D7F8               	goto	l6929
  3914  001EBA  D000               	goto	l6933
  3915  001EBC                     l6933:
  3916  001EBC  90D8               	bcf	status,0,c
  3917  001EBE  361D               	rlcf	___awdiv@quotient,f,c
  3918  001EC0  361E               	rlcf	___awdiv@quotient+1,f,c
  3919  001EC2  5019               	movf	___awdiv@divisor,w,c
  3920  001EC4  5C17               	subwf	___awdiv@dividend,w,c
  3921  001EC6  501A               	movf	___awdiv@divisor+1,w,c
  3922  001EC8  5818               	subwfb	___awdiv@dividend+1,w,c
  3923  001ECA  A0D8               	btfss	status,0,c
  3924  001ECC  D006               	goto	l6941
  3925  001ECE  5019               	movf	___awdiv@divisor,w,c
  3926  001ED0  5E17               	subwf	___awdiv@dividend,f,c
  3927  001ED2  501A               	movf	___awdiv@divisor+1,w,c
  3928  001ED4  5A18               	subwfb	___awdiv@dividend+1,f,c
  3929  001ED6  801D               	bsf	___awdiv@quotient,0,c
  3930  001ED8  D000               	goto	l6941
  3931  001EDA                     l6941:
  3932  001EDA  90D8               	bcf	status,0,c
  3933  001EDC  321A               	rrcf	___awdiv@divisor+1,f,c
  3934  001EDE  3219               	rrcf	___awdiv@divisor,f,c
  3935  001EE0  2E1B               	decfsz	___awdiv@counter,f,c
  3936  001EE2  D7EC               	goto	l6933
  3937  001EE4  D000               	goto	l6945
  3938  001EE6                     l6945:
  3939  001EE6  501C               	movf	___awdiv@sign,w,c
  3940  001EE8  B4D8               	btfsc	status,2,c
  3941  001EEA  D005               	goto	l6949
  3942  001EEC  6C1D               	negf	___awdiv@quotient,c
  3943  001EEE  1E1E               	comf	___awdiv@quotient+1,f,c
  3944  001EF0  B0D8               	btfsc	status,0,c
  3945  001EF2  2A1E               	incf	___awdiv@quotient+1,f,c
  3946  001EF4  D000               	goto	l6949
  3947  001EF6                     l6949:
  3948  001EF6  C01D  F017         	movff	___awdiv@quotient,?___awdiv
  3949  001EFA  C01E  F018         	movff	___awdiv@quotient+1,?___awdiv+1
  3950  001EFE  D000               	goto	l1166
  3951  001F00                     l1166:
  3952  001F00  0012               	return		;funcret
  3953  001F02                     __end_of___awdiv:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           intcon	equ	0xFF2
  3962                           intcon2	equ	0xFF1
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postdec1	equ	0xFE5
  3966                           fsr1l	equ	0xFE1
  3967                           indf2	equ	0xFDF
  3968                           postinc2	equ	0xFDE
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _Initialize_Screen *****************
  3974 ;; Defined at:
  3975 ;;		line 34 in file "Main_Screen.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;		None
  3980 ;; Return value:  Size  Location     Type
  3981 ;;		None               void
  3982 ;; Registers used:
  3983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;Total ram usage:        0 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:   10
  3996 ;; This function calls:
  3997 ;;		_LCD_Reset
  3998 ;;		_TFT_GreenTab_Initialize
  3999 ;;		_drawCircle
  4000 ;;		_drawtext
  4001 ;;		_fillScreen
  4002 ;;		_strcpy
  4003 ;; This function is called by:
  4004 ;;		_main
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text10
  4009  000D4A                     __ptext10:
  4010                           	opt stack 0
  4011  000D4A                     _Initialize_Screen:
  4012                           	opt stack 20
  4013                           
  4014                           ;Main_Screen.c: 36: LCD_Reset();
  4015                           
  4016                           ;incstack = 0
  4017  000D4A  ECC5  F014         	call	_LCD_Reset	;wreg free
  4018                           
  4019                           ;Main_Screen.c: 37: TFT_GreenTab_Initialize();
  4020  000D4E  ECFD  F013         	call	_TFT_GreenTab_Initialize	;wreg free
  4021                           
  4022                           ;Main_Screen.c: 38: fillScreen(0x0000);
  4023  000D52  0E00               	movlw	0
  4024  000D54  6E25               	movwf	fillScreen@color+1,c
  4025  000D56  0E00               	movlw	0
  4026  000D58  6E24               	movwf	fillScreen@color,c
  4027  000D5A  EC69  F014         	call	_fillScreen	;wreg free
  4028                           
  4029                           ;Main_Screen.c: 39: txt = buffer;
  4030  000D5E  0E54               	movlw	low _buffer
  4031  000D60  6E4D               	movwf	_txt,c
  4032  000D62  0E01               	movlw	high _buffer
  4033  000D64  6E4E               	movwf	_txt+1,c
  4034                           
  4035                           ;Main_Screen.c: 40: strcpy(txt, "ECE3301L Spring 21-S2");
  4036  000D66  C04D  F011         	movff	_txt,strcpy@to
  4037  000D6A  C04E  F012         	movff	_txt+1,strcpy@to+1
  4038  000D6E  0E37               	movlw	low STR_9
  4039  000D70  6E13               	movwf	strcpy@from,c
  4040  000D72  0EFC               	movlw	high STR_9
  4041  000D74  6E14               	movwf	strcpy@from+1,c
  4042  000D76  EC84  F013         	call	_strcpy	;wreg free
  4043                           
  4044                           ;Main_Screen.c: 42: drawtext(1 , 1, txt, 0xFFFF , 0x0000, 1);
  4045  000D7A  0E01               	movlw	1
  4046  000D7C  6E39               	movwf	drawtext@y,c
  4047  000D7E  C04D  F03A         	movff	_txt,drawtext@_text
  4048  000D82  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4049  000D86  0EFF               	movlw	255
  4050  000D88  6E3D               	movwf	drawtext@color+1,c
  4051  000D8A  683C               	setf	drawtext@color,c
  4052  000D8C  0E00               	movlw	0
  4053  000D8E  6E3F               	movwf	drawtext@bg+1,c
  4054  000D90  0E00               	movlw	0
  4055  000D92  6E3E               	movwf	drawtext@bg,c
  4056  000D94  0E01               	movlw	1
  4057  000D96  6E40               	movwf	drawtext@size,c
  4058  000D98  0E01               	movlw	1
  4059  000D9A  EC18  F00B         	call	_drawtext
  4060                           
  4061                           ;Main_Screen.c: 44: strcpy(txt, "Temperature:");
  4062  000D9E  C04D  F011         	movff	_txt,strcpy@to
  4063  000DA2  C04E  F012         	movff	_txt+1,strcpy@to+1
  4064  000DA6  0ECF               	movlw	low STR_10
  4065  000DA8  6E13               	movwf	strcpy@from,c
  4066  000DAA  0EFC               	movlw	high STR_10
  4067  000DAC  6E14               	movwf	strcpy@from+1,c
  4068  000DAE  EC84  F013         	call	_strcpy	;wreg free
  4069                           
  4070                           ;Main_Screen.c: 45: drawtext(24 , 11 , txt, 0xF81F, 0x0000, 1);
  4071  000DB2  0E0B               	movlw	11
  4072  000DB4  6E39               	movwf	drawtext@y,c
  4073  000DB6  C04D  F03A         	movff	_txt,drawtext@_text
  4074  000DBA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4075  000DBE  0EF8               	movlw	248
  4076  000DC0  6E3D               	movwf	drawtext@color+1,c
  4077  000DC2  0E1F               	movlw	31
  4078  000DC4  6E3C               	movwf	drawtext@color,c
  4079  000DC6  0E00               	movlw	0
  4080  000DC8  6E3F               	movwf	drawtext@bg+1,c
  4081  000DCA  0E00               	movlw	0
  4082  000DCC  6E3E               	movwf	drawtext@bg,c
  4083  000DCE  0E01               	movlw	1
  4084  000DD0  6E40               	movwf	drawtext@size,c
  4085  000DD2  0E18               	movlw	24
  4086  000DD4  EC18  F00B         	call	_drawtext
  4087                           
  4088                           ;Main_Screen.c: 46: drawCircle(40, 23 , 2 , 0xFFE0);
  4089  000DD8  0E00               	movlw	0
  4090  000DDA  6E1D               	movwf	drawCircle@x0+1,c
  4091  000DDC  0E28               	movlw	40
  4092  000DDE  6E1C               	movwf	drawCircle@x0,c
  4093  000DE0  0E00               	movlw	0
  4094  000DE2  6E1F               	movwf	drawCircle@y0+1,c
  4095  000DE4  0E17               	movlw	23
  4096  000DE6  6E1E               	movwf	drawCircle@y0,c
  4097  000DE8  0E00               	movlw	0
  4098  000DEA  6E21               	movwf	drawCircle@r+1,c
  4099  000DEC  0E02               	movlw	2
  4100  000DEE  6E20               	movwf	drawCircle@r,c
  4101  000DF0  0EFF               	movlw	255
  4102  000DF2  6E23               	movwf	drawCircle@color+1,c
  4103  000DF4  0EE0               	movlw	224
  4104  000DF6  6E22               	movwf	drawCircle@color,c
  4105  000DF8  ECE0  F008         	call	_drawCircle	;wreg free
  4106                           
  4107                           ;Main_Screen.c: 47: strcpy(txt, "C/");
  4108  000DFC  C04D  F011         	movff	_txt,strcpy@to
  4109  000E00  C04E  F012         	movff	_txt+1,strcpy@to+1
  4110  000E04  0EF8               	movlw	low STR_11
  4111  000E06  6E13               	movwf	strcpy@from,c
  4112  000E08  0EFC               	movlw	high STR_11
  4113  000E0A  6E14               	movwf	strcpy@from+1,c
  4114  000E0C  EC84  F013         	call	_strcpy	;wreg free
  4115                           
  4116                           ;Main_Screen.c: 48: drawtext(45 , 23, txt, 0xFFE0 , 0x0000, 2);
  4117  000E10  0E17               	movlw	23
  4118  000E12  6E39               	movwf	drawtext@y,c
  4119  000E14  C04D  F03A         	movff	_txt,drawtext@_text
  4120  000E18  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4121  000E1C  0EFF               	movlw	255
  4122  000E1E  6E3D               	movwf	drawtext@color+1,c
  4123  000E20  0EE0               	movlw	224
  4124  000E22  6E3C               	movwf	drawtext@color,c
  4125  000E24  0E00               	movlw	0
  4126  000E26  6E3F               	movwf	drawtext@bg+1,c
  4127  000E28  0E00               	movlw	0
  4128  000E2A  6E3E               	movwf	drawtext@bg,c
  4129  000E2C  0E02               	movlw	2
  4130  000E2E  6E40               	movwf	drawtext@size,c
  4131  000E30  0E2D               	movlw	45
  4132  000E32  EC18  F00B         	call	_drawtext
  4133                           
  4134                           ;Main_Screen.c: 49: strcpy(txt, "F");
  4135  000E36  C04D  F011         	movff	_txt,strcpy@to
  4136  000E3A  C04E  F012         	movff	_txt+1,strcpy@to+1
  4137  000E3E  0E9D               	movlw	low (STR_20+15)
  4138  000E40  6E13               	movwf	strcpy@from,c
  4139  000E42  0EFC               	movlw	high (STR_20+15)
  4140  000E44  6E14               	movwf	strcpy@from+1,c
  4141  000E46  EC84  F013         	call	_strcpy	;wreg free
  4142                           
  4143                           ;Main_Screen.c: 50: drawCircle(110, 23 , 2 , 0xFFE0);
  4144  000E4A  0E00               	movlw	0
  4145  000E4C  6E1D               	movwf	drawCircle@x0+1,c
  4146  000E4E  0E6E               	movlw	110
  4147  000E50  6E1C               	movwf	drawCircle@x0,c
  4148  000E52  0E00               	movlw	0
  4149  000E54  6E1F               	movwf	drawCircle@y0+1,c
  4150  000E56  0E17               	movlw	23
  4151  000E58  6E1E               	movwf	drawCircle@y0,c
  4152  000E5A  0E00               	movlw	0
  4153  000E5C  6E21               	movwf	drawCircle@r+1,c
  4154  000E5E  0E02               	movlw	2
  4155  000E60  6E20               	movwf	drawCircle@r,c
  4156  000E62  0EFF               	movlw	255
  4157  000E64  6E23               	movwf	drawCircle@color+1,c
  4158  000E66  0EE0               	movlw	224
  4159  000E68  6E22               	movwf	drawCircle@color,c
  4160  000E6A  ECE0  F008         	call	_drawCircle	;wreg free
  4161                           
  4162                           ;Main_Screen.c: 51: drawtext(115 , 23, txt, 0xFFE0 , 0x0000, 2);
  4163  000E6E  0E17               	movlw	23
  4164  000E70  6E39               	movwf	drawtext@y,c
  4165  000E72  C04D  F03A         	movff	_txt,drawtext@_text
  4166  000E76  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4167  000E7A  0EFF               	movlw	255
  4168  000E7C  6E3D               	movwf	drawtext@color+1,c
  4169  000E7E  0EE0               	movlw	224
  4170  000E80  6E3C               	movwf	drawtext@color,c
  4171  000E82  0E00               	movlw	0
  4172  000E84  6E3F               	movwf	drawtext@bg+1,c
  4173  000E86  0E00               	movlw	0
  4174  000E88  6E3E               	movwf	drawtext@bg,c
  4175  000E8A  0E02               	movlw	2
  4176  000E8C  6E40               	movwf	drawtext@size,c
  4177  000E8E  0E73               	movlw	115
  4178  000E90  EC18  F00B         	call	_drawtext
  4179                           
  4180                           ;Main_Screen.c: 52: strcpy(txt, "Time");
  4181  000E94  C04D  F011         	movff	_txt,strcpy@to
  4182  000E98  C04E  F012         	movff	_txt+1,strcpy@to+1
  4183  000E9C  0EE2               	movlw	low STR_13
  4184  000E9E  6E13               	movwf	strcpy@from,c
  4185  000EA0  0EFC               	movlw	high STR_13
  4186  000EA2  6E14               	movwf	strcpy@from+1,c
  4187  000EA4  EC84  F013         	call	_strcpy	;wreg free
  4188                           
  4189                           ;Main_Screen.c: 53: drawtext(50 , 40 , txt, 0x001F , 0x0000, 1);
  4190  000EA8  0E28               	movlw	40
  4191  000EAA  6E39               	movwf	drawtext@y,c
  4192  000EAC  C04D  F03A         	movff	_txt,drawtext@_text
  4193  000EB0  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4194  000EB4  0E00               	movlw	0
  4195  000EB6  6E3D               	movwf	drawtext@color+1,c
  4196  000EB8  0E1F               	movlw	31
  4197  000EBA  6E3C               	movwf	drawtext@color,c
  4198  000EBC  0E00               	movlw	0
  4199  000EBE  6E3F               	movwf	drawtext@bg+1,c
  4200  000EC0  0E00               	movlw	0
  4201  000EC2  6E3E               	movwf	drawtext@bg,c
  4202  000EC4  0E01               	movlw	1
  4203  000EC6  6E40               	movwf	drawtext@size,c
  4204  000EC8  0E32               	movlw	50
  4205  000ECA  EC18  F00B         	call	_drawtext
  4206                           
  4207                           ;Main_Screen.c: 54: strcpy(txt, "Date");
  4208  000ECE  C04D  F011         	movff	_txt,strcpy@to
  4209  000ED2  C04E  F012         	movff	_txt+1,strcpy@to+1
  4210  000ED6  0EE7               	movlw	low STR_14
  4211  000ED8  6E13               	movwf	strcpy@from,c
  4212  000EDA  0EFC               	movlw	high STR_14
  4213  000EDC  6E14               	movwf	strcpy@from+1,c
  4214  000EDE  EC84  F013         	call	_strcpy	;wreg free
  4215                           
  4216                           ;Main_Screen.c: 55: drawtext(50 , 71 , txt, 0xF800 , 0x0000, 1);
  4217  000EE2  0E47               	movlw	71
  4218  000EE4  6E39               	movwf	drawtext@y,c
  4219  000EE6  C04D  F03A         	movff	_txt,drawtext@_text
  4220  000EEA  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4221  000EEE  0EF8               	movlw	248
  4222  000EF0  6E3D               	movwf	drawtext@color+1,c
  4223  000EF2  0E00               	movlw	0
  4224  000EF4  6E3C               	movwf	drawtext@color,c
  4225  000EF6  0E00               	movlw	0
  4226  000EF8  6E3F               	movwf	drawtext@bg+1,c
  4227  000EFA  0E00               	movlw	0
  4228  000EFC  6E3E               	movwf	drawtext@bg,c
  4229  000EFE  0E01               	movlw	1
  4230  000F00  6E40               	movwf	drawtext@size,c
  4231  000F02  0E32               	movlw	50
  4232  000F04  EC18  F00B         	call	_drawtext
  4233                           
  4234                           ;Main_Screen.c: 58: strcpy(txt, "  FAN");
  4235  000F08  C04D  F011         	movff	_txt,strcpy@to
  4236  000F0C  C04E  F012         	movff	_txt+1,strcpy@to+1
  4237  000F10  0EDC               	movlw	low STR_15
  4238  000F12  6E13               	movwf	strcpy@from,c
  4239  000F14  0EFC               	movlw	high STR_15
  4240  000F16  6E14               	movwf	strcpy@from+1,c
  4241  000F18  EC84  F013         	call	_strcpy	;wreg free
  4242                           
  4243                           ;Main_Screen.c: 59: drawtext(85, 120, txt, 0x001F , 0x0000, 1);
  4244  000F1C  0E78               	movlw	120
  4245  000F1E  6E39               	movwf	drawtext@y,c
  4246  000F20  C04D  F03A         	movff	_txt,drawtext@_text
  4247  000F24  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4248  000F28  0E00               	movlw	0
  4249  000F2A  6E3D               	movwf	drawtext@color+1,c
  4250  000F2C  0E1F               	movlw	31
  4251  000F2E  6E3C               	movwf	drawtext@color,c
  4252  000F30  0E00               	movlw	0
  4253  000F32  6E3F               	movwf	drawtext@bg+1,c
  4254  000F34  0E00               	movlw	0
  4255  000F36  6E3E               	movwf	drawtext@bg,c
  4256  000F38  0E01               	movlw	1
  4257  000F3A  6E40               	movwf	drawtext@size,c
  4258  000F3C  0E55               	movlw	85
  4259  000F3E  EC18  F00B         	call	_drawtext
  4260                           
  4261                           ;Main_Screen.c: 61: strcpy(txt, "DC");
  4262  000F42  C04D  F011         	movff	_txt,strcpy@to
  4263  000F46  C04E  F012         	movff	_txt+1,strcpy@to+1
  4264  000F4A  0EFB               	movlw	low STR_16
  4265  000F4C  6E13               	movwf	strcpy@from,c
  4266  000F4E  0EFC               	movlw	high STR_16
  4267  000F50  6E14               	movwf	strcpy@from+1,c
  4268  000F52  EC84  F013         	call	_strcpy	;wreg free
  4269                           
  4270                           ;Main_Screen.c: 62: drawtext(12, 140, txt, 0xFFFF , 0x0000, 1);
  4271  000F56  0E8C               	movlw	140
  4272  000F58  6E39               	movwf	drawtext@y,c
  4273  000F5A  C04D  F03A         	movff	_txt,drawtext@_text
  4274  000F5E  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4275  000F62  0EFF               	movlw	255
  4276  000F64  6E3D               	movwf	drawtext@color+1,c
  4277  000F66  683C               	setf	drawtext@color,c
  4278  000F68  0E00               	movlw	0
  4279  000F6A  6E3F               	movwf	drawtext@bg+1,c
  4280  000F6C  0E00               	movlw	0
  4281  000F6E  6E3E               	movwf	drawtext@bg,c
  4282  000F70  0E01               	movlw	1
  4283  000F72  6E40               	movwf	drawtext@size,c
  4284  000F74  0E0C               	movlw	12
  4285  000F76  EC18  F00B         	call	_drawtext
  4286                           
  4287                           ;Main_Screen.c: 64: strcpy(txt, "RPM");
  4288  000F7A  C04D  F011         	movff	_txt,strcpy@to
  4289  000F7E  C04E  F012         	movff	_txt+1,strcpy@to+1
  4290  000F82  0EF4               	movlw	low STR_17
  4291  000F84  6E13               	movwf	strcpy@from,c
  4292  000F86  0EFC               	movlw	high STR_17
  4293  000F88  6E14               	movwf	strcpy@from+1,c
  4294  000F8A  EC84  F013         	call	_strcpy	;wreg free
  4295                           
  4296                           ;Main_Screen.c: 65: drawtext(95, 140, txt, 0xFFFF , 0x0000 , 1);
  4297  000F8E  0E8C               	movlw	140
  4298  000F90  6E39               	movwf	drawtext@y,c
  4299  000F92  C04D  F03A         	movff	_txt,drawtext@_text
  4300  000F96  C04E  F03B         	movff	_txt+1,drawtext@_text+1
  4301  000F9A  0EFF               	movlw	255
  4302  000F9C  6E3D               	movwf	drawtext@color+1,c
  4303  000F9E  683C               	setf	drawtext@color,c
  4304  000FA0  0E00               	movlw	0
  4305  000FA2  6E3F               	movwf	drawtext@bg+1,c
  4306  000FA4  0E00               	movlw	0
  4307  000FA6  6E3E               	movwf	drawtext@bg,c
  4308  000FA8  0E01               	movlw	1
  4309  000FAA  6E40               	movwf	drawtext@size,c
  4310  000FAC  0E5F               	movlw	95
  4311  000FAE  EC18  F00B         	call	_drawtext
  4312  000FB2  0012               	return		;funcret
  4313  000FB4                     __end_of_Initialize_Screen:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           intcon	equ	0xFF2
  4322                           intcon2	equ	0xFF1
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _strcpy *****************
  4334 ;; Defined at:
  4335 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  to              2   16[COMRAM] PTR unsigned char 
  4338 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4339 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4340 ;;		 -> STR_19(4), STR_18(4), STR_17(4), STR_16(3), 
  4341 ;;		 -> STR_15(6), STR_14(5), STR_13(5), STR_12(2), 
  4342 ;;		 -> STR_11(3), STR_10(13), STR_9(22), 
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4345 ;;		 -> NULL(0), Fan_SW_Txt(4), buffer(33), 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  2   16[COMRAM] PTR unsigned char 
  4348 ;; Registers used:
  4349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4355 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;Total ram usage:        6 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    3
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_Initialize_Screen
  4366 ;;		_Update_Screen
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text11
  4371  002708                     __ptext11:
  4372                           	opt stack 0
  4373  002708                     _strcpy:
  4374                           	opt stack 26
  4375                           
  4376                           ;incstack = 0
  4377  002708  C011  F015         	movff	strcpy@to,strcpy@cp
  4378  00270C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4379  002710  D005               	goto	l6783
  4380  002712                     l6781:
  4381  002712  4A15               	infsnz	strcpy@cp,f,c
  4382  002714  2A16               	incf	strcpy@cp+1,f,c
  4383  002716  4A13               	infsnz	strcpy@from,f,c
  4384  002718  2A14               	incf	strcpy@from+1,f,c
  4385  00271A  D000               	goto	l6783
  4386  00271C                     l6783:
  4387  00271C  C013  FFF6         	movff	strcpy@from,tblptrl
  4388  002720  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4389  002724                     	if	0	;tblptru may be non-zero
  4390  002724                     	endif
  4391  002724                     	if	0	;tblptru may be non-zero
  4392  002724                     	endif
  4393  002724  C015  FFD9         	movff	strcpy@cp,fsr2l
  4394  002728  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4395  00272C  0008               	tblrd		*
  4396  00272E  CFF5 FFDF          	movff	tablat,indf2
  4397  002732  50DF               	movf	indf2,w,c
  4398  002734  A4D8               	btfss	status,2,c
  4399  002736  D7ED               	goto	l6781
  4400                           
  4401                           ;	Return value of _strcpy is never used
  4402  002738  0012               	return		;funcret
  4403  00273A                     __end_of_strcpy:
  4404                           	opt stack 0
  4405                           tblptru	equ	0xFF8
  4406                           tblptrh	equ	0xFF7
  4407                           tblptrl	equ	0xFF6
  4408                           tablat	equ	0xFF5
  4409                           prodh	equ	0xFF4
  4410                           prodl	equ	0xFF3
  4411                           intcon	equ	0xFF2
  4412                           intcon2	equ	0xFF1
  4413                           postinc0	equ	0xFEE
  4414                           wreg	equ	0xFE8
  4415                           postdec1	equ	0xFE5
  4416                           fsr1l	equ	0xFE1
  4417                           indf2	equ	0xFDF
  4418                           postinc2	equ	0xFDE
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _fillScreen *****************
  4424 ;; Defined at:
  4425 ;;		line 619 in file "ST7735_TFT.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  color           2   35[COMRAM] unsigned int 
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;		None
  4430 ;; Return value:  Size  Location     Type
  4431 ;;		None               void
  4432 ;; Registers used:
  4433 ;;		wreg, status,2, status,0, cstack
  4434 ;; Tracked objects:
  4435 ;;		On entry : 0/0
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4439 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;Total ram usage:        2 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    7
  4446 ;; This function calls:
  4447 ;;		_fillRectangle
  4448 ;; This function is called by:
  4449 ;;		_Initialize_Screen
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453                           	psect	text12
  4454  0028D2                     __ptext12:
  4455                           	opt stack 0
  4456  0028D2                     _fillScreen:
  4457                           	opt stack 22
  4458                           
  4459                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4460                           
  4461                           ;incstack = 0
  4462  0028D2  0E00               	movlw	0
  4463  0028D4  6E18               	movwf	fillRectangle@y,c
  4464  0028D6  0E80               	movlw	128
  4465  0028D8  6E19               	movwf	fillRectangle@w,c
  4466  0028DA  0EA0               	movlw	160
  4467  0028DC  6E1A               	movwf	fillRectangle@h,c
  4468  0028DE  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4469  0028E2  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4470  0028E6  0E00               	movlw	0
  4471  0028E8  EC04  F00E         	call	_fillRectangle
  4472  0028EC  0012               	return		;funcret
  4473  0028EE                     __end_of_fillScreen:
  4474                           	opt stack 0
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           intcon	equ	0xFF2
  4482                           intcon2	equ	0xFF1
  4483                           postinc0	equ	0xFEE
  4484                           wreg	equ	0xFE8
  4485                           postdec1	equ	0xFE5
  4486                           fsr1l	equ	0xFE1
  4487                           indf2	equ	0xFDF
  4488                           postinc2	equ	0xFDE
  4489                           fsr2h	equ	0xFDA
  4490                           fsr2l	equ	0xFD9
  4491                           status	equ	0xFD8
  4492                           
  4493 ;; *************** function _fillRectangle *****************
  4494 ;; Defined at:
  4495 ;;		line 503 in file "ST7735_TFT.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  x               1    wreg     unsigned char 
  4498 ;;  y               1   23[COMRAM] unsigned char 
  4499 ;;  w               1   24[COMRAM] unsigned char 
  4500 ;;  h               1   25[COMRAM] unsigned char 
  4501 ;;  color           2   26[COMRAM] unsigned int 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  x               1   34[COMRAM] unsigned char 
  4504 ;;  lo              1   33[COMRAM] unsigned char 
  4505 ;;  hi              1   32[COMRAM] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;		None               void
  4508 ;; Registers used:
  4509 ;;		wreg, status,2, status,0, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4515 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;Total ram usage:       12 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    6
  4522 ;; This function calls:
  4523 ;;		_setAddrWindow
  4524 ;;		_spiwrite
  4525 ;; This function is called by:
  4526 ;;		_fillScreen
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text13
  4531  001C08                     __ptext13:
  4532                           	opt stack 0
  4533  001C08                     _fillRectangle:
  4534                           	opt stack 22
  4535                           
  4536                           ;incstack = 0
  4537                           ;fillRectangle@x stored from wreg
  4538  001C08  6E23               	movwf	fillRectangle@x,c
  4539                           
  4540                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4541                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4542  001C0A  0E80               	movlw	128
  4543  001C0C  6023               	cpfslt	fillRectangle@x,c
  4544  001C0E  D069               	goto	l497
  4545  001C10  0E9F               	movlw	159
  4546  001C12  6418               	cpfsgt	fillRectangle@y,c
  4547  001C14  D001               	goto	l6293
  4548                           
  4549                           ;ST7735_TFT.c: 507: return;
  4550  001C16  D065               	goto	l497
  4551  001C18                     l6293:
  4552                           
  4553                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4554  001C18  0EFF               	movlw	255
  4555  001C1A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4556  001C1C  0EFF               	movlw	255
  4557  001C1E  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4558  001C20  5019               	movf	fillRectangle@w,w,c
  4559  001C22  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4560  001C26  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4561  001C28  261F               	addwf	??_fillRectangle+2,f,c
  4562  001C2A  0E00               	movlw	0
  4563  001C2C  2220               	addwfc	??_fillRectangle+3,f,c
  4564  001C2E  501D               	movf	??_fillRectangle,w,c
  4565  001C30  261F               	addwf	??_fillRectangle+2,f,c
  4566  001C32  501E               	movf	??_fillRectangle+1,w,c
  4567  001C34  2220               	addwfc	??_fillRectangle+3,f,c
  4568  001C36  BE20               	btfsc	??_fillRectangle+3,7,c
  4569  001C38  D00A               	goto	l498
  4570  001C3A  5020               	movf	??_fillRectangle+3,w,c
  4571  001C3C  E104               	bnz	u5120
  4572  001C3E  0E80               	movlw	128
  4573  001C40  5C1F               	subwf	??_fillRectangle+2,w,c
  4574  001C42  A0D8               	btfss	status,0,c
  4575  001C44  D004               	goto	l498
  4576  001C46                     u5120:
  4577                           
  4578                           ;ST7735_TFT.c: 509: w = 128 - x;
  4579  001C46  5023               	movf	fillRectangle@x,w,c
  4580  001C48  0800               	sublw	0
  4581  001C4A  0F80               	addlw	128
  4582  001C4C  6E19               	movwf	fillRectangle@w,c
  4583  001C4E                     l498:
  4584                           
  4585                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4586  001C4E  0EFF               	movlw	255
  4587  001C50  6E1D               	movwf	??_fillRectangle& (0+255),c
  4588  001C52  0EFF               	movlw	255
  4589  001C54  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4590  001C56  501A               	movf	fillRectangle@h,w,c
  4591  001C58  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4592  001C5C  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4593  001C5E  261F               	addwf	??_fillRectangle+2,f,c
  4594  001C60  0E00               	movlw	0
  4595  001C62  2220               	addwfc	??_fillRectangle+3,f,c
  4596  001C64  501D               	movf	??_fillRectangle,w,c
  4597  001C66  261F               	addwf	??_fillRectangle+2,f,c
  4598  001C68  501E               	movf	??_fillRectangle+1,w,c
  4599  001C6A  2220               	addwfc	??_fillRectangle+3,f,c
  4600  001C6C  BE20               	btfsc	??_fillRectangle+3,7,c
  4601  001C6E  D00B               	goto	l6299
  4602  001C70  5020               	movf	??_fillRectangle+3,w,c
  4603  001C72  E104               	bnz	u5130
  4604  001C74  0EA0               	movlw	160
  4605  001C76  5C1F               	subwf	??_fillRectangle+2,w,c
  4606  001C78  A0D8               	btfss	status,0,c
  4607  001C7A  D005               	goto	l6299
  4608  001C7C                     u5130:
  4609                           
  4610                           ;ST7735_TFT.c: 511: h = 160 - y;
  4611  001C7C  5018               	movf	fillRectangle@y,w,c
  4612  001C7E  0800               	sublw	0
  4613  001C80  0FA0               	addlw	160
  4614  001C82  6E1A               	movwf	fillRectangle@h,c
  4615  001C84  D000               	goto	l6299
  4616  001C86                     l6299:
  4617                           
  4618                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4619  001C86  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4620  001C8A  5023               	movf	fillRectangle@x,w,c
  4621  001C8C  2419               	addwf	fillRectangle@w,w,c
  4622  001C8E  6E1D               	movwf	??_fillRectangle& (0+255),c
  4623  001C90  041D               	decf	??_fillRectangle,w,c
  4624  001C92  6E15               	movwf	setAddrWindow@x1,c
  4625  001C94  5018               	movf	fillRectangle@y,w,c
  4626  001C96  241A               	addwf	fillRectangle@h,w,c
  4627  001C98  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4628  001C9A  041E               	decf	??_fillRectangle+1,w,c
  4629  001C9C  6E16               	movwf	setAddrWindow@y1,c
  4630  001C9E  5023               	movf	fillRectangle@x,w,c
  4631  001CA0  ECE8  F011         	call	_setAddrWindow
  4632                           
  4633                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4634  001CA4  501C               	movf	fillRectangle@color+1,w,c
  4635  001CA6  6E21               	movwf	fillRectangle@hi,c
  4636  001CA8  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4637                           
  4638                           ;ST7735_TFT.c: 514: PORTDbits.RD3 = 1;
  4639  001CAC  8683               	bsf	3971,3,c	;volatile
  4640                           
  4641                           ;ST7735_TFT.c: 515: PORTDbits.RD4 = 0;
  4642  001CAE  9883               	bcf	3971,4,c	;volatile
  4643                           
  4644                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4645  001CB0  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4646  001CB4                     l6311:
  4647  001CB4  5018               	movf	fillRectangle@y,w,c
  4648  001CB6  B4D8               	btfsc	status,2,c
  4649  001CB8  D013               	goto	l501
  4650  001CBA  D001               	goto	l500
  4651  001CBC  D011               	goto	l501
  4652  001CBE                     l500:
  4653                           
  4654                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4655  001CBE  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4656  001CC2                     l6315:
  4657  001CC2  5023               	movf	fillRectangle@x,w,c
  4658  001CC4  B4D8               	btfsc	status,2,c
  4659  001CC6  D00A               	goto	l6325
  4660  001CC8  D001               	goto	l6319
  4661  001CCA  D008               	goto	l6325
  4662  001CCC                     l6319:
  4663                           
  4664                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4665  001CCC  5021               	movf	fillRectangle@hi,w,c
  4666  001CCE  ECB1  F014         	call	_spiwrite
  4667                           
  4668                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4669  001CD2  5022               	movf	fillRectangle@lo,w,c
  4670  001CD4  ECB1  F014         	call	_spiwrite
  4671  001CD8  0623               	decf	fillRectangle@x,f,c
  4672  001CDA  D7F3               	goto	l6315
  4673  001CDC                     l6325:
  4674  001CDC  0618               	decf	fillRectangle@y,f,c
  4675  001CDE  D7EA               	goto	l6311
  4676  001CE0                     l501:
  4677                           
  4678                           ;ST7735_TFT.c: 521: }
  4679                           ;ST7735_TFT.c: 522: }
  4680                           ;ST7735_TFT.c: 523: PORTDbits.RD4 = 1;
  4681  001CE0  8883               	bsf	3971,4,c	;volatile
  4682  001CE2                     l497:
  4683  001CE2  0012               	return		;funcret
  4684  001CE4                     __end_of_fillRectangle:
  4685                           	opt stack 0
  4686                           tblptru	equ	0xFF8
  4687                           tblptrh	equ	0xFF7
  4688                           tblptrl	equ	0xFF6
  4689                           tablat	equ	0xFF5
  4690                           prodh	equ	0xFF4
  4691                           prodl	equ	0xFF3
  4692                           intcon	equ	0xFF2
  4693                           intcon2	equ	0xFF1
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           postdec1	equ	0xFE5
  4697                           fsr1l	equ	0xFE1
  4698                           indf2	equ	0xFDF
  4699                           postinc2	equ	0xFDE
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _drawtext *****************
  4705 ;; Defined at:
  4706 ;;		line 474 in file "ST7735_TFT.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  x               1    wreg     unsigned char 
  4709 ;;  y               1   56[COMRAM] unsigned char 
  4710 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4711 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  4712 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  4713 ;;		 -> buffer(33), 
  4714 ;;  color           2   59[COMRAM] unsigned int 
  4715 ;;  bg              2   61[COMRAM] unsigned int 
  4716 ;;  size            1   63[COMRAM] unsigned char 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  x               1    2[BANK0 ] unsigned char 
  4719 ;;  i               2    5[BANK0 ] unsigned int 
  4720 ;;  textsize        2    3[BANK0 ] unsigned int 
  4721 ;;  cursor_x        1    8[BANK0 ] unsigned char 
  4722 ;;  cursor_y        1    7[BANK0 ] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;		None               void
  4725 ;; Registers used:
  4726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4732 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4733 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4735 ;;      Totals:         8       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4736 ;;Total ram usage:       17 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    9
  4739 ;; This function calls:
  4740 ;;		_drawChar
  4741 ;;		_strlen
  4742 ;; This function is called by:
  4743 ;;		_Initialize_Screen
  4744 ;;		_Update_Screen
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	text14
  4749  001630                     __ptext14:
  4750                           	opt stack 0
  4751  001630                     _drawtext:
  4752                           	opt stack 20
  4753                           
  4754                           ;incstack = 0
  4755                           ;drawtext@x stored from wreg
  4756  001630  0100               	movlb	0	; () banked
  4757  001632  6FEB               	movwf	drawtext@x& (0+255),b
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4761                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4762                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4763  001634  C0EB  F0F1         	movff	drawtext@x,drawtext@cursor_x
  4764                           
  4765                           ; BSR set to: 0
  4766  001638  C039  F0F0         	movff	drawtext@y,drawtext@cursor_y
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4770  00163C  C03A  F011         	movff	drawtext@_text,strlen@s
  4771  001640  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4772  001644  EC27  F013         	call	_strlen	;wreg free
  4773  001648  C011  F0EC         	movff	?_strlen,drawtext@textsize
  4774  00164C  C012  F0ED         	movff	?_strlen+1,drawtext@textsize+1
  4775                           
  4776                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4777  001650  0E00               	movlw	0
  4778  001652  0100               	movlb	0	; () banked
  4779  001654  6FEF               	movwf	(drawtext@i+1)& (0+255),b
  4780  001656  0E00               	movlw	0
  4781  001658  6FEE               	movwf	drawtext@i& (0+255),b
  4782  00165A  D06A               	goto	l6819
  4783  00165C                     l6793:
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4787  00165C  506F               	movf	_wrap,w,c
  4788  00165E  B4D8               	btfsc	status,2,c
  4789  001660  D03A               	goto	l6809
  4790                           
  4791                           ; BSR set to: 0
  4792  001662  5040               	movf	drawtext@size,w,c
  4793  001664  0D05               	mullw	5
  4794  001666  0100               	movlb	0	; () banked
  4795  001668  51F1               	movf	drawtext@cursor_x& (0+255),w,b
  4796  00166A  0100               	movlb	0	; () banked
  4797  00166C  6FE9               	movwf	??_drawtext& (0+255),b
  4798  00166E  6BEA               	clrf	(??_drawtext+1)& (0+255),b
  4799  001670  50F3               	movf	prodl,w,c
  4800  001672  0100               	movlb	0	; () banked
  4801  001674  27E9               	addwf	??_drawtext& (0+255),f,b
  4802  001676  50F4               	movf	prodh,w,c
  4803  001678  0100               	movlb	0	; () banked
  4804  00167A  23EA               	addwfc	(??_drawtext+1)& (0+255),f,b
  4805  00167C  0100               	movlb	0	; () banked
  4806  00167E  BFEA               	btfsc	(??_drawtext+1)& (0+255),7,b
  4807  001680  D02A               	goto	l6809
  4808  001682  0100               	movlb	0	; () banked
  4809  001684  51EA               	movf	(??_drawtext+1)& (0+255),w,b
  4810  001686  E105               	bnz	u5890
  4811  001688  0E81               	movlw	129
  4812  00168A  0100               	movlb	0	; () banked
  4813  00168C  5DE9               	subwf	??_drawtext& (0+255),w,b
  4814  00168E  A0D8               	btfss	status,0,c
  4815  001690  D022               	goto	l6809
  4816  001692                     u5890:
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4820  001692  0E00               	movlw	0
  4821  001694  0100               	movlb	0	; () banked
  4822  001696  6FF1               	movwf	drawtext@cursor_x& (0+255),b
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4826  001698  5040               	movf	drawtext@size,w,c
  4827  00169A  0D07               	mullw	7
  4828  00169C  50F3               	movf	prodl,w,c
  4829  00169E  0100               	movlb	0	; () banked
  4830  0016A0  25F0               	addwf	drawtext@cursor_y& (0+255),w,b
  4831  0016A2  0F03               	addlw	3
  4832  0016A4  0100               	movlb	0	; () banked
  4833  0016A6  6FF0               	movwf	drawtext@cursor_y& (0+255),b
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4837  0016A8  0EA0               	movlw	160
  4838  0016AA  0100               	movlb	0	; () banked
  4839  0016AC  65F0               	cpfsgt	drawtext@cursor_y& (0+255),b
  4840  0016AE  D004               	goto	l6805
  4841                           
  4842                           ; BSR set to: 0
  4843  0016B0  0EA0               	movlw	160
  4844  0016B2  0100               	movlb	0	; () banked
  4845  0016B4  6FF0               	movwf	drawtext@cursor_y& (0+255),b
  4846  0016B6  D000               	goto	l6805
  4847  0016B8                     l6805:
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4851  0016B8  0100               	movlb	0	; () banked
  4852  0016BA  51EE               	movf	drawtext@i& (0+255),w,b
  4853  0016BC  243A               	addwf	drawtext@_text,w,c
  4854  0016BE  6ED9               	movwf	fsr2l,c
  4855  0016C0  0100               	movlb	0	; () banked
  4856  0016C2  51EF               	movf	(drawtext@i+1)& (0+255),w,b
  4857  0016C4  203B               	addwfc	drawtext@_text+1,w,c
  4858  0016C6  6EDA               	movwf	fsr2h,c
  4859  0016C8  0E20               	movlw	32
  4860  0016CA  18DE               	xorwf	postinc2,w,c
  4861  0016CC  B4D8               	btfsc	status,2,c
  4862  0016CE  D02C               	goto	l6817
  4863  0016D0  D002               	goto	l6809
  4864                           
  4865                           ; BSR set to: 0
  4866  0016D2  D02A               	goto	l6817
  4867                           
  4868                           ; BSR set to: 0
  4869  0016D4  D000               	goto	l6809
  4870  0016D6                     l6809:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4874  0016D6  C0F0  F02E         	movff	drawtext@cursor_y,drawChar@y
  4875  0016DA  0100               	movlb	0	; () banked
  4876  0016DC  51EE               	movf	drawtext@i& (0+255),w,b
  4877  0016DE  243A               	addwf	drawtext@_text,w,c
  4878  0016E0  6ED9               	movwf	fsr2l,c
  4879  0016E2  0100               	movlb	0	; () banked
  4880  0016E4  51EF               	movf	(drawtext@i+1)& (0+255),w,b
  4881  0016E6  203B               	addwfc	drawtext@_text+1,w,c
  4882  0016E8  6EDA               	movwf	fsr2h,c
  4883  0016EA  50DF               	movf	indf2,w,c
  4884  0016EC  6E2F               	movwf	drawChar@c,c
  4885  0016EE  C03C  F030         	movff	drawtext@color,drawChar@color
  4886  0016F2  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4887  0016F6  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4888  0016FA  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4889  0016FE  C040  F034         	movff	drawtext@size,drawChar@size
  4890  001702  0100               	movlb	0	; () banked
  4891  001704  51F1               	movf	drawtext@cursor_x& (0+255),w,b
  4892  001706  EC6D  F00A         	call	_drawChar
  4893                           
  4894                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4895  00170A  5040               	movf	drawtext@size,w,c
  4896  00170C  0D06               	mullw	6
  4897  00170E  50F3               	movf	prodl,w,c
  4898  001710  0100               	movlb	0	; () banked
  4899  001712  25F1               	addwf	drawtext@cursor_x& (0+255),w,b
  4900  001714  0100               	movlb	0	; () banked
  4901  001716  6FF1               	movwf	drawtext@cursor_x& (0+255),b
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4905  001718  0E80               	movlw	128
  4906  00171A  0100               	movlb	0	; () banked
  4907  00171C  65F1               	cpfsgt	drawtext@cursor_x& (0+255),b
  4908  00171E  D004               	goto	l6817
  4909                           
  4910                           ; BSR set to: 0
  4911  001720  0E80               	movlw	128
  4912  001722  0100               	movlb	0	; () banked
  4913  001724  6FF1               	movwf	drawtext@cursor_x& (0+255),b
  4914                           
  4915                           ; BSR set to: 0
  4916  001726  D000               	goto	l6817
  4917  001728                     l6817:
  4918                           
  4919                           ; BSR set to: 0
  4920  001728  0100               	movlb	0	; () banked
  4921  00172A  4BEE               	infsnz	drawtext@i& (0+255),f,b
  4922  00172C  2BEF               	incf	(drawtext@i+1)& (0+255),f,b
  4923  00172E  D000               	goto	l6819
  4924  001730                     l6819:
  4925                           
  4926                           ; BSR set to: 0
  4927  001730  0100               	movlb	0	; () banked
  4928  001732  51EC               	movf	drawtext@textsize& (0+255),w,b
  4929  001734  0100               	movlb	0	; () banked
  4930  001736  5DEE               	subwf	drawtext@i& (0+255),w,b
  4931  001738  0100               	movlb	0	; () banked
  4932  00173A  51ED               	movf	(drawtext@textsize+1)& (0+255),w,b
  4933  00173C  0100               	movlb	0	; () banked
  4934  00173E  59EF               	subwfb	(drawtext@i+1)& (0+255),w,b
  4935  001740  A0D8               	btfss	status,0,c
  4936  001742  D78C               	goto	l6793
  4937                           
  4938                           ; BSR set to: 0
  4939                           
  4940                           ; BSR set to: 0
  4941  001744  0012               	return		;funcret
  4942  001746                     __end_of_drawtext:
  4943                           	opt stack 0
  4944                           tblptru	equ	0xFF8
  4945                           tblptrh	equ	0xFF7
  4946                           tblptrl	equ	0xFF6
  4947                           tablat	equ	0xFF5
  4948                           prodh	equ	0xFF4
  4949                           prodl	equ	0xFF3
  4950                           intcon	equ	0xFF2
  4951                           intcon2	equ	0xFF1
  4952                           postinc0	equ	0xFEE
  4953                           wreg	equ	0xFE8
  4954                           postdec1	equ	0xFE5
  4955                           fsr1l	equ	0xFE1
  4956                           indf2	equ	0xFDF
  4957                           postinc2	equ	0xFDE
  4958                           fsr2h	equ	0xFDA
  4959                           fsr2l	equ	0xFD9
  4960                           status	equ	0xFD8
  4961                           
  4962 ;; *************** function _strlen *****************
  4963 ;; Defined at:
  4964 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4967 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  4968 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  4969 ;;		 -> buffer(33), 
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4972 ;;		 -> NULL(0), RPM_Txt(5), DC_Txt(4), Fan_SW_Txt(4), 
  4973 ;;		 -> date(9), time(9), tempF(4), tempC(4), 
  4974 ;;		 -> buffer(33), 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  2   16[COMRAM] unsigned int 
  4977 ;; Registers used:
  4978 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : 0/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4985 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4986 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;Total ram usage:        6 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    3
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_drawtext
  4995 ;; This function uses a non-reentrant model
  4996 ;;
  4997                           
  4998                           	psect	text15
  4999  00264E                     __ptext15:
  5000                           	opt stack 0
  5001  00264E                     _strlen:
  5002                           	opt stack 25
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;incstack = 0
  5006  00264E  C011  F015         	movff	strlen@s,strlen@cp
  5007  002652  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5008  002656  D003               	goto	l6283
  5009  002658                     l6281:
  5010  002658  4A15               	infsnz	strlen@cp,f,c
  5011  00265A  2A16               	incf	strlen@cp+1,f,c
  5012  00265C  D000               	goto	l6283
  5013  00265E                     l6283:
  5014  00265E  C015  FFD9         	movff	strlen@cp,fsr2l
  5015  002662  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5016  002666  50DF               	movf	indf2,w,c
  5017  002668  A4D8               	btfss	status,2,c
  5018  00266A  D7F6               	goto	l6281
  5019  00266C  C011  F013         	movff	strlen@s,??_strlen
  5020  002670  C012  F014         	movff	strlen@s+1,??_strlen+1
  5021  002674  1E13               	comf	??_strlen,f,c
  5022  002676  1E14               	comf	??_strlen+1,f,c
  5023  002678  4A13               	infsnz	??_strlen,f,c
  5024  00267A  2A14               	incf	??_strlen+1,f,c
  5025  00267C  5015               	movf	strlen@cp,w,c
  5026  00267E  2413               	addwf	??_strlen,w,c
  5027  002680  6E11               	movwf	?_strlen,c
  5028  002682  5016               	movf	strlen@cp+1,w,c
  5029  002684  2014               	addwfc	??_strlen+1,w,c
  5030  002686  6E12               	movwf	?_strlen+1,c
  5031  002688  D000               	goto	l1535
  5032  00268A                     l1535:
  5033  00268A  0012               	return		;funcret
  5034  00268C                     __end_of_strlen:
  5035                           	opt stack 0
  5036                           tblptru	equ	0xFF8
  5037                           tblptrh	equ	0xFF7
  5038                           tblptrl	equ	0xFF6
  5039                           tablat	equ	0xFF5
  5040                           prodh	equ	0xFF4
  5041                           prodl	equ	0xFF3
  5042                           intcon	equ	0xFF2
  5043                           intcon2	equ	0xFF1
  5044                           postinc0	equ	0xFEE
  5045                           wreg	equ	0xFE8
  5046                           postdec1	equ	0xFE5
  5047                           fsr1l	equ	0xFE1
  5048                           indf2	equ	0xFDF
  5049                           postinc2	equ	0xFDE
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _drawChar *****************
  5055 ;; Defined at:
  5056 ;;		line 447 in file "ST7735_TFT.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  x               1    wreg     unsigned char 
  5059 ;;  y               1   45[COMRAM] unsigned char 
  5060 ;;  c               1   46[COMRAM] unsigned char 
  5061 ;;  color           2   47[COMRAM] unsigned int 
  5062 ;;  bg              2   49[COMRAM] unsigned int 
  5063 ;;  size            1   51[COMRAM] unsigned char 
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;  x               1   53[COMRAM] unsigned char 
  5066 ;;  line            1   52[COMRAM] unsigned char 
  5067 ;;  i               1   55[COMRAM] unsigned char 
  5068 ;;  j               1   54[COMRAM] unsigned char 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;		None               void
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5078 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;Total ram usage:       11 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    8
  5085 ;; This function calls:
  5086 ;;		___wmul
  5087 ;;		_drawPixel
  5088 ;;		_fillRect
  5089 ;; This function is called by:
  5090 ;;		_drawtext
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           	psect	text16
  5095  0014DA                     __ptext16:
  5096                           	opt stack 0
  5097  0014DA                     _drawChar:
  5098                           	opt stack 20
  5099                           
  5100                           ;incstack = 0
  5101                           ;drawChar@x stored from wreg
  5102  0014DA  6E36               	movwf	drawChar@x,c
  5103                           
  5104                           ;ST7735_TFT.c: 449: char i, j;
  5105                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5106  0014DC  0E80               	movlw	128
  5107  0014DE  6036               	cpfslt	drawChar@x,c
  5108  0014E0  D0A6               	goto	l460
  5109  0014E2  0E9F               	movlw	159
  5110  0014E4  642E               	cpfsgt	drawChar@y,c
  5111  0014E6  D001               	goto	l6229
  5112                           
  5113                           ;ST7735_TFT.c: 451: return;
  5114  0014E8  D0A2               	goto	l460
  5115  0014EA                     l6229:
  5116                           
  5117                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5118  0014EA  5034               	movf	drawChar@size,w,c
  5119  0014EC  A4D8               	btfss	status,2,c
  5120  0014EE  D003               	goto	l6233
  5121  0014F0  0E01               	movlw	1
  5122  0014F2  6E34               	movwf	drawChar@size,c
  5123  0014F4  D000               	goto	l6233
  5124  0014F6                     l6233:
  5125                           
  5126                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5127  0014F6  0E1F               	movlw	31
  5128  0014F8  642F               	cpfsgt	drawChar@c,c
  5129  0014FA  D004               	goto	l6237
  5130  0014FC  0E7E               	movlw	126
  5131  0014FE  642F               	cpfsgt	drawChar@c,c
  5132  001500  D003               	goto	l462
  5133  001502  D000               	goto	l6237
  5134  001504                     l6237:
  5135                           
  5136                           ;ST7735_TFT.c: 454: c = '?';
  5137  001504  0E3F               	movlw	63
  5138  001506  6E2F               	movwf	drawChar@c,c
  5139  001508                     l462:
  5140                           
  5141                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5142  001508  0E00               	movlw	0
  5143  00150A  6E38               	movwf	drawChar@i,c
  5144  00150C                     l6239:
  5145  00150C  0E04               	movlw	4
  5146  00150E  6438               	cpfsgt	drawChar@i,c
  5147  001510  D001               	goto	l6243
  5148  001512  D08D               	goto	l460
  5149  001514                     l6243:
  5150                           
  5151                           ;ST7735_TFT.c: 456: unsigned char line;
  5152                           ;ST7735_TFT.c: 457: if(c < 'S')
  5153  001514  0E53               	movlw	83
  5154  001516  602F               	cpfslt	drawChar@c,c
  5155  001518  D015               	goto	l6247
  5156                           
  5157                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5158  00151A  0EE0               	movlw	224
  5159  00151C  242F               	addwf	drawChar@c,w,c
  5160  00151E  6E11               	movwf	___wmul@multiplier,c
  5161  001520  6A12               	clrf	___wmul@multiplier+1,c
  5162  001522  0EFF               	movlw	255
  5163  001524  2212               	addwfc	___wmul@multiplier+1,f,c
  5164  001526  0E00               	movlw	0
  5165  001528  6E14               	movwf	___wmul@multiplicand+1,c
  5166  00152A  0E05               	movlw	5
  5167  00152C  6E13               	movwf	___wmul@multiplicand,c
  5168  00152E  EC12  F014         	call	___wmul	;wreg free
  5169  001532  5038               	movf	drawChar@i,w,c
  5170  001534  2611               	addwf	?___wmul,f,c
  5171  001536  0E00               	movlw	0
  5172  001538  2212               	addwfc	?___wmul+1,f,c
  5173  00153A  0EED               	movlw	low _font
  5174  00153C  2411               	addwf	?___wmul,w,c
  5175  00153E  6EF6               	movwf	tblptrl,c
  5176  001540  0EF9               	movlw	high _font
  5177  001542  D014               	goto	L5
  5178  001544                     l6247:
  5179                           
  5180                           ;ST7735_TFT.c: 459: else
  5181                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5182  001544  0EAD               	movlw	173
  5183  001546  242F               	addwf	drawChar@c,w,c
  5184  001548  6E11               	movwf	___wmul@multiplier,c
  5185  00154A  6A12               	clrf	___wmul@multiplier+1,c
  5186  00154C  0EFF               	movlw	255
  5187  00154E  2212               	addwfc	___wmul@multiplier+1,f,c
  5188  001550  0E00               	movlw	0
  5189  001552  6E14               	movwf	___wmul@multiplicand+1,c
  5190  001554  0E05               	movlw	5
  5191  001556  6E13               	movwf	___wmul@multiplicand,c
  5192  001558  EC12  F014         	call	___wmul	;wreg free
  5193  00155C  5038               	movf	drawChar@i,w,c
  5194  00155E  2611               	addwf	?___wmul,f,c
  5195  001560  0E00               	movlw	0
  5196  001562  2212               	addwfc	?___wmul+1,f,c
  5197  001564  0EEC               	movlw	low _font2
  5198  001566  2411               	addwf	?___wmul,w,c
  5199  001568  6EF6               	movwf	tblptrl,c
  5200  00156A  0EFA               	movlw	high _font2
  5201  00156C                     L5:
  5202  00156C  2012               	addwfc	?___wmul+1,w,c
  5203  00156E  6EF7               	movwf	tblptrh,c
  5204  001570                     	if	0	;There are less than 3 active tblptr bytes
  5205  001570                     	endif
  5206  001570  0008               	tblrd		*
  5207  001572  CFF5 F035          	movff	tablat,drawChar@line
  5208  001576  D000               	goto	l6249
  5209  001578                     l6249:
  5210                           
  5211                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5212  001578  0E00               	movlw	0
  5213  00157A  6E37               	movwf	drawChar@j,c
  5214  00157C                     l6251:
  5215  00157C  0E06               	movlw	6
  5216  00157E  6437               	cpfsgt	drawChar@j,c
  5217  001580  D001               	goto	l469
  5218  001582  D053               	goto	l6275
  5219  001584                     l469:
  5220                           
  5221                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5222  001584  A035               	btfss	drawChar@line,0,c
  5223  001586  D023               	goto	l6261
  5224                           
  5225                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5226  001588  0434               	decf	drawChar@size,w,c
  5227  00158A  A4D8               	btfss	status,2,c
  5228  00158C  D00C               	goto	l6259
  5229  00158E  502E               	movf	drawChar@y,w,c
  5230  001590  2437               	addwf	drawChar@j,w,c
  5231  001592  6E18               	movwf	drawPixel@y,c
  5232  001594  C030  F019         	movff	drawChar@color,drawPixel@color
  5233  001598  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5234  00159C  5036               	movf	drawChar@x,w,c
  5235  00159E  2438               	addwf	drawChar@i,w,c
  5236  0015A0  ECB6  F013         	call	_drawPixel
  5237  0015A4  D03E               	goto	l6269
  5238  0015A6                     l6259:
  5239                           
  5240                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5241  0015A6  5037               	movf	drawChar@j,w,c
  5242  0015A8  0234               	mulwf	drawChar@size,c
  5243  0015AA  50F3               	movf	prodl,w,c
  5244  0015AC  242E               	addwf	drawChar@y,w,c
  5245  0015AE  6E23               	movwf	fillRect@y,c
  5246  0015B0  C034  F024         	movff	drawChar@size,fillRect@w
  5247  0015B4  C034  F025         	movff	drawChar@size,fillRect@h
  5248  0015B8  C030  F026         	movff	drawChar@color,fillRect@color
  5249  0015BC  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5250  0015C0  5038               	movf	drawChar@i,w,c
  5251  0015C2  0234               	mulwf	drawChar@size,c
  5252  0015C4  50F3               	movf	prodl,w,c
  5253  0015C6  2436               	addwf	drawChar@x,w,c
  5254  0015C8  EC5B  F012         	call	_fillRect
  5255                           
  5256                           ;ST7735_TFT.c: 465: }
  5257  0015CC  D02A               	goto	l6269
  5258  0015CE                     l6261:
  5259                           
  5260                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5261  0015CE  5030               	movf	drawChar@color,w,c
  5262  0015D0  1832               	xorwf	drawChar@bg,w,c
  5263  0015D2  E104               	bnz	u5050
  5264  0015D4  5031               	movf	drawChar@color+1,w,c
  5265  0015D6  1833               	xorwf	drawChar@bg+1,w,c
  5266  0015D8  B4D8               	btfsc	status,2,c
  5267  0015DA  D023               	goto	l6269
  5268  0015DC                     u5050:
  5269                           
  5270                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5271  0015DC  0434               	decf	drawChar@size,w,c
  5272  0015DE  A4D8               	btfss	status,2,c
  5273  0015E0  D00C               	goto	l6267
  5274  0015E2  502E               	movf	drawChar@y,w,c
  5275  0015E4  2437               	addwf	drawChar@j,w,c
  5276  0015E6  6E18               	movwf	drawPixel@y,c
  5277  0015E8  C032  F019         	movff	drawChar@bg,drawPixel@color
  5278  0015EC  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5279  0015F0  5036               	movf	drawChar@x,w,c
  5280  0015F2  2438               	addwf	drawChar@i,w,c
  5281  0015F4  ECB6  F013         	call	_drawPixel
  5282  0015F8  D014               	goto	l6269
  5283  0015FA                     l6267:
  5284                           
  5285                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5286  0015FA  5037               	movf	drawChar@j,w,c
  5287  0015FC  0234               	mulwf	drawChar@size,c
  5288  0015FE  50F3               	movf	prodl,w,c
  5289  001600  242E               	addwf	drawChar@y,w,c
  5290  001602  6E23               	movwf	fillRect@y,c
  5291  001604  C034  F024         	movff	drawChar@size,fillRect@w
  5292  001608  C034  F025         	movff	drawChar@size,fillRect@h
  5293  00160C  C032  F026         	movff	drawChar@bg,fillRect@color
  5294  001610  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5295  001614  5038               	movf	drawChar@i,w,c
  5296  001616  0234               	mulwf	drawChar@size,c
  5297  001618  50F3               	movf	prodl,w,c
  5298  00161A  2436               	addwf	drawChar@x,w,c
  5299  00161C  EC5B  F012         	call	_fillRect
  5300  001620  D000               	goto	l6269
  5301  001622                     l6269:
  5302  001622  2A37               	incf	drawChar@j,f,c
  5303  001624  90D8               	bcf	status,0,c
  5304  001626  3235               	rrcf	drawChar@line,f,c
  5305  001628  D7A9               	goto	l6251
  5306  00162A                     l6275:
  5307  00162A  2A38               	incf	drawChar@i,f,c
  5308  00162C  D76F               	goto	l6239
  5309  00162E                     l460:
  5310  00162E  0012               	return		;funcret
  5311  001630                     __end_of_drawChar:
  5312                           	opt stack 0
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           prodh	equ	0xFF4
  5318                           prodl	equ	0xFF3
  5319                           intcon	equ	0xFF2
  5320                           intcon2	equ	0xFF1
  5321                           postinc0	equ	0xFEE
  5322                           wreg	equ	0xFE8
  5323                           postdec1	equ	0xFE5
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           fsr2h	equ	0xFDA
  5328                           fsr2l	equ	0xFD9
  5329                           status	equ	0xFD8
  5330                           
  5331 ;; *************** function _fillRect *****************
  5332 ;; Defined at:
  5333 ;;		line 437 in file "ST7735_TFT.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  x               1    wreg     unsigned char 
  5336 ;;  y               1   34[COMRAM] unsigned char 
  5337 ;;  w               1   35[COMRAM] unsigned char 
  5338 ;;  h               1   36[COMRAM] unsigned char 
  5339 ;;  color           2   37[COMRAM] unsigned int 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  x               1   42[COMRAM] unsigned char 
  5342 ;;  i               2   43[COMRAM] int 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;		None               void
  5345 ;; Registers used:
  5346 ;;		wreg, status,2, status,0, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5352 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;Total ram usage:       11 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    7
  5359 ;; This function calls:
  5360 ;;		_drawFastVLine
  5361 ;; This function is called by:
  5362 ;;		_drawChar
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	text17
  5367  0024B6                     __ptext17:
  5368                           	opt stack 0
  5369  0024B6                     _fillRect:
  5370                           	opt stack 20
  5371                           
  5372                           ;incstack = 0
  5373                           ;fillRect@x stored from wreg
  5374  0024B6  6E2B               	movwf	fillRect@x,c
  5375                           
  5376                           ;ST7735_TFT.c: 439: signed int i;
  5377                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5378  0024B8  C02B  F02C         	movff	fillRect@x,fillRect@i
  5379  0024BC  6A2D               	clrf	fillRect@i+1,c
  5380  0024BE  D00E               	goto	l5867
  5381  0024C0                     l5863:
  5382                           
  5383                           ;ST7735_TFT.c: 442: {
  5384                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5385  0024C0  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5386  0024C4  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5387  0024C8  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5388  0024CC  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5389  0024D0  502C               	movf	fillRect@i,w,c
  5390  0024D2  EC81  F00F         	call	_drawFastVLine
  5391  0024D6  4A2C               	infsnz	fillRect@i,f,c
  5392  0024D8  2A2D               	incf	fillRect@i+1,f,c
  5393  0024DA  D000               	goto	l5867
  5394  0024DC                     l5867:
  5395  0024DC  5024               	movf	fillRect@w,w,c
  5396  0024DE  C02B  F028         	movff	fillRect@x,??_fillRect
  5397  0024E2  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5398  0024E4  2628               	addwf	??_fillRect,f,c
  5399  0024E6  0E00               	movlw	0
  5400  0024E8  2229               	addwfc	??_fillRect+1,f,c
  5401  0024EA  5028               	movf	??_fillRect,w,c
  5402  0024EC  5C2C               	subwf	fillRect@i,w,c
  5403  0024EE  502D               	movf	fillRect@i+1,w,c
  5404  0024F0  0A80               	xorlw	128
  5405  0024F2  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5406  0024F4  5029               	movf	??_fillRect+1,w,c
  5407  0024F6  0A80               	xorlw	128
  5408  0024F8  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5409  0024FA  A0D8               	btfss	status,0,c
  5410  0024FC  D7E1               	goto	l5863
  5411  0024FE  0012               	return		;funcret
  5412  002500                     __end_of_fillRect:
  5413                           	opt stack 0
  5414                           tblptru	equ	0xFF8
  5415                           tblptrh	equ	0xFF7
  5416                           tblptrl	equ	0xFF6
  5417                           tablat	equ	0xFF5
  5418                           prodh	equ	0xFF4
  5419                           prodl	equ	0xFF3
  5420                           intcon	equ	0xFF2
  5421                           intcon2	equ	0xFF1
  5422                           postinc0	equ	0xFEE
  5423                           wreg	equ	0xFE8
  5424                           postdec1	equ	0xFE5
  5425                           fsr1l	equ	0xFE1
  5426                           indf2	equ	0xFDF
  5427                           postinc2	equ	0xFDE
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _drawFastVLine *****************
  5433 ;; Defined at:
  5434 ;;		line 416 in file "ST7735_TFT.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  x               1    wreg     unsigned char 
  5437 ;;  y               1   23[COMRAM] unsigned char 
  5438 ;;  h               1   24[COMRAM] unsigned char 
  5439 ;;  color           2   25[COMRAM] unsigned int 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  x               1   33[COMRAM] unsigned char 
  5442 ;;  lo              1   32[COMRAM] unsigned char 
  5443 ;;  hi              1   31[COMRAM] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;		None               void
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;Total ram usage:       11 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    6
  5460 ;; This function calls:
  5461 ;;		_setAddrWindow
  5462 ;;		_spiwrite
  5463 ;; This function is called by:
  5464 ;;		_fillRect
  5465 ;;		_fillCircleHelper
  5466 ;;		_fillCircle
  5467 ;;		_drawRect
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text18
  5472  001F02                     __ptext18:
  5473                           	opt stack 0
  5474  001F02                     _drawFastVLine:
  5475                           	opt stack 20
  5476                           
  5477                           ;incstack = 0
  5478                           ;drawFastVLine@x stored from wreg
  5479  001F02  6E22               	movwf	drawFastVLine@x,c
  5480                           
  5481                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5482                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5483  001F04  0E80               	movlw	128
  5484  001F06  6022               	cpfslt	drawFastVLine@x,c
  5485  001F08  D03F               	goto	l444
  5486  001F0A  0E9F               	movlw	159
  5487  001F0C  6418               	cpfsgt	drawFastVLine@y,c
  5488  001F0E  D001               	goto	l5767
  5489                           
  5490                           ;ST7735_TFT.c: 420: return;
  5491  001F10  D03B               	goto	l444
  5492  001F12                     l5767:
  5493                           
  5494                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5495  001F12  0EFF               	movlw	255
  5496  001F14  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5497  001F16  0EFF               	movlw	255
  5498  001F18  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5499  001F1A  5019               	movf	drawFastVLine@h,w,c
  5500  001F1C  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5501  001F20  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5502  001F22  261E               	addwf	??_drawFastVLine+2,f,c
  5503  001F24  0E00               	movlw	0
  5504  001F26  221F               	addwfc	??_drawFastVLine+3,f,c
  5505  001F28  501C               	movf	??_drawFastVLine,w,c
  5506  001F2A  261E               	addwf	??_drawFastVLine+2,f,c
  5507  001F2C  501D               	movf	??_drawFastVLine+1,w,c
  5508  001F2E  221F               	addwfc	??_drawFastVLine+3,f,c
  5509  001F30  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5510  001F32  D00B               	goto	l5771
  5511  001F34  501F               	movf	??_drawFastVLine+3,w,c
  5512  001F36  E104               	bnz	u4460
  5513  001F38  0EA0               	movlw	160
  5514  001F3A  5C1E               	subwf	??_drawFastVLine+2,w,c
  5515  001F3C  A0D8               	btfss	status,0,c
  5516  001F3E  D005               	goto	l5771
  5517  001F40                     u4460:
  5518                           
  5519                           ;ST7735_TFT.c: 422: h = 160 - y;
  5520  001F40  5018               	movf	drawFastVLine@y,w,c
  5521  001F42  0800               	sublw	0
  5522  001F44  0FA0               	addlw	160
  5523  001F46  6E19               	movwf	drawFastVLine@h,c
  5524  001F48  D000               	goto	l5771
  5525  001F4A                     l5771:
  5526                           
  5527                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5528  001F4A  501B               	movf	drawFastVLine@color+1,w,c
  5529  001F4C  6E20               	movwf	drawFastVLine@hi,c
  5530  001F4E  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5531                           
  5532                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5533  001F52  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5534  001F56  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5535  001F5A  5018               	movf	drawFastVLine@y,w,c
  5536  001F5C  2419               	addwf	drawFastVLine@h,w,c
  5537  001F5E  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5538  001F60  041C               	decf	??_drawFastVLine,w,c
  5539  001F62  6E16               	movwf	setAddrWindow@y1,c
  5540  001F64  5022               	movf	drawFastVLine@x,w,c
  5541  001F66  ECE8  F011         	call	_setAddrWindow
  5542                           
  5543                           ;ST7735_TFT.c: 425: PORTDbits.RD3 = 1;
  5544  001F6A  8683               	bsf	3971,3,c	;volatile
  5545                           
  5546                           ;ST7735_TFT.c: 426: PORTDbits.RD4 = 0;
  5547  001F6C  9883               	bcf	3971,4,c	;volatile
  5548                           
  5549                           ;ST7735_TFT.c: 428: while (h--) {
  5550  001F6E  D007               	goto	l5783
  5551  001F70                     l5781:
  5552                           
  5553                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5554  001F70  5020               	movf	drawFastVLine@hi,w,c
  5555  001F72  ECB1  F014         	call	_spiwrite
  5556                           
  5557                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5558  001F76  5021               	movf	drawFastVLine@lo,w,c
  5559  001F78  ECB1  F014         	call	_spiwrite
  5560  001F7C  D000               	goto	l5783
  5561  001F7E                     l5783:
  5562  001F7E  0619               	decf	drawFastVLine@h,f,c
  5563  001F80  2819               	incf	drawFastVLine@h,w,c
  5564  001F82  A4D8               	btfss	status,2,c
  5565  001F84  D7F5               	goto	l5781
  5566                           
  5567                           ;ST7735_TFT.c: 431: }
  5568                           ;ST7735_TFT.c: 432: PORTDbits.RD4 = 1;
  5569  001F86  8883               	bsf	3971,4,c	;volatile
  5570  001F88                     l444:
  5571  001F88  0012               	return		;funcret
  5572  001F8A                     __end_of_drawFastVLine:
  5573                           	opt stack 0
  5574                           tblptru	equ	0xFF8
  5575                           tblptrh	equ	0xFF7
  5576                           tblptrl	equ	0xFF6
  5577                           tablat	equ	0xFF5
  5578                           prodh	equ	0xFF4
  5579                           prodl	equ	0xFF3
  5580                           intcon	equ	0xFF2
  5581                           intcon2	equ	0xFF1
  5582                           postinc0	equ	0xFEE
  5583                           wreg	equ	0xFE8
  5584                           postdec1	equ	0xFE5
  5585                           fsr1l	equ	0xFE1
  5586                           indf2	equ	0xFDF
  5587                           postinc2	equ	0xFDE
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function _drawCircle *****************
  5593 ;; Defined at:
  5594 ;;		line 528 in file "ST7735_TFT.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  x0              2   27[COMRAM] int 
  5597 ;;  y0              2   29[COMRAM] int 
  5598 ;;  r               2   31[COMRAM] int 
  5599 ;;  color           2   33[COMRAM] unsigned int 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  y               2   45[COMRAM] int 
  5602 ;;  x               2   43[COMRAM] int 
  5603 ;;  f               2   41[COMRAM] int 
  5604 ;;  ddF_y           2   39[COMRAM] int 
  5605 ;;  ddF_x           2   37[COMRAM] int 
  5606 ;; Return value:  Size  Location     Type
  5607 ;;		None               void
  5608 ;; Registers used:
  5609 ;;		wreg, status,2, status,0, cstack
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5615 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5616 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;Total ram usage:       20 bytes
  5620 ;; Hardware stack levels used:    1
  5621 ;; Hardware stack levels required when called:    7
  5622 ;; This function calls:
  5623 ;;		_drawPixel
  5624 ;; This function is called by:
  5625 ;;		_Initialize_Screen
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text19
  5630  0011C0                     __ptext19:
  5631                           	opt stack 0
  5632  0011C0                     _drawCircle:
  5633                           	opt stack 22
  5634                           
  5635                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  5636                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  5637                           
  5638                           ;incstack = 0
  5639  0011C0  C020  F024         	movff	drawCircle@r,??_drawCircle
  5640  0011C4  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  5641  0011C8  1E24               	comf	??_drawCircle,f,c
  5642  0011CA  1E25               	comf	??_drawCircle+1,f,c
  5643  0011CC  4A24               	infsnz	??_drawCircle,f,c
  5644  0011CE  2A25               	incf	??_drawCircle+1,f,c
  5645  0011D0  0E01               	movlw	1
  5646  0011D2  2424               	addwf	??_drawCircle,w,c
  5647  0011D4  6E2A               	movwf	drawCircle@f,c
  5648  0011D6  0E00               	movlw	0
  5649  0011D8  2025               	addwfc	??_drawCircle+1,w,c
  5650  0011DA  6E2B               	movwf	drawCircle@f+1,c
  5651  0011DC  0E00               	movlw	0
  5652  0011DE  6E27               	movwf	drawCircle@ddF_x+1,c
  5653  0011E0  0E01               	movlw	1
  5654  0011E2  6E26               	movwf	drawCircle@ddF_x,c
  5655  0011E4  C020  F024         	movff	drawCircle@r,??_drawCircle
  5656  0011E8  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  5657  0011EC  90D8               	bcf	status,0,c
  5658  0011EE  3624               	rlcf	??_drawCircle,f,c
  5659  0011F0  3625               	rlcf	??_drawCircle+1,f,c
  5660  0011F2  1E24               	comf	??_drawCircle,f,c
  5661  0011F4  1E25               	comf	??_drawCircle+1,f,c
  5662  0011F6  4A24               	infsnz	??_drawCircle,f,c
  5663  0011F8  2A25               	incf	??_drawCircle+1,f,c
  5664  0011FA  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  5665  0011FE  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  5666  001202  0E00               	movlw	0
  5667  001204  6E2D               	movwf	drawCircle@x+1,c
  5668  001206  0E00               	movlw	0
  5669  001208  6E2C               	movwf	drawCircle@x,c
  5670  00120A  C020  F02E         	movff	drawCircle@r,drawCircle@y
  5671  00120E  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  5672                           
  5673                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  5674  001212  501E               	movf	drawCircle@y0,w,c
  5675  001214  2420               	addwf	drawCircle@r,w,c
  5676  001216  6E18               	movwf	drawPixel@y,c
  5677  001218  C022  F019         	movff	drawCircle@color,drawPixel@color
  5678  00121C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5679  001220  501C               	movf	drawCircle@x0,w,c
  5680  001222  ECB6  F013         	call	_drawPixel
  5681                           
  5682                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  5683  001226  5020               	movf	drawCircle@r,w,c
  5684  001228  0800               	sublw	0
  5685  00122A  241E               	addwf	drawCircle@y0,w,c
  5686  00122C  6E18               	movwf	drawPixel@y,c
  5687  00122E  C022  F019         	movff	drawCircle@color,drawPixel@color
  5688  001232  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5689  001236  501C               	movf	drawCircle@x0,w,c
  5690  001238  ECB6  F013         	call	_drawPixel
  5691                           
  5692                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  5693  00123C  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  5694  001240  C022  F019         	movff	drawCircle@color,drawPixel@color
  5695  001244  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5696  001248  501C               	movf	drawCircle@x0,w,c
  5697  00124A  2420               	addwf	drawCircle@r,w,c
  5698  00124C  ECB6  F013         	call	_drawPixel
  5699                           
  5700                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  5701  001250  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  5702  001254  C022  F019         	movff	drawCircle@color,drawPixel@color
  5703  001258  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5704  00125C  5020               	movf	drawCircle@r,w,c
  5705  00125E  0800               	sublw	0
  5706  001260  241C               	addwf	drawCircle@x0,w,c
  5707  001262  ECB6  F013         	call	_drawPixel
  5708                           
  5709                           ;ST7735_TFT.c: 536: while (x < y) {
  5710  001266  D078               	goto	l6867
  5711  001268                     l6839:
  5712                           
  5713                           ;ST7735_TFT.c: 537: if (f >= 0) {
  5714  001268  BE2B               	btfsc	drawCircle@f+1,7,c
  5715  00126A  D00B               	goto	l508
  5716                           
  5717                           ;ST7735_TFT.c: 538: y--;
  5718  00126C  062E               	decf	drawCircle@y,f,c
  5719  00126E  A0D8               	btfss	status,0,c
  5720  001270  062F               	decf	drawCircle@y+1,f,c
  5721                           
  5722                           ;ST7735_TFT.c: 539: ddF_y += 2;
  5723  001272  0E02               	movlw	2
  5724  001274  2628               	addwf	drawCircle@ddF_y,f,c
  5725  001276  0E00               	movlw	0
  5726  001278  2229               	addwfc	drawCircle@ddF_y+1,f,c
  5727                           
  5728                           ;ST7735_TFT.c: 540: f += ddF_y;
  5729  00127A  5028               	movf	drawCircle@ddF_y,w,c
  5730  00127C  262A               	addwf	drawCircle@f,f,c
  5731  00127E  5029               	movf	drawCircle@ddF_y+1,w,c
  5732  001280  222B               	addwfc	drawCircle@f+1,f,c
  5733  001282                     l508:
  5734                           
  5735                           ;ST7735_TFT.c: 541: }
  5736                           ;ST7735_TFT.c: 542: x++;
  5737  001282  4A2C               	infsnz	drawCircle@x,f,c
  5738  001284  2A2D               	incf	drawCircle@x+1,f,c
  5739                           
  5740                           ;ST7735_TFT.c: 543: ddF_x += 2;
  5741  001286  0E02               	movlw	2
  5742  001288  2626               	addwf	drawCircle@ddF_x,f,c
  5743  00128A  0E00               	movlw	0
  5744  00128C  2227               	addwfc	drawCircle@ddF_x+1,f,c
  5745                           
  5746                           ;ST7735_TFT.c: 544: f += ddF_x;
  5747  00128E  5026               	movf	drawCircle@ddF_x,w,c
  5748  001290  262A               	addwf	drawCircle@f,f,c
  5749  001292  5027               	movf	drawCircle@ddF_x+1,w,c
  5750  001294  222B               	addwfc	drawCircle@f+1,f,c
  5751                           
  5752                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  5753  001296  501E               	movf	drawCircle@y0,w,c
  5754  001298  242E               	addwf	drawCircle@y,w,c
  5755  00129A  6E18               	movwf	drawPixel@y,c
  5756  00129C  C022  F019         	movff	drawCircle@color,drawPixel@color
  5757  0012A0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5758  0012A4  501C               	movf	drawCircle@x0,w,c
  5759  0012A6  242C               	addwf	drawCircle@x,w,c
  5760  0012A8  ECB6  F013         	call	_drawPixel
  5761                           
  5762                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  5763  0012AC  501E               	movf	drawCircle@y0,w,c
  5764  0012AE  242E               	addwf	drawCircle@y,w,c
  5765  0012B0  6E18               	movwf	drawPixel@y,c
  5766  0012B2  C022  F019         	movff	drawCircle@color,drawPixel@color
  5767  0012B6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5768  0012BA  502C               	movf	drawCircle@x,w,c
  5769  0012BC  0800               	sublw	0
  5770  0012BE  241C               	addwf	drawCircle@x0,w,c
  5771  0012C0  ECB6  F013         	call	_drawPixel
  5772                           
  5773                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  5774  0012C4  502E               	movf	drawCircle@y,w,c
  5775  0012C6  0800               	sublw	0
  5776  0012C8  241E               	addwf	drawCircle@y0,w,c
  5777  0012CA  6E18               	movwf	drawPixel@y,c
  5778  0012CC  C022  F019         	movff	drawCircle@color,drawPixel@color
  5779  0012D0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5780  0012D4  501C               	movf	drawCircle@x0,w,c
  5781  0012D6  242C               	addwf	drawCircle@x,w,c
  5782  0012D8  ECB6  F013         	call	_drawPixel
  5783                           
  5784                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  5785  0012DC  502E               	movf	drawCircle@y,w,c
  5786  0012DE  0800               	sublw	0
  5787  0012E0  241E               	addwf	drawCircle@y0,w,c
  5788  0012E2  6E18               	movwf	drawPixel@y,c
  5789  0012E4  C022  F019         	movff	drawCircle@color,drawPixel@color
  5790  0012E8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5791  0012EC  502C               	movf	drawCircle@x,w,c
  5792  0012EE  0800               	sublw	0
  5793  0012F0  241C               	addwf	drawCircle@x0,w,c
  5794  0012F2  ECB6  F013         	call	_drawPixel
  5795                           
  5796                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  5797  0012F6  501E               	movf	drawCircle@y0,w,c
  5798  0012F8  242C               	addwf	drawCircle@x,w,c
  5799  0012FA  6E18               	movwf	drawPixel@y,c
  5800  0012FC  C022  F019         	movff	drawCircle@color,drawPixel@color
  5801  001300  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5802  001304  501C               	movf	drawCircle@x0,w,c
  5803  001306  242E               	addwf	drawCircle@y,w,c
  5804  001308  ECB6  F013         	call	_drawPixel
  5805                           
  5806                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  5807  00130C  501E               	movf	drawCircle@y0,w,c
  5808  00130E  242C               	addwf	drawCircle@x,w,c
  5809  001310  6E18               	movwf	drawPixel@y,c
  5810  001312  C022  F019         	movff	drawCircle@color,drawPixel@color
  5811  001316  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5812  00131A  502E               	movf	drawCircle@y,w,c
  5813  00131C  0800               	sublw	0
  5814  00131E  241C               	addwf	drawCircle@x0,w,c
  5815  001320  ECB6  F013         	call	_drawPixel
  5816                           
  5817                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  5818  001324  502C               	movf	drawCircle@x,w,c
  5819  001326  0800               	sublw	0
  5820  001328  241E               	addwf	drawCircle@y0,w,c
  5821  00132A  6E18               	movwf	drawPixel@y,c
  5822  00132C  C022  F019         	movff	drawCircle@color,drawPixel@color
  5823  001330  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5824  001334  501C               	movf	drawCircle@x0,w,c
  5825  001336  242E               	addwf	drawCircle@y,w,c
  5826  001338  ECB6  F013         	call	_drawPixel
  5827                           
  5828                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  5829  00133C  502C               	movf	drawCircle@x,w,c
  5830  00133E  0800               	sublw	0
  5831  001340  241E               	addwf	drawCircle@y0,w,c
  5832  001342  6E18               	movwf	drawPixel@y,c
  5833  001344  C022  F019         	movff	drawCircle@color,drawPixel@color
  5834  001348  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  5835  00134C  502E               	movf	drawCircle@y,w,c
  5836  00134E  0800               	sublw	0
  5837  001350  241C               	addwf	drawCircle@x0,w,c
  5838  001352  ECB6  F013         	call	_drawPixel
  5839  001356  D000               	goto	l6867
  5840  001358                     l6867:
  5841  001358  502E               	movf	drawCircle@y,w,c
  5842  00135A  5C2C               	subwf	drawCircle@x,w,c
  5843  00135C  502D               	movf	drawCircle@x+1,w,c
  5844  00135E  0A80               	xorlw	128
  5845  001360  6E24               	movwf	??_drawCircle& (0+255),c
  5846  001362  502F               	movf	drawCircle@y+1,w,c
  5847  001364  0A80               	xorlw	128
  5848  001366  5824               	subwfb	??_drawCircle& (0+255),w,c
  5849  001368  A0D8               	btfss	status,0,c
  5850  00136A  D77E               	goto	l6839
  5851  00136C  0012               	return		;funcret
  5852  00136E                     __end_of_drawCircle:
  5853                           	opt stack 0
  5854                           tblptru	equ	0xFF8
  5855                           tblptrh	equ	0xFF7
  5856                           tblptrl	equ	0xFF6
  5857                           tablat	equ	0xFF5
  5858                           prodh	equ	0xFF4
  5859                           prodl	equ	0xFF3
  5860                           intcon	equ	0xFF2
  5861                           intcon2	equ	0xFF1
  5862                           postinc0	equ	0xFEE
  5863                           wreg	equ	0xFE8
  5864                           postdec1	equ	0xFE5
  5865                           fsr1l	equ	0xFE1
  5866                           indf2	equ	0xFDF
  5867                           postinc2	equ	0xFDE
  5868                           fsr2h	equ	0xFDA
  5869                           fsr2l	equ	0xFD9
  5870                           status	equ	0xFD8
  5871                           
  5872 ;; *************** function _drawPixel *****************
  5873 ;; Defined at:
  5874 ;;		line 407 in file "ST7735_TFT.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  x               1    wreg     unsigned char 
  5877 ;;  y               1   23[COMRAM] unsigned char 
  5878 ;;  color           2   24[COMRAM] unsigned int 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  x               1   26[COMRAM] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;		None               void
  5883 ;; Registers used:
  5884 ;;		wreg, status,2, status,0, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5890 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;Total ram usage:        4 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    6
  5897 ;; This function calls:
  5898 ;;		_setAddrWindow
  5899 ;;		_write_data
  5900 ;; This function is called by:
  5901 ;;		_drawChar
  5902 ;;		_drawCircle
  5903 ;;		_drawCircleHelper
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text20
  5908  00276C                     __ptext20:
  5909                           	opt stack 0
  5910  00276C                     _drawPixel:
  5911                           	opt stack 21
  5912                           
  5913                           ;incstack = 0
  5914                           ;drawPixel@x stored from wreg
  5915  00276C  6E1B               	movwf	drawPixel@x,c
  5916                           
  5917                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5918  00276E  0E80               	movlw	128
  5919  002770  601B               	cpfslt	drawPixel@x,c
  5920  002772  D013               	goto	l438
  5921  002774  0E9F               	movlw	159
  5922  002776  6418               	cpfsgt	drawPixel@y,c
  5923  002778  D001               	goto	l5855
  5924                           
  5925                           ;ST7735_TFT.c: 410: return;
  5926  00277A  D00F               	goto	l438
  5927  00277C                     l5855:
  5928                           
  5929                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5930  00277C  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5931  002780  281B               	incf	drawPixel@x,w,c
  5932  002782  6E15               	movwf	setAddrWindow@x1,c
  5933  002784  2818               	incf	drawPixel@y,w,c
  5934  002786  6E16               	movwf	setAddrWindow@y1,c
  5935  002788  501B               	movf	drawPixel@x,w,c
  5936  00278A  ECE8  F011         	call	_setAddrWindow
  5937                           
  5938                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5939  00278E  501A               	movf	drawPixel@color+1,w,c
  5940  002790  ECF2  F014         	call	_write_data
  5941                           
  5942                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5943  002794  5019               	movf	drawPixel@color,w,c
  5944  002796  ECF2  F014         	call	_write_data
  5945  00279A                     l438:
  5946  00279A  0012               	return		;funcret
  5947  00279C                     __end_of_drawPixel:
  5948                           	opt stack 0
  5949                           tblptru	equ	0xFF8
  5950                           tblptrh	equ	0xFF7
  5951                           tblptrl	equ	0xFF6
  5952                           tablat	equ	0xFF5
  5953                           prodh	equ	0xFF4
  5954                           prodl	equ	0xFF3
  5955                           intcon	equ	0xFF2
  5956                           intcon2	equ	0xFF1
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           postdec1	equ	0xFE5
  5960                           fsr1l	equ	0xFE1
  5961                           indf2	equ	0xFDF
  5962                           postinc2	equ	0xFDE
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function _setAddrWindow *****************
  5968 ;; Defined at:
  5969 ;;		line 392 in file "ST7735_TFT.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  x0              1    wreg     unsigned char 
  5972 ;;  y0              1   19[COMRAM] unsigned char 
  5973 ;;  x1              1   20[COMRAM] unsigned char 
  5974 ;;  y1              1   21[COMRAM] unsigned char 
  5975 ;; Auto vars:     Size  Location     Type
  5976 ;;  x0              1   22[COMRAM] unsigned char 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;		None               void
  5979 ;; Registers used:
  5980 ;;		wreg, status,2, status,0, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 0/0
  5983 ;;		On exit  : 0/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5986 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;Total ram usage:        4 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:    5
  5993 ;; This function calls:
  5994 ;;		_write_command
  5995 ;;		_write_data
  5996 ;; This function is called by:
  5997 ;;		_drawPixel
  5998 ;;		_drawFastVLine
  5999 ;;		_fillRectangle
  6000 ;;		_drawFastHLine
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           	psect	text21
  6005  0023D0                     __ptext21:
  6006                           	opt stack 0
  6007  0023D0                     _setAddrWindow:
  6008                           	opt stack 20
  6009                           
  6010                           ;incstack = 0
  6011                           ;setAddrWindow@x0 stored from wreg
  6012  0023D0  6E17               	movwf	setAddrWindow@x0,c
  6013                           
  6014                           ;ST7735_TFT.c: 394: write_command(0x2A);
  6015  0023D2  0E2A               	movlw	42
  6016  0023D4  ECFA  F014         	call	_write_command
  6017                           
  6018                           ;ST7735_TFT.c: 395: write_data(0);
  6019  0023D8  0E00               	movlw	0
  6020  0023DA  ECF2  F014         	call	_write_data
  6021                           
  6022                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  6023  0023DE  5017               	movf	setAddrWindow@x0,w,c
  6024  0023E0  2458               	addwf	_colstart,w,c
  6025  0023E2  ECF2  F014         	call	_write_data
  6026                           
  6027                           ;ST7735_TFT.c: 397: write_data(0);
  6028  0023E6  0E00               	movlw	0
  6029  0023E8  ECF2  F014         	call	_write_data
  6030                           
  6031                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  6032  0023EC  5015               	movf	setAddrWindow@x1,w,c
  6033  0023EE  2458               	addwf	_colstart,w,c
  6034  0023F0  ECF2  F014         	call	_write_data
  6035                           
  6036                           ;ST7735_TFT.c: 399: write_command(0x2B);
  6037  0023F4  0E2B               	movlw	43
  6038  0023F6  ECFA  F014         	call	_write_command
  6039                           
  6040                           ;ST7735_TFT.c: 400: write_data(0);
  6041  0023FA  0E00               	movlw	0
  6042  0023FC  ECF2  F014         	call	_write_data
  6043                           
  6044                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  6045  002400  5014               	movf	setAddrWindow@y0,w,c
  6046  002402  2461               	addwf	_rowstart,w,c
  6047  002404  ECF2  F014         	call	_write_data
  6048                           
  6049                           ;ST7735_TFT.c: 402: write_data(0);
  6050  002408  0E00               	movlw	0
  6051  00240A  ECF2  F014         	call	_write_data
  6052                           
  6053                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  6054  00240E  5016               	movf	setAddrWindow@y1,w,c
  6055  002410  2461               	addwf	_rowstart,w,c
  6056  002412  ECF2  F014         	call	_write_data
  6057                           
  6058                           ;ST7735_TFT.c: 404: write_command(0x2C);
  6059  002416  0E2C               	movlw	44
  6060  002418  ECFA  F014         	call	_write_command
  6061  00241C  0012               	return		;funcret
  6062  00241E                     __end_of_setAddrWindow:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           postinc0	equ	0xFEE
  6073                           wreg	equ	0xFE8
  6074                           postdec1	equ	0xFE5
  6075                           fsr1l	equ	0xFE1
  6076                           indf2	equ	0xFDF
  6077                           postinc2	equ	0xFDE
  6078                           fsr2h	equ	0xFDA
  6079                           fsr2l	equ	0xFD9
  6080                           status	equ	0xFD8
  6081                           
  6082 ;; *************** function _TFT_GreenTab_Initialize *****************
  6083 ;; Defined at:
  6084 ;;		line 644 in file "ST7735_TFT.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;		None
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;		None
  6089 ;; Return value:  Size  Location     Type
  6090 ;;		None               void
  6091 ;; Registers used:
  6092 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6102 ;;Total ram usage:        0 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    6
  6105 ;; This function calls:
  6106 ;;		_Rcmd1
  6107 ;;		_Rcmd2red
  6108 ;;		_Rcmd3
  6109 ;;		_write_command
  6110 ;;		_write_data
  6111 ;; This function is called by:
  6112 ;;		_Initialize_Screen
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text22
  6117  0027FA                     __ptext22:
  6118                           	opt stack 0
  6119  0027FA                     _TFT_GreenTab_Initialize:
  6120                           	opt stack 23
  6121                           
  6122                           ;ST7735_TFT.c: 646: PORTDbits.RD4 = 1;
  6123                           
  6124                           ;incstack = 0
  6125  0027FA  8883               	bsf	3971,4,c	;volatile
  6126                           
  6127                           ;ST7735_TFT.c: 647: PORTDbits.RD3 = 0;
  6128  0027FC  9683               	bcf	3971,3,c	;volatile
  6129                           
  6130                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  6131  0027FE  0E80               	movlw	128
  6132  002800  6EC7               	movwf	4039,c	;volatile
  6133                           
  6134                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  6135  002802  0E30               	movlw	48
  6136  002804  6EC6               	movwf	4038,c	;volatile
  6137                           
  6138                           ;ST7735_TFT.c: 653: Rcmd1();
  6139  002806  ECA3  F00B         	call	_Rcmd1	;wreg free
  6140                           
  6141                           ;ST7735_TFT.c: 654: Rcmd2red();
  6142  00280A  EC46  F013         	call	_Rcmd2red	;wreg free
  6143                           
  6144                           ;ST7735_TFT.c: 655: Rcmd3();
  6145  00280E  ECA7  F00C         	call	_Rcmd3	;wreg free
  6146                           
  6147                           ;ST7735_TFT.c: 656: write_command(0x36);
  6148  002812  0E36               	movlw	54
  6149  002814  ECFA  F014         	call	_write_command
  6150                           
  6151                           ;ST7735_TFT.c: 657: write_data(0xC0);
  6152  002818  0EC0               	movlw	192
  6153  00281A  ECF2  F014         	call	_write_data
  6154                           
  6155                           ;ST7735_TFT.c: 658: _tft_type = 1;
  6156  00281E  0E01               	movlw	1
  6157  002820  6E52               	movwf	__tft_type,c
  6158  002822  0012               	return		;funcret
  6159  002824                     __end_of_TFT_GreenTab_Initialize:
  6160                           	opt stack 0
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           postinc0	equ	0xFEE
  6170                           wreg	equ	0xFE8
  6171                           postdec1	equ	0xFE5
  6172                           fsr1l	equ	0xFE1
  6173                           indf2	equ	0xFDF
  6174                           postinc2	equ	0xFDE
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _Rcmd3 *****************
  6180 ;; Defined at:
  6181 ;;		line 338 in file "ST7735_TFT.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;		None
  6186 ;; Return value:  Size  Location     Type
  6187 ;;		None               void
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;Total ram usage:        0 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    5
  6202 ;; This function calls:
  6203 ;;		_delay_ms
  6204 ;;		_write_command
  6205 ;;		_write_data
  6206 ;; This function is called by:
  6207 ;;		_TFT_GreenTab_Initialize
  6208 ;;		_TFT_BlackTab_Initialize
  6209 ;; This function uses a non-reentrant model
  6210 ;;
  6211                           
  6212                           	psect	text23
  6213  00194E                     __ptext23:
  6214                           	opt stack 0
  6215  00194E                     _Rcmd3:
  6216                           	opt stack 23
  6217                           
  6218                           ;ST7735_TFT.c: 340: write_command(0xE0);
  6219                           
  6220                           ;incstack = 0
  6221  00194E  0EE0               	movlw	224
  6222  001950  ECFA  F014         	call	_write_command
  6223                           
  6224                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6225  001954  0E02               	movlw	2
  6226  001956  ECF2  F014         	call	_write_data
  6227  00195A  0E1C               	movlw	28
  6228  00195C  ECF2  F014         	call	_write_data
  6229  001960  0E07               	movlw	7
  6230  001962  ECF2  F014         	call	_write_data
  6231  001966  0E12               	movlw	18
  6232  001968  ECF2  F014         	call	_write_data
  6233                           
  6234                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6235  00196C  0E37               	movlw	55
  6236  00196E  ECF2  F014         	call	_write_data
  6237  001972  0E32               	movlw	50
  6238  001974  ECF2  F014         	call	_write_data
  6239  001978  0E29               	movlw	41
  6240  00197A  ECF2  F014         	call	_write_data
  6241  00197E  0E2D               	movlw	45
  6242  001980  ECF2  F014         	call	_write_data
  6243                           
  6244                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6245  001984  0E29               	movlw	41
  6246  001986  ECF2  F014         	call	_write_data
  6247  00198A  0E25               	movlw	37
  6248  00198C  ECF2  F014         	call	_write_data
  6249  001990  0E2B               	movlw	43
  6250  001992  ECF2  F014         	call	_write_data
  6251  001996  0E39               	movlw	57
  6252  001998  ECF2  F014         	call	_write_data
  6253                           
  6254                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6255  00199C  0E00               	movlw	0
  6256  00199E  ECF2  F014         	call	_write_data
  6257  0019A2  0E01               	movlw	1
  6258  0019A4  ECF2  F014         	call	_write_data
  6259  0019A8  0E03               	movlw	3
  6260  0019AA  ECF2  F014         	call	_write_data
  6261  0019AE  0E10               	movlw	16
  6262  0019B0  ECF2  F014         	call	_write_data
  6263                           
  6264                           ;ST7735_TFT.c: 345: write_command(0xE1);
  6265  0019B4  0EE1               	movlw	225
  6266  0019B6  ECFA  F014         	call	_write_command
  6267                           
  6268                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6269  0019BA  0E03               	movlw	3
  6270  0019BC  ECF2  F014         	call	_write_data
  6271  0019C0  0E1D               	movlw	29
  6272  0019C2  ECF2  F014         	call	_write_data
  6273  0019C6  0E07               	movlw	7
  6274  0019C8  ECF2  F014         	call	_write_data
  6275  0019CC  0E06               	movlw	6
  6276  0019CE  ECF2  F014         	call	_write_data
  6277                           
  6278                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6279  0019D2  0E2E               	movlw	46
  6280  0019D4  ECF2  F014         	call	_write_data
  6281  0019D8  0E2C               	movlw	44
  6282  0019DA  ECF2  F014         	call	_write_data
  6283  0019DE  0E29               	movlw	41
  6284  0019E0  ECF2  F014         	call	_write_data
  6285  0019E4  0E2D               	movlw	45
  6286  0019E6  ECF2  F014         	call	_write_data
  6287                           
  6288                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6289  0019EA  0E2E               	movlw	46
  6290  0019EC  ECF2  F014         	call	_write_data
  6291  0019F0  0E2E               	movlw	46
  6292  0019F2  ECF2  F014         	call	_write_data
  6293  0019F6  0E37               	movlw	55
  6294  0019F8  ECF2  F014         	call	_write_data
  6295  0019FC  0E3F               	movlw	63
  6296  0019FE  ECF2  F014         	call	_write_data
  6297                           
  6298                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6299  001A02  0E00               	movlw	0
  6300  001A04  ECF2  F014         	call	_write_data
  6301  001A08  0E00               	movlw	0
  6302  001A0A  ECF2  F014         	call	_write_data
  6303  001A0E  0E02               	movlw	2
  6304  001A10  ECF2  F014         	call	_write_data
  6305  001A14  0E10               	movlw	16
  6306  001A16  ECF2  F014         	call	_write_data
  6307                           
  6308                           ;ST7735_TFT.c: 350: write_command(0x13);
  6309  001A1A  0E13               	movlw	19
  6310  001A1C  ECFA  F014         	call	_write_command
  6311                           
  6312                           ;ST7735_TFT.c: 351: delay_ms(10);
  6313  001A20  0E00               	movlw	0
  6314  001A22  6E18               	movwf	delay_ms@ms+1,c
  6315  001A24  0E0A               	movlw	10
  6316  001A26  6E17               	movwf	delay_ms@ms,c
  6317  001A28  ECBF  F011         	call	_delay_ms	;wreg free
  6318                           
  6319                           ;ST7735_TFT.c: 352: write_command(0x29);
  6320  001A2C  0E29               	movlw	41
  6321  001A2E  ECFA  F014         	call	_write_command
  6322                           
  6323                           ;ST7735_TFT.c: 353: delay_ms(100);
  6324  001A32  0E00               	movlw	0
  6325  001A34  6E18               	movwf	delay_ms@ms+1,c
  6326  001A36  0E64               	movlw	100
  6327  001A38  6E17               	movwf	delay_ms@ms,c
  6328  001A3A  ECBF  F011         	call	_delay_ms	;wreg free
  6329  001A3E  0012               	return		;funcret
  6330  001A40                     __end_of_Rcmd3:
  6331                           	opt stack 0
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodh	equ	0xFF4
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon2	equ	0xFF1
  6340                           postinc0	equ	0xFEE
  6341                           wreg	equ	0xFE8
  6342                           postdec1	equ	0xFE5
  6343                           fsr1l	equ	0xFE1
  6344                           indf2	equ	0xFDF
  6345                           postinc2	equ	0xFDE
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function _Rcmd2red *****************
  6351 ;; Defined at:
  6352 ;;		line 328 in file "ST7735_TFT.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;		None               void
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:        0 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    5
  6373 ;; This function calls:
  6374 ;;		_write_command
  6375 ;;		_write_data
  6376 ;; This function is called by:
  6377 ;;		_TFT_GreenTab_Initialize
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text24
  6382  00268C                     __ptext24:
  6383                           	opt stack 0
  6384  00268C                     _Rcmd2red:
  6385                           	opt stack 23
  6386                           
  6387                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6388                           
  6389                           ;incstack = 0
  6390  00268C  0E2A               	movlw	42
  6391  00268E  ECFA  F014         	call	_write_command
  6392                           
  6393                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6394  002692  0E00               	movlw	0
  6395  002694  ECF2  F014         	call	_write_data
  6396  002698  0E00               	movlw	0
  6397  00269A  ECF2  F014         	call	_write_data
  6398                           
  6399                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6400  00269E  0E00               	movlw	0
  6401  0026A0  ECF2  F014         	call	_write_data
  6402  0026A4  0E7F               	movlw	127
  6403  0026A6  ECF2  F014         	call	_write_data
  6404                           
  6405                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6406  0026AA  0E2B               	movlw	43
  6407  0026AC  ECFA  F014         	call	_write_command
  6408                           
  6409                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6410  0026B0  0E00               	movlw	0
  6411  0026B2  ECF2  F014         	call	_write_data
  6412  0026B6  0E00               	movlw	0
  6413  0026B8  ECF2  F014         	call	_write_data
  6414                           
  6415                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6416  0026BC  0E00               	movlw	0
  6417  0026BE  ECF2  F014         	call	_write_data
  6418  0026C2  0E9F               	movlw	159
  6419  0026C4  ECF2  F014         	call	_write_data
  6420  0026C8  0012               	return		;funcret
  6421  0026CA                     __end_of_Rcmd2red:
  6422                           	opt stack 0
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           prodh	equ	0xFF4
  6428                           prodl	equ	0xFF3
  6429                           intcon	equ	0xFF2
  6430                           intcon2	equ	0xFF1
  6431                           postinc0	equ	0xFEE
  6432                           wreg	equ	0xFE8
  6433                           postdec1	equ	0xFE5
  6434                           fsr1l	equ	0xFE1
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function _Rcmd1 *****************
  6442 ;; Defined at:
  6443 ;;		line 281 in file "ST7735_TFT.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;		None               void
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;Total ram usage:        0 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    5
  6464 ;; This function calls:
  6465 ;;		_delay_ms
  6466 ;;		_write_command
  6467 ;;		_write_data
  6468 ;; This function is called by:
  6469 ;;		_TFT_GreenTab_Initialize
  6470 ;;		_TFT_BlackTab_Initialize
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	text25
  6475  001746                     __ptext25:
  6476                           	opt stack 0
  6477  001746                     _Rcmd1:
  6478                           	opt stack 23
  6479                           
  6480                           ;ST7735_TFT.c: 283: write_command(0x01);
  6481                           
  6482                           ;incstack = 0
  6483  001746  0E01               	movlw	1
  6484  001748  ECFA  F014         	call	_write_command
  6485                           
  6486                           ;ST7735_TFT.c: 284: delay_ms(150);
  6487  00174C  0E00               	movlw	0
  6488  00174E  6E18               	movwf	delay_ms@ms+1,c
  6489  001750  0E96               	movlw	150
  6490  001752  6E17               	movwf	delay_ms@ms,c
  6491  001754  ECBF  F011         	call	_delay_ms	;wreg free
  6492                           
  6493                           ;ST7735_TFT.c: 285: write_command(0x11);
  6494  001758  0E11               	movlw	17
  6495  00175A  ECFA  F014         	call	_write_command
  6496                           
  6497                           ;ST7735_TFT.c: 286: delay_ms(500);
  6498  00175E  0E01               	movlw	1
  6499  001760  6E18               	movwf	delay_ms@ms+1,c
  6500  001762  0EF4               	movlw	244
  6501  001764  6E17               	movwf	delay_ms@ms,c
  6502  001766  ECBF  F011         	call	_delay_ms	;wreg free
  6503                           
  6504                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6505  00176A  0EB1               	movlw	177
  6506  00176C  ECFA  F014         	call	_write_command
  6507                           
  6508                           ;ST7735_TFT.c: 288: write_data(0x01);
  6509  001770  0E01               	movlw	1
  6510  001772  ECF2  F014         	call	_write_data
  6511                           
  6512                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6513  001776  0E2C               	movlw	44
  6514  001778  ECF2  F014         	call	_write_data
  6515                           
  6516                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6517  00177C  0E2D               	movlw	45
  6518  00177E  ECF2  F014         	call	_write_data
  6519                           
  6520                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6521  001782  0EB2               	movlw	178
  6522  001784  ECFA  F014         	call	_write_command
  6523                           
  6524                           ;ST7735_TFT.c: 292: write_data(0x01);
  6525  001788  0E01               	movlw	1
  6526  00178A  ECF2  F014         	call	_write_data
  6527                           
  6528                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6529  00178E  0E2C               	movlw	44
  6530  001790  ECF2  F014         	call	_write_data
  6531                           
  6532                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6533  001794  0E2D               	movlw	45
  6534  001796  ECF2  F014         	call	_write_data
  6535                           
  6536                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6537  00179A  0EB3               	movlw	179
  6538  00179C  ECFA  F014         	call	_write_command
  6539                           
  6540                           ;ST7735_TFT.c: 296: write_data(0x01);
  6541  0017A0  0E01               	movlw	1
  6542  0017A2  ECF2  F014         	call	_write_data
  6543                           
  6544                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6545  0017A6  0E2C               	movlw	44
  6546  0017A8  ECF2  F014         	call	_write_data
  6547                           
  6548                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6549  0017AC  0E2D               	movlw	45
  6550  0017AE  ECF2  F014         	call	_write_data
  6551                           
  6552                           ;ST7735_TFT.c: 299: write_data(0x01);
  6553  0017B2  0E01               	movlw	1
  6554  0017B4  ECF2  F014         	call	_write_data
  6555                           
  6556                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6557  0017B8  0E2C               	movlw	44
  6558  0017BA  ECF2  F014         	call	_write_data
  6559                           
  6560                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6561  0017BE  0E2D               	movlw	45
  6562  0017C0  ECF2  F014         	call	_write_data
  6563                           
  6564                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6565  0017C4  0EB4               	movlw	180
  6566  0017C6  ECFA  F014         	call	_write_command
  6567                           
  6568                           ;ST7735_TFT.c: 303: write_data(0x07);
  6569  0017CA  0E07               	movlw	7
  6570  0017CC  ECF2  F014         	call	_write_data
  6571                           
  6572                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6573  0017D0  0EC0               	movlw	192
  6574  0017D2  ECFA  F014         	call	_write_command
  6575                           
  6576                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6577  0017D6  0EA2               	movlw	162
  6578  0017D8  ECF2  F014         	call	_write_data
  6579                           
  6580                           ;ST7735_TFT.c: 306: write_data(0x02);
  6581  0017DC  0E02               	movlw	2
  6582  0017DE  ECF2  F014         	call	_write_data
  6583                           
  6584                           ;ST7735_TFT.c: 307: write_data(0x84);
  6585  0017E2  0E84               	movlw	132
  6586  0017E4  ECF2  F014         	call	_write_data
  6587                           
  6588                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6589  0017E8  0EC1               	movlw	193
  6590  0017EA  ECFA  F014         	call	_write_command
  6591                           
  6592                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6593  0017EE  0EC5               	movlw	197
  6594  0017F0  ECF2  F014         	call	_write_data
  6595                           
  6596                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6597  0017F4  0EC2               	movlw	194
  6598  0017F6  ECFA  F014         	call	_write_command
  6599                           
  6600                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6601  0017FA  0E0A               	movlw	10
  6602  0017FC  ECF2  F014         	call	_write_data
  6603                           
  6604                           ;ST7735_TFT.c: 312: write_data(0x00);
  6605  001800  0E00               	movlw	0
  6606  001802  ECF2  F014         	call	_write_data
  6607                           
  6608                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6609  001806  0EC3               	movlw	195
  6610  001808  ECFA  F014         	call	_write_command
  6611                           
  6612                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6613  00180C  0E8A               	movlw	138
  6614  00180E  ECF2  F014         	call	_write_data
  6615                           
  6616                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6617  001812  0E2A               	movlw	42
  6618  001814  ECF2  F014         	call	_write_data
  6619                           
  6620                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6621  001818  0EC4               	movlw	196
  6622  00181A  ECFA  F014         	call	_write_command
  6623                           
  6624                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6625  00181E  0E8A               	movlw	138
  6626  001820  ECF2  F014         	call	_write_data
  6627                           
  6628                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6629  001824  0EEE               	movlw	238
  6630  001826  ECF2  F014         	call	_write_data
  6631                           
  6632                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6633  00182A  0EC5               	movlw	197
  6634  00182C  ECFA  F014         	call	_write_command
  6635                           
  6636                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6637  001830  0E0E               	movlw	14
  6638  001832  ECF2  F014         	call	_write_data
  6639                           
  6640                           ;ST7735_TFT.c: 321: write_command(0x20);
  6641  001836  0E20               	movlw	32
  6642  001838  ECFA  F014         	call	_write_command
  6643                           
  6644                           ;ST7735_TFT.c: 322: write_command(0x36);
  6645  00183C  0E36               	movlw	54
  6646  00183E  ECFA  F014         	call	_write_command
  6647                           
  6648                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6649  001842  0EC8               	movlw	200
  6650  001844  ECF2  F014         	call	_write_data
  6651                           
  6652                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6653  001848  0E3A               	movlw	58
  6654  00184A  ECFA  F014         	call	_write_command
  6655                           
  6656                           ;ST7735_TFT.c: 325: write_data(0x05);
  6657  00184E  0E05               	movlw	5
  6658  001850  ECF2  F014         	call	_write_data
  6659  001854  0012               	return		;funcret
  6660  001856                     __end_of_Rcmd1:
  6661                           	opt stack 0
  6662                           tblptru	equ	0xFF8
  6663                           tblptrh	equ	0xFF7
  6664                           tblptrl	equ	0xFF6
  6665                           tablat	equ	0xFF5
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           intcon	equ	0xFF2
  6669                           intcon2	equ	0xFF1
  6670                           postinc0	equ	0xFEE
  6671                           wreg	equ	0xFE8
  6672                           postdec1	equ	0xFE5
  6673                           fsr1l	equ	0xFE1
  6674                           indf2	equ	0xFDF
  6675                           postinc2	equ	0xFDE
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _write_data *****************
  6681 ;; Defined at:
  6682 ;;		line 209 in file "ST7735_TFT.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  data_           1    wreg     unsigned char 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  data_           1   18[COMRAM] unsigned char 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;		None               void
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;Total ram usage:        1 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    4
  6703 ;; This function calls:
  6704 ;;		_spiwrite
  6705 ;; This function is called by:
  6706 ;;		_Rcmd1
  6707 ;;		_Rcmd2red
  6708 ;;		_Rcmd3
  6709 ;;		_setAddrWindow
  6710 ;;		_drawPixel
  6711 ;;		_TFT_GreenTab_Initialize
  6712 ;;		_Bcmd
  6713 ;;		_setScrollDefinition
  6714 ;;		_Rcmd2green
  6715 ;;		_VerticalScroll
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text26
  6720  0029E4                     __ptext26:
  6721                           	opt stack 0
  6722  0029E4                     _write_data:
  6723                           	opt stack 20
  6724                           
  6725                           ;incstack = 0
  6726                           ;write_data@data_ stored from wreg
  6727  0029E4  6E13               	movwf	write_data@data_,c
  6728                           
  6729                           ;ST7735_TFT.c: 211: PORTDbits.RD4 = 0;
  6730  0029E6  9883               	bcf	3971,4,c	;volatile
  6731                           
  6732                           ;ST7735_TFT.c: 212: PORTDbits.RD3 = 1;
  6733  0029E8  8683               	bsf	3971,3,c	;volatile
  6734                           
  6735                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6736  0029EA  5013               	movf	write_data@data_,w,c
  6737  0029EC  ECB1  F014         	call	_spiwrite
  6738                           
  6739                           ;ST7735_TFT.c: 214: PORTDbits.RD4 = 1;
  6740  0029F0  8883               	bsf	3971,4,c	;volatile
  6741  0029F2  0012               	return		;funcret
  6742  0029F4                     __end_of_write_data:
  6743                           	opt stack 0
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           intcon	equ	0xFF2
  6751                           intcon2	equ	0xFF1
  6752                           postinc0	equ	0xFEE
  6753                           wreg	equ	0xFE8
  6754                           postdec1	equ	0xFE5
  6755                           fsr1l	equ	0xFE1
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function _write_command *****************
  6763 ;; Defined at:
  6764 ;;		line 198 in file "ST7735_TFT.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  cmd_            1    wreg     unsigned char 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  cmd_            1   18[COMRAM] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;		None               void
  6771 ;; Registers used:
  6772 ;;		wreg, status,2, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;Total ram usage:        1 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    4
  6785 ;; This function calls:
  6786 ;;		_spiwrite
  6787 ;; This function is called by:
  6788 ;;		_Rcmd1
  6789 ;;		_Rcmd2red
  6790 ;;		_Rcmd3
  6791 ;;		_setAddrWindow
  6792 ;;		_TFT_GreenTab_Initialize
  6793 ;;		_Bcmd
  6794 ;;		_setScrollDefinition
  6795 ;;		_Rcmd2green
  6796 ;;		_VerticalScroll
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text27
  6801  0029F4                     __ptext27:
  6802                           	opt stack 0
  6803  0029F4                     _write_command:
  6804                           	opt stack 20
  6805                           
  6806                           ;incstack = 0
  6807                           ;write_command@cmd_ stored from wreg
  6808  0029F4  6E13               	movwf	write_command@cmd_,c
  6809                           
  6810                           ;ST7735_TFT.c: 200: PORTDbits.RD4 = 0;
  6811  0029F6  9883               	bcf	3971,4,c	;volatile
  6812                           
  6813                           ;ST7735_TFT.c: 202: PORTDbits.RD3 = 0;
  6814  0029F8  9683               	bcf	3971,3,c	;volatile
  6815                           
  6816                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6817  0029FA  5013               	movf	write_command@cmd_,w,c
  6818  0029FC  ECB1  F014         	call	_spiwrite
  6819                           
  6820                           ;ST7735_TFT.c: 205: PORTDbits.RD4 = 1;
  6821  002A00  8883               	bsf	3971,4,c	;volatile
  6822  002A02  0012               	return		;funcret
  6823  002A04                     __end_of_write_command:
  6824                           	opt stack 0
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           intcon	equ	0xFF2
  6832                           intcon2	equ	0xFF1
  6833                           postinc0	equ	0xFEE
  6834                           wreg	equ	0xFE8
  6835                           postdec1	equ	0xFE5
  6836                           fsr1l	equ	0xFE1
  6837                           indf2	equ	0xFDF
  6838                           postinc2	equ	0xFDE
  6839                           fsr2h	equ	0xFDA
  6840                           fsr2l	equ	0xFD9
  6841                           status	equ	0xFD8
  6842                           
  6843 ;; *************** function _spiwrite *****************
  6844 ;; Defined at:
  6845 ;;		line 189 in file "ST7735_TFT.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;  spidata         1    wreg     unsigned char 
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;  spidata         1   17[COMRAM] unsigned char 
  6850 ;;  x               1   16[COMRAM] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;		None               void
  6853 ;; Registers used:
  6854 ;;		wreg
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;Total ram usage:        2 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    3
  6867 ;; This function calls:
  6868 ;;		Nothing
  6869 ;; This function is called by:
  6870 ;;		_write_command
  6871 ;;		_write_data
  6872 ;;		_drawFastVLine
  6873 ;;		_fillRectangle
  6874 ;;		_drawFastHLine
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text28
  6879  002962                     __ptext28:
  6880                           	opt stack 0
  6881  002962                     _spiwrite:
  6882                           	opt stack 22
  6883                           
  6884                           ;incstack = 0
  6885                           ;spiwrite@spidata stored from wreg
  6886  002962  6E12               	movwf	spiwrite@spidata,c
  6887                           
  6888                           ;ST7735_TFT.c: 191: char x;
  6889                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6890  002964  969E               	bcf	3998,3,c	;volatile
  6891                           
  6892                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6893  002966  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6894                           
  6895                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6896  00296A  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6897                           
  6898                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6899  00296E  D000               	goto	l394
  6900  002970                     l394:
  6901  002970  A0C7               	btfss	4039,0,c	;volatile
  6902  002972  D7FE               	goto	l394
  6903  002974  0012               	return		;funcret
  6904  002976                     __end_of_spiwrite:
  6905                           	opt stack 0
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon	equ	0xFF2
  6913                           intcon2	equ	0xFF1
  6914                           postinc0	equ	0xFEE
  6915                           wreg	equ	0xFE8
  6916                           postdec1	equ	0xFE5
  6917                           fsr1l	equ	0xFE1
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           fsr2h	equ	0xFDA
  6921                           fsr2l	equ	0xFD9
  6922                           status	equ	0xFD8
  6923                           
  6924 ;; *************** function _LCD_Reset *****************
  6925 ;; Defined at:
  6926 ;;		line 217 in file "ST7735_TFT.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;		None
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;		None
  6931 ;; Return value:  Size  Location     Type
  6932 ;;		None               void
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6944 ;;Total ram usage:        0 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    5
  6947 ;; This function calls:
  6948 ;;		_delay_ms
  6949 ;; This function is called by:
  6950 ;;		_Initialize_Screen
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text29
  6955  00298A                     __ptext29:
  6956                           	opt stack 0
  6957  00298A                     _LCD_Reset:
  6958                           	opt stack 24
  6959                           
  6960                           ;ST7735_TFT.c: 219: PORTDbits.RD5 = 0;
  6961                           
  6962                           ;incstack = 0
  6963  00298A  9A83               	bcf	3971,5,c	;volatile
  6964                           
  6965                           ;ST7735_TFT.c: 220: delay_ms(100);
  6966  00298C  0E00               	movlw	0
  6967  00298E  6E18               	movwf	delay_ms@ms+1,c
  6968  002990  0E64               	movlw	100
  6969  002992  6E17               	movwf	delay_ms@ms,c
  6970  002994  ECBF  F011         	call	_delay_ms	;wreg free
  6971                           
  6972                           ;ST7735_TFT.c: 221: PORTDbits.RD5 = 1;
  6973  002998  8A83               	bsf	3971,5,c	;volatile
  6974  00299A  0012               	return		;funcret
  6975  00299C                     __end_of_LCD_Reset:
  6976                           	opt stack 0
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           intcon2	equ	0xFF1
  6985                           postinc0	equ	0xFEE
  6986                           wreg	equ	0xFE8
  6987                           postdec1	equ	0xFE5
  6988                           fsr1l	equ	0xFE1
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           fsr2h	equ	0xFDA
  6992                           fsr2l	equ	0xFD9
  6993                           status	equ	0xFD8
  6994                           
  6995 ;; *************** function _delay_ms *****************
  6996 ;; Defined at:
  6997 ;;		line 64 in file "ST7735_TFT.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;  ms              2   22[COMRAM] int 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;  count           2   26[COMRAM] int 
  7002 ;; Return value:  Size  Location     Type
  7003 ;;		None               void
  7004 ;; Registers used:
  7005 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7011 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;Total ram usage:        6 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    4
  7018 ;; This function calls:
  7019 ;;		___wmul
  7020 ;; This function is called by:
  7021 ;;		_LCD_Reset
  7022 ;;		_Rcmd1
  7023 ;;		_Rcmd3
  7024 ;;		_Bcmd
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text30
  7029  00237E                     __ptext30:
  7030                           	opt stack 0
  7031  00237E                     _delay_ms:
  7032                           	opt stack 23
  7033                           
  7034                           ;ST7735_TFT.c: 70: int count;
  7035                           ;ST7735_TFT.c: 71: count = 8000000/4000/16 * ms;
  7036                           
  7037                           ;incstack = 0
  7038  00237E  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7039  002382  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7040  002386  0E00               	movlw	0
  7041  002388  6E14               	movwf	___wmul@multiplicand+1,c
  7042  00238A  0E7D               	movlw	125
  7043  00238C  6E13               	movwf	___wmul@multiplicand,c
  7044  00238E  EC12  F014         	call	___wmul	;wreg free
  7045  002392  C011  F01B         	movff	?___wmul,delay_ms@count
  7046  002396  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7047                           
  7048                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  7049  00239A  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7050  00239E  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7051  0023A2  1E19               	comf	??_delay_ms,f,c
  7052  0023A4  1E1A               	comf	??_delay_ms+1,f,c
  7053  0023A6  4A19               	infsnz	??_delay_ms,f,c
  7054  0023A8  2A1A               	incf	??_delay_ms+1,f,c
  7055  0023AA  0EFF               	movlw	255
  7056  0023AC  2419               	addwf	??_delay_ms,w,c
  7057  0023AE  6E1B               	movwf	delay_ms@count,c
  7058  0023B0  0EFF               	movlw	255
  7059  0023B2  201A               	addwfc	??_delay_ms+1,w,c
  7060  0023B4  6E1C               	movwf	delay_ms@count+1,c
  7061                           
  7062                           ;ST7735_TFT.c: 74: T0CON = 0x03;
  7063  0023B6  0E03               	movlw	3
  7064  0023B8  6ED5               	movwf	4053,c	;volatile
  7065                           
  7066                           ;ST7735_TFT.c: 76: TMR0L = count & 0x00ff;
  7067  0023BA  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  7068                           
  7069                           ;ST7735_TFT.c: 77: TMR0H = count >> 8;
  7070  0023BE  501C               	movf	delay_ms@count+1,w,c
  7071  0023C0  6ED7               	movwf	4055,c	;volatile
  7072                           
  7073                           ;ST7735_TFT.c: 79: INTCONbits.TMR0IF = 0;
  7074  0023C2  94F2               	bcf	intcon,2,c	;volatile
  7075                           
  7076                           ;ST7735_TFT.c: 80: T0CONbits.TMR0ON = 1;
  7077  0023C4  8ED5               	bsf	4053,7,c	;volatile
  7078                           
  7079                           ;ST7735_TFT.c: 82: while (INTCONbits.TMR0IF == 0);
  7080  0023C6  D000               	goto	l384
  7081  0023C8                     l384:
  7082  0023C8  A4F2               	btfss	intcon,2,c	;volatile
  7083  0023CA  D7FE               	goto	l384
  7084                           
  7085                           ;ST7735_TFT.c: 83: T0CONbits.TMR0ON = 0;
  7086  0023CC  9ED5               	bcf	4053,7,c	;volatile
  7087  0023CE  0012               	return		;funcret
  7088  0023D0                     __end_of_delay_ms:
  7089                           	opt stack 0
  7090                           tblptru	equ	0xFF8
  7091                           tblptrh	equ	0xFF7
  7092                           tblptrl	equ	0xFF6
  7093                           tablat	equ	0xFF5
  7094                           prodh	equ	0xFF4
  7095                           prodl	equ	0xFF3
  7096                           intcon	equ	0xFF2
  7097                           intcon2	equ	0xFF1
  7098                           postinc0	equ	0xFEE
  7099                           wreg	equ	0xFE8
  7100                           postdec1	equ	0xFE5
  7101                           fsr1l	equ	0xFE1
  7102                           indf2	equ	0xFDF
  7103                           postinc2	equ	0xFDE
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108 ;; *************** function _Increase_Speed *****************
  7109 ;; Defined at:
  7110 ;;		line 56 in file "Fan_Support.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;		None               void
  7117 ;; Registers used:
  7118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;Total ram usage:        0 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    6
  7131 ;; This function calls:
  7132 ;;		_Do_Beep
  7133 ;;		_do_update_pwm
  7134 ;;		_printf
  7135 ;; This function is called by:
  7136 ;;		_main
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           	psect	text31
  7141  00279C                     __ptext31:
  7142                           	opt stack 0
  7143  00279C                     _Increase_Speed:
  7144                           	opt stack 24
  7145                           
  7146                           ;Fan_Support.c: 58: if(duty_cycle == 100)
  7147                           
  7148                           ;incstack = 0
  7149  00279C  0E64               	movlw	100
  7150  00279E  185B               	xorwf	_duty_cycle,w,c
  7151  0027A0  A4D8               	btfss	status,2,c
  7152  0027A2  D00C               	goto	l7011
  7153                           
  7154                           ;Fan_Support.c: 59: {
  7155                           ;Fan_Support.c: 60: Do_Beep();
  7156  0027A4  EC91  F014         	call	_Do_Beep	;wreg free
  7157                           
  7158                           ;Fan_Support.c: 61: printf("Duty Cycle is at 100 \r\n");
  7159  0027A8  0E1F               	movlw	low STR_1
  7160  0027AA  6E1D               	movwf	printf@f,c
  7161  0027AC  0EFC               	movlw	high STR_1
  7162  0027AE  6E1E               	movwf	printf@f+1,c
  7163  0027B0  EC0E  F000         	call	_printf	;wreg free
  7164                           
  7165                           ;Fan_Support.c: 62: do_update_pwm(duty_cycle);
  7166  0027B4  505B               	movf	_duty_cycle,w,c
  7167  0027B6  ECD5  F00E         	call	_do_update_pwm
  7168                           
  7169                           ;Fan_Support.c: 63: }
  7170  0027BA  D007               	goto	l53
  7171  0027BC                     l7011:
  7172                           
  7173                           ;Fan_Support.c: 64: else
  7174                           ;Fan_Support.c: 65: {
  7175                           ;Fan_Support.c: 66: duty_cycle = duty_cycle + 5;
  7176  0027BC  505B               	movf	_duty_cycle,w,c
  7177  0027BE  0F05               	addlw	5
  7178  0027C0  6E5B               	movwf	_duty_cycle,c
  7179                           
  7180                           ;Fan_Support.c: 67: do_update_pwm(duty_cycle);
  7181  0027C2  505B               	movf	_duty_cycle,w,c
  7182  0027C4  ECD5  F00E         	call	_do_update_pwm
  7183  0027C8  D000               	goto	l53
  7184  0027CA                     l53:
  7185  0027CA  0012               	return		;funcret
  7186  0027CC                     __end_of_Increase_Speed:
  7187                           	opt stack 0
  7188                           tblptru	equ	0xFF8
  7189                           tblptrh	equ	0xFF7
  7190                           tblptrl	equ	0xFF6
  7191                           tablat	equ	0xFF5
  7192                           prodh	equ	0xFF4
  7193                           prodl	equ	0xFF3
  7194                           intcon	equ	0xFF2
  7195                           intcon2	equ	0xFF1
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           postdec1	equ	0xFE5
  7199                           fsr1l	equ	0xFE1
  7200                           indf2	equ	0xFDF
  7201                           postinc2	equ	0xFDE
  7202                           fsr2h	equ	0xFDA
  7203                           fsr2l	equ	0xFD9
  7204                           status	equ	0xFD8
  7205                           
  7206 ;; *************** function _Do_Init *****************
  7207 ;; Defined at:
  7208 ;;		line 96 in file "lap12p1.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;		None
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;		None
  7213 ;; Return value:  Size  Location     Type
  7214 ;;		None               void
  7215 ;; Registers used:
  7216 ;;		wreg, status,2, status,0, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7226 ;;Total ram usage:        0 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    7
  7229 ;; This function calls:
  7230 ;;		_DS1621_Init
  7231 ;;		_I2C_Init
  7232 ;;		_init_INTERRUPT
  7233 ;;		_init_UART
  7234 ;; This function is called by:
  7235 ;;		_main
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text32
  7240  00241E                     __ptext32:
  7241                           	opt stack 0
  7242  00241E                     _Do_Init:
  7243                           	opt stack 23
  7244                           
  7245                           ;lap12p1.c: 98: init_UART();
  7246                           
  7247                           ;incstack = 0
  7248  00241E  ECBB  F014         	call	_init_UART	;wreg free
  7249                           
  7250                           ;lap12p1.c: 99: OSCCON=0x70;
  7251  002422  0E70               	movlw	112
  7252  002424  6ED3               	movwf	4051,c	;volatile
  7253                           
  7254                           ;lap12p1.c: 101: ADCON1=0x0F;
  7255  002426  0E0F               	movlw	15
  7256  002428  6EC1               	movwf	4033,c	;volatile
  7257                           
  7258                           ;lap12p1.c: 102: TRISA = 0x30;
  7259  00242A  0E30               	movlw	48
  7260  00242C  6E92               	movwf	3986,c	;volatile
  7261                           
  7262                           ;lap12p1.c: 103: TRISB = 0x01;
  7263  00242E  0E01               	movlw	1
  7264  002430  6E93               	movwf	3987,c	;volatile
  7265                           
  7266                           ;lap12p1.c: 104: TRISC = 0x05;
  7267  002432  0E05               	movlw	5
  7268  002434  6E94               	movwf	3988,c	;volatile
  7269                           
  7270                           ;lap12p1.c: 105: TRISD = 0x00;
  7271  002436  0E00               	movlw	0
  7272  002438  6E95               	movwf	3989,c	;volatile
  7273                           
  7274                           ;lap12p1.c: 106: TRISE = 0x00;
  7275  00243A  0E00               	movlw	0
  7276  00243C  6E96               	movwf	3990,c	;volatile
  7277                           
  7278                           ;lap12p1.c: 109: RBPU=0;
  7279  00243E  9EF1               	bcf	intcon2,7,c	;volatile
  7280                           
  7281                           ;lap12p1.c: 110: TMR3L = 0x00;
  7282  002440  0E00               	movlw	0
  7283  002442  6EB2               	movwf	4018,c	;volatile
  7284                           
  7285                           ;lap12p1.c: 111: T3CON = 0x03;
  7286  002444  0E03               	movlw	3
  7287  002446  6EB1               	movwf	4017,c	;volatile
  7288                           
  7289                           ;lap12p1.c: 112: I2C_Init(100000);
  7290  002448  0EA0               	movlw	160
  7291  00244A  6E11               	movwf	I2C_Init@c,c
  7292  00244C  0E86               	movlw	134
  7293  00244E  6E12               	movwf	I2C_Init@c+1,c
  7294  002450  0E01               	movlw	1
  7295  002452  6E13               	movwf	I2C_Init@c+2,c
  7296  002454  0E00               	movlw	0
  7297  002456  6E14               	movwf	I2C_Init@c+3,c
  7298  002458  EC1C  F015         	call	_I2C_Init	;wreg free
  7299                           
  7300                           ;lap12p1.c: 114: DS1621_Init();
  7301  00245C  EC5A  F014         	call	_DS1621_Init	;wreg free
  7302                           
  7303                           ;lap12p1.c: 115: init_INTERRUPT();
  7304  002460  EC9D  F013         	call	_init_INTERRUPT	;wreg free
  7305                           
  7306                           ;lap12p1.c: 116: FAN = 0;
  7307  002464  0E00               	movlw	0
  7308  002466  6E4F               	movwf	_FAN,c
  7309  002468  0012               	return		;funcret
  7310  00246A                     __end_of_Do_Init:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           intcon2	equ	0xFF1
  7320                           postinc0	equ	0xFEE
  7321                           wreg	equ	0xFE8
  7322                           postdec1	equ	0xFE5
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330 ;; *************** function _init_UART *****************
  7331 ;; Defined at:
  7332 ;;		line 90 in file "lap12p1.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;		None               void
  7339 ;; Registers used:
  7340 ;;		wreg, status,2, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    4
  7353 ;; This function calls:
  7354 ;;		_OpenUSART
  7355 ;; This function is called by:
  7356 ;;		_Do_Init
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           	psect	text33
  7361  002976                     __ptext33:
  7362                           	opt stack 0
  7363  002976                     _init_UART:
  7364                           	opt stack 25
  7365                           
  7366                           ;lap12p1.c: 92: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  7367                           
  7368                           ;incstack = 0
  7369  002976  0E00               	movlw	0
  7370  002978  6E12               	movwf	OpenUSART@spbrg+1,c
  7371  00297A  0E19               	movlw	25
  7372  00297C  6E11               	movwf	OpenUSART@spbrg,c
  7373  00297E  0E3C               	movlw	60
  7374  002980  ECBF  F010         	call	_OpenUSART
  7375                           
  7376                           ;lap12p1.c: 93: OSCCON = 0x70;
  7377  002984  0E70               	movlw	112
  7378  002986  6ED3               	movwf	4051,c	;volatile
  7379  002988  0012               	return		;funcret
  7380  00298A                     __end_of_init_UART:
  7381                           	opt stack 0
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           intcon	equ	0xFF2
  7389                           intcon2	equ	0xFF1
  7390                           postinc0	equ	0xFEE
  7391                           wreg	equ	0xFE8
  7392                           postdec1	equ	0xFE5
  7393                           fsr1l	equ	0xFE1
  7394                           indf2	equ	0xFDF
  7395                           postinc2	equ	0xFDE
  7396                           fsr2h	equ	0xFDA
  7397                           fsr2l	equ	0xFD9
  7398                           status	equ	0xFD8
  7399                           
  7400 ;; *************** function _OpenUSART *****************
  7401 ;; Defined at:
  7402 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  config          1    wreg     unsigned char 
  7405 ;;  spbrg           2   16[COMRAM] unsigned int 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  config          1   18[COMRAM] unsigned char 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;		None               void
  7410 ;; Registers used:
  7411 ;;		wreg, status,2
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7417 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;Total ram usage:        3 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    3
  7424 ;; This function calls:
  7425 ;;		Nothing
  7426 ;; This function is called by:
  7427 ;;		_init_UART
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text34
  7432  00217E                     __ptext34:
  7433                           	opt stack 0
  7434  00217E                     _OpenUSART:
  7435                           	opt stack 25
  7436                           
  7437                           ;incstack = 0
  7438                           ;OpenUSART@config stored from wreg
  7439  00217E  6E13               	movwf	OpenUSART@config,c
  7440  002180  0E00               	movlw	0
  7441  002182  6EAC               	movwf	4012,c	;volatile
  7442  002184  0E00               	movlw	0
  7443  002186  6EAB               	movwf	4011,c	;volatile
  7444  002188  A013               	btfss	OpenUSART@config,0,c
  7445  00218A  D002               	goto	l6077
  7446  00218C  88AC               	bsf	4012,4,c	;volatile
  7447  00218E  D000               	goto	l6077
  7448  002190                     l6077:
  7449  002190  A213               	btfss	OpenUSART@config,1,c
  7450  002192  D003               	goto	l6081
  7451  002194  8CAC               	bsf	4012,6,c	;volatile
  7452  002196  8CAB               	bsf	4011,6,c	;volatile
  7453  002198  D000               	goto	l6081
  7454  00219A                     l6081:
  7455  00219A  A413               	btfss	OpenUSART@config,2,c
  7456  00219C  D002               	goto	l6085
  7457  00219E  8EAC               	bsf	4012,7,c	;volatile
  7458  0021A0  D000               	goto	l6085
  7459  0021A2                     l6085:
  7460  0021A2  A613               	btfss	OpenUSART@config,3,c
  7461  0021A4  D002               	goto	l961
  7462  0021A6  88AB               	bsf	4011,4,c	;volatile
  7463  0021A8  D002               	goto	l6089
  7464  0021AA                     l961:
  7465  0021AA  8AAB               	bsf	4011,5,c	;volatile
  7466  0021AC  D000               	goto	l6089
  7467  0021AE                     l6089:
  7468  0021AE  B813               	btfsc	OpenUSART@config,4,c
  7469  0021B0  84AC               	bsf	4012,2,c	;volatile
  7470  0021B2  989E               	bcf	3998,4,c	;volatile
  7471  0021B4  AA13               	btfss	OpenUSART@config,5,c
  7472  0021B6  D002               	goto	l6097
  7473  0021B8  86AB               	bsf	4011,3,c	;volatile
  7474  0021BA  D000               	goto	l6097
  7475  0021BC                     l6097:
  7476  0021BC  AC13               	btfss	OpenUSART@config,6,c
  7477  0021BE  D002               	goto	l965
  7478  0021C0  8A9D               	bsf	3997,5,c	;volatile
  7479  0021C2  D001               	goto	l966
  7480  0021C4                     l965:
  7481  0021C4  9A9D               	bcf	3997,5,c	;volatile
  7482  0021C6                     l966:
  7483  0021C6  9A9E               	bcf	3998,5,c	;volatile
  7484  0021C8  AE13               	btfss	OpenUSART@config,7,c
  7485  0021CA  D002               	goto	l967
  7486  0021CC  889D               	bsf	3997,4,c	;volatile
  7487  0021CE  D001               	goto	l968
  7488  0021D0                     l967:
  7489  0021D0  989D               	bcf	3997,4,c	;volatile
  7490  0021D2                     l968:
  7491  0021D2  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7492  0021D6  5012               	movf	OpenUSART@spbrg+1,w,c
  7493  0021D8  6EB0               	movwf	4016,c	;volatile
  7494  0021DA  8AAC               	bsf	4012,5,c	;volatile
  7495  0021DC  8EAB               	bsf	4011,7,c	;volatile
  7496  0021DE  9C94               	bcf	3988,6,c	;volatile
  7497  0021E0  8E94               	bsf	3988,7,c	;volatile
  7498  0021E2  B8AC               	btfsc	4012,4,c	;volatile
  7499  0021E4  BEAC               	btfsc	4012,7,c	;volatile
  7500  0021E6  D002               	goto	l970
  7501  0021E8  8C94               	bsf	3988,6,c	;volatile
  7502  0021EA  D000               	goto	l970
  7503  0021EC                     l970:
  7504  0021EC  0012               	return		;funcret
  7505  0021EE                     __end_of_OpenUSART:
  7506                           	opt stack 0
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon2	equ	0xFF1
  7515                           postinc0	equ	0xFEE
  7516                           wreg	equ	0xFE8
  7517                           postdec1	equ	0xFE5
  7518                           fsr1l	equ	0xFE1
  7519                           indf2	equ	0xFDF
  7520                           postinc2	equ	0xFDE
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _init_INTERRUPT *****************
  7526 ;; Defined at:
  7527 ;;		line 14 in file "Interrupt.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;		None
  7532 ;; Return value:  Size  Location     Type
  7533 ;;		None               void
  7534 ;; Registers used:
  7535 ;;		wreg, status,2
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;Total ram usage:        0 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    3
  7548 ;; This function calls:
  7549 ;;		Nothing
  7550 ;; This function is called by:
  7551 ;;		_Do_Init
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text35
  7556  00273A                     __ptext35:
  7557                           	opt stack 0
  7558  00273A                     _init_INTERRUPT:
  7559                           	opt stack 26
  7560                           
  7561                           ;Interrupt.c: 16: INTCONbits.INT0IF = 0;
  7562                           
  7563                           ;incstack = 0
  7564  00273A  92F2               	bcf	intcon,1,c	;volatile
  7565                           
  7566                           ;Interrupt.c: 17: INTCON2bits.INTEDG0 = 0;
  7567  00273C  9CF1               	bcf	intcon2,6,c	;volatile
  7568                           
  7569                           ;Interrupt.c: 18: INTCONbits.INT0IE = 1;
  7570  00273E  88F2               	bsf	intcon,4,c	;volatile
  7571                           
  7572                           ;Interrupt.c: 19: TMR1H = 0;
  7573  002740  0E00               	movlw	0
  7574  002742  6ECF               	movwf	4047,c	;volatile
  7575                           
  7576                           ;Interrupt.c: 20: TMR1L = 0;
  7577  002744  0E00               	movlw	0
  7578  002746  6ECE               	movwf	4046,c	;volatile
  7579                           
  7580                           ;Interrupt.c: 21: PIR1bits.TMR1IF = 0;
  7581  002748  909E               	bcf	3998,0,c	;volatile
  7582                           
  7583                           ;Interrupt.c: 22: PIE1bits.TMR1IE = 1;
  7584  00274A  809D               	bsf	3997,0,c	;volatile
  7585                           
  7586                           ;Interrupt.c: 23: INTCONbits.PEIE = 1;
  7587  00274C  8CF2               	bsf	intcon,6,c	;volatile
  7588                           
  7589                           ;Interrupt.c: 24: INTCONbits.GIE = 1;
  7590  00274E  8EF2               	bsf	intcon,7,c	;volatile
  7591                           
  7592                           ;Interrupt.c: 25: nec_ok = 0;
  7593  002750  0E00               	movlw	0
  7594  002752  6E48               	movwf	_nec_ok+1,c
  7595  002754  0E00               	movlw	0
  7596  002756  6E47               	movwf	_nec_ok,c
  7597                           
  7598                           ;Interrupt.c: 26: Nec_code = 0x00;
  7599  002758  0E00               	movlw	0
  7600  00275A  0100               	movlb	0	; () banked
  7601  00275C  6FF7               	movwf	_Nec_code& (0+255),b
  7602  00275E  0E00               	movlw	0
  7603  002760  6FF8               	movwf	(_Nec_code+1)& (0+255),b
  7604  002762  0E00               	movlw	0
  7605  002764  6FF9               	movwf	(_Nec_code+2)& (0+255),b
  7606  002766  0E00               	movlw	0
  7607  002768  6FFA               	movwf	(_Nec_code+3)& (0+255),b
  7608                           
  7609                           ; BSR set to: 0
  7610  00276A  0012               	return		;funcret
  7611  00276C                     __end_of_init_INTERRUPT:
  7612                           	opt stack 0
  7613                           tblptru	equ	0xFF8
  7614                           tblptrh	equ	0xFF7
  7615                           tblptrl	equ	0xFF6
  7616                           tablat	equ	0xFF5
  7617                           prodh	equ	0xFF4
  7618                           prodl	equ	0xFF3
  7619                           intcon	equ	0xFF2
  7620                           intcon2	equ	0xFF1
  7621                           postinc0	equ	0xFEE
  7622                           wreg	equ	0xFE8
  7623                           postdec1	equ	0xFE5
  7624                           fsr1l	equ	0xFE1
  7625                           indf2	equ	0xFDF
  7626                           postinc2	equ	0xFDE
  7627                           fsr2h	equ	0xFDA
  7628                           fsr2l	equ	0xFD9
  7629                           status	equ	0xFD8
  7630                           
  7631 ;; *************** function _I2C_Init *****************
  7632 ;; Defined at:
  7633 ;;		line 14 in file "I2C_Soft.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;  c               4   16[COMRAM] unsigned long 
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;		None               void
  7640 ;; Registers used:
  7641 ;;		wreg, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7647 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7650 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7651 ;;Total ram usage:        4 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    4
  7654 ;; This function calls:
  7655 ;;		_i2cHighScl
  7656 ;;		_i2cHighSda
  7657 ;; This function is called by:
  7658 ;;		_Do_Init
  7659 ;; This function uses a non-reentrant model
  7660 ;;
  7661                           
  7662                           	psect	text36
  7663  002A38                     __ptext36:
  7664                           	opt stack 0
  7665  002A38                     _I2C_Init:
  7666                           	opt stack 25
  7667                           
  7668                           ;I2C_Soft.c: 16: i2cHighScl();
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;incstack = 0
  7672  002A38  EC10  F015         	call	_i2cHighScl	;wreg free
  7673                           
  7674                           ;I2C_Soft.c: 17: i2cHighSda();
  7675  002A3C  EC37  F015         	call	_i2cHighSda	;wreg free
  7676  002A40  0012               	return		;funcret
  7677  002A42                     __end_of_I2C_Init:
  7678                           	opt stack 0
  7679                           tblptru	equ	0xFF8
  7680                           tblptrh	equ	0xFF7
  7681                           tblptrl	equ	0xFF6
  7682                           tablat	equ	0xFF5
  7683                           prodh	equ	0xFF4
  7684                           prodl	equ	0xFF3
  7685                           intcon	equ	0xFF2
  7686                           intcon2	equ	0xFF1
  7687                           postinc0	equ	0xFEE
  7688                           wreg	equ	0xFE8
  7689                           postdec1	equ	0xFE5
  7690                           fsr1l	equ	0xFE1
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           fsr2h	equ	0xFDA
  7694                           fsr2l	equ	0xFD9
  7695                           status	equ	0xFD8
  7696                           
  7697 ;; *************** function _DS1621_Init *****************
  7698 ;; Defined at:
  7699 ;;		line 21 in file "I2C_Support.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;		None
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;  Device          1   21[COMRAM] unsigned char 
  7704 ;; Return value:  Size  Location     Type
  7705 ;;		None               void
  7706 ;; Registers used:
  7707 ;;		wreg, status,2, status,0, cstack
  7708 ;; Tracked objects:
  7709 ;;		On entry : 0/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;Total ram usage:        1 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    6
  7720 ;; This function calls:
  7721 ;;		_I2C_Write_Cmd_Only
  7722 ;;		_I2C_Write_Cmd_Write_Data
  7723 ;; This function is called by:
  7724 ;;		_Do_Init
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text37
  7729  0028B4                     __ptext37:
  7730                           	opt stack 0
  7731  0028B4                     _DS1621_Init:
  7732                           	opt stack 23
  7733                           
  7734                           ;I2C_Support.c: 23: char Device = 0x48;
  7735                           
  7736                           ;incstack = 0
  7737  0028B4  0E48               	movlw	72
  7738  0028B6  6E16               	movwf	DS1621_Init@Device,c
  7739                           
  7740                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7741  0028B8  0EAC               	movlw	172
  7742  0028BA  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7743  0028BC  0E02               	movlw	2
  7744  0028BE  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7745  0028C0  5016               	movf	DS1621_Init@Device,w,c
  7746  0028C2  EC4A  F014         	call	_I2C_Write_Cmd_Write_Data
  7747                           
  7748                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7749  0028C6  0EEE               	movlw	238
  7750  0028C8  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7751  0028CA  5016               	movf	DS1621_Init@Device,w,c
  7752  0028CC  EC77  F014         	call	_I2C_Write_Cmd_Only
  7753  0028D0  0012               	return		;funcret
  7754  0028D2                     __end_of_DS1621_Init:
  7755                           	opt stack 0
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           intcon	equ	0xFF2
  7763                           intcon2	equ	0xFF1
  7764                           postinc0	equ	0xFEE
  7765                           wreg	equ	0xFE8
  7766                           postdec1	equ	0xFE5
  7767                           fsr1l	equ	0xFE1
  7768                           indf2	equ	0xFDF
  7769                           postinc2	equ	0xFDE
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7775 ;; Defined at:
  7776 ;;		line 152 in file "I2C_Soft.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  Device          1    wreg     unsigned char 
  7779 ;;  Cmd             1   18[COMRAM] unsigned char 
  7780 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;  Device          1   20[COMRAM] unsigned char 
  7783 ;; Return value:  Size  Location     Type
  7784 ;;		None               void
  7785 ;; Registers used:
  7786 ;;		wreg, status,2, status,0, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;Total ram usage:        3 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    5
  7799 ;; This function calls:
  7800 ;;		_I2C_Start
  7801 ;;		_I2C_Stop
  7802 ;;		_I2C_Write
  7803 ;; This function is called by:
  7804 ;;		_DS1621_Init
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           	psect	text38
  7809  002894                     __ptext38:
  7810                           	opt stack 0
  7811  002894                     _I2C_Write_Cmd_Write_Data:
  7812                           	opt stack 23
  7813                           
  7814                           ;incstack = 0
  7815                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7816  002894  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7817                           
  7818                           ;I2C_Soft.c: 154: I2C_Start();
  7819  002896  ECE0  F014         	call	_I2C_Start	;wreg free
  7820                           
  7821                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  7822  00289A  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7823  00289C  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7824  00289E  EC65  F013         	call	_I2C_Write
  7825                           
  7826                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  7827  0028A2  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7828  0028A4  EC65  F013         	call	_I2C_Write
  7829                           
  7830                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  7831  0028A8  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7832  0028AA  EC65  F013         	call	_I2C_Write
  7833                           
  7834                           ;I2C_Soft.c: 158: I2C_Stop();
  7835  0028AE  ECD7  F014         	call	_I2C_Stop	;wreg free
  7836  0028B2  0012               	return		;funcret
  7837  0028B4                     __end_of_I2C_Write_Cmd_Write_Data:
  7838                           	opt stack 0
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           intcon	equ	0xFF2
  7846                           intcon2	equ	0xFF1
  7847                           postinc0	equ	0xFEE
  7848                           wreg	equ	0xFE8
  7849                           postdec1	equ	0xFE5
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           fsr2h	equ	0xFDA
  7854                           fsr2l	equ	0xFD9
  7855                           status	equ	0xFD8
  7856                           
  7857 ;; *************** function _I2C_Write_Cmd_Only *****************
  7858 ;; Defined at:
  7859 ;;		line 144 in file "I2C_Soft.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  Device          1    wreg     unsigned char 
  7862 ;;  Cmd             1   18[COMRAM] unsigned char 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  Device          1   19[COMRAM] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;		None               void
  7867 ;; Registers used:
  7868 ;;		wreg, status,2, status,0, cstack
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7874 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;Total ram usage:        2 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    5
  7881 ;; This function calls:
  7882 ;;		_I2C_Start
  7883 ;;		_I2C_Stop
  7884 ;;		_I2C_Write
  7885 ;; This function is called by:
  7886 ;;		_DS1621_Init
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text39
  7891  0028EE                     __ptext39:
  7892                           	opt stack 0
  7893  0028EE                     _I2C_Write_Cmd_Only:
  7894                           	opt stack 23
  7895                           
  7896                           ;incstack = 0
  7897                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7898  0028EE  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7899                           
  7900                           ;I2C_Soft.c: 146: I2C_Start();
  7901  0028F0  ECE0  F014         	call	_I2C_Start	;wreg free
  7902                           
  7903                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  7904  0028F4  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7905  0028F6  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7906  0028F8  EC65  F013         	call	_I2C_Write
  7907                           
  7908                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  7909  0028FC  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7910  0028FE  EC65  F013         	call	_I2C_Write
  7911                           
  7912                           ;I2C_Soft.c: 149: I2C_Stop();
  7913  002902  ECD7  F014         	call	_I2C_Stop	;wreg free
  7914  002906  0012               	return		;funcret
  7915  002908                     __end_of_I2C_Write_Cmd_Only:
  7916                           	opt stack 0
  7917                           tblptru	equ	0xFF8
  7918                           tblptrh	equ	0xFF7
  7919                           tblptrl	equ	0xFF6
  7920                           tablat	equ	0xFF5
  7921                           prodh	equ	0xFF4
  7922                           prodl	equ	0xFF3
  7923                           intcon	equ	0xFF2
  7924                           intcon2	equ	0xFF1
  7925                           postinc0	equ	0xFEE
  7926                           wreg	equ	0xFE8
  7927                           postdec1	equ	0xFE5
  7928                           fsr1l	equ	0xFE1
  7929                           indf2	equ	0xFDF
  7930                           postinc2	equ	0xFDE
  7931                           fsr2h	equ	0xFDA
  7932                           fsr2l	equ	0xFD9
  7933                           status	equ	0xFD8
  7934                           
  7935 ;; *************** function _Decrease_Speed *****************
  7936 ;; Defined at:
  7937 ;;		line 71 in file "Fan_Support.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;		None
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;		None
  7942 ;; Return value:  Size  Location     Type
  7943 ;;		None               void
  7944 ;; Registers used:
  7945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;Total ram usage:        0 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    6
  7958 ;; This function calls:
  7959 ;;		_Do_Beep
  7960 ;;		_do_update_pwm
  7961 ;;		_printf
  7962 ;; This function is called by:
  7963 ;;		_main
  7964 ;; This function uses a non-reentrant model
  7965 ;;
  7966                           
  7967                           	psect	text40
  7968  0027CC                     __ptext40:
  7969                           	opt stack 0
  7970  0027CC                     _Decrease_Speed:
  7971                           	opt stack 24
  7972                           
  7973                           ;Fan_Support.c: 73: if (duty_cycle == 0)
  7974                           
  7975                           ;incstack = 0
  7976  0027CC  505B               	movf	_duty_cycle,w,c
  7977  0027CE  A4D8               	btfss	status,2,c
  7978  0027D0  D00C               	goto	l7023
  7979                           
  7980                           ;Fan_Support.c: 74: {
  7981                           ;Fan_Support.c: 75: Do_Beep();
  7982  0027D2  EC91  F014         	call	_Do_Beep	;wreg free
  7983                           
  7984                           ;Fan_Support.c: 76: printf("Duty Cycle is at 0 \r\n");
  7985  0027D6  0E63               	movlw	low STR_2
  7986  0027D8  6E1D               	movwf	printf@f,c
  7987  0027DA  0EFC               	movlw	high STR_2
  7988  0027DC  6E1E               	movwf	printf@f+1,c
  7989  0027DE  EC0E  F000         	call	_printf	;wreg free
  7990                           
  7991                           ;Fan_Support.c: 77: do_update_pwm(duty_cycle);
  7992  0027E2  505B               	movf	_duty_cycle,w,c
  7993  0027E4  ECD5  F00E         	call	_do_update_pwm
  7994                           
  7995                           ;Fan_Support.c: 78: }
  7996  0027E8  D007               	goto	l58
  7997  0027EA                     l7023:
  7998                           
  7999                           ;Fan_Support.c: 79: else
  8000                           ;Fan_Support.c: 80: {
  8001                           ;Fan_Support.c: 81: duty_cycle = duty_cycle - 5;
  8002  0027EA  505B               	movf	_duty_cycle,w,c
  8003  0027EC  0FFB               	addlw	251
  8004  0027EE  6E5B               	movwf	_duty_cycle,c
  8005                           
  8006                           ;Fan_Support.c: 82: do_update_pwm(duty_cycle);
  8007  0027F0  505B               	movf	_duty_cycle,w,c
  8008  0027F2  ECD5  F00E         	call	_do_update_pwm
  8009  0027F6  D000               	goto	l58
  8010  0027F8                     l58:
  8011  0027F8  0012               	return		;funcret
  8012  0027FA                     __end_of_Decrease_Speed:
  8013                           	opt stack 0
  8014                           tblptru	equ	0xFF8
  8015                           tblptrh	equ	0xFF7
  8016                           tblptrl	equ	0xFF6
  8017                           tablat	equ	0xFF5
  8018                           prodh	equ	0xFF4
  8019                           prodl	equ	0xFF3
  8020                           intcon	equ	0xFF2
  8021                           intcon2	equ	0xFF1
  8022                           postinc0	equ	0xFEE
  8023                           wreg	equ	0xFE8
  8024                           postdec1	equ	0xFE5
  8025                           fsr1l	equ	0xFE1
  8026                           indf2	equ	0xFDF
  8027                           postinc2	equ	0xFDE
  8028                           fsr2h	equ	0xFDA
  8029                           fsr2l	equ	0xFD9
  8030                           status	equ	0xFD8
  8031                           
  8032 ;; *************** function _printf *****************
  8033 ;; Defined at:
  8034 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  f               2   28[COMRAM] PTR const unsigned char 
  8037 ;;		 -> STR_8(15), STR_7(22), STR_6(16), STR_5(27), 
  8038 ;;		 -> STR_4(21), STR_3(30), STR_2(22), STR_1(24), 
  8039 ;; Auto vars:     Size  Location     Type
  8040 ;;  idx             1    0[BANK1 ] unsigned char 
  8041 ;;  tmpval          4    0        struct .
  8042 ;;  flag            2   19[BANK1 ] unsigned short 
  8043 ;;  width           2   16[BANK1 ] int 
  8044 ;;  val             2   13[BANK1 ] unsigned int 
  8045 ;;  ap              2   11[BANK1 ] PTR void [1]
  8046 ;;		 -> ?_printf(2), 
  8047 ;;  len             2    9[BANK1 ] unsigned int 
  8048 ;;  cp              2    1[BANK1 ] PTR const unsigned char 
  8049 ;;		 -> printf@c(1), 
  8050 ;;  c               1   18[BANK1 ] char 
  8051 ;;  prec            1   15[BANK1 ] char 
  8052 ;; Return value:  Size  Location     Type
  8053 ;;                  2   28[COMRAM] int 
  8054 ;; Registers used:
  8055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8056 ;; Tracked objects:
  8057 ;;		On entry : 0/0
  8058 ;;		On exit  : 0/0
  8059 ;;		Unchanged: 0/0
  8060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8061 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8062 ;;      Locals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Totals:        18       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;Total ram usage:       39 bytes
  8066 ;; Hardware stack levels used:    1
  8067 ;; Hardware stack levels required when called:    4
  8068 ;; This function calls:
  8069 ;;		___lwdiv
  8070 ;;		___lwmod
  8071 ;;		___wmul
  8072 ;;		_isdigit
  8073 ;;		_putch
  8074 ;; This function is called by:
  8075 ;;		_Increase_Speed
  8076 ;;		_Decrease_Speed
  8077 ;;		_main
  8078 ;; This function uses a non-reentrant model
  8079 ;;
  8080                           
  8081                           	psect	text41
  8082  00001C                     __ptext41:
  8083                           	opt stack 0
  8084  00001C                     _printf:
  8085                           	opt stack 26
  8086                           
  8087                           ;doprnt.c: 466: va_list ap;
  8088                           ;doprnt.c: 499: signed char c;
  8089                           ;doprnt.c: 501: int width;
  8090                           ;doprnt.c: 506: signed char prec;
  8091                           ;doprnt.c: 508: unsigned short flag;
  8092                           ;doprnt.c: 523: union {
  8093                           ;doprnt.c: 524: unsigned long vd;
  8094                           ;doprnt.c: 525: double integ;
  8095                           ;doprnt.c: 526: } tmpval;
  8096                           ;doprnt.c: 528: unsigned int val;
  8097                           ;doprnt.c: 529: unsigned len;
  8098                           ;doprnt.c: 530: const char * cp;
  8099                           ;doprnt.c: 533: *ap = __va_start();
  8100                           
  8101                           ;incstack = 0
  8102  00001C  0E1F               	movlw	low (?_printf+2)
  8103  00001E  0101               	movlb	1	; () banked
  8104  000020  6F80               	movwf	printf@ap& (0+255),b
  8105  000022  0E00               	movlw	high (?_printf+2)
  8106  000024  0101               	movlb	1	; () banked
  8107  000026  6F81               	movwf	(printf@ap+1)& (0+255),b
  8108                           
  8109                           ;doprnt.c: 536: while(c = *f++) {
  8110  000028  EFAA  F004         	goto	l6727
  8111  00002C                     l6421:
  8112                           
  8113                           ; BSR set to: 1
  8114                           ;doprnt.c: 538: if(c != '%')
  8115  00002C  0E25               	movlw	37
  8116  00002E  0101               	movlb	1	; () banked
  8117  000030  1987               	xorwf	printf@c& (0+255),w,b
  8118  000032  B4D8               	btfsc	status,2,c
  8119  000034  D006               	goto	l6425
  8120                           
  8121                           ; BSR set to: 1
  8122                           ;doprnt.c: 540: {
  8123                           ;doprnt.c: 541: (putch(c) );
  8124  000036  0101               	movlb	1	; () banked
  8125  000038  5187               	movf	printf@c& (0+255),w,b
  8126  00003A  EC09  F015         	call	_putch
  8127                           
  8128                           ;doprnt.c: 542: continue;
  8129  00003E  EFAA  F004         	goto	l6727
  8130  000042                     l6425:
  8131                           
  8132                           ;doprnt.c: 543: }
  8133                           ;doprnt.c: 546: width = 0;
  8134  000042  0E00               	movlw	0
  8135  000044  0101               	movlb	1	; () banked
  8136  000046  6F86               	movwf	(printf@width+1)& (0+255),b
  8137  000048  0E00               	movlw	0
  8138  00004A  6F85               	movwf	printf@width& (0+255),b
  8139                           
  8140                           ;doprnt.c: 548: flag = 0;
  8141  00004C  0E00               	movlw	0
  8142  00004E  0101               	movlb	1	; () banked
  8143  000050  6F89               	movwf	(printf@flag+1)& (0+255),b
  8144  000052  0E00               	movlw	0
  8145  000054  6F88               	movwf	printf@flag& (0+255),b
  8146                           
  8147                           ; BSR set to: 1
  8148                           ;doprnt.c: 551: switch(*f) {
  8149                           
  8150                           ;doprnt.c: 550: for(;;) {
  8151  000056  D00F               	goto	l6437
  8152  000058                     l6427:
  8153                           
  8154                           ;doprnt.c: 554: flag |= 0x08;
  8155  000058  0101               	movlb	1	; () banked
  8156  00005A  8788               	bsf	printf@flag& (0+255),3,b
  8157  00005C  D008               	goto	L8
  8158  00005E                     l6429:
  8159                           
  8160                           ;doprnt.c: 561: flag |= 0x01;
  8161  00005E  0101               	movlb	1	; () banked
  8162  000060  8188               	bsf	printf@flag& (0+255),0,b
  8163  000062  D005               	goto	L8
  8164  000064                     l6431:
  8165                           
  8166                           ;doprnt.c: 574: flag |= 0x800;
  8167  000064  0101               	movlb	1	; () banked
  8168  000066  8789               	bsf	(printf@flag+1)& (0+255),3,b
  8169  000068  D002               	goto	L8
  8170  00006A                     l6433:
  8171                           
  8172                           ;doprnt.c: 580: flag |= 0x04;
  8173  00006A  0101               	movlb	1	; () banked
  8174  00006C  8588               	bsf	printf@flag& (0+255),2,b
  8175  00006E                     L8:
  8176                           
  8177                           ;doprnt.c: 581: f++;
  8178  00006E  4A1D               	infsnz	printf@f,f,c
  8179  000070  2A1E               	incf	printf@f+1,f,c
  8180                           
  8181                           ;doprnt.c: 582: continue;
  8182  000072  D001               	goto	l6437
  8183                           
  8184                           ; BSR set to: 1
  8185                           ;doprnt.c: 584: }
  8186  000074  D014               	goto	l818
  8187  000076                     l6437:
  8188  000076  C01D  FFF6         	movff	printf@f,tblptrl
  8189  00007A  C01E  FFF7         	movff	printf@f+1,tblptrh
  8190  00007E                     	if	0	;tblptru may be non-zero
  8191  00007E                     	endif
  8192  00007E                     	if	0	;tblptru may be non-zero
  8193  00007E                     	endif
  8194  00007E  0008               	tblrd		*
  8195  000080  50F5               	movf	tablat,w,c
  8196                           
  8197                           ; Switch size 1, requested type "space"
  8198                           ; Number of cases is 4, Range of values is 32 to 48
  8199                           ; switch strategies available:
  8200                           ; Name         Instructions Cycles
  8201                           ; simple_byte           13     7 (average)
  8202                           ;	Chosen strategy is simple_byte
  8203  000082  0A20               	xorlw	32	; case 32
  8204  000084  B4D8               	btfsc	status,2,c
  8205  000086  D7EB               	goto	l6429
  8206  000088  0A03               	xorlw	3	; case 35
  8207  00008A  B4D8               	btfsc	status,2,c
  8208  00008C  D7EB               	goto	l6431
  8209  00008E  0A0E               	xorlw	14	; case 45
  8210  000090  B4D8               	btfsc	status,2,c
  8211  000092  D7E2               	goto	l6427
  8212  000094  0A1D               	xorlw	29	; case 48
  8213  000096  B4D8               	btfsc	status,2,c
  8214  000098  D7E8               	goto	l6433
  8215                           
  8216                           ;doprnt.c: 585: break;
  8217  00009A  D001               	goto	l818
  8218                           
  8219                           ;doprnt.c: 586: }
  8220  00009C  D7EC               	goto	l6437
  8221  00009E                     l818:
  8222                           
  8223                           ;doprnt.c: 593: if(flag & 0x08)
  8224  00009E  0101               	movlb	1	; () banked
  8225  0000A0  A788               	btfss	printf@flag& (0+255),3,b
  8226  0000A2  D003               	goto	l6441
  8227                           
  8228                           ; BSR set to: 1
  8229                           ;doprnt.c: 594: flag &= ~0x04;
  8230  0000A4  0101               	movlb	1	; () banked
  8231  0000A6  9588               	bcf	printf@flag& (0+255),2,b
  8232  0000A8  D000               	goto	l6441
  8233  0000AA                     l6441:
  8234                           
  8235                           ; BSR set to: 1
  8236                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8237  0000AA  C01D  FFF6         	movff	printf@f,tblptrl
  8238  0000AE  C01E  FFF7         	movff	printf@f+1,tblptrh
  8239  0000B2                     	if	0	;tblptru may be non-zero
  8240  0000B2                     	endif
  8241  0000B2                     	if	0	;tblptru may be non-zero
  8242  0000B2                     	endif
  8243  0000B2  0008               	tblrd		*
  8244  0000B4  50F5               	movf	tablat,w,c
  8245  0000B6  EC39  F014         	call	_isdigit
  8246  0000BA  A0D8               	btfss	status,0,c
  8247  0000BC  D038               	goto	l6453
  8248                           
  8249                           ;doprnt.c: 598: width = 0;
  8250  0000BE  0E00               	movlw	0
  8251  0000C0  0101               	movlb	1	; () banked
  8252  0000C2  6F86               	movwf	(printf@width+1)& (0+255),b
  8253  0000C4  0E00               	movlw	0
  8254  0000C6  6F85               	movwf	printf@width& (0+255),b
  8255  0000C8  D000               	goto	l6445
  8256  0000CA                     l6445:
  8257                           
  8258                           ;doprnt.c: 600: width *= 10;
  8259  0000CA  C185  F011         	movff	printf@width,___wmul@multiplier
  8260  0000CE  C186  F012         	movff	printf@width+1,___wmul@multiplier+1
  8261  0000D2  0E00               	movlw	0
  8262  0000D4  6E14               	movwf	___wmul@multiplicand+1,c
  8263  0000D6  0E0A               	movlw	10
  8264  0000D8  6E13               	movwf	___wmul@multiplicand,c
  8265  0000DA  EC12  F014         	call	___wmul	;wreg free
  8266  0000DE  C011  F185         	movff	?___wmul,printf@width
  8267  0000E2  C012  F186         	movff	?___wmul+1,printf@width+1
  8268                           
  8269                           ;doprnt.c: 601: width += *f++ - '0';
  8270  0000E6  0ED0               	movlw	208
  8271  0000E8  6E2B               	movwf	??_printf& (0+255),c
  8272  0000EA  0EFF               	movlw	255
  8273  0000EC  6E2C               	movwf	(??_printf+1)& (0+255),c
  8274  0000EE  C01D  FFF6         	movff	printf@f,tblptrl
  8275  0000F2  C01E  FFF7         	movff	printf@f+1,tblptrh
  8276  0000F6                     	if	0	;tblptru may be non-zero
  8277  0000F6                     	endif
  8278  0000F6                     	if	0	;tblptru may be non-zero
  8279  0000F6                     	endif
  8280  0000F6  0008               	tblrd		*
  8281  0000F8  50F5               	movf	tablat,w,c
  8282  0000FA  6E2D               	movwf	(??_printf+2)& (0+255),c
  8283  0000FC  6A2E               	clrf	(??_printf+3)& (0+255),c
  8284  0000FE  502B               	movf	??_printf,w,c
  8285  000100  262D               	addwf	??_printf+2,f,c
  8286  000102  502C               	movf	??_printf+1,w,c
  8287  000104  222E               	addwfc	??_printf+3,f,c
  8288  000106  502D               	movf	??_printf+2,w,c
  8289  000108  0101               	movlb	1	; () banked
  8290  00010A  2785               	addwf	printf@width& (0+255),f,b
  8291  00010C  502E               	movf	??_printf+3,w,c
  8292  00010E  0101               	movlb	1	; () banked
  8293  000110  2386               	addwfc	(printf@width+1)& (0+255),f,b
  8294                           
  8295                           ; BSR set to: 1
  8296  000112  4A1D               	infsnz	printf@f,f,c
  8297  000114  2A1E               	incf	printf@f+1,f,c
  8298                           
  8299                           ; BSR set to: 1
  8300                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8301  000116  C01D  FFF6         	movff	printf@f,tblptrl
  8302  00011A  C01E  FFF7         	movff	printf@f+1,tblptrh
  8303  00011E                     	if	0	;tblptru may be non-zero
  8304  00011E                     	endif
  8305  00011E                     	if	0	;tblptru may be non-zero
  8306  00011E                     	endif
  8307  00011E  0008               	tblrd		*
  8308  000120  50F5               	movf	tablat,w,c
  8309  000122  EC39  F014         	call	_isdigit
  8310  000126  A0D8               	btfss	status,0,c
  8311  000128  D01B               	goto	l6461
  8312  00012A  D7CF               	goto	l6445
  8313                           
  8314                           ;doprnt.c: 604: } else if(*f == '*') {
  8315  00012C  D019               	goto	l6461
  8316  00012E                     l6453:
  8317  00012E  C01D  FFF6         	movff	printf@f,tblptrl
  8318  000132  C01E  FFF7         	movff	printf@f+1,tblptrh
  8319  000136                     	if	0	;tblptru may be non-zero
  8320  000136                     	endif
  8321  000136                     	if	0	;tblptru may be non-zero
  8322  000136                     	endif
  8323  000136  0008               	tblrd		*
  8324  000138  50F5               	movf	tablat,w,c
  8325  00013A  0A2A               	xorlw	42
  8326  00013C  A4D8               	btfss	status,2,c
  8327  00013E  D010               	goto	l6461
  8328                           
  8329                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  8330  000140  C180  FFD9         	movff	printf@ap,fsr2l
  8331  000144  C181  FFDA         	movff	printf@ap+1,fsr2h
  8332  000148  CFDE F185          	movff	postinc2,printf@width
  8333  00014C  CFDD F186          	movff	postdec2,printf@width+1
  8334  000150  0E02               	movlw	2
  8335  000152  0101               	movlb	1	; () banked
  8336  000154  2780               	addwf	printf@ap& (0+255),f,b
  8337  000156  0E00               	movlw	0
  8338  000158  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8339                           
  8340                           ; BSR set to: 1
  8341                           ;doprnt.c: 606: f++;
  8342  00015A  4A1D               	infsnz	printf@f,f,c
  8343  00015C  2A1E               	incf	printf@f+1,f,c
  8344                           
  8345                           ; BSR set to: 1
  8346  00015E  D000               	goto	l6461
  8347  000160                     l6461:
  8348                           
  8349                           ;doprnt.c: 608: }
  8350                           ;doprnt.c: 611: if(*f == '.') {
  8351  000160  C01D  FFF6         	movff	printf@f,tblptrl
  8352  000164  C01E  FFF7         	movff	printf@f+1,tblptrh
  8353  000168                     	if	0	;tblptru may be non-zero
  8354  000168                     	endif
  8355  000168                     	if	0	;tblptru may be non-zero
  8356  000168                     	endif
  8357  000168  0008               	tblrd		*
  8358  00016A  50F5               	movf	tablat,w,c
  8359  00016C  0A2E               	xorlw	46
  8360  00016E  A4D8               	btfss	status,2,c
  8361  000170  D03E               	goto	l6481
  8362                           
  8363                           ;doprnt.c: 612: flag |= 0x4000;
  8364  000172  0101               	movlb	1	; () banked
  8365  000174  8D89               	bsf	(printf@flag+1)& (0+255),6,b
  8366                           
  8367                           ;doprnt.c: 613: f++;
  8368  000176  4A1D               	infsnz	printf@f,f,c
  8369  000178  2A1E               	incf	printf@f+1,f,c
  8370                           
  8371                           ; BSR set to: 1
  8372                           ;doprnt.c: 615: if(*f == '*') {
  8373  00017A  C01D  FFF6         	movff	printf@f,tblptrl
  8374  00017E  C01E  FFF7         	movff	printf@f+1,tblptrh
  8375  000182                     	if	0	;tblptru may be non-zero
  8376  000182                     	endif
  8377  000182                     	if	0	;tblptru may be non-zero
  8378  000182                     	endif
  8379  000182  0008               	tblrd		*
  8380  000184  50F5               	movf	tablat,w,c
  8381  000186  0A2A               	xorlw	42
  8382  000188  A4D8               	btfss	status,2,c
  8383  00018A  D00F               	goto	l6473
  8384                           
  8385                           ; BSR set to: 1
  8386                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  8387  00018C  C180  FFD9         	movff	printf@ap,fsr2l
  8388  000190  C181  FFDA         	movff	printf@ap+1,fsr2h
  8389  000194  50DF               	movf	indf2,w,c
  8390  000196  0101               	movlb	1	; () banked
  8391  000198  6F84               	movwf	printf@prec& (0+255),b
  8392                           
  8393                           ; BSR set to: 1
  8394  00019A  0E02               	movlw	2
  8395  00019C  0101               	movlb	1	; () banked
  8396  00019E  2780               	addwf	printf@ap& (0+255),f,b
  8397  0001A0  0E00               	movlw	0
  8398  0001A2  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8399                           
  8400                           ; BSR set to: 1
  8401                           ;doprnt.c: 617: f++;
  8402  0001A4  4A1D               	infsnz	printf@f,f,c
  8403  0001A6  2A1E               	incf	printf@f+1,f,c
  8404                           
  8405                           ;doprnt.c: 618: } else
  8406  0001A8  D0C1               	goto	l6531
  8407  0001AA                     l6473:
  8408                           
  8409                           ; BSR set to: 1
  8410                           ;doprnt.c: 620: {
  8411                           ;doprnt.c: 621: prec = 0;
  8412  0001AA  0E00               	movlw	0
  8413  0001AC  0101               	movlb	1	; () banked
  8414  0001AE  6F84               	movwf	printf@prec& (0+255),b
  8415                           
  8416                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  8417  0001B0  D012               	goto	l6479
  8418  0001B2                     l6475:
  8419                           
  8420                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  8421  0001B2  C01D  FFF6         	movff	printf@f,tblptrl
  8422  0001B6  C01E  FFF7         	movff	printf@f+1,tblptrh
  8423  0001BA                     	if	0	;tblptru may be non-zero
  8424  0001BA                     	endif
  8425  0001BA                     	if	0	;tblptru may be non-zero
  8426  0001BA                     	endif
  8427  0001BA  0008               	tblrd		*
  8428  0001BC  CFF5 F02B          	movff	tablat,??_printf
  8429  0001C0  0101               	movlb	1	; () banked
  8430  0001C2  5184               	movf	printf@prec& (0+255),w,b
  8431  0001C4  0D0A               	mullw	10
  8432  0001C6  50F3               	movf	prodl,w,c
  8433  0001C8  242B               	addwf	??_printf,w,c
  8434  0001CA  0FD0               	addlw	208
  8435  0001CC  0101               	movlb	1	; () banked
  8436  0001CE  6F84               	movwf	printf@prec& (0+255),b
  8437                           
  8438                           ; BSR set to: 1
  8439  0001D0  4A1D               	infsnz	printf@f,f,c
  8440  0001D2  2A1E               	incf	printf@f+1,f,c
  8441  0001D4  D000               	goto	l6479
  8442  0001D6                     l6479:
  8443                           
  8444                           ; BSR set to: 1
  8445  0001D6  C01D  FFF6         	movff	printf@f,tblptrl
  8446  0001DA  C01E  FFF7         	movff	printf@f+1,tblptrh
  8447  0001DE                     	if	0	;tblptru may be non-zero
  8448  0001DE                     	endif
  8449  0001DE                     	if	0	;tblptru may be non-zero
  8450  0001DE                     	endif
  8451  0001DE  0008               	tblrd		*
  8452  0001E0  50F5               	movf	tablat,w,c
  8453  0001E2  EC39  F014         	call	_isdigit
  8454  0001E6  A0D8               	btfss	status,0,c
  8455  0001E8  D0A1               	goto	l6531
  8456  0001EA  D7E3               	goto	l6475
  8457                           
  8458                           ;doprnt.c: 624: }
  8459                           ;doprnt.c: 625: } else {
  8460  0001EC  D09F               	goto	l6531
  8461  0001EE                     l6481:
  8462                           
  8463                           ;doprnt.c: 626: prec = 0;
  8464  0001EE  0E00               	movlw	0
  8465  0001F0  0101               	movlb	1	; () banked
  8466  0001F2  6F84               	movwf	printf@prec& (0+255),b
  8467                           
  8468                           ; BSR set to: 1
  8469                           ;doprnt.c: 630: }
  8470                           ;doprnt.c: 635: switch(c = *f++) {
  8471  0001F4  D09B               	goto	l6531
  8472                           
  8473                           ; BSR set to: 1
  8474                           ;doprnt.c: 638: goto alldone;
  8475                           
  8476                           ;doprnt.c: 637: case 0:
  8477  0001F6  D3BE               	goto	l937
  8478  0001F8                     l6483:
  8479                           
  8480                           ; BSR set to: 1
  8481                           ;doprnt.c: 691: flag |= 0x40;
  8482  0001F8  0101               	movlb	1	; () banked
  8483  0001FA  8D88               	bsf	printf@flag& (0+255),6,b
  8484                           
  8485                           ; BSR set to: 1
  8486                           ;doprnt.c: 698: case 'i':
  8487                           ;doprnt.c: 699: break;
  8488                           
  8489                           ; BSR set to: 1
  8490                           
  8491                           ;doprnt.c: 697: case 'd':
  8492                           
  8493                           ;doprnt.c: 693: break;
  8494  0001FC  D0BB               	goto	l6533
  8495  0001FE                     l6485:
  8496                           
  8497                           ; BSR set to: 1
  8498                           ;doprnt.c: 714: flag |= 0x20;
  8499  0001FE  0101               	movlb	1	; () banked
  8500  000200  8B88               	bsf	printf@flag& (0+255),5,b
  8501  000202                     l840:
  8502                           
  8503                           ; BSR set to: 1
  8504                           ;doprnt.c: 721: flag |= 0x80;
  8505  000202  0101               	movlb	1	; () banked
  8506  000204  8F88               	bsf	printf@flag& (0+255),7,b
  8507                           
  8508                           ;doprnt.c: 723: break;
  8509  000206  D0B6               	goto	l6533
  8510  000208                     l6487:
  8511                           
  8512                           ; BSR set to: 1
  8513                           ;doprnt.c: 753: if(prec && prec < len)
  8514  000208  0101               	movlb	1	; () banked
  8515  00020A  5184               	movf	printf@prec& (0+255),w,b
  8516  00020C  0101               	movlb	1	; () banked
  8517  00020E  B4D8               	btfsc	status,2,c
  8518  000210  D015               	goto	l6493
  8519                           
  8520                           ; BSR set to: 1
  8521  000212  C184  F02B         	movff	printf@prec,??_printf
  8522  000216  6A2C               	clrf	(??_printf+1)& (0+255),c
  8523  000218  BE2B               	btfsc	??_printf& (0+255),7,c
  8524  00021A  062C               	decf	(??_printf+1)& (0+255),f,c
  8525  00021C  0101               	movlb	1	; () banked
  8526  00021E  517E               	movf	printf@len& (0+255),w,b
  8527  000220  5C2B               	subwf	??_printf,w,c
  8528  000222  0101               	movlb	1	; () banked
  8529  000224  517F               	movf	(printf@len+1)& (0+255),w,b
  8530  000226  582C               	subwfb	??_printf+1,w,c
  8531  000228  B0D8               	btfsc	status,0,c
  8532  00022A  D008               	goto	l6493
  8533                           
  8534                           ; BSR set to: 1
  8535                           ;doprnt.c: 754: len = prec;
  8536  00022C  0101               	movlb	1	; () banked
  8537  00022E  5184               	movf	printf@prec& (0+255),w,b
  8538  000230  0101               	movlb	1	; () banked
  8539  000232  6F7E               	movwf	printf@len& (0+255),b
  8540  000234  6B7F               	clrf	(printf@len+1)& (0+255),b
  8541  000236  BF7E               	btfsc	printf@len& (0+255),7,b
  8542  000238  077F               	decf	(printf@len+1)& (0+255),f,b
  8543  00023A  D000               	goto	l6493
  8544  00023C                     l6493:
  8545                           
  8546                           ; BSR set to: 1
  8547                           ;doprnt.c: 757: if(width > len)
  8548  00023C  0101               	movlb	1	; () banked
  8549  00023E  5185               	movf	printf@width& (0+255),w,b
  8550  000240  0101               	movlb	1	; () banked
  8551  000242  5D7E               	subwf	printf@len& (0+255),w,b
  8552  000244  0101               	movlb	1	; () banked
  8553  000246  5186               	movf	(printf@width+1)& (0+255),w,b
  8554  000248  0101               	movlb	1	; () banked
  8555  00024A  597F               	subwfb	(printf@len+1)& (0+255),w,b
  8556  00024C  B0D8               	btfsc	status,0,c
  8557  00024E  D009               	goto	l6497
  8558                           
  8559                           ; BSR set to: 1
  8560                           ;doprnt.c: 758: width -= len;
  8561  000250  0101               	movlb	1	; () banked
  8562  000252  517E               	movf	printf@len& (0+255),w,b
  8563  000254  0101               	movlb	1	; () banked
  8564  000256  5F85               	subwf	printf@width& (0+255),f,b
  8565  000258  0101               	movlb	1	; () banked
  8566  00025A  517F               	movf	(printf@len+1)& (0+255),w,b
  8567  00025C  0101               	movlb	1	; () banked
  8568  00025E  5B86               	subwfb	(printf@width+1)& (0+255),f,b
  8569  000260  D006               	goto	l6499
  8570  000262                     l6497:
  8571                           
  8572                           ; BSR set to: 1
  8573                           ;doprnt.c: 759: else
  8574                           ;doprnt.c: 760: width = 0;
  8575  000262  0E00               	movlw	0
  8576  000264  0101               	movlb	1	; () banked
  8577  000266  6F86               	movwf	(printf@width+1)& (0+255),b
  8578  000268  0E00               	movlw	0
  8579  00026A  6F85               	movwf	printf@width& (0+255),b
  8580  00026C  D000               	goto	l6499
  8581  00026E                     l6499:
  8582                           
  8583                           ; BSR set to: 1
  8584                           ;doprnt.c: 762: if(!(flag & 0x08))
  8585  00026E  0101               	movlb	1	; () banked
  8586  000270  A788               	btfss	printf@flag& (0+255),3,b
  8587  000272  D006               	goto	l6505
  8588  000274  D01D               	goto	l6511
  8589                           
  8590                           ; BSR set to: 1
  8591                           ;doprnt.c: 764: while(width--)
  8592  000276  D004               	goto	l6505
  8593  000278                     l6503:
  8594                           
  8595                           ; BSR set to: 1
  8596                           ;doprnt.c: 765: (putch(' ') );
  8597  000278  0E20               	movlw	32
  8598  00027A  EC09  F015         	call	_putch
  8599  00027E  D000               	goto	l6505
  8600  000280                     l6505:
  8601  000280  0101               	movlb	1	; () banked
  8602  000282  0785               	decf	printf@width& (0+255),f,b
  8603  000284  A0D8               	btfss	status,0,c
  8604  000286  0786               	decf	(printf@width+1)& (0+255),f,b
  8605  000288  0101               	movlb	1	; () banked
  8606  00028A  2985               	incf	printf@width& (0+255),w,b
  8607  00028C  E1F5               	bnz	l6503
  8608  00028E  0101               	movlb	1	; () banked
  8609  000290  2986               	incf	(printf@width+1)& (0+255),w,b
  8610  000292  B4D8               	btfsc	status,2,c
  8611  000294  D00D               	goto	l6511
  8612  000296  D7F0               	goto	l6503
  8613                           
  8614                           ; BSR set to: 1
  8615                           ;doprnt.c: 767: while(len--)
  8616                           
  8617                           ; BSR set to: 1
  8618  000298  D00B               	goto	l6511
  8619  00029A                     l6507:
  8620                           
  8621                           ; BSR set to: 1
  8622                           ;doprnt.c: 768: (putch(*cp++) );
  8623  00029A  C176  FFD9         	movff	printf@cp,fsr2l
  8624  00029E  C177  FFDA         	movff	printf@cp+1,fsr2h
  8625  0002A2  50DF               	movf	indf2,w,c
  8626  0002A4  EC09  F015         	call	_putch
  8627  0002A8  0101               	movlb	1	; () banked
  8628  0002AA  4B76               	infsnz	printf@cp& (0+255),f,b
  8629  0002AC  2B77               	incf	(printf@cp+1)& (0+255),f,b
  8630  0002AE  D000               	goto	l6511
  8631  0002B0                     l6511:
  8632                           
  8633                           ; BSR set to: 1
  8634  0002B0  0101               	movlb	1	; () banked
  8635  0002B2  077E               	decf	printf@len& (0+255),f,b
  8636  0002B4  A0D8               	btfss	status,0,c
  8637  0002B6  077F               	decf	(printf@len+1)& (0+255),f,b
  8638  0002B8  0101               	movlb	1	; () banked
  8639  0002BA  297E               	incf	printf@len& (0+255),w,b
  8640  0002BC  E1EE               	bnz	l6507
  8641  0002BE  0101               	movlb	1	; () banked
  8642  0002C0  297F               	incf	(printf@len+1)& (0+255),w,b
  8643  0002C2  A4D8               	btfss	status,2,c
  8644  0002C4  D7EA               	goto	l6507
  8645                           
  8646                           ; BSR set to: 1
  8647                           ;doprnt.c: 770: if(flag & 0x08)
  8648  0002C6  0101               	movlb	1	; () banked
  8649  0002C8  B788               	btfsc	printf@flag& (0+255),3,b
  8650  0002CA  D006               	goto	l6517
  8651  0002CC  D343               	goto	l6727
  8652                           
  8653                           ; BSR set to: 1
  8654                           ;doprnt.c: 771: while(width--)
  8655  0002CE  D004               	goto	l6517
  8656  0002D0                     l6515:
  8657                           
  8658                           ; BSR set to: 1
  8659                           ;doprnt.c: 772: (putch(' ') );
  8660  0002D0  0E20               	movlw	32
  8661  0002D2  EC09  F015         	call	_putch
  8662  0002D6  D000               	goto	l6517
  8663  0002D8                     l6517:
  8664  0002D8  0101               	movlb	1	; () banked
  8665  0002DA  0785               	decf	printf@width& (0+255),f,b
  8666  0002DC  A0D8               	btfss	status,0,c
  8667  0002DE  0786               	decf	(printf@width+1)& (0+255),f,b
  8668  0002E0  0101               	movlb	1	; () banked
  8669  0002E2  2985               	incf	printf@width& (0+255),w,b
  8670  0002E4  E1F5               	bnz	l6515
  8671  0002E6  0101               	movlb	1	; () banked
  8672  0002E8  2986               	incf	(printf@width+1)& (0+255),w,b
  8673  0002EA  B4D8               	btfsc	status,2,c
  8674  0002EC  D333               	goto	l6727
  8675  0002EE  D7F0               	goto	l6515
  8676                           
  8677                           ; BSR set to: 1
  8678                           ;doprnt.c: 774: continue;
  8679                           
  8680                           ; BSR set to: 1
  8681  0002F0  D331               	goto	l6727
  8682  0002F2                     l6519:
  8683                           
  8684                           ; BSR set to: 1
  8685                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8686  0002F2  C180  FFD9         	movff	printf@ap,fsr2l
  8687  0002F6  C181  FFDA         	movff	printf@ap+1,fsr2h
  8688  0002FA  50DF               	movf	indf2,w,c
  8689  0002FC  0101               	movlb	1	; () banked
  8690  0002FE  6F87               	movwf	printf@c& (0+255),b
  8691                           
  8692                           ; BSR set to: 1
  8693  000300  0E02               	movlw	2
  8694  000302  0101               	movlb	1	; () banked
  8695  000304  2780               	addwf	printf@ap& (0+255),f,b
  8696  000306  0E00               	movlw	0
  8697  000308  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8698  00030A  D000               	goto	l6523
  8699  00030C                     l6523:
  8700                           
  8701                           ; BSR set to: 1
  8702                           ;doprnt.c: 805: cp = (char *)&c;
  8703  00030C  0E87               	movlw	low printf@c
  8704  00030E  0101               	movlb	1	; () banked
  8705  000310  6F76               	movwf	printf@cp& (0+255),b
  8706  000312  0E01               	movlw	high printf@c
  8707  000314  0101               	movlb	1	; () banked
  8708  000316  6F77               	movwf	(printf@cp+1)& (0+255),b
  8709                           
  8710                           ; BSR set to: 1
  8711                           ;doprnt.c: 806: len = 1;
  8712  000318  0E00               	movlw	0
  8713  00031A  0101               	movlb	1	; () banked
  8714  00031C  6F7F               	movwf	(printf@len+1)& (0+255),b
  8715  00031E  0E01               	movlw	1
  8716  000320  6F7E               	movwf	printf@len& (0+255),b
  8717                           
  8718                           ;doprnt.c: 807: goto dostring;
  8719  000322  D772               	goto	l6487
  8720  000324                     l6527:
  8721                           
  8722                           ; BSR set to: 1
  8723                           ;doprnt.c: 818: flag |= 0xC0;
  8724  000324  0EC0               	movlw	192
  8725  000326  0101               	movlb	1	; () banked
  8726  000328  1388               	iorwf	printf@flag& (0+255),f,b
  8727                           
  8728                           ; BSR set to: 1
  8729                           ;doprnt.c: 822: }
  8730                           
  8731                           ;doprnt.c: 819: break;
  8732  00032A  D024               	goto	l6533
  8733  00032C                     l6531:
  8734  00032C  C01D  FFF6         	movff	printf@f,tblptrl
  8735  000330  C01E  FFF7         	movff	printf@f+1,tblptrh
  8736  000334  4A1D               	infsnz	printf@f,f,c
  8737  000336  2A1E               	incf	printf@f+1,f,c
  8738  000338                     	if	0	;tblptru may be non-zero
  8739  000338                     	endif
  8740  000338                     	if	0	;tblptru may be non-zero
  8741  000338                     	endif
  8742  000338  0008               	tblrd		*
  8743  00033A  CFF5 F187          	movff	tablat,printf@c
  8744  00033E  0101               	movlb	1	; () banked
  8745  000340  5187               	movf	printf@c& (0+255),w,b
  8746                           
  8747                           ; Switch size 1, requested type "space"
  8748                           ; Number of cases is 8, Range of values is 0 to 120
  8749                           ; switch strategies available:
  8750                           ; Name         Instructions Cycles
  8751                           ; simple_byte           25    13 (average)
  8752                           ;	Chosen strategy is simple_byte
  8753  000342  0A00               	xorlw	0	; case 0
  8754  000344  B4D8               	btfsc	status,2,c
  8755  000346  D316               	goto	l937
  8756  000348  0A58               	xorlw	88	; case 88
  8757  00034A  B4D8               	btfsc	status,2,c
  8758  00034C  D758               	goto	l6485
  8759  00034E  0A3B               	xorlw	59	; case 99
  8760  000350  B4D8               	btfsc	status,2,c
  8761  000352  D7CF               	goto	l6519
  8762  000354  0A07               	xorlw	7	; case 100
  8763  000356  B4D8               	btfsc	status,2,c
  8764  000358  D00D               	goto	l6533
  8765  00035A  0A0D               	xorlw	13	; case 105
  8766  00035C  B4D8               	btfsc	status,2,c
  8767  00035E  D00A               	goto	l6533
  8768  000360  0A06               	xorlw	6	; case 111
  8769  000362  B4D8               	btfsc	status,2,c
  8770  000364  D749               	goto	l6483
  8771  000366  0A1A               	xorlw	26	; case 117
  8772  000368  B4D8               	btfsc	status,2,c
  8773  00036A  D7DC               	goto	l6527
  8774  00036C  0A0D               	xorlw	13	; case 120
  8775  00036E  B4D8               	btfsc	status,2,c
  8776  000370  D748               	goto	l840
  8777  000372  D7CC               	goto	l6523
  8778  000374                     l6533:
  8779                           
  8780                           ; BSR set to: 1
  8781                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8782  000374  0EC0               	movlw	192
  8783  000376  0101               	movlb	1	; () banked
  8784  000378  1588               	andwf	printf@flag& (0+255),w,b
  8785  00037A  6E2B               	movwf	??_printf& (0+255),c
  8786  00037C  0E00               	movlw	0
  8787  00037E  0101               	movlb	1	; () banked
  8788  000380  1589               	andwf	(printf@flag+1)& (0+255),w,b
  8789  000382  6E2C               	movwf	(??_printf+1)& (0+255),c
  8790  000384  502B               	movf	??_printf,w,c
  8791  000386  102C               	iorwf	??_printf+1,w,c
  8792  000388  A4D8               	btfss	status,2,c
  8793  00038A  D019               	goto	l6545
  8794                           
  8795                           ; BSR set to: 1
  8796                           ;doprnt.c: 1253: {
  8797                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8798  00038C  C180  FFD9         	movff	printf@ap,fsr2l
  8799  000390  C181  FFDA         	movff	printf@ap+1,fsr2h
  8800  000394  CFDE F182          	movff	postinc2,printf@val
  8801  000398  CFDD F183          	movff	postdec2,printf@val+1
  8802                           
  8803                           ; BSR set to: 1
  8804  00039C  0E02               	movlw	2
  8805  00039E  0101               	movlb	1	; () banked
  8806  0003A0  2780               	addwf	printf@ap& (0+255),f,b
  8807  0003A2  0E00               	movlw	0
  8808  0003A4  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8809                           
  8810                           ; BSR set to: 1
  8811                           ;doprnt.c: 1261: if((int)val < 0) {
  8812  0003A6  0101               	movlb	1	; () banked
  8813  0003A8  AF83               	btfss	(printf@val+1)& (0+255),7,b
  8814  0003AA  D017               	goto	l6549
  8815                           
  8816                           ; BSR set to: 1
  8817                           ;doprnt.c: 1262: flag |= 0x03;
  8818  0003AC  0E03               	movlw	3
  8819  0003AE  0101               	movlb	1	; () banked
  8820  0003B0  1388               	iorwf	printf@flag& (0+255),f,b
  8821                           
  8822                           ; BSR set to: 1
  8823                           ;doprnt.c: 1263: val = -val;
  8824  0003B2  0101               	movlb	1	; () banked
  8825  0003B4  6D82               	negf	printf@val& (0+255),b
  8826  0003B6  1F83               	comf	(printf@val+1)& (0+255),f,b
  8827  0003B8  B0D8               	btfsc	status,0,c
  8828  0003BA  2B83               	incf	(printf@val+1)& (0+255),f,b
  8829                           
  8830                           ; BSR set to: 1
  8831                           ;doprnt.c: 1264: }
  8832                           ;doprnt.c: 1266: }
  8833  0003BC  D00E               	goto	l6549
  8834  0003BE                     l6545:
  8835                           
  8836                           ; BSR set to: 1
  8837                           ;doprnt.c: 1268: else
  8838                           ;doprnt.c: 1273: {
  8839                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8840  0003BE  C180  FFD9         	movff	printf@ap,fsr2l
  8841  0003C2  C181  FFDA         	movff	printf@ap+1,fsr2h
  8842  0003C6  CFDE F182          	movff	postinc2,printf@val
  8843  0003CA  CFDD F183          	movff	postdec2,printf@val+1
  8844                           
  8845                           ; BSR set to: 1
  8846  0003CE  0E02               	movlw	2
  8847  0003D0  0101               	movlb	1	; () banked
  8848  0003D2  2780               	addwf	printf@ap& (0+255),f,b
  8849  0003D4  0E00               	movlw	0
  8850  0003D6  2381               	addwfc	(printf@ap+1)& (0+255),f,b
  8851  0003D8  D000               	goto	l6549
  8852  0003DA                     l6549:
  8853                           
  8854                           ; BSR set to: 1
  8855                           ;doprnt.c: 1287: }
  8856                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8857  0003DA  0101               	movlb	1	; () banked
  8858  0003DC  5184               	movf	printf@prec& (0+255),w,b
  8859  0003DE  0101               	movlb	1	; () banked
  8860  0003E0  A4D8               	btfss	status,2,c
  8861  0003E2  D073               	goto	l6599
  8862                           
  8863                           ; BSR set to: 1
  8864  0003E4  0101               	movlb	1	; () banked
  8865  0003E6  5182               	movf	printf@val& (0+255),w,b
  8866  0003E8  0101               	movlb	1	; () banked
  8867  0003EA  1183               	iorwf	(printf@val+1)& (0+255),w,b
  8868  0003EC  A4D8               	btfss	status,2,c
  8869  0003EE  D06D               	goto	l6599
  8870                           
  8871                           ; BSR set to: 1
  8872                           ;doprnt.c: 1291: prec++;
  8873  0003F0  0101               	movlb	1	; () banked
  8874  0003F2  2B84               	incf	printf@prec& (0+255),f,b
  8875                           
  8876                           ; BSR set to: 1
  8877                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8878  0003F4  D06A               	goto	l6599
  8879                           
  8880                           ; BSR set to: 1
  8881                           
  8882                           ;doprnt.c: 1299: case 0x00:
  8883  0003F6  D000               	goto	l6555
  8884  0003F8                     l6555:
  8885                           
  8886                           ; BSR set to: 1
  8887                           ;doprnt.c: 1302: case 0xC0:
  8888                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8889  0003F8  0E01               	movlw	1
  8890  0003FA  0101               	movlb	1	; () banked
  8891  0003FC  6F87               	movwf	printf@c& (0+255),b
  8892  0003FE                     l6557:
  8893                           
  8894                           ; BSR set to: 1
  8895  0003FE  0E05               	movlw	5
  8896  000400  0101               	movlb	1	; () banked
  8897  000402  1987               	xorwf	printf@c& (0+255),w,b
  8898  000404  B4D8               	btfsc	status,2,c
  8899  000406  D071               	goto	l6601
  8900  000408  D001               	goto	l6561
  8901                           
  8902                           ; BSR set to: 1
  8903  00040A  D06F               	goto	l6601
  8904  00040C                     l6561:
  8905                           
  8906                           ; BSR set to: 1
  8907                           ;doprnt.c: 1306: if(val < dpowers[c])
  8908  00040C  0101               	movlb	1	; () banked
  8909  00040E  5187               	movf	printf@c& (0+255),w,b
  8910  000410  0D02               	mullw	2
  8911  000412  0ED4               	movlw	low _dpowers
  8912  000414  24F3               	addwf	prodl,w,c
  8913  000416  6EF6               	movwf	tblptrl,c
  8914  000418  0EFB               	movlw	high _dpowers
  8915  00041A  20F4               	addwfc	prodh,w,c
  8916  00041C  6EF7               	movwf	tblptrh,c
  8917  00041E                     	if	0	;There are less than 3 active tblptr bytes
  8918  00041E                     	endif
  8919  00041E  0009               	tblrd		*+
  8920  000420  50F5               	movf	tablat,w,c
  8921  000422  0101               	movlb	1	; () banked
  8922  000424  5D82               	subwf	printf@val& (0+255),w,b
  8923  000426  0009               	tblrd		*+
  8924  000428  50F5               	movf	tablat,w,c
  8925  00042A  0101               	movlb	1	; () banked
  8926  00042C  5983               	subwfb	(printf@val+1)& (0+255),w,b
  8927  00042E  A0D8               	btfss	status,0,c
  8928  000430  D05C               	goto	l6601
  8929  000432  D001               	goto	l6565
  8930                           
  8931                           ; BSR set to: 1
  8932                           ;doprnt.c: 1307: break;
  8933  000434  D05A               	goto	l6601
  8934  000436                     l6565:
  8935                           
  8936                           ; BSR set to: 1
  8937  000436  0101               	movlb	1	; () banked
  8938  000438  2B87               	incf	printf@c& (0+255),f,b
  8939  00043A  D7E1               	goto	l6557
  8940                           
  8941                           ; BSR set to: 1
  8942                           ;doprnt.c: 1309: break;
  8943                           
  8944                           ; BSR set to: 1
  8945  00043C  D056               	goto	l6601
  8946  00043E                     l6569:
  8947                           
  8948                           ; BSR set to: 1
  8949                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8950  00043E  0E01               	movlw	1
  8951  000440  0101               	movlb	1	; () banked
  8952  000442  6F87               	movwf	printf@c& (0+255),b
  8953  000444                     l6571:
  8954                           
  8955                           ; BSR set to: 1
  8956  000444  0E04               	movlw	4
  8957  000446  0101               	movlb	1	; () banked
  8958  000448  1987               	xorwf	printf@c& (0+255),w,b
  8959  00044A  B4D8               	btfsc	status,2,c
  8960  00044C  D04E               	goto	l6601
  8961  00044E  D001               	goto	l6575
  8962                           
  8963                           ; BSR set to: 1
  8964  000450  D04C               	goto	l6601
  8965  000452                     l6575:
  8966                           
  8967                           ; BSR set to: 1
  8968                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8969  000452  0101               	movlb	1	; () banked
  8970  000454  5187               	movf	printf@c& (0+255),w,b
  8971  000456  0D02               	mullw	2
  8972  000458  0EDE               	movlw	low _hexpowers
  8973  00045A  24F3               	addwf	prodl,w,c
  8974  00045C  6EF6               	movwf	tblptrl,c
  8975  00045E  0EFB               	movlw	high _hexpowers
  8976  000460  20F4               	addwfc	prodh,w,c
  8977  000462  6EF7               	movwf	tblptrh,c
  8978  000464                     	if	0	;There are less than 3 active tblptr bytes
  8979  000464                     	endif
  8980  000464  0009               	tblrd		*+
  8981  000466  50F5               	movf	tablat,w,c
  8982  000468  0101               	movlb	1	; () banked
  8983  00046A  5D82               	subwf	printf@val& (0+255),w,b
  8984  00046C  0009               	tblrd		*+
  8985  00046E  50F5               	movf	tablat,w,c
  8986  000470  0101               	movlb	1	; () banked
  8987  000472  5983               	subwfb	(printf@val+1)& (0+255),w,b
  8988  000474  A0D8               	btfss	status,0,c
  8989  000476  D039               	goto	l6601
  8990  000478  D001               	goto	l6579
  8991                           
  8992                           ; BSR set to: 1
  8993                           ;doprnt.c: 1318: break;
  8994  00047A  D037               	goto	l6601
  8995  00047C                     l6579:
  8996                           
  8997                           ; BSR set to: 1
  8998  00047C  0101               	movlb	1	; () banked
  8999  00047E  2B87               	incf	printf@c& (0+255),f,b
  9000  000480  D7E1               	goto	l6571
  9001                           
  9002                           ; BSR set to: 1
  9003                           ;doprnt.c: 1320: break;
  9004                           
  9005                           ; BSR set to: 1
  9006  000482  D033               	goto	l6601
  9007  000484                     l6583:
  9008                           
  9009                           ; BSR set to: 1
  9010                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  9011  000484  0E01               	movlw	1
  9012  000486  0101               	movlb	1	; () banked
  9013  000488  6F87               	movwf	printf@c& (0+255),b
  9014  00048A                     l6585:
  9015                           
  9016                           ; BSR set to: 1
  9017  00048A  0E06               	movlw	6
  9018  00048C  0101               	movlb	1	; () banked
  9019  00048E  1987               	xorwf	printf@c& (0+255),w,b
  9020  000490  B4D8               	btfsc	status,2,c
  9021  000492  D02B               	goto	l6601
  9022  000494  D001               	goto	l6589
  9023                           
  9024                           ; BSR set to: 1
  9025  000496  D029               	goto	l6601
  9026  000498                     l6589:
  9027                           
  9028                           ; BSR set to: 1
  9029                           ;doprnt.c: 1329: if(val < octpowers[c])
  9030  000498  0101               	movlb	1	; () banked
  9031  00049A  5187               	movf	printf@c& (0+255),w,b
  9032  00049C  0D02               	mullw	2
  9033  00049E  0EC8               	movlw	low _octpowers
  9034  0004A0  24F3               	addwf	prodl,w,c
  9035  0004A2  6EF6               	movwf	tblptrl,c
  9036  0004A4  0EFB               	movlw	high _octpowers
  9037  0004A6  20F4               	addwfc	prodh,w,c
  9038  0004A8  6EF7               	movwf	tblptrh,c
  9039  0004AA                     	if	0	;There are less than 3 active tblptr bytes
  9040  0004AA                     	endif
  9041  0004AA  0009               	tblrd		*+
  9042  0004AC  50F5               	movf	tablat,w,c
  9043  0004AE  0101               	movlb	1	; () banked
  9044  0004B0  5D82               	subwf	printf@val& (0+255),w,b
  9045  0004B2  0009               	tblrd		*+
  9046  0004B4  50F5               	movf	tablat,w,c
  9047  0004B6  0101               	movlb	1	; () banked
  9048  0004B8  5983               	subwfb	(printf@val+1)& (0+255),w,b
  9049  0004BA  A0D8               	btfss	status,0,c
  9050  0004BC  D016               	goto	l6601
  9051  0004BE  D001               	goto	l6593
  9052                           
  9053                           ; BSR set to: 1
  9054                           ;doprnt.c: 1330: break;
  9055  0004C0  D014               	goto	l6601
  9056  0004C2                     l6593:
  9057                           
  9058                           ; BSR set to: 1
  9059  0004C2  0101               	movlb	1	; () banked
  9060  0004C4  2B87               	incf	printf@c& (0+255),f,b
  9061  0004C6  D7E1               	goto	l6585
  9062                           
  9063                           ; BSR set to: 1
  9064                           ;doprnt.c: 1336: }
  9065                           
  9066                           ; BSR set to: 1
  9067                           ;doprnt.c: 1332: break;
  9068                           
  9069                           ; BSR set to: 1
  9070  0004C8  D010               	goto	l6601
  9071  0004CA                     l6599:
  9072                           
  9073                           ; BSR set to: 1
  9074  0004CA  0101               	movlb	1	; () banked
  9075  0004CC  5188               	movf	printf@flag& (0+255),w,b
  9076  0004CE  0BC0               	andlw	192
  9077                           
  9078                           ; Switch size 1, requested type "space"
  9079                           ; Number of cases is 4, Range of values is 0 to 192
  9080                           ; switch strategies available:
  9081                           ; Name         Instructions Cycles
  9082                           ; simple_byte           13     7 (average)
  9083                           ;	Chosen strategy is simple_byte
  9084  0004D0  0A00               	xorlw	0	; case 0
  9085  0004D2  B4D8               	btfsc	status,2,c
  9086  0004D4  D791               	goto	l6555
  9087  0004D6  0A40               	xorlw	64	; case 64
  9088  0004D8  B4D8               	btfsc	status,2,c
  9089  0004DA  D7D4               	goto	l6583
  9090  0004DC  0AC0               	xorlw	192	; case 128
  9091  0004DE  B4D8               	btfsc	status,2,c
  9092  0004E0  D7AE               	goto	l6569
  9093  0004E2  0A40               	xorlw	64	; case 192
  9094  0004E4  B4D8               	btfsc	status,2,c
  9095  0004E6  D788               	goto	l6555
  9096  0004E8  D000               	goto	l6601
  9097  0004EA                     l6601:
  9098                           
  9099                           ; BSR set to: 1
  9100                           ;doprnt.c: 1339: if(c < prec)
  9101  0004EA  0101               	movlb	1	; () banked
  9102  0004EC  5187               	movf	printf@c& (0+255),w,b
  9103  0004EE  0A80               	xorlw	128
  9104  0004F0  6E2B               	movwf	??_printf& (0+255),c
  9105  0004F2  0101               	movlb	1	; () banked
  9106  0004F4  5184               	movf	printf@prec& (0+255),w,b
  9107  0004F6  0A80               	xorlw	128
  9108  0004F8  5C2B               	subwf	??_printf& (0+255),w,c
  9109  0004FA  B0D8               	btfsc	status,0,c
  9110  0004FC  D003               	goto	l6605
  9111                           
  9112                           ; BSR set to: 1
  9113                           ;doprnt.c: 1340: c = prec;
  9114  0004FE  C184  F187         	movff	printf@prec,printf@c
  9115  000502  D00D               	goto	l6609
  9116  000504                     l6605:
  9117                           
  9118                           ; BSR set to: 1
  9119                           ;doprnt.c: 1341: else if(prec < c)
  9120  000504  0101               	movlb	1	; () banked
  9121  000506  5184               	movf	printf@prec& (0+255),w,b
  9122  000508  0A80               	xorlw	128
  9123  00050A  6E2B               	movwf	??_printf& (0+255),c
  9124  00050C  0101               	movlb	1	; () banked
  9125  00050E  5187               	movf	printf@c& (0+255),w,b
  9126  000510  0A80               	xorlw	128
  9127  000512  5C2B               	subwf	??_printf& (0+255),w,c
  9128  000514  B0D8               	btfsc	status,0,c
  9129  000516  D003               	goto	l6609
  9130                           
  9131                           ; BSR set to: 1
  9132                           ;doprnt.c: 1342: prec = c;
  9133  000518  C187  F184         	movff	printf@c,printf@prec
  9134                           
  9135                           ; BSR set to: 1
  9136  00051C  D000               	goto	l6609
  9137  00051E                     l6609:
  9138                           
  9139                           ; BSR set to: 1
  9140                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9141  00051E  0101               	movlb	1	; () banked
  9142  000520  5185               	movf	printf@width& (0+255),w,b
  9143  000522  0101               	movlb	1	; () banked
  9144  000524  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9145  000526  B4D8               	btfsc	status,2,c
  9146  000528  D011               	goto	l6615
  9147                           
  9148                           ; BSR set to: 1
  9149  00052A  0E03               	movlw	3
  9150  00052C  0101               	movlb	1	; () banked
  9151  00052E  1588               	andwf	printf@flag& (0+255),w,b
  9152  000530  6E2B               	movwf	??_printf& (0+255),c
  9153  000532  0E00               	movlw	0
  9154  000534  0101               	movlb	1	; () banked
  9155  000536  1589               	andwf	(printf@flag+1)& (0+255),w,b
  9156  000538  6E2C               	movwf	(??_printf+1)& (0+255),c
  9157  00053A  502B               	movf	??_printf,w,c
  9158  00053C  102C               	iorwf	??_printf+1,w,c
  9159  00053E  B4D8               	btfsc	status,2,c
  9160  000540  D005               	goto	l6615
  9161                           
  9162                           ; BSR set to: 1
  9163                           ;doprnt.c: 1346: width--;
  9164  000542  0101               	movlb	1	; () banked
  9165  000544  0785               	decf	printf@width& (0+255),f,b
  9166  000546  A0D8               	btfss	status,0,c
  9167  000548  0786               	decf	(printf@width+1)& (0+255),f,b
  9168  00054A  D000               	goto	l6615
  9169  00054C                     l6615:
  9170                           
  9171                           ; BSR set to: 1
  9172                           ;doprnt.c: 1348: if(flag & 0x4000) {
  9173  00054C  0101               	movlb	1	; () banked
  9174  00054E  AD89               	btfss	(printf@flag+1)& (0+255),6,b
  9175  000550  D020               	goto	l6623
  9176                           
  9177                           ; BSR set to: 1
  9178                           ;doprnt.c: 1349: if(width > prec)
  9179  000552  0E80               	movlw	128
  9180  000554  0101               	movlb	1	; () banked
  9181  000556  BF84               	btfsc	printf@prec& (0+255),7,b
  9182  000558  0E7F               	movlw	127
  9183  00055A  6E2B               	movwf	??_printf& (0+255),c
  9184  00055C  0101               	movlb	1	; () banked
  9185  00055E  5185               	movf	printf@width& (0+255),w,b
  9186  000560  0101               	movlb	1	; () banked
  9187  000562  5D84               	subwf	printf@prec& (0+255),w,b
  9188  000564  0101               	movlb	1	; () banked
  9189  000566  5186               	movf	(printf@width+1)& (0+255),w,b
  9190  000568  0A80               	xorlw	128
  9191  00056A  582B               	subwfb	??_printf& (0+255),w,c
  9192  00056C  B0D8               	btfsc	status,0,c
  9193  00056E  D00B               	goto	l6621
  9194                           
  9195                           ; BSR set to: 1
  9196                           ;doprnt.c: 1350: width -= prec;
  9197  000570  0101               	movlb	1	; () banked
  9198  000572  5184               	movf	printf@prec& (0+255),w,b
  9199  000574  0101               	movlb	1	; () banked
  9200  000576  5F85               	subwf	printf@width& (0+255),f,b
  9201  000578  0E00               	movlw	0
  9202  00057A  0101               	movlb	1	; () banked
  9203  00057C  BF84               	btfsc	printf@prec& (0+255),7,b
  9204  00057E  0EFF               	movlw	255
  9205  000580  0101               	movlb	1	; () banked
  9206  000582  5B86               	subwfb	(printf@width+1)& (0+255),f,b
  9207  000584  D006               	goto	l6623
  9208  000586                     l6621:
  9209                           
  9210                           ; BSR set to: 1
  9211                           ;doprnt.c: 1351: else
  9212                           ;doprnt.c: 1352: width = 0;
  9213  000586  0E00               	movlw	0
  9214  000588  0101               	movlb	1	; () banked
  9215  00058A  6F86               	movwf	(printf@width+1)& (0+255),b
  9216  00058C  0E00               	movlw	0
  9217  00058E  6F85               	movwf	printf@width& (0+255),b
  9218                           
  9219                           ; BSR set to: 1
  9220  000590  D000               	goto	l6623
  9221  000592                     l6623:
  9222                           
  9223                           ; BSR set to: 1
  9224                           ;doprnt.c: 1353: }
  9225                           ;doprnt.c: 1357: if((flag & (
  9226                           ;doprnt.c: 1359: 0x04|
  9227                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  9228  000592  0EC4               	movlw	196
  9229  000594  6E2B               	movwf	??_printf& (0+255),c
  9230  000596  0E08               	movlw	8
  9231  000598  6E2C               	movwf	(??_printf+1)& (0+255),c
  9232  00059A  C188  F02D         	movff	printf@flag,??_printf+2
  9233  00059E  C189  F02E         	movff	printf@flag+1,??_printf+3
  9234  0005A2  502B               	movf	??_printf,w,c
  9235  0005A4  162D               	andwf	??_printf+2,f,c
  9236  0005A6  502C               	movf	??_printf+1,w,c
  9237  0005A8  162E               	andwf	??_printf+3,f,c
  9238  0005AA  0E40               	movlw	64
  9239  0005AC  182D               	xorwf	??_printf+2,w,c
  9240  0005AE  E10F               	bnz	l6629
  9241  0005B0  0E08               	movlw	8
  9242  0005B2  182E               	xorwf	??_printf+3,w,c
  9243  0005B4  A4D8               	btfss	status,2,c
  9244  0005B6  D00B               	goto	l6629
  9245                           
  9246                           ; BSR set to: 1
  9247                           ;doprnt.c: 1362: if(width)
  9248  0005B8  0101               	movlb	1	; () banked
  9249  0005BA  5185               	movf	printf@width& (0+255),w,b
  9250  0005BC  0101               	movlb	1	; () banked
  9251  0005BE  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9252  0005C0  B4D8               	btfsc	status,2,c
  9253  0005C2  D02F               	goto	l6637
  9254                           
  9255                           ; BSR set to: 1
  9256                           ;doprnt.c: 1363: width--;
  9257  0005C4  0101               	movlb	1	; () banked
  9258  0005C6  0785               	decf	printf@width& (0+255),f,b
  9259  0005C8  A0D8               	btfss	status,0,c
  9260  0005CA  0786               	decf	(printf@width+1)& (0+255),f,b
  9261                           
  9262                           ; BSR set to: 1
  9263                           ;doprnt.c: 1364: } else
  9264  0005CC  D02A               	goto	l6637
  9265  0005CE                     l6629:
  9266                           
  9267                           ; BSR set to: 1
  9268                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9269  0005CE  0EC0               	movlw	192
  9270  0005D0  6E2B               	movwf	??_printf& (0+255),c
  9271  0005D2  0E08               	movlw	8
  9272  0005D4  6E2C               	movwf	(??_printf+1)& (0+255),c
  9273  0005D6  C188  F02D         	movff	printf@flag,??_printf+2
  9274  0005DA  C189  F02E         	movff	printf@flag+1,??_printf+3
  9275  0005DE  502B               	movf	??_printf,w,c
  9276  0005E0  162D               	andwf	??_printf+2,f,c
  9277  0005E2  502C               	movf	??_printf+1,w,c
  9278  0005E4  162E               	andwf	??_printf+3,f,c
  9279  0005E6  0E80               	movlw	128
  9280  0005E8  182D               	xorwf	??_printf+2,w,c
  9281  0005EA  E11B               	bnz	l6637
  9282  0005EC  0E08               	movlw	8
  9283  0005EE  182E               	xorwf	??_printf+3,w,c
  9284  0005F0  A4D8               	btfss	status,2,c
  9285  0005F2  D017               	goto	l6637
  9286                           
  9287                           ; BSR set to: 1
  9288                           ;doprnt.c: 1372: if(width > 2)
  9289  0005F4  0101               	movlb	1	; () banked
  9290  0005F6  BF86               	btfsc	(printf@width+1)& (0+255),7,b
  9291  0005F8  D00E               	goto	l6635
  9292  0005FA  0101               	movlb	1	; () banked
  9293  0005FC  5186               	movf	(printf@width+1)& (0+255),w,b
  9294  0005FE  E105               	bnz	u5640
  9295  000600  0E03               	movlw	3
  9296  000602  0101               	movlb	1	; () banked
  9297  000604  5D85               	subwf	printf@width& (0+255),w,b
  9298  000606  A0D8               	btfss	status,0,c
  9299  000608  D006               	goto	l6635
  9300  00060A                     u5640:
  9301                           
  9302                           ; BSR set to: 1
  9303                           ;doprnt.c: 1373: width -= 2;
  9304  00060A  0101               	movlb	1	; () banked
  9305  00060C  0EFE               	movlw	254
  9306  00060E  2785               	addwf	printf@width& (0+255),f,b
  9307  000610  0EFF               	movlw	255
  9308  000612  2386               	addwfc	(printf@width+1)& (0+255),f,b
  9309  000614  D006               	goto	l6637
  9310  000616                     l6635:
  9311                           
  9312                           ; BSR set to: 1
  9313                           ;doprnt.c: 1374: else
  9314                           ;doprnt.c: 1375: width = 0;
  9315  000616  0E00               	movlw	0
  9316  000618  0101               	movlb	1	; () banked
  9317  00061A  6F86               	movwf	(printf@width+1)& (0+255),b
  9318  00061C  0E00               	movlw	0
  9319  00061E  6F85               	movwf	printf@width& (0+255),b
  9320                           
  9321                           ; BSR set to: 1
  9322                           
  9323                           ; BSR set to: 1
  9324  000620  D000               	goto	l6637
  9325  000622                     l6637:
  9326                           
  9327                           ; BSR set to: 1
  9328                           ;doprnt.c: 1376: }
  9329                           ;doprnt.c: 1381: if(width > c)
  9330  000622  0E80               	movlw	128
  9331  000624  0101               	movlb	1	; () banked
  9332  000626  BF87               	btfsc	printf@c& (0+255),7,b
  9333  000628  0E7F               	movlw	127
  9334  00062A  6E2B               	movwf	??_printf& (0+255),c
  9335  00062C  0101               	movlb	1	; () banked
  9336  00062E  5185               	movf	printf@width& (0+255),w,b
  9337  000630  0101               	movlb	1	; () banked
  9338  000632  5D87               	subwf	printf@c& (0+255),w,b
  9339  000634  0101               	movlb	1	; () banked
  9340  000636  5186               	movf	(printf@width+1)& (0+255),w,b
  9341  000638  0A80               	xorlw	128
  9342  00063A  582B               	subwfb	??_printf& (0+255),w,c
  9343  00063C  B0D8               	btfsc	status,0,c
  9344  00063E  D00B               	goto	l6641
  9345                           
  9346                           ; BSR set to: 1
  9347                           ;doprnt.c: 1382: width -= c;
  9348  000640  0101               	movlb	1	; () banked
  9349  000642  5187               	movf	printf@c& (0+255),w,b
  9350  000644  0101               	movlb	1	; () banked
  9351  000646  5F85               	subwf	printf@width& (0+255),f,b
  9352  000648  0E00               	movlw	0
  9353  00064A  0101               	movlb	1	; () banked
  9354  00064C  BF87               	btfsc	printf@c& (0+255),7,b
  9355  00064E  0EFF               	movlw	255
  9356  000650  0101               	movlb	1	; () banked
  9357  000652  5B86               	subwfb	(printf@width+1)& (0+255),f,b
  9358  000654  D006               	goto	l6643
  9359  000656                     l6641:
  9360                           
  9361                           ; BSR set to: 1
  9362                           ;doprnt.c: 1383: else
  9363                           ;doprnt.c: 1384: width = 0;
  9364  000656  0E00               	movlw	0
  9365  000658  0101               	movlb	1	; () banked
  9366  00065A  6F86               	movwf	(printf@width+1)& (0+255),b
  9367  00065C  0E00               	movlw	0
  9368  00065E  6F85               	movwf	printf@width& (0+255),b
  9369  000660  D000               	goto	l6643
  9370  000662                     l6643:
  9371                           
  9372                           ; BSR set to: 1
  9373                           ;doprnt.c: 1387: if(flag & 0x04) {
  9374  000662  0101               	movlb	1	; () banked
  9375  000664  A588               	btfss	printf@flag& (0+255),2,b
  9376  000666  D055               	goto	l6669
  9377                           
  9378                           ; BSR set to: 1
  9379                           ;doprnt.c: 1392: if(flag & 0x03)
  9380  000668  0E03               	movlw	3
  9381  00066A  0101               	movlb	1	; () banked
  9382  00066C  1588               	andwf	printf@flag& (0+255),w,b
  9383  00066E  6E2B               	movwf	??_printf& (0+255),c
  9384  000670  0E00               	movlw	0
  9385  000672  0101               	movlb	1	; () banked
  9386  000674  1589               	andwf	(printf@flag+1)& (0+255),w,b
  9387  000676  6E2C               	movwf	(??_printf+1)& (0+255),c
  9388  000678  502B               	movf	??_printf,w,c
  9389  00067A  102C               	iorwf	??_printf+1,w,c
  9390  00067C  B4D8               	btfsc	status,2,c
  9391  00067E  D004               	goto	l894
  9392                           
  9393                           ; BSR set to: 1
  9394                           ;doprnt.c: 1393: (putch('-') );
  9395  000680  0E2D               	movlw	45
  9396  000682  EC09  F015         	call	_putch
  9397  000686  D030               	goto	l6663
  9398  000688                     l894:
  9399                           
  9400                           ; BSR set to: 1
  9401                           ;doprnt.c: 1396: else
  9402                           ;doprnt.c: 1399: if(flag & 0x01)
  9403  000688  0101               	movlb	1	; () banked
  9404  00068A  A188               	btfss	printf@flag& (0+255),0,b
  9405  00068C  D004               	goto	l6651
  9406                           
  9407                           ; BSR set to: 1
  9408                           ;doprnt.c: 1400: (putch(' ') );
  9409  00068E  0E20               	movlw	32
  9410  000690  EC09  F015         	call	_putch
  9411  000694  D029               	goto	l6663
  9412  000696                     l6651:
  9413                           
  9414                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9415  000696  0EC0               	movlw	192
  9416  000698  6E2B               	movwf	??_printf& (0+255),c
  9417  00069A  0E08               	movlw	8
  9418  00069C  6E2C               	movwf	(??_printf+1)& (0+255),c
  9419  00069E  C188  F02D         	movff	printf@flag,??_printf+2
  9420  0006A2  C189  F02E         	movff	printf@flag+1,??_printf+3
  9421  0006A6  502B               	movf	??_printf,w,c
  9422  0006A8  162D               	andwf	??_printf+2,f,c
  9423  0006AA  502C               	movf	??_printf+1,w,c
  9424  0006AC  162E               	andwf	??_printf+3,f,c
  9425  0006AE  0E80               	movlw	128
  9426  0006B0  182D               	xorwf	??_printf+2,w,c
  9427  0006B2  E11A               	bnz	l6663
  9428  0006B4  0E08               	movlw	8
  9429  0006B6  182E               	xorwf	??_printf+3,w,c
  9430  0006B8  A4D8               	btfss	status,2,c
  9431  0006BA  D016               	goto	l6663
  9432                           
  9433                           ;doprnt.c: 1404: (putch('0') );
  9434  0006BC  0E30               	movlw	48
  9435  0006BE  EC09  F015         	call	_putch
  9436                           
  9437                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  9438  0006C2  0101               	movlb	1	; () banked
  9439  0006C4  BB88               	btfsc	printf@flag& (0+255),5,b
  9440  0006C6  D005               	goto	l6659
  9441                           
  9442                           ; BSR set to: 1
  9443  0006C8  0E00               	movlw	0
  9444  0006CA  0101               	movlb	1	; () banked
  9445  0006CC  6F79               	movwf	(_printf$1738+1)& (0+255),b
  9446  0006CE  0E78               	movlw	120
  9447  0006D0  D004               	goto	L9
  9448  0006D2                     l6659:
  9449                           
  9450                           ; BSR set to: 1
  9451  0006D2  0E00               	movlw	0
  9452  0006D4  0101               	movlb	1	; () banked
  9453  0006D6  6F79               	movwf	(_printf$1738+1)& (0+255),b
  9454  0006D8  0E58               	movlw	88
  9455  0006DA                     L9:
  9456  0006DA  6F78               	movwf	_printf$1738& (0+255),b
  9457  0006DC  D000               	goto	l6661
  9458  0006DE                     l6661:
  9459                           
  9460                           ; BSR set to: 1
  9461  0006DE  0101               	movlb	1	; () banked
  9462  0006E0  5178               	movf	_printf$1738& (0+255),w,b
  9463  0006E2  EC09  F015         	call	_putch
  9464  0006E6  D000               	goto	l6663
  9465  0006E8                     l6663:
  9466                           
  9467                           ;doprnt.c: 1412: }
  9468                           ;doprnt.c: 1415: if(width)
  9469  0006E8  0101               	movlb	1	; () banked
  9470  0006EA  5185               	movf	printf@width& (0+255),w,b
  9471  0006EC  0101               	movlb	1	; () banked
  9472  0006EE  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9473  0006F0  B4D8               	btfsc	status,2,c
  9474  0006F2  D10C               	goto	l6719
  9475  0006F4                     l6665:
  9476                           
  9477                           ; BSR set to: 1
  9478                           ;doprnt.c: 1417: (putch('0') );
  9479  0006F4  0E30               	movlw	48
  9480  0006F6  EC09  F015         	call	_putch
  9481                           
  9482                           ;doprnt.c: 1418: while(--width);
  9483  0006FA  0101               	movlb	1	; () banked
  9484  0006FC  0785               	decf	printf@width& (0+255),f,b
  9485  0006FE  A0D8               	btfss	status,0,c
  9486  000700  0786               	decf	(printf@width+1)& (0+255),f,b
  9487  000702  0101               	movlb	1	; () banked
  9488  000704  5185               	movf	printf@width& (0+255),w,b
  9489  000706  0101               	movlb	1	; () banked
  9490  000708  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9491  00070A  B4D8               	btfsc	status,2,c
  9492  00070C  D0FF               	goto	l6719
  9493  00070E  D7F2               	goto	l6665
  9494                           
  9495                           ; BSR set to: 1
  9496                           ;doprnt.c: 1420: } else
  9497                           
  9498                           ; BSR set to: 1
  9499  000710  D0FD               	goto	l6719
  9500  000712                     l6669:
  9501                           
  9502                           ; BSR set to: 1
  9503                           ;doprnt.c: 1422: {
  9504                           ;doprnt.c: 1424: if(width
  9505                           ;doprnt.c: 1426: && !(flag & 0x08)
  9506                           ;doprnt.c: 1428: )
  9507  000712  0101               	movlb	1	; () banked
  9508  000714  5185               	movf	printf@width& (0+255),w,b
  9509  000716  0101               	movlb	1	; () banked
  9510  000718  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9511  00071A  B4D8               	btfsc	status,2,c
  9512  00071C  D012               	goto	l6677
  9513                           
  9514                           ; BSR set to: 1
  9515  00071E  0101               	movlb	1	; () banked
  9516  000720  B788               	btfsc	printf@flag& (0+255),3,b
  9517  000722  D00F               	goto	l6677
  9518  000724                     l6673:
  9519                           
  9520                           ; BSR set to: 1
  9521                           ;doprnt.c: 1430: (putch(' ') );
  9522  000724  0E20               	movlw	32
  9523  000726  EC09  F015         	call	_putch
  9524                           
  9525                           ;doprnt.c: 1431: while(--width);
  9526  00072A  0101               	movlb	1	; () banked
  9527  00072C  0785               	decf	printf@width& (0+255),f,b
  9528  00072E  A0D8               	btfss	status,0,c
  9529  000730  0786               	decf	(printf@width+1)& (0+255),f,b
  9530  000732  0101               	movlb	1	; () banked
  9531  000734  5185               	movf	printf@width& (0+255),w,b
  9532  000736  0101               	movlb	1	; () banked
  9533  000738  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9534  00073A  B4D8               	btfsc	status,2,c
  9535  00073C  D002               	goto	l6677
  9536  00073E  D7F2               	goto	l6673
  9537                           
  9538                           ; BSR set to: 1
  9539  000740  D000               	goto	l6677
  9540  000742                     l6677:
  9541                           
  9542                           ; BSR set to: 1
  9543                           ;doprnt.c: 1438: if(flag & 0x03)
  9544  000742  0E03               	movlw	3
  9545  000744  0101               	movlb	1	; () banked
  9546  000746  1588               	andwf	printf@flag& (0+255),w,b
  9547  000748  6E2B               	movwf	??_printf& (0+255),c
  9548  00074A  0E00               	movlw	0
  9549  00074C  0101               	movlb	1	; () banked
  9550  00074E  1589               	andwf	(printf@flag+1)& (0+255),w,b
  9551  000750  6E2C               	movwf	(??_printf+1)& (0+255),c
  9552  000752  502B               	movf	??_printf,w,c
  9553  000754  102C               	iorwf	??_printf+1,w,c
  9554  000756  B4D8               	btfsc	status,2,c
  9555  000758  D004               	goto	l910
  9556                           
  9557                           ; BSR set to: 1
  9558                           ;doprnt.c: 1439: (putch('-') );
  9559  00075A  0E2D               	movlw	45
  9560  00075C  EC09  F015         	call	_putch
  9561  000760  D007               	goto	l6683
  9562  000762                     l910:
  9563                           
  9564                           ; BSR set to: 1
  9565                           ;doprnt.c: 1443: else if(flag & 0x01)
  9566  000762  0101               	movlb	1	; () banked
  9567  000764  A188               	btfss	printf@flag& (0+255),0,b
  9568  000766  D004               	goto	l6683
  9569                           
  9570                           ; BSR set to: 1
  9571                           ;doprnt.c: 1444: (putch(' ') );
  9572  000768  0E20               	movlw	32
  9573  00076A  EC09  F015         	call	_putch
  9574  00076E  D000               	goto	l6683
  9575  000770                     l6683:
  9576                           
  9577                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  9578  000770  0EC0               	movlw	192
  9579  000772  6E2B               	movwf	??_printf& (0+255),c
  9580  000774  0E08               	movlw	8
  9581  000776  6E2C               	movwf	(??_printf+1)& (0+255),c
  9582  000778  C188  F02D         	movff	printf@flag,??_printf+2
  9583  00077C  C189  F02E         	movff	printf@flag+1,??_printf+3
  9584  000780  502B               	movf	??_printf,w,c
  9585  000782  162D               	andwf	??_printf+2,f,c
  9586  000784  502C               	movf	??_printf+1,w,c
  9587  000786  162E               	andwf	??_printf+3,f,c
  9588  000788  0E40               	movlw	64
  9589  00078A  182D               	xorwf	??_printf+2,w,c
  9590  00078C  E108               	bnz	l6687
  9591  00078E  0E08               	movlw	8
  9592  000790  182E               	xorwf	??_printf+3,w,c
  9593  000792  A4D8               	btfss	status,2,c
  9594  000794  D004               	goto	l6687
  9595                           
  9596                           ;doprnt.c: 1449: (putch('0') );
  9597  000796  0E30               	movlw	48
  9598  000798  EC09  F015         	call	_putch
  9599  00079C  D0B7               	goto	l6719
  9600  00079E                     l6687:
  9601                           
  9602                           ;doprnt.c: 1450: else
  9603                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9604  00079E  0EC0               	movlw	192
  9605  0007A0  6E2B               	movwf	??_printf& (0+255),c
  9606  0007A2  0E08               	movlw	8
  9607  0007A4  6E2C               	movwf	(??_printf+1)& (0+255),c
  9608  0007A6  C188  F02D         	movff	printf@flag,??_printf+2
  9609  0007AA  C189  F02E         	movff	printf@flag+1,??_printf+3
  9610  0007AE  502B               	movf	??_printf,w,c
  9611  0007B0  162D               	andwf	??_printf+2,f,c
  9612  0007B2  502C               	movf	??_printf+1,w,c
  9613  0007B4  162E               	andwf	??_printf+3,f,c
  9614  0007B6  0E80               	movlw	128
  9615  0007B8  182D               	xorwf	??_printf+2,w,c
  9616  0007BA  E103               	bnz	u5791
  9617  0007BC  0E08               	movlw	8
  9618  0007BE  182E               	xorwf	??_printf+3,w,c
  9619  0007C0  A4D8               	btfss	status,2,c
  9620  0007C2                     u5791:
  9621  0007C2  D0A4               	goto	l6719
  9622                           
  9623                           ;doprnt.c: 1458: (putch('0') );
  9624  0007C4  0E30               	movlw	48
  9625  0007C6  EC09  F015         	call	_putch
  9626                           
  9627                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  9628  0007CA  0101               	movlb	1	; () banked
  9629  0007CC  BB88               	btfsc	printf@flag& (0+255),5,b
  9630  0007CE  D005               	goto	l6695
  9631                           
  9632                           ; BSR set to: 1
  9633  0007D0  0E00               	movlw	0
  9634  0007D2  0101               	movlb	1	; () banked
  9635  0007D4  6F7B               	movwf	(_printf$1739+1)& (0+255),b
  9636  0007D6  0E78               	movlw	120
  9637  0007D8  D004               	goto	L10
  9638  0007DA                     l6695:
  9639                           
  9640                           ; BSR set to: 1
  9641  0007DA  0E00               	movlw	0
  9642  0007DC  0101               	movlb	1	; () banked
  9643  0007DE  6F7B               	movwf	(_printf$1739+1)& (0+255),b
  9644  0007E0  0E58               	movlw	88
  9645  0007E2                     L10:
  9646  0007E2  6F7A               	movwf	_printf$1739& (0+255),b
  9647  0007E4  D000               	goto	l6697
  9648  0007E6                     l6697:
  9649                           
  9650                           ; BSR set to: 1
  9651  0007E6  0101               	movlb	1	; () banked
  9652  0007E8  517A               	movf	_printf$1739& (0+255),w,b
  9653  0007EA  EC09  F015         	call	_putch
  9654                           
  9655                           ;doprnt.c: 1466: }
  9656                           ;doprnt.c: 1469: }
  9657                           ;doprnt.c: 1474: while(prec--) {
  9658  0007EE  D08E               	goto	l6719
  9659                           
  9660                           ;doprnt.c: 1476: switch((unsigned char)(flag & (0xC0)))
  9661  0007F0  D078               	goto	l6715
  9662                           
  9663                           ;doprnt.c: 1478: {
  9664                           ;doprnt.c: 1483: case 0x00:
  9665  0007F2  D000               	goto	l6699
  9666  0007F4                     l6699:
  9667                           
  9668                           ;doprnt.c: 1486: case 0xC0:
  9669                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9670  0007F4  0101               	movlb	1	; () banked
  9671  0007F6  5184               	movf	printf@prec& (0+255),w,b
  9672  0007F8  0D02               	mullw	2
  9673  0007FA  0ED4               	movlw	low _dpowers
  9674  0007FC  24F3               	addwf	prodl,w,c
  9675  0007FE  6EF6               	movwf	tblptrl,c
  9676  000800  0EFB               	movlw	high _dpowers
  9677  000802  20F4               	addwfc	prodh,w,c
  9678  000804  6EF7               	movwf	tblptrh,c
  9679  000806                     	if	0	;There are less than 3 active tblptr bytes
  9680  000806                     	endif
  9681  000806  0009               	tblrd		*+
  9682  000808  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9683  00080C  000A               	tblrd		*-
  9684  00080E  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9685  000812  C182  F011         	movff	printf@val,___lwdiv@dividend
  9686  000816  C183  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9687  00081A  EC91  F011         	call	___lwdiv	;wreg free
  9688  00081E  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  9689  000822  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  9690  000826  0E00               	movlw	0
  9691  000828  6E1B               	movwf	___lwmod@divisor+1,c
  9692  00082A  0E0A               	movlw	10
  9693  00082C  6E1A               	movwf	___lwmod@divisor,c
  9694  00082E  EC35  F012         	call	___lwmod	;wreg free
  9695  000832  5018               	movf	?___lwmod,w,c
  9696  000834  D052               	goto	L11
  9697  000836                     l6701:
  9698                           
  9699                           ; BSR set to: 1
  9700                           ;doprnt.c: 1499: {
  9701                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9702  000836  C182  F011         	movff	printf@val,___lwdiv@dividend
  9703  00083A  C183  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9704  00083E  0101               	movlb	1	; () banked
  9705  000840  5184               	movf	printf@prec& (0+255),w,b
  9706  000842  0D02               	mullw	2
  9707  000844  0EDE               	movlw	low _hexpowers
  9708  000846  24F3               	addwf	prodl,w,c
  9709  000848  6EF6               	movwf	tblptrl,c
  9710  00084A  0EFB               	movlw	high _hexpowers
  9711  00084C  20F4               	addwfc	prodh,w,c
  9712  00084E  6EF7               	movwf	tblptrh,c
  9713  000850                     	if	0	;There are less than 3 active tblptr bytes
  9714  000850                     	endif
  9715  000850  0009               	tblrd		*+
  9716  000852  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9717  000856  000A               	tblrd		*-
  9718  000858  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9719  00085C  EC91  F011         	call	___lwdiv	;wreg free
  9720  000860  5011               	movf	?___lwdiv,w,c
  9721  000862  0B0F               	andlw	15
  9722  000864  0101               	movlb	1	; () banked
  9723  000866  6F75               	movwf	printf@idx& (0+255),b
  9724                           
  9725                           ; BSR set to: 1
  9726                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  9727  000868  0101               	movlb	1	; () banked
  9728  00086A  BB88               	btfsc	printf@flag& (0+255),5,b
  9729  00086C  D005               	goto	l6707
  9730                           
  9731                           ; BSR set to: 1
  9732  00086E  0E9F               	movlw	low STR_21
  9733  000870  0101               	movlb	1	; () banked
  9734  000872  6F7C               	movwf	_printf$1745& (0+255),b
  9735  000874  0EFC               	movlw	high STR_21
  9736  000876  D004               	goto	L12
  9737  000878                     l6707:
  9738                           
  9739                           ; BSR set to: 1
  9740  000878  0E8E               	movlw	low STR_20
  9741  00087A  0101               	movlb	1	; () banked
  9742  00087C  6F7C               	movwf	_printf$1745& (0+255),b
  9743  00087E  0EFC               	movlw	high STR_20
  9744  000880                     L12:
  9745  000880  0101               	movlb	1	; () banked
  9746  000882  6F7D               	movwf	(_printf$1745+1)& (0+255),b
  9747  000884  D000               	goto	l6709
  9748  000886                     l6709:
  9749                           
  9750                           ; BSR set to: 1
  9751  000886  0101               	movlb	1	; () banked
  9752  000888  5175               	movf	printf@idx& (0+255),w,b
  9753  00088A  0D01               	mullw	1
  9754  00088C  C17C  F02B         	movff	_printf$1745,??_printf
  9755  000890  C17D  F02C         	movff	_printf$1745+1,??_printf+1
  9756  000894  50F3               	movf	prodl,w,c
  9757  000896  262B               	addwf	??_printf,f,c
  9758  000898  50F4               	movf	prodh,w,c
  9759  00089A  222C               	addwfc	??_printf+1,f,c
  9760  00089C  C02B  FFF6         	movff	??_printf,tblptrl
  9761  0008A0  C02C  FFF7         	movff	??_printf+1,tblptrh
  9762  0008A4                     	if	0	;tblptru may be non-zero
  9763  0008A4                     	endif
  9764  0008A4                     	if	0	;tblptru may be non-zero
  9765  0008A4                     	endif
  9766  0008A4  0008               	tblrd		*
  9767  0008A6  CFF5 F187          	movff	tablat,printf@c
  9768                           
  9769                           ;doprnt.c: 1508: }
  9770                           ;doprnt.c: 1510: break;
  9771  0008AA  D02B               	goto	l6717
  9772  0008AC                     l6711:
  9773                           
  9774                           ; BSR set to: 1
  9775                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  9776  0008AC  C182  F011         	movff	printf@val,___lwdiv@dividend
  9777  0008B0  C183  F012         	movff	printf@val+1,___lwdiv@dividend+1
  9778  0008B4  0101               	movlb	1	; () banked
  9779  0008B6  5184               	movf	printf@prec& (0+255),w,b
  9780  0008B8  0D02               	mullw	2
  9781  0008BA  0EC8               	movlw	low _octpowers
  9782  0008BC  24F3               	addwf	prodl,w,c
  9783  0008BE  6EF6               	movwf	tblptrl,c
  9784  0008C0  0EFB               	movlw	high _octpowers
  9785  0008C2  20F4               	addwfc	prodh,w,c
  9786  0008C4  6EF7               	movwf	tblptrh,c
  9787  0008C6                     	if	0	;There are less than 3 active tblptr bytes
  9788  0008C6                     	endif
  9789  0008C6  0009               	tblrd		*+
  9790  0008C8  CFF5 F013          	movff	tablat,___lwdiv@divisor
  9791  0008CC  000A               	tblrd		*-
  9792  0008CE  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  9793  0008D2  EC91  F011         	call	___lwdiv	;wreg free
  9794  0008D6  5011               	movf	?___lwdiv,w,c
  9795  0008D8  0B07               	andlw	7
  9796  0008DA                     L11:
  9797  0008DA  0F30               	addlw	48
  9798  0008DC  0101               	movlb	1	; () banked
  9799  0008DE  6F87               	movwf	printf@c& (0+255),b
  9800                           
  9801                           ; BSR set to: 1
  9802                           ;doprnt.c: 1523: }
  9803                           
  9804                           ;doprnt.c: 1520: break;
  9805  0008E0  D010               	goto	l6717
  9806  0008E2                     l6715:
  9807  0008E2  0101               	movlb	1	; () banked
  9808  0008E4  5188               	movf	printf@flag& (0+255),w,b
  9809  0008E6  0BC0               	andlw	192
  9810                           
  9811                           ; Switch size 1, requested type "space"
  9812                           ; Number of cases is 4, Range of values is 0 to 192
  9813                           ; switch strategies available:
  9814                           ; Name         Instructions Cycles
  9815                           ; simple_byte           13     7 (average)
  9816                           ;	Chosen strategy is simple_byte
  9817  0008E8  0A00               	xorlw	0	; case 0
  9818  0008EA  B4D8               	btfsc	status,2,c
  9819  0008EC  D783               	goto	l6699
  9820  0008EE  0A40               	xorlw	64	; case 64
  9821  0008F0  B4D8               	btfsc	status,2,c
  9822  0008F2  D7DC               	goto	l6711
  9823  0008F4  0AC0               	xorlw	192	; case 128
  9824  0008F6  B4D8               	btfsc	status,2,c
  9825  0008F8  D79E               	goto	l6701
  9826  0008FA  0A40               	xorlw	64	; case 192
  9827  0008FC  B4D8               	btfsc	status,2,c
  9828  0008FE  D77A               	goto	l6699
  9829  000900  D000               	goto	l6717
  9830  000902                     l6717:
  9831                           
  9832                           ; BSR set to: 1
  9833                           ;doprnt.c: 1524: (putch(c) );
  9834  000902  0101               	movlb	1	; () banked
  9835  000904  5187               	movf	printf@c& (0+255),w,b
  9836  000906  EC09  F015         	call	_putch
  9837  00090A  D000               	goto	l6719
  9838  00090C                     l6719:
  9839  00090C  0101               	movlb	1	; () banked
  9840  00090E  0784               	decf	printf@prec& (0+255),f,b
  9841  000910  0101               	movlb	1	; () banked
  9842  000912  2984               	incf	printf@prec& (0+255),w,b
  9843  000914  A4D8               	btfss	status,2,c
  9844  000916  D7E5               	goto	l6715
  9845                           
  9846                           ; BSR set to: 1
  9847                           ;doprnt.c: 1525: }
  9848                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  9849  000918  0101               	movlb	1	; () banked
  9850  00091A  A788               	btfss	printf@flag& (0+255),3,b
  9851  00091C  D01B               	goto	l6727
  9852                           
  9853                           ; BSR set to: 1
  9854  00091E  0101               	movlb	1	; () banked
  9855  000920  BF86               	btfsc	(printf@width+1)& (0+255),7,b
  9856  000922  D018               	goto	l6727
  9857  000924  0101               	movlb	1	; () banked
  9858  000926  5186               	movf	(printf@width+1)& (0+255),w,b
  9859  000928  E106               	bnz	l6723
  9860  00092A  0101               	movlb	1	; () banked
  9861  00092C  0585               	decf	printf@width& (0+255),w,b
  9862  00092E  B0D8               	btfsc	status,0,c
  9863  000930  D002               	goto	l6723
  9864  000932  D010               	goto	l6727
  9865  000934  D000               	goto	l6723
  9866  000936                     l6723:
  9867                           
  9868                           ; BSR set to: 1
  9869                           ;doprnt.c: 1530: (putch(' ') );
  9870  000936  0E20               	movlw	32
  9871  000938  EC09  F015         	call	_putch
  9872                           
  9873                           ;doprnt.c: 1531: while(--width);
  9874  00093C  0101               	movlb	1	; () banked
  9875  00093E  0785               	decf	printf@width& (0+255),f,b
  9876  000940  A0D8               	btfss	status,0,c
  9877  000942  0786               	decf	(printf@width+1)& (0+255),f,b
  9878  000944  0101               	movlb	1	; () banked
  9879  000946  5185               	movf	printf@width& (0+255),w,b
  9880  000948  0101               	movlb	1	; () banked
  9881  00094A  1186               	iorwf	(printf@width+1)& (0+255),w,b
  9882  00094C  B4D8               	btfsc	status,2,c
  9883  00094E  D002               	goto	l6727
  9884  000950  D7F2               	goto	l6723
  9885                           
  9886                           ; BSR set to: 1
  9887                           
  9888                           ; BSR set to: 1
  9889  000952  D000               	goto	l6727
  9890  000954                     l6727:
  9891  000954  C01D  FFF6         	movff	printf@f,tblptrl
  9892  000958  C01E  FFF7         	movff	printf@f+1,tblptrh
  9893  00095C  4A1D               	infsnz	printf@f,f,c
  9894  00095E  2A1E               	incf	printf@f+1,f,c
  9895  000960                     	if	0	;tblptru may be non-zero
  9896  000960                     	endif
  9897  000960                     	if	0	;tblptru may be non-zero
  9898  000960                     	endif
  9899  000960  0008               	tblrd		*
  9900  000962  CFF5 F187          	movff	tablat,printf@c
  9901  000966  0101               	movlb	1	; () banked
  9902  000968  5187               	movf	printf@c& (0+255),w,b
  9903  00096A  B4D8               	btfsc	status,2,c
  9904  00096C  D003               	goto	l937
  9905  00096E  EF16  F000         	goto	l6421
  9906                           
  9907                           ; BSR set to: 1
  9908  000972  D000               	goto	l937
  9909  000974                     l937:
  9910                           
  9911                           ; BSR set to: 1
  9912  000974  0012               	return		;funcret
  9913  000976                     __end_of_printf:
  9914                           	opt stack 0
  9915                           tblptru	equ	0xFF8
  9916                           tblptrh	equ	0xFF7
  9917                           tblptrl	equ	0xFF6
  9918                           tablat	equ	0xFF5
  9919                           prodh	equ	0xFF4
  9920                           prodl	equ	0xFF3
  9921                           intcon	equ	0xFF2
  9922                           intcon2	equ	0xFF1
  9923                           postinc0	equ	0xFEE
  9924                           wreg	equ	0xFE8
  9925                           postdec1	equ	0xFE5
  9926                           fsr1l	equ	0xFE1
  9927                           indf2	equ	0xFDF
  9928                           postinc2	equ	0xFDE
  9929                           postdec2	equ	0xFDD
  9930                           fsr2h	equ	0xFDA
  9931                           fsr2l	equ	0xFD9
  9932                           status	equ	0xFD8
  9933                           
  9934 ;; *************** function _putch *****************
  9935 ;; Defined at:
  9936 ;;		line 84 in file "lap12p1.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  c               1    wreg     unsigned char 
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;  c               1   16[COMRAM] unsigned char 
  9941 ;; Return value:  Size  Location     Type
  9942 ;;		None               void
  9943 ;; Registers used:
  9944 ;;		wreg
  9945 ;; Tracked objects:
  9946 ;;		On entry : 0/0
  9947 ;;		On exit  : 0/0
  9948 ;;		Unchanged: 0/0
  9949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9951 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9953 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;Total ram usage:        1 bytes
  9955 ;; Hardware stack levels used:    1
  9956 ;; Hardware stack levels required when called:    3
  9957 ;; This function calls:
  9958 ;;		Nothing
  9959 ;; This function is called by:
  9960 ;;		_printf
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	text42
  9965  002A12                     __ptext42:
  9966                           	opt stack 0
  9967  002A12                     _putch:
  9968                           	opt stack 26
  9969                           
  9970                           ; BSR set to: 1
  9971                           ;incstack = 0
  9972                           ;putch@c stored from wreg
  9973  002A12  6E11               	movwf	putch@c,c
  9974                           
  9975                           ;lap12p1.c: 86: while (!TRMT);
  9976  002A14  D000               	goto	l256
  9977  002A16                     l256:
  9978  002A16  A2AC               	btfss	4012,1,c	;volatile
  9979  002A18  D7FE               	goto	l256
  9980                           
  9981                           ;lap12p1.c: 87: TXREG = c;
  9982  002A1A  C011  FFAD         	movff	putch@c,4013	;volatile
  9983  002A1E  0012               	return		;funcret
  9984  002A20                     __end_of_putch:
  9985                           	opt stack 0
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           intcon	equ	0xFF2
  9993                           intcon2	equ	0xFF1
  9994                           postinc0	equ	0xFEE
  9995                           wreg	equ	0xFE8
  9996                           postdec1	equ	0xFE5
  9997                           fsr1l	equ	0xFE1
  9998                           indf2	equ	0xFDF
  9999                           postinc2	equ	0xFDE
 10000                           postdec2	equ	0xFDD
 10001                           fsr2h	equ	0xFDA
 10002                           fsr2l	equ	0xFD9
 10003                           status	equ	0xFD8
 10004                           
 10005 ;; *************** function _isdigit *****************
 10006 ;; Defined at:
 10007 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;  c               1    wreg     unsigned char 
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;  c               1   18[COMRAM] unsigned char 
 10012 ;; Return value:  Size  Location     Type
 10013 ;;		None               void
 10014 ;; Registers used:
 10015 ;;		wreg, status,2, status,0
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10022 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10023 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;Total ram usage:        3 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    3
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_printf
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           	psect	text43
 10036  002872                     __ptext43:
 10037                           	opt stack 0
 10038  002872                     _isdigit:
 10039                           	opt stack 26
 10040                           
 10041                           ;incstack = 0
 10042                           ;isdigit@c stored from wreg
 10043  002872  6E13               	movwf	isdigit@c,c
 10044  002874  0E00               	movlw	0
 10045  002876  6E12               	movwf	_isdigit$2268,c
 10046  002878  0E3A               	movlw	58
 10047  00287A  6013               	cpfslt	isdigit@c,c
 10048  00287C  D006               	goto	l6365
 10049  00287E  0E2F               	movlw	47
 10050  002880  6413               	cpfsgt	isdigit@c,c
 10051  002882  D003               	goto	l6365
 10052  002884  0E01               	movlw	1
 10053  002886  6E12               	movwf	_isdigit$2268,c
 10054  002888  D000               	goto	l6365
 10055  00288A                     l6365:
 10056  00288A  C012  F011         	movff	_isdigit$2268,??_isdigit
 10057  00288E  3011               	rrcf	??_isdigit,w,c
 10058  002890  D000               	goto	l1404
 10059  002892                     l1404:
 10060  002892  0012               	return		;funcret
 10061  002894                     __end_of_isdigit:
 10062                           	opt stack 0
 10063                           tblptru	equ	0xFF8
 10064                           tblptrh	equ	0xFF7
 10065                           tblptrl	equ	0xFF6
 10066                           tablat	equ	0xFF5
 10067                           prodh	equ	0xFF4
 10068                           prodl	equ	0xFF3
 10069                           intcon	equ	0xFF2
 10070                           intcon2	equ	0xFF1
 10071                           postinc0	equ	0xFEE
 10072                           wreg	equ	0xFE8
 10073                           postdec1	equ	0xFE5
 10074                           fsr1l	equ	0xFE1
 10075                           indf2	equ	0xFDF
 10076                           postinc2	equ	0xFDE
 10077                           postdec2	equ	0xFDD
 10078                           fsr2h	equ	0xFDA
 10079                           fsr2l	equ	0xFD9
 10080                           status	equ	0xFD8
 10081                           
 10082 ;; *************** function ___wmul *****************
 10083 ;; Defined at:
 10084 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10085 ;; Parameters:    Size  Location     Type
 10086 ;;  multiplier      2   16[COMRAM] unsigned int 
 10087 ;;  multiplicand    2   18[COMRAM] unsigned int 
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  product         2   20[COMRAM] unsigned int 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  2   16[COMRAM] unsigned int 
 10092 ;; Registers used:
 10093 ;;		wreg, status,2, status,0, prodl, prodh
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;Total ram usage:        6 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    3
 10106 ;; This function calls:
 10107 ;;		Nothing
 10108 ;; This function is called by:
 10109 ;;		_get_RPM
 10110 ;;		_main
 10111 ;;		_delay_ms
 10112 ;;		_drawChar
 10113 ;;		_printf
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117                           	psect	text44
 10118  002824                     __ptext44:
 10119                           	opt stack 0
 10120  002824                     ___wmul:
 10121                           	opt stack 26
 10122                           
 10123                           ;incstack = 0
 10124  002824  5011               	movf	___wmul@multiplier,w,c
 10125  002826  0213               	mulwf	___wmul@multiplicand,c
 10126  002828  CFF3 F015          	movff	prodl,___wmul@product
 10127  00282C  CFF4 F016          	movff	prodh,___wmul@product+1
 10128  002830  5011               	movf	___wmul@multiplier,w,c
 10129  002832  0214               	mulwf	___wmul@multiplicand+1,c
 10130  002834  50F3               	movf	prodl,w,c
 10131  002836  2616               	addwf	___wmul@product+1,f,c
 10132  002838  5012               	movf	___wmul@multiplier+1,w,c
 10133  00283A  0213               	mulwf	___wmul@multiplicand,c
 10134  00283C  50F3               	movf	prodl,w,c
 10135  00283E  2616               	addwf	___wmul@product+1,f,c
 10136  002840  C015  F011         	movff	___wmul@product,?___wmul
 10137  002844  C016  F012         	movff	___wmul@product+1,?___wmul+1
 10138  002848  D000               	goto	l973
 10139  00284A                     l973:
 10140  00284A  0012               	return		;funcret
 10141  00284C                     __end_of___wmul:
 10142                           	opt stack 0
 10143                           tblptru	equ	0xFF8
 10144                           tblptrh	equ	0xFF7
 10145                           tblptrl	equ	0xFF6
 10146                           tablat	equ	0xFF5
 10147                           prodh	equ	0xFF4
 10148                           prodl	equ	0xFF3
 10149                           intcon	equ	0xFF2
 10150                           intcon2	equ	0xFF1
 10151                           postinc0	equ	0xFEE
 10152                           wreg	equ	0xFE8
 10153                           postdec1	equ	0xFE5
 10154                           fsr1l	equ	0xFE1
 10155                           indf2	equ	0xFDF
 10156                           postinc2	equ	0xFDE
 10157                           postdec2	equ	0xFDD
 10158                           fsr2h	equ	0xFDA
 10159                           fsr2l	equ	0xFD9
 10160                           status	equ	0xFD8
 10161                           
 10162 ;; *************** function ___lwmod *****************
 10163 ;; Defined at:
 10164 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;  dividend        2   23[COMRAM] unsigned int 
 10167 ;;  divisor         2   25[COMRAM] unsigned int 
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;  counter         1   27[COMRAM] unsigned char 
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  2   23[COMRAM] unsigned int 
 10172 ;; Registers used:
 10173 ;;		wreg, status,2, status,0
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10179 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10182 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;Total ram usage:        5 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    3
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_printf
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           	psect	text45
 10194  00246A                     __ptext45:
 10195                           	opt stack 0
 10196  00246A                     ___lwmod:
 10197                           	opt stack 26
 10198                           
 10199                           ;incstack = 0
 10200  00246A  501A               	movf	___lwmod@divisor,w,c
 10201  00246C  101B               	iorwf	___lwmod@divisor+1,w,c
 10202  00246E  B4D8               	btfsc	status,2,c
 10203  002470  D01D               	goto	l1506
 10204  002472  0E01               	movlw	1
 10205  002474  6E1C               	movwf	___lwmod@counter,c
 10206  002476  D005               	goto	l6397
 10207  002478                     l6395:
 10208  002478  90D8               	bcf	status,0,c
 10209  00247A  361A               	rlcf	___lwmod@divisor,f,c
 10210  00247C  361B               	rlcf	___lwmod@divisor+1,f,c
 10211  00247E  2A1C               	incf	___lwmod@counter,f,c
 10212  002480  D000               	goto	l6397
 10213  002482                     l6397:
 10214  002482  BE1B               	btfsc	___lwmod@divisor+1,7,c
 10215  002484  D002               	goto	l6399
 10216  002486  D7F8               	goto	l6395
 10217  002488  D000               	goto	l6399
 10218  00248A                     l6399:
 10219  00248A  501A               	movf	___lwmod@divisor,w,c
 10220  00248C  5C18               	subwf	___lwmod@dividend,w,c
 10221  00248E  501B               	movf	___lwmod@divisor+1,w,c
 10222  002490  5819               	subwfb	___lwmod@dividend+1,w,c
 10223  002492  A0D8               	btfss	status,0,c
 10224  002494  D005               	goto	l6403
 10225  002496  501A               	movf	___lwmod@divisor,w,c
 10226  002498  5E18               	subwf	___lwmod@dividend,f,c
 10227  00249A  501B               	movf	___lwmod@divisor+1,w,c
 10228  00249C  5A19               	subwfb	___lwmod@dividend+1,f,c
 10229  00249E  D000               	goto	l6403
 10230  0024A0                     l6403:
 10231  0024A0  90D8               	bcf	status,0,c
 10232  0024A2  321B               	rrcf	___lwmod@divisor+1,f,c
 10233  0024A4  321A               	rrcf	___lwmod@divisor,f,c
 10234  0024A6  2E1C               	decfsz	___lwmod@counter,f,c
 10235  0024A8  D7F0               	goto	l6399
 10236  0024AA  D000               	goto	l1506
 10237  0024AC                     l1506:
 10238  0024AC  C018  F018         	movff	___lwmod@dividend,?___lwmod
 10239  0024B0  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
 10240  0024B4  0012               	return		;funcret
 10241  0024B6                     __end_of___lwmod:
 10242                           	opt stack 0
 10243                           tblptru	equ	0xFF8
 10244                           tblptrh	equ	0xFF7
 10245                           tblptrl	equ	0xFF6
 10246                           tablat	equ	0xFF5
 10247                           prodh	equ	0xFF4
 10248                           prodl	equ	0xFF3
 10249                           intcon	equ	0xFF2
 10250                           intcon2	equ	0xFF1
 10251                           postinc0	equ	0xFEE
 10252                           wreg	equ	0xFE8
 10253                           postdec1	equ	0xFE5
 10254                           fsr1l	equ	0xFE1
 10255                           indf2	equ	0xFDF
 10256                           postinc2	equ	0xFDE
 10257                           postdec2	equ	0xFDD
 10258                           fsr2h	equ	0xFDA
 10259                           fsr2l	equ	0xFD9
 10260                           status	equ	0xFD8
 10261                           
 10262 ;; *************** function ___lwdiv *****************
 10263 ;; Defined at:
 10264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;  dividend        2   16[COMRAM] unsigned int 
 10267 ;;  divisor         2   18[COMRAM] unsigned int 
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;  quotient        2   21[COMRAM] unsigned int 
 10270 ;;  counter         1   20[COMRAM] unsigned char 
 10271 ;; Return value:  Size  Location     Type
 10272 ;;                  2   16[COMRAM] unsigned int 
 10273 ;; Registers used:
 10274 ;;		wreg, status,2, status,0
 10275 ;; Tracked objects:
 10276 ;;		On entry : 0/0
 10277 ;;		On exit  : 0/0
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10280 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10281 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10283 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10284 ;;Total ram usage:        7 bytes
 10285 ;; Hardware stack levels used:    1
 10286 ;; Hardware stack levels required when called:    3
 10287 ;; This function calls:
 10288 ;;		Nothing
 10289 ;; This function is called by:
 10290 ;;		_printf
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           	psect	text46
 10295  002322                     __ptext46:
 10296                           	opt stack 0
 10297  002322                     ___lwdiv:
 10298                           	opt stack 26
 10299                           
 10300                           ;incstack = 0
 10301  002322  0E00               	movlw	0
 10302  002324  6E17               	movwf	___lwdiv@quotient+1,c
 10303  002326  0E00               	movlw	0
 10304  002328  6E16               	movwf	___lwdiv@quotient,c
 10305  00232A  5013               	movf	___lwdiv@divisor,w,c
 10306  00232C  1014               	iorwf	___lwdiv@divisor+1,w,c
 10307  00232E  B4D8               	btfsc	status,2,c
 10308  002330  D021               	goto	l1496
 10309  002332  0E01               	movlw	1
 10310  002334  6E15               	movwf	___lwdiv@counter,c
 10311  002336  D005               	goto	l6377
 10312  002338                     l6375:
 10313  002338  90D8               	bcf	status,0,c
 10314  00233A  3613               	rlcf	___lwdiv@divisor,f,c
 10315  00233C  3614               	rlcf	___lwdiv@divisor+1,f,c
 10316  00233E  2A15               	incf	___lwdiv@counter,f,c
 10317  002340  D000               	goto	l6377
 10318  002342                     l6377:
 10319  002342  BE14               	btfsc	___lwdiv@divisor+1,7,c
 10320  002344  D002               	goto	l6379
 10321  002346  D7F8               	goto	l6375
 10322  002348  D000               	goto	l6379
 10323  00234A                     l6379:
 10324  00234A  90D8               	bcf	status,0,c
 10325  00234C  3616               	rlcf	___lwdiv@quotient,f,c
 10326  00234E  3617               	rlcf	___lwdiv@quotient+1,f,c
 10327  002350  5013               	movf	___lwdiv@divisor,w,c
 10328  002352  5C11               	subwf	___lwdiv@dividend,w,c
 10329  002354  5014               	movf	___lwdiv@divisor+1,w,c
 10330  002356  5812               	subwfb	___lwdiv@dividend+1,w,c
 10331  002358  A0D8               	btfss	status,0,c
 10332  00235A  D006               	goto	l6387
 10333  00235C  5013               	movf	___lwdiv@divisor,w,c
 10334  00235E  5E11               	subwf	___lwdiv@dividend,f,c
 10335  002360  5014               	movf	___lwdiv@divisor+1,w,c
 10336  002362  5A12               	subwfb	___lwdiv@dividend+1,f,c
 10337  002364  8016               	bsf	___lwdiv@quotient,0,c
 10338  002366  D000               	goto	l6387
 10339  002368                     l6387:
 10340  002368  90D8               	bcf	status,0,c
 10341  00236A  3214               	rrcf	___lwdiv@divisor+1,f,c
 10342  00236C  3213               	rrcf	___lwdiv@divisor,f,c
 10343  00236E  2E15               	decfsz	___lwdiv@counter,f,c
 10344  002370  D7EC               	goto	l6379
 10345  002372  D000               	goto	l1496
 10346  002374                     l1496:
 10347  002374  C016  F011         	movff	___lwdiv@quotient,?___lwdiv
 10348  002378  C017  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10349  00237C  0012               	return		;funcret
 10350  00237E                     __end_of___lwdiv:
 10351                           	opt stack 0
 10352                           tblptru	equ	0xFF8
 10353                           tblptrh	equ	0xFF7
 10354                           tblptrl	equ	0xFF6
 10355                           tablat	equ	0xFF5
 10356                           prodh	equ	0xFF4
 10357                           prodl	equ	0xFF3
 10358                           intcon	equ	0xFF2
 10359                           intcon2	equ	0xFF1
 10360                           postinc0	equ	0xFEE
 10361                           wreg	equ	0xFE8
 10362                           postdec1	equ	0xFE5
 10363                           fsr1l	equ	0xFE1
 10364                           indf2	equ	0xFDF
 10365                           postinc2	equ	0xFDE
 10366                           postdec2	equ	0xFDD
 10367                           fsr2h	equ	0xFDA
 10368                           fsr2l	equ	0xFD9
 10369                           status	equ	0xFD8
 10370                           
 10371 ;; *************** function _do_update_pwm *****************
 10372 ;; Defined at:
 10373 ;;		line 86 in file "Fan_Support.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;  duty_cycle      1    wreg     unsigned char 
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  duty_cycle      1    3[BANK0 ] unsigned char 
 10378 ;;  dc_f            3    0[BANK0 ] float 
 10379 ;;  dc_I            2    4[BANK0 ] int 
 10380 ;; Return value:  Size  Location     Type
 10381 ;;		None               void
 10382 ;; Registers used:
 10383 ;;		wreg, status,2, status,0, cstack
 10384 ;; Tracked objects:
 10385 ;;		On entry : 0/0
 10386 ;;		On exit  : 0/0
 10387 ;;		Unchanged: 0/0
 10388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10390 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10391 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10392 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;Total ram usage:        9 bytes
 10394 ;; Hardware stack levels used:    1
 10395 ;; Hardware stack levels required when called:    5
 10396 ;; This function calls:
 10397 ;;		___ftdiv
 10398 ;;		___ftmul
 10399 ;;		___fttol
 10400 ;;		___lbtoft
 10401 ;; This function is called by:
 10402 ;;		_Turn_On_Fan
 10403 ;;		_Increase_Speed
 10404 ;;		_Decrease_Speed
 10405 ;;		_main
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           	psect	text47
 10410  001DAA                     __ptext47:
 10411                           	opt stack 0
 10412  001DAA                     _do_update_pwm:
 10413                           	opt stack 25
 10414                           
 10415                           ;incstack = 0
 10416                           ;do_update_pwm@duty_cycle stored from wreg
 10417  001DAA  0100               	movlb	0	; () banked
 10418  001DAC  6FEC               	movwf	do_update_pwm@duty_cycle& (0+255),b
 10419                           
 10420                           ; BSR set to: 0
 10421                           ;Fan_Support.c: 88: float dc_f;
 10422                           ;Fan_Support.c: 89: int dc_I;
 10423                           ;Fan_Support.c: 90: PR2 = 0b00000100 ;
 10424  001DAE  0E04               	movlw	4
 10425  001DB0  6ECB               	movwf	4043,c	;volatile
 10426                           
 10427                           ;Fan_Support.c: 91: T2CON = 0b00000111 ;
 10428  001DB2  0E07               	movlw	7
 10429  001DB4  6ECA               	movwf	4042,c	;volatile
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;Fan_Support.c: 92: dc_f = ( 4.0 * duty_cycle / 20.0) ;
 10433  001DB6  0E00               	movlw	0
 10434  001DB8  6E20               	movwf	___ftmul@f2,c
 10435  001DBA  0E80               	movlw	128
 10436  001DBC  6E21               	movwf	___ftmul@f2+1,c
 10437  001DBE  0E40               	movlw	64
 10438  001DC0  6E22               	movwf	___ftmul@f2+2,c
 10439  001DC2  0100               	movlb	0	; () banked
 10440  001DC4  51EC               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 10441  001DC6  EC26  F014         	call	___lbtoft
 10442  001DCA  C019  F01D         	movff	?___lbtoft,___ftmul@f1
 10443  001DCE  C01A  F01E         	movff	?___lbtoft+1,___ftmul@f1+1
 10444  001DD2  C01B  F01F         	movff	?___lbtoft+2,___ftmul@f1+2
 10445  001DD6  EC2B  F00C         	call	___ftmul	;wreg free
 10446  001DDA  C01D  F02C         	movff	?___ftmul,___ftdiv@f1
 10447  001DDE  C01E  F02D         	movff	?___ftmul+1,___ftdiv@f1+1
 10448  001DE2  C01F  F02E         	movff	?___ftmul+2,___ftdiv@f1+2
 10449  001DE6  0E00               	movlw	0
 10450  001DE8  6E2F               	movwf	___ftdiv@f2,c
 10451  001DEA  0EA0               	movlw	160
 10452  001DEC  6E30               	movwf	___ftdiv@f2+1,c
 10453  001DEE  0E41               	movlw	65
 10454  001DF0  6E31               	movwf	___ftdiv@f2+2,c
 10455  001DF2  EC93  F00D         	call	___ftdiv	;wreg free
 10456  001DF6  C02C  F0E9         	movff	?___ftdiv,do_update_pwm@dc_f
 10457  001DFA  C02D  F0EA         	movff	?___ftdiv+1,do_update_pwm@dc_f+1
 10458  001DFE  C02E  F0EB         	movff	?___ftdiv+2,do_update_pwm@dc_f+2
 10459                           
 10460                           ;Fan_Support.c: 94: dc_I = (int) dc_f;
 10461  001E02  C0E9  F011         	movff	do_update_pwm@dc_f,___fttol@f1
 10462  001E06  C0EA  F012         	movff	do_update_pwm@dc_f+1,___fttol@f1+1
 10463  001E0A  C0EB  F013         	movff	do_update_pwm@dc_f+2,___fttol@f1+2
 10464  001E0E  EC20  F00D         	call	___fttol	;wreg free
 10465  001E12  C011  F0ED         	movff	?___fttol,do_update_pwm@dc_I
 10466  001E16  C012  F0EE         	movff	?___fttol+1,do_update_pwm@dc_I+1
 10467                           
 10468                           ;Fan_Support.c: 95: if (dc_I > duty_cycle) dc_I++;
 10469  001E1A  0100               	movlb	0	; () banked
 10470  001E1C  51EC               	movf	do_update_pwm@duty_cycle& (0+255),w,b
 10471  001E1E  6E3B               	movwf	??_do_update_pwm& (0+255),c
 10472  001E20  6A3C               	clrf	(??_do_update_pwm+1)& (0+255),c
 10473  001E22  0100               	movlb	0	; () banked
 10474  001E24  51ED               	movf	do_update_pwm@dc_I& (0+255),w,b
 10475  001E26  5C3B               	subwf	??_do_update_pwm,w,c
 10476  001E28  503C               	movf	??_do_update_pwm+1,w,c
 10477  001E2A  0A80               	xorlw	128
 10478  001E2C  6E3D               	movwf	(??_do_update_pwm+2)& (0+255),c
 10479  001E2E  0100               	movlb	0	; () banked
 10480  001E30  51EE               	movf	(do_update_pwm@dc_I+1)& (0+255),w,b
 10481  001E32  0A80               	xorlw	128
 10482  001E34  583D               	subwfb	(??_do_update_pwm+2)& (0+255),w,c
 10483  001E36  B0D8               	btfsc	status,0,c
 10484  001E38  D004               	goto	l6063
 10485                           
 10486                           ; BSR set to: 0
 10487  001E3A  0100               	movlb	0	; () banked
 10488  001E3C  4BED               	infsnz	do_update_pwm@dc_I& (0+255),f,b
 10489  001E3E  2BEE               	incf	(do_update_pwm@dc_I+1)& (0+255),f,b
 10490  001E40  D000               	goto	l6063
 10491  001E42                     l6063:
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;Fan_Support.c: 96: CCP1CON = ((dc_I & 0x03) << 4) | 0b00001100;
 10495  001E42  C0ED  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 10496  001E46  0E03               	movlw	3
 10497  001E48  163B               	andwf	??_do_update_pwm,f,c
 10498  001E4A  383B               	swapf	??_do_update_pwm,w,c
 10499  001E4C  0BF0               	andlw	240
 10500  001E4E  090C               	iorlw	12
 10501  001E50  6EBD               	movwf	4029,c	;volatile
 10502                           
 10503                           ; BSR set to: 0
 10504                           ;Fan_Support.c: 97: CCPR1L = (dc_I) >> 2;
 10505  001E52  C0ED  F03B         	movff	do_update_pwm@dc_I,??_do_update_pwm
 10506  001E56  C0EE  F03C         	movff	do_update_pwm@dc_I+1,??_do_update_pwm+1
 10507  001E5A  343C               	rlcf	??_do_update_pwm+1,w,c
 10508  001E5C  323C               	rrcf	??_do_update_pwm+1,f,c
 10509  001E5E  323B               	rrcf	??_do_update_pwm,f,c
 10510  001E60  343C               	rlcf	??_do_update_pwm+1,w,c
 10511  001E62  323C               	rrcf	??_do_update_pwm+1,f,c
 10512  001E64  323B               	rrcf	??_do_update_pwm,f,c
 10513  001E66  503B               	movf	??_do_update_pwm,w,c
 10514  001E68  6EBE               	movwf	4030,c	;volatile
 10515                           
 10516                           ; BSR set to: 0
 10517  001E6A  0012               	return		;funcret
 10518  001E6C                     __end_of_do_update_pwm:
 10519                           	opt stack 0
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           intcon2	equ	0xFF1
 10528                           postinc0	equ	0xFEE
 10529                           wreg	equ	0xFE8
 10530                           postdec1	equ	0xFE5
 10531                           fsr1l	equ	0xFE1
 10532                           indf2	equ	0xFDF
 10533                           postinc2	equ	0xFDE
 10534                           postdec2	equ	0xFDD
 10535                           fsr2h	equ	0xFDA
 10536                           fsr2l	equ	0xFD9
 10537                           status	equ	0xFD8
 10538                           
 10539 ;; *************** function ___lbtoft *****************
 10540 ;; Defined at:
 10541 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
 10542 ;; Parameters:    Size  Location     Type
 10543 ;;  c               1    wreg     unsigned char 
 10544 ;; Auto vars:     Size  Location     Type
 10545 ;;  c               1   27[COMRAM] unsigned char 
 10546 ;; Return value:  Size  Location     Type
 10547 ;;                  3   24[COMRAM] float 
 10548 ;; Registers used:
 10549 ;;		wreg, status,2, status,0, cstack
 10550 ;; Tracked objects:
 10551 ;;		On entry : 0/0
 10552 ;;		On exit  : 0/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10555 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10558 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10559 ;;Total ram usage:        4 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    4
 10562 ;; This function calls:
 10563 ;;		___ftpack
 10564 ;; This function is called by:
 10565 ;;		_do_update_pwm
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           	psect	text48
 10570  00284C                     __ptext48:
 10571                           	opt stack 0
 10572  00284C                     ___lbtoft:
 10573                           	opt stack 25
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;incstack = 0
 10577                           ;___lbtoft@c stored from wreg
 10578  00284C  6E1C               	movwf	___lbtoft@c,c
 10579  00284E  501C               	movf	___lbtoft@c,w,c
 10580  002850  6E11               	movwf	___ftpack@arg,c
 10581  002852  6A12               	clrf	___ftpack@arg+1,c
 10582  002854  6A13               	clrf	___ftpack@arg+2,c
 10583  002856  0E8E               	movlw	142
 10584  002858  6E14               	movwf	___ftpack@exp,c
 10585  00285A  0E00               	movlw	0
 10586  00285C  6E15               	movwf	___ftpack@sign,c
 10587  00285E  EC72  F00E         	call	___ftpack	;wreg free
 10588  002862  C011  F019         	movff	?___ftpack,?___lbtoft
 10589  002866  C012  F01A         	movff	?___ftpack+1,?___lbtoft+1
 10590  00286A  C013  F01B         	movff	?___ftpack+2,?___lbtoft+2
 10591  00286E  D000               	goto	l1430
 10592  002870                     l1430:
 10593  002870  0012               	return		;funcret
 10594  002872                     __end_of___lbtoft:
 10595                           	opt stack 0
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           intcon2	equ	0xFF1
 10604                           postinc0	equ	0xFEE
 10605                           wreg	equ	0xFE8
 10606                           postdec1	equ	0xFE5
 10607                           fsr1l	equ	0xFE1
 10608                           indf2	equ	0xFDF
 10609                           postinc2	equ	0xFDE
 10610                           postdec2	equ	0xFDD
 10611                           fsr2h	equ	0xFDA
 10612                           fsr2l	equ	0xFD9
 10613                           status	equ	0xFD8
 10614                           
 10615 ;; *************** function ___fttol *****************
 10616 ;; Defined at:
 10617 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;  f1              3   16[COMRAM] float 
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;  lval            4   26[COMRAM] unsigned long 
 10622 ;;  exp1            1   30[COMRAM] unsigned char 
 10623 ;;  sign1           1   25[COMRAM] unsigned char 
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  4   16[COMRAM] long 
 10626 ;; Registers used:
 10627 ;;		wreg, status,2, status,0
 10628 ;; Tracked objects:
 10629 ;;		On entry : 0/0
 10630 ;;		On exit  : 0/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10633 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;Total ram usage:       15 bytes
 10638 ;; Hardware stack levels used:    1
 10639 ;; Hardware stack levels required when called:    3
 10640 ;; This function calls:
 10641 ;;		Nothing
 10642 ;; This function is called by:
 10643 ;;		_do_update_pwm
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           	psect	text49
 10648  001A40                     __ptext49:
 10649                           	opt stack 0
 10650  001A40                     ___fttol:
 10651                           	opt stack 26
 10652                           
 10653                           ;incstack = 0
 10654  001A40  C013  F015         	movff	___fttol@f1+2,??___fttol
 10655  001A44  6A16               	clrf	(??___fttol+1)& (0+255),c
 10656  001A46  6A17               	clrf	(??___fttol+2)& (0+255),c
 10657  001A48  3412               	rlcf	___fttol@f1+1,w,c
 10658  001A4A  3615               	rlcf	??___fttol& (0+255),f,c
 10659  001A4C  E301               	bnc	u4741
 10660  001A4E  8016               	bsf	(??___fttol+1)& (0+255),0,c
 10661  001A50                     u4741:
 10662  001A50  5015               	movf	??___fttol,w,c
 10663  001A52  6E1F               	movwf	___fttol@exp1,c
 10664  001A54  501F               	movf	___fttol@exp1,w,c
 10665  001A56  A4D8               	btfss	status,2,c
 10666  001A58  D002               	goto	l6009
 10667  001A5A  D039               	goto	l6033
 10668  001A5C  D063               	goto	l1389
 10669  001A5E                     l6009:
 10670  001A5E  0E17               	movlw	23
 10671  001A60  6E15               	movwf	??___fttol& (0+255),c
 10672  001A62  C011  F016         	movff	___fttol@f1,??___fttol+1
 10673  001A66  C012  F017         	movff	___fttol@f1+1,??___fttol+2
 10674  001A6A  C013  F018         	movff	___fttol@f1+2,??___fttol+3
 10675  001A6E  2815               	incf	??___fttol,w,c
 10676  001A70  6E19               	movwf	(??___fttol+4)& (0+255),c
 10677  001A72  D004               	goto	u4760
 10678  001A74                     u4765:
 10679  001A74  90D8               	bcf	status,0,c
 10680  001A76  3218               	rrcf	??___fttol+3,f,c
 10681  001A78  3217               	rrcf	??___fttol+2,f,c
 10682  001A7A  3216               	rrcf	??___fttol+1,f,c
 10683  001A7C                     u4760:
 10684  001A7C  2E19               	decfsz	(??___fttol+4)& (0+255),f,c
 10685  001A7E  D7FA               	goto	u4765
 10686  001A80  5016               	movf	??___fttol+1,w,c
 10687  001A82  6E1A               	movwf	___fttol@sign1,c
 10688  001A84  8E12               	bsf	___fttol@f1+1,7,c
 10689  001A86  0EFF               	movlw	255
 10690  001A88  1611               	andwf	___fttol@f1,f,c
 10691  001A8A  0EFF               	movlw	255
 10692  001A8C  1612               	andwf	___fttol@f1+1,f,c
 10693  001A8E  0E00               	movlw	0
 10694  001A90  1613               	andwf	___fttol@f1+2,f,c
 10695  001A92  5011               	movf	___fttol@f1,w,c
 10696  001A94  6E1B               	movwf	___fttol@lval,c
 10697  001A96  5012               	movf	___fttol@f1+1,w,c
 10698  001A98  6E1C               	movwf	___fttol@lval+1,c
 10699  001A9A  5013               	movf	___fttol@f1+2,w,c
 10700  001A9C  6E1D               	movwf	___fttol@lval+2,c
 10701  001A9E  6A1E               	clrf	___fttol@lval+3,c
 10702  001AA0  0E8E               	movlw	142
 10703  001AA2  5E1F               	subwf	___fttol@exp1,f,c
 10704  001AA4  AE1F               	btfss	___fttol@exp1,7,c
 10705  001AA6  D010               	goto	l6031
 10706  001AA8  501F               	movf	___fttol@exp1,w,c
 10707  001AAA  0A80               	xorlw	128
 10708  001AAC  0F8F               	addlw	143
 10709  001AAE  B0D8               	btfsc	status,0,c
 10710  001AB0  D003               	goto	l6027
 10711  001AB2  D00D               	goto	l6033
 10712  001AB4  D037               	goto	l1389
 10713  001AB6  D000               	goto	l6027
 10714  001AB8                     l6027:
 10715  001AB8  90D8               	bcf	status,0,c
 10716  001ABA  321E               	rrcf	___fttol@lval+3,f,c
 10717  001ABC  321D               	rrcf	___fttol@lval+2,f,c
 10718  001ABE  321C               	rrcf	___fttol@lval+1,f,c
 10719  001AC0  321B               	rrcf	___fttol@lval,f,c
 10720  001AC2  3E1F               	incfsz	___fttol@exp1,f,c
 10721  001AC4  D7F9               	goto	l6027
 10722  001AC6  D019               	goto	l6041
 10723  001AC8                     l6031:
 10724  001AC8  0E17               	movlw	23
 10725  001ACA  641F               	cpfsgt	___fttol@exp1,c
 10726  001ACC  D011               	goto	l6039
 10727  001ACE                     l6033:
 10728  001ACE  0E00               	movlw	0
 10729  001AD0  6E11               	movwf	?___fttol,c
 10730  001AD2  0E00               	movlw	0
 10731  001AD4  6E12               	movwf	?___fttol+1,c
 10732  001AD6  0E00               	movlw	0
 10733  001AD8  6E13               	movwf	?___fttol+2,c
 10734  001ADA  0E00               	movlw	0
 10735  001ADC  6E14               	movwf	?___fttol+3,c
 10736  001ADE  D022               	goto	l1389
 10737  001AE0  D007               	goto	l6039
 10738  001AE2                     l6037:
 10739  001AE2  90D8               	bcf	status,0,c
 10740  001AE4  361B               	rlcf	___fttol@lval,f,c
 10741  001AE6  361C               	rlcf	___fttol@lval+1,f,c
 10742  001AE8  361D               	rlcf	___fttol@lval+2,f,c
 10743  001AEA  361E               	rlcf	___fttol@lval+3,f,c
 10744  001AEC  061F               	decf	___fttol@exp1,f,c
 10745  001AEE  D000               	goto	l6039
 10746  001AF0                     l6039:
 10747  001AF0  501F               	movf	___fttol@exp1,w,c
 10748  001AF2  B4D8               	btfsc	status,2,c
 10749  001AF4  D002               	goto	l6041
 10750  001AF6  D7F5               	goto	l6037
 10751  001AF8  D000               	goto	l6041
 10752  001AFA                     l6041:
 10753  001AFA  501A               	movf	___fttol@sign1,w,c
 10754  001AFC  B4D8               	btfsc	status,2,c
 10755  001AFE  D009               	goto	l6045
 10756  001B00  1E1E               	comf	___fttol@lval+3,f,c
 10757  001B02  1E1D               	comf	___fttol@lval+2,f,c
 10758  001B04  1E1C               	comf	___fttol@lval+1,f,c
 10759  001B06  6C1B               	negf	___fttol@lval,c
 10760  001B08  0E00               	movlw	0
 10761  001B0A  221C               	addwfc	___fttol@lval+1,f,c
 10762  001B0C  221D               	addwfc	___fttol@lval+2,f,c
 10763  001B0E  221E               	addwfc	___fttol@lval+3,f,c
 10764  001B10  D000               	goto	l6045
 10765  001B12                     l6045:
 10766  001B12  C01B  F011         	movff	___fttol@lval,?___fttol
 10767  001B16  C01C  F012         	movff	___fttol@lval+1,?___fttol+1
 10768  001B1A  C01D  F013         	movff	___fttol@lval+2,?___fttol+2
 10769  001B1E  C01E  F014         	movff	___fttol@lval+3,?___fttol+3
 10770  001B22  D000               	goto	l1389
 10771  001B24                     l1389:
 10772  001B24  0012               	return		;funcret
 10773  001B26                     __end_of___fttol:
 10774                           	opt stack 0
 10775                           tblptru	equ	0xFF8
 10776                           tblptrh	equ	0xFF7
 10777                           tblptrl	equ	0xFF6
 10778                           tablat	equ	0xFF5
 10779                           prodh	equ	0xFF4
 10780                           prodl	equ	0xFF3
 10781                           intcon	equ	0xFF2
 10782                           intcon2	equ	0xFF1
 10783                           postinc0	equ	0xFEE
 10784                           wreg	equ	0xFE8
 10785                           postdec1	equ	0xFE5
 10786                           fsr1l	equ	0xFE1
 10787                           indf2	equ	0xFDF
 10788                           postinc2	equ	0xFDE
 10789                           postdec2	equ	0xFDD
 10790                           fsr2h	equ	0xFDA
 10791                           fsr2l	equ	0xFD9
 10792                           status	equ	0xFD8
 10793                           
 10794 ;; *************** function ___ftmul *****************
 10795 ;; Defined at:
 10796 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10797 ;; Parameters:    Size  Location     Type
 10798 ;;  f1              3   28[COMRAM] float 
 10799 ;;  f2              3   31[COMRAM] float 
 10800 ;; Auto vars:     Size  Location     Type
 10801 ;;  f3_as_produc    3   38[COMRAM] unsigned um
 10802 ;;  sign            1   42[COMRAM] unsigned char 
 10803 ;;  cntr            1   41[COMRAM] unsigned char 
 10804 ;;  exp             1   37[COMRAM] unsigned char 
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  3   28[COMRAM] float 
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, status,0, cstack
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10814 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10815 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10816 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10817 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10818 ;;Total ram usage:       15 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    4
 10821 ;; This function calls:
 10822 ;;		___ftpack
 10823 ;; This function is called by:
 10824 ;;		_do_update_pwm
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           	psect	text50
 10829  001856                     __ptext50:
 10830                           	opt stack 0
 10831  001856                     ___ftmul:
 10832                           	opt stack 25
 10833                           
 10834                           ;incstack = 0
 10835  001856  C01F  F023         	movff	___ftmul@f1+2,??___ftmul
 10836  00185A  6A24               	clrf	(??___ftmul+1)& (0+255),c
 10837  00185C  6A25               	clrf	(??___ftmul+2)& (0+255),c
 10838  00185E  341E               	rlcf	___ftmul@f1+1,w,c
 10839  001860  3623               	rlcf	??___ftmul& (0+255),f,c
 10840  001862  E301               	bnc	u4681
 10841  001864  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 10842  001866                     u4681:
 10843  001866  5023               	movf	??___ftmul,w,c
 10844  001868  6E26               	movwf	___ftmul@exp,c
 10845  00186A  5026               	movf	___ftmul@exp,w,c
 10846  00186C  A4D8               	btfss	status,2,c
 10847  00186E  D002               	goto	l5961
 10848  001870  D00E               	goto	l5963
 10849  001872  D06C               	goto	l1368
 10850  001874                     l5961:
 10851  001874  C022  F023         	movff	___ftmul@f2+2,??___ftmul
 10852  001878  6A24               	clrf	(??___ftmul+1)& (0+255),c
 10853  00187A  6A25               	clrf	(??___ftmul+2)& (0+255),c
 10854  00187C  3421               	rlcf	___ftmul@f2+1,w,c
 10855  00187E  3623               	rlcf	??___ftmul& (0+255),f,c
 10856  001880  E301               	bnc	u4701
 10857  001882  8024               	bsf	(??___ftmul+1)& (0+255),0,c
 10858  001884                     u4701:
 10859  001884  5023               	movf	??___ftmul,w,c
 10860  001886  6E2B               	movwf	___ftmul@sign,c
 10861  001888  502B               	movf	___ftmul@sign,w,c
 10862  00188A  A4D8               	btfss	status,2,c
 10863  00188C  D007               	goto	l5967
 10864  00188E                     l5963:
 10865  00188E  0E00               	movlw	0
 10866  001890  6E1D               	movwf	?___ftmul,c
 10867  001892  0E00               	movlw	0
 10868  001894  6E1E               	movwf	?___ftmul+1,c
 10869  001896  0E00               	movlw	0
 10870  001898  6E1F               	movwf	?___ftmul+2,c
 10871  00189A  D058               	goto	l1368
 10872  00189C                     l5967:
 10873  00189C  502B               	movf	___ftmul@sign,w,c
 10874  00189E  0F7B               	addlw	123
 10875  0018A0  2626               	addwf	___ftmul@exp,f,c
 10876  0018A2  C01F  F02B         	movff	___ftmul@f1+2,___ftmul@sign
 10877  0018A6  5022               	movf	___ftmul@f2+2,w,c
 10878  0018A8  1A2B               	xorwf	___ftmul@sign,f,c
 10879  0018AA  0E80               	movlw	128
 10880  0018AC  162B               	andwf	___ftmul@sign,f,c
 10881  0018AE  8E1E               	bsf	___ftmul@f1+1,7,c
 10882  0018B0  8E21               	bsf	___ftmul@f2+1,7,c
 10883  0018B2  0EFF               	movlw	255
 10884  0018B4  1620               	andwf	___ftmul@f2,f,c
 10885  0018B6  0EFF               	movlw	255
 10886  0018B8  1621               	andwf	___ftmul@f2+1,f,c
 10887  0018BA  0E00               	movlw	0
 10888  0018BC  1622               	andwf	___ftmul@f2+2,f,c
 10889  0018BE  0E00               	movlw	0
 10890  0018C0  6E27               	movwf	___ftmul@f3_as_product,c
 10891  0018C2  0E00               	movlw	0
 10892  0018C4  6E28               	movwf	___ftmul@f3_as_product+1,c
 10893  0018C6  0E00               	movlw	0
 10894  0018C8  6E29               	movwf	___ftmul@f3_as_product+2,c
 10895  0018CA  0E07               	movlw	7
 10896  0018CC  6E2A               	movwf	___ftmul@cntr,c
 10897  0018CE  D000               	goto	l5981
 10898  0018D0                     l5981:
 10899  0018D0  A01D               	btfss	___ftmul@f1,0,c
 10900  0018D2  D007               	goto	l5985
 10901  0018D4  5020               	movf	___ftmul@f2,w,c
 10902  0018D6  2627               	addwf	___ftmul@f3_as_product,f,c
 10903  0018D8  5021               	movf	___ftmul@f2+1,w,c
 10904  0018DA  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 10905  0018DC  5022               	movf	___ftmul@f2+2,w,c
 10906  0018DE  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 10907  0018E0  D000               	goto	l5985
 10908  0018E2                     l5985:
 10909  0018E2  90D8               	bcf	status,0,c
 10910  0018E4  321F               	rrcf	___ftmul@f1+2,f,c
 10911  0018E6  321E               	rrcf	___ftmul@f1+1,f,c
 10912  0018E8  321D               	rrcf	___ftmul@f1,f,c
 10913  0018EA  90D8               	bcf	status,0,c
 10914  0018EC  3620               	rlcf	___ftmul@f2,f,c
 10915  0018EE  3621               	rlcf	___ftmul@f2+1,f,c
 10916  0018F0  3622               	rlcf	___ftmul@f2+2,f,c
 10917  0018F2  2E2A               	decfsz	___ftmul@cntr,f,c
 10918  0018F4  D7ED               	goto	l5981
 10919  0018F6  D000               	goto	l5989
 10920  0018F8                     l5989:
 10921  0018F8  0E09               	movlw	9
 10922  0018FA  6E2A               	movwf	___ftmul@cntr,c
 10923  0018FC  D000               	goto	l5991
 10924  0018FE                     l5991:
 10925  0018FE  A01D               	btfss	___ftmul@f1,0,c
 10926  001900  D007               	goto	l5995
 10927  001902  5020               	movf	___ftmul@f2,w,c
 10928  001904  2627               	addwf	___ftmul@f3_as_product,f,c
 10929  001906  5021               	movf	___ftmul@f2+1,w,c
 10930  001908  2228               	addwfc	___ftmul@f3_as_product+1,f,c
 10931  00190A  5022               	movf	___ftmul@f2+2,w,c
 10932  00190C  2229               	addwfc	___ftmul@f3_as_product+2,f,c
 10933  00190E  D000               	goto	l5995
 10934  001910                     l5995:
 10935  001910  90D8               	bcf	status,0,c
 10936  001912  321F               	rrcf	___ftmul@f1+2,f,c
 10937  001914  321E               	rrcf	___ftmul@f1+1,f,c
 10938  001916  321D               	rrcf	___ftmul@f1,f,c
 10939  001918  90D8               	bcf	status,0,c
 10940  00191A  3229               	rrcf	___ftmul@f3_as_product+2,f,c
 10941  00191C  3228               	rrcf	___ftmul@f3_as_product+1,f,c
 10942  00191E  3227               	rrcf	___ftmul@f3_as_product,f,c
 10943  001920  2E2A               	decfsz	___ftmul@cntr,f,c
 10944  001922  D7ED               	goto	l5991
 10945  001924  D000               	goto	l5999
 10946  001926                     l5999:
 10947  001926  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
 10948  00192A  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10949  00192E  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10950  001932  C026  F014         	movff	___ftmul@exp,___ftpack@exp
 10951  001936  C02B  F015         	movff	___ftmul@sign,___ftpack@sign
 10952  00193A  EC72  F00E         	call	___ftpack	;wreg free
 10953  00193E  C011  F01D         	movff	?___ftpack,?___ftmul
 10954  001942  C012  F01E         	movff	?___ftpack+1,?___ftmul+1
 10955  001946  C013  F01F         	movff	?___ftpack+2,?___ftmul+2
 10956  00194A  D000               	goto	l1368
 10957  00194C                     l1368:
 10958  00194C  0012               	return		;funcret
 10959  00194E                     __end_of___ftmul:
 10960                           	opt stack 0
 10961                           tblptru	equ	0xFF8
 10962                           tblptrh	equ	0xFF7
 10963                           tblptrl	equ	0xFF6
 10964                           tablat	equ	0xFF5
 10965                           prodh	equ	0xFF4
 10966                           prodl	equ	0xFF3
 10967                           intcon	equ	0xFF2
 10968                           intcon2	equ	0xFF1
 10969                           postinc0	equ	0xFEE
 10970                           wreg	equ	0xFE8
 10971                           postdec1	equ	0xFE5
 10972                           fsr1l	equ	0xFE1
 10973                           indf2	equ	0xFDF
 10974                           postinc2	equ	0xFDE
 10975                           postdec2	equ	0xFDD
 10976                           fsr2h	equ	0xFDA
 10977                           fsr2l	equ	0xFD9
 10978                           status	equ	0xFD8
 10979                           
 10980 ;; *************** function ___ftdiv *****************
 10981 ;; Defined at:
 10982 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 10983 ;; Parameters:    Size  Location     Type
 10984 ;;  f1              3   43[COMRAM] float 
 10985 ;;  f2              3   46[COMRAM] float 
 10986 ;; Auto vars:     Size  Location     Type
 10987 ;;  f3              3   53[COMRAM] float 
 10988 ;;  sign            1   57[COMRAM] unsigned char 
 10989 ;;  exp             1   56[COMRAM] unsigned char 
 10990 ;;  cntr            1   52[COMRAM] unsigned char 
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  3   43[COMRAM] float 
 10993 ;; Registers used:
 10994 ;;		wreg, status,2, status,0, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11000 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11001 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;Total ram usage:       15 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    4
 11007 ;; This function calls:
 11008 ;;		___ftpack
 11009 ;; This function is called by:
 11010 ;;		_do_update_pwm
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           	psect	text51
 11015  001B26                     __ptext51:
 11016                           	opt stack 0
 11017  001B26                     ___ftdiv:
 11018                           	opt stack 25
 11019                           
 11020                           ;incstack = 0
 11021  001B26  C02E  F032         	movff	___ftdiv@f1+2,??___ftdiv
 11022  001B2A  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 11023  001B2C  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 11024  001B2E  342D               	rlcf	___ftdiv@f1+1,w,c
 11025  001B30  3632               	rlcf	??___ftdiv& (0+255),f,c
 11026  001B32  E301               	bnc	u4631
 11027  001B34  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 11028  001B36                     u4631:
 11029  001B36  5032               	movf	??___ftdiv,w,c
 11030  001B38  6E39               	movwf	___ftdiv@exp,c
 11031  001B3A  5039               	movf	___ftdiv@exp,w,c
 11032  001B3C  A4D8               	btfss	status,2,c
 11033  001B3E  D002               	goto	l5915
 11034  001B40  D00E               	goto	l5917
 11035  001B42  D061               	goto	l1353
 11036  001B44                     l5915:
 11037  001B44  C031  F032         	movff	___ftdiv@f2+2,??___ftdiv
 11038  001B48  6A33               	clrf	(??___ftdiv+1)& (0+255),c
 11039  001B4A  6A34               	clrf	(??___ftdiv+2)& (0+255),c
 11040  001B4C  3430               	rlcf	___ftdiv@f2+1,w,c
 11041  001B4E  3632               	rlcf	??___ftdiv& (0+255),f,c
 11042  001B50  E301               	bnc	u4651
 11043  001B52  8033               	bsf	(??___ftdiv+1)& (0+255),0,c
 11044  001B54                     u4651:
 11045  001B54  5032               	movf	??___ftdiv,w,c
 11046  001B56  6E3A               	movwf	___ftdiv@sign,c
 11047  001B58  503A               	movf	___ftdiv@sign,w,c
 11048  001B5A  A4D8               	btfss	status,2,c
 11049  001B5C  D007               	goto	l5921
 11050  001B5E                     l5917:
 11051  001B5E  0E00               	movlw	0
 11052  001B60  6E2C               	movwf	?___ftdiv,c
 11053  001B62  0E00               	movlw	0
 11054  001B64  6E2D               	movwf	?___ftdiv+1,c
 11055  001B66  0E00               	movlw	0
 11056  001B68  6E2E               	movwf	?___ftdiv+2,c
 11057  001B6A  D04D               	goto	l1353
 11058  001B6C                     l5921:
 11059  001B6C  0E00               	movlw	0
 11060  001B6E  6E36               	movwf	___ftdiv@f3,c
 11061  001B70  0E00               	movlw	0
 11062  001B72  6E37               	movwf	___ftdiv@f3+1,c
 11063  001B74  0E00               	movlw	0
 11064  001B76  6E38               	movwf	___ftdiv@f3+2,c
 11065  001B78  503A               	movf	___ftdiv@sign,w,c
 11066  001B7A  0F89               	addlw	137
 11067  001B7C  5E39               	subwf	___ftdiv@exp,f,c
 11068  001B7E  C02E  F03A         	movff	___ftdiv@f1+2,___ftdiv@sign
 11069  001B82  5031               	movf	___ftdiv@f2+2,w,c
 11070  001B84  1A3A               	xorwf	___ftdiv@sign,f,c
 11071  001B86  0E80               	movlw	128
 11072  001B88  163A               	andwf	___ftdiv@sign,f,c
 11073  001B8A  8E2D               	bsf	___ftdiv@f1+1,7,c
 11074  001B8C  0EFF               	movlw	255
 11075  001B8E  162C               	andwf	___ftdiv@f1,f,c
 11076  001B90  0EFF               	movlw	255
 11077  001B92  162D               	andwf	___ftdiv@f1+1,f,c
 11078  001B94  0E00               	movlw	0
 11079  001B96  162E               	andwf	___ftdiv@f1+2,f,c
 11080  001B98  8E30               	bsf	___ftdiv@f2+1,7,c
 11081  001B9A  0EFF               	movlw	255
 11082  001B9C  162F               	andwf	___ftdiv@f2,f,c
 11083  001B9E  0EFF               	movlw	255
 11084  001BA0  1630               	andwf	___ftdiv@f2+1,f,c
 11085  001BA2  0E00               	movlw	0
 11086  001BA4  1631               	andwf	___ftdiv@f2+2,f,c
 11087  001BA6  0E18               	movlw	24
 11088  001BA8  6E35               	movwf	___ftdiv@cntr,c
 11089  001BAA  D000               	goto	l5941
 11090  001BAC                     l5941:
 11091  001BAC  90D8               	bcf	status,0,c
 11092  001BAE  3636               	rlcf	___ftdiv@f3,f,c
 11093  001BB0  3637               	rlcf	___ftdiv@f3+1,f,c
 11094  001BB2  3638               	rlcf	___ftdiv@f3+2,f,c
 11095  001BB4  502F               	movf	___ftdiv@f2,w,c
 11096  001BB6  5C2C               	subwf	___ftdiv@f1,w,c
 11097  001BB8  5030               	movf	___ftdiv@f2+1,w,c
 11098  001BBA  582D               	subwfb	___ftdiv@f1+1,w,c
 11099  001BBC  5031               	movf	___ftdiv@f2+2,w,c
 11100  001BBE  582E               	subwfb	___ftdiv@f1+2,w,c
 11101  001BC0  A0D8               	btfss	status,0,c
 11102  001BC2  D007               	goto	l1356
 11103  001BC4  502F               	movf	___ftdiv@f2,w,c
 11104  001BC6  5E2C               	subwf	___ftdiv@f1,f,c
 11105  001BC8  5030               	movf	___ftdiv@f2+1,w,c
 11106  001BCA  5A2D               	subwfb	___ftdiv@f1+1,f,c
 11107  001BCC  5031               	movf	___ftdiv@f2+2,w,c
 11108  001BCE  5A2E               	subwfb	___ftdiv@f1+2,f,c
 11109  001BD0  8036               	bsf	___ftdiv@f3,0,c
 11110  001BD2                     l1356:
 11111  001BD2  90D8               	bcf	status,0,c
 11112  001BD4  362C               	rlcf	___ftdiv@f1,f,c
 11113  001BD6  362D               	rlcf	___ftdiv@f1+1,f,c
 11114  001BD8  362E               	rlcf	___ftdiv@f1+2,f,c
 11115  001BDA  2E35               	decfsz	___ftdiv@cntr,f,c
 11116  001BDC  D7E7               	goto	l5941
 11117  001BDE  D000               	goto	l5951
 11118  001BE0                     l5951:
 11119  001BE0  C036  F011         	movff	___ftdiv@f3,___ftpack@arg
 11120  001BE4  C037  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
 11121  001BE8  C038  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
 11122  001BEC  C039  F014         	movff	___ftdiv@exp,___ftpack@exp
 11123  001BF0  C03A  F015         	movff	___ftdiv@sign,___ftpack@sign
 11124  001BF4  EC72  F00E         	call	___ftpack	;wreg free
 11125  001BF8  C011  F02C         	movff	?___ftpack,?___ftdiv
 11126  001BFC  C012  F02D         	movff	?___ftpack+1,?___ftdiv+1
 11127  001C00  C013  F02E         	movff	?___ftpack+2,?___ftdiv+2
 11128  001C04  D000               	goto	l1353
 11129  001C06                     l1353:
 11130  001C06  0012               	return		;funcret
 11131  001C08                     __end_of___ftdiv:
 11132                           	opt stack 0
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           intcon2	equ	0xFF1
 11141                           postinc0	equ	0xFEE
 11142                           wreg	equ	0xFE8
 11143                           postdec1	equ	0xFE5
 11144                           fsr1l	equ	0xFE1
 11145                           indf2	equ	0xFDF
 11146                           postinc2	equ	0xFDE
 11147                           postdec2	equ	0xFDD
 11148                           fsr2h	equ	0xFDA
 11149                           fsr2l	equ	0xFD9
 11150                           status	equ	0xFD8
 11151                           
 11152 ;; *************** function ___ftpack *****************
 11153 ;; Defined at:
 11154 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11155 ;; Parameters:    Size  Location     Type
 11156 ;;  arg             3   16[COMRAM] unsigned um
 11157 ;;  exp             1   19[COMRAM] unsigned char 
 11158 ;;  sign            1   20[COMRAM] unsigned char 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  3   16[COMRAM] float 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2, status,0
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11170 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;Total ram usage:        8 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    3
 11177 ;; This function calls:
 11178 ;;		Nothing
 11179 ;; This function is called by:
 11180 ;;		___ftdiv
 11181 ;;		___ftmul
 11182 ;;		___lbtoft
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           	psect	text52
 11187  001CE4                     __ptext52:
 11188                           	opt stack 0
 11189  001CE4                     ___ftpack:
 11190                           	opt stack 25
 11191                           
 11192                           ;incstack = 0
 11193  001CE4  5014               	movf	___ftpack@exp,w,c
 11194  001CE6  B4D8               	btfsc	status,2,c
 11195  001CE8  D005               	goto	l5805
 11196  001CEA  5011               	movf	___ftpack@arg,w,c
 11197  001CEC  1012               	iorwf	___ftpack@arg+1,w,c
 11198  001CEE  1013               	iorwf	___ftpack@arg+2,w,c
 11199  001CF0  A4D8               	btfss	status,2,c
 11200  001CF2  D00E               	goto	l5811
 11201  001CF4                     l5805:
 11202  001CF4  0E00               	movlw	0
 11203  001CF6  6E11               	movwf	?___ftpack,c
 11204  001CF8  0E00               	movlw	0
 11205  001CFA  6E12               	movwf	?___ftpack+1,c
 11206  001CFC  0E00               	movlw	0
 11207  001CFE  6E13               	movwf	?___ftpack+2,c
 11208  001D00  D053               	goto	l1281
 11209  001D02  D006               	goto	l5811
 11210  001D04                     l5809:
 11211  001D04  2A14               	incf	___ftpack@exp,f,c
 11212  001D06  90D8               	bcf	status,0,c
 11213  001D08  3213               	rrcf	___ftpack@arg+2,f,c
 11214  001D0A  3212               	rrcf	___ftpack@arg+1,f,c
 11215  001D0C  3211               	rrcf	___ftpack@arg,f,c
 11216  001D0E  D000               	goto	l5811
 11217  001D10                     l5811:
 11218  001D10  0E00               	movlw	0
 11219  001D12  1411               	andwf	___ftpack@arg,w,c
 11220  001D14  6E16               	movwf	??___ftpack& (0+255),c
 11221  001D16  0E00               	movlw	0
 11222  001D18  1412               	andwf	___ftpack@arg+1,w,c
 11223  001D1A  6E17               	movwf	(??___ftpack+1)& (0+255),c
 11224  001D1C  0EFE               	movlw	254
 11225  001D1E  1413               	andwf	___ftpack@arg+2,w,c
 11226  001D20  6E18               	movwf	(??___ftpack+2)& (0+255),c
 11227  001D22  5016               	movf	??___ftpack,w,c
 11228  001D24  1017               	iorwf	??___ftpack+1,w,c
 11229  001D26  1018               	iorwf	??___ftpack+2,w,c
 11230  001D28  B4D8               	btfsc	status,2,c
 11231  001D2A  D00E               	goto	l5817
 11232  001D2C  D7EB               	goto	l5809
 11233  001D2E  D00C               	goto	l5817
 11234  001D30                     l5813:
 11235  001D30  2A14               	incf	___ftpack@exp,f,c
 11236  001D32  0E01               	movlw	1
 11237  001D34  2611               	addwf	___ftpack@arg,f,c
 11238  001D36  0E00               	movlw	0
 11239  001D38  2212               	addwfc	___ftpack@arg+1,f,c
 11240  001D3A  0E00               	movlw	0
 11241  001D3C  2213               	addwfc	___ftpack@arg+2,f,c
 11242  001D3E  90D8               	bcf	status,0,c
 11243  001D40  3213               	rrcf	___ftpack@arg+2,f,c
 11244  001D42  3212               	rrcf	___ftpack@arg+1,f,c
 11245  001D44  3211               	rrcf	___ftpack@arg,f,c
 11246  001D46  D000               	goto	l5817
 11247  001D48                     l5817:
 11248  001D48  0E00               	movlw	0
 11249  001D4A  1411               	andwf	___ftpack@arg,w,c
 11250  001D4C  6E16               	movwf	??___ftpack& (0+255),c
 11251  001D4E  0E00               	movlw	0
 11252  001D50  1412               	andwf	___ftpack@arg+1,w,c
 11253  001D52  6E17               	movwf	(??___ftpack+1)& (0+255),c
 11254  001D54  0EFF               	movlw	255
 11255  001D56  1413               	andwf	___ftpack@arg+2,w,c
 11256  001D58  6E18               	movwf	(??___ftpack+2)& (0+255),c
 11257  001D5A  5016               	movf	??___ftpack,w,c
 11258  001D5C  1017               	iorwf	??___ftpack+1,w,c
 11259  001D5E  1018               	iorwf	??___ftpack+2,w,c
 11260  001D60  B4D8               	btfsc	status,2,c
 11261  001D62  D008               	goto	l5821
 11262  001D64  D7E5               	goto	l5813
 11263  001D66  D006               	goto	l5821
 11264  001D68                     l5819:
 11265  001D68  0614               	decf	___ftpack@exp,f,c
 11266  001D6A  90D8               	bcf	status,0,c
 11267  001D6C  3611               	rlcf	___ftpack@arg,f,c
 11268  001D6E  3612               	rlcf	___ftpack@arg+1,f,c
 11269  001D70  3613               	rlcf	___ftpack@arg+2,f,c
 11270  001D72  D000               	goto	l5821
 11271  001D74                     l5821:
 11272  001D74  BE12               	btfsc	___ftpack@arg+1,7,c
 11273  001D76  D004               	goto	l1292
 11274  001D78  0E02               	movlw	2
 11275  001D7A  6014               	cpfslt	___ftpack@exp,c
 11276  001D7C  D7F5               	goto	l5819
 11277  001D7E  D000               	goto	l1292
 11278  001D80                     l1292:
 11279  001D80  B014               	btfsc	___ftpack@exp,0,c
 11280  001D82  D002               	goto	l5827
 11281  001D84  9E12               	bcf	___ftpack@arg+1,7,c
 11282  001D86  D000               	goto	l5827
 11283  001D88                     l5827:
 11284  001D88  90D8               	bcf	status,0,c
 11285  001D8A  3214               	rrcf	___ftpack@exp,f,c
 11286  001D8C  5014               	movf	___ftpack@exp,w,c
 11287  001D8E  1213               	iorwf	___ftpack@arg+2,f,c
 11288  001D90  5015               	movf	___ftpack@sign,w,c
 11289  001D92  B4D8               	btfsc	status,2,c
 11290  001D94  D002               	goto	l5833
 11291  001D96  8E13               	bsf	___ftpack@arg+2,7,c
 11292  001D98  D000               	goto	l5833
 11293  001D9A                     l5833:
 11294  001D9A  C011  F011         	movff	___ftpack@arg,?___ftpack
 11295  001D9E  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
 11296  001DA2  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
 11297  001DA6  D000               	goto	l1281
 11298  001DA8                     l1281:
 11299  001DA8  0012               	return		;funcret
 11300  001DAA                     __end_of___ftpack:
 11301                           	opt stack 0
 11302                           tblptru	equ	0xFF8
 11303                           tblptrh	equ	0xFF7
 11304                           tblptrl	equ	0xFF6
 11305                           tablat	equ	0xFF5
 11306                           prodh	equ	0xFF4
 11307                           prodl	equ	0xFF3
 11308                           intcon	equ	0xFF2
 11309                           intcon2	equ	0xFF1
 11310                           postinc0	equ	0xFEE
 11311                           wreg	equ	0xFE8
 11312                           postdec1	equ	0xFE5
 11313                           fsr1l	equ	0xFE1
 11314                           indf2	equ	0xFDF
 11315                           postinc2	equ	0xFDE
 11316                           postdec2	equ	0xFDD
 11317                           fsr2h	equ	0xFDA
 11318                           fsr2l	equ	0xFD9
 11319                           status	equ	0xFD8
 11320                           
 11321 ;; *************** function _Do_Beep *****************
 11322 ;; Defined at:
 11323 ;;		line 10 in file "Utils.c"
 11324 ;; Parameters:    Size  Location     Type
 11325 ;;		None
 11326 ;; Auto vars:     Size  Location     Type
 11327 ;;		None
 11328 ;; Return value:  Size  Location     Type
 11329 ;;                  2   16[None  ] int 
 11330 ;; Registers used:
 11331 ;;		wreg, status,2, cstack
 11332 ;; Tracked objects:
 11333 ;;		On entry : 0/0
 11334 ;;		On exit  : 0/0
 11335 ;;		Unchanged: 0/0
 11336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11341 ;;Total ram usage:        0 bytes
 11342 ;; Hardware stack levels used:    1
 11343 ;; Hardware stack levels required when called:    4
 11344 ;; This function calls:
 11345 ;;		_Activate_Buzzer
 11346 ;;		_Deactivate_Buzzer
 11347 ;;		_Wait_Half_Second
 11348 ;; This function is called by:
 11349 ;;		_Increase_Speed
 11350 ;;		_Decrease_Speed
 11351 ;;		_main
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           	psect	text53
 11356  002922                     __ptext53:
 11357                           	opt stack 0
 11358  002922                     _Do_Beep:
 11359                           	opt stack 25
 11360                           
 11361                           ;Utils.c: 12: Activate_Buzzer();
 11362                           
 11363                           ;incstack = 0
 11364  002922  ECCE  F014         	call	_Activate_Buzzer	;wreg free
 11365                           
 11366                           ;Utils.c: 13: Wait_Half_Second();
 11367  002926  EC84  F014         	call	_Wait_Half_Second	;wreg free
 11368                           
 11369                           ;Utils.c: 14: Activate_Buzzer();
 11370  00292A  ECCE  F014         	call	_Activate_Buzzer	;wreg free
 11371                           
 11372                           ;Utils.c: 15: Wait_Half_Second();
 11373  00292E  EC84  F014         	call	_Wait_Half_Second	;wreg free
 11374                           
 11375                           ;Utils.c: 16: Deactivate_Buzzer();
 11376  002932  EC2F  F015         	call	_Deactivate_Buzzer	;wreg free
 11377  002936  0012               	return		;funcret
 11378  002938                     __end_of_Do_Beep:
 11379                           	opt stack 0
 11380                           tblptru	equ	0xFF8
 11381                           tblptrh	equ	0xFF7
 11382                           tblptrl	equ	0xFF6
 11383                           tablat	equ	0xFF5
 11384                           prodh	equ	0xFF4
 11385                           prodl	equ	0xFF3
 11386                           intcon	equ	0xFF2
 11387                           intcon2	equ	0xFF1
 11388                           postinc0	equ	0xFEE
 11389                           wreg	equ	0xFE8
 11390                           postdec1	equ	0xFE5
 11391                           fsr1l	equ	0xFE1
 11392                           indf2	equ	0xFDF
 11393                           postinc2	equ	0xFDE
 11394                           postdec2	equ	0xFDD
 11395                           fsr2h	equ	0xFDA
 11396                           fsr2l	equ	0xFD9
 11397                           status	equ	0xFD8
 11398                           
 11399 ;; *************** function _Wait_Half_Second *****************
 11400 ;; Defined at:
 11401 ;;		line 25 in file "Utils.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;		None
 11404 ;; Auto vars:     Size  Location     Type
 11405 ;;		None
 11406 ;; Return value:  Size  Location     Type
 11407 ;;                  2  135[None  ] int 
 11408 ;; Registers used:
 11409 ;;		wreg, status,2
 11410 ;; Tracked objects:
 11411 ;;		On entry : 0/0
 11412 ;;		On exit  : 0/0
 11413 ;;		Unchanged: 0/0
 11414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;Total ram usage:        0 bytes
 11420 ;; Hardware stack levels used:    1
 11421 ;; Hardware stack levels required when called:    3
 11422 ;; This function calls:
 11423 ;;		Nothing
 11424 ;; This function is called by:
 11425 ;;		_main
 11426 ;;		_Do_Beep
 11427 ;;		_Wait_One_Sec
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           	psect	text54
 11432  002908                     __ptext54:
 11433                           	opt stack 0
 11434  002908                     _Wait_Half_Second:
 11435                           	opt stack 27
 11436                           
 11437                           ;Utils.c: 27: T0CON = 0x02;
 11438                           
 11439                           ;incstack = 0
 11440  002908  0E02               	movlw	2
 11441  00290A  6ED5               	movwf	4053,c	;volatile
 11442                           
 11443                           ;Utils.c: 28: TMR0L = 0xDB;
 11444  00290C  0EDB               	movlw	219
 11445  00290E  6ED6               	movwf	4054,c	;volatile
 11446                           
 11447                           ;Utils.c: 29: TMR0H = 0x0B;
 11448  002910  0E0B               	movlw	11
 11449  002912  6ED7               	movwf	4055,c	;volatile
 11450                           
 11451                           ;Utils.c: 30: INTCONbits.TMR0IF = 0;
 11452  002914  94F2               	bcf	intcon,2,c	;volatile
 11453                           
 11454                           ;Utils.c: 31: T0CONbits.TMR0ON = 1;
 11455  002916  8ED5               	bsf	4053,7,c	;volatile
 11456                           
 11457                           ;Utils.c: 32: while (INTCONbits.TMR0IF == 0);
 11458  002918  D000               	goto	l593
 11459  00291A                     l593:
 11460  00291A  A4F2               	btfss	intcon,2,c	;volatile
 11461  00291C  D7FE               	goto	l593
 11462                           
 11463                           ;Utils.c: 33: T0CONbits.TMR0ON = 0;
 11464  00291E  9ED5               	bcf	4053,7,c	;volatile
 11465  002920  0012               	return		;funcret
 11466  002922                     __end_of_Wait_Half_Second:
 11467                           	opt stack 0
 11468                           tblptru	equ	0xFF8
 11469                           tblptrh	equ	0xFF7
 11470                           tblptrl	equ	0xFF6
 11471                           tablat	equ	0xFF5
 11472                           prodh	equ	0xFF4
 11473                           prodl	equ	0xFF3
 11474                           intcon	equ	0xFF2
 11475                           intcon2	equ	0xFF1
 11476                           postinc0	equ	0xFEE
 11477                           wreg	equ	0xFE8
 11478                           postdec1	equ	0xFE5
 11479                           fsr1l	equ	0xFE1
 11480                           indf2	equ	0xFDF
 11481                           postinc2	equ	0xFDE
 11482                           postdec2	equ	0xFDD
 11483                           fsr2h	equ	0xFDA
 11484                           fsr2l	equ	0xFD9
 11485                           status	equ	0xFD8
 11486                           
 11487 ;; *************** function _Deactivate_Buzzer *****************
 11488 ;; Defined at:
 11489 ;;		line 44 in file "Utils.c"
 11490 ;; Parameters:    Size  Location     Type
 11491 ;;		None
 11492 ;; Auto vars:     Size  Location     Type
 11493 ;;		None
 11494 ;; Return value:  Size  Location     Type
 11495 ;;                  2  137[None  ] int 
 11496 ;; Registers used:
 11497 ;;		wreg, status,2
 11498 ;; Tracked objects:
 11499 ;;		On entry : 0/0
 11500 ;;		On exit  : 0/0
 11501 ;;		Unchanged: 0/0
 11502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11507 ;;Total ram usage:        0 bytes
 11508 ;; Hardware stack levels used:    1
 11509 ;; Hardware stack levels required when called:    3
 11510 ;; This function calls:
 11511 ;;		Nothing
 11512 ;; This function is called by:
 11513 ;;		_main
 11514 ;;		_Do_Beep
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           	psect	text55
 11519  002A5E                     __ptext55:
 11520                           	opt stack 0
 11521  002A5E                     _Deactivate_Buzzer:
 11522                           	opt stack 25
 11523                           
 11524                           ;Utils.c: 46: CCP2CON = 0x0;
 11525                           
 11526                           ;incstack = 0
 11527  002A5E  0E00               	movlw	0
 11528  002A60  6EBA               	movwf	4026,c	;volatile
 11529                           
 11530                           ;Utils.c: 47: PORTBbits.RB3 = 0;
 11531  002A62  9681               	bcf	3969,3,c	;volatile
 11532  002A64  0012               	return		;funcret
 11533  002A66                     __end_of_Deactivate_Buzzer:
 11534                           	opt stack 0
 11535                           tblptru	equ	0xFF8
 11536                           tblptrh	equ	0xFF7
 11537                           tblptrl	equ	0xFF6
 11538                           tablat	equ	0xFF5
 11539                           prodh	equ	0xFF4
 11540                           prodl	equ	0xFF3
 11541                           intcon	equ	0xFF2
 11542                           intcon2	equ	0xFF1
 11543                           postinc0	equ	0xFEE
 11544                           wreg	equ	0xFE8
 11545                           postdec1	equ	0xFE5
 11546                           fsr1l	equ	0xFE1
 11547                           indf2	equ	0xFDF
 11548                           postinc2	equ	0xFDE
 11549                           postdec2	equ	0xFDD
 11550                           fsr2h	equ	0xFDA
 11551                           fsr2l	equ	0xFD9
 11552                           status	equ	0xFD8
 11553                           
 11554 ;; *************** function _Activate_Buzzer *****************
 11555 ;; Defined at:
 11556 ;;		line 36 in file "Utils.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;		None
 11559 ;; Auto vars:     Size  Location     Type
 11560 ;;		None
 11561 ;; Return value:  Size  Location     Type
 11562 ;;                  2  131[None  ] int 
 11563 ;; Registers used:
 11564 ;;		wreg, status,2
 11565 ;; Tracked objects:
 11566 ;;		On entry : 0/0
 11567 ;;		On exit  : 0/0
 11568 ;;		Unchanged: 0/0
 11569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11574 ;;Total ram usage:        0 bytes
 11575 ;; Hardware stack levels used:    1
 11576 ;; Hardware stack levels required when called:    3
 11577 ;; This function calls:
 11578 ;;		Nothing
 11579 ;; This function is called by:
 11580 ;;		_main
 11581 ;;		_Do_Beep
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           	psect	text56
 11586  00299C                     __ptext56:
 11587                           	opt stack 0
 11588  00299C                     _Activate_Buzzer:
 11589                           	opt stack 25
 11590                           
 11591                           ;Utils.c: 38: PR2 = 0b11111001 ;
 11592                           
 11593                           ;incstack = 0
 11594  00299C  0EF9               	movlw	249
 11595  00299E  6ECB               	movwf	4043,c	;volatile
 11596                           
 11597                           ;Utils.c: 39: T2CON = 0b00000101 ;
 11598  0029A0  0E05               	movlw	5
 11599  0029A2  6ECA               	movwf	4042,c	;volatile
 11600                           
 11601                           ;Utils.c: 40: CCPR2L = 0b01001010 ;
 11602  0029A4  0E4A               	movlw	74
 11603  0029A6  6EBB               	movwf	4027,c	;volatile
 11604                           
 11605                           ;Utils.c: 41: CCP2CON = 0b00111100 ;
 11606  0029A8  0E3C               	movlw	60
 11607  0029AA  6EBA               	movwf	4026,c	;volatile
 11608  0029AC  0012               	return		;funcret
 11609  0029AE                     __end_of_Activate_Buzzer:
 11610                           	opt stack 0
 11611                           tblptru	equ	0xFF8
 11612                           tblptrh	equ	0xFF7
 11613                           tblptrl	equ	0xFF6
 11614                           tablat	equ	0xFF5
 11615                           prodh	equ	0xFF4
 11616                           prodl	equ	0xFF3
 11617                           intcon	equ	0xFF2
 11618                           intcon2	equ	0xFF1
 11619                           postinc0	equ	0xFEE
 11620                           wreg	equ	0xFE8
 11621                           postdec1	equ	0xFE5
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           postdec2	equ	0xFDD
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _DS3231_Setup_Time *****************
 11631 ;; Defined at:
 11632 ;;		line 64 in file "I2C_Support.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;		None
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  Address         1   19[COMRAM] unsigned char 
 11637 ;;  Device          1   18[COMRAM] unsigned char 
 11638 ;; Return value:  Size  Location     Type
 11639 ;;		None               void
 11640 ;; Registers used:
 11641 ;;		wreg, status,2, status,0, cstack
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;Total ram usage:        2 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    5
 11654 ;; This function calls:
 11655 ;;		_I2C_Start
 11656 ;;		_I2C_Stop
 11657 ;;		_I2C_Write
 11658 ;; This function is called by:
 11659 ;;		_main
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           	psect	text57
 11664  002258                     __ptext57:
 11665                           	opt stack 0
 11666  002258                     _DS3231_Setup_Time:
 11667                           	opt stack 25
 11668                           
 11669                           ;I2C_Support.c: 66: char Device = 0x68;
 11670                           
 11671                           ;incstack = 0
 11672  002258  0E68               	movlw	104
 11673  00225A  6E13               	movwf	DS3231_Setup_Time@Device,c
 11674                           
 11675                           ;I2C_Support.c: 67: char Address = 0x00;
 11676  00225C  0E00               	movlw	0
 11677  00225E  6E14               	movwf	DS3231_Setup_Time@Address,c
 11678                           
 11679                           ;I2C_Support.c: 68: second = 0x00;
 11680  002260  0E00               	movlw	0
 11681  002262  6E62               	movwf	_second,c
 11682                           
 11683                           ;I2C_Support.c: 69: minute = 0x20;
 11684  002264  0E20               	movlw	32
 11685  002266  6E5F               	movwf	_minute,c
 11686                           
 11687                           ;I2C_Support.c: 70: hour = 0x04;
 11688  002268  0E04               	movlw	4
 11689  00226A  6E5D               	movwf	_hour,c
 11690                           
 11691                           ;I2C_Support.c: 71: dow = 0x02;
 11692  00226C  0E02               	movlw	2
 11693  00226E  6E5A               	movwf	_dow,c
 11694                           
 11695                           ;I2C_Support.c: 72: day = 0x2;
 11696  002270  0E02               	movlw	2
 11697  002272  6E59               	movwf	_day,c
 11698                           
 11699                           ;I2C_Support.c: 73: month = 0x09;
 11700  002274  0E09               	movlw	9
 11701  002276  6E60               	movwf	_month,c
 11702                           
 11703                           ;I2C_Support.c: 74: year = 0x02;
 11704  002278  0E02               	movlw	2
 11705  00227A  6E6C               	movwf	_year,c
 11706                           
 11707                           ;I2C_Support.c: 75: I2C_Start();
 11708  00227C  ECE0  F014         	call	_I2C_Start	;wreg free
 11709                           
 11710                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
 11711  002280  5013               	movf	DS3231_Setup_Time@Device,w,c
 11712  002282  2413               	addwf	DS3231_Setup_Time@Device,w,c
 11713  002284  EC65  F013         	call	_I2C_Write
 11714                           
 11715                           ;I2C_Support.c: 77: I2C_Write(Address);
 11716  002288  5014               	movf	DS3231_Setup_Time@Address,w,c
 11717  00228A  EC65  F013         	call	_I2C_Write
 11718                           
 11719                           ;I2C_Support.c: 78: I2C_Write(second);
 11720  00228E  5062               	movf	_second,w,c
 11721  002290  EC65  F013         	call	_I2C_Write
 11722                           
 11723                           ;I2C_Support.c: 79: I2C_Write(minute);
 11724  002294  505F               	movf	_minute,w,c
 11725  002296  EC65  F013         	call	_I2C_Write
 11726                           
 11727                           ;I2C_Support.c: 80: I2C_Write(hour);
 11728  00229A  505D               	movf	_hour,w,c
 11729  00229C  EC65  F013         	call	_I2C_Write
 11730                           
 11731                           ;I2C_Support.c: 81: I2C_Write(dow);
 11732  0022A0  505A               	movf	_dow,w,c
 11733  0022A2  EC65  F013         	call	_I2C_Write
 11734                           
 11735                           ;I2C_Support.c: 82: I2C_Write(day);
 11736  0022A6  5059               	movf	_day,w,c
 11737  0022A8  EC65  F013         	call	_I2C_Write
 11738                           
 11739                           ;I2C_Support.c: 83: I2C_Write(month);
 11740  0022AC  5060               	movf	_month,w,c
 11741  0022AE  EC65  F013         	call	_I2C_Write
 11742                           
 11743                           ;I2C_Support.c: 84: I2C_Write(year);
 11744  0022B2  506C               	movf	_year,w,c
 11745  0022B4  EC65  F013         	call	_I2C_Write
 11746                           
 11747                           ;I2C_Support.c: 85: I2C_Stop();
 11748  0022B8  ECD7  F014         	call	_I2C_Stop	;wreg free
 11749  0022BC  0012               	return		;funcret
 11750  0022BE                     __end_of_DS3231_Setup_Time:
 11751                           	opt stack 0
 11752                           tblptru	equ	0xFF8
 11753                           tblptrh	equ	0xFF7
 11754                           tblptrl	equ	0xFF6
 11755                           tablat	equ	0xFF5
 11756                           prodh	equ	0xFF4
 11757                           prodl	equ	0xFF3
 11758                           intcon	equ	0xFF2
 11759                           intcon2	equ	0xFF1
 11760                           postinc0	equ	0xFEE
 11761                           wreg	equ	0xFE8
 11762                           postdec1	equ	0xFE5
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _DS3231_Read_Time *****************
 11772 ;; Defined at:
 11773 ;;		line 43 in file "I2C_Support.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  Device          1   20[COMRAM] unsigned char 
 11778 ;;  Address         1   19[COMRAM] unsigned char 
 11779 ;; Return value:  Size  Location     Type
 11780 ;;		None               void
 11781 ;; Registers used:
 11782 ;;		wreg, status,2, status,0, cstack
 11783 ;; Tracked objects:
 11784 ;;		On entry : 0/0
 11785 ;;		On exit  : 0/0
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;Total ram usage:        2 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:    6
 11795 ;; This function calls:
 11796 ;;		_I2C_ReStart
 11797 ;;		_I2C_Read
 11798 ;;		_I2C_Start
 11799 ;;		_I2C_Stop
 11800 ;;		_I2C_Write
 11801 ;; This function is called by:
 11802 ;;		_main
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           	psect	text58
 11807  0022BE                     __ptext58:
 11808                           	opt stack 0
 11809  0022BE                     _DS3231_Read_Time:
 11810                           	opt stack 24
 11811                           
 11812                           ;I2C_Support.c: 45: char Device = 0x68;
 11813                           
 11814                           ;incstack = 0
 11815  0022BE  0E68               	movlw	104
 11816  0022C0  6E15               	movwf	DS3231_Read_Time@Device,c
 11817                           
 11818                           ;I2C_Support.c: 46: char Address = 0x00;
 11819  0022C2  0E00               	movlw	0
 11820  0022C4  6E14               	movwf	DS3231_Read_Time@Address,c
 11821                           
 11822                           ;I2C_Support.c: 47: I2C_Start();
 11823  0022C6  ECE0  F014         	call	_I2C_Start	;wreg free
 11824                           
 11825                           ;I2C_Support.c: 48: I2C_Write((Device << 1) | 0);
 11826  0022CA  5015               	movf	DS3231_Read_Time@Device,w,c
 11827  0022CC  2415               	addwf	DS3231_Read_Time@Device,w,c
 11828  0022CE  EC65  F013         	call	_I2C_Write
 11829                           
 11830                           ;I2C_Support.c: 49: I2C_Write(Address);
 11831  0022D2  5014               	movf	DS3231_Read_Time@Address,w,c
 11832  0022D4  EC65  F013         	call	_I2C_Write
 11833                           
 11834                           ;I2C_Support.c: 50: I2C_ReStart();
 11835  0022D8  EC9C  F014         	call	_I2C_ReStart	;wreg free
 11836                           
 11837                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 1);
 11838  0022DC  80D8               	bsf	status,0,c
 11839  0022DE  3415               	rlcf	DS3231_Read_Time@Device,w,c
 11840  0022E0  EC65  F013         	call	_I2C_Write
 11841                           
 11842                           ;I2C_Support.c: 52: second = I2C_Read(1);
 11843  0022E4  0E01               	movlw	1
 11844  0022E6  EC80  F012         	call	_I2C_Read
 11845  0022EA  6E62               	movwf	_second,c
 11846                           
 11847                           ;I2C_Support.c: 53: minute = I2C_Read(1);
 11848  0022EC  0E01               	movlw	1
 11849  0022EE  EC80  F012         	call	_I2C_Read
 11850  0022F2  6E5F               	movwf	_minute,c
 11851                           
 11852                           ;I2C_Support.c: 54: hour = I2C_Read(1);
 11853  0022F4  0E01               	movlw	1
 11854  0022F6  EC80  F012         	call	_I2C_Read
 11855  0022FA  6E5D               	movwf	_hour,c
 11856                           
 11857                           ;I2C_Support.c: 55: dow = I2C_Read(1);
 11858  0022FC  0E01               	movlw	1
 11859  0022FE  EC80  F012         	call	_I2C_Read
 11860  002302  6E5A               	movwf	_dow,c
 11861                           
 11862                           ;I2C_Support.c: 56: day = I2C_Read(1);
 11863  002304  0E01               	movlw	1
 11864  002306  EC80  F012         	call	_I2C_Read
 11865  00230A  6E59               	movwf	_day,c
 11866                           
 11867                           ;I2C_Support.c: 57: month = I2C_Read(1);
 11868  00230C  0E01               	movlw	1
 11869  00230E  EC80  F012         	call	_I2C_Read
 11870  002312  6E60               	movwf	_month,c
 11871                           
 11872                           ;I2C_Support.c: 58: year = I2C_Read(0);
 11873  002314  0E00               	movlw	0
 11874  002316  EC80  F012         	call	_I2C_Read
 11875  00231A  6E6C               	movwf	_year,c
 11876                           
 11877                           ;I2C_Support.c: 60: I2C_Stop();
 11878  00231C  ECD7  F014         	call	_I2C_Stop	;wreg free
 11879  002320  0012               	return		;funcret
 11880  002322                     __end_of_DS3231_Read_Time:
 11881                           	opt stack 0
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           intcon	equ	0xFF2
 11889                           intcon2	equ	0xFF1
 11890                           postinc0	equ	0xFEE
 11891                           wreg	equ	0xFE8
 11892                           postdec1	equ	0xFE5
 11893                           fsr1l	equ	0xFE1
 11894                           indf2	equ	0xFDF
 11895                           postinc2	equ	0xFDE
 11896                           postdec2	equ	0xFDD
 11897                           fsr2h	equ	0xFDA
 11898                           fsr2l	equ	0xFD9
 11899                           status	equ	0xFD8
 11900                           
 11901 ;; *************** function _DS1621_Read_Temp *****************
 11902 ;; Defined at:
 11903 ;;		line 28 in file "I2C_Support.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;		None
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;  Device          1   23[COMRAM] unsigned char 
 11908 ;;  Data_Ret        1   22[COMRAM] char 
 11909 ;;  Cmd             1   21[COMRAM] unsigned char 
 11910 ;; Return value:  Size  Location     Type
 11911 ;;                  2   19[COMRAM] int 
 11912 ;; Registers used:
 11913 ;;		wreg, status,2, status,0, cstack
 11914 ;; Tracked objects:
 11915 ;;		On entry : 0/0
 11916 ;;		On exit  : 0/0
 11917 ;;		Unchanged: 0/0
 11918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11919 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11920 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11922 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11923 ;;Total ram usage:        5 bytes
 11924 ;; Hardware stack levels used:    1
 11925 ;; Hardware stack levels required when called:    6
 11926 ;; This function calls:
 11927 ;;		_I2C_ReStart
 11928 ;;		_I2C_Read
 11929 ;;		_I2C_Start
 11930 ;;		_I2C_Stop
 11931 ;;		_I2C_Write
 11932 ;; This function is called by:
 11933 ;;		_main
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           	psect	text59
 11938  0025D0                     __ptext59:
 11939                           	opt stack 0
 11940  0025D0                     _DS1621_Read_Temp:
 11941                           	opt stack 24
 11942                           
 11943                           ;I2C_Support.c: 30: char Device = 0x48;
 11944                           
 11945                           ;incstack = 0
 11946  0025D0  0E48               	movlw	72
 11947  0025D2  6E18               	movwf	DS1621_Read_Temp@Device,c
 11948                           
 11949                           ;I2C_Support.c: 31: char Cmd = 0xAA;
 11950  0025D4  0EAA               	movlw	170
 11951  0025D6  6E16               	movwf	DS1621_Read_Temp@Cmd,c
 11952                           
 11953                           ;I2C_Support.c: 32: signed char Data_Ret;
 11954                           ;I2C_Support.c: 33: I2C_Start();
 11955  0025D8  ECE0  F014         	call	_I2C_Start	;wreg free
 11956                           
 11957                           ;I2C_Support.c: 34: I2C_Write((Device << 1) | 0);
 11958  0025DC  5018               	movf	DS1621_Read_Temp@Device,w,c
 11959  0025DE  2418               	addwf	DS1621_Read_Temp@Device,w,c
 11960  0025E0  EC65  F013         	call	_I2C_Write
 11961                           
 11962                           ;I2C_Support.c: 35: I2C_Write(Cmd);
 11963  0025E4  5016               	movf	DS1621_Read_Temp@Cmd,w,c
 11964  0025E6  EC65  F013         	call	_I2C_Write
 11965                           
 11966                           ;I2C_Support.c: 36: I2C_ReStart();
 11967  0025EA  EC9C  F014         	call	_I2C_ReStart	;wreg free
 11968                           
 11969                           ;I2C_Support.c: 37: I2C_Write((Device << 1) | 1);
 11970  0025EE  80D8               	bsf	status,0,c
 11971  0025F0  3418               	rlcf	DS1621_Read_Temp@Device,w,c
 11972  0025F2  EC65  F013         	call	_I2C_Write
 11973                           
 11974                           ;I2C_Support.c: 38: Data_Ret = I2C_Read(0);
 11975  0025F6  0E00               	movlw	0
 11976  0025F8  EC80  F012         	call	_I2C_Read
 11977  0025FC  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
 11978                           
 11979                           ;I2C_Support.c: 39: I2C_Stop();
 11980  0025FE  ECD7  F014         	call	_I2C_Stop	;wreg free
 11981                           
 11982                           ;I2C_Support.c: 40: return Data_Ret;
 11983  002602  5017               	movf	DS1621_Read_Temp@Data_Ret,w,c
 11984  002604  6E14               	movwf	?_DS1621_Read_Temp,c
 11985  002606  6A15               	clrf	?_DS1621_Read_Temp+1,c
 11986  002608  BE14               	btfsc	?_DS1621_Read_Temp,7,c
 11987  00260A  0615               	decf	?_DS1621_Read_Temp+1,f,c
 11988  00260C  D000               	goto	l784
 11989  00260E                     l784:
 11990  00260E  0012               	return		;funcret
 11991  002610                     __end_of_DS1621_Read_Temp:
 11992                           	opt stack 0
 11993                           tblptru	equ	0xFF8
 11994                           tblptrh	equ	0xFF7
 11995                           tblptrl	equ	0xFF6
 11996                           tablat	equ	0xFF5
 11997                           prodh	equ	0xFF4
 11998                           prodl	equ	0xFF3
 11999                           intcon	equ	0xFF2
 12000                           intcon2	equ	0xFF1
 12001                           postinc0	equ	0xFEE
 12002                           wreg	equ	0xFE8
 12003                           postdec1	equ	0xFE5
 12004                           fsr1l	equ	0xFE1
 12005                           indf2	equ	0xFDF
 12006                           postinc2	equ	0xFDE
 12007                           postdec2	equ	0xFDD
 12008                           fsr2h	equ	0xFDA
 12009                           fsr2l	equ	0xFD9
 12010                           status	equ	0xFD8
 12011                           
 12012 ;; *************** function _I2C_Write *****************
 12013 ;; Defined at:
 12014 ;;		line 41 in file "I2C_Soft.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;  outByte         1    wreg     unsigned char 
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;  outByte         1   16[COMRAM] unsigned char 
 12019 ;;  n               1   17[COMRAM] unsigned char 
 12020 ;; Return value:  Size  Location     Type
 12021 ;;		None               void
 12022 ;; Registers used:
 12023 ;;		wreg, status,2, status,0, cstack
 12024 ;; Tracked objects:
 12025 ;;		On entry : 0/0
 12026 ;;		On exit  : 0/0
 12027 ;;		Unchanged: 0/0
 12028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12032 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12033 ;;Total ram usage:        2 bytes
 12034 ;; Hardware stack levels used:    1
 12035 ;; Hardware stack levels required when called:    4
 12036 ;; This function calls:
 12037 ;;		_i2cHighScl
 12038 ;;		_i2cHighSda
 12039 ;;		_i2cLowScl
 12040 ;;		_i2cLowSda
 12041 ;; This function is called by:
 12042 ;;		_I2C_Write_Cmd_Only
 12043 ;;		_I2C_Write_Cmd_Write_Data
 12044 ;;		_DS1621_Read_Temp
 12045 ;;		_DS3231_Read_Time
 12046 ;;		_DS3231_Setup_Time
 12047 ;;		_I2C_Write_Address_Read_One_Byte
 12048 ;;		_I2C_Write_Address_Write_One_Byte
 12049 ;;		_I2C_Write_Cmd_Read_One_Byte
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           	psect	text60
 12054  0026CA                     __ptext60:
 12055                           	opt stack 0
 12056  0026CA                     _I2C_Write:
 12057                           	opt stack 23
 12058                           
 12059                           ;incstack = 0
 12060                           ;I2C_Write@outByte stored from wreg
 12061  0026CA  6E11               	movwf	I2C_Write@outByte,c
 12062                           
 12063                           ;I2C_Soft.c: 43: unsigned char n;
 12064                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
 12065  0026CC  0E00               	movlw	0
 12066  0026CE  6E12               	movwf	I2C_Write@n,c
 12067  0026D0                     l5871:
 12068  0026D0  0E07               	movlw	7
 12069  0026D2  6412               	cpfsgt	I2C_Write@n,c
 12070  0026D4  D001               	goto	l635
 12071  0026D6  D011               	goto	l5889
 12072  0026D8                     l635:
 12073                           
 12074                           ;I2C_Soft.c: 45: {
 12075                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
 12076  0026D8  AE11               	btfss	I2C_Write@outByte,7,c
 12077  0026DA  D003               	goto	l5877
 12078  0026DC  EC37  F015         	call	_i2cHighSda	;wreg free
 12079  0026E0  D003               	goto	l5879
 12080  0026E2                     l5877:
 12081                           
 12082                           ;I2C_Soft.c: 47: else i2cLowSda();
 12083  0026E2  EC26  F015         	call	_i2cLowSda	;wreg free
 12084  0026E6  D000               	goto	l5879
 12085  0026E8                     l5879:
 12086                           
 12087                           ;I2C_Soft.c: 48: i2cHighScl();
 12088  0026E8  EC10  F015         	call	_i2cHighScl	;wreg free
 12089                           
 12090                           ;I2C_Soft.c: 49: i2cLowScl();
 12091  0026EC  EC33  F015         	call	_i2cLowScl	;wreg free
 12092                           
 12093                           ;I2C_Soft.c: 50: outByte = outByte << 1;
 12094  0026F0  5011               	movf	I2C_Write@outByte,w,c
 12095  0026F2  2411               	addwf	I2C_Write@outByte,w,c
 12096  0026F4  6E11               	movwf	I2C_Write@outByte,c
 12097  0026F6  2A12               	incf	I2C_Write@n,f,c
 12098  0026F8  D7EB               	goto	l5871
 12099  0026FA                     l5889:
 12100                           
 12101                           ;I2C_Soft.c: 51: }
 12102                           ;I2C_Soft.c: 52: i2cHighSda();
 12103  0026FA  EC37  F015         	call	_i2cHighSda	;wreg free
 12104                           
 12105                           ;I2C_Soft.c: 53: i2cHighScl();
 12106  0026FE  EC10  F015         	call	_i2cHighScl	;wreg free
 12107                           
 12108                           ;I2C_Soft.c: 54: i2cLowScl();
 12109  002702  EC33  F015         	call	_i2cLowScl	;wreg free
 12110  002706  0012               	return		;funcret
 12111  002708                     __end_of_I2C_Write:
 12112                           	opt stack 0
 12113                           tblptru	equ	0xFF8
 12114                           tblptrh	equ	0xFF7
 12115                           tblptrl	equ	0xFF6
 12116                           tablat	equ	0xFF5
 12117                           prodh	equ	0xFF4
 12118                           prodl	equ	0xFF3
 12119                           intcon	equ	0xFF2
 12120                           intcon2	equ	0xFF1
 12121                           postinc0	equ	0xFEE
 12122                           wreg	equ	0xFE8
 12123                           postdec1	equ	0xFE5
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           fsr2h	equ	0xFDA
 12129                           fsr2l	equ	0xFD9
 12130                           status	equ	0xFD8
 12131                           
 12132 ;; *************** function _I2C_Stop *****************
 12133 ;; Defined at:
 12134 ;;		line 88 in file "I2C_Soft.c"
 12135 ;; Parameters:    Size  Location     Type
 12136 ;;		None
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;		None
 12139 ;; Return value:  Size  Location     Type
 12140 ;;		None               void
 12141 ;; Registers used:
 12142 ;;		wreg, cstack
 12143 ;; Tracked objects:
 12144 ;;		On entry : 0/0
 12145 ;;		On exit  : 0/0
 12146 ;;		Unchanged: 0/0
 12147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12152 ;;Total ram usage:        0 bytes
 12153 ;; Hardware stack levels used:    1
 12154 ;; Hardware stack levels required when called:    4
 12155 ;; This function calls:
 12156 ;;		_i2cHighScl
 12157 ;;		_i2cHighSda
 12158 ;;		_i2cLowScl
 12159 ;;		_i2cLowSda
 12160 ;; This function is called by:
 12161 ;;		_I2C_Write_Cmd_Only
 12162 ;;		_I2C_Write_Cmd_Write_Data
 12163 ;;		_DS1621_Read_Temp
 12164 ;;		_DS3231_Read_Time
 12165 ;;		_DS3231_Setup_Time
 12166 ;;		_I2C_Write_Address_Read_One_Byte
 12167 ;;		_I2C_Write_Address_Write_One_Byte
 12168 ;;		_I2C_Write_Cmd_Read_One_Byte
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           	psect	text61
 12173  0029AE                     __ptext61:
 12174                           	opt stack 0
 12175  0029AE                     _I2C_Stop:
 12176                           	opt stack 23
 12177                           
 12178                           ;I2C_Soft.c: 90: i2cLowScl();
 12179                           
 12180                           ;incstack = 0
 12181  0029AE  EC33  F015         	call	_i2cLowScl	;wreg free
 12182                           
 12183                           ;I2C_Soft.c: 91: i2cLowSda();
 12184  0029B2  EC26  F015         	call	_i2cLowSda	;wreg free
 12185                           
 12186                           ;I2C_Soft.c: 92: i2cHighScl();
 12187  0029B6  EC10  F015         	call	_i2cHighScl	;wreg free
 12188                           
 12189                           ;I2C_Soft.c: 93: i2cHighSda();
 12190  0029BA  EC37  F015         	call	_i2cHighSda	;wreg free
 12191  0029BE  0012               	return		;funcret
 12192  0029C0                     __end_of_I2C_Stop:
 12193                           	opt stack 0
 12194                           tblptru	equ	0xFF8
 12195                           tblptrh	equ	0xFF7
 12196                           tblptrl	equ	0xFF6
 12197                           tablat	equ	0xFF5
 12198                           prodh	equ	0xFF4
 12199                           prodl	equ	0xFF3
 12200                           intcon	equ	0xFF2
 12201                           intcon2	equ	0xFF1
 12202                           postinc0	equ	0xFEE
 12203                           wreg	equ	0xFE8
 12204                           postdec1	equ	0xFE5
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           postdec2	equ	0xFDD
 12209                           fsr2h	equ	0xFDA
 12210                           fsr2l	equ	0xFD9
 12211                           status	equ	0xFD8
 12212                           
 12213 ;; *************** function _I2C_Start *****************
 12214 ;; Defined at:
 12215 ;;		line 71 in file "I2C_Soft.c"
 12216 ;; Parameters:    Size  Location     Type
 12217 ;;		None
 12218 ;; Auto vars:     Size  Location     Type
 12219 ;;		None
 12220 ;; Return value:  Size  Location     Type
 12221 ;;		None               void
 12222 ;; Registers used:
 12223 ;;		wreg, cstack
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;Total ram usage:        0 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:    4
 12236 ;; This function calls:
 12237 ;;		_i2cHighScl
 12238 ;;		_i2cHighSda
 12239 ;;		_i2cLowScl
 12240 ;;		_i2cLowSda
 12241 ;; This function is called by:
 12242 ;;		_I2C_Write_Cmd_Only
 12243 ;;		_I2C_Write_Cmd_Write_Data
 12244 ;;		_DS1621_Read_Temp
 12245 ;;		_DS3231_Read_Time
 12246 ;;		_DS3231_Setup_Time
 12247 ;;		_I2C_Write_Address_Read_One_Byte
 12248 ;;		_I2C_Write_Address_Write_One_Byte
 12249 ;;		_I2C_Write_Cmd_Read_One_Byte
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text62
 12254  0029C0                     __ptext62:
 12255                           	opt stack 0
 12256  0029C0                     _I2C_Start:
 12257                           	opt stack 23
 12258                           
 12259                           ;I2C_Soft.c: 73: i2cHighSda();
 12260                           
 12261                           ;incstack = 0
 12262  0029C0  EC37  F015         	call	_i2cHighSda	;wreg free
 12263                           
 12264                           ;I2C_Soft.c: 74: i2cHighScl();
 12265  0029C4  EC10  F015         	call	_i2cHighScl	;wreg free
 12266                           
 12267                           ;I2C_Soft.c: 75: i2cLowSda();
 12268  0029C8  EC26  F015         	call	_i2cLowSda	;wreg free
 12269                           
 12270                           ;I2C_Soft.c: 76: i2cLowScl();
 12271  0029CC  EC33  F015         	call	_i2cLowScl	;wreg free
 12272  0029D0  0012               	return		;funcret
 12273  0029D2                     __end_of_I2C_Start:
 12274                           	opt stack 0
 12275                           tblptru	equ	0xFF8
 12276                           tblptrh	equ	0xFF7
 12277                           tblptrl	equ	0xFF6
 12278                           tablat	equ	0xFF5
 12279                           prodh	equ	0xFF4
 12280                           prodl	equ	0xFF3
 12281                           intcon	equ	0xFF2
 12282                           intcon2	equ	0xFF1
 12283                           postinc0	equ	0xFEE
 12284                           wreg	equ	0xFE8
 12285                           postdec1	equ	0xFE5
 12286                           fsr1l	equ	0xFE1
 12287                           indf2	equ	0xFDF
 12288                           postinc2	equ	0xFDE
 12289                           postdec2	equ	0xFDD
 12290                           fsr2h	equ	0xFDA
 12291                           fsr2l	equ	0xFD9
 12292                           status	equ	0xFD8
 12293                           
 12294 ;; *************** function _I2C_Read *****************
 12295 ;; Defined at:
 12296 ;;		line 20 in file "I2C_Soft.c"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;  ack             1    wreg     unsigned char 
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;  ack             1   16[COMRAM] unsigned char 
 12301 ;;  inByte          1   18[COMRAM] unsigned char 
 12302 ;;  n               1   17[COMRAM] unsigned char 
 12303 ;; Return value:  Size  Location     Type
 12304 ;;                  1    wreg      unsigned char 
 12305 ;; Registers used:
 12306 ;;		wreg, status,2, status,0, cstack
 12307 ;; Tracked objects:
 12308 ;;		On entry : 0/0
 12309 ;;		On exit  : 0/0
 12310 ;;		Unchanged: 0/0
 12311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12313 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12315 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12316 ;;Total ram usage:        3 bytes
 12317 ;; Hardware stack levels used:    1
 12318 ;; Hardware stack levels required when called:    5
 12319 ;; This function calls:
 12320 ;;		_i2cAck
 12321 ;;		_i2cHighScl
 12322 ;;		_i2cHighSda
 12323 ;;		_i2cLowScl
 12324 ;;		_i2cNack
 12325 ;; This function is called by:
 12326 ;;		_DS1621_Read_Temp
 12327 ;;		_DS3231_Read_Time
 12328 ;;		_I2C_Write_Address_Read_One_Byte
 12329 ;;		_I2C_Write_Cmd_Read_One_Byte
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           	psect	text63
 12334  002500                     __ptext63:
 12335                           	opt stack 0
 12336  002500                     _I2C_Read:
 12337                           	opt stack 24
 12338                           
 12339                           ;incstack = 0
 12340                           ;I2C_Read@ack stored from wreg
 12341  002500  6E11               	movwf	I2C_Read@ack,c
 12342                           
 12343                           ;I2C_Soft.c: 22: unsigned char inByte, n;
 12344                           ;I2C_Soft.c: 23: i2cHighSda();
 12345  002502  EC37  F015         	call	_i2cHighSda	;wreg free
 12346                           
 12347                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
 12348  002506  0E00               	movlw	0
 12349  002508  6E12               	movwf	I2C_Read@n,c
 12350  00250A                     l6873:
 12351  00250A  0E07               	movlw	7
 12352  00250C  6412               	cpfsgt	I2C_Read@n,c
 12353  00250E  D001               	goto	l6877
 12354  002510  D00F               	goto	l6891
 12355  002512                     l6877:
 12356                           
 12357                           ;I2C_Soft.c: 25: {
 12358                           ;I2C_Soft.c: 26: i2cHighScl();
 12359  002512  EC10  F015         	call	_i2cHighScl	;wreg free
 12360                           
 12361                           ;I2C_Soft.c: 28: if (PORTAbits.RA5)
 12362  002516  AA80               	btfss	3968,5,c	;volatile
 12363  002518  D003               	goto	l6883
 12364                           
 12365                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
 12366  00251A  80D8               	bsf	status,0,c
 12367  00251C  3613               	rlcf	I2C_Read@inByte,f,c
 12368  00251E  D004               	goto	l6885
 12369  002520                     l6883:
 12370                           
 12371                           ;I2C_Soft.c: 30: else
 12372                           ;I2C_Soft.c: 31: inByte = inByte << 1;
 12373  002520  5013               	movf	I2C_Read@inByte,w,c
 12374  002522  2413               	addwf	I2C_Read@inByte,w,c
 12375  002524  6E13               	movwf	I2C_Read@inByte,c
 12376  002526  D000               	goto	l6885
 12377  002528                     l6885:
 12378                           
 12379                           ;I2C_Soft.c: 32: i2cLowScl();
 12380  002528  EC33  F015         	call	_i2cLowScl	;wreg free
 12381  00252C  2A12               	incf	I2C_Read@n,f,c
 12382  00252E  D7ED               	goto	l6873
 12383  002530                     l6891:
 12384                           
 12385                           ;I2C_Soft.c: 33: }
 12386                           ;I2C_Soft.c: 34: if (ack) i2cAck();
 12387  002530  5011               	movf	I2C_Read@ack,w,c
 12388  002532  B4D8               	btfsc	status,2,c
 12389  002534  D003               	goto	l6895
 12390  002536  ECE9  F014         	call	_i2cAck	;wreg free
 12391  00253A  D003               	goto	l6897
 12392  00253C                     l6895:
 12393                           
 12394                           ;I2C_Soft.c: 35: else i2cNack();
 12395  00253C  EC21  F015         	call	_i2cNack	;wreg free
 12396  002540  D000               	goto	l6897
 12397  002542                     l6897:
 12398                           
 12399                           ;I2C_Soft.c: 38: return(inByte);
 12400  002542  5013               	movf	I2C_Read@inByte,w,c
 12401  002544  D000               	goto	l632
 12402  002546                     l632:
 12403  002546  0012               	return		;funcret
 12404  002548                     __end_of_I2C_Read:
 12405                           	opt stack 0
 12406                           tblptru	equ	0xFF8
 12407                           tblptrh	equ	0xFF7
 12408                           tblptrl	equ	0xFF6
 12409                           tablat	equ	0xFF5
 12410                           prodh	equ	0xFF4
 12411                           prodl	equ	0xFF3
 12412                           intcon	equ	0xFF2
 12413                           intcon2	equ	0xFF1
 12414                           postinc0	equ	0xFEE
 12415                           wreg	equ	0xFE8
 12416                           postdec1	equ	0xFE5
 12417                           fsr1l	equ	0xFE1
 12418                           indf2	equ	0xFDF
 12419                           postinc2	equ	0xFDE
 12420                           postdec2	equ	0xFDD
 12421                           fsr2h	equ	0xFDA
 12422                           fsr2l	equ	0xFD9
 12423                           status	equ	0xFD8
 12424                           
 12425 ;; *************** function _i2cNack *****************
 12426 ;; Defined at:
 12427 ;;		line 57 in file "I2C_Soft.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;		None
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;		None
 12432 ;; Return value:  Size  Location     Type
 12433 ;;		None               void
 12434 ;; Registers used:
 12435 ;;		wreg, cstack
 12436 ;; Tracked objects:
 12437 ;;		On entry : 0/0
 12438 ;;		On exit  : 0/0
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12445 ;;Total ram usage:        0 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    4
 12448 ;; This function calls:
 12449 ;;		_i2cHighScl
 12450 ;;		_i2cLowScl
 12451 ;; This function is called by:
 12452 ;;		_I2C_Read
 12453 ;; This function uses a non-reentrant model
 12454 ;;
 12455                           
 12456                           	psect	text64
 12457  002A42                     __ptext64:
 12458                           	opt stack 0
 12459  002A42                     _i2cNack:
 12460                           	opt stack 24
 12461                           
 12462                           ;I2C_Soft.c: 59: i2cHighScl();
 12463                           
 12464                           ;incstack = 0
 12465  002A42  EC10  F015         	call	_i2cHighScl	;wreg free
 12466                           
 12467                           ;I2C_Soft.c: 60: i2cLowScl();
 12468  002A46  EC33  F015         	call	_i2cLowScl	;wreg free
 12469  002A4A  0012               	return		;funcret
 12470  002A4C                     __end_of_i2cNack:
 12471                           	opt stack 0
 12472                           tblptru	equ	0xFF8
 12473                           tblptrh	equ	0xFF7
 12474                           tblptrl	equ	0xFF6
 12475                           tablat	equ	0xFF5
 12476                           prodh	equ	0xFF4
 12477                           prodl	equ	0xFF3
 12478                           intcon	equ	0xFF2
 12479                           intcon2	equ	0xFF1
 12480                           postinc0	equ	0xFEE
 12481                           wreg	equ	0xFE8
 12482                           postdec1	equ	0xFE5
 12483                           fsr1l	equ	0xFE1
 12484                           indf2	equ	0xFDF
 12485                           postinc2	equ	0xFDE
 12486                           postdec2	equ	0xFDD
 12487                           fsr2h	equ	0xFDA
 12488                           fsr2l	equ	0xFD9
 12489                           status	equ	0xFD8
 12490                           
 12491 ;; *************** function _i2cAck *****************
 12492 ;; Defined at:
 12493 ;;		line 63 in file "I2C_Soft.c"
 12494 ;; Parameters:    Size  Location     Type
 12495 ;;		None
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;		None
 12498 ;; Return value:  Size  Location     Type
 12499 ;;		None               void
 12500 ;; Registers used:
 12501 ;;		wreg, cstack
 12502 ;; Tracked objects:
 12503 ;;		On entry : 0/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12511 ;;Total ram usage:        0 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; Hardware stack levels required when called:    4
 12514 ;; This function calls:
 12515 ;;		_i2cHighScl
 12516 ;;		_i2cHighSda
 12517 ;;		_i2cLowScl
 12518 ;;		_i2cLowSda
 12519 ;; This function is called by:
 12520 ;;		_I2C_Read
 12521 ;; This function uses a non-reentrant model
 12522 ;;
 12523                           
 12524                           	psect	text65
 12525  0029D2                     __ptext65:
 12526                           	opt stack 0
 12527  0029D2                     _i2cAck:
 12528                           	opt stack 24
 12529                           
 12530                           ;I2C_Soft.c: 65: i2cLowSda();
 12531                           
 12532                           ;incstack = 0
 12533  0029D2  EC26  F015         	call	_i2cLowSda	;wreg free
 12534                           
 12535                           ;I2C_Soft.c: 66: i2cHighScl();
 12536  0029D6  EC10  F015         	call	_i2cHighScl	;wreg free
 12537                           
 12538                           ;I2C_Soft.c: 67: i2cLowScl();
 12539  0029DA  EC33  F015         	call	_i2cLowScl	;wreg free
 12540                           
 12541                           ;I2C_Soft.c: 68: i2cHighSda();
 12542  0029DE  EC37  F015         	call	_i2cHighSda	;wreg free
 12543  0029E2  0012               	return		;funcret
 12544  0029E4                     __end_of_i2cAck:
 12545                           	opt stack 0
 12546                           tblptru	equ	0xFF8
 12547                           tblptrh	equ	0xFF7
 12548                           tblptrl	equ	0xFF6
 12549                           tablat	equ	0xFF5
 12550                           prodh	equ	0xFF4
 12551                           prodl	equ	0xFF3
 12552                           intcon	equ	0xFF2
 12553                           intcon2	equ	0xFF1
 12554                           postinc0	equ	0xFEE
 12555                           wreg	equ	0xFE8
 12556                           postdec1	equ	0xFE5
 12557                           fsr1l	equ	0xFE1
 12558                           indf2	equ	0xFDF
 12559                           postinc2	equ	0xFDE
 12560                           postdec2	equ	0xFDD
 12561                           fsr2h	equ	0xFDA
 12562                           fsr2l	equ	0xFD9
 12563                           status	equ	0xFD8
 12564                           
 12565 ;; *************** function _I2C_ReStart *****************
 12566 ;; Defined at:
 12567 ;;		line 79 in file "I2C_Soft.c"
 12568 ;; Parameters:    Size  Location     Type
 12569 ;;		None
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;		None
 12572 ;; Return value:  Size  Location     Type
 12573 ;;		None               void
 12574 ;; Registers used:
 12575 ;;		wreg, cstack
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12585 ;;Total ram usage:        0 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; Hardware stack levels required when called:    4
 12588 ;; This function calls:
 12589 ;;		_i2cHighScl
 12590 ;;		_i2cHighSda
 12591 ;;		_i2cLowScl
 12592 ;;		_i2cLowSda
 12593 ;; This function is called by:
 12594 ;;		_DS1621_Read_Temp
 12595 ;;		_DS3231_Read_Time
 12596 ;;		_I2C_Write_Address_Read_One_Byte
 12597 ;;		_I2C_Write_Cmd_Read_One_Byte
 12598 ;; This function uses a non-reentrant model
 12599 ;;
 12600                           
 12601                           	psect	text66
 12602  002938                     __ptext66:
 12603                           	opt stack 0
 12604  002938                     _I2C_ReStart:
 12605                           	opt stack 25
 12606                           
 12607                           ;I2C_Soft.c: 81: i2cLowScl();
 12608                           
 12609                           ;incstack = 0
 12610  002938  EC33  F015         	call	_i2cLowScl	;wreg free
 12611                           
 12612                           ;I2C_Soft.c: 82: i2cHighSda();
 12613  00293C  EC37  F015         	call	_i2cHighSda	;wreg free
 12614                           
 12615                           ;I2C_Soft.c: 83: i2cHighScl();
 12616  002940  EC10  F015         	call	_i2cHighScl	;wreg free
 12617                           
 12618                           ;I2C_Soft.c: 84: i2cLowSda();
 12619  002944  EC26  F015         	call	_i2cLowSda	;wreg free
 12620                           
 12621                           ;I2C_Soft.c: 85: i2cLowScl();
 12622  002948  EC33  F015         	call	_i2cLowScl	;wreg free
 12623  00294C  0012               	return		;funcret
 12624  00294E                     __end_of_I2C_ReStart:
 12625                           	opt stack 0
 12626                           tblptru	equ	0xFF8
 12627                           tblptrh	equ	0xFF7
 12628                           tblptrl	equ	0xFF6
 12629                           tablat	equ	0xFF5
 12630                           prodh	equ	0xFF4
 12631                           prodl	equ	0xFF3
 12632                           intcon	equ	0xFF2
 12633                           intcon2	equ	0xFF1
 12634                           postinc0	equ	0xFEE
 12635                           wreg	equ	0xFE8
 12636                           postdec1	equ	0xFE5
 12637                           fsr1l	equ	0xFE1
 12638                           indf2	equ	0xFDF
 12639                           postinc2	equ	0xFDE
 12640                           postdec2	equ	0xFDD
 12641                           fsr2h	equ	0xFDA
 12642                           fsr2l	equ	0xFD9
 12643                           status	equ	0xFD8
 12644                           
 12645 ;; *************** function _i2cLowSda *****************
 12646 ;; Defined at:
 12647 ;;		line 102 in file "I2C_Soft.c"
 12648 ;; Parameters:    Size  Location     Type
 12649 ;;		None
 12650 ;; Auto vars:     Size  Location     Type
 12651 ;;		None
 12652 ;; Return value:  Size  Location     Type
 12653 ;;		None               void
 12654 ;; Registers used:
 12655 ;;		None
 12656 ;; Tracked objects:
 12657 ;;		On entry : 0/0
 12658 ;;		On exit  : 0/0
 12659 ;;		Unchanged: 0/0
 12660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12665 ;;Total ram usage:        0 bytes
 12666 ;; Hardware stack levels used:    1
 12667 ;; Hardware stack levels required when called:    3
 12668 ;; This function calls:
 12669 ;;		Nothing
 12670 ;; This function is called by:
 12671 ;;		_I2C_Write
 12672 ;;		_i2cAck
 12673 ;;		_I2C_Start
 12674 ;;		_I2C_ReStart
 12675 ;;		_I2C_Stop
 12676 ;; This function uses a non-reentrant model
 12677 ;;
 12678                           
 12679                           	psect	text67
 12680  002A4C                     __ptext67:
 12681                           	opt stack 0
 12682  002A4C                     _i2cLowSda:
 12683                           	opt stack 23
 12684                           
 12685                           ;I2C_Soft.c: 104: PORTAbits.RA5 = 0;
 12686                           
 12687                           ;incstack = 0
 12688  002A4C  9A80               	bcf	3968,5,c	;volatile
 12689                           
 12690                           ;I2C_Soft.c: 105: TRISAbits.RA5 = 0;
 12691  002A4E  9A92               	bcf	3986,5,c	;volatile
 12692                           
 12693                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
 12694  002A50  D000               	nop2		;2 cycle nop
 12695  002A52  D000               	nop2		;2 cycle nop
 12696  002A54  0012               	return		;funcret
 12697  002A56                     __end_of_i2cLowSda:
 12698                           	opt stack 0
 12699                           tblptru	equ	0xFF8
 12700                           tblptrh	equ	0xFF7
 12701                           tblptrl	equ	0xFF6
 12702                           tablat	equ	0xFF5
 12703                           prodh	equ	0xFF4
 12704                           prodl	equ	0xFF3
 12705                           intcon	equ	0xFF2
 12706                           intcon2	equ	0xFF1
 12707                           postinc0	equ	0xFEE
 12708                           wreg	equ	0xFE8
 12709                           postdec1	equ	0xFE5
 12710                           fsr1l	equ	0xFE1
 12711                           indf2	equ	0xFDF
 12712                           postinc2	equ	0xFDE
 12713                           postdec2	equ	0xFDD
 12714                           fsr2h	equ	0xFDA
 12715                           fsr2l	equ	0xFD9
 12716                           status	equ	0xFD8
 12717                           
 12718 ;; *************** function _i2cLowScl *****************
 12719 ;; Defined at:
 12720 ;;		line 115 in file "I2C_Soft.c"
 12721 ;; Parameters:    Size  Location     Type
 12722 ;;		None
 12723 ;; Auto vars:     Size  Location     Type
 12724 ;;		None
 12725 ;; Return value:  Size  Location     Type
 12726 ;;		None               void
 12727 ;; Registers used:
 12728 ;;		None
 12729 ;; Tracked objects:
 12730 ;;		On entry : 0/0
 12731 ;;		On exit  : 0/0
 12732 ;;		Unchanged: 0/0
 12733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;Total ram usage:        0 bytes
 12739 ;; Hardware stack levels used:    1
 12740 ;; Hardware stack levels required when called:    3
 12741 ;; This function calls:
 12742 ;;		Nothing
 12743 ;; This function is called by:
 12744 ;;		_I2C_Read
 12745 ;;		_I2C_Write
 12746 ;;		_i2cNack
 12747 ;;		_i2cAck
 12748 ;;		_I2C_Start
 12749 ;;		_I2C_ReStart
 12750 ;;		_I2C_Stop
 12751 ;; This function uses a non-reentrant model
 12752 ;;
 12753                           
 12754                           	psect	text68
 12755  002A66                     __ptext68:
 12756                           	opt stack 0
 12757  002A66                     _i2cLowScl:
 12758                           	opt stack 23
 12759                           
 12760                           ;I2C_Soft.c: 117: PORTAbits.RA4 = 0;
 12761                           
 12762                           ;incstack = 0
 12763  002A66  9880               	bcf	3968,4,c	;volatile
 12764                           
 12765                           ;I2C_Soft.c: 118: TRISAbits.RA4 = 0;
 12766  002A68  9892               	bcf	3986,4,c	;volatile
 12767                           
 12768                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
 12769  002A6A  D000               	nop2		;2 cycle nop
 12770  002A6C  0012               	return		;funcret
 12771  002A6E                     __end_of_i2cLowScl:
 12772                           	opt stack 0
 12773                           tblptru	equ	0xFF8
 12774                           tblptrh	equ	0xFF7
 12775                           tblptrl	equ	0xFF6
 12776                           tablat	equ	0xFF5
 12777                           prodh	equ	0xFF4
 12778                           prodl	equ	0xFF3
 12779                           intcon	equ	0xFF2
 12780                           intcon2	equ	0xFF1
 12781                           postinc0	equ	0xFEE
 12782                           wreg	equ	0xFE8
 12783                           postdec1	equ	0xFE5
 12784                           fsr1l	equ	0xFE1
 12785                           indf2	equ	0xFDF
 12786                           postinc2	equ	0xFDE
 12787                           postdec2	equ	0xFDD
 12788                           fsr2h	equ	0xFDA
 12789                           fsr2l	equ	0xFD9
 12790                           status	equ	0xFD8
 12791                           
 12792 ;; *************** function _i2cHighSda *****************
 12793 ;; Defined at:
 12794 ;;		line 96 in file "I2C_Soft.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;		None
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;		None
 12799 ;; Return value:  Size  Location     Type
 12800 ;;		None               void
 12801 ;; Registers used:
 12802 ;;		None
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;Total ram usage:        0 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    3
 12815 ;; This function calls:
 12816 ;;		Nothing
 12817 ;; This function is called by:
 12818 ;;		_I2C_Init
 12819 ;;		_I2C_Read
 12820 ;;		_I2C_Write
 12821 ;;		_i2cAck
 12822 ;;		_I2C_Start
 12823 ;;		_I2C_ReStart
 12824 ;;		_I2C_Stop
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           	psect	text69
 12829  002A6E                     __ptext69:
 12830                           	opt stack 0
 12831  002A6E                     _i2cHighSda:
 12832                           	opt stack 25
 12833                           
 12834                           ;I2C_Soft.c: 98: TRISAbits.RA5 = 1;
 12835                           
 12836                           ;incstack = 0
 12837  002A6E  8A92               	bsf	3986,5,c	;volatile
 12838                           
 12839                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
 12840  002A70  D000               	nop2		;2 cycle nop
 12841  002A72  D000               	nop2		;2 cycle nop
 12842  002A74  0012               	return		;funcret
 12843  002A76                     __end_of_i2cHighSda:
 12844                           	opt stack 0
 12845                           tblptru	equ	0xFF8
 12846                           tblptrh	equ	0xFF7
 12847                           tblptrl	equ	0xFF6
 12848                           tablat	equ	0xFF5
 12849                           prodh	equ	0xFF4
 12850                           prodl	equ	0xFF3
 12851                           intcon	equ	0xFF2
 12852                           intcon2	equ	0xFF1
 12853                           postinc0	equ	0xFEE
 12854                           wreg	equ	0xFE8
 12855                           postdec1	equ	0xFE5
 12856                           fsr1l	equ	0xFE1
 12857                           indf2	equ	0xFDF
 12858                           postinc2	equ	0xFDE
 12859                           postdec2	equ	0xFDD
 12860                           fsr2h	equ	0xFDA
 12861                           fsr2l	equ	0xFD9
 12862                           status	equ	0xFD8
 12863                           
 12864 ;; *************** function _i2cHighScl *****************
 12865 ;; Defined at:
 12866 ;;		line 109 in file "I2C_Soft.c"
 12867 ;; Parameters:    Size  Location     Type
 12868 ;;		None
 12869 ;; Auto vars:     Size  Location     Type
 12870 ;;		None
 12871 ;; Return value:  Size  Location     Type
 12872 ;;		None               void
 12873 ;; Registers used:
 12874 ;;		wreg
 12875 ;; Tracked objects:
 12876 ;;		On entry : 0/0
 12877 ;;		On exit  : 0/0
 12878 ;;		Unchanged: 0/0
 12879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12884 ;;Total ram usage:        0 bytes
 12885 ;; Hardware stack levels used:    1
 12886 ;; Hardware stack levels required when called:    3
 12887 ;; This function calls:
 12888 ;;		Nothing
 12889 ;; This function is called by:
 12890 ;;		_I2C_Init
 12891 ;;		_I2C_Read
 12892 ;;		_I2C_Write
 12893 ;;		_i2cNack
 12894 ;;		_i2cAck
 12895 ;;		_I2C_Start
 12896 ;;		_I2C_ReStart
 12897 ;;		_I2C_Stop
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           	psect	text70
 12902  002A20                     __ptext70:
 12903                           	opt stack 0
 12904  002A20                     _i2cHighScl:
 12905                           	opt stack 25
 12906                           
 12907                           ;I2C_Soft.c: 111: TRISAbits.RA4 = 1;
 12908                           
 12909                           ;incstack = 0
 12910  002A20  8892               	bsf	3986,4,c	;volatile
 12911                           
 12912                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
 12913  002A22  0E06               	movlw	6
 12914  002A24                     u6517:
 12915  002A24  2EE8               	decfsz	wreg,f,c
 12916  002A26  D7FE               	goto	u6517
 12917  002A28  D000               	nop2		;nop
 12918  002A2A  0012               	return		;funcret
 12919  002A2C                     __end_of_i2cHighScl:
 12920                           	opt stack 0
 12921                           tblptru	equ	0xFF8
 12922                           tblptrh	equ	0xFF7
 12923                           tblptrl	equ	0xFF6
 12924                           tablat	equ	0xFF5
 12925                           prodh	equ	0xFF4
 12926                           prodl	equ	0xFF3
 12927                           intcon	equ	0xFF2
 12928                           intcon2	equ	0xFF1
 12929                           postinc0	equ	0xFEE
 12930                           wreg	equ	0xFE8
 12931                           postdec1	equ	0xFE5
 12932                           fsr1l	equ	0xFE1
 12933                           indf2	equ	0xFDF
 12934                           postinc2	equ	0xFDE
 12935                           postdec2	equ	0xFDD
 12936                           fsr2h	equ	0xFDA
 12937                           fsr2l	equ	0xFD9
 12938                           status	equ	0xFD8
 12939                           
 12940 ;; *************** function _chkisr *****************
 12941 ;; Defined at:
 12942 ;;		line 29 in file "Interrupt.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;		None
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;		None
 12947 ;; Return value:  Size  Location     Type
 12948 ;;		None               void
 12949 ;; Registers used:
 12950 ;;		wreg, status,2, status,0, cstack
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12960 ;;Total ram usage:       14 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; Hardware stack levels required when called:    2
 12963 ;; This function calls:
 12964 ;;		_INT0_isr
 12965 ;;		_TIMER1_isr
 12966 ;; This function is called by:
 12967 ;;		Interrupt level 2
 12968 ;; This function uses a non-reentrant model
 12969 ;;
 12970                           
 12971                           	psect	intcode
 12972  000008                     __pintcode:
 12973                           	opt stack 0
 12974  000008                     _chkisr:
 12975                           	opt stack 20
 12976                           
 12977                           ;incstack = 0
 12978  000008  CFFA F003          	movff	pclath,??_chkisr
 12979  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
 12980  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
 12981  000014  ED46  F010         	call	int_func,f	;refresh shadow registers
 12982                           pclatu	equ	0xFFB
 12983                           pclath	equ	0xFFA
 12984                           tblptru	equ	0xFF8
 12985                           tblptrh	equ	0xFF7
 12986                           tblptrl	equ	0xFF6
 12987                           tablat	equ	0xFF5
 12988                           prodh	equ	0xFF4
 12989                           prodl	equ	0xFF3
 12990                           intcon	equ	0xFF2
 12991                           intcon2	equ	0xFF1
 12992                           postinc0	equ	0xFEE
 12993                           fsr0l	equ	0xFE9
 12994                           wreg	equ	0xFE8
 12995                           postdec1	equ	0xFE5
 12996                           fsr1l	equ	0xFE1
 12997                           indf2	equ	0xFDF
 12998                           postinc2	equ	0xFDE
 12999                           postdec2	equ	0xFDD
 13000                           fsr2h	equ	0xFDA
 13001                           fsr2l	equ	0xFD9
 13002                           status	equ	0xFD8
 13003                           
 13004                           	psect	intcode_body
 13005  00208C                     __pintcode_body:
 13006                           	opt stack 20
 13007  00208C                     int_func:
 13008                           	opt stack 20
 13009  00208C  0006               	pop		; remove dummy address from shadow register refresh
 13010  00208E  CFEA F006          	movff	fsr0h,??_chkisr+3
 13011  002092  CFE1 F007          	movff	fsr1l,??_chkisr+4
 13012  002096  CFE2 F008          	movff	fsr1h,??_chkisr+5
 13013  00209A  CFD9 F009          	movff	fsr2l,??_chkisr+6
 13014  00209E  CFDA F00A          	movff	fsr2h,??_chkisr+7
 13015  0020A2  CFF3 F00B          	movff	prodl,??_chkisr+8
 13016  0020A6  CFF4 F00C          	movff	prodh,??_chkisr+9
 13017  0020AA  CFF6 F00D          	movff	tblptrl,??_chkisr+10
 13018  0020AE  CFF7 F00E          	movff	tblptrh,??_chkisr+11
 13019  0020B2  CFF8 F00F          	movff	tblptru,??_chkisr+12
 13020  0020B6  CFF5 F010          	movff	tablat,??_chkisr+13
 13021                           
 13022                           ;Interrupt.c: 31: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
 13023  0020BA  A09E               	btfss	3998,0,c	;volatile
 13024  0020BC  D003               	goto	i2l5729
 13025  0020BE  EC16  F015         	call	_TIMER1_isr	;wreg free
 13026  0020C2  D000               	goto	i2l5729
 13027  0020C4                     i2l5729:
 13028                           
 13029                           ;Interrupt.c: 32: if (INTCONbits.INT0IF == 1) INT0_isr();
 13030  0020C4  A2F2               	btfss	intcon,1,c	;volatile
 13031  0020C6  D003               	goto	i2l723
 13032  0020C8  ECB7  F009         	call	_INT0_isr	;wreg free
 13033  0020CC  D000               	goto	i2l723
 13034  0020CE                     i2l723:
 13035  0020CE  C010  FFF5         	movff	??_chkisr+13,tablat
 13036  0020D2  C00F  FFF8         	movff	??_chkisr+12,tblptru
 13037  0020D6  C00E  FFF7         	movff	??_chkisr+11,tblptrh
 13038  0020DA  C00D  FFF6         	movff	??_chkisr+10,tblptrl
 13039  0020DE  C00C  FFF4         	movff	??_chkisr+9,prodh
 13040  0020E2  C00B  FFF3         	movff	??_chkisr+8,prodl
 13041  0020E6  C00A  FFDA         	movff	??_chkisr+7,fsr2h
 13042  0020EA  C009  FFD9         	movff	??_chkisr+6,fsr2l
 13043  0020EE  C008  FFE2         	movff	??_chkisr+5,fsr1h
 13044  0020F2  C007  FFE1         	movff	??_chkisr+4,fsr1l
 13045  0020F6  C006  FFEA         	movff	??_chkisr+3,fsr0h
 13046  0020FA  C005  FFE9         	movff	??_chkisr+2,fsr0l
 13047  0020FE  C004  FFFB         	movff	??_chkisr+1,pclatu
 13048  002102  C003  FFFA         	movff	??_chkisr,pclath
 13049  002106  0011               	retfie		f
 13050  002108                     __end_of_chkisr:
 13051                           	opt stack 0
 13052                           pclatu	equ	0xFFB
 13053                           pclath	equ	0xFFA
 13054                           tblptru	equ	0xFF8
 13055                           tblptrh	equ	0xFF7
 13056                           tblptrl	equ	0xFF6
 13057                           tablat	equ	0xFF5
 13058                           prodh	equ	0xFF4
 13059                           prodl	equ	0xFF3
 13060                           intcon	equ	0xFF2
 13061                           intcon2	equ	0xFF1
 13062                           postinc0	equ	0xFEE
 13063                           fsr0h	equ	0xFEA
 13064                           fsr0l	equ	0xFE9
 13065                           wreg	equ	0xFE8
 13066                           postdec1	equ	0xFE5
 13067                           fsr1h	equ	0xFE2
 13068                           fsr1l	equ	0xFE1
 13069                           indf2	equ	0xFDF
 13070                           postinc2	equ	0xFDE
 13071                           postdec2	equ	0xFDD
 13072                           fsr2h	equ	0xFDA
 13073                           fsr2l	equ	0xFD9
 13074                           status	equ	0xFD8
 13075                           
 13076 ;; *************** function _TIMER1_isr *****************
 13077 ;; Defined at:
 13078 ;;		line 35 in file "Interrupt.c"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;		None
 13081 ;; Auto vars:     Size  Location     Type
 13082 ;;		None
 13083 ;; Return value:  Size  Location     Type
 13084 ;;		None               void
 13085 ;; Registers used:
 13086 ;;		wreg, status,2
 13087 ;; Tracked objects:
 13088 ;;		On entry : 0/0
 13089 ;;		On exit  : 0/0
 13090 ;;		Unchanged: 0/0
 13091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13096 ;;Total ram usage:        0 bytes
 13097 ;; Hardware stack levels used:    1
 13098 ;; This function calls:
 13099 ;;		Nothing
 13100 ;; This function is called by:
 13101 ;;		_chkisr
 13102 ;; This function uses a non-reentrant model
 13103 ;;
 13104                           
 13105                           	psect	text72
 13106  002A2C                     __ptext72:
 13107                           	opt stack 0
 13108  002A2C                     _TIMER1_isr:
 13109                           	opt stack 21
 13110                           
 13111                           ;Interrupt.c: 37: Nec_state = 0;
 13112                           
 13113                           ;incstack = 0
 13114  002A2C  0E00               	movlw	0
 13115  002A2E  6E51               	movwf	_Nec_state,c
 13116                           
 13117                           ;Interrupt.c: 38: INTCON2bits.INTEDG0 = 0;
 13118  002A30  9CF1               	bcf	intcon2,6,c	;volatile
 13119                           
 13120                           ;Interrupt.c: 39: T1CONbits.TMR1ON = 0;
 13121  002A32  90CD               	bcf	4045,0,c	;volatile
 13122                           
 13123                           ;Interrupt.c: 40: PIR1bits.TMR1IF = 0;
 13124  002A34  909E               	bcf	3998,0,c	;volatile
 13125  002A36  0012               	return		;funcret
 13126  002A38                     __end_of_TIMER1_isr:
 13127                           	opt stack 0
 13128                           pclatu	equ	0xFFB
 13129                           pclath	equ	0xFFA
 13130                           tblptru	equ	0xFF8
 13131                           tblptrh	equ	0xFF7
 13132                           tblptrl	equ	0xFF6
 13133                           tablat	equ	0xFF5
 13134                           prodh	equ	0xFF4
 13135                           prodl	equ	0xFF3
 13136                           intcon	equ	0xFF2
 13137                           intcon2	equ	0xFF1
 13138                           postinc0	equ	0xFEE
 13139                           fsr0h	equ	0xFEA
 13140                           fsr0l	equ	0xFE9
 13141                           wreg	equ	0xFE8
 13142                           postdec1	equ	0xFE5
 13143                           fsr1h	equ	0xFE2
 13144                           fsr1l	equ	0xFE1
 13145                           indf2	equ	0xFDF
 13146                           postinc2	equ	0xFDE
 13147                           postdec2	equ	0xFDD
 13148                           fsr2h	equ	0xFDA
 13149                           fsr2l	equ	0xFD9
 13150                           status	equ	0xFD8
 13151                           
 13152 ;; *************** function _INT0_isr *****************
 13153 ;; Defined at:
 13154 ;;		line 49 in file "Interrupt.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;		None
 13157 ;; Auto vars:     Size  Location     Type
 13158 ;;		None
 13159 ;; Return value:  Size  Location     Type
 13160 ;;		None               void
 13161 ;; Registers used:
 13162 ;;		wreg, status,2, status,0, cstack
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13170 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;Total ram usage:        2 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:    1
 13175 ;; This function calls:
 13176 ;;		_force_nec_state0
 13177 ;; This function is called by:
 13178 ;;		_chkisr
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           	psect	text73
 13183  00136E                     __ptext73:
 13184                           	opt stack 0
 13185  00136E                     _INT0_isr:
 13186                           	opt stack 20
 13187                           
 13188                           ;Interrupt.c: 51: INTCONbits.INT0IF = 0;
 13189                           
 13190                           ;incstack = 0
 13191  00136E  92F2               	bcf	intcon,1,c	;volatile
 13192                           
 13193                           ;Interrupt.c: 52: if (Nec_state != 0)
 13194  001370  5051               	movf	_Nec_state,w,c
 13195  001372  B4D8               	btfsc	status,2,c
 13196  001374  D0A0               	goto	i2l5351
 13197                           
 13198                           ;Interrupt.c: 53: {
 13199                           ;Interrupt.c: 54: Time_Elapsed = (TMR1H << 8) | TMR1L;
 13200  001376  50CE               	movf	4046,w,c	;volatile
 13201  001378  CFCF F001          	movff	4047,??_INT0_isr	;volatile
 13202  00137C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
 13203  00137E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
 13204  001382  6A01               	clrf	??_INT0_isr,c
 13205  001384  1001               	iorwf	??_INT0_isr,w,c
 13206  001386  6E45               	movwf	_Time_Elapsed,c
 13207  001388  5002               	movf	??_INT0_isr+1,w,c
 13208  00138A  6E46               	movwf	_Time_Elapsed+1,c
 13209                           
 13210                           ;Interrupt.c: 55: TMR1H = 0;
 13211  00138C  0E00               	movlw	0
 13212  00138E  6ECF               	movwf	4047,c	;volatile
 13213                           
 13214                           ;Interrupt.c: 56: TMR1L = 0;
 13215  001390  0E00               	movlw	0
 13216  001392  6ECE               	movwf	4046,c	;volatile
 13217                           
 13218                           ;Interrupt.c: 57: }
 13219                           ;Interrupt.c: 59: switch(Nec_state)
 13220  001394  D090               	goto	i2l5351
 13221  001396                     i2l5279:
 13222                           
 13223                           ;Interrupt.c: 62: {
 13224                           ;Interrupt.c: 64: TMR1H = 0;
 13225  001396  0E00               	movlw	0
 13226  001398  6ECF               	movwf	4047,c	;volatile
 13227                           
 13228                           ;Interrupt.c: 65: TMR1L = 0;
 13229  00139A  0E00               	movlw	0
 13230  00139C  6ECE               	movwf	4046,c	;volatile
 13231                           
 13232                           ;Interrupt.c: 66: PIR1bits.TMR1IF = 0;
 13233  00139E  909E               	bcf	3998,0,c	;volatile
 13234                           
 13235                           ;Interrupt.c: 67: T1CON= 0x90;
 13236  0013A0  0E90               	movlw	144
 13237  0013A2  6ECD               	movwf	4045,c	;volatile
 13238                           
 13239                           ;Interrupt.c: 68: T1CONbits.TMR1ON = 1;
 13240  0013A4  80CD               	bsf	4045,0,c	;volatile
 13241                           
 13242                           ;Interrupt.c: 69: bit_count = 0;
 13243  0013A6  0E00               	movlw	0
 13244  0013A8  6E57               	movwf	_bit_count,c
 13245                           
 13246                           ;Interrupt.c: 70: Nec_code = 0;
 13247  0013AA  0E00               	movlw	0
 13248  0013AC  0100               	movlb	0	; () banked
 13249  0013AE  6FF7               	movwf	_Nec_code& (0+255),b
 13250  0013B0  0E00               	movlw	0
 13251  0013B2  6FF8               	movwf	(_Nec_code+1)& (0+255),b
 13252  0013B4  0E00               	movlw	0
 13253  0013B6  6FF9               	movwf	(_Nec_code+2)& (0+255),b
 13254  0013B8  0E00               	movlw	0
 13255  0013BA  6FFA               	movwf	(_Nec_code+3)& (0+255),b
 13256                           
 13257                           ;Interrupt.c: 71: Nec_state = 1;
 13258  0013BC  0E01               	movlw	1
 13259  0013BE  6E51               	movwf	_Nec_state,c
 13260  0013C0  D078               	goto	i2l5345
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;Interrupt.c: 73: return;
 13264                           
 13265                           ; BSR set to: 0
 13266                           ;Interrupt.c: 72: INTCON2bits.INTEDG0 = 1;
 13267  0013C2  D08A               	goto	i2l735
 13268  0013C4                     i2l5289:
 13269                           
 13270                           ;Interrupt.c: 77: {
 13271                           ;Interrupt.c: 78: if ((Time_Elapsed > 8500) && (Time_Elapsed < 9500))
 13272  0013C4  0E35               	movlw	53
 13273  0013C6  5C45               	subwf	_Time_Elapsed,w,c
 13274  0013C8  0E21               	movlw	33
 13275  0013CA  5846               	subwfb	_Time_Elapsed+1,w,c
 13276  0013CC  A0D8               	btfss	status,0,c
 13277  0013CE  D009               	goto	i2l5295
 13278  0013D0  0E1C               	movlw	28
 13279  0013D2  5C45               	subwf	_Time_Elapsed,w,c
 13280  0013D4  0E25               	movlw	37
 13281  0013D6  5846               	subwfb	_Time_Elapsed+1,w,c
 13282  0013D8  B0D8               	btfsc	status,0,c
 13283  0013DA  D003               	goto	i2l5295
 13284                           
 13285                           ;Interrupt.c: 79: Nec_state = 2;
 13286  0013DC  0E02               	movlw	2
 13287  0013DE  6E51               	movwf	_Nec_state,c
 13288  0013E0  D02A               	goto	i2l5321
 13289  0013E2                     i2l5295:
 13290                           
 13291                           ;Interrupt.c: 80: else
 13292                           ;Interrupt.c: 81: force_nec_state0();
 13293  0013E2  EC3B  F015         	call	_force_nec_state0	;wreg free
 13294  0013E6  D027               	goto	i2l5321
 13295  0013E8  D026               	goto	i2l5321
 13296                           
 13297                           ;Interrupt.c: 83: return;
 13298                           
 13299                           ;Interrupt.c: 82: INTCON2bits.INTEDG0 = 0;
 13300  0013EA  D076               	goto	i2l735
 13301  0013EC                     i2l5301:
 13302                           
 13303                           ;Interrupt.c: 87: {
 13304                           ;Interrupt.c: 88: if ((Time_Elapsed > 4000) && (Time_Elapsed < 5000))
 13305  0013EC  0EA1               	movlw	161
 13306  0013EE  5C45               	subwf	_Time_Elapsed,w,c
 13307  0013F0  0E0F               	movlw	15
 13308  0013F2  5846               	subwfb	_Time_Elapsed+1,w,c
 13309  0013F4  A0D8               	btfss	status,0,c
 13310  0013F6  D009               	goto	i2l5307
 13311  0013F8  0E88               	movlw	136
 13312  0013FA  5C45               	subwf	_Time_Elapsed,w,c
 13313  0013FC  0E13               	movlw	19
 13314  0013FE  5846               	subwfb	_Time_Elapsed+1,w,c
 13315  001400  B0D8               	btfsc	status,0,c
 13316  001402  D003               	goto	i2l5307
 13317  001404                     
 13318                           ;Interrupt.c: 89: Nec_state = 3;
 13319  001404  0E03               	movlw	3
 13320  001406  6E51               	movwf	_Nec_state,c
 13321  001408  D054               	goto	i2l5345
 13322  00140A                     i2l5307:
 13323                           
 13324                           ;Interrupt.c: 90: else
 13325                           ;Interrupt.c: 91: force_nec_state0();
 13326  00140A  EC3B  F015         	call	_force_nec_state0	;wreg free
 13327  00140E  D051               	goto	i2l5345
 13328  001410  D050               	goto	i2l5345
 13329                           
 13330                           ;Interrupt.c: 93: return;
 13331                           
 13332                           ;Interrupt.c: 92: INTCON2bits.INTEDG0 = 1;
 13333  001412  D062               	goto	i2l735
 13334  001414                     i2l5313:
 13335                           
 13336                           ;Interrupt.c: 97: {
 13337                           ;Interrupt.c: 98: if ((Time_Elapsed > 400) && (Time_Elapsed < 700))
 13338  001414  0E91               	movlw	145
 13339  001416  5C45               	subwf	_Time_Elapsed,w,c
 13340  001418  0E01               	movlw	1
 13341  00141A  5846               	subwfb	_Time_Elapsed+1,w,c
 13342  00141C  A0D8               	btfss	status,0,c
 13343  00141E  D008               	goto	i2l5319
 13344  001420  0EBC               	movlw	188
 13345  001422  5C45               	subwf	_Time_Elapsed,w,c
 13346  001424  0E02               	movlw	2
 13347  001426  5846               	subwfb	_Time_Elapsed+1,w,c
 13348  001428  B0D8               	btfsc	status,0,c
 13349  00142A  D002               	goto	i2l5319
 13350                           
 13351                           ;Interrupt.c: 99: Nec_state = 4;
 13352  00142C  0E04               	movlw	4
 13353  00142E  D7D7               	goto	L13
 13354  001430                     i2l5319:
 13355                           
 13356                           ;Interrupt.c: 100: else
 13357                           ;Interrupt.c: 101: force_nec_state0();
 13358  001430  EC3B  F015         	call	_force_nec_state0	;wreg free
 13359  001434  D000               	goto	i2l5321
 13360  001436                     i2l5321:
 13361                           
 13362                           ;Interrupt.c: 102: INTCON2bits.INTEDG0 = 0;
 13363  001436  9CF1               	bcf	intcon2,6,c	;volatile
 13364                           
 13365                           ;Interrupt.c: 103: return;
 13366  001438  D04F               	goto	i2l735
 13367  00143A                     i2l5325:
 13368                           
 13369                           ;Interrupt.c: 107: {
 13370                           ;Interrupt.c: 108: if (Time_Elapsed > 400 && Time_Elapsed < 1800)
 13371  00143A  0E91               	movlw	145
 13372  00143C  5C45               	subwf	_Time_Elapsed,w,c
 13373  00143E  0E01               	movlw	1
 13374  001440  5846               	subwfb	_Time_Elapsed+1,w,c
 13375  001442  A0D8               	btfss	status,0,c
 13376  001444  D033               	goto	i2l5343
 13377  001446  0E08               	movlw	8
 13378  001448  5C45               	subwf	_Time_Elapsed,w,c
 13379  00144A  0E07               	movlw	7
 13380  00144C  5846               	subwfb	_Time_Elapsed+1,w,c
 13381  00144E  B0D8               	btfsc	status,0,c
 13382  001450  D02D               	goto	i2l5343
 13383                           
 13384                           ;Interrupt.c: 109: {
 13385                           ;Interrupt.c: 110: Nec_code = Nec_code << 1;
 13386  001452  90D8               	bcf	status,0,c
 13387  001454  0100               	movlb	0	; () banked
 13388  001456  35F7               	rlcf	_Nec_code& (0+255),w,b
 13389  001458  0100               	movlb	0	; () banked
 13390  00145A  6FF7               	movwf	_Nec_code& (0+255),b
 13391  00145C  0100               	movlb	0	; () banked
 13392  00145E  35F8               	rlcf	(_Nec_code+1)& (0+255),w,b
 13393  001460  0100               	movlb	0	; () banked
 13394  001462  6FF8               	movwf	(_Nec_code+1)& (0+255),b
 13395  001464  0100               	movlb	0	; () banked
 13396  001466  35F9               	rlcf	(_Nec_code+2)& (0+255),w,b
 13397  001468  0100               	movlb	0	; () banked
 13398  00146A  6FF9               	movwf	(_Nec_code+2)& (0+255),b
 13399  00146C  0100               	movlb	0	; () banked
 13400  00146E  35FA               	rlcf	(_Nec_code+3)& (0+255),w,b
 13401  001470  0100               	movlb	0	; () banked
 13402  001472  6FFA               	movwf	(_Nec_code+3)& (0+255),b
 13403                           
 13404                           ;Interrupt.c: 111: if (Time_Elapsed > 1000)
 13405  001474  0EE9               	movlw	233
 13406  001476  5C45               	subwf	_Time_Elapsed,w,c
 13407  001478  0E03               	movlw	3
 13408  00147A  5846               	subwfb	_Time_Elapsed+1,w,c
 13409  00147C  A0D8               	btfss	status,0,c
 13410  00147E  D008               	goto	i2l5333
 13411                           
 13412                           ; BSR set to: 0
 13413                           ;Interrupt.c: 112: Nec_code++;
 13414  001480  0E01               	movlw	1
 13415  001482  0100               	movlb	0	; () banked
 13416  001484  27F7               	addwf	_Nec_code& (0+255),f,b
 13417  001486  0E00               	movlw	0
 13418  001488  23F8               	addwfc	(_Nec_code+1)& (0+255),f,b
 13419  00148A  23F9               	addwfc	(_Nec_code+2)& (0+255),f,b
 13420  00148C  23FA               	addwfc	(_Nec_code+3)& (0+255),f,b
 13421  00148E  D000               	goto	i2l5333
 13422  001490                     i2l5333:
 13423                           
 13424                           ; BSR set to: 0
 13425                           ;Interrupt.c: 114: bit_count++;
 13426  001490  2A57               	incf	_bit_count,f,c
 13427                           
 13428                           ; BSR set to: 0
 13429                           ;Interrupt.c: 115: if (bit_count > 31)
 13430  001492  0E1F               	movlw	31
 13431  001494  6457               	cpfsgt	_bit_count,c
 13432  001496  D7B6               	goto	L14
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;Interrupt.c: 116: {
 13436                           ;Interrupt.c: 117: nec_ok = 1;
 13437  001498  0E00               	movlw	0
 13438  00149A  6E48               	movwf	_nec_ok+1,c
 13439  00149C  0E01               	movlw	1
 13440  00149E  6E47               	movwf	_nec_ok,c
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;Interrupt.c: 118: Nec_code1 = (char) ((Nec_code >> 8));
 13444  0014A0  C0F8  F050         	movff	_Nec_code+1,_Nec_code1
 13445                           
 13446                           ; BSR set to: 0
 13447                           ;Interrupt.c: 119: INTCONbits.INT0IE = 0;
 13448  0014A4  98F2               	bcf	intcon,4,c	;volatile
 13449                           
 13450                           ;Interrupt.c: 120: Nec_state = 0;
 13451  0014A6  0E00               	movlw	0
 13452  0014A8  6E51               	movwf	_Nec_state,c
 13453  0014AA  D7AC               	goto	L14
 13454  0014AC                     i2l5343:
 13455                           
 13456                           ;Interrupt.c: 124: else
 13457                           ;Interrupt.c: 125: force_nec_state0();
 13458  0014AC  EC3B  F015         	call	_force_nec_state0	;wreg free
 13459  0014B0  D000               	goto	i2l5345
 13460  0014B2                     i2l5345:
 13461                           
 13462                           ;Interrupt.c: 126: INTCON2bits.INTEDG0 = 1;
 13463  0014B2  8CF1               	bsf	intcon2,6,c	;volatile
 13464                           
 13465                           ;Interrupt.c: 128: }
 13466                           ;Interrupt.c: 129: }
 13467                           
 13468                           ;Interrupt.c: 127: return;
 13469  0014B4  D011               	goto	i2l735
 13470  0014B6                     i2l5351:
 13471  0014B6  5051               	movf	_Nec_state,w,c
 13472                           
 13473                           ; Switch size 1, requested type "space"
 13474                           ; Number of cases is 5, Range of values is 0 to 4
 13475                           ; switch strategies available:
 13476                           ; Name         Instructions Cycles
 13477                           ; simple_byte           16     9 (average)
 13478                           ;	Chosen strategy is simple_byte
 13479  0014B8  0A00               	xorlw	0	; case 0
 13480  0014BA  B4D8               	btfsc	status,2,c
 13481  0014BC  D76C               	goto	i2l5279
 13482  0014BE  0A01               	xorlw	1	; case 1
 13483  0014C0  B4D8               	btfsc	status,2,c
 13484  0014C2  D780               	goto	i2l5289
 13485  0014C4  0A03               	xorlw	3	; case 2
 13486  0014C6  B4D8               	btfsc	status,2,c
 13487  0014C8  D791               	goto	i2l5301
 13488  0014CA  0A01               	xorlw	1	; case 3
 13489  0014CC  B4D8               	btfsc	status,2,c
 13490  0014CE  D7A2               	goto	i2l5313
 13491  0014D0  0A07               	xorlw	7	; case 4
 13492  0014D2  B4D8               	btfsc	status,2,c
 13493  0014D4  D7B2               	goto	i2l5325
 13494  0014D6  D000               	goto	i2l735
 13495  0014D8                     i2l735:
 13496  0014D8  0012               	return		;funcret
 13497  0014DA                     __end_of_INT0_isr:
 13498                           	opt stack 0
 13499                           pclatu	equ	0xFFB
 13500                           pclath	equ	0xFFA
 13501                           tblptru	equ	0xFF8
 13502                           tblptrh	equ	0xFF7
 13503                           tblptrl	equ	0xFF6
 13504                           tablat	equ	0xFF5
 13505                           prodh	equ	0xFF4
 13506                           prodl	equ	0xFF3
 13507                           intcon	equ	0xFF2
 13508                           intcon2	equ	0xFF1
 13509                           postinc0	equ	0xFEE
 13510                           fsr0h	equ	0xFEA
 13511                           fsr0l	equ	0xFE9
 13512                           wreg	equ	0xFE8
 13513                           postdec1	equ	0xFE5
 13514                           fsr1h	equ	0xFE2
 13515                           fsr1l	equ	0xFE1
 13516                           indf2	equ	0xFDF
 13517                           postinc2	equ	0xFDE
 13518                           postdec2	equ	0xFDD
 13519                           fsr2h	equ	0xFDA
 13520                           fsr2l	equ	0xFD9
 13521                           status	equ	0xFD8
 13522                           
 13523 ;; *************** function _force_nec_state0 *****************
 13524 ;; Defined at:
 13525 ;;		line 43 in file "Interrupt.c"
 13526 ;; Parameters:    Size  Location     Type
 13527 ;;		None
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;		None
 13530 ;; Return value:  Size  Location     Type
 13531 ;;		None               void
 13532 ;; Registers used:
 13533 ;;		wreg, status,2
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;Total ram usage:        0 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; This function calls:
 13546 ;;		Nothing
 13547 ;; This function is called by:
 13548 ;;		_INT0_isr
 13549 ;; This function uses a non-reentrant model
 13550 ;;
 13551                           
 13552                           	psect	text74
 13553  002A76                     __ptext74:
 13554                           	opt stack 0
 13555  002A76                     _force_nec_state0:
 13556                           	opt stack 20
 13557                           
 13558                           ;Interrupt.c: 45: Nec_state=0;
 13559                           
 13560                           ;incstack = 0
 13561  002A76  0E00               	movlw	0
 13562  002A78  6E51               	movwf	_Nec_state,c
 13563                           
 13564                           ;Interrupt.c: 46: T1CONbits.TMR1ON = 0;
 13565  002A7A  90CD               	bcf	4045,0,c	;volatile
 13566  002A7C  0012               	return		;funcret
 13567  002A7E                     __end_of_force_nec_state0:
 13568                           	opt stack 0
 13569                           pclatu	equ	0xFFB
 13570                           pclath	equ	0xFFA
 13571                           tblptru	equ	0xFF8
 13572                           tblptrh	equ	0xFF7
 13573                           tblptrl	equ	0xFF6
 13574                           tablat	equ	0xFF5
 13575                           prodh	equ	0xFF4
 13576                           prodl	equ	0xFF3
 13577                           intcon	equ	0xFF2
 13578                           intcon2	equ	0xFF1
 13579                           postinc0	equ	0xFEE
 13580                           fsr0h	equ	0xFEA
 13581                           fsr0l	equ	0xFE9
 13582                           wreg	equ	0xFE8
 13583                           postdec1	equ	0xFE5
 13584                           fsr1h	equ	0xFE2
 13585                           fsr1l	equ	0xFE1
 13586                           indf2	equ	0xFDF
 13587                           postinc2	equ	0xFDE
 13588                           postdec2	equ	0xFDD
 13589                           fsr2h	equ	0xFDA
 13590                           fsr2l	equ	0xFD9
 13591                           status	equ	0xFD8
 13592                           pclatu	equ	0xFFB
 13593                           pclath	equ	0xFFA
 13594                           tblptru	equ	0xFF8
 13595                           tblptrh	equ	0xFF7
 13596                           tblptrl	equ	0xFF6
 13597                           tablat	equ	0xFF5
 13598                           prodh	equ	0xFF4
 13599                           prodl	equ	0xFF3
 13600                           intcon	equ	0xFF2
 13601                           intcon2	equ	0xFF1
 13602                           postinc0	equ	0xFEE
 13603                           fsr0h	equ	0xFEA
 13604                           fsr0l	equ	0xFE9
 13605                           wreg	equ	0xFE8
 13606                           postdec1	equ	0xFE5
 13607                           fsr1h	equ	0xFE2
 13608                           fsr1l	equ	0xFE1
 13609                           indf2	equ	0xFDF
 13610                           postinc2	equ	0xFDE
 13611                           postdec2	equ	0xFDD
 13612                           fsr2h	equ	0xFDA
 13613                           fsr2l	equ	0xFD9
 13614                           status	equ	0xFD8
 13615                           
 13616                           	psect	rparam
 13617  0000                     pclatu	equ	0xFFB
 13618                           pclath	equ	0xFFA
 13619                           tblptru	equ	0xFF8
 13620                           tblptrh	equ	0xFF7
 13621                           tblptrl	equ	0xFF6
 13622                           tablat	equ	0xFF5
 13623                           prodh	equ	0xFF4
 13624                           prodl	equ	0xFF3
 13625                           intcon	equ	0xFF2
 13626                           intcon2	equ	0xFF1
 13627                           postinc0	equ	0xFEE
 13628                           fsr0h	equ	0xFEA
 13629                           fsr0l	equ	0xFE9
 13630                           wreg	equ	0xFE8
 13631                           postdec1	equ	0xFE5
 13632                           fsr1h	equ	0xFE2
 13633                           fsr1l	equ	0xFE1
 13634                           indf2	equ	0xFDF
 13635                           postinc2	equ	0xFDE
 13636                           postdec2	equ	0xFDD
 13637                           fsr2h	equ	0xFDA
 13638                           fsr2l	equ	0xFD9
 13639                           status	equ	0xFD8


Data Sizes:
    Strings     280
    Constant    505
    Data        225
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     64     111
    BANK0           128     14     127
    BANK1           256     23     140
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[6]), STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[2]), 
		 -> STR_11(CODE[3]), STR_10(CODE[13]), STR_9(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    printf$1745	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_21(CODE[17]), STR_20(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_8(CODE[15]), STR_7(CODE[22]), STR_6(CODE[16]), STR_5(CODE[27]), 
		 -> STR_4(CODE[21]), STR_3(CODE[30]), STR_2(CODE[22]), STR_1(CODE[24]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), RPM_Txt(BANK0[5]), DC_Txt(BANK0[4]), Fan_SW_Txt(BANK0[4]), 
		 -> date(BANK0[9]), time(BANK0[9]), tempF(BANK0[4]), tempC(BANK0[4]), 
		 -> buffer(BANK1[33]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), Fan_SW_Txt(BANK0[4]), buffer(BANK1[33]), 

    txt	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), buffer(BANK1[33]), 


Critical Paths under _main in COMRAM

    _get_RPM->___awdiv
    _Update_Screen->_drawtext
    ___awmod->___awdiv
    _Turn_On_Fan->_do_update_pwm
    _Set_RPM_RGB->___awdiv
    _Set_DC_RGB->___awdiv
    ___awdiv->___wmul
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawCircle->_drawPixel
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Increase_Speed->_do_update_pwm
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _Decrease_Speed->_do_update_pwm
    _printf->___lwmod
    ___lwmod->___lwdiv
    _do_update_pwm->___ftdiv
    ___lbtoft->___ftpack
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_Update_Screen
    _Update_Screen->_drawtext
    _Turn_On_Fan->_do_update_pwm
    _Initialize_Screen->_drawtext
    _Increase_Speed->_do_update_pwm
    _Decrease_Speed->_do_update_pwm

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_printf
    _Increase_Speed->_printf
    _Decrease_Speed->_printf

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  120411
                                             13 BANK0      1     1      0
                                             21 BANK1      2     2      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                     _Decrease_Speed
                            _Do_Beep
                            _Do_Init
                     _Increase_Speed
                  _Initialize_Screen
                         _Set_DC_RGB
                        _Set_RPM_RGB
                         _Toggle_Fan
                      _Update_Screen
                   _Wait_Half_Second
                            ___awdiv
                             ___wmul
                      _do_update_pwm
                            _get_RPM
                             _printf
 ---------------------------------------------------------------------------------
 (1) _get_RPM                                              4     2      2    3181
                                             30 COMRAM     4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Update_Screen                                        4     4      0   22483
                                              9 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1733
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _Toggle_Fan                                           0     0      0    8034
                       _Turn_Off_Fan
                        _Turn_On_Fan
 ---------------------------------------------------------------------------------
 (2) _Turn_On_Fan                                          0     0      0    8034
                      _do_update_pwm
 ---------------------------------------------------------------------------------
 (2) _Turn_Off_Fan                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Set_RPM_RGB                                          4     2      2    2296
                                             30 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Set_DC_RGB                                           5     3      2    2336
                                             30 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    2135
                                             22 COMRAM     8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   34162
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4    1539
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawtext                                            17     9      8   17011
                                             56 COMRAM     8     0      8
                                              0 BANK0      9     9      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _drawChar                                            11     4      7   10904
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (4) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (5) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawCircle                                          20    12      8    6744
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (4) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (6) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4624
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2182
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (7) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (7) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2052
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2052
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Increase_Speed                                       0     0      0   14141
                            _Do_Beep
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                     _init_INTERRUPT
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Decrease_Speed                                       0     0      0   14141
                            _Do_Beep
                      _do_update_pwm
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              43    29     14    6107
                                             28 COMRAM    18     4     14
                                              0 BANK1     21    21      0
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1012
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     631
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _do_update_pwm                                        9     9      0    8034
                                             58 COMRAM     3     3      0
                                              0 BANK0      6     6      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2039
                                             24 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     436
                                             16 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2716
                                             28 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             43 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Do_Beep                                              0     0      0       0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     2     2      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Decrease_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _Do_Beep
     _Activate_Buzzer
     _Deactivate_Buzzer
     _Wait_Half_Second
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_INTERRUPT
     _init_UART
       _OpenUSART
   _Increase_Speed
     _Do_Beep
       _Activate_Buzzer
       _Deactivate_Buzzer
       _Wait_Half_Second
     _do_update_pwm
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
       ___lbtoft
         ___ftpack
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Set_DC_RGB
     ___awdiv
       ___wmul (ARG)
   _Set_RPM_RGB
     ___awdiv
       ___wmul (ARG)
   _Toggle_Fan
     _Turn_Off_Fan
     _Turn_On_Fan
       _do_update_pwm
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
         ___lbtoft
           ___ftpack
   _Update_Screen
     ___awdiv
       ___wmul (ARG)
     ___awmod
       ___awdiv (ARG)
         ___wmul (ARG)
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _strcpy
   _Wait_Half_Second
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _do_update_pwm
     ___ftdiv
       ___ftmul (ARG)
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___fttol
     ___lbtoft
       ___ftpack
   _get_RPM
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EEE      0       0      38        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     17      8C       8       54.7%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      E      7F       5       99.2%
BIGRAM_1            80      0       0      37        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     40      6F       1       87.4%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17A       6        0.0%
DATA                 0      0     17A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 28 15:33:55 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 0080                                 _D2 00AF  
                               _D3 012A                                 l42 2960  
                               l53 27CA                                 l37 264C  
                               l71 25CE                                 l58 27F8  
                     ___awdiv@sign 001C               __size_of_Turn_On_Fan 000E  
              ___wmul@multiplicand 0013                    ??_Update_Screen 00F2  
                              l500 1CBE                                l501 1CE0  
                              l256 2A16                                l272 1130  
                              l508 1282                                l444 1F88  
                              l460 162E                                l438 279A  
                              l462 1508                                l632 2546  
                              l384 23C8                                l394 2970  
                              l635 26D8                                l469 1584  
                              l910 0762                                l840 0202  
                              l593 291A                                l497 1CE2  
                              l818 009E                                l498 1C4E  
                              l784 260E                                _FAN 004F  
                              l937 0974                                l961 21AA  
                              l970 21EC                                l973 284A  
                              l965 21C4                                l894 0688  
                              l966 21C6                                l967 21D0  
                              l968 21D2                  ?_Wait_Half_Second 0001  
                              _PR2 000FCB                                _day 0059  
                _Deactivate_Buzzer 2A5E               __size_of_I2C_ReStart 0016  
                              _dow 005A                                _nbr 00FD  
                              _rpm 0049              __size_of_Turn_Off_Fan 0008  
                              _rps 004B                                _txt 004D  
                     ___awmod@sign 0024                                prod 000FF3  
                              wreg 000FE8                 ??_Wait_Half_Second 0011  
               ?_Deactivate_Buzzer 0001                         _Fan_SW_Txt 00DD  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 27FA                       ___ftdiv@cntr 0035  
                     ___ftdiv@sign 003A                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1404 2892  
                             l1430 2870                               l1166 1F00  
                             l1281 1DA8                               l1353 1C06  
                             l1506 24AC                               l1179 200A  
                             l1292 1D80                               l1356 1BD2  
                   drawFastVLine@x 0022                     drawFastVLine@y 0018  
                             l1535 268A                               l1368 194C  
                             l1389 1B24                               l1496 2374  
                             l6031 1AC8                               l6033 1ACE  
                             l6041 1AFA                               l6009 1A5E  
                             l7001 295A                               l6027 1AB8  
                             l7011 27BC                               l6045 1B12  
                             l6037 1AE2                               l6039 1AF0  
                             l6063 1E42                               l7023 27EA  
                             l6311 1CB4                               l6081 219A  
                             l6233 14F6                               l7201 0A88  
                             l6403 24A0                               l6251 157C  
                             l6243 1514                               l6315 1CC2  
                             l7035 2582                               l7043 25B8  
                             l6421 002C                               l6085 21A2  
                             l6077 2190                               l6261 15CE  
                             l6237 1504                               l6229 14EA  
                             l6325 1CDC                               l7045 25BC  
   I2C_Write_Cmd_Write_Data@Device 0015                               l6503 0278  
                             l6511 02B0                               l6431 0064  
                             l6247 1544                               l6239 150C  
                             l6319 1CCC                               l7231 0B32  
                             l6601 04EA                               l6505 0280  
                             l6441 00AA                               l6433 006A  
                             l6425 0042                               l6097 21BC  
                             l6089 21AE                               l6249 1578  
                             l6281 2658                               l5811 1D10  
                             l6523 030C                               l6515 02D0  
                             l6507 029A                               l6531 032C  
                             l6427 0058                               l6267 15FA  
                             l6259 15A6                               l6275 162A  
                             l6283 265E                               l5821 1D74  
                             l5813 1D30                               l5805 1CF4  
                             l6365 288A                               l6701 0836  
                             l6621 0586                               l6605 0504  
                             l6517 02D8                               l6533 0374  
                             l6461 0160                               l6445 00CA  
                             l6453 012E                               l6429 005E  
                             l6437 0076                               l6269 1622  
                             l6293 1C18                               l7229 0B1C  
                             l6375 2338                               l6711 08AC  
                             l6623 0592                               l6615 054C  
                             l6527 0324                               l6519 02F2  
                             l7431 11AE                               l7423 1192  
                             l7415 116E                               l5833 1D9A  
                             l5817 1D48                               l5809 1D04  
                             l5921 1B6C                               l6377 2342  
                             l6641 0656                               l6609 051E  
                             l6561 040C                               l6545 03BE  
                             l6473 01AA                               l6481 01EE  
                             l7185 09F2                               l5827 1D88  
                             l5819 1D68                               l5915 1B44  
                             l6387 2368                               l6379 234A  
                             l6395 2478                               l6723 0936  
                             l6707 0878                               l6715 08E2  
                             l6651 0696                               l6643 0662  
                             l6635 0616                               l6571 0444  
                             l6555 03F8                               l6483 01F8  
                             l6475 01B2                               l5771 1F4A  
                             l6299 1C86                               l7195 0A48  
                             l7179 09B2                               l7427 11A0  
                             l5941 1BAC                               l5917 1B5E  
                             l6397 2482                               l6709 0886  
                             l6717 0902                               l6661 06DE  
                             l6637 0622                               l6629 05CE  
                             l6565 0436                               l6557 03FE  
                             l6549 03DA                               l6493 023C  
                             l6485 01FE                               l5781 1F70  
                             l6805 16B8                               l7373 10A8  
                             l7349 0FCA                               l5871 26D0  
                             l5951 1BE0                               l6399 248A  
                             l6719 090C                               l6663 06E8  
                             l6583 0484                               l6575 0452  
                             l6487 0208                               l6479 01D6  
                             l6727 0954                               l5855 277C  
                             l5783 1F7E                               l5767 1F12  
                             l5863 24C0                               l7391 10F4  
                             l5961 1874                               l6673 0724  
                             l6665 06F4                               l6593 04C2  
                             l6585 048A                               l6569 043E  
                             l6497 0262                               l6817 1728  
                             l6809 16D6                               l5963 188E  
                             l6683 0770                               l6659 06D2  
                             l6579 047C                               l6499 026E  
                             l5867 24DC                               l6819 1730  
                             l6931 1EB4                               l6923 1E94  
                             l5877 26E2                               l5981 18D0  
                             l6677 0742                               l6669 0712  
                             l6589 0498                               l6781 2712  
                             l6941 1EDA                               l6933 1EBC  
                             l6917 1E82                               l7397 111C  
                             l5879 26E8                               l5991 18FE  
                             l5967 189C                               l6695 07DA  
                             l6687 079E                               l6599 04CA  
                             l6839 1268                               l6783 271C  
                             l6873 250A                               l5889 26FA  
                             l5985 18E2                               l6697 07E6  
                             l6793 165C                               l6929 1EAA  
                             l6945 1EE6                               l6961 1FA0  
                             l6883 2520                               l6891 2530  
                             l5995 1910                               l6699 07F4  
                             l6867 1358                               l6971 1FC6  
                             l6885 2528                               l6877 2512  
                             l5989 18F8                               l6949 1EF6  
                             l6973 1FCE                               l6981 1FF0  
                             l6965 1FAE                               l6895 253C  
                             l5999 1926                               l6897 2542  
                             l6985 2000                               l6977 1FE4  
                             l6969 1FBC                               STR_1 FC1F  
                             STR_2 FC63                               STR_3 FBE6  
                             STR_4 FC79                               STR_5 FC04  
                             STR_6 FCB0                               STR_7 FC4D  
                             STR_8 FCC0                               STR_9 FC37  
                             u5120 1C46                               u5050 15DC  
                             u5130 1C7C                               u4460 1F40  
                             u4701 1884                               u6150 2578  
                             u4631 1B36                               u6320 1130  
                             u4651 1B54                               u4741 1A50  
                             u4760 1A7C                               u5640 060A  
                             u4681 1866                               u6517 2A24  
                             u4765 1A74                               u5791 07C2  
                             u5890 1692                               _RBPU 007F8F  
                             _TRMT 007D61                       _DS1621_tempC 0041  
                     _DS1621_tempF 0043                ??_Deactivate_Buzzer 0011  
                             _date 00C2                               _main 0FB4  
                             _font F9ED                       ___ftpack@arg 0011  
                             _hour 005D                       ___ftpack@exp 0014  
                 __end_of_I2C_Init 2A42                   __end_of_I2C_Read 2548  
                             _time 00CB                               _year 006C  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 29C0                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                    __end_of_Do_Beep 2938  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 246A                     _Increase_Speed 279C  
                  ??_drawFastVLine 001C                       ___ftmul@cntr 002A  
                  __end_of_i2cNack 2A4C                       ___param_bank 000010  
                     ___ftmul@sign 002B                       ___fttol@exp1 001F  
                     _Turn_Off_Fan 2A56                       ___fttol@lval 001B  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 14DA  
        __end_of_Deactivate_Buzzer 2A66                    ??_do_update_pwm 003B  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 1F02  
                  drawCircle@ddF_x 0026                              STR_10 FCCF  
                  drawCircle@ddF_y 0028                              STR_11 FCF8  
                            STR_12 FC9D                              STR_20 FC8E  
                            STR_13 FCE2                              STR_21 FC9F  
                            STR_14 FCE7                              STR_15 FCDC  
                            STR_16 FCFB                              STR_17 FCF4  
                            STR_18 FCEC                              STR_19 FCF0  
                  __end_of___awmod 200C                    __end_of___ftdiv 1C08  
                  __end_of___ftmul 194E                              _T0CON 000FD5  
                  ___awdiv@divisor 0019                              _T1CON 000FCD  
                  __end_of___fttol 1B26                              _T2CON 000FCA  
                            _T3CON 000FB1                    __end_of___lwdiv 237E  
                  __end_of___lwmod 24B6                              i2l723 20CE  
                            i2l735 14D8                    ___awdiv@counter 001B  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTA 000F80                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                  __end_of_get_RPM 264E                              _Rcmd1 1746  
                            _Rcmd3 194E                         _i2cHighSda 2A6E  
                       _i2cHighScl 2A20                    __end_of_dpowers FBDE  
                            _color 0100                              _font2 FAEC  
                            _found 005C                    __end_of_isdigit 2894  
                            _tempC 00E1                              _tempF 00E5  
                            _month 0060                      ___ftpack@sign 0015  
                            _putch 2A12                              main@j 018A  
                __end_of_I2C_Start 29D2                  __end_of_I2C_Write 2708  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8             __end_of_Increase_Speed 27CC  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 200C  
                    ??_Set_RPM_RGB 0021                       __end_of_main 11C0  
                     __end_of_font FAEC                   __end_of_Rcmd2red 26CA  
                 ??_Decrease_Speed 003E                             ??_main 00F6  
                    ___fttol@sign1 001A                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 299C  
                       _Set_DC_RGB 2548          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001            __size_of_init_INTERRUPT 0032  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                           _CCPR1L 000FBE                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0017                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                 __end_of___ftpack 1DAA                   __end_of___lbtoft 2872  
                        ??_Do_Beep 0011                             _DC_Txt 00D9  
                           i2l5301 13EC                             i2l5321 1436  
                           i2l5313 1414                          ??_Do_Init 0017  
                           i2l5307 140A                             i2l5333 1490  
                           i2l5325 143A                             i2l5343 14AC  
                           i2l5319 1430                             i2l5351 14B6  
                           i2l5345 14B2                             i2l5295 13E2  
                           i2l5279 1396                             i2l5289 13C4  
                           i2l5729 20C4                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                    ?_Increase_Speed 0001  
                        ??_i2cNack 0011                       _Alarm_SW_Txt 00BC  
                 _force_nec_state0 2A76                   __end_of_delay_ms 23D0  
                           _i2cAck 29D2                   __end_of_fillRect 2500  
                 __end_of_drawChar 1630                 __size_of_OpenUSART 0070  
         __size_of_Activate_Buzzer 0012                             ___wmul 2824  
                        ??___awdiv 001B                   __end_of_drawtext 1746  
                        ??___awmod 0023                          ??___ftdiv 0032  
                        ??___ftmul 0023                          ??___fttol 0015  
                           _chkisr 0008                          ??___lwdiv 0015  
                           _array1 013F                          ??___lwmod 001C  
                           _buffer 0154                             _nec_ok 0047  
                           clear_0 2012                             clear_1 201E  
                 ___awdiv@quotient 001D                             _minute 005F  
                           _second 0062            DS3231_Setup_Time@Device 0013  
                  ___awmod@divisor 0021                          ??_get_RPM 0021  
       __size_of_Deactivate_Buzzer 0008                    ___awmod@counter 0023  
                           _printf 001C                       drawtext@size 0040  
                           _strcpy 2708                             _strlen 264E  
            ___ftmul@f3_as_product 0027                __end_of_Set_RPM_RGB 25D0  
                       _Toggle_Fan 294E                       __pdataCOMRAM 006D  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst F9EC                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 28B4                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 2976                         __accesstop 0080  
          __end_of__initialization 2082                          ?_INT0_isr 0001  
               _setup_alarm_minute 0064                 _setup_alarm_second 0065  
                    ___rparam_used 000001                         ___ftdiv@f1 002C  
                       ___ftdiv@f2 002F                         ___ftdiv@f3 0036  
                       ___lbtoft@c 001C                         ___ftmul@f1 001D  
                       ___ftmul@f2 0020                         ___fttol@f1 0011  
                    __end_of_Rcmd1 1856                      __end_of_Rcmd3 1A40  
                   __pcstackCOMRAM 0001                       __pidataBANK0 21EE  
                     __pidataBANK1 2108                      __end_of_font2 FBC8  
                __end_of_i2cLowSda 2A56                  __end_of_i2cLowScl 2A6E  
                    __end_of_putch 2A20                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                      ?_Set_DC_RGB 001F                         ??_I2C_Read 0011  
                     _alarm_minute 0055                       _alarm_second 0056  
                       ??_I2C_Stop 0011                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 21EE                            ??_putch 0011  
                       __pbssBANK0 00F7                   _setup_alarm_hour 0063  
                 _setup_alarm_time 0094                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 001A                    spiwrite@spidata 0012  
                       _alarm_date 0053                         ??_INT0_isr 0001  
                       _alarm_hour 0054                         _alarm_time 008B  
                          ?_i2cAck 0001               Set_DC_RGB@duty_cycle 001F  
               __CFG_CCP2MX$PORTBE 000000                      ??_Turn_On_Fan 003E  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                      _Set_RPM_RGB 258E                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E                            _CCP1CON 000FBD  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                          _ALARMEN 00FB                          ?___ftpack 0011  
                        ?___lbtoft 0019                         I2C_Write@n 0012  
                          ?_printf 001D                            ?_strcpy 0011  
                          ?_strlen 0011                        ?_Toggle_Fan 0001  
                ??_Activate_Buzzer 0011                         _fillScreen 28D2  
            __end_of_Update_Screen 0D4A                         _drawCircle 11C0  
                   _init_INTERRUPT 273A                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
                          _RPM_Txt 00D4              __end_of_fillRectangle 1CE4  
                          _Do_Beep 2922                          ?_drawtext 0039  
                _DS3231_Setup_Time 2258                            _Do_Init 241E  
         _I2C_Write_Cmd_Write_Data 2894         __end_of_I2C_Write_Cmd_Only 2908  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                          _i2cNack 2A42                 __end_of_TIMER1_isr 2A38  
               ?_DS3231_Setup_Time 0001                      _write_command 29F4  
                        _I2C_Start 29C0                          _I2C_Write 26CA  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __size_of_Set_DC_RGB 0046  
              __end_of_DS1621_Init 28D2                  __end_of_drawPixel 279C  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 1F8A  
                          ___awdiv 1E6C                            ___awmod 1F8A  
                          ___ftdiv 1B26                    __size_of___wmul 0028  
                          ___ftmul 1856                            ___fttol 1A40  
                          ___lwdiv 2322                            ___lwmod 246A  
                  __size_of_chkisr 2100                          ?_spiwrite 0001  
                          __pcinit 200C                         ??___ftpack 0016  
                       ??___lbtoft 001C                            __ramtop 1000  
                          _get_RPM 2610                            __ptext0 0FB4  
                          __ptext1 2610                            __ptext2 0976  
                          __ptext3 1F8A                            __ptext4 294E  
                          __ptext5 2A04          __size_of_DS1621_Read_Temp 0040  
                          __ptext6 2A56                            __ptext7 258E  
                          __ptext8 2548                            __ptext9 1E6C  
                  __size_of_printf 095A                  __end_of_init_UART 298A  
              __end_of_Turn_On_Fan 2A12             __end_of_init_INTERRUPT 276C  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FBE6  
         __end_of_force_nec_state0 2A7E                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FBD4  
            __end_of_do_update_pwm 1E6C                            _isdigit 2872  
                        _T3CONbits 000FB1                   ___awmod@dividend 001F  
                       _duty_cycle 005B                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 294E                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 22BE                   ??_Increase_Speed 003E  
                       ??_drawChar 0035                          _LCD_Reset 298A  
                    _setAddrWindow 23D0                     __pintcode_body 208C  
                       delay_ms@ms 0017               end_of_initialization 2082  
                __end_of_octpowers FBD4                         ??_drawtext 00E9  
                   ?_write_command 0001                      __Lmediumconst F9EC  
        __size_of_DS3231_Read_Time 0064                            int_func 208C  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                         get_RPM@RPS 0021  
              __size_of_Toggle_Fan 0014                         _tempSecond 006E  
                        _RCSTAbits 000FAB                            printf@c 0187  
                          printf@f 001D                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 0011  
                          strlen@s 0011        I2C_Write_Cmd_Write_Data@Cmd 0013  
                        _PORTAbits 000F80                   drawtext@cursor_x 00F1  
                 drawtext@cursor_y 00F0                          _PORTBbits 000F81  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                  ?_init_INTERRUPT 0001                         _setup_date 009D  
                      ?_fillScreen 0024                         _setup_hour 0067  
                       _setup_time 00A6                         _setup_year 006B  
                      ?_drawCircle 001C                         drawChar@bg 0032  
                        _TRISAbits 000F92                          _TRISCbits 000F94  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
              Set_DC_RGB@d1color_C 0021                Set_DC_RGB@d1color_I 0022  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00EC  
                       drawPixel@x 001B                         drawPixel@y 0018  
                 _Wait_Half_Second 2908                        _DS1621_Init 28B4  
                      ___ftdiv@exp 0039                        printf@width 0185  
                        _TXSTAbits 000FAC                  __size_of_INT0_isr 016C  
                   __end_of_i2cAck 29E4                        ___ftmul@exp 0026  
         DS1621_Read_Temp@Data_Ret 0017                        _Turn_On_Fan 2A04  
               __end_of_i2cHighSda 2A76                 __end_of_i2cHighScl 2A2C  
                   __end_of___wmul 284C                      delay_ms@count 001B  
                       _write_data 29E4                      __pidataCOMRAM 2A7E  
                   __end_of_chkisr 2108           ?_TFT_GreenTab_Initialize 0001  
                      _I2C_ReStart 2938                         drawtext@bg 003E  
                        _Nec_code1 0050                          _i2cLowSda 2A4C  
                        _i2cLowScl 2A66                     __end_of_printf 0976  
                     ??_Set_DC_RGB 0021                     __end_of_strcpy 273A  
                   __end_of_strlen 268C                          _Nec_state 0051  
              start_initialization 200C             Update_Screen@neg_tempF 00F4  
       __size_of_DS3231_Setup_Time 0066            __size_of_Decrease_Speed 002E  
                  ??_write_command 0013                          _OpenUSART 217E  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                      ??_I2C_Write 0011                           ??_i2cAck 0011  
                __size_of_Rcmd2red 003E                __size_of_fillScreen 001C  
              __size_of_drawCircle 01AE                    _Activate_Buzzer 299C  
               __end_of_Set_DC_RGB 258E                           ??___wmul 0015  
                     ?_Set_RPM_RGB 001F                      ?_Turn_Off_Fan 0001  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 002B  
                 _DS1621_Read_Temp 25D0                           ??_strcpy 0015  
                         ??_strlen 0013                       ??_Toggle_Fan 003E  
                       ?_i2cLowSda 0001                         ?_i2cLowScl 0001  
                __size_of___ftpack 00C6                  __size_of___lbtoft 0026  
                      __pbssCOMRAM 0041         ??_I2C_Write_Cmd_Write_Data 0015  
                  ??_setAddrWindow 0017                      __pcstackBANK0 00E9  
                    __pcstackBANK1 0175                        ??_LCD_Reset 001D  
                     _isdigit$2268 0012                  __size_of_delay_ms 0052  
                         ?_Do_Beep 0001                           ?_Do_Init 0001  
                __size_of_fillRect 004A                  __size_of_drawChar 0156  
                       ?_OpenUSART 0011                   _DS3231_Read_Time 22BE  
                         ?_i2cNack 0001                  __size_of_drawtext 0116  
                 ___lwdiv@dividend 0011                 __end_of_Toggle_Fan 2962  
                      I2C_Read@ack 0011                          _bit_count 0057  
                        __pintcode 0008    __end_of_TFT_GreenTab_Initialize 2824  
                   ??_Turn_Off_Fan 0011                      __pmediumconst F9EC  
                         ?___awdiv 0017                           ?___awmod 001F  
                         ?___ftdiv 002C                           ?___ftmul 001D  
                         ?___fttol 0011                          __tft_type 0052  
                         ?___lwdiv 0011                 _I2C_Write_Cmd_Only 28EE  
                         ?___lwmod 0018                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 276C  
                         ?_get_RPM 001F                  __size_of_spiwrite 0014  
              ?_I2C_Write_Cmd_Only 0013                  ?_force_nec_state0 0001  
                         ?_isdigit 0001                           _I2C_Init 2A38  
                         _I2C_Read 2500                           _I2C_Stop 29AE  
                _Initialize_Screen 0D4A                     __size_of_Rcmd1 0110  
                   __size_of_Rcmd3 00F2                          _init_UART 2976  
               ??_force_nec_state0 0001           I2C_Write_Cmd_Only@Device 0014  
                        _hexpowers FBDE                 ?_Initialize_Screen 0001  
                 ___lwdiv@quotient 0016                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 29AE                     ___wmul@product 0015  
              ??_Initialize_Screen 0041                           _INT0_isr 136E  
                        _octpowers FBC8               ??_I2C_Write_Cmd_Only 0014  
                         _PIE1bits 000F9D             __size_of_Update_Screen 03D4  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                 ??_init_INTERRUPT 0011                          _setup_day 0066  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                          drawChar@x 0036  
                        drawChar@y 002E                         ?_drawPixel 0018  
           __size_of_fillRectangle 00DC           __end_of_Wait_Half_Second 2922  
                ___wmul@multiplier 0011          __end_of_Initialize_Screen 0FB4  
                      ??_i2cLowSda 0011                        ??_i2cLowScl 0011  
                     ??_fillScreen 0026                       ??_drawCircle 0024  
                       printf@flag 0188                         printf@prec 0184  
                       ?_init_UART 0001                     _Decrease_Speed 27CC  
                      _INTCON2bits 000FF1                          copy_data0 2038  
                        copy_data1 2058                          drawtext@i 00EE  
           __size_of_drawFastVLine 0088                          drawtext@x 00EB  
                        drawtext@y 0039                           _Nec_code 00F7  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                 __size_of_Do_Beep 0016                       ?_DS1621_Init 0001  
                         _Rcmd2red 268C                   __size_of_Do_Init 004C  
              __size_of_write_data 0010                    OpenUSART@config 0013  
                     _Time_Elapsed 0045                   __size_of_i2cNack 000A  
                    _RTC_ALARM_Txt 00C0                           __Hrparam 0000  
           __size_of_do_update_pwm 00C2                 __end_of_fillScreen 28EE  
                         __Lrparam 0000                 __end_of_drawCircle 136E  
                     ?_Turn_On_Fan 0001                   __size_of___awdiv 0096  
                 __size_of___awmod 0082                   __size_of___ftdiv 00E2  
                 __size_of___ftmul 00F8                   __size_of___fttol 00E6  
                 __size_of___lwdiv 005C                   __size_of___lwmod 004C  
             __size_of_Set_RPM_RGB 0042                           ___ftpack 1CE4  
                         ___lbtoft 284C                       ?_I2C_ReStart 0001  
                 __size_of_get_RPM 003E                      _Update_Screen 0976  
                   _setup_fan_temp 006D                     _setup_fan_text 00B7  
                 __size_of_isdigit 0022                           _delay_ms 237E  
           __end_of_Decrease_Speed 27FA                    ___lwdiv@divisor 0013  
                  ___lwdiv@counter 0015                           __ptext10 0D4A  
                         __ptext11 2708                           __ptext20 276C  
                         __ptext12 28D2                           __ptext21 23D0  
                         __ptext13 1C08                           __ptext30 237E  
                         __ptext22 27FA                           __ptext14 1630  
                         __ptext31 279C                           __ptext23 194E  
                         __ptext15 264E                           __ptext40 27CC  
                         __ptext32 241E                           __ptext24 268C  
                         __ptext16 14DA                           __ptext41 001C  
                         __ptext33 2976                           __ptext25 1746  
                         __ptext17 24B6                           __ptext50 1856  
                         __ptext42 2A12                           __ptext34 217E  
                         __ptext26 29E4                           __ptext18 1F02  
                         __ptext51 1B26                           __ptext43 2872  
                         __ptext35 273A                           __ptext27 29F4  
                         __ptext19 11C0                           __ptext60 26CA  
                         __ptext52 1CE4                           __ptext44 2824  
                         __ptext36 2A38                           __ptext28 2962  
                         __ptext61 29AE                           __ptext53 2922  
                         __ptext45 246A                           __ptext37 28B4  
                         __ptext29 298A                           __ptext70 2A20  
                         __ptext62 29C0                           __ptext54 2908  
                         __ptext46 2322                           __ptext38 2894  
                         __ptext63 2500                           __ptext55 2A5E  
                         __ptext47 1DAA                           __ptext39 28EE  
                         __ptext72 2A2C                           __ptext64 2A42  
                         __ptext56 299C                           __ptext48 284C  
                         __ptext73 136E                           __ptext65 29D2  
                         __ptext57 2258                           __ptext49 1A40  
                         __ptext74 2A76                           __ptext66 2938  
                         __ptext58 22BE                           __ptext67 2A4C  
                         __ptext59 25D0                           __ptext68 2A66  
                         __ptext69 2A6E                           _fillRect 24B6  
                         _drawChar 14DA               __end_of_Turn_Off_Fan 2A5E  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0058  
                         _drawtext 1630                         strcpy@from 0013  
                    _fillRectangle 1C08           __end_of_DS1621_Read_Temp 2610  
                 ?_Activate_Buzzer 0001                      __size_of_main 020C  
          __size_of_Increase_Speed 0030                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 1F02  
                        printf@idx 0175                          printf@len 017E  
                         _spiwrite 2962                          printf@val 0182  
                      ??_drawPixel 001B                           _rowstart 0061  
         __end_of_DS3231_Read_Time 2322         __size_of_Initialize_Screen 026A  
                   ?_Update_Screen 0001                         _INTCONbits 000FF2  
                    _do_update_pwm 1DAA                     OpenUSART@spbrg 0011  
                      ??_init_UART 0014                    ?_Decrease_Speed 0001  
                         isdigit@c 0013                          spiwrite@x 0011  
                         intlevel2 0000                     ?_fillRectangle 0018  
                 ___lwmod@dividend 0018              __end_of_write_command 2A04  
                  fillScreen@color 0024            do_update_pwm@duty_cycle 00EC  
                   fillRectangle@h 001A                     fillRectangle@w 0019  
                   fillRectangle@x 0023                     fillRectangle@y 0018  
                   ?_drawFastVLine 0018                           printf@ap 0180  
                         printf@cp 0176                       ??_write_data 0013  
                       _TIMER1_isr 2A2C                      fillRect@color 0026  
                      _printf$1745 017C                        _printf$1738 0178  
                      _printf$1739 017A                     ?_do_update_pwm 0001  
                  ___lwmod@divisor 001A                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                    ___lwmod@counter 001C  
                     _setup_minute 0068                       _setup_second 006A  
            __end_of_setAddrWindow 241E                 fillRectangle@color 001B  
                do_update_pwm@dc_I 00ED                  do_update_pwm@dc_f 00E9  
                   Set_RPM_RGB@RPM 0021                      drawChar@color 0030  
                      _setup_month 0069                     Set_RPM_RGB@rpm 001F  
               __end_of_write_data 29F4          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
