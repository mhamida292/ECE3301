

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 14 16:32:45 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataCOMRAM
    61  001694                     __pidataCOMRAM:
    62                           	opt stack 0
    63                           
    64                           ;initializer for _array1
    65  001694  A2                 	db	162
    66  001695  62                 	db	98
    67  001696  E2                 	db	226
    68  001697  22                 	db	34
    69  001698  02                 	db	2
    70  001699  C2                 	db	194
    71  00169A  E0                 	db	224
    72  00169B  A8                 	db	168
    73  00169C  90                 	db	144
    74  00169D  68                 	db	104
    75  00169E  98                 	db	152
    76  00169F  B0                 	db	176
    77  0016A0  30                 	db	48
    78  0016A1  18                 	db	24
    79  0016A2  7A                 	db	122
    80  0016A3  10                 	db	16
    81  0016A4  38                 	db	56
    82  0016A5  5A                 	db	90
    83  0016A6  42                 	db	66
    84  0016A7  4A                 	db	74
    85  0016A8  52                 	db	82
    86                           
    87                           ;initializer for _wrap
    88  0016A9  01                 	db	1
    89                           
    90                           	psect	idataBANK0
    91  0014CC                     __pidataBANK0:
    92                           	opt stack 0
    93                           
    94                           ;initializer for _D1
    95  0014CC  02                 	db	2
    96  0014CD  02                 	db	2
    97  0014CE  02                 	db	2
    98  0014CF  08                 	db	8
    99  0014D0  08                 	db	8
   100  0014D1  04                 	db	4
   101  0014D2  0A                 	db	10
   102  0014D3  00                 	db	0
   103  0014D4  00                 	db	0
   104  0014D5  00                 	db	0
   105  0014D6  00                 	db	0
   106  0014D7  00                 	db	0
   107  0014D8  00                 	db	0
   108  0014D9  00                 	db	0
   109  0014DA  00                 	db	0
   110  0014DB  00                 	db	0
   111  0014DC  00                 	db	0
   112  0014DD  00                 	db	0
   113  0014DE  00                 	db	0
   114  0014DF  00                 	db	0
   115  0014E0  00                 	db	0
   116                           
   117                           ;initializer for _D2
   118  0014E1  00                 	db	0
   119  0014E2  00                 	db	0
   120  0014E3  00                 	db	0
   121  0014E4  00                 	db	0
   122  0014E5  00                 	db	0
   123  0014E6  00                 	db	0
   124  0014E7  00                 	db	0
   125  0014E8  28                 	db	40
   126  0014E9  28                 	db	40
   127  0014EA  38                 	db	56
   128  0014EB  38                 	db	56
   129  0014EC  38                 	db	56
   130  0014ED  38                 	db	56
   131  0014EE  38                 	db	56
   132  0014EF  00                 	db	0
   133  0014F0  00                 	db	0
   134  0014F1  00                 	db	0
   135  0014F2  00                 	db	0
   136  0014F3  00                 	db	0
   137  0014F4  00                 	db	0
   138  0014F5  00                 	db	0
   139                           
   140                           ;initializer for _D3
   141  0014F6  00                 	db	0
   142  0014F7  00                 	db	0
   143  0014F8  00                 	db	0
   144  0014F9  00                 	db	0
   145  0014FA  00                 	db	0
   146  0014FB  00                 	db	0
   147  0014FC  00                 	db	0
   148  0014FD  00                 	db	0
   149  0014FE  00                 	db	0
   150  0014FF  00                 	db	0
   151  001500  00                 	db	0
   152  001501  00                 	db	0
   153  001502  00                 	db	0
   154  001503  00                 	db	0
   155  001504  07                 	db	7
   156  001505  07                 	db	7
   157  001506  07                 	db	7
   158  001507  07                 	db	7
   159  001508  07                 	db	7
   160  001509  07                 	db	7
   161  00150A  07                 	db	7
   162                           
   163                           	psect	idataBANK1
   164  0011B6                     __pidataBANK1:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _color
   168  0011B6  F800               	dw	63488
   169  0011B8  F800               	dw	63488
   170  0011BA  F800               	dw	63488
   171  0011BC  001F               	dw	31
   172  0011BE  001F               	dw	31
   173  0011C0  07E0               	dw	2016
   174  0011C2  F81F               	dw	63519
   175  0011C4  F81F               	dw	63519
   176  0011C6  F81F               	dw	63519
   177  0011C8  0000               	dw	0
   178  0011CA  0000               	dw	0
   179  0011CC  0000               	dw	0
   180  0011CE  0000               	dw	0
   181  0011D0  0000               	dw	0
   182  0011D2  0000               	dw	0
   183  0011D4  0000               	dw	0
   184  0011D6  0000               	dw	0
   185  0011D8  0000               	dw	0
   186  0011DA  0000               	dw	0
   187  0011DC  0000               	dw	0
   188  0011DE  0000               	dw	0
   189                           
   190                           ;initializer for _txt1
   191  0011E0  43                 	db	67
   192  0011E1  48                 	db	72
   193  0011E2  2D                 	db	45
   194  0011E3  00                 	db	0
   195  0011E4  43                 	db	67
   196  0011E5  48                 	db	72
   197  0011E6  20                 	db	32
   198  0011E7  00                 	db	0
   199  0011E8  43                 	db	67
   200  0011E9  48                 	db	72
   201  0011EA  2B                 	db	43
   202  0011EB  00                 	db	0
   203  0011EC  50                 	db	80
   204  0011ED  52                 	db	82
   205  0011EE  56                 	db	86
   206  0011EF  00                 	db	0
   207  0011F0  4E                 	db	78
   208  0011F1  58                 	db	88
   209  0011F2  54                 	db	84
   210  0011F3  00                 	db	0
   211  0011F4  50                 	db	80
   212  0011F5  2F                 	db	47
   213  0011F6  50                 	db	80
   214  0011F7  00                 	db	0
   215  0011F8  56                 	db	86
   216  0011F9  4C                 	db	76
   217  0011FA  2D                 	db	45
   218  0011FB  00                 	db	0
   219  0011FC  56                 	db	86
   220  0011FD  4C                 	db	76
   221  0011FE  2B                 	db	43
   222  0011FF  00                 	db	0
   223  001200  45                 	db	69
   224  001201  51                 	db	81
   225  001202  20                 	db	32
   226  001203  00                 	db	0
   227  001204  23                 	db	35
   228  001205  30                 	db	48
   229  001206  30                 	db	48
   230  001207  00                 	db	0
   231  001208  31                 	db	49
   232  001209  30                 	db	48
   233  00120A  30                 	db	48
   234  00120B  00                 	db	0
   235  00120C  32                 	db	50
   236  00120D  30                 	db	48
   237  00120E  30                 	db	48
   238  00120F  00                 	db	0
   239  001210  23                 	db	35
   240  001211  30                 	db	48
   241  001212  31                 	db	49
   242  001213  00                 	db	0
   243  001214  23                 	db	35
   244  001215  30                 	db	48
   245  001216  32                 	db	50
   246  001217  00                 	db	0
   247  001218  23                 	db	35
   248  001219  30                 	db	48
   249  00121A  33                 	db	51
   250  00121B  00                 	db	0
   251  00121C  23                 	db	35
   252  00121D  30                 	db	48
   253  00121E  34                 	db	52
   254  00121F  00                 	db	0
   255  001220  23                 	db	35
   256  001221  30                 	db	48
   257  001222  35                 	db	53
   258  001223  00                 	db	0
   259  001224  23                 	db	35
   260  001225  30                 	db	48
   261  001226  36                 	db	54
   262  001227  00                 	db	0
   263  001228  23                 	db	35
   264  001229  30                 	db	48
   265  00122A  37                 	db	55
   266  00122B  00                 	db	0
   267  00122C  23                 	db	35
   268  00122D  30                 	db	48
   269  00122E  38                 	db	56
   270  00122F  00                 	db	0
   271  001230  23                 	db	35
   272  001231  30                 	db	48
   273  001232  39                 	db	57
   274  001233  00                 	db	0
   275                           
   276                           	psect	mediumconst
   277  00FD8E                     __pmediumconst:
   278                           	opt stack 0
   279  00FD8E  00                 	db	0
   280  00FD8F                     _font:
   281                           	opt stack 0
   282  00FD8F  00                 	db	0
   283  00FD90  00                 	db	0
   284  00FD91  00                 	db	0
   285  00FD92  00                 	db	0
   286  00FD93  00                 	db	0
   287  00FD94  00                 	db	0
   288  00FD95  00                 	db	0
   289  00FD96  5F                 	db	95
   290  00FD97  00                 	db	0
   291  00FD98  00                 	db	0
   292  00FD99  00                 	db	0
   293  00FD9A  07                 	db	7
   294  00FD9B  00                 	db	0
   295  00FD9C  07                 	db	7
   296  00FD9D  00                 	db	0
   297  00FD9E  14                 	db	20
   298  00FD9F  7F                 	db	127
   299  00FDA0  14                 	db	20
   300  00FDA1  7F                 	db	127
   301  00FDA2  14                 	db	20
   302  00FDA3  24                 	db	36
   303  00FDA4  2A                 	db	42
   304  00FDA5  7F                 	db	127
   305  00FDA6  2A                 	db	42
   306  00FDA7  12                 	db	18
   307  00FDA8  23                 	db	35
   308  00FDA9  13                 	db	19
   309  00FDAA  08                 	db	8
   310  00FDAB  64                 	db	100
   311  00FDAC  62                 	db	98
   312  00FDAD  36                 	db	54
   313  00FDAE  49                 	db	73
   314  00FDAF  56                 	db	86
   315  00FDB0  20                 	db	32
   316  00FDB1  50                 	db	80
   317  00FDB2  00                 	db	0
   318  00FDB3  08                 	db	8
   319  00FDB4  07                 	db	7
   320  00FDB5  03                 	db	3
   321  00FDB6  00                 	db	0
   322  00FDB7  00                 	db	0
   323  00FDB8  1C                 	db	28
   324  00FDB9  22                 	db	34
   325  00FDBA  41                 	db	65
   326  00FDBB  00                 	db	0
   327  00FDBC  00                 	db	0
   328  00FDBD  41                 	db	65
   329  00FDBE  22                 	db	34
   330  00FDBF  1C                 	db	28
   331  00FDC0  00                 	db	0
   332  00FDC1  2A                 	db	42
   333  00FDC2  1C                 	db	28
   334  00FDC3  7F                 	db	127
   335  00FDC4  1C                 	db	28
   336  00FDC5  2A                 	db	42
   337  00FDC6  08                 	db	8
   338  00FDC7  08                 	db	8
   339  00FDC8  3E                 	db	62
   340  00FDC9  08                 	db	8
   341  00FDCA  08                 	db	8
   342  00FDCB  00                 	db	0
   343  00FDCC  80                 	db	128
   344  00FDCD  70                 	db	112
   345  00FDCE  30                 	db	48
   346  00FDCF  00                 	db	0
   347  00FDD0  08                 	db	8
   348  00FDD1  08                 	db	8
   349  00FDD2  08                 	db	8
   350  00FDD3  08                 	db	8
   351  00FDD4  08                 	db	8
   352  00FDD5  00                 	db	0
   353  00FDD6  00                 	db	0
   354  00FDD7  60                 	db	96
   355  00FDD8  60                 	db	96
   356  00FDD9  00                 	db	0
   357  00FDDA  20                 	db	32
   358  00FDDB  10                 	db	16
   359  00FDDC  08                 	db	8
   360  00FDDD  04                 	db	4
   361  00FDDE  02                 	db	2
   362  00FDDF  3E                 	db	62
   363  00FDE0  51                 	db	81
   364  00FDE1  49                 	db	73
   365  00FDE2  45                 	db	69
   366  00FDE3  3E                 	db	62
   367  00FDE4  00                 	db	0
   368  00FDE5  42                 	db	66
   369  00FDE6  7F                 	db	127
   370  00FDE7  40                 	db	64
   371  00FDE8  00                 	db	0
   372  00FDE9  72                 	db	114
   373  00FDEA  49                 	db	73
   374  00FDEB  49                 	db	73
   375  00FDEC  49                 	db	73
   376  00FDED  46                 	db	70
   377  00FDEE  21                 	db	33
   378  00FDEF  41                 	db	65
   379  00FDF0  49                 	db	73
   380  00FDF1  4D                 	db	77
   381  00FDF2  33                 	db	51
   382  00FDF3  18                 	db	24
   383  00FDF4  14                 	db	20
   384  00FDF5  12                 	db	18
   385  00FDF6  7F                 	db	127
   386  00FDF7  10                 	db	16
   387  00FDF8  27                 	db	39
   388  00FDF9  45                 	db	69
   389  00FDFA  45                 	db	69
   390  00FDFB  45                 	db	69
   391  00FDFC  39                 	db	57
   392  00FDFD  3C                 	db	60
   393  00FDFE  4A                 	db	74
   394  00FDFF  49                 	db	73
   395  00FE00  49                 	db	73
   396  00FE01  31                 	db	49
   397  00FE02  41                 	db	65
   398  00FE03  21                 	db	33
   399  00FE04  11                 	db	17
   400  00FE05  09                 	db	9
   401  00FE06  07                 	db	7
   402  00FE07  36                 	db	54
   403  00FE08  49                 	db	73
   404  00FE09  49                 	db	73
   405  00FE0A  49                 	db	73
   406  00FE0B  36                 	db	54
   407  00FE0C  46                 	db	70
   408  00FE0D  49                 	db	73
   409  00FE0E  49                 	db	73
   410  00FE0F  29                 	db	41
   411  00FE10  1E                 	db	30
   412  00FE11  00                 	db	0
   413  00FE12  00                 	db	0
   414  00FE13  14                 	db	20
   415  00FE14  00                 	db	0
   416  00FE15  00                 	db	0
   417  00FE16  00                 	db	0
   418  00FE17  40                 	db	64
   419  00FE18  34                 	db	52
   420  00FE19  00                 	db	0
   421  00FE1A  00                 	db	0
   422  00FE1B  00                 	db	0
   423  00FE1C  08                 	db	8
   424  00FE1D  14                 	db	20
   425  00FE1E  22                 	db	34
   426  00FE1F  41                 	db	65
   427  00FE20  14                 	db	20
   428  00FE21  14                 	db	20
   429  00FE22  14                 	db	20
   430  00FE23  14                 	db	20
   431  00FE24  14                 	db	20
   432  00FE25  00                 	db	0
   433  00FE26  41                 	db	65
   434  00FE27  22                 	db	34
   435  00FE28  14                 	db	20
   436  00FE29  08                 	db	8
   437  00FE2A  02                 	db	2
   438  00FE2B  01                 	db	1
   439  00FE2C  59                 	db	89
   440  00FE2D  09                 	db	9
   441  00FE2E  06                 	db	6
   442  00FE2F  3E                 	db	62
   443  00FE30  41                 	db	65
   444  00FE31  5D                 	db	93
   445  00FE32  59                 	db	89
   446  00FE33  4E                 	db	78
   447  00FE34  7C                 	db	124
   448  00FE35  12                 	db	18
   449  00FE36  11                 	db	17
   450  00FE37  12                 	db	18
   451  00FE38  7C                 	db	124
   452  00FE39  7F                 	db	127
   453  00FE3A  49                 	db	73
   454  00FE3B  49                 	db	73
   455  00FE3C  49                 	db	73
   456  00FE3D  36                 	db	54
   457  00FE3E  3E                 	db	62
   458  00FE3F  41                 	db	65
   459  00FE40  41                 	db	65
   460  00FE41  41                 	db	65
   461  00FE42  22                 	db	34
   462  00FE43  7F                 	db	127
   463  00FE44  41                 	db	65
   464  00FE45  41                 	db	65
   465  00FE46  41                 	db	65
   466  00FE47  3E                 	db	62
   467  00FE48  7F                 	db	127
   468  00FE49  49                 	db	73
   469  00FE4A  49                 	db	73
   470  00FE4B  49                 	db	73
   471  00FE4C  41                 	db	65
   472  00FE4D  7F                 	db	127
   473  00FE4E  09                 	db	9
   474  00FE4F  09                 	db	9
   475  00FE50  09                 	db	9
   476  00FE51  01                 	db	1
   477  00FE52  3E                 	db	62
   478  00FE53  41                 	db	65
   479  00FE54  41                 	db	65
   480  00FE55  51                 	db	81
   481  00FE56  73                 	db	115
   482  00FE57  7F                 	db	127
   483  00FE58  08                 	db	8
   484  00FE59  08                 	db	8
   485  00FE5A  08                 	db	8
   486  00FE5B  7F                 	db	127
   487  00FE5C  00                 	db	0
   488  00FE5D  41                 	db	65
   489  00FE5E  7F                 	db	127
   490  00FE5F  41                 	db	65
   491  00FE60  00                 	db	0
   492  00FE61  20                 	db	32
   493  00FE62  40                 	db	64
   494  00FE63  41                 	db	65
   495  00FE64  3F                 	db	63
   496  00FE65  01                 	db	1
   497  00FE66  7F                 	db	127
   498  00FE67  08                 	db	8
   499  00FE68  14                 	db	20
   500  00FE69  22                 	db	34
   501  00FE6A  41                 	db	65
   502  00FE6B  7F                 	db	127
   503  00FE6C  40                 	db	64
   504  00FE6D  40                 	db	64
   505  00FE6E  40                 	db	64
   506  00FE6F  40                 	db	64
   507  00FE70  7F                 	db	127
   508  00FE71  02                 	db	2
   509  00FE72  1C                 	db	28
   510  00FE73  02                 	db	2
   511  00FE74  7F                 	db	127
   512  00FE75  7F                 	db	127
   513  00FE76  04                 	db	4
   514  00FE77  08                 	db	8
   515  00FE78  10                 	db	16
   516  00FE79  7F                 	db	127
   517  00FE7A  3E                 	db	62
   518  00FE7B  41                 	db	65
   519  00FE7C  41                 	db	65
   520  00FE7D  41                 	db	65
   521  00FE7E  3E                 	db	62
   522  00FE7F  7F                 	db	127
   523  00FE80  09                 	db	9
   524  00FE81  09                 	db	9
   525  00FE82  09                 	db	9
   526  00FE83  06                 	db	6
   527  00FE84  3E                 	db	62
   528  00FE85  41                 	db	65
   529  00FE86  51                 	db	81
   530  00FE87  21                 	db	33
   531  00FE88  5E                 	db	94
   532  00FE89  7F                 	db	127
   533  00FE8A  09                 	db	9
   534  00FE8B  19                 	db	25
   535  00FE8C  29                 	db	41
   536  00FE8D  46                 	db	70
   537  00FE8E                     __end_of_font:
   538                           	opt stack 0
   539  00FE8E                     _font2:
   540                           	opt stack 0
   541  00FE8E  26                 	db	38
   542  00FE8F  49                 	db	73
   543  00FE90  49                 	db	73
   544  00FE91  49                 	db	73
   545  00FE92  32                 	db	50
   546  00FE93  03                 	db	3
   547  00FE94  01                 	db	1
   548  00FE95  7F                 	db	127
   549  00FE96  01                 	db	1
   550  00FE97  03                 	db	3
   551  00FE98  3F                 	db	63
   552  00FE99  40                 	db	64
   553  00FE9A  40                 	db	64
   554  00FE9B  40                 	db	64
   555  00FE9C  3F                 	db	63
   556  00FE9D  1F                 	db	31
   557  00FE9E  20                 	db	32
   558  00FE9F  40                 	db	64
   559  00FEA0  20                 	db	32
   560  00FEA1  1F                 	db	31
   561  00FEA2  3F                 	db	63
   562  00FEA3  40                 	db	64
   563  00FEA4  38                 	db	56
   564  00FEA5  40                 	db	64
   565  00FEA6  3F                 	db	63
   566  00FEA7  63                 	db	99
   567  00FEA8  14                 	db	20
   568  00FEA9  08                 	db	8
   569  00FEAA  14                 	db	20
   570  00FEAB  63                 	db	99
   571  00FEAC  03                 	db	3
   572  00FEAD  04                 	db	4
   573  00FEAE  78                 	db	120
   574  00FEAF  04                 	db	4
   575  00FEB0  03                 	db	3
   576  00FEB1  61                 	db	97
   577  00FEB2  59                 	db	89
   578  00FEB3  49                 	db	73
   579  00FEB4  4D                 	db	77
   580  00FEB5  43                 	db	67
   581  00FEB6  00                 	db	0
   582  00FEB7  7F                 	db	127
   583  00FEB8  41                 	db	65
   584  00FEB9  41                 	db	65
   585  00FEBA  41                 	db	65
   586  00FEBB  02                 	db	2
   587  00FEBC  04                 	db	4
   588  00FEBD  08                 	db	8
   589  00FEBE  10                 	db	16
   590  00FEBF  20                 	db	32
   591  00FEC0  00                 	db	0
   592  00FEC1  41                 	db	65
   593  00FEC2  41                 	db	65
   594  00FEC3  41                 	db	65
   595  00FEC4  7F                 	db	127
   596  00FEC5  04                 	db	4
   597  00FEC6  02                 	db	2
   598  00FEC7  01                 	db	1
   599  00FEC8  02                 	db	2
   600  00FEC9  04                 	db	4
   601  00FECA  40                 	db	64
   602  00FECB  40                 	db	64
   603  00FECC  40                 	db	64
   604  00FECD  40                 	db	64
   605  00FECE  40                 	db	64
   606  00FECF  00                 	db	0
   607  00FED0  03                 	db	3
   608  00FED1  07                 	db	7
   609  00FED2  08                 	db	8
   610  00FED3  00                 	db	0
   611  00FED4  20                 	db	32
   612  00FED5  54                 	db	84
   613  00FED6  54                 	db	84
   614  00FED7  78                 	db	120
   615  00FED8  40                 	db	64
   616  00FED9  7F                 	db	127
   617  00FEDA  28                 	db	40
   618  00FEDB  44                 	db	68
   619  00FEDC  44                 	db	68
   620  00FEDD  38                 	db	56
   621  00FEDE  38                 	db	56
   622  00FEDF  44                 	db	68
   623  00FEE0  44                 	db	68
   624  00FEE1  44                 	db	68
   625  00FEE2  28                 	db	40
   626  00FEE3  38                 	db	56
   627  00FEE4  44                 	db	68
   628  00FEE5  44                 	db	68
   629  00FEE6  28                 	db	40
   630  00FEE7  7F                 	db	127
   631  00FEE8  38                 	db	56
   632  00FEE9  54                 	db	84
   633  00FEEA  54                 	db	84
   634  00FEEB  54                 	db	84
   635  00FEEC  18                 	db	24
   636  00FEED  00                 	db	0
   637  00FEEE  08                 	db	8
   638  00FEEF  7E                 	db	126
   639  00FEF0  09                 	db	9
   640  00FEF1  02                 	db	2
   641  00FEF2  18                 	db	24
   642  00FEF3  A4                 	db	164
   643  00FEF4  A4                 	db	164
   644  00FEF5  9C                 	db	156
   645  00FEF6  78                 	db	120
   646  00FEF7  7F                 	db	127
   647  00FEF8  08                 	db	8
   648  00FEF9  04                 	db	4
   649  00FEFA  04                 	db	4
   650  00FEFB  78                 	db	120
   651  00FEFC  00                 	db	0
   652  00FEFD  44                 	db	68
   653  00FEFE  7D                 	db	125
   654  00FEFF  40                 	db	64
   655  00FF00  00                 	db	0
   656  00FF01  20                 	db	32
   657  00FF02  40                 	db	64
   658  00FF03  40                 	db	64
   659  00FF04  3D                 	db	61
   660  00FF05  00                 	db	0
   661  00FF06  7F                 	db	127
   662  00FF07  10                 	db	16
   663  00FF08  28                 	db	40
   664  00FF09  44                 	db	68
   665  00FF0A  00                 	db	0
   666  00FF0B  00                 	db	0
   667  00FF0C  41                 	db	65
   668  00FF0D  7F                 	db	127
   669  00FF0E  40                 	db	64
   670  00FF0F  00                 	db	0
   671  00FF10  7C                 	db	124
   672  00FF11  04                 	db	4
   673  00FF12  78                 	db	120
   674  00FF13  04                 	db	4
   675  00FF14  78                 	db	120
   676  00FF15  7C                 	db	124
   677  00FF16  08                 	db	8
   678  00FF17  04                 	db	4
   679  00FF18  04                 	db	4
   680  00FF19  78                 	db	120
   681  00FF1A  38                 	db	56
   682  00FF1B  44                 	db	68
   683  00FF1C  44                 	db	68
   684  00FF1D  44                 	db	68
   685  00FF1E  38                 	db	56
   686  00FF1F  FC                 	db	252
   687  00FF20  18                 	db	24
   688  00FF21  24                 	db	36
   689  00FF22  24                 	db	36
   690  00FF23  18                 	db	24
   691  00FF24  18                 	db	24
   692  00FF25  24                 	db	36
   693  00FF26  24                 	db	36
   694  00FF27  18                 	db	24
   695  00FF28  FC                 	db	252
   696  00FF29  7C                 	db	124
   697  00FF2A  08                 	db	8
   698  00FF2B  04                 	db	4
   699  00FF2C  04                 	db	4
   700  00FF2D  08                 	db	8
   701  00FF2E  48                 	db	72
   702  00FF2F  54                 	db	84
   703  00FF30  54                 	db	84
   704  00FF31  54                 	db	84
   705  00FF32  24                 	db	36
   706  00FF33  04                 	db	4
   707  00FF34  04                 	db	4
   708  00FF35  3F                 	db	63
   709  00FF36  44                 	db	68
   710  00FF37  24                 	db	36
   711  00FF38  3C                 	db	60
   712  00FF39  40                 	db	64
   713  00FF3A  40                 	db	64
   714  00FF3B  20                 	db	32
   715  00FF3C  7C                 	db	124
   716  00FF3D  1C                 	db	28
   717  00FF3E  20                 	db	32
   718  00FF3F  40                 	db	64
   719  00FF40  20                 	db	32
   720  00FF41  1C                 	db	28
   721  00FF42  3C                 	db	60
   722  00FF43  40                 	db	64
   723  00FF44  30                 	db	48
   724  00FF45  40                 	db	64
   725  00FF46  3C                 	db	60
   726  00FF47  44                 	db	68
   727  00FF48  28                 	db	40
   728  00FF49  10                 	db	16
   729  00FF4A  28                 	db	40
   730  00FF4B  44                 	db	68
   731  00FF4C  4C                 	db	76
   732  00FF4D  90                 	db	144
   733  00FF4E  90                 	db	144
   734  00FF4F  90                 	db	144
   735  00FF50  7C                 	db	124
   736  00FF51  44                 	db	68
   737  00FF52  64                 	db	100
   738  00FF53  54                 	db	84
   739  00FF54  4C                 	db	76
   740  00FF55  44                 	db	68
   741  00FF56  00                 	db	0
   742  00FF57  08                 	db	8
   743  00FF58  36                 	db	54
   744  00FF59  41                 	db	65
   745  00FF5A  00                 	db	0
   746  00FF5B  00                 	db	0
   747  00FF5C  00                 	db	0
   748  00FF5D  77                 	db	119
   749  00FF5E  00                 	db	0
   750  00FF5F  00                 	db	0
   751  00FF60  00                 	db	0
   752  00FF61  41                 	db	65
   753  00FF62  36                 	db	54
   754  00FF63  08                 	db	8
   755  00FF64  00                 	db	0
   756  00FF65  02                 	db	2
   757  00FF66  01                 	db	1
   758  00FF67  02                 	db	2
   759  00FF68  04                 	db	4
   760  00FF69  02                 	db	2
   761  00FF6A                     __end_of_font2:
   762                           	opt stack 0
   763  00FF6A                     _dpowers:
   764                           	opt stack 0
   765  00FF6A  0001               	dw	1
   766  00FF6C  0000               	dw	0
   767  00FF6E  000A               	dw	10
   768  00FF70  0000               	dw	0
   769  00FF72  0064               	dw	100
   770  00FF74  0000               	dw	0
   771  00FF76  03E8               	dw	1000
   772  00FF78  0000               	dw	0
   773  00FF7A  2710               	dw	10000
   774  00FF7C  0000               	dw	0
   775  00FF7E  86A0               	dw	34464
   776  00FF80  0001               	dw	1
   777  00FF82  4240               	dw	16960
   778  00FF84  000F               	dw	15
   779  00FF86  9680               	dw	38528
   780  00FF88  0098               	dw	152
   781  00FF8A  E100               	dw	57600
   782  00FF8C  05F5               	dw	1525
   783  00FF8E  CA00               	dw	51712
   784  00FF90  3B9A               	dw	15258
   785  00FF92                     __end_of_dpowers:
   786                           	opt stack 0
   787  00FF92                     _hexpowers:
   788                           	opt stack 0
   789  00FF92  0001               	dw	1
   790  00FF94  0000               	dw	0
   791  00FF96  0010               	dw	16
   792  00FF98  0000               	dw	0
   793  00FF9A  0100               	dw	256
   794  00FF9C  0000               	dw	0
   795  00FF9E  1000               	dw	4096
   796  00FFA0  0000               	dw	0
   797  00FFA2  0000               	dw	0
   798  00FFA4  0001               	dw	1
   799  00FFA6  0000               	dw	0
   800  00FFA8  0010               	dw	16
   801  00FFAA  0000               	dw	0
   802  00FFAC  0100               	dw	256
   803  00FFAE  0000               	dw	0
   804  00FFB0  1000               	dw	4096
   805  00FFB2                     __end_of_hexpowers:
   806                           	opt stack 0
   807  0000                     _ADCON1	set	4033
   808  0000                     _CCP2CON	set	4026
   809  0000                     _CCPR2L	set	4027
   810  0000                     _INTCON2bits	set	4081
   811  0000                     _INTCONbits	set	4082
   812  0000                     _OSCCON	set	4051
   813  0000                     _PIE1bits	set	3997
   814  0000                     _PIR1bits	set	3998
   815  0000                     _PIR2bits	set	4001
   816  0000                     _PORTA	set	3968
   817  0000                     _PORTBbits	set	3969
   818  0000                     _PORTCbits	set	3970
   819  0000                     _PORTD	set	3971
   820  0000                     _PORTE	set	3972
   821  0000                     _PR2	set	4043
   822  0000                     _RCSTA	set	4011
   823  0000                     _RCSTAbits	set	4011
   824  0000                     _SPBRG	set	4015
   825  0000                     _SPBRGH	set	4016
   826  0000                     _SSPBUF	set	4041
   827  0000                     _SSPCON1	set	4038
   828  0000                     _SSPSTAT	set	4039
   829  0000                     _SSPSTATbits	set	4039
   830  0000                     _T0CON	set	4053
   831  0000                     _T0CONbits	set	4053
   832  0000                     _T1CON	set	4045
   833  0000                     _T1CONbits	set	4045
   834  0000                     _T2CON	set	4042
   835  0000                     _T3CON	set	4017
   836  0000                     _T3CONbits	set	4017
   837  0000                     _TMR0H	set	4055
   838  0000                     _TMR0L	set	4054
   839  0000                     _TMR1H	set	4047
   840  0000                     _TMR1L	set	4046
   841  0000                     _TMR3H	set	4019
   842  0000                     _TMR3L	set	4018
   843  0000                     _TRISA	set	3986
   844  0000                     _TRISB	set	3987
   845  0000                     _TRISC	set	3988
   846  0000                     _TRISCbits	set	3988
   847  0000                     _TRISD	set	3989
   848  0000                     _TRISE	set	3990
   849  0000                     _TXREG	set	4013
   850  0000                     _TXSTA	set	4012
   851  0000                     _TXSTAbits	set	4012
   852  0000                     _INT0IE	set	32660
   853  0000                     _TRMT	set	32097
   854  0000                     _nRBPU	set	32655
   855  00FFB2                     STR_1:
   856  00FFB2  4E                 	db	78	;'N'
   857  00FFB3  45                 	db	69	;'E'
   858  00FFB4  43                 	db	67	;'C'
   859  00FFB5  5F                 	db	95	;'_'
   860  00FFB6  43                 	db	67	;'C'
   861  00FFB7  6F                 	db	111	;'o'
   862  00FFB8  64                 	db	100	;'d'
   863  00FFB9  65                 	db	101	;'e'
   864  00FFBA  20                 	db	32
   865  00FFBB  3D                 	db	61	;'='
   866  00FFBC  20                 	db	32
   867  00FFBD  25                 	db	37
   868  00FFBE  30                 	db	48	;'0'
   869  00FFBF  38                 	db	56	;'8'
   870  00FFC0  6C                 	db	108	;'l'
   871  00FFC1  78                 	db	120	;'x'
   872  00FFC2  20                 	db	32
   873  00FFC3  25                 	db	37
   874  00FFC4  78                 	db	120	;'x'
   875  00FFC5  20                 	db	32
   876  00FFC6  00                 	db	0
   877  00FFC7                     STR_3:
   878  00FFC7  45                 	db	69	;'E'
   879  00FFC8  43                 	db	67	;'C'
   880  00FFC9  45                 	db	69	;'E'
   881  00FFCA  33                 	db	51	;'3'
   882  00FFCB  33                 	db	51	;'3'
   883  00FFCC  30                 	db	48	;'0'
   884  00FFCD  31                 	db	49	;'1'
   885  00FFCE  4C                 	db	76	;'L'
   886  00FFCF  20                 	db	32
   887  00FFD0  53                 	db	83	;'S'
   888  00FFD1  70                 	db	112	;'p'
   889  00FFD2  20                 	db	32
   890  00FFD3  32                 	db	50	;'2'
   891  00FFD4  32                 	db	50	;'2'
   892  00FFD5  2D                 	db	45
   893  00FFD6  53                 	db	83	;'S'
   894  00FFD7  33                 	db	51	;'3'
   895  00FFD8  00                 	db	0
   896  00FFD9                     STR_5:
   897  00FFD9  30                 	db	48	;'0'
   898  00FFDA  31                 	db	49	;'1'
   899  00FFDB  32                 	db	50	;'2'
   900  00FFDC  33                 	db	51	;'3'
   901  00FFDD  34                 	db	52	;'4'
   902  00FFDE  35                 	db	53	;'5'
   903  00FFDF  36                 	db	54	;'6'
   904  00FFE0  37                 	db	55	;'7'
   905  00FFE1  38                 	db	56	;'8'
   906  00FFE2  39                 	db	57	;'9'
   907  00FFE3  61                 	db	97	;'a'
   908  00FFE4  62                 	db	98	;'b'
   909  00FFE5  63                 	db	99	;'c'
   910  00FFE6  64                 	db	100	;'d'
   911  00FFE7  65                 	db	101	;'e'
   912  00FFE8  66                 	db	102	;'f'
   913  00FFE9  00                 	db	0
   914  00FFEA                     STR_2:
   915  00FFEA  46                 	db	70	;'F'
   916  00FFEB  6F                 	db	111	;'o'
   917  00FFEC  75                 	db	117	;'u'
   918  00FFED  6E                 	db	110	;'n'
   919  00FFEE  64                 	db	100	;'d'
   920  00FFEF  20                 	db	32
   921  00FFF0  3D                 	db	61	;'='
   922  00FFF1  20                 	db	32
   923  00FFF2  25                 	db	37
   924  00FFF3  64                 	db	100	;'d'
   925  00FFF4  0D                 	db	13
   926  00FFF5  0A                 	db	10
   927  00FFF6  00                 	db	0
   928  00FFF7                     STR_4:
   929  00FFF7  4C                 	db	76	;'L'
   930  00FFF8  41                 	db	65	;'A'
   931  00FFF9  42                 	db	66	;'B'
   932  00FFFA  20                 	db	32
   933  00FFFB  31                 	db	49	;'1'
   934  00FFFC  30                 	db	48	;'0'
   935  00FFFD  20                 	db	32
   936  00FFFE  00                 	db	0
   937                           
   938                           ; #config settings
   939  00FFFF  00                 	db	0	; dummy byte at the end
   940  0000                     
   941                           	psect	cinit
   942  001134                     __pcinit:
   943                           	opt stack 0
   944  001134                     start_initialization:
   945                           	opt stack 0
   946  001134                     __initialization:
   947                           	opt stack 0
   948                           
   949                           ; Clear objects allocated to BANK0 (31 bytes)
   950  001134  EE00  F0BF         	lfsr	0,__pbssBANK0
   951  001138  0E1F               	movlw	31
   952  00113A                     clear_0:
   953  00113A  6AEE               	clrf	postinc0,c
   954  00113C  06E8               	decf	wreg,f,c
   955  00113E  E1FD               	bnz	clear_0
   956                           
   957                           ; Clear objects allocated to COMRAM (19 bytes)
   958  001140  EE00  F05D         	lfsr	0,__pbssCOMRAM
   959  001144  0E13               	movlw	19
   960  001146                     clear_1:
   961  001146  6AEE               	clrf	postinc0,c
   962  001148  06E8               	decf	wreg,f,c
   963  00114A  E1FD               	bnz	clear_1
   964                           
   965                           ; Initialize objects allocated to BANK1 (126 bytes)
   966                           ; load TBLPTR registers with __pidataBANK1
   967  00114C  0EB6               	movlw	low __pidataBANK1
   968  00114E  6EF6               	movwf	tblptrl,c
   969  001150  0E11               	movlw	high __pidataBANK1
   970  001152  6EF7               	movwf	tblptrh,c
   971  001154  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   972  001156  6EF8               	movwf	tblptru,c
   973  001158  EE01  F000         	lfsr	0,__pdataBANK1
   974  00115C  EE10 F07E          	lfsr	1,126
   975  001160                     copy_data0:
   976  001160  0009               	tblrd		*+
   977  001162  CFF5 FFEE          	movff	tablat,postinc0
   978  001166  50E5               	movf	postdec1,w,c
   979  001168  50E1               	movf	fsr1l,w,c
   980  00116A  E1FA               	bnz	copy_data0
   981                           
   982                           ; Initialize objects allocated to BANK0 (63 bytes)
   983                           ; load TBLPTR registers with __pidataBANK0
   984  00116C  0ECC               	movlw	low __pidataBANK0
   985  00116E  6EF6               	movwf	tblptrl,c
   986  001170  0E14               	movlw	high __pidataBANK0
   987  001172  6EF7               	movwf	tblptrh,c
   988  001174  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   989  001176  6EF8               	movwf	tblptru,c
   990  001178  EE00  F080         	lfsr	0,__pdataBANK0
   991  00117C  EE10 F03F          	lfsr	1,63
   992  001180                     copy_data1:
   993  001180  0009               	tblrd		*+
   994  001182  CFF5 FFEE          	movff	tablat,postinc0
   995  001186  50E5               	movf	postdec1,w,c
   996  001188  50E1               	movf	fsr1l,w,c
   997  00118A  E1FA               	bnz	copy_data1
   998                           
   999                           ; Initialize objects allocated to COMRAM (22 bytes)
  1000                           ; load TBLPTR registers with __pidataCOMRAM
  1001  00118C  0E94               	movlw	low __pidataCOMRAM
  1002  00118E  6EF6               	movwf	tblptrl,c
  1003  001190  0E16               	movlw	high __pidataCOMRAM
  1004  001192  6EF7               	movwf	tblptrh,c
  1005  001194  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1006  001196  6EF8               	movwf	tblptru,c
  1007  001198  EE00  F047         	lfsr	0,__pdataCOMRAM
  1008  00119C  EE10 F016          	lfsr	1,22
  1009  0011A0                     copy_data2:
  1010  0011A0  0009               	tblrd		*+
  1011  0011A2  CFF5 FFEE          	movff	tablat,postinc0
  1012  0011A6  50E5               	movf	postdec1,w,c
  1013  0011A8  50E1               	movf	fsr1l,w,c
  1014  0011AA  E1FA               	bnz	copy_data2
  1015  0011AC                     end_of_initialization:
  1016                           	opt stack 0
  1017  0011AC                     __end_of__initialization:
  1018                           	opt stack 0
  1019  0011AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1020  0011AE  6EF8               	movwf	tblptru,c
  1021  0011B0  0100               	movlb	0
  1022  0011B2  EF2F  F002         	goto	_main	;jump to C main() function
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	bssCOMRAM
  1033  00005D                     __pbssCOMRAM:
  1034                           	opt stack 0
  1035  00005D                     _Nec_code:
  1036                           	opt stack 0
  1037  00005D                     	ds	4
  1038  000061                     _Time_Elapsed:
  1039                           	opt stack 0
  1040  000061                     	ds	2
  1041  000063                     _nbr:
  1042                           	opt stack 0
  1043  000063                     	ds	2
  1044  000065                     _nec_ok:
  1045                           	opt stack 0
  1046  000065                     	ds	2
  1047  000067                     _txt:
  1048                           	opt stack 0
  1049  000067                     	ds	2
  1050  000069                     _Nec_code1:
  1051                           	opt stack 0
  1052  000069                     	ds	1
  1053  00006A                     _Nec_state:
  1054                           	opt stack 0
  1055  00006A                     	ds	1
  1056  00006B                     __tft_type:
  1057                           	opt stack 0
  1058  00006B                     	ds	1
  1059  00006C                     _bit_count:
  1060                           	opt stack 0
  1061  00006C                     	ds	1
  1062  00006D                     _colstart:
  1063                           	opt stack 0
  1064  00006D                     	ds	1
  1065  00006E                     _i:
  1066                           	opt stack 0
  1067  00006E                     	ds	1
  1068  00006F                     _rowstart:
  1069                           	opt stack 0
  1070  00006F                     	ds	1
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1l	equ	0xFE1
  1079                           
  1080                           	psect	dataCOMRAM
  1081  000047                     __pdataCOMRAM:
  1082                           	opt stack 0
  1083  000047                     _array1:
  1084                           	opt stack 0
  1085  000047                     	ds	21
  1086  00005C                     _wrap:
  1087                           	opt stack 0
  1088  00005C                     	ds	1
  1089                           tblptru	equ	0xFF8
  1090                           tblptrh	equ	0xFF7
  1091                           tblptrl	equ	0xFF6
  1092                           tablat	equ	0xFF5
  1093                           postinc0	equ	0xFEE
  1094                           wreg	equ	0xFE8
  1095                           postdec1	equ	0xFE5
  1096                           fsr1l	equ	0xFE1
  1097                           
  1098                           	psect	bssBANK0
  1099  0000BF                     __pbssBANK0:
  1100                           	opt stack 0
  1101  0000BF                     _buffer:
  1102                           	opt stack 0
  1103  0000BF                     	ds	31
  1104                           tblptru	equ	0xFF8
  1105                           tblptrh	equ	0xFF7
  1106                           tblptrl	equ	0xFF6
  1107                           tablat	equ	0xFF5
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           postdec1	equ	0xFE5
  1111                           fsr1l	equ	0xFE1
  1112                           
  1113                           	psect	dataBANK0
  1114  000080                     __pdataBANK0:
  1115                           	opt stack 0
  1116  000080                     _D1:
  1117                           	opt stack 0
  1118  000080                     	ds	21
  1119  000095                     _D2:
  1120                           	opt stack 0
  1121  000095                     	ds	21
  1122  0000AA                     _D3:
  1123                           	opt stack 0
  1124  0000AA                     	ds	21
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           postdec1	equ	0xFE5
  1132                           fsr1l	equ	0xFE1
  1133                           
  1134                           	psect	dataBANK1
  1135  000100                     __pdataBANK1:
  1136                           	opt stack 0
  1137  000100                     _color:
  1138                           	opt stack 0
  1139  000100                     	ds	42
  1140  00012A                     _txt1:
  1141                           	opt stack 0
  1142  00012A                     	ds	84
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           
  1152                           	psect	cstackBANK0
  1153  0000DE                     __pcstackBANK0:
  1154                           	opt stack 0
  1155  0000DE                     drawtext@x:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x0
  1159  0000DE                     	ds	1
  1160  0000DF                     drawtext@textsize:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x1
  1164  0000DF                     	ds	2
  1165  0000E1                     drawtext@i:
  1166                           	opt stack 0
  1167                           
  1168                           ; 2 bytes @ 0x3
  1169  0000E1                     	ds	2
  1170  0000E3                     drawtext@cursor_y:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x5
  1174  0000E3                     	ds	1
  1175  0000E4                     drawtext@cursor_x:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x6
  1179  0000E4                     	ds	1
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           postinc0	equ	0xFEE
  1185                           wreg	equ	0xFE8
  1186                           postdec1	equ	0xFE5
  1187                           fsr1l	equ	0xFE1
  1188                           
  1189                           	psect	cstackCOMRAM
  1190  000001                     __pcstackCOMRAM:
  1191                           	opt stack 0
  1192  000001                     ??_INT0_isr:
  1193  000001                     
  1194                           ; 0 bytes @ 0x0
  1195  000001                     	ds	2
  1196  000003                     ??_chkisr:
  1197                           
  1198                           ; 0 bytes @ 0x2
  1199  000003                     	ds	14
  1200  000011                     ??_isdigit:
  1201  000011                     ?_strlen:
  1202                           	opt stack 0
  1203  000011                     ?___wmul:
  1204                           	opt stack 0
  1205  000011                     ?___lldiv:
  1206                           	opt stack 0
  1207  000011                     putch@c:
  1208                           	opt stack 0
  1209  000011                     spiwrite@x:
  1210                           	opt stack 0
  1211  000011                     OpenUSART@spbrg:
  1212                           	opt stack 0
  1213  000011                     ___wmul@multiplier:
  1214                           	opt stack 0
  1215  000011                     strcpy@to:
  1216                           	opt stack 0
  1217  000011                     strlen@s:
  1218                           	opt stack 0
  1219  000011                     ___lldiv@dividend:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x10
  1223  000011                     	ds	1
  1224  000012                     spiwrite@spidata:
  1225                           	opt stack 0
  1226  000012                     _isdigit$1657:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x11
  1230  000012                     	ds	1
  1231  000013                     ??_strlen:
  1232  000013                     write_command@cmd_:
  1233                           	opt stack 0
  1234  000013                     write_data@data_:
  1235                           	opt stack 0
  1236  000013                     OpenUSART@config:
  1237                           	opt stack 0
  1238  000013                     isdigit@c:
  1239                           	opt stack 0
  1240  000013                     ___wmul@multiplicand:
  1241                           	opt stack 0
  1242  000013                     strcpy@from:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x12
  1246  000013                     	ds	1
  1247  000014                     setAddrWindow@y0:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x13
  1251  000014                     	ds	1
  1252  000015                     setAddrWindow@x1:
  1253                           	opt stack 0
  1254  000015                     ___wmul@product:
  1255                           	opt stack 0
  1256  000015                     strcpy@cp:
  1257                           	opt stack 0
  1258  000015                     strlen@cp:
  1259                           	opt stack 0
  1260  000015                     ___lldiv@divisor:
  1261                           	opt stack 0
  1262                           
  1263                           ; 4 bytes @ 0x14
  1264  000015                     	ds	1
  1265  000016                     setAddrWindow@y1:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x15
  1269  000016                     	ds	1
  1270  000017                     setAddrWindow@x0:
  1271                           	opt stack 0
  1272  000017                     delay_ms@ms:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x16
  1276  000017                     	ds	1
  1277  000018                     drawPixel@y:
  1278                           	opt stack 0
  1279  000018                     drawFastVLine@y:
  1280                           	opt stack 0
  1281  000018                     fillRectangle@y:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x17
  1285  000018                     	ds	1
  1286  000019                     ??_delay_ms:
  1287  000019                     drawFastVLine@h:
  1288                           	opt stack 0
  1289  000019                     fillRectangle@w:
  1290                           	opt stack 0
  1291  000019                     drawPixel@color:
  1292                           	opt stack 0
  1293  000019                     ___lldiv@quotient:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0x18
  1297  000019                     	ds	1
  1298  00001A                     fillRectangle@h:
  1299                           	opt stack 0
  1300  00001A                     drawFastVLine@color:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x19
  1304  00001A                     	ds	1
  1305  00001B                     drawPixel@x:
  1306                           	opt stack 0
  1307  00001B                     delay_ms@count:
  1308                           	opt stack 0
  1309  00001B                     fillRectangle@color:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x1A
  1313  00001B                     	ds	1
  1314  00001C                     ??_drawFastVLine:
  1315  00001C                     drawCircle@x0:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x1B
  1319  00001C                     	ds	1
  1320  00001D                     ??_fillRectangle:
  1321  00001D                     ___lldiv@counter:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x1C
  1325  00001D                     	ds	1
  1326  00001E                     ?___llmod:
  1327                           	opt stack 0
  1328  00001E                     drawCircle@y0:
  1329                           	opt stack 0
  1330  00001E                     ___llmod@dividend:
  1331                           	opt stack 0
  1332                           
  1333                           ; 4 bytes @ 0x1D
  1334  00001E                     	ds	2
  1335  000020                     drawFastVLine@hi:
  1336                           	opt stack 0
  1337  000020                     drawCircle@r:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x1F
  1341  000020                     	ds	1
  1342  000021                     drawFastVLine@lo:
  1343                           	opt stack 0
  1344  000021                     fillRectangle@hi:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x20
  1348  000021                     	ds	1
  1349  000022                     drawFastVLine@x:
  1350                           	opt stack 0
  1351  000022                     fillRectangle@lo:
  1352                           	opt stack 0
  1353  000022                     drawCircle@color:
  1354                           	opt stack 0
  1355  000022                     ___llmod@divisor:
  1356                           	opt stack 0
  1357                           
  1358                           ; 4 bytes @ 0x21
  1359  000022                     	ds	1
  1360  000023                     fillRect@y:
  1361                           	opt stack 0
  1362  000023                     fillRectangle@x:
  1363                           	opt stack 0
  1364  000023                     fillCircleHelper@x0:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x22
  1368  000023                     	ds	1
  1369  000024                     ??_drawCircle:
  1370  000024                     fillRect@w:
  1371                           	opt stack 0
  1372  000024                     fillScreen@color:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x23
  1376  000024                     	ds	1
  1377  000025                     fillRect@h:
  1378                           	opt stack 0
  1379  000025                     fillCircleHelper@y0:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x24
  1383  000025                     	ds	1
  1384  000026                     ___llmod@counter:
  1385                           	opt stack 0
  1386  000026                     fillRect@color:
  1387                           	opt stack 0
  1388  000026                     drawCircle@ddF_x:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x25
  1392  000026                     	ds	1
  1393  000027                     ?_printf:
  1394                           	opt stack 0
  1395  000027                     fillCircleHelper@r:
  1396                           	opt stack 0
  1397  000027                     printf@f:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x26
  1401  000027                     	ds	1
  1402  000028                     ??_fillRect:
  1403  000028                     drawCircle@ddF_y:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x27
  1407  000028                     	ds	1
  1408  000029                     fillCircleHelper@cornername:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x28
  1412  000029                     	ds	1
  1413  00002A                     drawCircle@f:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x29
  1417  00002A                     	ds	1
  1418  00002B                     fillRect@x:
  1419                           	opt stack 0
  1420  00002B                     fillCircleHelper@delta:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x2A
  1424  00002B                     	ds	1
  1425  00002C                     fillRect@i:
  1426                           	opt stack 0
  1427  00002C                     drawCircle@x:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x2B
  1431  00002C                     	ds	1
  1432  00002D                     fillCircleHelper@color:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x2C
  1436  00002D                     	ds	1
  1437  00002E                     drawChar@y:
  1438                           	opt stack 0
  1439  00002E                     drawCircle@y:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x2D
  1443  00002E                     	ds	1
  1444  00002F                     ??_printf:
  1445  00002F                     ??_fillCircleHelper:
  1446  00002F                     drawChar@c:
  1447                           	opt stack 0
  1448                           
  1449                           ; 1 bytes @ 0x2E
  1450  00002F                     	ds	1
  1451  000030                     drawChar@color:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x2F
  1455  000030                     	ds	1
  1456  000031                     fillCircleHelper@ddF_x:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x30
  1460  000031                     	ds	1
  1461  000032                     drawChar@bg:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x31
  1465  000032                     	ds	1
  1466  000033                     printf@idx:
  1467                           	opt stack 0
  1468  000033                     fillCircleHelper@ddF_y:
  1469                           	opt stack 0
  1470                           
  1471                           ; 2 bytes @ 0x32
  1472  000033                     	ds	1
  1473  000034                     drawChar@size:
  1474                           	opt stack 0
  1475  000034                     printf@prec:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x33
  1479  000034                     	ds	1
  1480  000035                     drawChar@line:
  1481                           	opt stack 0
  1482  000035                     fillCircleHelper@f:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x34
  1486  000035                     	ds	1
  1487  000036                     drawChar@x:
  1488                           	opt stack 0
  1489  000036                     printf@ap:
  1490                           	opt stack 0
  1491                           
  1492                           ; 2 bytes @ 0x35
  1493  000036                     	ds	1
  1494  000037                     drawChar@j:
  1495                           	opt stack 0
  1496  000037                     fillCircleHelper@x:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x36
  1500  000037                     	ds	1
  1501  000038                     drawChar@i:
  1502                           	opt stack 0
  1503  000038                     printf@val:
  1504                           	opt stack 0
  1505                           
  1506                           ; 4 bytes @ 0x37
  1507  000038                     	ds	1
  1508  000039                     drawtext@y:
  1509                           	opt stack 0
  1510  000039                     fillCircleHelper@y:
  1511                           	opt stack 0
  1512                           
  1513                           ; 2 bytes @ 0x38
  1514  000039                     	ds	1
  1515  00003A                     drawtext@_text:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x39
  1519  00003A                     	ds	1
  1520  00003B                     fillCircle@x0:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x3A
  1524  00003B                     	ds	1
  1525  00003C                     drawtext@color:
  1526                           	opt stack 0
  1527  00003C                     printf@width:
  1528                           	opt stack 0
  1529                           
  1530                           ; 2 bytes @ 0x3B
  1531  00003C                     	ds	1
  1532  00003D                     fillCircle@y0:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x3C
  1536  00003D                     	ds	1
  1537  00003E                     printf@flag:
  1538                           	opt stack 0
  1539  00003E                     drawtext@bg:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x3D
  1543  00003E                     	ds	1
  1544  00003F                     printf@c:
  1545                           	opt stack 0
  1546  00003F                     fillCircle@r:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x3E
  1550  00003F                     	ds	1
  1551  000040                     drawtext@size:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0x3F
  1555  000040                     	ds	1
  1556  000041                     ??_drawtext:
  1557  000041                     fillCircle@color:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x40
  1561  000041                     	ds	2
  1562  000043                     
  1563                           ; 0 bytes @ 0x42
  1564  000043                     	ds	1
  1565  000044                     main@i:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0x43
  1569  000044                     	ds	2
  1570  000046                     main@found:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x45
  1574  000046                     	ds	1
  1575                           tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           postdec1	equ	0xFE5
  1582                           fsr1l	equ	0xFE1
  1583                           
  1584 ;;
  1585 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1586 ;;
  1587 ;; *************** function _main *****************
  1588 ;; Defined at:
  1589 ;;		line 229 in file "Lab10.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  i               2   67[COMRAM] int 
  1594 ;;  found           1   69[COMRAM] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;		None               void
  1597 ;; Registers used:
  1598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;Total ram usage:        4 bytes
  1609 ;; Hardware stack levels required when called:   11
  1610 ;; This function calls:
  1611 ;;		_Activate_Buzzer
  1612 ;;		_Deactivate_Buzzer
  1613 ;;		_Initialize_Screen
  1614 ;;		_Wait_Half_Second
  1615 ;;		_drawCircle
  1616 ;;		_drawtext
  1617 ;;		_fillCircle
  1618 ;;		_init_UART
  1619 ;;		_printf
  1620 ;; This function is called by:
  1621 ;;		Startup code after reset
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text0
  1626  00045E                     __ptext0:
  1627                           	opt stack 0
  1628  00045E                     _main:
  1629                           	opt stack 20
  1630                           
  1631                           ;Lab10.c: 231: init_UART();
  1632                           
  1633                           ;incstack = 0
  1634  00045E  EC55  F00B         	call	_init_UART	;wreg free
  1635                           
  1636                           ;Lab10.c: 232: OSCCON = 0x70;
  1637  000462  0E70               	movlw	112
  1638  000464  6ED3               	movwf	4051,c	;volatile
  1639                           
  1640                           ;Lab10.c: 233: nRBPU = 0;
  1641  000466  9EF1               	bcf	intcon2,7,c	;volatile
  1642                           
  1643                           ;Lab10.c: 234: TRISA = 0x00;
  1644  000468  0E00               	movlw	0
  1645  00046A  6E92               	movwf	3986,c	;volatile
  1646                           
  1647                           ;Lab10.c: 235: TRISB = 0x01;
  1648  00046C  0E01               	movlw	1
  1649  00046E  6E93               	movwf	3987,c	;volatile
  1650                           
  1651                           ;Lab10.c: 236: TRISC = 0x00;
  1652  000470  0E00               	movlw	0
  1653  000472  6E94               	movwf	3988,c	;volatile
  1654                           
  1655                           ;Lab10.c: 237: TRISD = 0x00;
  1656  000474  0E00               	movlw	0
  1657  000476  6E95               	movwf	3989,c	;volatile
  1658                           
  1659                           ;Lab10.c: 238: TRISE = 0x00;
  1660  000478  0E00               	movlw	0
  1661  00047A  6E96               	movwf	3990,c	;volatile
  1662                           
  1663                           ;Lab10.c: 239: ADCON1 = 0x0F;
  1664  00047C  0E0F               	movlw	15
  1665  00047E  6EC1               	movwf	4033,c	;volatile
  1666                           
  1667                           ;Lab10.c: 240: Initialize_Screen();
  1668  000480  ECC9  F007         	call	_Initialize_Screen	;wreg free
  1669                           
  1670                           ;Lab10.c: 241: INTCONbits.INT0IF = 0;
  1671  000484  92F2               	bcf	intcon,1,c	;volatile
  1672                           
  1673                           ;Lab10.c: 242: INTCON2bits.INTEDG0 = 0;
  1674  000486  9CF1               	bcf	intcon2,6,c	;volatile
  1675                           
  1676                           ;Lab10.c: 243: INTCONbits.INT0IE = 1;
  1677  000488  88F2               	bsf	intcon,4,c	;volatile
  1678                           
  1679                           ;Lab10.c: 244: TMR1H = 0;
  1680  00048A  0E00               	movlw	0
  1681  00048C  6ECF               	movwf	4047,c	;volatile
  1682                           
  1683                           ;Lab10.c: 245: TMR1L = 0;
  1684  00048E  0E00               	movlw	0
  1685  000490  6ECE               	movwf	4046,c	;volatile
  1686                           
  1687                           ;Lab10.c: 246: PIR1bits.TMR1IF = 0;
  1688  000492  909E               	bcf	3998,0,c	;volatile
  1689                           
  1690                           ;Lab10.c: 247: PIE1bits.TMR1IE = 1;
  1691  000494  809D               	bsf	3997,0,c	;volatile
  1692                           
  1693                           ;Lab10.c: 248: INTCONbits.PEIE = 1;
  1694  000496  8CF2               	bsf	intcon,6,c	;volatile
  1695                           
  1696                           ;Lab10.c: 249: INTCONbits.GIE = 1;
  1697  000498  8EF2               	bsf	intcon,7,c	;volatile
  1698                           
  1699                           ;Lab10.c: 250: nec_ok = 0;
  1700  00049A  0E00               	movlw	0
  1701  00049C  6E66               	movwf	_nec_ok+1,c
  1702  00049E  0E00               	movlw	0
  1703  0004A0  6E65               	movwf	_nec_ok,c
  1704                           
  1705                           ;Lab10.c: 251: Nec_code = 0x0;
  1706  0004A2  0E00               	movlw	0
  1707  0004A4  6E5D               	movwf	_Nec_code,c
  1708  0004A6  0E00               	movlw	0
  1709  0004A8  6E5E               	movwf	_Nec_code+1,c
  1710  0004AA  0E00               	movlw	0
  1711  0004AC  6E5F               	movwf	_Nec_code+2,c
  1712  0004AE  0E00               	movlw	0
  1713  0004B0  6E60               	movwf	_Nec_code+3,c
  1714  0004B2  D000               	goto	l3981
  1715  0004B4                     l3981:
  1716                           
  1717                           ;Lab10.c: 254: {
  1718                           ;Lab10.c: 255: if (nec_ok == 1)
  1719  0004B4  0465               	decf	_nec_ok,w,c
  1720  0004B6  1066               	iorwf	_nec_ok+1,w,c
  1721  0004B8  A4D8               	btfss	status,2,c
  1722  0004BA  D7FC               	goto	l3981
  1723                           
  1724                           ;Lab10.c: 256: {
  1725                           ;Lab10.c: 257: nec_ok = 0;
  1726  0004BC  0E00               	movlw	0
  1727  0004BE  6E66               	movwf	_nec_ok+1,c
  1728  0004C0  0E00               	movlw	0
  1729  0004C2  6E65               	movwf	_nec_ok,c
  1730                           
  1731                           ;Lab10.c: 259: Nec_code1 = (char) ((Nec_code >> 8));
  1732  0004C4  C05E  F069         	movff	_Nec_code+1,_Nec_code1
  1733                           
  1734                           ;Lab10.c: 260: INTCONbits.INT0IE = 1;
  1735  0004C8  88F2               	bsf	intcon,4,c	;volatile
  1736                           
  1737                           ;Lab10.c: 261: INTCON2bits.INTEDG0 = 0;
  1738  0004CA  9CF1               	bcf	intcon2,6,c	;volatile
  1739                           
  1740                           ;Lab10.c: 263: char found = 0xff;
  1741  0004CC  6846               	setf	main@found,c
  1742                           
  1743                           ;Lab10.c: 267: for(int i = 0;i < 21;i++)
  1744  0004CE  0E00               	movlw	0
  1745  0004D0  6E45               	movwf	main@i+1,c
  1746  0004D2  0E00               	movlw	0
  1747  0004D4  6E44               	movwf	main@i,c
  1748  0004D6                     l3993:
  1749  0004D6  BE45               	btfsc	main@i+1,7,c
  1750  0004D8  D008               	goto	l3997
  1751  0004DA  5045               	movf	main@i+1,w,c
  1752  0004DC  E117               	bnz	l4005
  1753  0004DE  0E15               	movlw	21
  1754  0004E0  5C44               	subwf	main@i,w,c
  1755  0004E2  B0D8               	btfsc	status,0,c
  1756  0004E4  D013               	goto	l4005
  1757  0004E6  D001               	goto	l3997
  1758  0004E8  D011               	goto	l4005
  1759  0004EA                     l3997:
  1760                           
  1761                           ;Lab10.c: 268: {
  1762                           ;Lab10.c: 269: if(array1[i] == Nec_code1)
  1763  0004EA  0E47               	movlw	low _array1
  1764  0004EC  2444               	addwf	main@i,w,c
  1765  0004EE  6ED9               	movwf	fsr2l,c
  1766  0004F0  0E00               	movlw	high _array1
  1767  0004F2  2045               	addwfc	main@i+1,w,c
  1768  0004F4  6EDA               	movwf	fsr2h,c
  1769  0004F6  5069               	movf	_Nec_code1,w,c
  1770  0004F8  18DE               	xorwf	postinc2,w,c
  1771  0004FA  A4D8               	btfss	status,2,c
  1772  0004FC  D003               	goto	l4001
  1773                           
  1774                           ;Lab10.c: 270: {
  1775                           ;Lab10.c: 271: found = i;
  1776  0004FE  C044  F046         	movff	main@i,main@found
  1777                           
  1778                           ;Lab10.c: 272: break;
  1779  000502  D004               	goto	l4005
  1780  000504                     l4001:
  1781  000504  4A44               	infsnz	main@i,f,c
  1782  000506  2A45               	incf	main@i+1,f,c
  1783  000508  D7E6               	goto	l3993
  1784  00050A  D000               	goto	l4005
  1785  00050C                     l4005:
  1786                           
  1787                           ;Lab10.c: 273: }
  1788                           ;Lab10.c: 274: }
  1789                           ;Lab10.c: 276: printf ("NEC_Code = %08lx %x ", Nec_code, Nec_code1);
  1790  00050C  0EB2               	movlw	low STR_1
  1791  00050E  6E27               	movwf	printf@f,c
  1792  000510  0EFF               	movlw	high STR_1
  1793  000512  6E28               	movwf	printf@f+1,c
  1794  000514  C05D  F029         	movff	_Nec_code,?_printf+2
  1795  000518  C05E  F02A         	movff	_Nec_code+1,?_printf+3
  1796  00051C  C05F  F02B         	movff	_Nec_code+2,?_printf+4
  1797  000520  C060  F02C         	movff	_Nec_code+3,?_printf+5
  1798  000524  C069  F02D         	movff	_Nec_code1,?_printf+6
  1799  000528  6A2E               	clrf	?_printf+7,c
  1800  00052A  EC0E  F000         	call	_printf	;wreg free
  1801                           
  1802                           ;Lab10.c: 277: printf ("Found = %d\r\n", found);
  1803  00052E  0EEA               	movlw	low STR_2
  1804  000530  6E27               	movwf	printf@f,c
  1805  000532  0EFF               	movlw	high STR_2
  1806  000534  6E28               	movwf	printf@f+1,c
  1807  000536  C046  F029         	movff	main@found,?_printf+2
  1808  00053A  6A2A               	clrf	?_printf+3,c
  1809  00053C  EC0E  F000         	call	_printf	;wreg free
  1810                           
  1811                           ;Lab10.c: 278: if (found != 0xff)
  1812  000540  2846               	incf	main@found,w,c
  1813  000542  B4D8               	btfsc	status,2,c
  1814  000544  D7B7               	goto	l3981
  1815                           
  1816                           ;Lab10.c: 279: {
  1817                           ;Lab10.c: 280: PORTA = D1[found];
  1818  000546  5046               	movf	main@found,w,c
  1819  000548  0D01               	mullw	1
  1820  00054A  0E80               	movlw	low _D1
  1821  00054C  24F3               	addwf	prodl,w,c
  1822  00054E  6ED9               	movwf	fsr2l,c
  1823  000550  0E00               	movlw	high _D1
  1824  000552  20F4               	addwfc	prodh,w,c
  1825  000554  6EDA               	movwf	fsr2h,c
  1826  000556  50DF               	movf	indf2,w,c
  1827  000558  6E80               	movwf	3968,c	;volatile
  1828                           
  1829                           ;Lab10.c: 281: PORTD = D2[found];
  1830  00055A  5046               	movf	main@found,w,c
  1831  00055C  0D01               	mullw	1
  1832  00055E  0E95               	movlw	low _D2
  1833  000560  24F3               	addwf	prodl,w,c
  1834  000562  6ED9               	movwf	fsr2l,c
  1835  000564  0E00               	movlw	high _D2
  1836  000566  20F4               	addwfc	prodh,w,c
  1837  000568  6EDA               	movwf	fsr2h,c
  1838  00056A  50DF               	movf	indf2,w,c
  1839  00056C  6E83               	movwf	3971,c	;volatile
  1840                           
  1841                           ;Lab10.c: 282: PORTE = D3[found];
  1842  00056E  5046               	movf	main@found,w,c
  1843  000570  0D01               	mullw	1
  1844  000572  0EAA               	movlw	low _D3
  1845  000574  24F3               	addwf	prodl,w,c
  1846  000576  6ED9               	movwf	fsr2l,c
  1847  000578  0E00               	movlw	high _D3
  1848  00057A  20F4               	addwfc	prodh,w,c
  1849  00057C  6EDA               	movwf	fsr2h,c
  1850  00057E  50DF               	movf	indf2,w,c
  1851  000580  6E84               	movwf	3972,c	;volatile
  1852                           
  1853                           ;Lab10.c: 284: fillCircle(60, 80, 20, color[found]);
  1854  000582  0E00               	movlw	0
  1855  000584  6E3C               	movwf	fillCircle@x0+1,c
  1856  000586  0E3C               	movlw	60
  1857  000588  6E3B               	movwf	fillCircle@x0,c
  1858  00058A  0E00               	movlw	0
  1859  00058C  6E3E               	movwf	fillCircle@y0+1,c
  1860  00058E  0E50               	movlw	80
  1861  000590  6E3D               	movwf	fillCircle@y0,c
  1862  000592  0E00               	movlw	0
  1863  000594  6E40               	movwf	fillCircle@r+1,c
  1864  000596  0E14               	movlw	20
  1865  000598  6E3F               	movwf	fillCircle@r,c
  1866  00059A  5046               	movf	main@found,w,c
  1867  00059C  0D02               	mullw	2
  1868  00059E  0E00               	movlw	low _color
  1869  0005A0  24F3               	addwf	prodl,w,c
  1870  0005A2  6ED9               	movwf	fsr2l,c
  1871  0005A4  0E01               	movlw	high _color
  1872  0005A6  20F4               	addwfc	prodh,w,c
  1873  0005A8  6EDA               	movwf	fsr2h,c
  1874  0005AA  CFDE F041          	movff	postinc2,fillCircle@color
  1875  0005AE  CFDD F042          	movff	postdec2,fillCircle@color+1
  1876  0005B2  ECC8  F009         	call	_fillCircle	;wreg free
  1877                           
  1878                           ;Lab10.c: 285: drawCircle(60, 80, 20, 0xFFFF);
  1879  0005B6  0E00               	movlw	0
  1880  0005B8  6E1D               	movwf	drawCircle@x0+1,c
  1881  0005BA  0E3C               	movlw	60
  1882  0005BC  6E1C               	movwf	drawCircle@x0,c
  1883  0005BE  0E00               	movlw	0
  1884  0005C0  6E1F               	movwf	drawCircle@y0+1,c
  1885  0005C2  0E50               	movlw	80
  1886  0005C4  6E1E               	movwf	drawCircle@y0,c
  1887  0005C6  0E00               	movlw	0
  1888  0005C8  6E21               	movwf	drawCircle@r+1,c
  1889  0005CA  0E14               	movlw	20
  1890  0005CC  6E20               	movwf	drawCircle@r,c
  1891  0005CE  0EFF               	movlw	255
  1892  0005D0  6E23               	movwf	drawCircle@color+1,c
  1893  0005D2  6822               	setf	drawCircle@color,c
  1894  0005D4  EC0D  F003         	call	_drawCircle	;wreg free
  1895                           
  1896                           ;Lab10.c: 286: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1897  0005D8  0E4D               	movlw	77
  1898  0005DA  6E39               	movwf	drawtext@y,c
  1899  0005DC  5046               	movf	main@found,w,c
  1900  0005DE  0D04               	mullw	4
  1901  0005E0  0E2A               	movlw	low _txt1
  1902  0005E2  24F3               	addwf	prodl,w,c
  1903  0005E4  6E3A               	movwf	drawtext@_text,c
  1904  0005E6  0E01               	movlw	high _txt1
  1905  0005E8  20F4               	addwfc	prodh,w,c
  1906  0005EA  6E3B               	movwf	drawtext@_text+1,c
  1907  0005EC  0EFF               	movlw	255
  1908  0005EE  6E3D               	movwf	drawtext@color+1,c
  1909  0005F0  683C               	setf	drawtext@color,c
  1910  0005F2  0E00               	movlw	0
  1911  0005F4  6E3F               	movwf	drawtext@bg+1,c
  1912  0005F6  0E00               	movlw	0
  1913  0005F8  6E3E               	movwf	drawtext@bg,c
  1914  0005FA  0E01               	movlw	1
  1915  0005FC  6E40               	movwf	drawtext@size,c
  1916  0005FE  0E34               	movlw	52
  1917  000600  EC5D  F006         	call	_drawtext
  1918                           
  1919                           ;Lab10.c: 288: PORTBbits.RB7 = 1;
  1920  000604  8E81               	bsf	3969,7,c	;volatile
  1921                           
  1922                           ;Lab10.c: 290: Activate_Buzzer();
  1923  000606  EC72  F00B         	call	_Activate_Buzzer	;wreg free
  1924                           
  1925                           ;Lab10.c: 291: Wait_Half_Second();
  1926  00060A  EC3D  F00B         	call	_Wait_Half_Second	;wreg free
  1927                           
  1928                           ;Lab10.c: 292: PORTBbits.RB7 = 0;
  1929  00060E  9E81               	bcf	3969,7,c	;volatile
  1930                           
  1931                           ;Lab10.c: 294: Deactivate_Buzzer();
  1932  000610  EC98  F00B         	call	_Deactivate_Buzzer	;wreg free
  1933  000614  D74F               	goto	l3981
  1934  000616  EF0C  F000         	goto	start
  1935  00061A                     __end_of_main:
  1936                           	opt stack 0
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           prodh	equ	0xFF4
  1942                           prodl	equ	0xFF3
  1943                           intcon	equ	0xFF2
  1944                           intcon2	equ	0xFF1
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           postdec1	equ	0xFE5
  1948                           fsr1l	equ	0xFE1
  1949                           indf2	equ	0xFDF
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _printf *****************
  1957 ;; Defined at:
  1958 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;  f               2   38[COMRAM] PTR const unsigned char 
  1961 ;;		 -> STR_2(13), STR_1(21), 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  idx             1   50[COMRAM] unsigned char 
  1964 ;;  val             4   55[COMRAM] unsigned long 
  1965 ;;  tmpval          4    0        struct .
  1966 ;;  cp              3    0        PTR const unsigned char 
  1967 ;;  width           2   59[COMRAM] int 
  1968 ;;  ap              2   53[COMRAM] PTR void [1]
  1969 ;;		 -> ?_printf(2), 
  1970 ;;  prec            2   51[COMRAM] int 
  1971 ;;  len             2    0        unsigned int 
  1972 ;;  c               1   62[COMRAM] char 
  1973 ;;  flag            1   61[COMRAM] unsigned char 
  1974 ;; Return value:  Size  Location     Type
  1975 ;;                  2   38[COMRAM] int 
  1976 ;; Registers used:
  1977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1978 ;; Tracked objects:
  1979 ;;		On entry : 0/0
  1980 ;;		On exit  : 0/0
  1981 ;;		Unchanged: 0/0
  1982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1983 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;Total ram usage:       25 bytes
  1988 ;; Hardware stack levels used:    1
  1989 ;; Hardware stack levels required when called:    4
  1990 ;; This function calls:
  1991 ;;		___lldiv
  1992 ;;		___llmod
  1993 ;;		___wmul
  1994 ;;		_isdigit
  1995 ;;		_putch
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text1
  2002  00001C                     __ptext1:
  2003                           	opt stack 0
  2004  00001C                     _printf:
  2005                           	opt stack 26
  2006                           
  2007                           ;doprnt.c: 466: va_list ap;
  2008                           ;doprnt.c: 499: signed char c;
  2009                           ;doprnt.c: 501: int width;
  2010                           ;doprnt.c: 504: int prec;
  2011                           ;doprnt.c: 508: unsigned char flag;
  2012                           ;doprnt.c: 523: union {
  2013                           ;doprnt.c: 524: unsigned long vd;
  2014                           ;doprnt.c: 525: double integ;
  2015                           ;doprnt.c: 526: } tmpval;
  2016                           ;doprnt.c: 528: unsigned long val;
  2017                           ;doprnt.c: 529: unsigned len;
  2018                           ;doprnt.c: 530: const char * cp;
  2019                           ;doprnt.c: 533: *ap = __va_start();
  2020                           
  2021                           ;incstack = 0
  2022  00001C  0E29               	movlw	low (?_printf+2)
  2023  00001E  6E36               	movwf	printf@ap,c
  2024  000020  0E00               	movlw	high (?_printf+2)
  2025  000022  6E37               	movwf	printf@ap+1,c
  2026                           
  2027                           ;doprnt.c: 536: while(c = *f++) {
  2028  000024  D20D               	goto	l3863
  2029  000026                     l3725:
  2030                           
  2031                           ;doprnt.c: 538: if(c != '%')
  2032  000026  0E25               	movlw	37
  2033  000028  183F               	xorwf	printf@c,w,c
  2034  00002A  B4D8               	btfsc	status,2,c
  2035  00002C  D004               	goto	l3729
  2036                           
  2037                           ;doprnt.c: 540: {
  2038                           ;doprnt.c: 541: (putch(c) );
  2039  00002E  503F               	movf	printf@c,w,c
  2040  000030  EC8B  F00B         	call	_putch
  2041                           
  2042                           ;doprnt.c: 542: continue;
  2043  000034  D205               	goto	l3863
  2044  000036                     l3729:
  2045                           
  2046                           ;doprnt.c: 543: }
  2047                           ;doprnt.c: 546: width = 0;
  2048  000036  0E00               	movlw	0
  2049  000038  6E3D               	movwf	printf@width+1,c
  2050  00003A  0E00               	movlw	0
  2051  00003C  6E3C               	movwf	printf@width,c
  2052                           
  2053                           ;doprnt.c: 548: flag = 0;
  2054  00003E  0E00               	movlw	0
  2055  000040  6E3E               	movwf	printf@flag,c
  2056                           
  2057                           ;doprnt.c: 551: switch(*f) {
  2058                           
  2059                           ;doprnt.c: 550: for(;;) {
  2060  000042  D005               	goto	l3735
  2061  000044                     l3731:
  2062                           
  2063                           ;doprnt.c: 580: flag |= 0x04;
  2064  000044  843E               	bsf	printf@flag,2,c
  2065                           
  2066                           ;doprnt.c: 581: f++;
  2067  000046  4A27               	infsnz	printf@f,f,c
  2068  000048  2A28               	incf	printf@f+1,f,c
  2069                           
  2070                           ;doprnt.c: 582: continue;
  2071  00004A  D001               	goto	l3735
  2072                           
  2073                           ;doprnt.c: 584: }
  2074  00004C  D00B               	goto	l3737
  2075  00004E                     l3735:
  2076  00004E  C027  FFF6         	movff	printf@f,tblptrl
  2077  000052  C028  FFF7         	movff	printf@f+1,tblptrh
  2078  000056                     	if	0	;tblptru may be non-zero
  2079  000056                     	endif
  2080  000056                     	if	0	;tblptru may be non-zero
  2081  000056                     	endif
  2082  000056  0008               	tblrd		*
  2083  000058  50F5               	movf	tablat,w,c
  2084                           
  2085                           ; Switch size 1, requested type "space"
  2086                           ; Number of cases is 1, Range of values is 48 to 48
  2087                           ; switch strategies available:
  2088                           ; Name         Instructions Cycles
  2089                           ; simple_byte            4     3 (average)
  2090                           ;	Chosen strategy is simple_byte
  2091  00005A  0A30               	xorlw	48	; case 48
  2092  00005C  B4D8               	btfsc	status,2,c
  2093  00005E  D7F2               	goto	l3731
  2094                           
  2095                           ;doprnt.c: 585: break;
  2096  000060  D001               	goto	l3737
  2097                           
  2098                           ;doprnt.c: 586: }
  2099  000062  D7F5               	goto	l3735
  2100  000064                     l3737:
  2101                           
  2102                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2103  000064  C027  FFF6         	movff	printf@f,tblptrl
  2104  000068  C028  FFF7         	movff	printf@f+1,tblptrh
  2105  00006C                     	if	0	;tblptru may be non-zero
  2106  00006C                     	endif
  2107  00006C                     	if	0	;tblptru may be non-zero
  2108  00006C                     	endif
  2109  00006C  0008               	tblrd		*
  2110  00006E  50F5               	movf	tablat,w,c
  2111  000070  EC1E  F00B         	call	_isdigit
  2112  000074  A0D8               	btfss	status,0,c
  2113  000076  D03D               	goto	l3755
  2114                           
  2115                           ;doprnt.c: 598: width = 0;
  2116  000078  0E00               	movlw	0
  2117  00007A  6E3D               	movwf	printf@width+1,c
  2118  00007C  0E00               	movlw	0
  2119  00007E  6E3C               	movwf	printf@width,c
  2120  000080  D000               	goto	l3741
  2121  000082                     l3741:
  2122                           
  2123                           ;doprnt.c: 600: width *= 10;
  2124  000082  C03C  F011         	movff	printf@width,___wmul@multiplier
  2125  000086  C03D  F012         	movff	printf@width+1,___wmul@multiplier+1
  2126  00008A  0E00               	movlw	0
  2127  00008C  6E14               	movwf	___wmul@multiplicand+1,c
  2128  00008E  0E0A               	movlw	10
  2129  000090  6E13               	movwf	___wmul@multiplicand,c
  2130  000092  EC0A  F00B         	call	___wmul	;wreg free
  2131  000096  C011  F03C         	movff	?___wmul,printf@width
  2132  00009A  C012  F03D         	movff	?___wmul+1,printf@width+1
  2133                           
  2134                           ;doprnt.c: 601: width += *f++ - '0';
  2135  00009E  0ED0               	movlw	208
  2136  0000A0  6E2F               	movwf	??_printf& (0+255),c
  2137  0000A2  0EFF               	movlw	255
  2138  0000A4  6E30               	movwf	(??_printf+1)& (0+255),c
  2139  0000A6  C027  FFF6         	movff	printf@f,tblptrl
  2140  0000AA  C028  FFF7         	movff	printf@f+1,tblptrh
  2141  0000AE                     	if	0	;tblptru may be non-zero
  2142  0000AE                     	endif
  2143  0000AE                     	if	0	;tblptru may be non-zero
  2144  0000AE                     	endif
  2145  0000AE  0008               	tblrd		*
  2146  0000B0  50F5               	movf	tablat,w,c
  2147  0000B2  6E31               	movwf	(??_printf+2)& (0+255),c
  2148  0000B4  6A32               	clrf	(??_printf+3)& (0+255),c
  2149  0000B6  502F               	movf	??_printf,w,c
  2150  0000B8  2631               	addwf	??_printf+2,f,c
  2151  0000BA  5030               	movf	??_printf+1,w,c
  2152  0000BC  2232               	addwfc	??_printf+3,f,c
  2153  0000BE  5031               	movf	??_printf+2,w,c
  2154  0000C0  263C               	addwf	printf@width,f,c
  2155  0000C2  5032               	movf	??_printf+3,w,c
  2156  0000C4  223D               	addwfc	printf@width+1,f,c
  2157  0000C6  4A27               	infsnz	printf@f,f,c
  2158  0000C8  2A28               	incf	printf@f+1,f,c
  2159                           
  2160                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2161  0000CA  C027  FFF6         	movff	printf@f,tblptrl
  2162  0000CE  C028  FFF7         	movff	printf@f+1,tblptrh
  2163  0000D2                     	if	0	;tblptru may be non-zero
  2164  0000D2                     	endif
  2165  0000D2                     	if	0	;tblptru may be non-zero
  2166  0000D2                     	endif
  2167  0000D2  0008               	tblrd		*
  2168  0000D4  50F5               	movf	tablat,w,c
  2169  0000D6  EC1E  F00B         	call	_isdigit
  2170  0000DA  A0D8               	btfss	status,0,c
  2171  0000DC  D00A               	goto	l3755
  2172  0000DE  D7D1               	goto	l3741
  2173                           
  2174                           ;doprnt.c: 635: switch(c = *f++) {
  2175                           
  2176                           ;doprnt.c: 608: }
  2177                           ;doprnt.c: 633: loop:
  2178  0000E0  D008               	goto	l3755
  2179                           
  2180                           ;doprnt.c: 638: goto alldone;
  2181                           
  2182                           ;doprnt.c: 637: case 0:
  2183  0000E2  D1BC               	goto	l469
  2184  0000E4                     l3749:
  2185                           
  2186                           ;doprnt.c: 643: flag |= 0x10;
  2187  0000E4  883E               	bsf	printf@flag,4,c
  2188                           
  2189                           ;doprnt.c: 644: goto loop;
  2190  0000E6  D005               	goto	l3755
  2191                           
  2192                           ;doprnt.c: 698: case 'i':
  2193                           ;doprnt.c: 699: break;
  2194                           
  2195                           ;doprnt.c: 697: case 'd':
  2196  0000E8  D01E               	goto	l428
  2197  0000EA                     l3751:
  2198                           
  2199                           ;doprnt.c: 721: flag |= 0x80;
  2200  0000EA  8E3E               	bsf	printf@flag,7,c
  2201                           
  2202                           ;doprnt.c: 723: break;
  2203  0000EC  D01C               	goto	l428
  2204                           
  2205                           ;doprnt.c: 813: continue;
  2206                           
  2207                           ;doprnt.c: 802: default:
  2208  0000EE  D1A8               	goto	l3863
  2209                           
  2210                           ;doprnt.c: 822: }
  2211  0000F0  D01A               	goto	l428
  2212  0000F2                     l3755:
  2213  0000F2  C027  FFF6         	movff	printf@f,tblptrl
  2214  0000F6  C028  FFF7         	movff	printf@f+1,tblptrh
  2215  0000FA  4A27               	infsnz	printf@f,f,c
  2216  0000FC  2A28               	incf	printf@f+1,f,c
  2217  0000FE                     	if	0	;tblptru may be non-zero
  2218  0000FE                     	endif
  2219  0000FE                     	if	0	;tblptru may be non-zero
  2220  0000FE                     	endif
  2221  0000FE  0008               	tblrd		*
  2222  000100  CFF5 F03F          	movff	tablat,printf@c
  2223  000104  503F               	movf	printf@c,w,c
  2224                           
  2225                           ; Switch size 1, requested type "space"
  2226                           ; Number of cases is 5, Range of values is 0 to 120
  2227                           ; switch strategies available:
  2228                           ; Name         Instructions Cycles
  2229                           ; simple_byte           16     9 (average)
  2230                           ;	Chosen strategy is simple_byte
  2231  000106  0A00               	xorlw	0	; case 0
  2232  000108  B4D8               	btfsc	status,2,c
  2233  00010A  D1A8               	goto	l469
  2234  00010C  0A64               	xorlw	100	; case 100
  2235  00010E  B4D8               	btfsc	status,2,c
  2236  000110  D00A               	goto	l428
  2237  000112  0A0D               	xorlw	13	; case 105
  2238  000114  B4D8               	btfsc	status,2,c
  2239  000116  D007               	goto	l428
  2240  000118  0A05               	xorlw	5	; case 108
  2241  00011A  B4D8               	btfsc	status,2,c
  2242  00011C  D7E3               	goto	l3749
  2243  00011E  0A14               	xorlw	20	; case 120
  2244  000120  B4D8               	btfsc	status,2,c
  2245  000122  D7E3               	goto	l3751
  2246  000124  D18D               	goto	l3863
  2247  000126                     l428:
  2248                           
  2249                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2250  000126  BE3E               	btfsc	printf@flag,7,c
  2251  000128  D02F               	goto	l431
  2252                           
  2253                           ;doprnt.c: 1253: {
  2254                           ;doprnt.c: 1255: if(flag & 0x10)
  2255  00012A  A83E               	btfss	printf@flag,4,c
  2256  00012C  D00E               	goto	l3763
  2257                           
  2258                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2259  00012E  C036  FFD9         	movff	printf@ap,fsr2l
  2260  000132  C037  FFDA         	movff	printf@ap+1,fsr2h
  2261  000136  CFDE F038          	movff	postinc2,printf@val
  2262  00013A  CFDE F039          	movff	postinc2,printf@val+1
  2263  00013E  CFDE F03A          	movff	postinc2,printf@val+2
  2264  000142  CFDE F03B          	movff	postinc2,printf@val+3
  2265  000146  0E04               	movlw	4
  2266  000148  D00E               	goto	L1
  2267  00014A                     l3763:
  2268                           
  2269                           ;doprnt.c: 1257: else
  2270                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2271  00014A  C036  FFD9         	movff	printf@ap,fsr2l
  2272  00014E  C037  FFDA         	movff	printf@ap+1,fsr2h
  2273  000152  CFDE F038          	movff	postinc2,printf@val
  2274  000156  CFDD F039          	movff	postdec2,printf@val+1
  2275  00015A  0E00               	movlw	0
  2276  00015C  BE39               	btfsc	printf@val+1,7,c
  2277  00015E  0EFF               	movlw	-1
  2278  000160  6E3A               	movwf	printf@val+2,c
  2279  000162  6E3B               	movwf	printf@val+3,c
  2280  000164  0E02               	movlw	2
  2281  000166                     L1:
  2282  000166  2636               	addwf	printf@ap,f,c
  2283  000168  0E00               	movlw	0
  2284  00016A  2237               	addwfc	printf@ap+1,f,c
  2285  00016C  D000               	goto	l3767
  2286  00016E                     l3767:
  2287                           
  2288                           ;doprnt.c: 1261: if((long)val < 0) {
  2289  00016E  AE3B               	btfss	printf@val+3,7,c
  2290  000170  D074               	goto	l3811
  2291                           
  2292                           ;doprnt.c: 1262: flag |= 0x03;
  2293  000172  0E03               	movlw	3
  2294  000174  123E               	iorwf	printf@flag,f,c
  2295                           
  2296                           ;doprnt.c: 1263: val = -val;
  2297  000176  1E3B               	comf	printf@val+3,f,c
  2298  000178  1E3A               	comf	printf@val+2,f,c
  2299  00017A  1E39               	comf	printf@val+1,f,c
  2300  00017C  6C38               	negf	printf@val,c
  2301  00017E  0E00               	movlw	0
  2302  000180  2239               	addwfc	printf@val+1,f,c
  2303  000182  223A               	addwfc	printf@val+2,f,c
  2304  000184  223B               	addwfc	printf@val+3,f,c
  2305                           
  2306                           ;doprnt.c: 1264: }
  2307                           ;doprnt.c: 1266: }
  2308  000186  D069               	goto	l3811
  2309  000188                     l431:
  2310                           
  2311                           ;doprnt.c: 1268: else
  2312                           ;doprnt.c: 1273: {
  2313                           ;doprnt.c: 1281: if(flag & 0x10)
  2314  000188  A83E               	btfss	printf@flag,4,c
  2315  00018A  D00E               	goto	l3777
  2316                           
  2317                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2318  00018C  C036  FFD9         	movff	printf@ap,fsr2l
  2319  000190  C037  FFDA         	movff	printf@ap+1,fsr2h
  2320  000194  CFDE F038          	movff	postinc2,printf@val
  2321  000198  CFDE F039          	movff	postinc2,printf@val+1
  2322  00019C  CFDE F03A          	movff	postinc2,printf@val+2
  2323  0001A0  CFDE F03B          	movff	postinc2,printf@val+3
  2324  0001A4  0E04               	movlw	4
  2325  0001A6  D00F               	goto	L2
  2326  0001A8                     l3777:
  2327                           
  2328                           ;doprnt.c: 1283: else
  2329                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2330  0001A8  C036  FFD9         	movff	printf@ap,fsr2l
  2331  0001AC  C037  FFDA         	movff	printf@ap+1,fsr2h
  2332  0001B0  CFDE F02F          	movff	postinc2,??_printf
  2333  0001B4  CFDD F030          	movff	postdec2,??_printf+1
  2334  0001B8  C02F  F038         	movff	??_printf,printf@val
  2335  0001BC  C030  F039         	movff	??_printf+1,printf@val+1
  2336  0001C0  6A3A               	clrf	printf@val+2,c
  2337  0001C2  6A3B               	clrf	printf@val+3,c
  2338  0001C4  0E02               	movlw	2
  2339  0001C6                     L2:
  2340  0001C6  2636               	addwf	printf@ap,f,c
  2341  0001C8  0E00               	movlw	0
  2342  0001CA  2237               	addwfc	printf@ap+1,f,c
  2343                           
  2344                           ;doprnt.c: 1287: }
  2345                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2346  0001CC  D046               	goto	l3811
  2347  0001CE                     l3781:
  2348                           
  2349                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2350  0001CE  0E01               	movlw	1
  2351  0001D0  6E3F               	movwf	printf@c,c
  2352  0001D2                     l3783:
  2353  0001D2  0E0A               	movlw	10
  2354  0001D4  183F               	xorwf	printf@c,w,c
  2355  0001D6  B4D8               	btfsc	status,2,c
  2356  0001D8  D049               	goto	l3813
  2357  0001DA  D001               	goto	l3787
  2358  0001DC  D047               	goto	l3813
  2359  0001DE                     l3787:
  2360                           
  2361                           ;doprnt.c: 1306: if(val < dpowers[c])
  2362  0001DE  503F               	movf	printf@c,w,c
  2363  0001E0  0D04               	mullw	4
  2364  0001E2  0E6A               	movlw	low _dpowers
  2365  0001E4  24F3               	addwf	prodl,w,c
  2366  0001E6  6EF6               	movwf	tblptrl,c
  2367  0001E8  0EFF               	movlw	high _dpowers
  2368  0001EA  20F4               	addwfc	prodh,w,c
  2369  0001EC  6EF7               	movwf	tblptrh,c
  2370  0001EE                     	if	0	;There are less than 3 active tblptr bytes
  2371  0001EE                     	endif
  2372  0001EE  0009               	tblrd		*+
  2373  0001F0  50F5               	movf	tablat,w,c
  2374  0001F2  5C38               	subwf	printf@val,w,c
  2375  0001F4  0009               	tblrd		*+
  2376  0001F6  50F5               	movf	tablat,w,c
  2377  0001F8  5839               	subwfb	printf@val+1,w,c
  2378  0001FA  0009               	tblrd		*+
  2379  0001FC  50F5               	movf	tablat,w,c
  2380  0001FE  583A               	subwfb	printf@val+2,w,c
  2381  000200  0009               	tblrd		*+
  2382  000202  50F5               	movf	tablat,w,c
  2383  000204  583B               	subwfb	printf@val+3,w,c
  2384  000206  A0D8               	btfss	status,0,c
  2385  000208  D031               	goto	l3813
  2386  00020A  D001               	goto	l3791
  2387                           
  2388                           ;doprnt.c: 1307: break;
  2389  00020C  D02F               	goto	l3813
  2390  00020E                     l3791:
  2391  00020E  2A3F               	incf	printf@c,f,c
  2392  000210  D7E0               	goto	l3783
  2393                           
  2394                           ;doprnt.c: 1309: break;
  2395  000212  D02C               	goto	l3813
  2396  000214                     l3795:
  2397                           
  2398                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2399  000214  0E01               	movlw	1
  2400  000216  6E3F               	movwf	printf@c,c
  2401  000218                     l3797:
  2402  000218  0E08               	movlw	8
  2403  00021A  183F               	xorwf	printf@c,w,c
  2404  00021C  B4D8               	btfsc	status,2,c
  2405  00021E  D026               	goto	l3813
  2406  000220  D001               	goto	l3801
  2407  000222  D024               	goto	l3813
  2408  000224                     l3801:
  2409                           
  2410                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2411  000224  503F               	movf	printf@c,w,c
  2412  000226  0D04               	mullw	4
  2413  000228  0E92               	movlw	low _hexpowers
  2414  00022A  24F3               	addwf	prodl,w,c
  2415  00022C  6EF6               	movwf	tblptrl,c
  2416  00022E  0EFF               	movlw	high _hexpowers
  2417  000230  20F4               	addwfc	prodh,w,c
  2418  000232  6EF7               	movwf	tblptrh,c
  2419  000234                     	if	0	;There are less than 3 active tblptr bytes
  2420  000234                     	endif
  2421  000234  0009               	tblrd		*+
  2422  000236  50F5               	movf	tablat,w,c
  2423  000238  5C38               	subwf	printf@val,w,c
  2424  00023A  0009               	tblrd		*+
  2425  00023C  50F5               	movf	tablat,w,c
  2426  00023E  5839               	subwfb	printf@val+1,w,c
  2427  000240  0009               	tblrd		*+
  2428  000242  50F5               	movf	tablat,w,c
  2429  000244  583A               	subwfb	printf@val+2,w,c
  2430  000246  0009               	tblrd		*+
  2431  000248  50F5               	movf	tablat,w,c
  2432  00024A  583B               	subwfb	printf@val+3,w,c
  2433  00024C  A0D8               	btfss	status,0,c
  2434  00024E  D00E               	goto	l3813
  2435  000250  D001               	goto	l3805
  2436                           
  2437                           ;doprnt.c: 1318: break;
  2438  000252  D00C               	goto	l3813
  2439  000254                     l3805:
  2440  000254  2A3F               	incf	printf@c,f,c
  2441  000256  D7E0               	goto	l3797
  2442                           
  2443                           ;doprnt.c: 1336: }
  2444                           
  2445                           ;doprnt.c: 1320: break;
  2446  000258  D009               	goto	l3813
  2447  00025A                     l3811:
  2448  00025A  503E               	movf	printf@flag,w,c
  2449  00025C  0B80               	andlw	128
  2450                           
  2451                           ; Switch size 1, requested type "space"
  2452                           ; Number of cases is 2, Range of values is 0 to 128
  2453                           ; switch strategies available:
  2454                           ; Name         Instructions Cycles
  2455                           ; simple_byte            7     4 (average)
  2456                           ;	Chosen strategy is simple_byte
  2457  00025E  0A00               	xorlw	0	; case 0
  2458  000260  B4D8               	btfsc	status,2,c
  2459  000262  D7B5               	goto	l3781
  2460  000264  0A80               	xorlw	128	; case 128
  2461  000266  B4D8               	btfsc	status,2,c
  2462  000268  D7D5               	goto	l3795
  2463  00026A  D000               	goto	l3813
  2464  00026C                     l3813:
  2465                           
  2466                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2467  00026C  503C               	movf	printf@width,w,c
  2468  00026E  103D               	iorwf	printf@width+1,w,c
  2469  000270  B4D8               	btfsc	status,2,c
  2470  000272  D00A               	goto	l3819
  2471  000274  C03E  F02F         	movff	printf@flag,??_printf
  2472  000278  0E03               	movlw	3
  2473  00027A  162F               	andwf	??_printf,f,c
  2474  00027C  B4D8               	btfsc	status,2,c
  2475  00027E  D004               	goto	l3819
  2476                           
  2477                           ;doprnt.c: 1346: width--;
  2478  000280  063C               	decf	printf@width,f,c
  2479  000282  A0D8               	btfss	status,0,c
  2480  000284  063D               	decf	printf@width+1,f,c
  2481  000286  D000               	goto	l3819
  2482  000288                     l3819:
  2483                           
  2484                           ;doprnt.c: 1381: if(width > c)
  2485  000288  0E80               	movlw	128
  2486  00028A  BE3F               	btfsc	printf@c,7,c
  2487  00028C  0E7F               	movlw	127
  2488  00028E  6E2F               	movwf	??_printf& (0+255),c
  2489  000290  503C               	movf	printf@width,w,c
  2490  000292  5C3F               	subwf	printf@c,w,c
  2491  000294  503D               	movf	printf@width+1,w,c
  2492  000296  0A80               	xorlw	128
  2493  000298  582F               	subwfb	??_printf& (0+255),w,c
  2494  00029A  B0D8               	btfsc	status,0,c
  2495  00029C  D007               	goto	l3823
  2496                           
  2497                           ;doprnt.c: 1382: width -= c;
  2498  00029E  503F               	movf	printf@c,w,c
  2499  0002A0  5E3C               	subwf	printf@width,f,c
  2500  0002A2  0E00               	movlw	0
  2501  0002A4  BE3F               	btfsc	printf@c,7,c
  2502  0002A6  0EFF               	movlw	255
  2503  0002A8  5A3D               	subwfb	printf@width+1,f,c
  2504  0002AA  D005               	goto	l3825
  2505  0002AC                     l3823:
  2506                           
  2507                           ;doprnt.c: 1383: else
  2508                           ;doprnt.c: 1384: width = 0;
  2509  0002AC  0E00               	movlw	0
  2510  0002AE  6E3D               	movwf	printf@width+1,c
  2511  0002B0  0E00               	movlw	0
  2512  0002B2  6E3C               	movwf	printf@width,c
  2513  0002B4  D000               	goto	l3825
  2514  0002B6                     l3825:
  2515                           
  2516                           ;doprnt.c: 1387: if(flag & 0x04) {
  2517  0002B6  A43E               	btfss	printf@flag,2,c
  2518  0002B8  D01A               	goto	l3837
  2519                           
  2520                           ;doprnt.c: 1392: if(flag & 0x03)
  2521  0002BA  C03E  F02F         	movff	printf@flag,??_printf
  2522  0002BE  0E03               	movlw	3
  2523  0002C0  162F               	andwf	??_printf,f,c
  2524  0002C2  B4D8               	btfsc	status,2,c
  2525  0002C4  D004               	goto	l3831
  2526                           
  2527                           ;doprnt.c: 1393: (putch('-') );
  2528  0002C6  0E2D               	movlw	45
  2529  0002C8  EC8B  F00B         	call	_putch
  2530  0002CC  D000               	goto	l3831
  2531  0002CE                     l3831:
  2532                           
  2533                           ;doprnt.c: 1415: if(width)
  2534  0002CE  503C               	movf	printf@width,w,c
  2535  0002D0  103D               	iorwf	printf@width+1,w,c
  2536  0002D2  B4D8               	btfsc	status,2,c
  2537  0002D4  D026               	goto	l3847
  2538  0002D6                     l3833:
  2539                           
  2540                           ;doprnt.c: 1417: (putch('0') );
  2541  0002D6  0E30               	movlw	48
  2542  0002D8  EC8B  F00B         	call	_putch
  2543                           
  2544                           ;doprnt.c: 1418: while(--width);
  2545  0002DC  063C               	decf	printf@width,f,c
  2546  0002DE  A0D8               	btfss	status,0,c
  2547  0002E0  063D               	decf	printf@width+1,f,c
  2548  0002E2  503C               	movf	printf@width,w,c
  2549  0002E4  103D               	iorwf	printf@width+1,w,c
  2550  0002E6  B4D8               	btfsc	status,2,c
  2551  0002E8  D01C               	goto	l3847
  2552  0002EA  D7F5               	goto	l3833
  2553                           
  2554                           ;doprnt.c: 1420: } else
  2555  0002EC  D01A               	goto	l3847
  2556  0002EE                     l3837:
  2557                           
  2558                           ;doprnt.c: 1422: {
  2559                           ;doprnt.c: 1424: if(width
  2560                           ;doprnt.c: 1428: )
  2561  0002EE  503C               	movf	printf@width,w,c
  2562  0002F0  103D               	iorwf	printf@width+1,w,c
  2563  0002F2  B4D8               	btfsc	status,2,c
  2564  0002F4  D00C               	goto	l3843
  2565  0002F6                     l3839:
  2566                           
  2567                           ;doprnt.c: 1430: (putch(' ') );
  2568  0002F6  0E20               	movlw	32
  2569  0002F8  EC8B  F00B         	call	_putch
  2570                           
  2571                           ;doprnt.c: 1431: while(--width);
  2572  0002FC  063C               	decf	printf@width,f,c
  2573  0002FE  A0D8               	btfss	status,0,c
  2574  000300  063D               	decf	printf@width+1,f,c
  2575  000302  503C               	movf	printf@width,w,c
  2576  000304  103D               	iorwf	printf@width+1,w,c
  2577  000306  B4D8               	btfsc	status,2,c
  2578  000308  D002               	goto	l3843
  2579  00030A  D7F5               	goto	l3839
  2580  00030C  D000               	goto	l3843
  2581  00030E                     l3843:
  2582                           
  2583                           ;doprnt.c: 1438: if(flag & 0x03)
  2584  00030E  C03E  F02F         	movff	printf@flag,??_printf
  2585  000312  0E03               	movlw	3
  2586  000314  162F               	andwf	??_printf,f,c
  2587  000316  B4D8               	btfsc	status,2,c
  2588  000318  D004               	goto	l3847
  2589                           
  2590                           ;doprnt.c: 1439: (putch('-') );
  2591  00031A  0E2D               	movlw	45
  2592  00031C  EC8B  F00B         	call	_putch
  2593  000320  D000               	goto	l3847
  2594  000322                     l3847:
  2595                           
  2596                           ;doprnt.c: 1469: }
  2597                           ;doprnt.c: 1472: prec = c;
  2598  000322  503F               	movf	printf@c,w,c
  2599  000324  6E34               	movwf	printf@prec,c
  2600  000326  6A35               	clrf	printf@prec+1,c
  2601  000328  BE34               	btfsc	printf@prec,7,c
  2602  00032A  0635               	decf	printf@prec+1,f,c
  2603                           
  2604                           ;doprnt.c: 1474: while(prec--) {
  2605  00032C  D07F               	goto	l3861
  2606                           
  2607                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2608  00032E  D071               	goto	l3857
  2609  000330                     l3849:
  2610                           
  2611                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2612  000330  C034  F02F         	movff	printf@prec,??_printf
  2613  000334  C035  F030         	movff	printf@prec+1,??_printf+1
  2614  000338  90D8               	bcf	status,0,c
  2615  00033A  362F               	rlcf	??_printf,f,c
  2616  00033C  3630               	rlcf	??_printf+1,f,c
  2617  00033E  90D8               	bcf	status,0,c
  2618  000340  362F               	rlcf	??_printf,f,c
  2619  000342  3630               	rlcf	??_printf+1,f,c
  2620  000344  0E6A               	movlw	low _dpowers
  2621  000346  242F               	addwf	??_printf,w,c
  2622  000348  6EF6               	movwf	tblptrl,c
  2623  00034A  0EFF               	movlw	high _dpowers
  2624  00034C  2030               	addwfc	??_printf+1,w,c
  2625  00034E  6EF7               	movwf	tblptrh,c
  2626  000350                     	if	0	;There are less than 3 active tblptr bytes
  2627  000350                     	endif
  2628  000350  0009               	tblrd		*+
  2629  000352  CFF5 F015          	movff	tablat,___lldiv@divisor
  2630  000356  0009               	tblrd		*+
  2631  000358  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2632  00035C  0009               	tblrd		*+
  2633  00035E  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2634  000362  000A               	tblrd		*-
  2635  000364  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2636  000368  C038  F011         	movff	printf@val,___lldiv@dividend
  2637  00036C  C039  F012         	movff	printf@val+1,___lldiv@dividend+1
  2638  000370  C03A  F013         	movff	printf@val+2,___lldiv@dividend+2
  2639  000374  C03B  F014         	movff	printf@val+3,___lldiv@dividend+3
  2640  000378  EC10  F008         	call	___lldiv	;wreg free
  2641  00037C  C011  F01E         	movff	?___lldiv,___llmod@dividend
  2642  000380  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  2643  000384  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  2644  000388  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  2645  00038C  0E0A               	movlw	10
  2646  00038E  6E22               	movwf	___llmod@divisor,c
  2647  000390  0E00               	movlw	0
  2648  000392  6E23               	movwf	___llmod@divisor+1,c
  2649  000394  0E00               	movlw	0
  2650  000396  6E24               	movwf	___llmod@divisor+2,c
  2651  000398  0E00               	movlw	0
  2652  00039A  6E25               	movwf	___llmod@divisor+3,c
  2653  00039C  EC58  F009         	call	___llmod	;wreg free
  2654  0003A0  501E               	movf	?___llmod,w,c
  2655  0003A2  0F30               	addlw	48
  2656  0003A4  6E3F               	movwf	printf@c,c
  2657                           
  2658                           ;doprnt.c: 1491: break;
  2659  0003A6  D03E               	goto	l3859
  2660  0003A8                     l3851:
  2661                           
  2662                           ;doprnt.c: 1499: {
  2663                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2664  0003A8  C038  F011         	movff	printf@val,___lldiv@dividend
  2665  0003AC  C039  F012         	movff	printf@val+1,___lldiv@dividend+1
  2666  0003B0  C03A  F013         	movff	printf@val+2,___lldiv@dividend+2
  2667  0003B4  C03B  F014         	movff	printf@val+3,___lldiv@dividend+3
  2668  0003B8  C034  F02F         	movff	printf@prec,??_printf
  2669  0003BC  C035  F030         	movff	printf@prec+1,??_printf+1
  2670  0003C0  90D8               	bcf	status,0,c
  2671  0003C2  362F               	rlcf	??_printf,f,c
  2672  0003C4  3630               	rlcf	??_printf+1,f,c
  2673  0003C6  90D8               	bcf	status,0,c
  2674  0003C8  362F               	rlcf	??_printf,f,c
  2675  0003CA  3630               	rlcf	??_printf+1,f,c
  2676  0003CC  0E92               	movlw	low _hexpowers
  2677  0003CE  242F               	addwf	??_printf,w,c
  2678  0003D0  6EF6               	movwf	tblptrl,c
  2679  0003D2  0EFF               	movlw	high _hexpowers
  2680  0003D4  2030               	addwfc	??_printf+1,w,c
  2681  0003D6  6EF7               	movwf	tblptrh,c
  2682  0003D8                     	if	0	;There are less than 3 active tblptr bytes
  2683  0003D8                     	endif
  2684  0003D8  0009               	tblrd		*+
  2685  0003DA  CFF5 F015          	movff	tablat,___lldiv@divisor
  2686  0003DE  0009               	tblrd		*+
  2687  0003E0  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  2688  0003E4  0009               	tblrd		*+
  2689  0003E6  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  2690  0003EA  000A               	tblrd		*-
  2691  0003EC  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  2692  0003F0  EC10  F008         	call	___lldiv	;wreg free
  2693  0003F4  5011               	movf	?___lldiv,w,c
  2694  0003F6  0B0F               	andlw	15
  2695  0003F8  6E33               	movwf	printf@idx,c
  2696                           
  2697                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2698  0003FA  5033               	movf	printf@idx,w,c
  2699  0003FC  0D01               	mullw	1
  2700  0003FE  0ED9               	movlw	low STR_5
  2701  000400  24F3               	addwf	prodl,w,c
  2702  000402  6EF6               	movwf	tblptrl,c
  2703  000404  0EFF               	movlw	high STR_5
  2704  000406  20F4               	addwfc	prodh,w,c
  2705  000408  6EF7               	movwf	tblptrh,c
  2706  00040A                     	if	0	;There are less than 3 active tblptr bytes
  2707  00040A                     	endif
  2708  00040A  0008               	tblrd		*
  2709  00040C  CFF5 F03F          	movff	tablat,printf@c
  2710                           
  2711                           ;doprnt.c: 1523: }
  2712                           
  2713                           ;doprnt.c: 1508: }
  2714                           ;doprnt.c: 1510: break;
  2715  000410  D009               	goto	l3859
  2716  000412                     l3857:
  2717  000412  503E               	movf	printf@flag,w,c
  2718  000414  0B80               	andlw	128
  2719                           
  2720                           ; Switch size 1, requested type "space"
  2721                           ; Number of cases is 2, Range of values is 0 to 128
  2722                           ; switch strategies available:
  2723                           ; Name         Instructions Cycles
  2724                           ; simple_byte            7     4 (average)
  2725                           ;	Chosen strategy is simple_byte
  2726  000416  0A00               	xorlw	0	; case 0
  2727  000418  B4D8               	btfsc	status,2,c
  2728  00041A  D78A               	goto	l3849
  2729  00041C  0A80               	xorlw	128	; case 128
  2730  00041E  B4D8               	btfsc	status,2,c
  2731  000420  D7C3               	goto	l3851
  2732  000422  D000               	goto	l3859
  2733  000424                     l3859:
  2734                           
  2735                           ;doprnt.c: 1524: (putch(c) );
  2736  000424  503F               	movf	printf@c,w,c
  2737  000426  EC8B  F00B         	call	_putch
  2738  00042A  D000               	goto	l3861
  2739  00042C                     l3861:
  2740  00042C  0634               	decf	printf@prec,f,c
  2741  00042E  A0D8               	btfss	status,0,c
  2742  000430  0635               	decf	printf@prec+1,f,c
  2743  000432  2834               	incf	printf@prec,w,c
  2744  000434  E1EE               	bnz	l3857
  2745  000436  2835               	incf	printf@prec+1,w,c
  2746  000438  B4D8               	btfsc	status,2,c
  2747  00043A  D002               	goto	l3863
  2748  00043C  D7EA               	goto	l3857
  2749  00043E  D000               	goto	l3863
  2750  000440                     l3863:
  2751  000440  C027  FFF6         	movff	printf@f,tblptrl
  2752  000444  C028  FFF7         	movff	printf@f+1,tblptrh
  2753  000448  4A27               	infsnz	printf@f,f,c
  2754  00044A  2A28               	incf	printf@f+1,f,c
  2755  00044C                     	if	0	;tblptru may be non-zero
  2756  00044C                     	endif
  2757  00044C                     	if	0	;tblptru may be non-zero
  2758  00044C                     	endif
  2759  00044C  0008               	tblrd		*
  2760  00044E  CFF5 F03F          	movff	tablat,printf@c
  2761  000452  503F               	movf	printf@c,w,c
  2762  000454  B4D8               	btfsc	status,2,c
  2763  000456  D002               	goto	l469
  2764  000458  D5E6               	goto	l3725
  2765  00045A  D000               	goto	l469
  2766  00045C                     l469:
  2767  00045C  0012               	return		;funcret
  2768  00045E                     __end_of_printf:
  2769                           	opt stack 0
  2770                           tblptru	equ	0xFF8
  2771                           tblptrh	equ	0xFF7
  2772                           tblptrl	equ	0xFF6
  2773                           tablat	equ	0xFF5
  2774                           prodh	equ	0xFF4
  2775                           prodl	equ	0xFF3
  2776                           intcon	equ	0xFF2
  2777                           intcon2	equ	0xFF1
  2778                           postinc0	equ	0xFEE
  2779                           wreg	equ	0xFE8
  2780                           postdec1	equ	0xFE5
  2781                           fsr1l	equ	0xFE1
  2782                           indf2	equ	0xFDF
  2783                           postinc2	equ	0xFDE
  2784                           postdec2	equ	0xFDD
  2785                           fsr2h	equ	0xFDA
  2786                           fsr2l	equ	0xFD9
  2787                           status	equ	0xFD8
  2788                           
  2789 ;; *************** function _putch *****************
  2790 ;; Defined at:
  2791 ;;		line 74 in file "Lab10.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  c               1    wreg     unsigned char 
  2794 ;; Auto vars:     Size  Location     Type
  2795 ;;  c               1   16[COMRAM] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;		None               void
  2798 ;; Registers used:
  2799 ;;		wreg
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;Total ram usage:        1 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:    3
  2812 ;; This function calls:
  2813 ;;		Nothing
  2814 ;; This function is called by:
  2815 ;;		_printf
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text2
  2820  001716                     __ptext2:
  2821                           	opt stack 0
  2822  001716                     _putch:
  2823                           	opt stack 26
  2824                           
  2825                           ;incstack = 0
  2826                           ;putch@c stored from wreg
  2827  001716  6E11               	movwf	putch@c,c
  2828                           
  2829                           ;Lab10.c: 76: while (!TRMT);
  2830  001718  D000               	goto	l121
  2831  00171A                     l121:
  2832  00171A  A2AC               	btfss	4012,1,c	;volatile
  2833  00171C  D7FE               	goto	l121
  2834                           
  2835                           ;Lab10.c: 77: TXREG = c;
  2836  00171E  C011  FFAD         	movff	putch@c,4013	;volatile
  2837  001722  0012               	return		;funcret
  2838  001724                     __end_of_putch:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           prodh	equ	0xFF4
  2845                           prodl	equ	0xFF3
  2846                           intcon	equ	0xFF2
  2847                           intcon2	equ	0xFF1
  2848                           postinc0	equ	0xFEE
  2849                           wreg	equ	0xFE8
  2850                           postdec1	equ	0xFE5
  2851                           fsr1l	equ	0xFE1
  2852                           indf2	equ	0xFDF
  2853                           postinc2	equ	0xFDE
  2854                           postdec2	equ	0xFDD
  2855                           fsr2h	equ	0xFDA
  2856                           fsr2l	equ	0xFD9
  2857                           status	equ	0xFD8
  2858                           
  2859 ;; *************** function _isdigit *****************
  2860 ;; Defined at:
  2861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;  c               1    wreg     unsigned char 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  c               1   18[COMRAM] unsigned char 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;		None               void
  2868 ;; Registers used:
  2869 ;;		wreg, status,2, status,0
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;Total ram usage:        3 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    3
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_printf
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text3
  2890  00163C                     __ptext3:
  2891                           	opt stack 0
  2892  00163C                     _isdigit:
  2893                           	opt stack 26
  2894                           
  2895                           ;incstack = 0
  2896                           ;isdigit@c stored from wreg
  2897  00163C  6E13               	movwf	isdigit@c,c
  2898  00163E  0E00               	movlw	0
  2899  001640  6E12               	movwf	_isdigit$1657,c
  2900  001642  0E3A               	movlw	58
  2901  001644  6013               	cpfslt	isdigit@c,c
  2902  001646  D006               	goto	l2717
  2903  001648  0E2F               	movlw	47
  2904  00164A  6413               	cpfsgt	isdigit@c,c
  2905  00164C  D003               	goto	l2717
  2906  00164E  0E01               	movlw	1
  2907  001650  6E12               	movwf	_isdigit$1657,c
  2908  001652  D000               	goto	l2717
  2909  001654                     l2717:
  2910  001654  C012  F011         	movff	_isdigit$1657,??_isdigit
  2911  001658  3011               	rrcf	??_isdigit,w,c
  2912  00165A  D000               	goto	l936
  2913  00165C                     l936:
  2914  00165C  0012               	return		;funcret
  2915  00165E                     __end_of_isdigit:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           prodh	equ	0xFF4
  2922                           prodl	equ	0xFF3
  2923                           intcon	equ	0xFF2
  2924                           intcon2	equ	0xFF1
  2925                           postinc0	equ	0xFEE
  2926                           wreg	equ	0xFE8
  2927                           postdec1	equ	0xFE5
  2928                           fsr1l	equ	0xFE1
  2929                           indf2	equ	0xFDF
  2930                           postinc2	equ	0xFDE
  2931                           postdec2	equ	0xFDD
  2932                           fsr2h	equ	0xFDA
  2933                           fsr2l	equ	0xFD9
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function ___llmod *****************
  2937 ;; Defined at:
  2938 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  dividend        4   29[COMRAM] unsigned long 
  2941 ;;  divisor         4   33[COMRAM] unsigned long 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  counter         1   37[COMRAM] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  4   29[COMRAM] unsigned long 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2953 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;Total ram usage:        9 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    3
  2960 ;; This function calls:
  2961 ;;		Nothing
  2962 ;; This function is called by:
  2963 ;;		_printf
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text4
  2968  0012B0                     __ptext4:
  2969                           	opt stack 0
  2970  0012B0                     ___llmod:
  2971                           	opt stack 26
  2972                           
  2973                           ;incstack = 0
  2974  0012B0  5022               	movf	___llmod@divisor,w,c
  2975  0012B2  1023               	iorwf	___llmod@divisor+1,w,c
  2976  0012B4  1024               	iorwf	___llmod@divisor+2,w,c
  2977  0012B6  1025               	iorwf	___llmod@divisor+3,w,c
  2978  0012B8  B4D8               	btfsc	status,2,c
  2979  0012BA  D029               	goto	l975
  2980  0012BC  0E01               	movlw	1
  2981  0012BE  6E26               	movwf	___llmod@counter,c
  2982  0012C0  D007               	goto	l2749
  2983  0012C2                     l2747:
  2984  0012C2  90D8               	bcf	status,0,c
  2985  0012C4  3622               	rlcf	___llmod@divisor,f,c
  2986  0012C6  3623               	rlcf	___llmod@divisor+1,f,c
  2987  0012C8  3624               	rlcf	___llmod@divisor+2,f,c
  2988  0012CA  3625               	rlcf	___llmod@divisor+3,f,c
  2989  0012CC  2A26               	incf	___llmod@counter,f,c
  2990  0012CE  D000               	goto	l2749
  2991  0012D0                     l2749:
  2992  0012D0  BE25               	btfsc	___llmod@divisor+3,7,c
  2993  0012D2  D002               	goto	l2751
  2994  0012D4  D7F6               	goto	l2747
  2995  0012D6  D000               	goto	l2751
  2996  0012D8                     l2751:
  2997  0012D8  5022               	movf	___llmod@divisor,w,c
  2998  0012DA  5C1E               	subwf	___llmod@dividend,w,c
  2999  0012DC  5023               	movf	___llmod@divisor+1,w,c
  3000  0012DE  581F               	subwfb	___llmod@dividend+1,w,c
  3001  0012E0  5024               	movf	___llmod@divisor+2,w,c
  3002  0012E2  5820               	subwfb	___llmod@dividend+2,w,c
  3003  0012E4  5025               	movf	___llmod@divisor+3,w,c
  3004  0012E6  5821               	subwfb	___llmod@dividend+3,w,c
  3005  0012E8  A0D8               	btfss	status,0,c
  3006  0012EA  D009               	goto	l2755
  3007  0012EC  5022               	movf	___llmod@divisor,w,c
  3008  0012EE  5E1E               	subwf	___llmod@dividend,f,c
  3009  0012F0  5023               	movf	___llmod@divisor+1,w,c
  3010  0012F2  5A1F               	subwfb	___llmod@dividend+1,f,c
  3011  0012F4  5024               	movf	___llmod@divisor+2,w,c
  3012  0012F6  5A20               	subwfb	___llmod@dividend+2,f,c
  3013  0012F8  5025               	movf	___llmod@divisor+3,w,c
  3014  0012FA  5A21               	subwfb	___llmod@dividend+3,f,c
  3015  0012FC  D000               	goto	l2755
  3016  0012FE                     l2755:
  3017  0012FE  90D8               	bcf	status,0,c
  3018  001300  3225               	rrcf	___llmod@divisor+3,f,c
  3019  001302  3224               	rrcf	___llmod@divisor+2,f,c
  3020  001304  3223               	rrcf	___llmod@divisor+1,f,c
  3021  001306  3222               	rrcf	___llmod@divisor,f,c
  3022  001308  2E26               	decfsz	___llmod@counter,f,c
  3023  00130A  D7E6               	goto	l2751
  3024  00130C  D000               	goto	l975
  3025  00130E                     l975:
  3026  00130E  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3027  001312  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3028  001316  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3029  00131A  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3030  00131E  0012               	return		;funcret
  3031  001320                     __end_of___llmod:
  3032                           	opt stack 0
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           prodh	equ	0xFF4
  3038                           prodl	equ	0xFF3
  3039                           intcon	equ	0xFF2
  3040                           intcon2	equ	0xFF1
  3041                           postinc0	equ	0xFEE
  3042                           wreg	equ	0xFE8
  3043                           postdec1	equ	0xFE5
  3044                           fsr1l	equ	0xFE1
  3045                           indf2	equ	0xFDF
  3046                           postinc2	equ	0xFDE
  3047                           postdec2	equ	0xFDD
  3048                           fsr2h	equ	0xFDA
  3049                           fsr2l	equ	0xFD9
  3050                           status	equ	0xFD8
  3051                           
  3052 ;; *************** function ___lldiv *****************
  3053 ;; Defined at:
  3054 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3055 ;; Parameters:    Size  Location     Type
  3056 ;;  dividend        4   16[COMRAM] unsigned long 
  3057 ;;  divisor         4   20[COMRAM] unsigned long 
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  quotient        4   24[COMRAM] unsigned long 
  3060 ;;  counter         1   28[COMRAM] unsigned char 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  4   16[COMRAM] unsigned long 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3070 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;Total ram usage:       13 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    3
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_printf
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           	psect	text5
  3085  001020                     __ptext5:
  3086                           	opt stack 0
  3087  001020                     ___lldiv:
  3088                           	opt stack 26
  3089                           
  3090                           ;incstack = 0
  3091  001020  0E00               	movlw	0
  3092  001022  6E19               	movwf	___lldiv@quotient,c
  3093  001024  0E00               	movlw	0
  3094  001026  6E1A               	movwf	___lldiv@quotient+1,c
  3095  001028  0E00               	movlw	0
  3096  00102A  6E1B               	movwf	___lldiv@quotient+2,c
  3097  00102C  0E00               	movlw	0
  3098  00102E  6E1C               	movwf	___lldiv@quotient+3,c
  3099  001030  5015               	movf	___lldiv@divisor,w,c
  3100  001032  1016               	iorwf	___lldiv@divisor+1,w,c
  3101  001034  1017               	iorwf	___lldiv@divisor+2,w,c
  3102  001036  1018               	iorwf	___lldiv@divisor+3,w,c
  3103  001038  B4D8               	btfsc	status,2,c
  3104  00103A  D02F               	goto	l965
  3105  00103C  0E01               	movlw	1
  3106  00103E  6E1D               	movwf	___lldiv@counter,c
  3107  001040  D007               	goto	l2729
  3108  001042                     l2727:
  3109  001042  90D8               	bcf	status,0,c
  3110  001044  3615               	rlcf	___lldiv@divisor,f,c
  3111  001046  3616               	rlcf	___lldiv@divisor+1,f,c
  3112  001048  3617               	rlcf	___lldiv@divisor+2,f,c
  3113  00104A  3618               	rlcf	___lldiv@divisor+3,f,c
  3114  00104C  2A1D               	incf	___lldiv@counter,f,c
  3115  00104E  D000               	goto	l2729
  3116  001050                     l2729:
  3117  001050  BE18               	btfsc	___lldiv@divisor+3,7,c
  3118  001052  D002               	goto	l2731
  3119  001054  D7F6               	goto	l2727
  3120  001056  D000               	goto	l2731
  3121  001058                     l2731:
  3122  001058  90D8               	bcf	status,0,c
  3123  00105A  3619               	rlcf	___lldiv@quotient,f,c
  3124  00105C  361A               	rlcf	___lldiv@quotient+1,f,c
  3125  00105E  361B               	rlcf	___lldiv@quotient+2,f,c
  3126  001060  361C               	rlcf	___lldiv@quotient+3,f,c
  3127  001062  5015               	movf	___lldiv@divisor,w,c
  3128  001064  5C11               	subwf	___lldiv@dividend,w,c
  3129  001066  5016               	movf	___lldiv@divisor+1,w,c
  3130  001068  5812               	subwfb	___lldiv@dividend+1,w,c
  3131  00106A  5017               	movf	___lldiv@divisor+2,w,c
  3132  00106C  5813               	subwfb	___lldiv@dividend+2,w,c
  3133  00106E  5018               	movf	___lldiv@divisor+3,w,c
  3134  001070  5814               	subwfb	___lldiv@dividend+3,w,c
  3135  001072  A0D8               	btfss	status,0,c
  3136  001074  D00A               	goto	l2739
  3137  001076  5015               	movf	___lldiv@divisor,w,c
  3138  001078  5E11               	subwf	___lldiv@dividend,f,c
  3139  00107A  5016               	movf	___lldiv@divisor+1,w,c
  3140  00107C  5A12               	subwfb	___lldiv@dividend+1,f,c
  3141  00107E  5017               	movf	___lldiv@divisor+2,w,c
  3142  001080  5A13               	subwfb	___lldiv@dividend+2,f,c
  3143  001082  5018               	movf	___lldiv@divisor+3,w,c
  3144  001084  5A14               	subwfb	___lldiv@dividend+3,f,c
  3145  001086  8019               	bsf	___lldiv@quotient,0,c
  3146  001088  D000               	goto	l2739
  3147  00108A                     l2739:
  3148  00108A  90D8               	bcf	status,0,c
  3149  00108C  3218               	rrcf	___lldiv@divisor+3,f,c
  3150  00108E  3217               	rrcf	___lldiv@divisor+2,f,c
  3151  001090  3216               	rrcf	___lldiv@divisor+1,f,c
  3152  001092  3215               	rrcf	___lldiv@divisor,f,c
  3153  001094  2E1D               	decfsz	___lldiv@counter,f,c
  3154  001096  D7E0               	goto	l2731
  3155  001098  D000               	goto	l965
  3156  00109A                     l965:
  3157  00109A  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3158  00109E  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3159  0010A2  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3160  0010A6  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3161  0010AA  0012               	return		;funcret
  3162  0010AC                     __end_of___lldiv:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           intcon2	equ	0xFF1
  3172                           postinc0	equ	0xFEE
  3173                           wreg	equ	0xFE8
  3174                           postdec1	equ	0xFE5
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _init_UART *****************
  3184 ;; Defined at:
  3185 ;;		line 79 in file "Lab10.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;Total ram usage:        0 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    4
  3206 ;; This function calls:
  3207 ;;		_OpenUSART
  3208 ;; This function is called by:
  3209 ;;		_main
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text6
  3214  0016AA                     __ptext6:
  3215                           	opt stack 0
  3216  0016AA                     _init_UART:
  3217                           	opt stack 26
  3218                           
  3219                           ;Lab10.c: 81: OpenUSART (0b01111111 & 0b10111111 &
  3220                           ;Lab10.c: 82: 0b11111110 & 0b11111101 & 0b11111111 &
  3221                           ;Lab10.c: 83: 0b11111111, 25);
  3222                           
  3223                           ;incstack = 0
  3224  0016AA  0E00               	movlw	0
  3225  0016AC  6E12               	movwf	OpenUSART@spbrg+1,c
  3226  0016AE  0E19               	movlw	25
  3227  0016B0  6E11               	movwf	OpenUSART@spbrg,c
  3228  0016B2  0E3C               	movlw	60
  3229  0016B4  EC90  F009         	call	_OpenUSART
  3230                           
  3231                           ;Lab10.c: 84: OSCCON = 0x60;
  3232  0016B8  0E60               	movlw	96
  3233  0016BA  6ED3               	movwf	4051,c	;volatile
  3234  0016BC  0012               	return		;funcret
  3235  0016BE                     __end_of_init_UART:
  3236                           	opt stack 0
  3237                           tblptru	equ	0xFF8
  3238                           tblptrh	equ	0xFF7
  3239                           tblptrl	equ	0xFF6
  3240                           tablat	equ	0xFF5
  3241                           prodh	equ	0xFF4
  3242                           prodl	equ	0xFF3
  3243                           intcon	equ	0xFF2
  3244                           intcon2	equ	0xFF1
  3245                           postinc0	equ	0xFEE
  3246                           wreg	equ	0xFE8
  3247                           postdec1	equ	0xFE5
  3248                           fsr1l	equ	0xFE1
  3249                           indf2	equ	0xFDF
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function _OpenUSART *****************
  3257 ;; Defined at:
  3258 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  config          1    wreg     unsigned char 
  3261 ;;  spbrg           2   16[COMRAM] unsigned int 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  config          1   18[COMRAM] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;		None               void
  3266 ;; Registers used:
  3267 ;;		wreg, status,2
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3273 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;Total ram usage:        3 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    3
  3280 ;; This function calls:
  3281 ;;		Nothing
  3282 ;; This function is called by:
  3283 ;;		_init_UART
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           	psect	text7
  3288  001320                     __ptext7:
  3289                           	opt stack 0
  3290  001320                     _OpenUSART:
  3291                           	opt stack 26
  3292                           
  3293                           ;incstack = 0
  3294                           ;OpenUSART@config stored from wreg
  3295  001320  6E13               	movwf	OpenUSART@config,c
  3296  001322  0E00               	movlw	0
  3297  001324  6EAC               	movwf	4012,c	;volatile
  3298  001326  0E00               	movlw	0
  3299  001328  6EAB               	movwf	4011,c	;volatile
  3300  00132A  A013               	btfss	OpenUSART@config,0,c
  3301  00132C  D002               	goto	l2567
  3302  00132E  88AC               	bsf	4012,4,c	;volatile
  3303  001330  D000               	goto	l2567
  3304  001332                     l2567:
  3305  001332  A213               	btfss	OpenUSART@config,1,c
  3306  001334  D003               	goto	l2571
  3307  001336  8CAC               	bsf	4012,6,c	;volatile
  3308  001338  8CAB               	bsf	4011,6,c	;volatile
  3309  00133A  D000               	goto	l2571
  3310  00133C                     l2571:
  3311  00133C  A413               	btfss	OpenUSART@config,2,c
  3312  00133E  D002               	goto	l2575
  3313  001340  8EAC               	bsf	4012,7,c	;volatile
  3314  001342  D000               	goto	l2575
  3315  001344                     l2575:
  3316  001344  A613               	btfss	OpenUSART@config,3,c
  3317  001346  D002               	goto	l493
  3318  001348  88AB               	bsf	4011,4,c	;volatile
  3319  00134A  D002               	goto	l2579
  3320  00134C                     l493:
  3321  00134C  8AAB               	bsf	4011,5,c	;volatile
  3322  00134E  D000               	goto	l2579
  3323  001350                     l2579:
  3324  001350  B813               	btfsc	OpenUSART@config,4,c
  3325  001352  84AC               	bsf	4012,2,c	;volatile
  3326  001354  989E               	bcf	3998,4,c	;volatile
  3327  001356  AA13               	btfss	OpenUSART@config,5,c
  3328  001358  D002               	goto	l2587
  3329  00135A  86AB               	bsf	4011,3,c	;volatile
  3330  00135C  D000               	goto	l2587
  3331  00135E                     l2587:
  3332  00135E  AC13               	btfss	OpenUSART@config,6,c
  3333  001360  D002               	goto	l497
  3334  001362  8A9D               	bsf	3997,5,c	;volatile
  3335  001364  D001               	goto	l498
  3336  001366                     l497:
  3337  001366  9A9D               	bcf	3997,5,c	;volatile
  3338  001368                     l498:
  3339  001368  9A9E               	bcf	3998,5,c	;volatile
  3340  00136A  AE13               	btfss	OpenUSART@config,7,c
  3341  00136C  D002               	goto	l499
  3342  00136E  889D               	bsf	3997,4,c	;volatile
  3343  001370  D001               	goto	l500
  3344  001372                     l499:
  3345  001372  989D               	bcf	3997,4,c	;volatile
  3346  001374                     l500:
  3347  001374  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3348  001378  5012               	movf	OpenUSART@spbrg+1,w,c
  3349  00137A  6EB0               	movwf	4016,c	;volatile
  3350  00137C  8AAC               	bsf	4012,5,c	;volatile
  3351  00137E  8EAB               	bsf	4011,7,c	;volatile
  3352  001380  9C94               	bcf	3988,6,c	;volatile
  3353  001382  8E94               	bsf	3988,7,c	;volatile
  3354  001384  B8AC               	btfsc	4012,4,c	;volatile
  3355  001386  BEAC               	btfsc	4012,7,c	;volatile
  3356  001388  D002               	goto	l502
  3357  00138A  8C94               	bsf	3988,6,c	;volatile
  3358  00138C  D000               	goto	l502
  3359  00138E                     l502:
  3360  00138E  0012               	return		;funcret
  3361  001390                     __end_of_OpenUSART:
  3362                           	opt stack 0
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           intcon	equ	0xFF2
  3370                           intcon2	equ	0xFF1
  3371                           postinc0	equ	0xFEE
  3372                           wreg	equ	0xFE8
  3373                           postdec1	equ	0xFE5
  3374                           fsr1l	equ	0xFE1
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _fillCircle *****************
  3383 ;; Defined at:
  3384 ;;		line 614 in file "ST7735_TFT.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;  x0              2   58[COMRAM] int 
  3387 ;;  y0              2   60[COMRAM] int 
  3388 ;;  r               2   62[COMRAM] int 
  3389 ;;  color           2   64[COMRAM] unsigned int 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;		None               void
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3401 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;Total ram usage:        8 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    8
  3408 ;; This function calls:
  3409 ;;		_drawFastVLine
  3410 ;;		_fillCircleHelper
  3411 ;; This function is called by:
  3412 ;;		_main
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text8
  3417  001390                     __ptext8:
  3418                           	opt stack 0
  3419  001390                     _fillCircle:
  3420                           	opt stack 22
  3421                           
  3422                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3423                           
  3424                           ;incstack = 0
  3425  001390  503F               	movf	fillCircle@r,w,c
  3426  001392  0800               	sublw	0
  3427  001394  243D               	addwf	fillCircle@y0,w,c
  3428  001396  6E18               	movwf	drawFastVLine@y,c
  3429  001398  80D8               	bsf	status,0,c
  3430  00139A  343F               	rlcf	fillCircle@r,w,c
  3431  00139C  6E19               	movwf	drawFastVLine@h,c
  3432  00139E  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3433  0013A2  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3434  0013A6  503B               	movf	fillCircle@x0,w,c
  3435  0013A8  EC56  F008         	call	_drawFastVLine
  3436                           
  3437                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3438  0013AC  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3439  0013B0  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3440  0013B4  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3441  0013B8  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3442  0013BC  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3443  0013C0  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3444  0013C4  0E00               	movlw	0
  3445  0013C6  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3446  0013C8  0E03               	movlw	3
  3447  0013CA  6E29               	movwf	fillCircleHelper@cornername,c
  3448  0013CC  0E00               	movlw	0
  3449  0013CE  6E2C               	movwf	fillCircleHelper@delta+1,c
  3450  0013D0  0E00               	movlw	0
  3451  0013D2  6E2B               	movwf	fillCircleHelper@delta,c
  3452  0013D4  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3453  0013D8  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3454  0013DC  EC39  F005         	call	_fillCircleHelper	;wreg free
  3455  0013E0  0012               	return		;funcret
  3456  0013E2                     __end_of_fillCircle:
  3457                           	opt stack 0
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           prodh	equ	0xFF4
  3463                           prodl	equ	0xFF3
  3464                           intcon	equ	0xFF2
  3465                           intcon2	equ	0xFF1
  3466                           postinc0	equ	0xFEE
  3467                           wreg	equ	0xFE8
  3468                           postdec1	equ	0xFE5
  3469                           fsr1l	equ	0xFE1
  3470                           indf2	equ	0xFDF
  3471                           postinc2	equ	0xFDE
  3472                           postdec2	equ	0xFDD
  3473                           fsr2h	equ	0xFDA
  3474                           fsr2l	equ	0xFD9
  3475                           status	equ	0xFD8
  3476                           
  3477 ;; *************** function _fillCircleHelper *****************
  3478 ;; Defined at:
  3479 ;;		line 589 in file "ST7735_TFT.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;  x0              2   34[COMRAM] int 
  3482 ;;  y0              2   36[COMRAM] int 
  3483 ;;  r               2   38[COMRAM] int 
  3484 ;;  cornername      2   40[COMRAM] unsigned int 
  3485 ;;  delta           2   42[COMRAM] int 
  3486 ;;  color           2   44[COMRAM] unsigned int 
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  y               2   56[COMRAM] int 
  3489 ;;  x               2   54[COMRAM] int 
  3490 ;;  f               2   52[COMRAM] int 
  3491 ;;  ddF_y           2   50[COMRAM] int 
  3492 ;;  ddF_x           2   48[COMRAM] int 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;		None               void
  3495 ;; Registers used:
  3496 ;;		wreg, status,2, status,0, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3502 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;Total ram usage:       24 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    7
  3509 ;; This function calls:
  3510 ;;		_drawFastVLine
  3511 ;; This function is called by:
  3512 ;;		_fillCircle
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text9
  3517  000A72                     __ptext9:
  3518                           	opt stack 0
  3519  000A72                     _fillCircleHelper:
  3520                           	opt stack 22
  3521                           
  3522                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3523                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3524                           
  3525                           ;incstack = 0
  3526  000A72  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3527  000A76  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3528  000A7A  1E2F               	comf	??_fillCircleHelper,f,c
  3529  000A7C  1E30               	comf	??_fillCircleHelper+1,f,c
  3530  000A7E  4A2F               	infsnz	??_fillCircleHelper,f,c
  3531  000A80  2A30               	incf	??_fillCircleHelper+1,f,c
  3532  000A82  0E01               	movlw	1
  3533  000A84  242F               	addwf	??_fillCircleHelper,w,c
  3534  000A86  6E35               	movwf	fillCircleHelper@f,c
  3535  000A88  0E00               	movlw	0
  3536  000A8A  2030               	addwfc	??_fillCircleHelper+1,w,c
  3537  000A8C  6E36               	movwf	fillCircleHelper@f+1,c
  3538  000A8E  0E00               	movlw	0
  3539  000A90  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3540  000A92  0E01               	movlw	1
  3541  000A94  6E31               	movwf	fillCircleHelper@ddF_x,c
  3542  000A96  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3543  000A9A  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3544  000A9E  90D8               	bcf	status,0,c
  3545  000AA0  362F               	rlcf	??_fillCircleHelper,f,c
  3546  000AA2  3630               	rlcf	??_fillCircleHelper+1,f,c
  3547  000AA4  1E2F               	comf	??_fillCircleHelper,f,c
  3548  000AA6  1E30               	comf	??_fillCircleHelper+1,f,c
  3549  000AA8  4A2F               	infsnz	??_fillCircleHelper,f,c
  3550  000AAA  2A30               	incf	??_fillCircleHelper+1,f,c
  3551  000AAC  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3552  000AB0  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3553  000AB4  0E00               	movlw	0
  3554  000AB6  6E38               	movwf	fillCircleHelper@x+1,c
  3555  000AB8  0E00               	movlw	0
  3556  000ABA  6E37               	movwf	fillCircleHelper@x,c
  3557  000ABC  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3558  000AC0  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3559                           
  3560                           ;ST7735_TFT.c: 593: while (x<y) {
  3561  000AC4  D067               	goto	l3707
  3562  000AC6                     l3687:
  3563                           
  3564                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3565  000AC6  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3566  000AC8  D00B               	goto	l362
  3567                           
  3568                           ;ST7735_TFT.c: 595: y--;
  3569  000ACA  0639               	decf	fillCircleHelper@y,f,c
  3570  000ACC  A0D8               	btfss	status,0,c
  3571  000ACE  063A               	decf	fillCircleHelper@y+1,f,c
  3572                           
  3573                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3574  000AD0  0E02               	movlw	2
  3575  000AD2  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3576  000AD4  0E00               	movlw	0
  3577  000AD6  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3578                           
  3579                           ;ST7735_TFT.c: 597: f += ddF_y;
  3580  000AD8  5033               	movf	fillCircleHelper@ddF_y,w,c
  3581  000ADA  2635               	addwf	fillCircleHelper@f,f,c
  3582  000ADC  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3583  000ADE  2236               	addwfc	fillCircleHelper@f+1,f,c
  3584  000AE0                     l362:
  3585                           
  3586                           ;ST7735_TFT.c: 598: }
  3587                           ;ST7735_TFT.c: 599: x++;
  3588  000AE0  4A37               	infsnz	fillCircleHelper@x,f,c
  3589  000AE2  2A38               	incf	fillCircleHelper@x+1,f,c
  3590                           
  3591                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3592  000AE4  0E02               	movlw	2
  3593  000AE6  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3594  000AE8  0E00               	movlw	0
  3595  000AEA  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3596                           
  3597                           ;ST7735_TFT.c: 601: f += ddF_x;
  3598  000AEC  5031               	movf	fillCircleHelper@ddF_x,w,c
  3599  000AEE  2635               	addwf	fillCircleHelper@f,f,c
  3600  000AF0  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3601  000AF2  2236               	addwfc	fillCircleHelper@f+1,f,c
  3602                           
  3603                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3604  000AF4  A029               	btfss	fillCircleHelper@cornername,0,c
  3605  000AF6  D025               	goto	l3703
  3606                           
  3607                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3608  000AF8  5039               	movf	fillCircleHelper@y,w,c
  3609  000AFA  0800               	sublw	0
  3610  000AFC  2425               	addwf	fillCircleHelper@y0,w,c
  3611  000AFE  6E18               	movwf	drawFastVLine@y,c
  3612  000B00  5039               	movf	fillCircleHelper@y,w,c
  3613  000B02  2439               	addwf	fillCircleHelper@y,w,c
  3614  000B04  242B               	addwf	fillCircleHelper@delta,w,c
  3615  000B06  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3616  000B08  282F               	incf	??_fillCircleHelper,w,c
  3617  000B0A  6E19               	movwf	drawFastVLine@h,c
  3618  000B0C  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3619  000B10  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3620  000B14  5023               	movf	fillCircleHelper@x0,w,c
  3621  000B16  2437               	addwf	fillCircleHelper@x,w,c
  3622  000B18  EC56  F008         	call	_drawFastVLine
  3623                           
  3624                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3625  000B1C  5037               	movf	fillCircleHelper@x,w,c
  3626  000B1E  0800               	sublw	0
  3627  000B20  2425               	addwf	fillCircleHelper@y0,w,c
  3628  000B22  6E18               	movwf	drawFastVLine@y,c
  3629  000B24  5037               	movf	fillCircleHelper@x,w,c
  3630  000B26  2437               	addwf	fillCircleHelper@x,w,c
  3631  000B28  242B               	addwf	fillCircleHelper@delta,w,c
  3632  000B2A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3633  000B2C  282F               	incf	??_fillCircleHelper,w,c
  3634  000B2E  6E19               	movwf	drawFastVLine@h,c
  3635  000B30  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3636  000B34  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3637  000B38  5023               	movf	fillCircleHelper@x0,w,c
  3638  000B3A  2439               	addwf	fillCircleHelper@y,w,c
  3639  000B3C  EC56  F008         	call	_drawFastVLine
  3640  000B40  D000               	goto	l3703
  3641  000B42                     l3703:
  3642                           
  3643                           ;ST7735_TFT.c: 606: }
  3644                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3645  000B42  A229               	btfss	fillCircleHelper@cornername,1,c
  3646  000B44  D027               	goto	l3707
  3647                           
  3648                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3649  000B46  5039               	movf	fillCircleHelper@y,w,c
  3650  000B48  0800               	sublw	0
  3651  000B4A  2425               	addwf	fillCircleHelper@y0,w,c
  3652  000B4C  6E18               	movwf	drawFastVLine@y,c
  3653  000B4E  5039               	movf	fillCircleHelper@y,w,c
  3654  000B50  2439               	addwf	fillCircleHelper@y,w,c
  3655  000B52  242B               	addwf	fillCircleHelper@delta,w,c
  3656  000B54  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3657  000B56  282F               	incf	??_fillCircleHelper,w,c
  3658  000B58  6E19               	movwf	drawFastVLine@h,c
  3659  000B5A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3660  000B5E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3661  000B62  5037               	movf	fillCircleHelper@x,w,c
  3662  000B64  0800               	sublw	0
  3663  000B66  2423               	addwf	fillCircleHelper@x0,w,c
  3664  000B68  EC56  F008         	call	_drawFastVLine
  3665                           
  3666                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3667  000B6C  5037               	movf	fillCircleHelper@x,w,c
  3668  000B6E  0800               	sublw	0
  3669  000B70  2425               	addwf	fillCircleHelper@y0,w,c
  3670  000B72  6E18               	movwf	drawFastVLine@y,c
  3671  000B74  5037               	movf	fillCircleHelper@x,w,c
  3672  000B76  2437               	addwf	fillCircleHelper@x,w,c
  3673  000B78  242B               	addwf	fillCircleHelper@delta,w,c
  3674  000B7A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3675  000B7C  282F               	incf	??_fillCircleHelper,w,c
  3676  000B7E  6E19               	movwf	drawFastVLine@h,c
  3677  000B80  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3678  000B84  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3679  000B88  5039               	movf	fillCircleHelper@y,w,c
  3680  000B8A  0800               	sublw	0
  3681  000B8C  2423               	addwf	fillCircleHelper@x0,w,c
  3682  000B8E  EC56  F008         	call	_drawFastVLine
  3683  000B92  D000               	goto	l3707
  3684  000B94                     l3707:
  3685  000B94  5039               	movf	fillCircleHelper@y,w,c
  3686  000B96  5C37               	subwf	fillCircleHelper@x,w,c
  3687  000B98  5038               	movf	fillCircleHelper@x+1,w,c
  3688  000B9A  0A80               	xorlw	128
  3689  000B9C  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3690  000B9E  503A               	movf	fillCircleHelper@y+1,w,c
  3691  000BA0  0A80               	xorlw	128
  3692  000BA2  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3693  000BA4  A0D8               	btfss	status,0,c
  3694  000BA6  D78F               	goto	l3687
  3695  000BA8  0012               	return		;funcret
  3696  000BAA                     __end_of_fillCircleHelper:
  3697                           	opt stack 0
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           intcon2	equ	0xFF1
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           postdec1	equ	0xFE5
  3709                           fsr1l	equ	0xFE1
  3710                           indf2	equ	0xFDF
  3711                           postinc2	equ	0xFDE
  3712                           postdec2	equ	0xFDD
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _drawCircle *****************
  3718 ;; Defined at:
  3719 ;;		line 528 in file "ST7735_TFT.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  x0              2   27[COMRAM] int 
  3722 ;;  y0              2   29[COMRAM] int 
  3723 ;;  r               2   31[COMRAM] int 
  3724 ;;  color           2   33[COMRAM] unsigned int 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  y               2   45[COMRAM] int 
  3727 ;;  x               2   43[COMRAM] int 
  3728 ;;  f               2   41[COMRAM] int 
  3729 ;;  ddF_y           2   39[COMRAM] int 
  3730 ;;  ddF_x           2   37[COMRAM] int 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;		None               void
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:       20 bytes
  3745 ;; Hardware stack levels used:    1
  3746 ;; Hardware stack levels required when called:    7
  3747 ;; This function calls:
  3748 ;;		_drawPixel
  3749 ;; This function is called by:
  3750 ;;		_main
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text10
  3755  00061A                     __ptext10:
  3756                           	opt stack 0
  3757  00061A                     _drawCircle:
  3758                           	opt stack 23
  3759                           
  3760                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  3761                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3762                           
  3763                           ;incstack = 0
  3764  00061A  C020  F024         	movff	drawCircle@r,??_drawCircle
  3765  00061E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3766  000622  1E24               	comf	??_drawCircle,f,c
  3767  000624  1E25               	comf	??_drawCircle+1,f,c
  3768  000626  4A24               	infsnz	??_drawCircle,f,c
  3769  000628  2A25               	incf	??_drawCircle+1,f,c
  3770  00062A  0E01               	movlw	1
  3771  00062C  2424               	addwf	??_drawCircle,w,c
  3772  00062E  6E2A               	movwf	drawCircle@f,c
  3773  000630  0E00               	movlw	0
  3774  000632  2025               	addwfc	??_drawCircle+1,w,c
  3775  000634  6E2B               	movwf	drawCircle@f+1,c
  3776  000636  0E00               	movlw	0
  3777  000638  6E27               	movwf	drawCircle@ddF_x+1,c
  3778  00063A  0E01               	movlw	1
  3779  00063C  6E26               	movwf	drawCircle@ddF_x,c
  3780  00063E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3781  000642  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3782  000646  90D8               	bcf	status,0,c
  3783  000648  3624               	rlcf	??_drawCircle,f,c
  3784  00064A  3625               	rlcf	??_drawCircle+1,f,c
  3785  00064C  1E24               	comf	??_drawCircle,f,c
  3786  00064E  1E25               	comf	??_drawCircle+1,f,c
  3787  000650  4A24               	infsnz	??_drawCircle,f,c
  3788  000652  2A25               	incf	??_drawCircle+1,f,c
  3789  000654  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3790  000658  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3791  00065C  0E00               	movlw	0
  3792  00065E  6E2D               	movwf	drawCircle@x+1,c
  3793  000660  0E00               	movlw	0
  3794  000662  6E2C               	movwf	drawCircle@x,c
  3795  000664  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3796  000668  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3797                           
  3798                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  3799  00066C  501E               	movf	drawCircle@y0,w,c
  3800  00066E  2420               	addwf	drawCircle@r,w,c
  3801  000670  6E18               	movwf	drawPixel@y,c
  3802  000672  C022  F019         	movff	drawCircle@color,drawPixel@color
  3803  000676  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3804  00067A  501C               	movf	drawCircle@x0,w,c
  3805  00067C  ECDD  F00A         	call	_drawPixel
  3806                           
  3807                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  3808  000680  5020               	movf	drawCircle@r,w,c
  3809  000682  0800               	sublw	0
  3810  000684  241E               	addwf	drawCircle@y0,w,c
  3811  000686  6E18               	movwf	drawPixel@y,c
  3812  000688  C022  F019         	movff	drawCircle@color,drawPixel@color
  3813  00068C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3814  000690  501C               	movf	drawCircle@x0,w,c
  3815  000692  ECDD  F00A         	call	_drawPixel
  3816                           
  3817                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  3818  000696  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3819  00069A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3820  00069E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3821  0006A2  501C               	movf	drawCircle@x0,w,c
  3822  0006A4  2420               	addwf	drawCircle@r,w,c
  3823  0006A6  ECDD  F00A         	call	_drawPixel
  3824                           
  3825                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  3826  0006AA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3827  0006AE  C022  F019         	movff	drawCircle@color,drawPixel@color
  3828  0006B2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3829  0006B6  5020               	movf	drawCircle@r,w,c
  3830  0006B8  0800               	sublw	0
  3831  0006BA  241C               	addwf	drawCircle@x0,w,c
  3832  0006BC  ECDD  F00A         	call	_drawPixel
  3833                           
  3834                           ;ST7735_TFT.c: 536: while (x < y) {
  3835  0006C0  D078               	goto	l3913
  3836  0006C2                     l3885:
  3837                           
  3838                           ;ST7735_TFT.c: 537: if (f >= 0) {
  3839  0006C2  BE2B               	btfsc	drawCircle@f+1,7,c
  3840  0006C4  D00B               	goto	l344
  3841                           
  3842                           ;ST7735_TFT.c: 538: y--;
  3843  0006C6  062E               	decf	drawCircle@y,f,c
  3844  0006C8  A0D8               	btfss	status,0,c
  3845  0006CA  062F               	decf	drawCircle@y+1,f,c
  3846                           
  3847                           ;ST7735_TFT.c: 539: ddF_y += 2;
  3848  0006CC  0E02               	movlw	2
  3849  0006CE  2628               	addwf	drawCircle@ddF_y,f,c
  3850  0006D0  0E00               	movlw	0
  3851  0006D2  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3852                           
  3853                           ;ST7735_TFT.c: 540: f += ddF_y;
  3854  0006D4  5028               	movf	drawCircle@ddF_y,w,c
  3855  0006D6  262A               	addwf	drawCircle@f,f,c
  3856  0006D8  5029               	movf	drawCircle@ddF_y+1,w,c
  3857  0006DA  222B               	addwfc	drawCircle@f+1,f,c
  3858  0006DC                     l344:
  3859                           
  3860                           ;ST7735_TFT.c: 541: }
  3861                           ;ST7735_TFT.c: 542: x++;
  3862  0006DC  4A2C               	infsnz	drawCircle@x,f,c
  3863  0006DE  2A2D               	incf	drawCircle@x+1,f,c
  3864                           
  3865                           ;ST7735_TFT.c: 543: ddF_x += 2;
  3866  0006E0  0E02               	movlw	2
  3867  0006E2  2626               	addwf	drawCircle@ddF_x,f,c
  3868  0006E4  0E00               	movlw	0
  3869  0006E6  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3870                           
  3871                           ;ST7735_TFT.c: 544: f += ddF_x;
  3872  0006E8  5026               	movf	drawCircle@ddF_x,w,c
  3873  0006EA  262A               	addwf	drawCircle@f,f,c
  3874  0006EC  5027               	movf	drawCircle@ddF_x+1,w,c
  3875  0006EE  222B               	addwfc	drawCircle@f+1,f,c
  3876                           
  3877                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  3878  0006F0  501E               	movf	drawCircle@y0,w,c
  3879  0006F2  242E               	addwf	drawCircle@y,w,c
  3880  0006F4  6E18               	movwf	drawPixel@y,c
  3881  0006F6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3882  0006FA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3883  0006FE  501C               	movf	drawCircle@x0,w,c
  3884  000700  242C               	addwf	drawCircle@x,w,c
  3885  000702  ECDD  F00A         	call	_drawPixel
  3886                           
  3887                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  3888  000706  501E               	movf	drawCircle@y0,w,c
  3889  000708  242E               	addwf	drawCircle@y,w,c
  3890  00070A  6E18               	movwf	drawPixel@y,c
  3891  00070C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3892  000710  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3893  000714  502C               	movf	drawCircle@x,w,c
  3894  000716  0800               	sublw	0
  3895  000718  241C               	addwf	drawCircle@x0,w,c
  3896  00071A  ECDD  F00A         	call	_drawPixel
  3897                           
  3898                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  3899  00071E  502E               	movf	drawCircle@y,w,c
  3900  000720  0800               	sublw	0
  3901  000722  241E               	addwf	drawCircle@y0,w,c
  3902  000724  6E18               	movwf	drawPixel@y,c
  3903  000726  C022  F019         	movff	drawCircle@color,drawPixel@color
  3904  00072A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3905  00072E  501C               	movf	drawCircle@x0,w,c
  3906  000730  242C               	addwf	drawCircle@x,w,c
  3907  000732  ECDD  F00A         	call	_drawPixel
  3908                           
  3909                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  3910  000736  502E               	movf	drawCircle@y,w,c
  3911  000738  0800               	sublw	0
  3912  00073A  241E               	addwf	drawCircle@y0,w,c
  3913  00073C  6E18               	movwf	drawPixel@y,c
  3914  00073E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3915  000742  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3916  000746  502C               	movf	drawCircle@x,w,c
  3917  000748  0800               	sublw	0
  3918  00074A  241C               	addwf	drawCircle@x0,w,c
  3919  00074C  ECDD  F00A         	call	_drawPixel
  3920                           
  3921                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  3922  000750  501E               	movf	drawCircle@y0,w,c
  3923  000752  242C               	addwf	drawCircle@x,w,c
  3924  000754  6E18               	movwf	drawPixel@y,c
  3925  000756  C022  F019         	movff	drawCircle@color,drawPixel@color
  3926  00075A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3927  00075E  501C               	movf	drawCircle@x0,w,c
  3928  000760  242E               	addwf	drawCircle@y,w,c
  3929  000762  ECDD  F00A         	call	_drawPixel
  3930                           
  3931                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  3932  000766  501E               	movf	drawCircle@y0,w,c
  3933  000768  242C               	addwf	drawCircle@x,w,c
  3934  00076A  6E18               	movwf	drawPixel@y,c
  3935  00076C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3936  000770  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3937  000774  502E               	movf	drawCircle@y,w,c
  3938  000776  0800               	sublw	0
  3939  000778  241C               	addwf	drawCircle@x0,w,c
  3940  00077A  ECDD  F00A         	call	_drawPixel
  3941                           
  3942                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  3943  00077E  502C               	movf	drawCircle@x,w,c
  3944  000780  0800               	sublw	0
  3945  000782  241E               	addwf	drawCircle@y0,w,c
  3946  000784  6E18               	movwf	drawPixel@y,c
  3947  000786  C022  F019         	movff	drawCircle@color,drawPixel@color
  3948  00078A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3949  00078E  501C               	movf	drawCircle@x0,w,c
  3950  000790  242E               	addwf	drawCircle@y,w,c
  3951  000792  ECDD  F00A         	call	_drawPixel
  3952                           
  3953                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  3954  000796  502C               	movf	drawCircle@x,w,c
  3955  000798  0800               	sublw	0
  3956  00079A  241E               	addwf	drawCircle@y0,w,c
  3957  00079C  6E18               	movwf	drawPixel@y,c
  3958  00079E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3959  0007A2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3960  0007A6  502E               	movf	drawCircle@y,w,c
  3961  0007A8  0800               	sublw	0
  3962  0007AA  241C               	addwf	drawCircle@x0,w,c
  3963  0007AC  ECDD  F00A         	call	_drawPixel
  3964  0007B0  D000               	goto	l3913
  3965  0007B2                     l3913:
  3966  0007B2  502E               	movf	drawCircle@y,w,c
  3967  0007B4  5C2C               	subwf	drawCircle@x,w,c
  3968  0007B6  502D               	movf	drawCircle@x+1,w,c
  3969  0007B8  0A80               	xorlw	128
  3970  0007BA  6E24               	movwf	??_drawCircle& (0+255),c
  3971  0007BC  502F               	movf	drawCircle@y+1,w,c
  3972  0007BE  0A80               	xorlw	128
  3973  0007C0  5824               	subwfb	??_drawCircle& (0+255),w,c
  3974  0007C2  A0D8               	btfss	status,0,c
  3975  0007C4  D77E               	goto	l3885
  3976  0007C6  0012               	return		;funcret
  3977  0007C8                     __end_of_drawCircle:
  3978                           	opt stack 0
  3979                           tblptru	equ	0xFF8
  3980                           tblptrh	equ	0xFF7
  3981                           tblptrl	equ	0xFF6
  3982                           tablat	equ	0xFF5
  3983                           prodh	equ	0xFF4
  3984                           prodl	equ	0xFF3
  3985                           intcon	equ	0xFF2
  3986                           intcon2	equ	0xFF1
  3987                           postinc0	equ	0xFEE
  3988                           wreg	equ	0xFE8
  3989                           postdec1	equ	0xFE5
  3990                           fsr1l	equ	0xFE1
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           postdec2	equ	0xFDD
  3994                           fsr2h	equ	0xFDA
  3995                           fsr2l	equ	0xFD9
  3996                           status	equ	0xFD8
  3997                           
  3998 ;; *************** function _Wait_Half_Second *****************
  3999 ;; Defined at:
  4000 ;;		line 204 in file "Lab10.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;		None               void
  4007 ;; Registers used:
  4008 ;;		wreg, status,2
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;Total ram usage:        0 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    3
  4021 ;; This function calls:
  4022 ;;		Nothing
  4023 ;; This function is called by:
  4024 ;;		_main
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text11
  4029  00167A                     __ptext11:
  4030                           	opt stack 0
  4031  00167A                     _Wait_Half_Second:
  4032                           	opt stack 27
  4033                           
  4034                           ;Lab10.c: 206: T0CON = 0x03;
  4035                           
  4036                           ;incstack = 0
  4037  00167A  0E03               	movlw	3
  4038  00167C  6ED5               	movwf	4053,c	;volatile
  4039                           
  4040                           ;Lab10.c: 207: TMR0L = 0xDB;
  4041  00167E  0EDB               	movlw	219
  4042  001680  6ED6               	movwf	4054,c	;volatile
  4043                           
  4044                           ;Lab10.c: 208: TMR0H = 0x0B;
  4045  001682  0E0B               	movlw	11
  4046  001684  6ED7               	movwf	4055,c	;volatile
  4047                           
  4048                           ;Lab10.c: 209: INTCONbits.TMR0IF = 0;
  4049  001686  94F2               	bcf	intcon,2,c	;volatile
  4050                           
  4051                           ;Lab10.c: 210: T0CONbits.TMR0ON = 1;
  4052  001688  8ED5               	bsf	4053,7,c	;volatile
  4053                           
  4054                           ;Lab10.c: 211: while (INTCONbits.TMR0IF == 0);
  4055  00168A  D000               	goto	l162
  4056  00168C                     l162:
  4057  00168C  A4F2               	btfss	intcon,2,c	;volatile
  4058  00168E  D7FE               	goto	l162
  4059                           
  4060                           ;Lab10.c: 212: T0CONbits.TMR0ON = 0;
  4061  001690  9ED5               	bcf	4053,7,c	;volatile
  4062  001692  0012               	return		;funcret
  4063  001694                     __end_of_Wait_Half_Second:
  4064                           	opt stack 0
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           intcon	equ	0xFF2
  4072                           intcon2	equ	0xFF1
  4073                           postinc0	equ	0xFEE
  4074                           wreg	equ	0xFE8
  4075                           postdec1	equ	0xFE5
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           status	equ	0xFD8
  4083                           
  4084 ;; *************** function _Initialize_Screen *****************
  4085 ;; Defined at:
  4086 ;;		line 301 in file "Lab10.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;		None
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;		None
  4091 ;; Return value:  Size  Location     Type
  4092 ;;		None               void
  4093 ;; Registers used:
  4094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4095 ;; Tracked objects:
  4096 ;;		On entry : 0/0
  4097 ;;		On exit  : 0/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;Total ram usage:        0 bytes
  4105 ;; Hardware stack levels used:    1
  4106 ;; Hardware stack levels required when called:   10
  4107 ;; This function calls:
  4108 ;;		_LCD_Reset
  4109 ;;		_TFT_GreenTab_Initialize
  4110 ;;		_drawtext
  4111 ;;		_fillScreen
  4112 ;;		_strcpy
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text12
  4119  000F92                     __ptext12:
  4120                           	opt stack 0
  4121  000F92                     _Initialize_Screen:
  4122                           	opt stack 20
  4123                           
  4124                           ;Lab10.c: 303: LCD_Reset();
  4125                           
  4126                           ;incstack = 0
  4127  000F92  EC69  F00B         	call	_LCD_Reset	;wreg free
  4128                           
  4129                           ;Lab10.c: 304: TFT_GreenTab_Initialize();
  4130  000F96  ECF5  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  4131                           
  4132                           ;Lab10.c: 305: fillScreen(0x0000);
  4133  000F9A  0E00               	movlw	0
  4134  000F9C  6E25               	movwf	fillScreen@color+1,c
  4135  000F9E  0E00               	movlw	0
  4136  000FA0  6E24               	movwf	fillScreen@color,c
  4137  000FA2  EC2F  F00B         	call	_fillScreen	;wreg free
  4138                           
  4139                           ;Lab10.c: 308: txt = buffer;
  4140  000FA6  0EBF               	movlw	low _buffer
  4141  000FA8  6E67               	movwf	_txt,c
  4142  000FAA  0E00               	movlw	high _buffer
  4143  000FAC  6E68               	movwf	_txt+1,c
  4144                           
  4145                           ;Lab10.c: 309: strcpy(txt, "ECE3301L Sp 22-S3");
  4146  000FAE  C067  F011         	movff	_txt,strcpy@to
  4147  000FB2  C068  F012         	movff	_txt+1,strcpy@to+1
  4148  000FB6  0EC7               	movlw	low STR_3
  4149  000FB8  6E13               	movwf	strcpy@from,c
  4150  000FBA  0EFF               	movlw	high STR_3
  4151  000FBC  6E14               	movwf	strcpy@from+1,c
  4152  000FBE  ECC4  F00A         	call	_strcpy	;wreg free
  4153                           
  4154                           ;Lab10.c: 310: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4155  000FC2  0E02               	movlw	2
  4156  000FC4  6E39               	movwf	drawtext@y,c
  4157  000FC6  C067  F03A         	movff	_txt,drawtext@_text
  4158  000FCA  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4159  000FCE  0EFF               	movlw	255
  4160  000FD0  6E3D               	movwf	drawtext@color+1,c
  4161  000FD2  683C               	setf	drawtext@color,c
  4162  000FD4  0E00               	movlw	0
  4163  000FD6  6E3F               	movwf	drawtext@bg+1,c
  4164  000FD8  0E00               	movlw	0
  4165  000FDA  6E3E               	movwf	drawtext@bg,c
  4166  000FDC  0E01               	movlw	1
  4167  000FDE  6E40               	movwf	drawtext@size,c
  4168  000FE0  0E02               	movlw	2
  4169  000FE2  EC5D  F006         	call	_drawtext
  4170                           
  4171                           ;Lab10.c: 312: strcpy(txt, "LAB 10 ");
  4172  000FE6  C067  F011         	movff	_txt,strcpy@to
  4173  000FEA  C068  F012         	movff	_txt+1,strcpy@to+1
  4174  000FEE  0EF7               	movlw	low STR_4
  4175  000FF0  6E13               	movwf	strcpy@from,c
  4176  000FF2  0EFF               	movlw	high STR_4
  4177  000FF4  6E14               	movwf	strcpy@from+1,c
  4178  000FF6  ECC4  F00A         	call	_strcpy	;wreg free
  4179                           
  4180                           ;Lab10.c: 313: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4181  000FFA  0E0A               	movlw	10
  4182  000FFC  6E39               	movwf	drawtext@y,c
  4183  000FFE  C067  F03A         	movff	_txt,drawtext@_text
  4184  001002  C068  F03B         	movff	_txt+1,drawtext@_text+1
  4185  001006  0EFF               	movlw	255
  4186  001008  6E3D               	movwf	drawtext@color+1,c
  4187  00100A  683C               	setf	drawtext@color,c
  4188  00100C  0E00               	movlw	0
  4189  00100E  6E3F               	movwf	drawtext@bg+1,c
  4190  001010  0E00               	movlw	0
  4191  001012  6E3E               	movwf	drawtext@bg,c
  4192  001014  0E01               	movlw	1
  4193  001016  6E40               	movwf	drawtext@size,c
  4194  001018  0E32               	movlw	50
  4195  00101A  EC5D  F006         	call	_drawtext
  4196  00101E  0012               	return		;funcret
  4197  001020                     __end_of_Initialize_Screen:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           intcon2	equ	0xFF1
  4207                           postinc0	equ	0xFEE
  4208                           wreg	equ	0xFE8
  4209                           postdec1	equ	0xFE5
  4210                           fsr1l	equ	0xFE1
  4211                           indf2	equ	0xFDF
  4212                           postinc2	equ	0xFDE
  4213                           postdec2	equ	0xFDD
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _strcpy *****************
  4219 ;; Defined at:
  4220 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  to              2   16[COMRAM] PTR unsigned char 
  4223 ;;		 -> NULL(0), buffer(31), 
  4224 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4225 ;;		 -> STR_4(8), STR_3(18), 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4228 ;;		 -> NULL(0), buffer(31), 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  2   16[COMRAM] PTR unsigned char 
  4231 ;; Registers used:
  4232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4238 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;Total ram usage:        6 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    3
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_Initialize_Screen
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text13
  4253  001588                     __ptext13:
  4254                           	opt stack 0
  4255  001588                     _strcpy:
  4256                           	opt stack 26
  4257                           
  4258                           ;incstack = 0
  4259  001588  C011  F015         	movff	strcpy@to,strcpy@cp
  4260  00158C  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4261  001590  D005               	goto	l2675
  4262  001592                     l2673:
  4263  001592  4A15               	infsnz	strcpy@cp,f,c
  4264  001594  2A16               	incf	strcpy@cp+1,f,c
  4265  001596  4A13               	infsnz	strcpy@from,f,c
  4266  001598  2A14               	incf	strcpy@from+1,f,c
  4267  00159A  D000               	goto	l2675
  4268  00159C                     l2675:
  4269  00159C  C013  FFF6         	movff	strcpy@from,tblptrl
  4270  0015A0  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4271  0015A4                     	if	0	;tblptru may be non-zero
  4272  0015A4                     	endif
  4273  0015A4                     	if	0	;tblptru may be non-zero
  4274  0015A4                     	endif
  4275  0015A4  C015  FFD9         	movff	strcpy@cp,fsr2l
  4276  0015A8  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4277  0015AC  0008               	tblrd		*
  4278  0015AE  CFF5 FFDF          	movff	tablat,indf2
  4279  0015B2  50DF               	movf	indf2,w,c
  4280  0015B4  A4D8               	btfss	status,2,c
  4281  0015B6  D7ED               	goto	l2673
  4282                           
  4283                           ;	Return value of _strcpy is never used
  4284  0015B8  0012               	return		;funcret
  4285  0015BA                     __end_of_strcpy:
  4286                           	opt stack 0
  4287                           tblptru	equ	0xFF8
  4288                           tblptrh	equ	0xFF7
  4289                           tblptrl	equ	0xFF6
  4290                           tablat	equ	0xFF5
  4291                           prodh	equ	0xFF4
  4292                           prodl	equ	0xFF3
  4293                           intcon	equ	0xFF2
  4294                           intcon2	equ	0xFF1
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           postdec1	equ	0xFE5
  4298                           fsr1l	equ	0xFE1
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _fillScreen *****************
  4307 ;; Defined at:
  4308 ;;		line 619 in file "ST7735_TFT.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  color           2   35[COMRAM] unsigned int 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;		None               void
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;Total ram usage:        2 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    7
  4329 ;; This function calls:
  4330 ;;		_fillRectangle
  4331 ;; This function is called by:
  4332 ;;		_Initialize_Screen
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text14
  4337  00165E                     __ptext14:
  4338                           	opt stack 0
  4339  00165E                     _fillScreen:
  4340                           	opt stack 22
  4341                           
  4342                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4343                           
  4344                           ;incstack = 0
  4345  00165E  0E00               	movlw	0
  4346  001660  6E18               	movwf	fillRectangle@y,c
  4347  001662  0E80               	movlw	128
  4348  001664  6E19               	movwf	fillRectangle@w,c
  4349  001666  0EA0               	movlw	160
  4350  001668  6E1A               	movwf	fillRectangle@h,c
  4351  00166A  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4352  00166E  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4353  001672  0E00               	movlw	0
  4354  001674  EC5B  F007         	call	_fillRectangle
  4355  001678  0012               	return		;funcret
  4356  00167A                     __end_of_fillScreen:
  4357                           	opt stack 0
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           intcon	equ	0xFF2
  4365                           intcon2	equ	0xFF1
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           postdec1	equ	0xFE5
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _fillRectangle *****************
  4378 ;; Defined at:
  4379 ;;		line 503 in file "ST7735_TFT.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  x               1    wreg     unsigned char 
  4382 ;;  y               1   23[COMRAM] unsigned char 
  4383 ;;  w               1   24[COMRAM] unsigned char 
  4384 ;;  h               1   25[COMRAM] unsigned char 
  4385 ;;  color           2   26[COMRAM] unsigned int 
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;  x               1   34[COMRAM] unsigned char 
  4388 ;;  lo              1   33[COMRAM] unsigned char 
  4389 ;;  hi              1   32[COMRAM] unsigned char 
  4390 ;; Return value:  Size  Location     Type
  4391 ;;		None               void
  4392 ;; Registers used:
  4393 ;;		wreg, status,2, status,0, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4399 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;Total ram usage:       12 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    6
  4406 ;; This function calls:
  4407 ;;		_setAddrWindow
  4408 ;;		_spiwrite
  4409 ;; This function is called by:
  4410 ;;		_fillScreen
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text15
  4415  000EB6                     __ptext15:
  4416                           	opt stack 0
  4417  000EB6                     _fillRectangle:
  4418                           	opt stack 22
  4419                           
  4420                           ;incstack = 0
  4421                           ;fillRectangle@x stored from wreg
  4422  000EB6  6E23               	movwf	fillRectangle@x,c
  4423                           
  4424                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4425                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4426  000EB8  0E80               	movlw	128
  4427  000EBA  6023               	cpfslt	fillRectangle@x,c
  4428  000EBC  D069               	goto	l333
  4429  000EBE  0E9F               	movlw	159
  4430  000EC0  6418               	cpfsgt	fillRectangle@y,c
  4431  000EC2  D001               	goto	l3581
  4432                           
  4433                           ;ST7735_TFT.c: 507: return;
  4434  000EC4  D065               	goto	l333
  4435  000EC6                     l3581:
  4436                           
  4437                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4438  000EC6  0EFF               	movlw	255
  4439  000EC8  6E1D               	movwf	??_fillRectangle& (0+255),c
  4440  000ECA  0EFF               	movlw	255
  4441  000ECC  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4442  000ECE  5019               	movf	fillRectangle@w,w,c
  4443  000ED0  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4444  000ED4  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4445  000ED6  261F               	addwf	??_fillRectangle+2,f,c
  4446  000ED8  0E00               	movlw	0
  4447  000EDA  2220               	addwfc	??_fillRectangle+3,f,c
  4448  000EDC  501D               	movf	??_fillRectangle,w,c
  4449  000EDE  261F               	addwf	??_fillRectangle+2,f,c
  4450  000EE0  501E               	movf	??_fillRectangle+1,w,c
  4451  000EE2  2220               	addwfc	??_fillRectangle+3,f,c
  4452  000EE4  BE20               	btfsc	??_fillRectangle+3,7,c
  4453  000EE6  D00A               	goto	l334
  4454  000EE8  5020               	movf	??_fillRectangle+3,w,c
  4455  000EEA  E104               	bnz	u2640
  4456  000EEC  0E80               	movlw	128
  4457  000EEE  5C1F               	subwf	??_fillRectangle+2,w,c
  4458  000EF0  A0D8               	btfss	status,0,c
  4459  000EF2  D004               	goto	l334
  4460  000EF4                     u2640:
  4461                           
  4462                           ;ST7735_TFT.c: 509: w = 128 - x;
  4463  000EF4  5023               	movf	fillRectangle@x,w,c
  4464  000EF6  0800               	sublw	0
  4465  000EF8  0F80               	addlw	128
  4466  000EFA  6E19               	movwf	fillRectangle@w,c
  4467  000EFC                     l334:
  4468                           
  4469                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4470  000EFC  0EFF               	movlw	255
  4471  000EFE  6E1D               	movwf	??_fillRectangle& (0+255),c
  4472  000F00  0EFF               	movlw	255
  4473  000F02  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4474  000F04  501A               	movf	fillRectangle@h,w,c
  4475  000F06  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4476  000F0A  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4477  000F0C  261F               	addwf	??_fillRectangle+2,f,c
  4478  000F0E  0E00               	movlw	0
  4479  000F10  2220               	addwfc	??_fillRectangle+3,f,c
  4480  000F12  501D               	movf	??_fillRectangle,w,c
  4481  000F14  261F               	addwf	??_fillRectangle+2,f,c
  4482  000F16  501E               	movf	??_fillRectangle+1,w,c
  4483  000F18  2220               	addwfc	??_fillRectangle+3,f,c
  4484  000F1A  BE20               	btfsc	??_fillRectangle+3,7,c
  4485  000F1C  D00B               	goto	l3587
  4486  000F1E  5020               	movf	??_fillRectangle+3,w,c
  4487  000F20  E104               	bnz	u2650
  4488  000F22  0EA0               	movlw	160
  4489  000F24  5C1F               	subwf	??_fillRectangle+2,w,c
  4490  000F26  A0D8               	btfss	status,0,c
  4491  000F28  D005               	goto	l3587
  4492  000F2A                     u2650:
  4493                           
  4494                           ;ST7735_TFT.c: 511: h = 160 - y;
  4495  000F2A  5018               	movf	fillRectangle@y,w,c
  4496  000F2C  0800               	sublw	0
  4497  000F2E  0FA0               	addlw	160
  4498  000F30  6E1A               	movwf	fillRectangle@h,c
  4499  000F32  D000               	goto	l3587
  4500  000F34                     l3587:
  4501                           
  4502                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4503  000F34  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4504  000F38  5023               	movf	fillRectangle@x,w,c
  4505  000F3A  2419               	addwf	fillRectangle@w,w,c
  4506  000F3C  6E1D               	movwf	??_fillRectangle& (0+255),c
  4507  000F3E  041D               	decf	??_fillRectangle,w,c
  4508  000F40  6E15               	movwf	setAddrWindow@x1,c
  4509  000F42  5018               	movf	fillRectangle@y,w,c
  4510  000F44  241A               	addwf	fillRectangle@h,w,c
  4511  000F46  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4512  000F48  041E               	decf	??_fillRectangle+1,w,c
  4513  000F4A  6E16               	movwf	setAddrWindow@y1,c
  4514  000F4C  5023               	movf	fillRectangle@x,w,c
  4515  000F4E  EC1A  F00A         	call	_setAddrWindow
  4516                           
  4517                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4518  000F52  501C               	movf	fillRectangle@color+1,w,c
  4519  000F54  6E21               	movwf	fillRectangle@hi,c
  4520  000F56  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4521                           
  4522                           ;ST7735_TFT.c: 514: PORTCbits.RC0 = 1;
  4523  000F5A  8082               	bsf	3970,0,c	;volatile
  4524                           
  4525                           ;ST7735_TFT.c: 515: PORTCbits.RC2 = 0;
  4526  000F5C  9482               	bcf	3970,2,c	;volatile
  4527                           
  4528                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4529  000F5E  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4530  000F62                     l3599:
  4531  000F62  5018               	movf	fillRectangle@y,w,c
  4532  000F64  B4D8               	btfsc	status,2,c
  4533  000F66  D013               	goto	l337
  4534  000F68  D001               	goto	l336
  4535  000F6A  D011               	goto	l337
  4536  000F6C                     l336:
  4537                           
  4538                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4539  000F6C  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4540  000F70                     l3603:
  4541  000F70  5023               	movf	fillRectangle@x,w,c
  4542  000F72  B4D8               	btfsc	status,2,c
  4543  000F74  D00A               	goto	l3613
  4544  000F76  D001               	goto	l3607
  4545  000F78  D008               	goto	l3613
  4546  000F7A                     l3607:
  4547                           
  4548                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4549  000F7A  5021               	movf	fillRectangle@hi,w,c
  4550  000F7C  EC5F  F00B         	call	_spiwrite
  4551                           
  4552                           ;ST7735_TFT.c: 520: spiwrite(lo);
  4553  000F80  5022               	movf	fillRectangle@lo,w,c
  4554  000F82  EC5F  F00B         	call	_spiwrite
  4555  000F86  0623               	decf	fillRectangle@x,f,c
  4556  000F88  D7F3               	goto	l3603
  4557  000F8A                     l3613:
  4558  000F8A  0618               	decf	fillRectangle@y,f,c
  4559  000F8C  D7EA               	goto	l3599
  4560  000F8E                     l337:
  4561                           
  4562                           ;ST7735_TFT.c: 521: }
  4563                           ;ST7735_TFT.c: 522: }
  4564                           ;ST7735_TFT.c: 523: PORTCbits.RC2 = 1;
  4565  000F8E  8482               	bsf	3970,2,c	;volatile
  4566  000F90                     l333:
  4567  000F90  0012               	return		;funcret
  4568  000F92                     __end_of_fillRectangle:
  4569                           	opt stack 0
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           prodh	equ	0xFF4
  4575                           prodl	equ	0xFF3
  4576                           intcon	equ	0xFF2
  4577                           intcon2	equ	0xFF1
  4578                           postinc0	equ	0xFEE
  4579                           wreg	equ	0xFE8
  4580                           postdec1	equ	0xFE5
  4581                           fsr1l	equ	0xFE1
  4582                           indf2	equ	0xFDF
  4583                           postinc2	equ	0xFDE
  4584                           postdec2	equ	0xFDD
  4585                           fsr2h	equ	0xFDA
  4586                           fsr2l	equ	0xFD9
  4587                           status	equ	0xFD8
  4588                           
  4589 ;; *************** function _drawtext *****************
  4590 ;; Defined at:
  4591 ;;		line 474 in file "ST7735_TFT.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;  x               1    wreg     unsigned char 
  4594 ;;  y               1   56[COMRAM] unsigned char 
  4595 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4596 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4597 ;;  color           2   59[COMRAM] unsigned int 
  4598 ;;  bg              2   61[COMRAM] unsigned int 
  4599 ;;  size            1   63[COMRAM] unsigned char 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  x               1    0[BANK0 ] unsigned char 
  4602 ;;  i               2    3[BANK0 ] unsigned int 
  4603 ;;  textsize        2    1[BANK0 ] unsigned int 
  4604 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4605 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;		None               void
  4608 ;; Registers used:
  4609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4615 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;Total ram usage:       17 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    9
  4622 ;; This function calls:
  4623 ;;		_drawChar
  4624 ;;		_strlen
  4625 ;; This function is called by:
  4626 ;;		_main
  4627 ;;		_Initialize_Screen
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text16
  4632  000CBA                     __ptext16:
  4633                           	opt stack 0
  4634  000CBA                     _drawtext:
  4635                           	opt stack 21
  4636                           
  4637                           ;incstack = 0
  4638                           ;drawtext@x stored from wreg
  4639  000CBA  0100               	movlb	0	; () banked
  4640  000CBC  6FDE               	movwf	drawtext@x& (0+255),b
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  4644                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  4645                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  4646  000CBE  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4647                           
  4648                           ; BSR set to: 0
  4649  000CC2  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  4653  000CC6  C03A  F011         	movff	drawtext@_text,strlen@s
  4654  000CCA  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4655  000CCE  EC86  F00A         	call	_strlen	;wreg free
  4656  000CD2  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4657  000CD6  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4658                           
  4659                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  4660  000CDA  0E00               	movlw	0
  4661  000CDC  0100               	movlb	0	; () banked
  4662  000CDE  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4663  000CE0  0E00               	movlw	0
  4664  000CE2  6FE1               	movwf	drawtext@i& (0+255),b
  4665  000CE4  D064               	goto	l3651
  4666  000CE6                     l3625:
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  4670  000CE6  505C               	movf	_wrap,w,c
  4671  000CE8  B4D8               	btfsc	status,2,c
  4672  000CEA  D034               	goto	l3641
  4673                           
  4674                           ; BSR set to: 0
  4675  000CEC  5040               	movf	drawtext@size,w,c
  4676  000CEE  0D05               	mullw	5
  4677  000CF0  0100               	movlb	0	; () banked
  4678  000CF2  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4679  000CF4  6E41               	movwf	??_drawtext& (0+255),c
  4680  000CF6  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4681  000CF8  50F3               	movf	prodl,w,c
  4682  000CFA  2641               	addwf	??_drawtext,f,c
  4683  000CFC  50F4               	movf	prodh,w,c
  4684  000CFE  2242               	addwfc	??_drawtext+1,f,c
  4685  000D00  BE42               	btfsc	??_drawtext+1,7,c
  4686  000D02  D028               	goto	l3641
  4687  000D04  5042               	movf	??_drawtext+1,w,c
  4688  000D06  E104               	bnz	u2710
  4689  000D08  0E81               	movlw	129
  4690  000D0A  5C41               	subwf	??_drawtext,w,c
  4691  000D0C  A0D8               	btfss	status,0,c
  4692  000D0E  D022               	goto	l3641
  4693  000D10                     u2710:
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;ST7735_TFT.c: 482: cursor_x = 0;
  4697  000D10  0E00               	movlw	0
  4698  000D12  0100               	movlb	0	; () banked
  4699  000D14  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  4703  000D16  5040               	movf	drawtext@size,w,c
  4704  000D18  0D07               	mullw	7
  4705  000D1A  50F3               	movf	prodl,w,c
  4706  000D1C  0100               	movlb	0	; () banked
  4707  000D1E  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4708  000D20  0F03               	addlw	3
  4709  000D22  0100               	movlb	0	; () banked
  4710  000D24  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  4714  000D26  0EA0               	movlw	160
  4715  000D28  0100               	movlb	0	; () banked
  4716  000D2A  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4717  000D2C  D004               	goto	l3637
  4718                           
  4719                           ; BSR set to: 0
  4720  000D2E  0EA0               	movlw	160
  4721  000D30  0100               	movlb	0	; () banked
  4722  000D32  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4723  000D34  D000               	goto	l3637
  4724  000D36                     l3637:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  4728  000D36  0100               	movlb	0	; () banked
  4729  000D38  51E1               	movf	drawtext@i& (0+255),w,b
  4730  000D3A  243A               	addwf	drawtext@_text,w,c
  4731  000D3C  6ED9               	movwf	fsr2l,c
  4732  000D3E  0100               	movlb	0	; () banked
  4733  000D40  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4734  000D42  203B               	addwfc	drawtext@_text+1,w,c
  4735  000D44  6EDA               	movwf	fsr2h,c
  4736  000D46  0E20               	movlw	32
  4737  000D48  18DE               	xorwf	postinc2,w,c
  4738  000D4A  B4D8               	btfsc	status,2,c
  4739  000D4C  D02C               	goto	l3649
  4740  000D4E  D002               	goto	l3641
  4741                           
  4742                           ; BSR set to: 0
  4743  000D50  D02A               	goto	l3649
  4744                           
  4745                           ; BSR set to: 0
  4746  000D52  D000               	goto	l3641
  4747  000D54                     l3641:
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4751  000D54  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4752  000D58  0100               	movlb	0	; () banked
  4753  000D5A  51E1               	movf	drawtext@i& (0+255),w,b
  4754  000D5C  243A               	addwf	drawtext@_text,w,c
  4755  000D5E  6ED9               	movwf	fsr2l,c
  4756  000D60  0100               	movlb	0	; () banked
  4757  000D62  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4758  000D64  203B               	addwfc	drawtext@_text+1,w,c
  4759  000D66  6EDA               	movwf	fsr2h,c
  4760  000D68  50DF               	movf	indf2,w,c
  4761  000D6A  6E2F               	movwf	drawChar@c,c
  4762  000D6C  C03C  F030         	movff	drawtext@color,drawChar@color
  4763  000D70  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4764  000D74  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4765  000D78  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4766  000D7C  C040  F034         	movff	drawtext@size,drawChar@size
  4767  000D80  0100               	movlb	0	; () banked
  4768  000D82  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4769  000D84  ECE4  F003         	call	_drawChar
  4770                           
  4771                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  4772  000D88  5040               	movf	drawtext@size,w,c
  4773  000D8A  0D06               	mullw	6
  4774  000D8C  50F3               	movf	prodl,w,c
  4775  000D8E  0100               	movlb	0	; () banked
  4776  000D90  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4777  000D92  0100               	movlb	0	; () banked
  4778  000D94  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  4782  000D96  0E80               	movlw	128
  4783  000D98  0100               	movlb	0	; () banked
  4784  000D9A  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4785  000D9C  D004               	goto	l3649
  4786                           
  4787                           ; BSR set to: 0
  4788  000D9E  0E80               	movlw	128
  4789  000DA0  0100               	movlb	0	; () banked
  4790  000DA2  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4791                           
  4792                           ; BSR set to: 0
  4793  000DA4  D000               	goto	l3649
  4794  000DA6                     l3649:
  4795                           
  4796                           ; BSR set to: 0
  4797  000DA6  0100               	movlb	0	; () banked
  4798  000DA8  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4799  000DAA  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4800  000DAC  D000               	goto	l3651
  4801  000DAE                     l3651:
  4802                           
  4803                           ; BSR set to: 0
  4804  000DAE  0100               	movlb	0	; () banked
  4805  000DB0  51DF               	movf	drawtext@textsize& (0+255),w,b
  4806  000DB2  0100               	movlb	0	; () banked
  4807  000DB4  5DE1               	subwf	drawtext@i& (0+255),w,b
  4808  000DB6  0100               	movlb	0	; () banked
  4809  000DB8  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4810  000DBA  0100               	movlb	0	; () banked
  4811  000DBC  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4812  000DBE  A0D8               	btfss	status,0,c
  4813  000DC0  D792               	goto	l3625
  4814                           
  4815                           ; BSR set to: 0
  4816                           
  4817                           ; BSR set to: 0
  4818  000DC2  0012               	return		;funcret
  4819  000DC4                     __end_of_drawtext:
  4820                           	opt stack 0
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           intcon2	equ	0xFF1
  4829                           postinc0	equ	0xFEE
  4830                           wreg	equ	0xFE8
  4831                           postdec1	equ	0xFE5
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840 ;; *************** function _strlen *****************
  4841 ;; Defined at:
  4842 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4845 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4848 ;;		 -> NULL(0), buffer(31), txt1(84), 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  2   16[COMRAM] unsigned int 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:        6 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    3
  4865 ;; This function calls:
  4866 ;;		Nothing
  4867 ;; This function is called by:
  4868 ;;		_drawtext
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text17
  4873  00150C                     __ptext17:
  4874                           	opt stack 0
  4875  00150C                     _strlen:
  4876                           	opt stack 26
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;incstack = 0
  4880  00150C  C011  F015         	movff	strlen@s,strlen@cp
  4881  001510  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4882  001514  D003               	goto	l3571
  4883  001516                     l3569:
  4884  001516  4A15               	infsnz	strlen@cp,f,c
  4885  001518  2A16               	incf	strlen@cp+1,f,c
  4886  00151A  D000               	goto	l3571
  4887  00151C                     l3571:
  4888  00151C  C015  FFD9         	movff	strlen@cp,fsr2l
  4889  001520  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4890  001524  50DF               	movf	indf2,w,c
  4891  001526  A4D8               	btfss	status,2,c
  4892  001528  D7F6               	goto	l3569
  4893  00152A  C011  F013         	movff	strlen@s,??_strlen
  4894  00152E  C012  F014         	movff	strlen@s+1,??_strlen+1
  4895  001532  1E13               	comf	??_strlen,f,c
  4896  001534  1E14               	comf	??_strlen+1,f,c
  4897  001536  4A13               	infsnz	??_strlen,f,c
  4898  001538  2A14               	incf	??_strlen+1,f,c
  4899  00153A  5015               	movf	strlen@cp,w,c
  4900  00153C  2413               	addwf	??_strlen,w,c
  4901  00153E  6E11               	movwf	?_strlen,c
  4902  001540  5016               	movf	strlen@cp+1,w,c
  4903  001542  2014               	addwfc	??_strlen+1,w,c
  4904  001544  6E12               	movwf	?_strlen+1,c
  4905  001546  D000               	goto	l1067
  4906  001548                     l1067:
  4907  001548  0012               	return		;funcret
  4908  00154A                     __end_of_strlen:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           intcon	equ	0xFF2
  4917                           intcon2	equ	0xFF1
  4918                           postinc0	equ	0xFEE
  4919                           wreg	equ	0xFE8
  4920                           postdec1	equ	0xFE5
  4921                           fsr1l	equ	0xFE1
  4922                           indf2	equ	0xFDF
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _drawChar *****************
  4930 ;; Defined at:
  4931 ;;		line 447 in file "ST7735_TFT.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  x               1    wreg     unsigned char 
  4934 ;;  y               1   45[COMRAM] unsigned char 
  4935 ;;  c               1   46[COMRAM] unsigned char 
  4936 ;;  color           2   47[COMRAM] unsigned int 
  4937 ;;  bg              2   49[COMRAM] unsigned int 
  4938 ;;  size            1   51[COMRAM] unsigned char 
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;  x               1   53[COMRAM] unsigned char 
  4941 ;;  line            1   52[COMRAM] unsigned char 
  4942 ;;  i               1   55[COMRAM] unsigned char 
  4943 ;;  j               1   54[COMRAM] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;		None               void
  4946 ;; Registers used:
  4947 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : 0/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4953 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4956 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4957 ;;Total ram usage:       11 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    8
  4960 ;; This function calls:
  4961 ;;		___wmul
  4962 ;;		_drawPixel
  4963 ;;		_fillRect
  4964 ;; This function is called by:
  4965 ;;		_drawtext
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text18
  4970  0007C8                     __ptext18:
  4971                           	opt stack 0
  4972  0007C8                     _drawChar:
  4973                           	opt stack 21
  4974                           
  4975                           ;incstack = 0
  4976                           ;drawChar@x stored from wreg
  4977  0007C8  6E36               	movwf	drawChar@x,c
  4978                           
  4979                           ;ST7735_TFT.c: 449: char i, j;
  4980                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  4981  0007CA  0E80               	movlw	128
  4982  0007CC  6036               	cpfslt	drawChar@x,c
  4983  0007CE  D0A6               	goto	l296
  4984  0007D0  0E9F               	movlw	159
  4985  0007D2  642E               	cpfsgt	drawChar@y,c
  4986  0007D4  D001               	goto	l3517
  4987                           
  4988                           ;ST7735_TFT.c: 451: return;
  4989  0007D6  D0A2               	goto	l296
  4990  0007D8                     l3517:
  4991                           
  4992                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  4993  0007D8  5034               	movf	drawChar@size,w,c
  4994  0007DA  A4D8               	btfss	status,2,c
  4995  0007DC  D003               	goto	l3521
  4996  0007DE  0E01               	movlw	1
  4997  0007E0  6E34               	movwf	drawChar@size,c
  4998  0007E2  D000               	goto	l3521
  4999  0007E4                     l3521:
  5000                           
  5001                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5002  0007E4  0E1F               	movlw	31
  5003  0007E6  642F               	cpfsgt	drawChar@c,c
  5004  0007E8  D004               	goto	l3525
  5005  0007EA  0E7E               	movlw	126
  5006  0007EC  642F               	cpfsgt	drawChar@c,c
  5007  0007EE  D003               	goto	l298
  5008  0007F0  D000               	goto	l3525
  5009  0007F2                     l3525:
  5010                           
  5011                           ;ST7735_TFT.c: 454: c = '?';
  5012  0007F2  0E3F               	movlw	63
  5013  0007F4  6E2F               	movwf	drawChar@c,c
  5014  0007F6                     l298:
  5015                           
  5016                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5017  0007F6  0E00               	movlw	0
  5018  0007F8  6E38               	movwf	drawChar@i,c
  5019  0007FA                     l3527:
  5020  0007FA  0E04               	movlw	4
  5021  0007FC  6438               	cpfsgt	drawChar@i,c
  5022  0007FE  D001               	goto	l3531
  5023  000800  D08D               	goto	l296
  5024  000802                     l3531:
  5025                           
  5026                           ;ST7735_TFT.c: 456: unsigned char line;
  5027                           ;ST7735_TFT.c: 457: if(c < 'S')
  5028  000802  0E53               	movlw	83
  5029  000804  602F               	cpfslt	drawChar@c,c
  5030  000806  D015               	goto	l3535
  5031                           
  5032                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5033  000808  0EE0               	movlw	224
  5034  00080A  242F               	addwf	drawChar@c,w,c
  5035  00080C  6E11               	movwf	___wmul@multiplier,c
  5036  00080E  6A12               	clrf	___wmul@multiplier+1,c
  5037  000810  0EFF               	movlw	255
  5038  000812  2212               	addwfc	___wmul@multiplier+1,f,c
  5039  000814  0E00               	movlw	0
  5040  000816  6E14               	movwf	___wmul@multiplicand+1,c
  5041  000818  0E05               	movlw	5
  5042  00081A  6E13               	movwf	___wmul@multiplicand,c
  5043  00081C  EC0A  F00B         	call	___wmul	;wreg free
  5044  000820  5038               	movf	drawChar@i,w,c
  5045  000822  2611               	addwf	?___wmul,f,c
  5046  000824  0E00               	movlw	0
  5047  000826  2212               	addwfc	?___wmul+1,f,c
  5048  000828  0E8F               	movlw	low _font
  5049  00082A  2411               	addwf	?___wmul,w,c
  5050  00082C  6EF6               	movwf	tblptrl,c
  5051  00082E  0EFD               	movlw	high _font
  5052  000830  D014               	goto	L3
  5053  000832                     l3535:
  5054                           
  5055                           ;ST7735_TFT.c: 459: else
  5056                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5057  000832  0EAD               	movlw	173
  5058  000834  242F               	addwf	drawChar@c,w,c
  5059  000836  6E11               	movwf	___wmul@multiplier,c
  5060  000838  6A12               	clrf	___wmul@multiplier+1,c
  5061  00083A  0EFF               	movlw	255
  5062  00083C  2212               	addwfc	___wmul@multiplier+1,f,c
  5063  00083E  0E00               	movlw	0
  5064  000840  6E14               	movwf	___wmul@multiplicand+1,c
  5065  000842  0E05               	movlw	5
  5066  000844  6E13               	movwf	___wmul@multiplicand,c
  5067  000846  EC0A  F00B         	call	___wmul	;wreg free
  5068  00084A  5038               	movf	drawChar@i,w,c
  5069  00084C  2611               	addwf	?___wmul,f,c
  5070  00084E  0E00               	movlw	0
  5071  000850  2212               	addwfc	?___wmul+1,f,c
  5072  000852  0E8E               	movlw	low _font2
  5073  000854  2411               	addwf	?___wmul,w,c
  5074  000856  6EF6               	movwf	tblptrl,c
  5075  000858  0EFE               	movlw	high _font2
  5076  00085A                     L3:
  5077  00085A  2012               	addwfc	?___wmul+1,w,c
  5078  00085C  6EF7               	movwf	tblptrh,c
  5079  00085E                     	if	0	;There are less than 3 active tblptr bytes
  5080  00085E                     	endif
  5081  00085E  0008               	tblrd		*
  5082  000860  CFF5 F035          	movff	tablat,drawChar@line
  5083  000864  D000               	goto	l3537
  5084  000866                     l3537:
  5085                           
  5086                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5087  000866  0E00               	movlw	0
  5088  000868  6E37               	movwf	drawChar@j,c
  5089  00086A                     l3539:
  5090  00086A  0E06               	movlw	6
  5091  00086C  6437               	cpfsgt	drawChar@j,c
  5092  00086E  D001               	goto	l305
  5093  000870  D053               	goto	l3563
  5094  000872                     l305:
  5095                           
  5096                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5097  000872  A035               	btfss	drawChar@line,0,c
  5098  000874  D023               	goto	l3549
  5099                           
  5100                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5101  000876  0434               	decf	drawChar@size,w,c
  5102  000878  A4D8               	btfss	status,2,c
  5103  00087A  D00C               	goto	l3547
  5104  00087C  502E               	movf	drawChar@y,w,c
  5105  00087E  2437               	addwf	drawChar@j,w,c
  5106  000880  6E18               	movwf	drawPixel@y,c
  5107  000882  C030  F019         	movff	drawChar@color,drawPixel@color
  5108  000886  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5109  00088A  5036               	movf	drawChar@x,w,c
  5110  00088C  2438               	addwf	drawChar@i,w,c
  5111  00088E  ECDD  F00A         	call	_drawPixel
  5112  000892  D03E               	goto	l3557
  5113  000894                     l3547:
  5114                           
  5115                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5116  000894  5037               	movf	drawChar@j,w,c
  5117  000896  0234               	mulwf	drawChar@size,c
  5118  000898  50F3               	movf	prodl,w,c
  5119  00089A  242E               	addwf	drawChar@y,w,c
  5120  00089C  6E23               	movwf	fillRect@y,c
  5121  00089E  C034  F024         	movff	drawChar@size,fillRect@w
  5122  0008A2  C034  F025         	movff	drawChar@size,fillRect@h
  5123  0008A6  C030  F026         	movff	drawChar@color,fillRect@color
  5124  0008AA  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5125  0008AE  5038               	movf	drawChar@i,w,c
  5126  0008B0  0234               	mulwf	drawChar@size,c
  5127  0008B2  50F3               	movf	prodl,w,c
  5128  0008B4  2436               	addwf	drawChar@x,w,c
  5129  0008B6  EC41  F00A         	call	_fillRect
  5130                           
  5131                           ;ST7735_TFT.c: 465: }
  5132  0008BA  D02A               	goto	l3557
  5133  0008BC                     l3549:
  5134                           
  5135                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5136  0008BC  5030               	movf	drawChar@color,w,c
  5137  0008BE  1832               	xorwf	drawChar@bg,w,c
  5138  0008C0  E104               	bnz	u2570
  5139  0008C2  5031               	movf	drawChar@color+1,w,c
  5140  0008C4  1833               	xorwf	drawChar@bg+1,w,c
  5141  0008C6  B4D8               	btfsc	status,2,c
  5142  0008C8  D023               	goto	l3557
  5143  0008CA                     u2570:
  5144                           
  5145                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5146  0008CA  0434               	decf	drawChar@size,w,c
  5147  0008CC  A4D8               	btfss	status,2,c
  5148  0008CE  D00C               	goto	l3555
  5149  0008D0  502E               	movf	drawChar@y,w,c
  5150  0008D2  2437               	addwf	drawChar@j,w,c
  5151  0008D4  6E18               	movwf	drawPixel@y,c
  5152  0008D6  C032  F019         	movff	drawChar@bg,drawPixel@color
  5153  0008DA  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5154  0008DE  5036               	movf	drawChar@x,w,c
  5155  0008E0  2438               	addwf	drawChar@i,w,c
  5156  0008E2  ECDD  F00A         	call	_drawPixel
  5157  0008E6  D014               	goto	l3557
  5158  0008E8                     l3555:
  5159                           
  5160                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5161  0008E8  5037               	movf	drawChar@j,w,c
  5162  0008EA  0234               	mulwf	drawChar@size,c
  5163  0008EC  50F3               	movf	prodl,w,c
  5164  0008EE  242E               	addwf	drawChar@y,w,c
  5165  0008F0  6E23               	movwf	fillRect@y,c
  5166  0008F2  C034  F024         	movff	drawChar@size,fillRect@w
  5167  0008F6  C034  F025         	movff	drawChar@size,fillRect@h
  5168  0008FA  C032  F026         	movff	drawChar@bg,fillRect@color
  5169  0008FE  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5170  000902  5038               	movf	drawChar@i,w,c
  5171  000904  0234               	mulwf	drawChar@size,c
  5172  000906  50F3               	movf	prodl,w,c
  5173  000908  2436               	addwf	drawChar@x,w,c
  5174  00090A  EC41  F00A         	call	_fillRect
  5175  00090E  D000               	goto	l3557
  5176  000910                     l3557:
  5177  000910  2A37               	incf	drawChar@j,f,c
  5178  000912  90D8               	bcf	status,0,c
  5179  000914  3235               	rrcf	drawChar@line,f,c
  5180  000916  D7A9               	goto	l3539
  5181  000918                     l3563:
  5182  000918  2A38               	incf	drawChar@i,f,c
  5183  00091A  D76F               	goto	l3527
  5184  00091C                     l296:
  5185  00091C  0012               	return		;funcret
  5186  00091E                     __end_of_drawChar:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           intcon2	equ	0xFF1
  5196                           postinc0	equ	0xFEE
  5197                           wreg	equ	0xFE8
  5198                           postdec1	equ	0xFE5
  5199                           fsr1l	equ	0xFE1
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _fillRect *****************
  5208 ;; Defined at:
  5209 ;;		line 437 in file "ST7735_TFT.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  x               1    wreg     unsigned char 
  5212 ;;  y               1   34[COMRAM] unsigned char 
  5213 ;;  w               1   35[COMRAM] unsigned char 
  5214 ;;  h               1   36[COMRAM] unsigned char 
  5215 ;;  color           2   37[COMRAM] unsigned int 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  x               1   42[COMRAM] unsigned char 
  5218 ;;  i               2   43[COMRAM] int 
  5219 ;; Return value:  Size  Location     Type
  5220 ;;		None               void
  5221 ;; Registers used:
  5222 ;;		wreg, status,2, status,0, cstack
  5223 ;; Tracked objects:
  5224 ;;		On entry : 0/0
  5225 ;;		On exit  : 0/0
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5228 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;Total ram usage:       11 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    7
  5235 ;; This function calls:
  5236 ;;		_drawFastVLine
  5237 ;; This function is called by:
  5238 ;;		_drawChar
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text19
  5243  001482                     __ptext19:
  5244                           	opt stack 0
  5245  001482                     _fillRect:
  5246                           	opt stack 21
  5247                           
  5248                           ;incstack = 0
  5249                           ;fillRect@x stored from wreg
  5250  001482  6E2B               	movwf	fillRect@x,c
  5251                           
  5252                           ;ST7735_TFT.c: 439: signed int i;
  5253                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5254  001484  C02B  F02C         	movff	fillRect@x,fillRect@i
  5255  001488  6A2D               	clrf	fillRect@i+1,c
  5256  00148A  D00E               	goto	l3419
  5257  00148C                     l3415:
  5258                           
  5259                           ;ST7735_TFT.c: 442: {
  5260                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5261  00148C  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5262  001490  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5263  001494  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5264  001498  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5265  00149C  502C               	movf	fillRect@i,w,c
  5266  00149E  EC56  F008         	call	_drawFastVLine
  5267  0014A2  4A2C               	infsnz	fillRect@i,f,c
  5268  0014A4  2A2D               	incf	fillRect@i+1,f,c
  5269  0014A6  D000               	goto	l3419
  5270  0014A8                     l3419:
  5271  0014A8  5024               	movf	fillRect@w,w,c
  5272  0014AA  C02B  F028         	movff	fillRect@x,??_fillRect
  5273  0014AE  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5274  0014B0  2628               	addwf	??_fillRect,f,c
  5275  0014B2  0E00               	movlw	0
  5276  0014B4  2229               	addwfc	??_fillRect+1,f,c
  5277  0014B6  5028               	movf	??_fillRect,w,c
  5278  0014B8  5C2C               	subwf	fillRect@i,w,c
  5279  0014BA  502D               	movf	fillRect@i+1,w,c
  5280  0014BC  0A80               	xorlw	128
  5281  0014BE  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5282  0014C0  5029               	movf	??_fillRect+1,w,c
  5283  0014C2  0A80               	xorlw	128
  5284  0014C4  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5285  0014C6  A0D8               	btfss	status,0,c
  5286  0014C8  D7E1               	goto	l3415
  5287  0014CA  0012               	return		;funcret
  5288  0014CC                     __end_of_fillRect:
  5289                           	opt stack 0
  5290                           tblptru	equ	0xFF8
  5291                           tblptrh	equ	0xFF7
  5292                           tblptrl	equ	0xFF6
  5293                           tablat	equ	0xFF5
  5294                           prodh	equ	0xFF4
  5295                           prodl	equ	0xFF3
  5296                           intcon	equ	0xFF2
  5297                           intcon2	equ	0xFF1
  5298                           postinc0	equ	0xFEE
  5299                           wreg	equ	0xFE8
  5300                           postdec1	equ	0xFE5
  5301                           fsr1l	equ	0xFE1
  5302                           indf2	equ	0xFDF
  5303                           postinc2	equ	0xFDE
  5304                           postdec2	equ	0xFDD
  5305                           fsr2h	equ	0xFDA
  5306                           fsr2l	equ	0xFD9
  5307                           status	equ	0xFD8
  5308                           
  5309 ;; *************** function _drawFastVLine *****************
  5310 ;; Defined at:
  5311 ;;		line 416 in file "ST7735_TFT.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  x               1    wreg     unsigned char 
  5314 ;;  y               1   23[COMRAM] unsigned char 
  5315 ;;  h               1   24[COMRAM] unsigned char 
  5316 ;;  color           2   25[COMRAM] unsigned int 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  x               1   33[COMRAM] unsigned char 
  5319 ;;  lo              1   32[COMRAM] unsigned char 
  5320 ;;  hi              1   31[COMRAM] unsigned char 
  5321 ;; Return value:  Size  Location     Type
  5322 ;;		None               void
  5323 ;; Registers used:
  5324 ;;		wreg, status,2, status,0, cstack
  5325 ;; Tracked objects:
  5326 ;;		On entry : 0/0
  5327 ;;		On exit  : 0/0
  5328 ;;		Unchanged: 0/0
  5329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5330 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;Total ram usage:       11 bytes
  5335 ;; Hardware stack levels used:    1
  5336 ;; Hardware stack levels required when called:    6
  5337 ;; This function calls:
  5338 ;;		_setAddrWindow
  5339 ;;		_spiwrite
  5340 ;; This function is called by:
  5341 ;;		_fillRect
  5342 ;;		_fillCircleHelper
  5343 ;;		_fillCircle
  5344 ;;		_drawRect
  5345 ;; This function uses a non-reentrant model
  5346 ;;
  5347                           
  5348                           	psect	text20
  5349  0010AC                     __ptext20:
  5350                           	opt stack 0
  5351  0010AC                     _drawFastVLine:
  5352                           	opt stack 22
  5353                           
  5354                           ;incstack = 0
  5355                           ;drawFastVLine@x stored from wreg
  5356  0010AC  6E22               	movwf	drawFastVLine@x,c
  5357                           
  5358                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5359                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5360  0010AE  0E80               	movlw	128
  5361  0010B0  6022               	cpfslt	drawFastVLine@x,c
  5362  0010B2  D03F               	goto	l280
  5363  0010B4  0E9F               	movlw	159
  5364  0010B6  6418               	cpfsgt	drawFastVLine@y,c
  5365  0010B8  D001               	goto	l3365
  5366                           
  5367                           ;ST7735_TFT.c: 420: return;
  5368  0010BA  D03B               	goto	l280
  5369  0010BC                     l3365:
  5370                           
  5371                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5372  0010BC  0EFF               	movlw	255
  5373  0010BE  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5374  0010C0  0EFF               	movlw	255
  5375  0010C2  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5376  0010C4  5019               	movf	drawFastVLine@h,w,c
  5377  0010C6  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5378  0010CA  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5379  0010CC  261E               	addwf	??_drawFastVLine+2,f,c
  5380  0010CE  0E00               	movlw	0
  5381  0010D0  221F               	addwfc	??_drawFastVLine+3,f,c
  5382  0010D2  501C               	movf	??_drawFastVLine,w,c
  5383  0010D4  261E               	addwf	??_drawFastVLine+2,f,c
  5384  0010D6  501D               	movf	??_drawFastVLine+1,w,c
  5385  0010D8  221F               	addwfc	??_drawFastVLine+3,f,c
  5386  0010DA  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5387  0010DC  D00B               	goto	l3369
  5388  0010DE  501F               	movf	??_drawFastVLine+3,w,c
  5389  0010E0  E104               	bnz	u2410
  5390  0010E2  0EA0               	movlw	160
  5391  0010E4  5C1E               	subwf	??_drawFastVLine+2,w,c
  5392  0010E6  A0D8               	btfss	status,0,c
  5393  0010E8  D005               	goto	l3369
  5394  0010EA                     u2410:
  5395                           
  5396                           ;ST7735_TFT.c: 422: h = 160 - y;
  5397  0010EA  5018               	movf	drawFastVLine@y,w,c
  5398  0010EC  0800               	sublw	0
  5399  0010EE  0FA0               	addlw	160
  5400  0010F0  6E19               	movwf	drawFastVLine@h,c
  5401  0010F2  D000               	goto	l3369
  5402  0010F4                     l3369:
  5403                           
  5404                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5405  0010F4  501B               	movf	drawFastVLine@color+1,w,c
  5406  0010F6  6E20               	movwf	drawFastVLine@hi,c
  5407  0010F8  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5408                           
  5409                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5410  0010FC  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5411  001100  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5412  001104  5018               	movf	drawFastVLine@y,w,c
  5413  001106  2419               	addwf	drawFastVLine@h,w,c
  5414  001108  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5415  00110A  041C               	decf	??_drawFastVLine,w,c
  5416  00110C  6E16               	movwf	setAddrWindow@y1,c
  5417  00110E  5022               	movf	drawFastVLine@x,w,c
  5418  001110  EC1A  F00A         	call	_setAddrWindow
  5419                           
  5420                           ;ST7735_TFT.c: 425: PORTCbits.RC0 = 1;
  5421  001114  8082               	bsf	3970,0,c	;volatile
  5422                           
  5423                           ;ST7735_TFT.c: 426: PORTCbits.RC2 = 0;
  5424  001116  9482               	bcf	3970,2,c	;volatile
  5425                           
  5426                           ;ST7735_TFT.c: 428: while (h--) {
  5427  001118  D007               	goto	l3381
  5428  00111A                     l3379:
  5429                           
  5430                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5431  00111A  5020               	movf	drawFastVLine@hi,w,c
  5432  00111C  EC5F  F00B         	call	_spiwrite
  5433                           
  5434                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5435  001120  5021               	movf	drawFastVLine@lo,w,c
  5436  001122  EC5F  F00B         	call	_spiwrite
  5437  001126  D000               	goto	l3381
  5438  001128                     l3381:
  5439  001128  0619               	decf	drawFastVLine@h,f,c
  5440  00112A  2819               	incf	drawFastVLine@h,w,c
  5441  00112C  A4D8               	btfss	status,2,c
  5442  00112E  D7F5               	goto	l3379
  5443                           
  5444                           ;ST7735_TFT.c: 431: }
  5445                           ;ST7735_TFT.c: 432: PORTCbits.RC2 = 1;
  5446  001130  8482               	bsf	3970,2,c	;volatile
  5447  001132                     l280:
  5448  001132  0012               	return		;funcret
  5449  001134                     __end_of_drawFastVLine:
  5450                           	opt stack 0
  5451                           tblptru	equ	0xFF8
  5452                           tblptrh	equ	0xFF7
  5453                           tblptrl	equ	0xFF6
  5454                           tablat	equ	0xFF5
  5455                           prodh	equ	0xFF4
  5456                           prodl	equ	0xFF3
  5457                           intcon	equ	0xFF2
  5458                           intcon2	equ	0xFF1
  5459                           postinc0	equ	0xFEE
  5460                           wreg	equ	0xFE8
  5461                           postdec1	equ	0xFE5
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _drawPixel *****************
  5471 ;; Defined at:
  5472 ;;		line 407 in file "ST7735_TFT.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  x               1    wreg     unsigned char 
  5475 ;;  y               1   23[COMRAM] unsigned char 
  5476 ;;  color           2   24[COMRAM] unsigned int 
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;  x               1   26[COMRAM] unsigned char 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;		None               void
  5481 ;; Registers used:
  5482 ;;		wreg, status,2, status,0, cstack
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5488 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5492 ;;Total ram usage:        4 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    6
  5495 ;; This function calls:
  5496 ;;		_setAddrWindow
  5497 ;;		_write_data
  5498 ;; This function is called by:
  5499 ;;		_drawChar
  5500 ;;		_drawCircle
  5501 ;;		_drawCircleHelper
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text21
  5506  0015BA                     __ptext21:
  5507                           	opt stack 0
  5508  0015BA                     _drawPixel:
  5509                           	opt stack 22
  5510                           
  5511                           ;incstack = 0
  5512                           ;drawPixel@x stored from wreg
  5513  0015BA  6E1B               	movwf	drawPixel@x,c
  5514                           
  5515                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5516  0015BC  0E80               	movlw	128
  5517  0015BE  601B               	cpfslt	drawPixel@x,c
  5518  0015C0  D013               	goto	l274
  5519  0015C2  0E9F               	movlw	159
  5520  0015C4  6418               	cpfsgt	drawPixel@y,c
  5521  0015C6  D001               	goto	l3407
  5522                           
  5523                           ;ST7735_TFT.c: 410: return;
  5524  0015C8  D00F               	goto	l274
  5525  0015CA                     l3407:
  5526                           
  5527                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5528  0015CA  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5529  0015CE  281B               	incf	drawPixel@x,w,c
  5530  0015D0  6E15               	movwf	setAddrWindow@x1,c
  5531  0015D2  2818               	incf	drawPixel@y,w,c
  5532  0015D4  6E16               	movwf	setAddrWindow@y1,c
  5533  0015D6  501B               	movf	drawPixel@x,w,c
  5534  0015D8  EC1A  F00A         	call	_setAddrWindow
  5535                           
  5536                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5537  0015DC  501A               	movf	drawPixel@color+1,w,c
  5538  0015DE  EC7B  F00B         	call	_write_data
  5539                           
  5540                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5541  0015E2  5019               	movf	drawPixel@color,w,c
  5542  0015E4  EC7B  F00B         	call	_write_data
  5543  0015E8                     l274:
  5544  0015E8  0012               	return		;funcret
  5545  0015EA                     __end_of_drawPixel:
  5546                           	opt stack 0
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           intcon	equ	0xFF2
  5554                           intcon2	equ	0xFF1
  5555                           postinc0	equ	0xFEE
  5556                           wreg	equ	0xFE8
  5557                           postdec1	equ	0xFE5
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function _setAddrWindow *****************
  5567 ;; Defined at:
  5568 ;;		line 392 in file "ST7735_TFT.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  x0              1    wreg     unsigned char 
  5571 ;;  y0              1   19[COMRAM] unsigned char 
  5572 ;;  x1              1   20[COMRAM] unsigned char 
  5573 ;;  y1              1   21[COMRAM] unsigned char 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  x0              1   22[COMRAM] unsigned char 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;		None               void
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5585 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;Total ram usage:        4 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    5
  5592 ;; This function calls:
  5593 ;;		_write_command
  5594 ;;		_write_data
  5595 ;; This function is called by:
  5596 ;;		_drawPixel
  5597 ;;		_drawFastVLine
  5598 ;;		_fillRectangle
  5599 ;;		_drawFastHLine
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603                           	psect	text22
  5604  001434                     __ptext22:
  5605                           	opt stack 0
  5606  001434                     _setAddrWindow:
  5607                           	opt stack 22
  5608                           
  5609                           ;incstack = 0
  5610                           ;setAddrWindow@x0 stored from wreg
  5611  001434  6E17               	movwf	setAddrWindow@x0,c
  5612                           
  5613                           ;ST7735_TFT.c: 394: write_command(0x2A);
  5614  001436  0E2A               	movlw	42
  5615  001438  EC83  F00B         	call	_write_command
  5616                           
  5617                           ;ST7735_TFT.c: 395: write_data(0);
  5618  00143C  0E00               	movlw	0
  5619  00143E  EC7B  F00B         	call	_write_data
  5620                           
  5621                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  5622  001442  5017               	movf	setAddrWindow@x0,w,c
  5623  001444  246D               	addwf	_colstart,w,c
  5624  001446  EC7B  F00B         	call	_write_data
  5625                           
  5626                           ;ST7735_TFT.c: 397: write_data(0);
  5627  00144A  0E00               	movlw	0
  5628  00144C  EC7B  F00B         	call	_write_data
  5629                           
  5630                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  5631  001450  5015               	movf	setAddrWindow@x1,w,c
  5632  001452  246D               	addwf	_colstart,w,c
  5633  001454  EC7B  F00B         	call	_write_data
  5634                           
  5635                           ;ST7735_TFT.c: 399: write_command(0x2B);
  5636  001458  0E2B               	movlw	43
  5637  00145A  EC83  F00B         	call	_write_command
  5638                           
  5639                           ;ST7735_TFT.c: 400: write_data(0);
  5640  00145E  0E00               	movlw	0
  5641  001460  EC7B  F00B         	call	_write_data
  5642                           
  5643                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  5644  001464  5014               	movf	setAddrWindow@y0,w,c
  5645  001466  246F               	addwf	_rowstart,w,c
  5646  001468  EC7B  F00B         	call	_write_data
  5647                           
  5648                           ;ST7735_TFT.c: 402: write_data(0);
  5649  00146C  0E00               	movlw	0
  5650  00146E  EC7B  F00B         	call	_write_data
  5651                           
  5652                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  5653  001472  5016               	movf	setAddrWindow@y1,w,c
  5654  001474  246F               	addwf	_rowstart,w,c
  5655  001476  EC7B  F00B         	call	_write_data
  5656                           
  5657                           ;ST7735_TFT.c: 404: write_command(0x2C);
  5658  00147A  0E2C               	movlw	44
  5659  00147C  EC83  F00B         	call	_write_command
  5660  001480  0012               	return		;funcret
  5661  001482                     __end_of_setAddrWindow:
  5662                           	opt stack 0
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           prodh	equ	0xFF4
  5668                           prodl	equ	0xFF3
  5669                           intcon	equ	0xFF2
  5670                           intcon2	equ	0xFF1
  5671                           postinc0	equ	0xFEE
  5672                           wreg	equ	0xFE8
  5673                           postdec1	equ	0xFE5
  5674                           fsr1l	equ	0xFE1
  5675                           indf2	equ	0xFDF
  5676                           postinc2	equ	0xFDE
  5677                           postdec2	equ	0xFDD
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _TFT_GreenTab_Initialize *****************
  5683 ;; Defined at:
  5684 ;;		line 644 in file "ST7735_TFT.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;		None
  5687 ;; Auto vars:     Size  Location     Type
  5688 ;;		None
  5689 ;; Return value:  Size  Location     Type
  5690 ;;		None               void
  5691 ;; Registers used:
  5692 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;Total ram usage:        0 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    6
  5705 ;; This function calls:
  5706 ;;		_Rcmd1
  5707 ;;		_Rcmd2red
  5708 ;;		_Rcmd3
  5709 ;;		_write_command
  5710 ;;		_write_data
  5711 ;; This function is called by:
  5712 ;;		_Initialize_Screen
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text23
  5717  0015EA                     __ptext23:
  5718                           	opt stack 0
  5719  0015EA                     _TFT_GreenTab_Initialize:
  5720                           	opt stack 23
  5721                           
  5722                           ;ST7735_TFT.c: 646: PORTCbits.RC2 = 1;
  5723                           
  5724                           ;incstack = 0
  5725  0015EA  8482               	bsf	3970,2,c	;volatile
  5726                           
  5727                           ;ST7735_TFT.c: 647: PORTCbits.RC0 = 0;
  5728  0015EC  9082               	bcf	3970,0,c	;volatile
  5729                           
  5730                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  5731  0015EE  0E80               	movlw	128
  5732  0015F0  6EC7               	movwf	4039,c	;volatile
  5733                           
  5734                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  5735  0015F2  0E30               	movlw	48
  5736  0015F4  6EC6               	movwf	4038,c	;volatile
  5737                           
  5738                           ;ST7735_TFT.c: 653: Rcmd1();
  5739  0015F6  ECD5  F005         	call	_Rcmd1	;wreg free
  5740                           
  5741                           ;ST7735_TFT.c: 654: Rcmd2red();
  5742  0015FA  ECA5  F00A         	call	_Rcmd2red	;wreg free
  5743                           
  5744                           ;ST7735_TFT.c: 655: Rcmd3();
  5745  0015FE  ECE2  F006         	call	_Rcmd3	;wreg free
  5746                           
  5747                           ;ST7735_TFT.c: 656: write_command(0x36);
  5748  001602  0E36               	movlw	54
  5749  001604  EC83  F00B         	call	_write_command
  5750                           
  5751                           ;ST7735_TFT.c: 657: write_data(0xC0);
  5752  001608  0EC0               	movlw	192
  5753  00160A  EC7B  F00B         	call	_write_data
  5754                           
  5755                           ;ST7735_TFT.c: 658: _tft_type = 1;
  5756  00160E  0E01               	movlw	1
  5757  001610  6E6B               	movwf	__tft_type,c
  5758  001612  0012               	return		;funcret
  5759  001614                     __end_of_TFT_GreenTab_Initialize:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           intcon	equ	0xFF2
  5768                           intcon2	equ	0xFF1
  5769                           postinc0	equ	0xFEE
  5770                           wreg	equ	0xFE8
  5771                           postdec1	equ	0xFE5
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function _Rcmd3 *****************
  5781 ;; Defined at:
  5782 ;;		line 338 in file "ST7735_TFT.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;		None               void
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;Total ram usage:        0 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    5
  5803 ;; This function calls:
  5804 ;;		_delay_ms
  5805 ;;		_write_command
  5806 ;;		_write_data
  5807 ;; This function is called by:
  5808 ;;		_TFT_GreenTab_Initialize
  5809 ;;		_TFT_BlackTab_Initialize
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text24
  5814  000DC4                     __ptext24:
  5815                           	opt stack 0
  5816  000DC4                     _Rcmd3:
  5817                           	opt stack 23
  5818                           
  5819                           ;ST7735_TFT.c: 340: write_command(0xE0);
  5820                           
  5821                           ;incstack = 0
  5822  000DC4  0EE0               	movlw	224
  5823  000DC6  EC83  F00B         	call	_write_command
  5824                           
  5825                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5826  000DCA  0E02               	movlw	2
  5827  000DCC  EC7B  F00B         	call	_write_data
  5828  000DD0  0E1C               	movlw	28
  5829  000DD2  EC7B  F00B         	call	_write_data
  5830  000DD6  0E07               	movlw	7
  5831  000DD8  EC7B  F00B         	call	_write_data
  5832  000DDC  0E12               	movlw	18
  5833  000DDE  EC7B  F00B         	call	_write_data
  5834                           
  5835                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5836  000DE2  0E37               	movlw	55
  5837  000DE4  EC7B  F00B         	call	_write_data
  5838  000DE8  0E32               	movlw	50
  5839  000DEA  EC7B  F00B         	call	_write_data
  5840  000DEE  0E29               	movlw	41
  5841  000DF0  EC7B  F00B         	call	_write_data
  5842  000DF4  0E2D               	movlw	45
  5843  000DF6  EC7B  F00B         	call	_write_data
  5844                           
  5845                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5846  000DFA  0E29               	movlw	41
  5847  000DFC  EC7B  F00B         	call	_write_data
  5848  000E00  0E25               	movlw	37
  5849  000E02  EC7B  F00B         	call	_write_data
  5850  000E06  0E2B               	movlw	43
  5851  000E08  EC7B  F00B         	call	_write_data
  5852  000E0C  0E39               	movlw	57
  5853  000E0E  EC7B  F00B         	call	_write_data
  5854                           
  5855                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5856  000E12  0E00               	movlw	0
  5857  000E14  EC7B  F00B         	call	_write_data
  5858  000E18  0E01               	movlw	1
  5859  000E1A  EC7B  F00B         	call	_write_data
  5860  000E1E  0E03               	movlw	3
  5861  000E20  EC7B  F00B         	call	_write_data
  5862  000E24  0E10               	movlw	16
  5863  000E26  EC7B  F00B         	call	_write_data
  5864                           
  5865                           ;ST7735_TFT.c: 345: write_command(0xE1);
  5866  000E2A  0EE1               	movlw	225
  5867  000E2C  EC83  F00B         	call	_write_command
  5868                           
  5869                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5870  000E30  0E03               	movlw	3
  5871  000E32  EC7B  F00B         	call	_write_data
  5872  000E36  0E1D               	movlw	29
  5873  000E38  EC7B  F00B         	call	_write_data
  5874  000E3C  0E07               	movlw	7
  5875  000E3E  EC7B  F00B         	call	_write_data
  5876  000E42  0E06               	movlw	6
  5877  000E44  EC7B  F00B         	call	_write_data
  5878                           
  5879                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5880  000E48  0E2E               	movlw	46
  5881  000E4A  EC7B  F00B         	call	_write_data
  5882  000E4E  0E2C               	movlw	44
  5883  000E50  EC7B  F00B         	call	_write_data
  5884  000E54  0E29               	movlw	41
  5885  000E56  EC7B  F00B         	call	_write_data
  5886  000E5A  0E2D               	movlw	45
  5887  000E5C  EC7B  F00B         	call	_write_data
  5888                           
  5889                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5890  000E60  0E2E               	movlw	46
  5891  000E62  EC7B  F00B         	call	_write_data
  5892  000E66  0E2E               	movlw	46
  5893  000E68  EC7B  F00B         	call	_write_data
  5894  000E6C  0E37               	movlw	55
  5895  000E6E  EC7B  F00B         	call	_write_data
  5896  000E72  0E3F               	movlw	63
  5897  000E74  EC7B  F00B         	call	_write_data
  5898                           
  5899                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5900  000E78  0E00               	movlw	0
  5901  000E7A  EC7B  F00B         	call	_write_data
  5902  000E7E  0E00               	movlw	0
  5903  000E80  EC7B  F00B         	call	_write_data
  5904  000E84  0E02               	movlw	2
  5905  000E86  EC7B  F00B         	call	_write_data
  5906  000E8A  0E10               	movlw	16
  5907  000E8C  EC7B  F00B         	call	_write_data
  5908                           
  5909                           ;ST7735_TFT.c: 350: write_command(0x13);
  5910  000E90  0E13               	movlw	19
  5911  000E92  EC83  F00B         	call	_write_command
  5912                           
  5913                           ;ST7735_TFT.c: 351: delay_ms(10);
  5914  000E96  0E00               	movlw	0
  5915  000E98  6E18               	movwf	delay_ms@ms+1,c
  5916  000E9A  0E0A               	movlw	10
  5917  000E9C  6E17               	movwf	delay_ms@ms,c
  5918  000E9E  ECF1  F009         	call	_delay_ms	;wreg free
  5919                           
  5920                           ;ST7735_TFT.c: 352: write_command(0x29);
  5921  000EA2  0E29               	movlw	41
  5922  000EA4  EC83  F00B         	call	_write_command
  5923                           
  5924                           ;ST7735_TFT.c: 353: delay_ms(100);
  5925  000EA8  0E00               	movlw	0
  5926  000EAA  6E18               	movwf	delay_ms@ms+1,c
  5927  000EAC  0E64               	movlw	100
  5928  000EAE  6E17               	movwf	delay_ms@ms,c
  5929  000EB0  ECF1  F009         	call	_delay_ms	;wreg free
  5930  000EB4  0012               	return		;funcret
  5931  000EB6                     __end_of_Rcmd3:
  5932                           	opt stack 0
  5933                           tblptru	equ	0xFF8
  5934                           tblptrh	equ	0xFF7
  5935                           tblptrl	equ	0xFF6
  5936                           tablat	equ	0xFF5
  5937                           prodh	equ	0xFF4
  5938                           prodl	equ	0xFF3
  5939                           intcon	equ	0xFF2
  5940                           intcon2	equ	0xFF1
  5941                           postinc0	equ	0xFEE
  5942                           wreg	equ	0xFE8
  5943                           postdec1	equ	0xFE5
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function _Rcmd2red *****************
  5953 ;; Defined at:
  5954 ;;		line 328 in file "ST7735_TFT.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;		None               void
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;Total ram usage:        0 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    5
  5975 ;; This function calls:
  5976 ;;		_write_command
  5977 ;;		_write_data
  5978 ;; This function is called by:
  5979 ;;		_TFT_GreenTab_Initialize
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text25
  5984  00154A                     __ptext25:
  5985                           	opt stack 0
  5986  00154A                     _Rcmd2red:
  5987                           	opt stack 23
  5988                           
  5989                           ;ST7735_TFT.c: 330: write_command(0x2A);
  5990                           
  5991                           ;incstack = 0
  5992  00154A  0E2A               	movlw	42
  5993  00154C  EC83  F00B         	call	_write_command
  5994                           
  5995                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  5996  001550  0E00               	movlw	0
  5997  001552  EC7B  F00B         	call	_write_data
  5998  001556  0E00               	movlw	0
  5999  001558  EC7B  F00B         	call	_write_data
  6000                           
  6001                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6002  00155C  0E00               	movlw	0
  6003  00155E  EC7B  F00B         	call	_write_data
  6004  001562  0E7F               	movlw	127
  6005  001564  EC7B  F00B         	call	_write_data
  6006                           
  6007                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6008  001568  0E2B               	movlw	43
  6009  00156A  EC83  F00B         	call	_write_command
  6010                           
  6011                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6012  00156E  0E00               	movlw	0
  6013  001570  EC7B  F00B         	call	_write_data
  6014  001574  0E00               	movlw	0
  6015  001576  EC7B  F00B         	call	_write_data
  6016                           
  6017                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6018  00157A  0E00               	movlw	0
  6019  00157C  EC7B  F00B         	call	_write_data
  6020  001580  0E9F               	movlw	159
  6021  001582  EC7B  F00B         	call	_write_data
  6022  001586  0012               	return		;funcret
  6023  001588                     __end_of_Rcmd2red:
  6024                           	opt stack 0
  6025                           tblptru	equ	0xFF8
  6026                           tblptrh	equ	0xFF7
  6027                           tblptrl	equ	0xFF6
  6028                           tablat	equ	0xFF5
  6029                           prodh	equ	0xFF4
  6030                           prodl	equ	0xFF3
  6031                           intcon	equ	0xFF2
  6032                           intcon2	equ	0xFF1
  6033                           postinc0	equ	0xFEE
  6034                           wreg	equ	0xFE8
  6035                           postdec1	equ	0xFE5
  6036                           fsr1l	equ	0xFE1
  6037                           indf2	equ	0xFDF
  6038                           postinc2	equ	0xFDE
  6039                           postdec2	equ	0xFDD
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _Rcmd1 *****************
  6045 ;; Defined at:
  6046 ;;		line 281 in file "ST7735_TFT.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;		None
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;		None
  6051 ;; Return value:  Size  Location     Type
  6052 ;;		None               void
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : 0/0
  6057 ;;		On exit  : 0/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;Total ram usage:        0 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    5
  6067 ;; This function calls:
  6068 ;;		_delay_ms
  6069 ;;		_write_command
  6070 ;;		_write_data
  6071 ;; This function is called by:
  6072 ;;		_TFT_GreenTab_Initialize
  6073 ;;		_TFT_BlackTab_Initialize
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text26
  6078  000BAA                     __ptext26:
  6079                           	opt stack 0
  6080  000BAA                     _Rcmd1:
  6081                           	opt stack 23
  6082                           
  6083                           ;ST7735_TFT.c: 283: write_command(0x01);
  6084                           
  6085                           ;incstack = 0
  6086  000BAA  0E01               	movlw	1
  6087  000BAC  EC83  F00B         	call	_write_command
  6088                           
  6089                           ;ST7735_TFT.c: 284: delay_ms(150);
  6090  000BB0  0E00               	movlw	0
  6091  000BB2  6E18               	movwf	delay_ms@ms+1,c
  6092  000BB4  0E96               	movlw	150
  6093  000BB6  6E17               	movwf	delay_ms@ms,c
  6094  000BB8  ECF1  F009         	call	_delay_ms	;wreg free
  6095                           
  6096                           ;ST7735_TFT.c: 285: write_command(0x11);
  6097  000BBC  0E11               	movlw	17
  6098  000BBE  EC83  F00B         	call	_write_command
  6099                           
  6100                           ;ST7735_TFT.c: 286: delay_ms(500);
  6101  000BC2  0E01               	movlw	1
  6102  000BC4  6E18               	movwf	delay_ms@ms+1,c
  6103  000BC6  0EF4               	movlw	244
  6104  000BC8  6E17               	movwf	delay_ms@ms,c
  6105  000BCA  ECF1  F009         	call	_delay_ms	;wreg free
  6106                           
  6107                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6108  000BCE  0EB1               	movlw	177
  6109  000BD0  EC83  F00B         	call	_write_command
  6110                           
  6111                           ;ST7735_TFT.c: 288: write_data(0x01);
  6112  000BD4  0E01               	movlw	1
  6113  000BD6  EC7B  F00B         	call	_write_data
  6114                           
  6115                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6116  000BDA  0E2C               	movlw	44
  6117  000BDC  EC7B  F00B         	call	_write_data
  6118                           
  6119                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6120  000BE0  0E2D               	movlw	45
  6121  000BE2  EC7B  F00B         	call	_write_data
  6122                           
  6123                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6124  000BE6  0EB2               	movlw	178
  6125  000BE8  EC83  F00B         	call	_write_command
  6126                           
  6127                           ;ST7735_TFT.c: 292: write_data(0x01);
  6128  000BEC  0E01               	movlw	1
  6129  000BEE  EC7B  F00B         	call	_write_data
  6130                           
  6131                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6132  000BF2  0E2C               	movlw	44
  6133  000BF4  EC7B  F00B         	call	_write_data
  6134                           
  6135                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6136  000BF8  0E2D               	movlw	45
  6137  000BFA  EC7B  F00B         	call	_write_data
  6138                           
  6139                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6140  000BFE  0EB3               	movlw	179
  6141  000C00  EC83  F00B         	call	_write_command
  6142                           
  6143                           ;ST7735_TFT.c: 296: write_data(0x01);
  6144  000C04  0E01               	movlw	1
  6145  000C06  EC7B  F00B         	call	_write_data
  6146                           
  6147                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6148  000C0A  0E2C               	movlw	44
  6149  000C0C  EC7B  F00B         	call	_write_data
  6150                           
  6151                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6152  000C10  0E2D               	movlw	45
  6153  000C12  EC7B  F00B         	call	_write_data
  6154                           
  6155                           ;ST7735_TFT.c: 299: write_data(0x01);
  6156  000C16  0E01               	movlw	1
  6157  000C18  EC7B  F00B         	call	_write_data
  6158                           
  6159                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6160  000C1C  0E2C               	movlw	44
  6161  000C1E  EC7B  F00B         	call	_write_data
  6162                           
  6163                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6164  000C22  0E2D               	movlw	45
  6165  000C24  EC7B  F00B         	call	_write_data
  6166                           
  6167                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6168  000C28  0EB4               	movlw	180
  6169  000C2A  EC83  F00B         	call	_write_command
  6170                           
  6171                           ;ST7735_TFT.c: 303: write_data(0x07);
  6172  000C2E  0E07               	movlw	7
  6173  000C30  EC7B  F00B         	call	_write_data
  6174                           
  6175                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6176  000C34  0EC0               	movlw	192
  6177  000C36  EC83  F00B         	call	_write_command
  6178                           
  6179                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6180  000C3A  0EA2               	movlw	162
  6181  000C3C  EC7B  F00B         	call	_write_data
  6182                           
  6183                           ;ST7735_TFT.c: 306: write_data(0x02);
  6184  000C40  0E02               	movlw	2
  6185  000C42  EC7B  F00B         	call	_write_data
  6186                           
  6187                           ;ST7735_TFT.c: 307: write_data(0x84);
  6188  000C46  0E84               	movlw	132
  6189  000C48  EC7B  F00B         	call	_write_data
  6190                           
  6191                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6192  000C4C  0EC1               	movlw	193
  6193  000C4E  EC83  F00B         	call	_write_command
  6194                           
  6195                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6196  000C52  0EC5               	movlw	197
  6197  000C54  EC7B  F00B         	call	_write_data
  6198                           
  6199                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6200  000C58  0EC2               	movlw	194
  6201  000C5A  EC83  F00B         	call	_write_command
  6202                           
  6203                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6204  000C5E  0E0A               	movlw	10
  6205  000C60  EC7B  F00B         	call	_write_data
  6206                           
  6207                           ;ST7735_TFT.c: 312: write_data(0x00);
  6208  000C64  0E00               	movlw	0
  6209  000C66  EC7B  F00B         	call	_write_data
  6210                           
  6211                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6212  000C6A  0EC3               	movlw	195
  6213  000C6C  EC83  F00B         	call	_write_command
  6214                           
  6215                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6216  000C70  0E8A               	movlw	138
  6217  000C72  EC7B  F00B         	call	_write_data
  6218                           
  6219                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6220  000C76  0E2A               	movlw	42
  6221  000C78  EC7B  F00B         	call	_write_data
  6222                           
  6223                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6224  000C7C  0EC4               	movlw	196
  6225  000C7E  EC83  F00B         	call	_write_command
  6226                           
  6227                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6228  000C82  0E8A               	movlw	138
  6229  000C84  EC7B  F00B         	call	_write_data
  6230                           
  6231                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6232  000C88  0EEE               	movlw	238
  6233  000C8A  EC7B  F00B         	call	_write_data
  6234                           
  6235                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6236  000C8E  0EC5               	movlw	197
  6237  000C90  EC83  F00B         	call	_write_command
  6238                           
  6239                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6240  000C94  0E0E               	movlw	14
  6241  000C96  EC7B  F00B         	call	_write_data
  6242                           
  6243                           ;ST7735_TFT.c: 321: write_command(0x20);
  6244  000C9A  0E20               	movlw	32
  6245  000C9C  EC83  F00B         	call	_write_command
  6246                           
  6247                           ;ST7735_TFT.c: 322: write_command(0x36);
  6248  000CA0  0E36               	movlw	54
  6249  000CA2  EC83  F00B         	call	_write_command
  6250                           
  6251                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6252  000CA6  0EC8               	movlw	200
  6253  000CA8  EC7B  F00B         	call	_write_data
  6254                           
  6255                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6256  000CAC  0E3A               	movlw	58
  6257  000CAE  EC83  F00B         	call	_write_command
  6258                           
  6259                           ;ST7735_TFT.c: 325: write_data(0x05);
  6260  000CB2  0E05               	movlw	5
  6261  000CB4  EC7B  F00B         	call	_write_data
  6262  000CB8  0012               	return		;funcret
  6263  000CBA                     __end_of_Rcmd1:
  6264                           	opt stack 0
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           intcon	equ	0xFF2
  6272                           intcon2	equ	0xFF1
  6273                           postinc0	equ	0xFEE
  6274                           wreg	equ	0xFE8
  6275                           postdec1	equ	0xFE5
  6276                           fsr1l	equ	0xFE1
  6277                           indf2	equ	0xFDF
  6278                           postinc2	equ	0xFDE
  6279                           postdec2	equ	0xFDD
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function _write_data *****************
  6285 ;; Defined at:
  6286 ;;		line 209 in file "ST7735_TFT.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  data_           1    wreg     unsigned char 
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  data_           1   18[COMRAM] unsigned char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;		None               void
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;Total ram usage:        1 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    4
  6307 ;; This function calls:
  6308 ;;		_spiwrite
  6309 ;; This function is called by:
  6310 ;;		_Rcmd1
  6311 ;;		_Rcmd2red
  6312 ;;		_Rcmd3
  6313 ;;		_setAddrWindow
  6314 ;;		_drawPixel
  6315 ;;		_TFT_GreenTab_Initialize
  6316 ;;		_Bcmd
  6317 ;;		_setScrollDefinition
  6318 ;;		_Rcmd2green
  6319 ;;		_VerticalScroll
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           	psect	text27
  6324  0016F6                     __ptext27:
  6325                           	opt stack 0
  6326  0016F6                     _write_data:
  6327                           	opt stack 22
  6328                           
  6329                           ;incstack = 0
  6330                           ;write_data@data_ stored from wreg
  6331  0016F6  6E13               	movwf	write_data@data_,c
  6332                           
  6333                           ;ST7735_TFT.c: 211: PORTCbits.RC2 = 0;
  6334  0016F8  9482               	bcf	3970,2,c	;volatile
  6335                           
  6336                           ;ST7735_TFT.c: 212: PORTCbits.RC0 = 1;
  6337  0016FA  8082               	bsf	3970,0,c	;volatile
  6338                           
  6339                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6340  0016FC  5013               	movf	write_data@data_,w,c
  6341  0016FE  EC5F  F00B         	call	_spiwrite
  6342                           
  6343                           ;ST7735_TFT.c: 214: PORTCbits.RC2 = 1;
  6344  001702  8482               	bsf	3970,2,c	;volatile
  6345  001704  0012               	return		;funcret
  6346  001706                     __end_of_write_data:
  6347                           	opt stack 0
  6348                           tblptru	equ	0xFF8
  6349                           tblptrh	equ	0xFF7
  6350                           tblptrl	equ	0xFF6
  6351                           tablat	equ	0xFF5
  6352                           prodh	equ	0xFF4
  6353                           prodl	equ	0xFF3
  6354                           intcon	equ	0xFF2
  6355                           intcon2	equ	0xFF1
  6356                           postinc0	equ	0xFEE
  6357                           wreg	equ	0xFE8
  6358                           postdec1	equ	0xFE5
  6359                           fsr1l	equ	0xFE1
  6360                           indf2	equ	0xFDF
  6361                           postinc2	equ	0xFDE
  6362                           postdec2	equ	0xFDD
  6363                           fsr2h	equ	0xFDA
  6364                           fsr2l	equ	0xFD9
  6365                           status	equ	0xFD8
  6366                           
  6367 ;; *************** function _write_command *****************
  6368 ;; Defined at:
  6369 ;;		line 198 in file "ST7735_TFT.c"
  6370 ;; Parameters:    Size  Location     Type
  6371 ;;  cmd_            1    wreg     unsigned char 
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;  cmd_            1   18[COMRAM] unsigned char 
  6374 ;; Return value:  Size  Location     Type
  6375 ;;		None               void
  6376 ;; Registers used:
  6377 ;;		wreg, status,2, cstack
  6378 ;; Tracked objects:
  6379 ;;		On entry : 0/0
  6380 ;;		On exit  : 0/0
  6381 ;;		Unchanged: 0/0
  6382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;Total ram usage:        1 bytes
  6388 ;; Hardware stack levels used:    1
  6389 ;; Hardware stack levels required when called:    4
  6390 ;; This function calls:
  6391 ;;		_spiwrite
  6392 ;; This function is called by:
  6393 ;;		_Rcmd1
  6394 ;;		_Rcmd2red
  6395 ;;		_Rcmd3
  6396 ;;		_setAddrWindow
  6397 ;;		_TFT_GreenTab_Initialize
  6398 ;;		_Bcmd
  6399 ;;		_setScrollDefinition
  6400 ;;		_Rcmd2green
  6401 ;;		_VerticalScroll
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text28
  6406  001706                     __ptext28:
  6407                           	opt stack 0
  6408  001706                     _write_command:
  6409                           	opt stack 22
  6410                           
  6411                           ;incstack = 0
  6412                           ;write_command@cmd_ stored from wreg
  6413  001706  6E13               	movwf	write_command@cmd_,c
  6414                           
  6415                           ;ST7735_TFT.c: 200: PORTCbits.RC2 = 0;
  6416  001708  9482               	bcf	3970,2,c	;volatile
  6417                           
  6418                           ;ST7735_TFT.c: 202: PORTCbits.RC0 = 0;
  6419  00170A  9082               	bcf	3970,0,c	;volatile
  6420                           
  6421                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6422  00170C  5013               	movf	write_command@cmd_,w,c
  6423  00170E  EC5F  F00B         	call	_spiwrite
  6424                           
  6425                           ;ST7735_TFT.c: 205: PORTCbits.RC2 = 1;
  6426  001712  8482               	bsf	3970,2,c	;volatile
  6427  001714  0012               	return		;funcret
  6428  001716                     __end_of_write_command:
  6429                           	opt stack 0
  6430                           tblptru	equ	0xFF8
  6431                           tblptrh	equ	0xFF7
  6432                           tblptrl	equ	0xFF6
  6433                           tablat	equ	0xFF5
  6434                           prodh	equ	0xFF4
  6435                           prodl	equ	0xFF3
  6436                           intcon	equ	0xFF2
  6437                           intcon2	equ	0xFF1
  6438                           postinc0	equ	0xFEE
  6439                           wreg	equ	0xFE8
  6440                           postdec1	equ	0xFE5
  6441                           fsr1l	equ	0xFE1
  6442                           indf2	equ	0xFDF
  6443                           postinc2	equ	0xFDE
  6444                           postdec2	equ	0xFDD
  6445                           fsr2h	equ	0xFDA
  6446                           fsr2l	equ	0xFD9
  6447                           status	equ	0xFD8
  6448                           
  6449 ;; *************** function _spiwrite *****************
  6450 ;; Defined at:
  6451 ;;		line 189 in file "ST7735_TFT.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;  spidata         1    wreg     unsigned char 
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;  spidata         1   17[COMRAM] unsigned char 
  6456 ;;  x               1   16[COMRAM] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;		None               void
  6459 ;; Registers used:
  6460 ;;		wreg
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;Total ram usage:        2 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    3
  6473 ;; This function calls:
  6474 ;;		Nothing
  6475 ;; This function is called by:
  6476 ;;		_write_command
  6477 ;;		_write_data
  6478 ;;		_drawFastVLine
  6479 ;;		_fillRectangle
  6480 ;;		_drawFastHLine
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text29
  6485  0016BE                     __ptext29:
  6486                           	opt stack 0
  6487  0016BE                     _spiwrite:
  6488                           	opt stack 24
  6489                           
  6490                           ;incstack = 0
  6491                           ;spiwrite@spidata stored from wreg
  6492  0016BE  6E12               	movwf	spiwrite@spidata,c
  6493                           
  6494                           ;ST7735_TFT.c: 191: char x;
  6495                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6496  0016C0  969E               	bcf	3998,3,c	;volatile
  6497                           
  6498                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6499  0016C2  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6500                           
  6501                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6502  0016C6  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6503                           
  6504                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6505  0016CA  D000               	goto	l230
  6506  0016CC                     l230:
  6507  0016CC  A0C7               	btfss	4039,0,c	;volatile
  6508  0016CE  D7FE               	goto	l230
  6509  0016D0  0012               	return		;funcret
  6510  0016D2                     __end_of_spiwrite:
  6511                           	opt stack 0
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           intcon	equ	0xFF2
  6519                           intcon2	equ	0xFF1
  6520                           postinc0	equ	0xFEE
  6521                           wreg	equ	0xFE8
  6522                           postdec1	equ	0xFE5
  6523                           fsr1l	equ	0xFE1
  6524                           indf2	equ	0xFDF
  6525                           postinc2	equ	0xFDE
  6526                           postdec2	equ	0xFDD
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function _LCD_Reset *****************
  6532 ;; Defined at:
  6533 ;;		line 217 in file "ST7735_TFT.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;		None               void
  6540 ;; Registers used:
  6541 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    5
  6554 ;; This function calls:
  6555 ;;		_delay_ms
  6556 ;; This function is called by:
  6557 ;;		_Initialize_Screen
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text30
  6562  0016D2                     __ptext30:
  6563                           	opt stack 0
  6564  0016D2                     _LCD_Reset:
  6565                           	opt stack 24
  6566                           
  6567                           ;ST7735_TFT.c: 219: PORTCbits.RC4 = 0;
  6568                           
  6569                           ;incstack = 0
  6570  0016D2  9882               	bcf	3970,4,c	;volatile
  6571                           
  6572                           ;ST7735_TFT.c: 220: delay_ms(100);
  6573  0016D4  0E00               	movlw	0
  6574  0016D6  6E18               	movwf	delay_ms@ms+1,c
  6575  0016D8  0E64               	movlw	100
  6576  0016DA  6E17               	movwf	delay_ms@ms,c
  6577  0016DC  ECF1  F009         	call	_delay_ms	;wreg free
  6578                           
  6579                           ;ST7735_TFT.c: 221: PORTCbits.RC4 = 1;
  6580  0016E0  8882               	bsf	3970,4,c	;volatile
  6581  0016E2  0012               	return		;funcret
  6582  0016E4                     __end_of_LCD_Reset:
  6583                           	opt stack 0
  6584                           tblptru	equ	0xFF8
  6585                           tblptrh	equ	0xFF7
  6586                           tblptrl	equ	0xFF6
  6587                           tablat	equ	0xFF5
  6588                           prodh	equ	0xFF4
  6589                           prodl	equ	0xFF3
  6590                           intcon	equ	0xFF2
  6591                           intcon2	equ	0xFF1
  6592                           postinc0	equ	0xFEE
  6593                           wreg	equ	0xFE8
  6594                           postdec1	equ	0xFE5
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _delay_ms *****************
  6604 ;; Defined at:
  6605 ;;		line 64 in file "ST7735_TFT.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  ms              2   22[COMRAM] int 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  count           2   26[COMRAM] int 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;Total ram usage:        6 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    4
  6626 ;; This function calls:
  6627 ;;		___wmul
  6628 ;; This function is called by:
  6629 ;;		_LCD_Reset
  6630 ;;		_Rcmd1
  6631 ;;		_Rcmd3
  6632 ;;		_Bcmd
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text31
  6637  0013E2                     __ptext31:
  6638                           	opt stack 0
  6639  0013E2                     _delay_ms:
  6640                           	opt stack 23
  6641                           
  6642                           ;ST7735_TFT.c: 70: int count;
  6643                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  6644                           
  6645                           ;incstack = 0
  6646  0013E2  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6647  0013E6  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6648  0013EA  0E00               	movlw	0
  6649  0013EC  6E14               	movwf	___wmul@multiplicand+1,c
  6650  0013EE  0EFA               	movlw	250
  6651  0013F0  6E13               	movwf	___wmul@multiplicand,c
  6652  0013F2  EC0A  F00B         	call	___wmul	;wreg free
  6653  0013F6  C011  F01B         	movff	?___wmul,delay_ms@count
  6654  0013FA  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6655                           
  6656                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  6657  0013FE  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6658  001402  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6659  001406  1E19               	comf	??_delay_ms,f,c
  6660  001408  1E1A               	comf	??_delay_ms+1,f,c
  6661  00140A  4A19               	infsnz	??_delay_ms,f,c
  6662  00140C  2A1A               	incf	??_delay_ms+1,f,c
  6663  00140E  0EFF               	movlw	255
  6664  001410  2419               	addwf	??_delay_ms,w,c
  6665  001412  6E1B               	movwf	delay_ms@count,c
  6666  001414  0EFF               	movlw	255
  6667  001416  201A               	addwfc	??_delay_ms+1,w,c
  6668  001418  6E1C               	movwf	delay_ms@count+1,c
  6669                           
  6670                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  6671  00141A  0EB8               	movlw	184
  6672  00141C  6EB1               	movwf	4017,c	;volatile
  6673                           
  6674                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  6675  00141E  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  6676                           
  6677                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  6678  001422  501C               	movf	delay_ms@count+1,w,c
  6679  001424  6EB3               	movwf	4019,c	;volatile
  6680                           
  6681                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  6682  001426  92A1               	bcf	4001,1,c	;volatile
  6683                           
  6684                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  6685  001428  80B1               	bsf	4017,0,c	;volatile
  6686                           
  6687                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  6688  00142A  D000               	goto	l220
  6689  00142C                     l220:
  6690  00142C  A2A1               	btfss	4001,1,c	;volatile
  6691  00142E  D7FE               	goto	l220
  6692                           
  6693                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  6694  001430  90B1               	bcf	4017,0,c	;volatile
  6695  001432  0012               	return		;funcret
  6696  001434                     __end_of_delay_ms:
  6697                           	opt stack 0
  6698                           tblptru	equ	0xFF8
  6699                           tblptrh	equ	0xFF7
  6700                           tblptrl	equ	0xFF6
  6701                           tablat	equ	0xFF5
  6702                           prodh	equ	0xFF4
  6703                           prodl	equ	0xFF3
  6704                           intcon	equ	0xFF2
  6705                           intcon2	equ	0xFF1
  6706                           postinc0	equ	0xFEE
  6707                           wreg	equ	0xFE8
  6708                           postdec1	equ	0xFE5
  6709                           fsr1l	equ	0xFE1
  6710                           indf2	equ	0xFDF
  6711                           postinc2	equ	0xFDE
  6712                           postdec2	equ	0xFDD
  6713                           fsr2h	equ	0xFDA
  6714                           fsr2l	equ	0xFD9
  6715                           status	equ	0xFD8
  6716                           
  6717 ;; *************** function ___wmul *****************
  6718 ;; Defined at:
  6719 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  multiplier      2   16[COMRAM] unsigned int 
  6722 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  product         2   20[COMRAM] unsigned int 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;                  2   16[COMRAM] unsigned int 
  6727 ;; Registers used:
  6728 ;;		wreg, status,2, status,0, prodl, prodh
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;Total ram usage:        6 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    3
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		_delay_ms
  6745 ;;		_drawChar
  6746 ;;		_printf
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text32
  6751  001614                     __ptext32:
  6752                           	opt stack 0
  6753  001614                     ___wmul:
  6754                           	opt stack 26
  6755                           
  6756                           ;incstack = 0
  6757  001614  5011               	movf	___wmul@multiplier,w,c
  6758  001616  0213               	mulwf	___wmul@multiplicand,c
  6759  001618  CFF3 F015          	movff	prodl,___wmul@product
  6760  00161C  CFF4 F016          	movff	prodh,___wmul@product+1
  6761  001620  5011               	movf	___wmul@multiplier,w,c
  6762  001622  0214               	mulwf	___wmul@multiplicand+1,c
  6763  001624  50F3               	movf	prodl,w,c
  6764  001626  2616               	addwf	___wmul@product+1,f,c
  6765  001628  5012               	movf	___wmul@multiplier+1,w,c
  6766  00162A  0213               	mulwf	___wmul@multiplicand,c
  6767  00162C  50F3               	movf	prodl,w,c
  6768  00162E  2616               	addwf	___wmul@product+1,f,c
  6769  001630  C015  F011         	movff	___wmul@product,?___wmul
  6770  001634  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6771  001638  D000               	goto	l505
  6772  00163A                     l505:
  6773  00163A  0012               	return		;funcret
  6774  00163C                     __end_of___wmul:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           intcon2	equ	0xFF1
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           postdec1	equ	0xFE5
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function _Deactivate_Buzzer *****************
  6796 ;; Defined at:
  6797 ;;		line 223 in file "Lab10.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;		None
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, status,2
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:        0 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    3
  6818 ;; This function calls:
  6819 ;;		Nothing
  6820 ;; This function is called by:
  6821 ;;		_main
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           	psect	text33
  6826  001730                     __ptext33:
  6827                           	opt stack 0
  6828  001730                     _Deactivate_Buzzer:
  6829                           	opt stack 27
  6830                           
  6831                           ;Lab10.c: 225: CCP2CON = 0x0;
  6832                           
  6833                           ;incstack = 0
  6834  001730  0E00               	movlw	0
  6835  001732  6EBA               	movwf	4026,c	;volatile
  6836                           
  6837                           ;Lab10.c: 226: PORTBbits.RB3 = 0;
  6838  001734  9681               	bcf	3969,3,c	;volatile
  6839  001736  0012               	return		;funcret
  6840  001738                     __end_of_Deactivate_Buzzer:
  6841                           	opt stack 0
  6842                           tblptru	equ	0xFF8
  6843                           tblptrh	equ	0xFF7
  6844                           tblptrl	equ	0xFF6
  6845                           tablat	equ	0xFF5
  6846                           prodh	equ	0xFF4
  6847                           prodl	equ	0xFF3
  6848                           intcon	equ	0xFF2
  6849                           intcon2	equ	0xFF1
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           postdec1	equ	0xFE5
  6853                           fsr1l	equ	0xFE1
  6854                           indf2	equ	0xFDF
  6855                           postinc2	equ	0xFDE
  6856                           postdec2	equ	0xFDD
  6857                           fsr2h	equ	0xFDA
  6858                           fsr2l	equ	0xFD9
  6859                           status	equ	0xFD8
  6860                           
  6861 ;; *************** function _Activate_Buzzer *****************
  6862 ;; Defined at:
  6863 ;;		line 215 in file "Lab10.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;		None
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;		None
  6868 ;; Return value:  Size  Location     Type
  6869 ;;		None               void
  6870 ;; Registers used:
  6871 ;;		wreg, status,2
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;Total ram usage:        0 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    3
  6884 ;; This function calls:
  6885 ;;		Nothing
  6886 ;; This function is called by:
  6887 ;;		_main
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           	psect	text34
  6892  0016E4                     __ptext34:
  6893                           	opt stack 0
  6894  0016E4                     _Activate_Buzzer:
  6895                           	opt stack 27
  6896                           
  6897                           ;Lab10.c: 217: PR2 = 0b11111001;
  6898                           
  6899                           ;incstack = 0
  6900  0016E4  0EF9               	movlw	249
  6901  0016E6  6ECB               	movwf	4043,c	;volatile
  6902                           
  6903                           ;Lab10.c: 218: T2CON = 0b00000101;
  6904  0016E8  0E05               	movlw	5
  6905  0016EA  6ECA               	movwf	4042,c	;volatile
  6906                           
  6907                           ;Lab10.c: 219: CCPR2L = 0b01001010;
  6908  0016EC  0E4A               	movlw	74
  6909  0016EE  6EBB               	movwf	4027,c	;volatile
  6910                           
  6911                           ;Lab10.c: 220: CCP2CON = 0b00111100;
  6912  0016F0  0E3C               	movlw	60
  6913  0016F2  6EBA               	movwf	4026,c	;volatile
  6914  0016F4  0012               	return		;funcret
  6915  0016F6                     __end_of_Activate_Buzzer:
  6916                           	opt stack 0
  6917                           tblptru	equ	0xFF8
  6918                           tblptrh	equ	0xFF7
  6919                           tblptrl	equ	0xFF6
  6920                           tablat	equ	0xFF5
  6921                           prodh	equ	0xFF4
  6922                           prodl	equ	0xFF3
  6923                           intcon	equ	0xFF2
  6924                           intcon2	equ	0xFF1
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           postdec1	equ	0xFE5
  6928                           fsr1l	equ	0xFE1
  6929                           indf2	equ	0xFDF
  6930                           postinc2	equ	0xFDE
  6931                           postdec2	equ	0xFDD
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _chkisr *****************
  6937 ;; Defined at:
  6938 ;;		line 87 in file "Lab10.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;		None               void
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, status,0, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:       14 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    2
  6959 ;; This function calls:
  6960 ;;		_INT0_isr
  6961 ;;		_TIMER1_isr
  6962 ;; This function is called by:
  6963 ;;		Interrupt level 2
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	intcode
  6968  000008                     __pintcode:
  6969                           	opt stack 0
  6970  000008                     _chkisr:
  6971                           	opt stack 20
  6972                           
  6973                           ;incstack = 0
  6974  000008  CFFA F003          	movff	pclath,??_chkisr
  6975  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6976  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6977  000014  ED1A  F009         	call	int_func,f	;refresh shadow registers
  6978                           pclatu	equ	0xFFB
  6979                           pclath	equ	0xFFA
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           prodh	equ	0xFF4
  6985                           prodl	equ	0xFF3
  6986                           intcon	equ	0xFF2
  6987                           intcon2	equ	0xFF1
  6988                           postinc0	equ	0xFEE
  6989                           fsr0l	equ	0xFE9
  6990                           wreg	equ	0xFE8
  6991                           postdec1	equ	0xFE5
  6992                           fsr1l	equ	0xFE1
  6993                           indf2	equ	0xFDF
  6994                           postinc2	equ	0xFDE
  6995                           postdec2	equ	0xFDD
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8
  6999                           
  7000                           	psect	intcode_body
  7001  001234                     __pintcode_body:
  7002                           	opt stack 20
  7003  001234                     int_func:
  7004                           	opt stack 20
  7005  001234  0006               	pop		; remove dummy address from shadow register refresh
  7006  001236  CFEA F006          	movff	fsr0h,??_chkisr+3
  7007  00123A  CFE1 F007          	movff	fsr1l,??_chkisr+4
  7008  00123E  CFE2 F008          	movff	fsr1h,??_chkisr+5
  7009  001242  CFD9 F009          	movff	fsr2l,??_chkisr+6
  7010  001246  CFDA F00A          	movff	fsr2h,??_chkisr+7
  7011  00124A  CFF3 F00B          	movff	prodl,??_chkisr+8
  7012  00124E  CFF4 F00C          	movff	prodh,??_chkisr+9
  7013  001252  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  7014  001256  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  7015  00125A  CFF8 F00F          	movff	tblptru,??_chkisr+12
  7016  00125E  CFF5 F010          	movff	tablat,??_chkisr+13
  7017                           
  7018                           ;Lab10.c: 89: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  7019  001262  A09E               	btfss	3998,0,c	;volatile
  7020  001264  D003               	goto	i2l1941
  7021  001266  EC92  F00B         	call	_TIMER1_isr	;wreg free
  7022  00126A  D000               	goto	i2l1941
  7023  00126C                     i2l1941:
  7024                           
  7025                           ;Lab10.c: 90: if (INTCONbits.INT0IF == 1) INT0_isr();
  7026  00126C  A2F2               	btfss	intcon,1,c	;volatile
  7027  00126E  D003               	goto	i2l132
  7028  001270  EC8F  F004         	call	_INT0_isr	;wreg free
  7029  001274  D000               	goto	i2l132
  7030  001276                     i2l132:
  7031  001276  C010  FFF5         	movff	??_chkisr+13,tablat
  7032  00127A  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7033  00127E  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7034  001282  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7035  001286  C00C  FFF4         	movff	??_chkisr+9,prodh
  7036  00128A  C00B  FFF3         	movff	??_chkisr+8,prodl
  7037  00128E  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7038  001292  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7039  001296  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7040  00129A  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7041  00129E  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7042  0012A2  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7043  0012A6  C004  FFFB         	movff	??_chkisr+1,pclatu
  7044  0012AA  C003  FFFA         	movff	??_chkisr,pclath
  7045  0012AE  0011               	retfie		f
  7046  0012B0                     __end_of_chkisr:
  7047                           	opt stack 0
  7048                           pclatu	equ	0xFFB
  7049                           pclath	equ	0xFFA
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           intcon	equ	0xFF2
  7057                           intcon2	equ	0xFF1
  7058                           postinc0	equ	0xFEE
  7059                           fsr0h	equ	0xFEA
  7060                           fsr0l	equ	0xFE9
  7061                           wreg	equ	0xFE8
  7062                           postdec1	equ	0xFE5
  7063                           fsr1h	equ	0xFE2
  7064                           fsr1l	equ	0xFE1
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _TIMER1_isr *****************
  7073 ;; Defined at:
  7074 ;;		line 93 in file "Lab10.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;		None
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;		None               void
  7081 ;; Registers used:
  7082 ;;		wreg, status,2
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;Total ram usage:        0 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; This function calls:
  7095 ;;		Nothing
  7096 ;; This function is called by:
  7097 ;;		_chkisr
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           	psect	text36
  7102  001724                     __ptext36:
  7103                           	opt stack 0
  7104  001724                     _TIMER1_isr:
  7105                           	opt stack 21
  7106                           
  7107                           ;Lab10.c: 95: Nec_state = 0;
  7108                           
  7109                           ;incstack = 0
  7110  001724  0E00               	movlw	0
  7111  001726  6E6A               	movwf	_Nec_state,c
  7112                           
  7113                           ;Lab10.c: 96: INTCON2bits.INTEDG0 = 0;
  7114  001728  9CF1               	bcf	intcon2,6,c	;volatile
  7115                           
  7116                           ;Lab10.c: 97: T1CONbits.TMR1ON = 0;
  7117  00172A  90CD               	bcf	4045,0,c	;volatile
  7118                           
  7119                           ;Lab10.c: 98: PIR1bits.TMR1IF = 0;
  7120  00172C  909E               	bcf	3998,0,c	;volatile
  7121  00172E  0012               	return		;funcret
  7122  001730                     __end_of_TIMER1_isr:
  7123                           	opt stack 0
  7124                           pclatu	equ	0xFFB
  7125                           pclath	equ	0xFFA
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodh	equ	0xFF4
  7131                           prodl	equ	0xFF3
  7132                           intcon	equ	0xFF2
  7133                           intcon2	equ	0xFF1
  7134                           postinc0	equ	0xFEE
  7135                           fsr0h	equ	0xFEA
  7136                           fsr0l	equ	0xFE9
  7137                           wreg	equ	0xFE8
  7138                           postdec1	equ	0xFE5
  7139                           fsr1h	equ	0xFE2
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function _INT0_isr *****************
  7149 ;; Defined at:
  7150 ;;		line 107 in file "Lab10.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;		None
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;		None
  7155 ;; Return value:  Size  Location     Type
  7156 ;;		None               void
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0, cstack
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7167 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;Total ram usage:        2 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    1
  7171 ;; This function calls:
  7172 ;;		_force_nec_state0
  7173 ;; This function is called by:
  7174 ;;		_chkisr
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text37
  7179  00091E                     __ptext37:
  7180                           	opt stack 0
  7181  00091E                     _INT0_isr:
  7182                           	opt stack 20
  7183                           
  7184                           ;Lab10.c: 109: INTCONbits.INT0IF = 0;
  7185                           
  7186                           ;incstack = 0
  7187  00091E  92F2               	bcf	intcon,1,c	;volatile
  7188                           
  7189                           ;Lab10.c: 110: if (Nec_state != 0)
  7190  000920  506A               	movf	_Nec_state,w,c
  7191  000922  B4D8               	btfsc	status,2,c
  7192  000924  D094               	goto	i2l1693
  7193                           
  7194                           ;Lab10.c: 111: {
  7195                           ;Lab10.c: 112: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7196  000926  50CE               	movf	4046,w,c	;volatile
  7197  000928  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  7198  00092C  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  7199  00092E  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  7200  000932  6A01               	clrf	??_INT0_isr,c
  7201  000934  1001               	iorwf	??_INT0_isr,w,c
  7202  000936  6E61               	movwf	_Time_Elapsed,c
  7203  000938  5002               	movf	??_INT0_isr+1,w,c
  7204  00093A  6E62               	movwf	_Time_Elapsed+1,c
  7205                           
  7206                           ;Lab10.c: 113: TMR1H = 0;
  7207  00093C  0E00               	movlw	0
  7208  00093E  6ECF               	movwf	4047,c	;volatile
  7209                           
  7210                           ;Lab10.c: 114: TMR1L = 0;
  7211  000940  0E00               	movlw	0
  7212  000942  6ECE               	movwf	4046,c	;volatile
  7213                           
  7214                           ;Lab10.c: 115: }
  7215                           ;Lab10.c: 117: switch(Nec_state)
  7216  000944  D084               	goto	i2l1693
  7217  000946                     i2l1623:
  7218                           
  7219                           ;Lab10.c: 120: {
  7220                           ;Lab10.c: 122: TMR1H = 0;
  7221  000946  0E00               	movlw	0
  7222  000948  6ECF               	movwf	4047,c	;volatile
  7223                           
  7224                           ;Lab10.c: 123: TMR1L = 0;
  7225  00094A  0E00               	movlw	0
  7226  00094C  6ECE               	movwf	4046,c	;volatile
  7227                           
  7228                           ;Lab10.c: 124: PIR1bits.TMR1IF = 0;
  7229  00094E  909E               	bcf	3998,0,c	;volatile
  7230                           
  7231                           ;Lab10.c: 125: T1CON= 0x90;
  7232  000950  0E90               	movlw	144
  7233  000952  6ECD               	movwf	4045,c	;volatile
  7234                           
  7235                           ;Lab10.c: 126: T1CONbits.TMR1ON = 1;
  7236  000954  80CD               	bsf	4045,0,c	;volatile
  7237                           
  7238                           ;Lab10.c: 127: bit_count = 0;
  7239  000956  0E00               	movlw	0
  7240  000958  6E6C               	movwf	_bit_count,c
  7241                           
  7242                           ;Lab10.c: 128: Nec_code = 0;
  7243  00095A  0E00               	movlw	0
  7244  00095C  6E5D               	movwf	_Nec_code,c
  7245  00095E  0E00               	movlw	0
  7246  000960  6E5E               	movwf	_Nec_code+1,c
  7247  000962  0E00               	movlw	0
  7248  000964  6E5F               	movwf	_Nec_code+2,c
  7249  000966  0E00               	movlw	0
  7250  000968  6E60               	movwf	_Nec_code+3,c
  7251                           
  7252                           ;Lab10.c: 129: Nec_state = 1;
  7253  00096A  0E01               	movlw	1
  7254  00096C  6E6A               	movwf	_Nec_state,c
  7255  00096E  D06D               	goto	i2l1687
  7256                           
  7257                           ;Lab10.c: 131: return;
  7258                           
  7259                           ;Lab10.c: 130: INTCON2bits.INTEDG0 = 1;
  7260  000970  D07F               	goto	i2l144
  7261  000972                     i2l1633:
  7262                           
  7263                           ;Lab10.c: 135: {
  7264                           ;Lab10.c: 136: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  7265  000972  0E35               	movlw	53
  7266  000974  5C61               	subwf	_Time_Elapsed,w,c
  7267  000976  0E21               	movlw	33
  7268  000978  5862               	subwfb	_Time_Elapsed+1,w,c
  7269  00097A  A0D8               	btfss	status,0,c
  7270  00097C  D009               	goto	i2l1639
  7271  00097E  0E1C               	movlw	28
  7272  000980  5C61               	subwf	_Time_Elapsed,w,c
  7273  000982  0E25               	movlw	37
  7274  000984  5862               	subwfb	_Time_Elapsed+1,w,c
  7275  000986  B0D8               	btfsc	status,0,c
  7276  000988  D003               	goto	i2l1639
  7277                           
  7278                           ;Lab10.c: 137: {
  7279                           ;Lab10.c: 138: Nec_state = 2;
  7280  00098A  0E02               	movlw	2
  7281  00098C  6E6A               	movwf	_Nec_state,c
  7282                           
  7283                           ;Lab10.c: 139: }
  7284  00098E  D02A               	goto	i2l1665
  7285  000990                     i2l1639:
  7286                           
  7287                           ;Lab10.c: 140: else
  7288                           ;Lab10.c: 141: {
  7289                           ;Lab10.c: 142: force_nec_state0();
  7290  000990  EC9C  F00B         	call	_force_nec_state0	;wreg free
  7291  000994  D027               	goto	i2l1665
  7292  000996  D026               	goto	i2l1665
  7293                           
  7294                           ;Lab10.c: 145: return;
  7295                           
  7296                           ;Lab10.c: 143: }
  7297                           ;Lab10.c: 144: INTCON2bits.INTEDG0 = 0;
  7298  000998  D06B               	goto	i2l144
  7299  00099A                     i2l1645:
  7300                           
  7301                           ;Lab10.c: 149: {
  7302                           ;Lab10.c: 150: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  7303  00099A  0EA1               	movlw	161
  7304  00099C  5C61               	subwf	_Time_Elapsed,w,c
  7305  00099E  0E0F               	movlw	15
  7306  0009A0  5862               	subwfb	_Time_Elapsed+1,w,c
  7307  0009A2  A0D8               	btfss	status,0,c
  7308  0009A4  D009               	goto	i2l1651
  7309  0009A6  0E88               	movlw	136
  7310  0009A8  5C61               	subwf	_Time_Elapsed,w,c
  7311  0009AA  0E13               	movlw	19
  7312  0009AC  5862               	subwfb	_Time_Elapsed+1,w,c
  7313  0009AE  B0D8               	btfsc	status,0,c
  7314  0009B0  D003               	goto	i2l1651
  7315  0009B2                     
  7316                           ;Lab10.c: 151: {
  7317                           ;Lab10.c: 152: Nec_state = 3;
  7318  0009B2  0E03               	movlw	3
  7319  0009B4  6E6A               	movwf	_Nec_state,c
  7320                           
  7321                           ;Lab10.c: 153: }
  7322  0009B6  D049               	goto	i2l1687
  7323  0009B8                     i2l1651:
  7324                           
  7325                           ;Lab10.c: 154: else
  7326                           ;Lab10.c: 155: {
  7327                           ;Lab10.c: 156: force_nec_state0();
  7328  0009B8  EC9C  F00B         	call	_force_nec_state0	;wreg free
  7329  0009BC  D046               	goto	i2l1687
  7330  0009BE  D045               	goto	i2l1687
  7331                           
  7332                           ;Lab10.c: 159: return;
  7333                           
  7334                           ;Lab10.c: 157: }
  7335                           ;Lab10.c: 158: INTCON2bits.INTEDG0 = 1;
  7336  0009C0  D057               	goto	i2l144
  7337  0009C2                     i2l1657:
  7338                           
  7339                           ;Lab10.c: 163: {
  7340                           ;Lab10.c: 164: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  7341  0009C2  0E91               	movlw	145
  7342  0009C4  5C61               	subwf	_Time_Elapsed,w,c
  7343  0009C6  0E01               	movlw	1
  7344  0009C8  5862               	subwfb	_Time_Elapsed+1,w,c
  7345  0009CA  A0D8               	btfss	status,0,c
  7346  0009CC  D008               	goto	i2l1663
  7347  0009CE  0EBC               	movlw	188
  7348  0009D0  5C61               	subwf	_Time_Elapsed,w,c
  7349  0009D2  0E02               	movlw	2
  7350  0009D4  5862               	subwfb	_Time_Elapsed+1,w,c
  7351  0009D6  B0D8               	btfsc	status,0,c
  7352  0009D8  D002               	goto	i2l1663
  7353                           
  7354                           ;Lab10.c: 165: {
  7355                           ;Lab10.c: 166: Nec_state = 4;
  7356  0009DA  0E04               	movlw	4
  7357  0009DC  D7D7               	goto	L4
  7358  0009DE                     i2l1663:
  7359                           
  7360                           ;Lab10.c: 168: else
  7361                           ;Lab10.c: 169: {
  7362                           ;Lab10.c: 170: force_nec_state0();
  7363  0009DE  EC9C  F00B         	call	_force_nec_state0	;wreg free
  7364  0009E2  D000               	goto	i2l1665
  7365  0009E4                     i2l1665:
  7366                           
  7367                           ;Lab10.c: 171: }
  7368                           ;Lab10.c: 172: INTCON2bits.INTEDG0 = 0;
  7369  0009E4  9CF1               	bcf	intcon2,6,c	;volatile
  7370                           
  7371                           ;Lab10.c: 173: return;
  7372  0009E6  D044               	goto	i2l144
  7373  0009E8                     i2l1669:
  7374                           
  7375                           ;Lab10.c: 177: {
  7376                           ;Lab10.c: 178: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  7377  0009E8  0E91               	movlw	145
  7378  0009EA  5C61               	subwf	_Time_Elapsed,w,c
  7379  0009EC  0E01               	movlw	1
  7380  0009EE  5862               	subwfb	_Time_Elapsed+1,w,c
  7381  0009F0  A0D8               	btfss	status,0,c
  7382  0009F2  D028               	goto	i2l1685
  7383  0009F4  0E08               	movlw	8
  7384  0009F6  5C61               	subwf	_Time_Elapsed,w,c
  7385  0009F8  0E07               	movlw	7
  7386  0009FA  5862               	subwfb	_Time_Elapsed+1,w,c
  7387  0009FC  B0D8               	btfsc	status,0,c
  7388  0009FE  D022               	goto	i2l1685
  7389                           
  7390                           ;Lab10.c: 179: {
  7391                           ;Lab10.c: 180: Nec_code = Nec_code << 1;
  7392  000A00  90D8               	bcf	status,0,c
  7393  000A02  345D               	rlcf	_Nec_code,w,c
  7394  000A04  6E5D               	movwf	_Nec_code,c
  7395  000A06  345E               	rlcf	_Nec_code+1,w,c
  7396  000A08  6E5E               	movwf	_Nec_code+1,c
  7397  000A0A  345F               	rlcf	_Nec_code+2,w,c
  7398  000A0C  6E5F               	movwf	_Nec_code+2,c
  7399  000A0E  3460               	rlcf	_Nec_code+3,w,c
  7400  000A10  6E60               	movwf	_Nec_code+3,c
  7401                           
  7402                           ;Lab10.c: 181: if(Time_Elapsed > 1000)
  7403  000A12  0EE9               	movlw	233
  7404  000A14  5C61               	subwf	_Time_Elapsed,w,c
  7405  000A16  0E03               	movlw	3
  7406  000A18  5862               	subwfb	_Time_Elapsed+1,w,c
  7407  000A1A  A0D8               	btfss	status,0,c
  7408  000A1C  D007               	goto	i2l1677
  7409                           
  7410                           ;Lab10.c: 182: {
  7411                           ;Lab10.c: 183: Nec_code++;
  7412  000A1E  0E01               	movlw	1
  7413  000A20  265D               	addwf	_Nec_code,f,c
  7414  000A22  0E00               	movlw	0
  7415  000A24  225E               	addwfc	_Nec_code+1,f,c
  7416  000A26  225F               	addwfc	_Nec_code+2,f,c
  7417  000A28  2260               	addwfc	_Nec_code+3,f,c
  7418  000A2A  D000               	goto	i2l1677
  7419  000A2C                     i2l1677:
  7420                           
  7421                           ;Lab10.c: 184: }
  7422                           ;Lab10.c: 185: bit_count++;
  7423  000A2C  2A6C               	incf	_bit_count,f,c
  7424                           
  7425                           ;Lab10.c: 186: if(bit_count > 31)
  7426  000A2E  0E1F               	movlw	31
  7427  000A30  646C               	cpfsgt	_bit_count,c
  7428  000A32  D7BF               	goto	L5
  7429                           
  7430                           ;Lab10.c: 187: {
  7431                           ;Lab10.c: 188: nec_ok = 1;
  7432  000A34  0E00               	movlw	0
  7433  000A36  6E66               	movwf	_nec_ok+1,c
  7434  000A38  0E01               	movlw	1
  7435  000A3A  6E65               	movwf	_nec_ok,c
  7436                           
  7437                           ;Lab10.c: 189: INT0IE = 0;
  7438  000A3C  98F2               	bcf	intcon,4,c	;volatile
  7439                           
  7440                           ;Lab10.c: 190: Nec_state = 0;
  7441  000A3E  0E00               	movlw	0
  7442  000A40  6E6A               	movwf	_Nec_state,c
  7443  000A42  D7B7               	goto	L5
  7444  000A44                     i2l1685:
  7445                           
  7446                           ;Lab10.c: 194: else
  7447                           ;Lab10.c: 195: {
  7448                           ;Lab10.c: 196: force_nec_state0();
  7449  000A44  EC9C  F00B         	call	_force_nec_state0	;wreg free
  7450  000A48  D000               	goto	i2l1687
  7451  000A4A                     i2l1687:
  7452                           
  7453                           ;Lab10.c: 197: }
  7454                           ;Lab10.c: 198: INTCON2bits.INTEDG0 = 1;
  7455  000A4A  8CF1               	bsf	intcon2,6,c	;volatile
  7456                           
  7457                           ;Lab10.c: 200: }
  7458                           ;Lab10.c: 201: }
  7459                           
  7460                           ;Lab10.c: 199: return;
  7461  000A4C  D011               	goto	i2l144
  7462  000A4E                     i2l1693:
  7463  000A4E  506A               	movf	_Nec_state,w,c
  7464                           
  7465                           ; Switch size 1, requested type "space"
  7466                           ; Number of cases is 5, Range of values is 0 to 4
  7467                           ; switch strategies available:
  7468                           ; Name         Instructions Cycles
  7469                           ; simple_byte           16     9 (average)
  7470                           ;	Chosen strategy is simple_byte
  7471  000A50  0A00               	xorlw	0	; case 0
  7472  000A52  B4D8               	btfsc	status,2,c
  7473  000A54  D778               	goto	i2l1623
  7474  000A56  0A01               	xorlw	1	; case 1
  7475  000A58  B4D8               	btfsc	status,2,c
  7476  000A5A  D78B               	goto	i2l1633
  7477  000A5C  0A03               	xorlw	3	; case 2
  7478  000A5E  B4D8               	btfsc	status,2,c
  7479  000A60  D79C               	goto	i2l1645
  7480  000A62  0A01               	xorlw	1	; case 3
  7481  000A64  B4D8               	btfsc	status,2,c
  7482  000A66  D7AD               	goto	i2l1657
  7483  000A68  0A07               	xorlw	7	; case 4
  7484  000A6A  B4D8               	btfsc	status,2,c
  7485  000A6C  D7BD               	goto	i2l1669
  7486  000A6E  D000               	goto	i2l144
  7487  000A70                     i2l144:
  7488  000A70  0012               	return		;funcret
  7489  000A72                     __end_of_INT0_isr:
  7490                           	opt stack 0
  7491                           pclatu	equ	0xFFB
  7492                           pclath	equ	0xFFA
  7493                           tblptru	equ	0xFF8
  7494                           tblptrh	equ	0xFF7
  7495                           tblptrl	equ	0xFF6
  7496                           tablat	equ	0xFF5
  7497                           prodh	equ	0xFF4
  7498                           prodl	equ	0xFF3
  7499                           intcon	equ	0xFF2
  7500                           intcon2	equ	0xFF1
  7501                           postinc0	equ	0xFEE
  7502                           fsr0h	equ	0xFEA
  7503                           fsr0l	equ	0xFE9
  7504                           wreg	equ	0xFE8
  7505                           postdec1	equ	0xFE5
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function _force_nec_state0 *****************
  7516 ;; Defined at:
  7517 ;;		line 101 in file "Lab10.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;		None
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;		None
  7522 ;; Return value:  Size  Location     Type
  7523 ;;		None               void
  7524 ;; Registers used:
  7525 ;;		wreg, status,2
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;Total ram usage:        0 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; This function calls:
  7538 ;;		Nothing
  7539 ;; This function is called by:
  7540 ;;		_INT0_isr
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           	psect	text38
  7545  001738                     __ptext38:
  7546                           	opt stack 0
  7547  001738                     _force_nec_state0:
  7548                           	opt stack 20
  7549                           
  7550                           ;Lab10.c: 103: Nec_state=0;
  7551                           
  7552                           ;incstack = 0
  7553  001738  0E00               	movlw	0
  7554  00173A  6E6A               	movwf	_Nec_state,c
  7555                           
  7556                           ;Lab10.c: 104: T1CONbits.TMR1ON = 0;
  7557  00173C  90CD               	bcf	4045,0,c	;volatile
  7558  00173E  0012               	return		;funcret
  7559  001740                     __end_of_force_nec_state0:
  7560                           	opt stack 0
  7561                           pclatu	equ	0xFFB
  7562                           pclath	equ	0xFFA
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           intcon2	equ	0xFF1
  7571                           postinc0	equ	0xFEE
  7572                           fsr0h	equ	0xFEA
  7573                           fsr0l	equ	0xFE9
  7574                           wreg	equ	0xFE8
  7575                           postdec1	equ	0xFE5
  7576                           fsr1h	equ	0xFE2
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           pclatu	equ	0xFFB
  7585                           pclath	equ	0xFFA
  7586                           tblptru	equ	0xFF8
  7587                           tblptrh	equ	0xFF7
  7588                           tblptrl	equ	0xFF6
  7589                           tablat	equ	0xFF5
  7590                           prodh	equ	0xFF4
  7591                           prodl	equ	0xFF3
  7592                           intcon	equ	0xFF2
  7593                           intcon2	equ	0xFF1
  7594                           postinc0	equ	0xFEE
  7595                           fsr0h	equ	0xFEA
  7596                           fsr0l	equ	0xFE9
  7597                           wreg	equ	0xFE8
  7598                           postdec1	equ	0xFE5
  7599                           fsr1h	equ	0xFE2
  7600                           fsr1l	equ	0xFE1
  7601                           indf2	equ	0xFDF
  7602                           postinc2	equ	0xFDE
  7603                           postdec2	equ	0xFDD
  7604                           fsr2h	equ	0xFDA
  7605                           fsr2l	equ	0xFD9
  7606                           status	equ	0xFD8
  7607                           
  7608                           	psect	rparam
  7609  0000                     pclatu	equ	0xFFB
  7610                           pclath	equ	0xFFA
  7611                           tblptru	equ	0xFF8
  7612                           tblptrh	equ	0xFF7
  7613                           tblptrl	equ	0xFF6
  7614                           tablat	equ	0xFF5
  7615                           prodh	equ	0xFF4
  7616                           prodl	equ	0xFF3
  7617                           intcon	equ	0xFF2
  7618                           intcon2	equ	0xFF1
  7619                           postinc0	equ	0xFEE
  7620                           fsr0h	equ	0xFEA
  7621                           fsr0l	equ	0xFE9
  7622                           wreg	equ	0xFE8
  7623                           postdec1	equ	0xFE5
  7624                           fsr1h	equ	0xFE2
  7625                           fsr1l	equ	0xFE1
  7626                           indf2	equ	0xFDF
  7627                           postinc2	equ	0xFDE
  7628                           postdec2	equ	0xFDD
  7629                           fsr2h	equ	0xFDA
  7630                           fsr2l	equ	0xFD9
  7631                           status	equ	0xFD8


Data Sizes:
    Strings     77
    Constant    547
    Data        211
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     111
    BANK0           128      7     101
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_4(CODE[8]), STR_3(CODE[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_2(CODE[13]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _init_UART->_OpenUSART
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   52082
                                             66 COMRAM     4     4      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                  _Initialize_Screen
                   _Wait_Half_Second
                         _drawCircle
                           _drawtext
                         _fillCircle
                          _init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              34    26      8    3201
                                             38 COMRAM    25    17      8
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     265
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20901
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     287
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_Half_Second
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _init_UART
     _OpenUSART
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      7      65       5       78.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 14 16:32:45 2022

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                               _i 006E                       _SSPSTATbits 000FC7  
                    drawCircle@x0 001C                      drawCircle@y0 001E  
                              _D1 0080                                _D2 0095  
                              _D3 00AA               ___wmul@multiplicand 0013  
                             l121 171A                               l220 142C  
                             l230 16CC                               l305 0872  
                             l162 168C                               l500 1374  
                             l333 0F90                               l334 0EFC  
                             l502 138E                               l431 0188  
                             l280 1132                               l336 0F6C  
                             l344 06DC                               l505 163A  
                             l337 0F8E                               l274 15E8  
                             l362 0AE0                               l428 0126  
                             l296 091C                               l298 07F6  
                             l493 134C                               l469 045C  
                             l497 1366                               l498 1368  
                             l499 1372                               l936 165C  
                             l965 109A                               l975 130E  
               ?_Wait_Half_Second 0001                               _PR2 000FCB  
               _Deactivate_Buzzer 1730                               _nbr 0063  
                             _txt 0067                               prod 000FF3  
                             wreg 000FE8                ??_Wait_Half_Second 0011  
              ?_Deactivate_Buzzer 0001                   ??_fillRectangle 001D  
                    __CFG_LVP$OFF 000000           _TFT_GreenTab_Initialize 15EA  
                    __CFG_WDT$OFF 000000                    drawFastVLine@h 0019  
                            l1067 1548                              l4001 0504  
                  drawFastVLine@x 0022                              l4005 050C  
                  drawFastVLine@y 0018                              l3407 15CA  
                            l3415 148C                              l3521 07E4  
                            l3419 14A8                              l3531 0802  
                            l3603 0F70                              l2571 133C  
                            l2731 1058                              l3381 1128  
                            l3365 10BC                              l3525 07F2  
                            l3517 07D8                              l3613 0F8A  
                            l2717 1654                              l3535 0832  
                            l3527 07FA                              l3607 0F7A  
                            l3703 0B42                              l2575 1344  
                            l2567 1332                              l2727 1042  
                            l2751 12D8                              l3369 10F4  
                            l3537 0866                              l3641 0D54  
                            l3625 0CE6                              l2673 1592  
                            l2729 1050                              l3801 0224  
                            l3379 111A                              l3555 08E8  
                            l3547 0894                              l3563 0918  
                            l3539 086A                              l3571 151C  
                            l3651 0DAE                              l2675 159C  
                            l3707 0B94                              l2587 135E  
                            l2579 1350                              l2739 108A  
                            l2755 12FE                              l2747 12C2  
                            l3811 025A                              l3731 0044  
                            l3557 0910                              l3549 08BC  
                            l3637 0D36                              l3581 0EC6  
                            l2749 12D0                              l3805 0254  
                            l3813 026C                              l3741 0082  
                            l3725 0026                              l3831 02CE  
                            l3823 02AC                              l3751 00EA  
                            l3735 004E                              l3569 1516  
                            l3649 0DA6                              l3913 07B2  
                            l3833 02D6                              l3825 02B6  
                            l3737 0064                              l3729 0036  
                            l3587 0F34                              l3851 03A8  
                            l3843 030E                              l3819 0288  
                            l3763 014A                              l3755 00F2  
                            l3861 042C                              l3837 02EE  
                            l3781 01CE                              l3749 00E4  
                            l3599 0F62                              l3687 0AC6  
                            l3839 02F6                              l3847 0322  
                            l3791 020E                              l3783 01D2  
                            l3767 016E                              l3863 0440  
                            l3849 0330                              l3857 0412  
                            l3777 01A8                              l3859 0424  
                            l3795 0214                              l3787 01DE  
                            l3885 06C2                              l3797 0218  
                            l3981 04B4                              l3993 04D6  
                            l3997 04EA                              STR_1 FFB2  
                            STR_2 FFEA                              STR_3 FFC7  
                            STR_4 FFF7                              STR_5 FFD9  
                            u2410 10EA                              u2710 0D10  
                            u2640 0EF4                              u2570 08CA  
                            u2650 0F2A                              _TRMT 007D61  
             ??_Deactivate_Buzzer 0011                              _main 045E  
                            _font FD8F                              fsr0h 000FEA  
                            _txt1 012A                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 005C  
                            pclat 000FFA                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018                   ??_drawFastVLine 001C  
                    ___param_bank 000010                       ?_TIMER1_isr 0001  
                __end_of_INT0_isr 0A72         __end_of_Deactivate_Buzzer 1738  
                 drawFastVLine@hi 0020                   drawFastVLine@lo 0021  
                           ?_main 0001                   drawCircle@ddF_x 0026  
                 drawCircle@ddF_y 0028                   __end_of___lldiv 10AC  
                           _T0CON 000FD5                             _T1CON 000FCD  
                 __end_of___llmod 1320                             _T2CON 000FCA  
                           _T3CON 000FB1                             i2l132 1276  
                           i2l144 0A70                   drawCircle@color 0022  
                           _RCSTA 000FAB                             _TMR0H 000FD7  
                           _TMR1H 000FCF                             _TMR0L 000FD6  
                           _TMR3H 000FB3                             _TMR1L 000FCE  
                           _TMR3L 000FB2                             _SPBRG 000FAF  
                           _PORTA 000F80                             _PORTD 000F83  
                           _PORTE 000F84                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 0BAA                             _Rcmd3 0DC4  
                           _nRBPU 007F8F                   __end_of_dpowers FF92  
                           _color 0100                             _font2 FE8E  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
                 __end_of_isdigit 165E             fillCircleHelper@delta 002B  
                           _putch 1716             fillCircleHelper@color 002D  
                           main@i 0044                    __CFG_BOREN$OFF 000000  
                           tablat 000FF5                             status 000FD8  
                 write_data@data_ 0013                   __initialization 1134  
                    __end_of_main 061A                      __end_of_font FE8E  
                __end_of_Rcmd2red 1588                            ??_main 0043  
                   __activetblptr 000002                 __end_of_LCD_Reset 16E4  
       ??_TFT_GreenTab_Initialize 001D                            ?_Rcmd1 0001  
                          ?_Rcmd3 0001                            _ADCON1 000FC1  
                ___llmod@dividend 001E                            _CCPR2L 000FBB  
                          ?_putch 0001                            _INT0IE 007F94  
                          i2l1623 0946                            i2l1633 0972  
                          i2l1651 09B8                            i2l1645 099A  
                          i2l1663 09DE                            i2l1639 0990  
                          i2l1665 09E4                            i2l1657 09C2  
                          i2l1677 0A2C                            i2l1685 0A44  
                          i2l1669 09E8                            i2l1693 0A4E  
                          i2l1941 126C                            i2l1687 0A4A  
                          _OSCCON 000FD3               __size_of_TIMER1_isr 000C  
                          _SPBRGH 000FB0                            _SSPBUF 000FC9  
                _force_nec_state0 1738                  __end_of_delay_ms 1434  
                __end_of_fillRect 14CC                  __end_of_drawChar 091E  
              __size_of_OpenUSART 0070          __size_of_Activate_Buzzer 0012  
                          ___wmul 1614         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0DC4                         ??___lldiv 0019  
                       ??___llmod 0026                            _chkisr 0008  
                          _array1 0047                            _buffer 00BF  
                          _nec_ok 0065                            clear_0 113A  
                          clear_1 1146        __size_of_Deactivate_Buzzer 0008  
                          _printf 001C                      drawtext@size 0040  
                          _strcpy 1588                            _strlen 150C  
                    __pdataCOMRAM 0047                         ??_isdigit 0011  
                    __mediumconst FD8E                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0011                  __end_of_spiwrite 16D2  
                      __accesstop 0080           __end_of__initialization 11AC  
                       ?_INT0_isr 0001                     ___rparam_used 000001  
                   __end_of_Rcmd1 0CBA                     __end_of_Rcmd3 0EB6  
                  __pcstackCOMRAM 0001                      __pidataBANK0 14CC  
                    __pidataBANK1 11B6                     __end_of_font2 FF6A  
                   __end_of_putch 1724                    drawPixel@color 0019  
          __size_of_write_command 0010        fillCircleHelper@cornername 0029  
                         ??_Rcmd1 001D                           ??_Rcmd3 001D  
              __size_of_drawPixel 0030                 __end_of_OpenUSART 1390  
                         ??_putch 0011                        __pbssBANK0 00BF  
                       ?_Rcmd2red 0001                __size_of_init_UART 0014  
       __size_of_Wait_Half_Second 001A                   spiwrite@spidata 0012  
                      ??_INT0_isr 0001                __CFG_CCP2MX$PORTBE 000000  
                         ?___wmul 0011                           ?_chkisr 0001  
          __size_of_setAddrWindow 004E                           _CCP2CON 000FBA  
                    ??_TIMER1_isr 0001                        _fillCircle 1390  
                         ?_printf 0027                           ?_strcpy 0011  
                         ?_strlen 0011                 ??_Activate_Buzzer 0011  
                      _fillScreen 165E                        _drawCircle 061A  
                       ?_delay_ms 0017                         ?_fillRect 0023  
                       ?_drawChar 002E                           _SSPCON1 000FC6  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 0F92  
                       ?_drawtext 0039                        ??_Rcmd2red 0014  
              __end_of_TIMER1_isr 1730                     _write_command 1706  
                         __Hparam 0000                           __Lparam 0000  
               __end_of_drawPixel 15EA             __end_of_drawFastVLine 1134  
                _fillCircleHelper 0A72                           ___lldiv 1020  
                 __size_of___wmul 0028                           ___llmod 12B0  
                 __size_of_chkisr 12A8                         ?_spiwrite 0001  
                         __pcinit 1134                           __ramtop 1000  
                         __ptext0 045E                           __ptext1 001C  
                         __ptext2 1716                           __ptext3 163C  
                         __ptext4 12B0                           __ptext5 1020  
                         __ptext6 16AA                           __ptext7 1320  
                         __ptext8 1390                           __ptext9 0A72  
                 __size_of_printf 0442                 __end_of_init_UART 16BE  
                       _T0CONbits 000FD5                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                 __end_of_hexpowers FFB2  
        __end_of_force_nec_state0 1740                         _T1CONbits 000FCD  
                         _dpowers FF6A                           _isdigit 163C  
                       _T3CONbits 000FB1                        ??_delay_ms 0019  
                   drawtext@_text 003A                     drawtext@color 003C  
                      ??_fillRect 0028                        ??_drawChar 0035  
                       _LCD_Reset 16D2                     _setAddrWindow 1434  
                  __pintcode_body 1234                        delay_ms@ms 0017  
            end_of_initialization 11AC                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FD8E  
                         int_func 1234                   ___lldiv@divisor 0015  
                 ___lldiv@counter 001D                         _RCSTAbits 000FAB  
                         printf@c 003F                           printf@f 0027  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc2 000FDE  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00E4                  drawtext@cursor_y 00E3  
                       _PORTBbits 000F81                         _PORTCbits 000F82  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
                      drawChar@bg 0032                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                drawtext@textsize 00DF                        drawPixel@x 001B  
                      drawPixel@y 0018                  _Wait_Half_Second 167A  
                     printf@width 003C                         _TXSTAbits 000FAC  
               __size_of_INT0_isr 0154                    __end_of___wmul 163C  
                   delay_ms@count 001B                        _write_data 16F6  
                   __pidataCOMRAM 1694                    __end_of_chkisr 12B0  
        ?_TFT_GreenTab_Initialize 0001                        drawtext@bg 003E  
                       _Nec_code1 0069                    __end_of_printf 045E  
                  __end_of_strcpy 15BA                    __end_of_strlen 154A  
                       _Nec_state 006A               start_initialization 1134  
                 ??_write_command 0013                         _OpenUSART 1320  
             __size_of_fillCircle 0052                   ___llmod@divisor 0022  
                __CFG_OSC$INTIO67 000000                   ___llmod@counter 0026  
               __size_of_Rcmd2red 003E               __size_of_fillScreen 001C  
             __size_of_drawCircle 01AE                   _Activate_Buzzer 16E4  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 002F                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005D  
                 ??_setAddrWindow 0017                     __pcstackBANK0 00DE  
                     ??_LCD_Reset 001D                      _isdigit$1657 0012  
        __end_of_fillCircleHelper 0BAA                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 010A  
                       _bit_count 006C                         __pintcode 0008  
 __end_of_TFT_GreenTab_Initialize 1614                     __pmediumconst FD8E  
                        ?___lldiv 0011                          ?___llmod 001E  
                       __tft_type 006B                drawFastVLine@color 001A  
                     ?_write_data 0001                         _drawPixel 15BA  
               __size_of_spiwrite 0014                 ?_force_nec_state0 0001  
                        ?_isdigit 0001                 _Initialize_Screen 0F92  
                  __size_of_Rcmd1 0110                    __size_of_Rcmd3 00F2  
                       _init_UART 16AA                ??_force_nec_state0 0001  
                       _hexpowers FF92                ?_Initialize_Screen 0001  
                  __size_of_putch 000E           __end_of_Activate_Buzzer 16F6  
                  ___wmul@product 0015               ??_Initialize_Screen 0043  
                        _INT0_isr 091E                          _PIE1bits 000F9D  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                       fillRect@h 0025                         fillRect@i 002C  
                       fillRect@w 0024                         fillRect@x 002B  
                       fillRect@y 0023                         drawChar@c 002F  
                       drawChar@i 0038                         drawChar@j 0037  
                    ??_fillCircle 0043                         drawChar@x 0036  
                       drawChar@y 002E                        ?_drawPixel 0018  
          __size_of_fillRectangle 00DC          __end_of_Wait_Half_Second 1694  
               ___wmul@multiplier 0011         __end_of_Initialize_Screen 1020  
                    ??_fillScreen 0026                      ??_drawCircle 0024  
                      printf@flag 003E                        printf@prec 0034  
                       main@found 0046                        ?_init_UART 0001  
                     _INTCON2bits 000FF1                         copy_data0 1160  
                       copy_data1 1180                         copy_data2 11A0  
                       drawtext@i 00E1            __size_of_drawFastVLine 0088  
                       drawtext@x 00DE                         drawtext@y 0039  
                        _Nec_code 005D                 write_command@cmd_ 0013  
                     ??_OpenUSART 0013                          _Rcmd2red 154A  
             __size_of_write_data 0010                   OpenUSART@config 0013  
                    _Time_Elapsed 0061                __end_of_fillCircle 13E2  
                        __Hrparam 0000                __end_of_fillScreen 167A  
                        __Lrparam 0000                __end_of_drawCircle 07C8  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of_isdigit 0022                          _delay_ms 13E2  
                        __ptext10 061A                          __ptext11 167A  
                        __ptext20 10AC                          __ptext12 0F92  
                        __ptext21 15BA                          __ptext13 1588  
                        __ptext30 16D2                          __ptext22 1434  
                        __ptext14 165E                          __ptext31 13E2  
                        __ptext23 15EA                          __ptext15 0EB6  
                        __ptext32 1614                          __ptext24 0DC4  
                        __ptext16 0CBA                          __ptext33 1730  
                        __ptext25 154A                          __ptext17 150C  
                        __ptext34 16E4                          __ptext26 0BAA  
                        __ptext18 07C8                          __ptext27 16F6  
                        __ptext19 1482                          __ptext36 1724  
                        __ptext28 1706                          __ptext37 091E  
                        __ptext29 16BE                          __ptext38 1738  
                        _fillRect 1482                          _drawChar 07C8  
__size_of_TFT_GreenTab_Initialize 002A                          _colstart 006D  
                        _drawtext 0CBA                        strcpy@from 0013  
                   _fillRectangle 0EB6                  ?_Activate_Buzzer 0001  
                   __size_of_main 01BC                   fillRectangle@hi 0021  
                 fillRectangle@lo 0022                     _drawFastVLine 10AC  
                       printf@idx 0033                          _spiwrite 16BE  
                       printf@val 0038                       ??_drawPixel 001B  
                        _rowstart 006F                fillCircleHelper@x0 0023  
              fillCircleHelper@y0 0025        __size_of_Initialize_Screen 008E  
                      _INTCONbits 000FF2                    OpenUSART@spbrg 0011  
                     ??_init_UART 0014                          isdigit@c 0013  
               ?_fillCircleHelper 0023                         spiwrite@x 0011  
                        intlevel2 0000                    ?_fillRectangle 0018  
              ??_fillCircleHelper 002F             __end_of_write_command 1716  
                ___lldiv@dividend 0011                   fillScreen@color 0024  
                    fillCircle@x0 003B                      fillCircle@y0 003D  
                  fillRectangle@h 001A                    fillRectangle@w 0019  
                  fillRectangle@x 0023                    fillRectangle@y 0018  
                  ?_drawFastVLine 0018                          printf@ap 0036  
               fillCircleHelper@f 0035                 fillCircleHelper@r 0027  
               fillCircleHelper@x 0037                 fillCircleHelper@y 0039  
                    ??_write_data 0013                        _TIMER1_isr 1724  
                   fillRect@color 0026                  ___lldiv@quotient 0019  
                        strcpy@cp 0015                          strlen@cp 0015  
                        strcpy@to 0011                       fillCircle@r 003F  
           __end_of_setAddrWindow 1482                fillRectangle@color 001B  
                   drawChar@color 0030                __end_of_write_data 1706  
       __size_of_force_nec_state0 0008                      drawChar@line 0035  
                    drawChar@size 0034  
