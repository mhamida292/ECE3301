

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 21 16:40:19 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           	psect	idataCOMRAM
    55  0000'                    __pidataCOMRAM:
    56                           	opt stack 0
    57                           
    58                           ;initializer for _tempSecond
    59  0000' FF                 	db	255
    60                           
    61                           	psect	idataBANK0
    62  0000'                    __pidataBANK0:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _D1
    66  0000' 02                 	db	2
    67  0001' 02                 	db	2
    68  0002' 02                 	db	2
    69  0003' 08                 	db	8
    70  0004' 08                 	db	8
    71  0005' 04                 	db	4
    72  0006' 0A                 	db	10
    73  0007' 00                 	db	0
    74  0008' 00                 	db	0
    75  0009' 00                 	db	0
    76  000A' 00                 	db	0
    77  000B' 00                 	db	0
    78  000C' 00                 	db	0
    79  000D' 00                 	db	0
    80  000E' 00                 	db	0
    81  000F' 00                 	db	0
    82  0010' 00                 	db	0
    83  0011' 00                 	db	0
    84  0012' 00                 	db	0
    85  0013' 00                 	db	0
    86  0014' 00                 	db	0
    87                           
    88                           ;initializer for _D2
    89  0015' 00                 	db	0
    90  0016' 00                 	db	0
    91  0017' 00                 	db	0
    92  0018' 00                 	db	0
    93  0019' 00                 	db	0
    94  001A' 00                 	db	0
    95  001B' 00                 	db	0
    96  001C' 28                 	db	40
    97  001D' 28                 	db	40
    98  001E' 38                 	db	56
    99  001F' 38                 	db	56
   100  0020' 38                 	db	56
   101  0021' 38                 	db	56
   102  0022' 38                 	db	56
   103  0023' 00                 	db	0
   104  0024' 00                 	db	0
   105  0025' 00                 	db	0
   106  0026' 00                 	db	0
   107  0027' 00                 	db	0
   108  0028' 00                 	db	0
   109  0029' 00                 	db	0
   110                           
   111                           ;initializer for _D3
   112  002A' 00                 	db	0
   113  002B' 00                 	db	0
   114  002C' 00                 	db	0
   115  002D' 00                 	db	0
   116  002E' 00                 	db	0
   117  002F' 00                 	db	0
   118  0030' 00                 	db	0
   119  0031' 00                 	db	0
   120  0032' 00                 	db	0
   121  0033' 00                 	db	0
   122  0034' 00                 	db	0
   123  0035' 00                 	db	0
   124  0036' 00                 	db	0
   125  0037' 00                 	db	0
   126  0038' 07                 	db	7
   127  0039' 07                 	db	7
   128  003A' 07                 	db	7
   129  003B' 07                 	db	7
   130  003C' 07                 	db	7
   131  003D' 07                 	db	7
   132  003E' 07                 	db	7
   133                           
   134                           ;initializer for _array1
   135  003F' A2                 	db	162
   136  0040' 00                 	db	0
   137  0041' 00                 	db	0
   138  0042' 00                 	db	0
   139  0043' 00                 	db	0
   140  0044' 00                 	db	0
   141  0045' 00                 	db	0
   142  0046' 00                 	db	0
   143  0047' 00                 	db	0
   144  0048' 00                 	db	0
   145  0049' 00                 	db	0
   146  004A' 00                 	db	0
   147  004B' 00                 	db	0
   148  004C' 00                 	db	0
   149  004D' 00                 	db	0
   150  004E' 00                 	db	0
   151  004F' 00                 	db	0
   152  0050' 00                 	db	0
   153  0051' 00                 	db	0
   154  0052' 00                 	db	0
   155  0053' 00                 	db	0
   156                           
   157                           	psect	idataBANK1
   158  0000'                    __pidataBANK1:
   159                           	opt stack 0
   160                           
   161                           ;initializer for _color
   162  0000' F800               	dw	63488
   163  0002' 00                 	db	0
   164  0003' 00                 	db	0
   165  0004' 00                 	db	0
   166  0005' 00                 	db	0
   167  0006' 00                 	db	0
   168  0007' 00                 	db	0
   169  0008' 00                 	db	0
   170  0009' 00                 	db	0
   171  000A' 00                 	db	0
   172  000B' 00                 	db	0
   173  000C' 00                 	db	0
   174  000D' 00                 	db	0
   175  000E' 00                 	db	0
   176  000F' 00                 	db	0
   177  0010' 00                 	db	0
   178  0011' 00                 	db	0
   179  0012' 00                 	db	0
   180  0013' 00                 	db	0
   181  0014' 00                 	db	0
   182  0015' 00                 	db	0
   183  0016' 00                 	db	0
   184  0017' 00                 	db	0
   185  0018' 00                 	db	0
   186  0019' 00                 	db	0
   187  001A' 00                 	db	0
   188  001B' 00                 	db	0
   189  001C' 00                 	db	0
   190  001D' 00                 	db	0
   191  001E' 00                 	db	0
   192  001F' 00                 	db	0
   193  0020' 00                 	db	0
   194  0021' 00                 	db	0
   195  0022' 00                 	db	0
   196  0023' 00                 	db	0
   197  0024' 00                 	db	0
   198  0025' 00                 	db	0
   199  0026' 00                 	db	0
   200  0027' 00                 	db	0
   201  0028' 00                 	db	0
   202  0029' 00                 	db	0
   203                           
   204                           ;initializer for _txt1
   205  002A' 43                 	db	67
   206  002B' 48                 	db	72
   207  002C' 2D                 	db	45
   208  002D' 00                 	db	0
   209  002E' 00                 	db	0
   210  002F' 00                 	db	0
   211  0030' 00                 	db	0
   212  0031' 00                 	db	0
   213  0032' 00                 	db	0
   214  0033' 00                 	db	0
   215  0034' 00                 	db	0
   216  0035' 00                 	db	0
   217  0036' 00                 	db	0
   218  0037' 00                 	db	0
   219  0038' 00                 	db	0
   220  0039' 00                 	db	0
   221  003A' 00                 	db	0
   222  003B' 00                 	db	0
   223  003C' 00                 	db	0
   224  003D' 00                 	db	0
   225  003E' 00                 	db	0
   226  003F' 00                 	db	0
   227  0040' 00                 	db	0
   228  0041' 00                 	db	0
   229  0042' 00                 	db	0
   230  0043' 00                 	db	0
   231  0044' 00                 	db	0
   232  0045' 00                 	db	0
   233  0046' 00                 	db	0
   234  0047' 00                 	db	0
   235  0048' 00                 	db	0
   236  0049' 00                 	db	0
   237  004A' 00                 	db	0
   238  004B' 00                 	db	0
   239  004C' 00                 	db	0
   240  004D' 00                 	db	0
   241  004E' 00                 	db	0
   242  004F' 00                 	db	0
   243  0050' 00                 	db	0
   244  0051' 00                 	db	0
   245  0052' 00                 	db	0
   246  0053' 00                 	db	0
   247  0054' 00                 	db	0
   248  0055' 00                 	db	0
   249  0056' 00                 	db	0
   250  0057' 00                 	db	0
   251  0058' 00                 	db	0
   252  0059' 00                 	db	0
   253  005A' 00                 	db	0
   254  005B' 00                 	db	0
   255  005C' 00                 	db	0
   256  005D' 00                 	db	0
   257  005E' 00                 	db	0
   258  005F' 00                 	db	0
   259  0060' 00                 	db	0
   260  0061' 00                 	db	0
   261  0062' 00                 	db	0
   262  0063' 00                 	db	0
   263  0064' 00                 	db	0
   264  0065' 00                 	db	0
   265  0066' 00                 	db	0
   266  0067' 00                 	db	0
   267  0068' 00                 	db	0
   268  0069' 00                 	db	0
   269  006A' 00                 	db	0
   270  006B' 00                 	db	0
   271  006C' 00                 	db	0
   272  006D' 00                 	db	0
   273  006E' 00                 	db	0
   274  006F' 00                 	db	0
   275  0070' 00                 	db	0
   276  0071' 00                 	db	0
   277  0072' 00                 	db	0
   278  0073' 00                 	db	0
   279  0074' 00                 	db	0
   280  0075' 00                 	db	0
   281  0076' 00                 	db	0
   282  0077' 00                 	db	0
   283  0078' 00                 	db	0
   284  0079' 00                 	db	0
   285  007A' 00                 	db	0
   286  007B' 00                 	db	0
   287  007C' 00                 	db	0
   288  007D' 00                 	db	0
   289                           
   290                           	psect	smallconst
   291  0000'                    __psmallconst:
   292                           	opt stack 0
   293  0000' 00                 	db	0
   294  0001'                    _dpowers:
   295                           	opt stack 0
   296  0001' 0001               	dw	1
   297  0003' 0000               	dw	0
   298  0005' 000A               	dw	10
   299  0007' 0000               	dw	0
   300  0009' 0064               	dw	100
   301  000B' 0000               	dw	0
   302  000D' 03E8               	dw	1000
   303  000F' 0000               	dw	0
   304  0011' 2710               	dw	10000
   305  0013' 0000               	dw	0
   306  0015' 86A0               	dw	34464
   307  0017' 0001               	dw	1
   308  0019' 4240               	dw	16960
   309  001B' 000F               	dw	15
   310  001D' 9680               	dw	38528
   311  001F' 0098               	dw	152
   312  0021' E100               	dw	57600
   313  0023' 05F5               	dw	1525
   314  0025' CA00               	dw	51712
   315  0027' 3B9A               	dw	15258
   316  0029'                    __end_of_dpowers:
   317                           	opt stack 0
   318  0029'                    _hexpowers:
   319                           	opt stack 0
   320  0029' 0001               	dw	1
   321  002B' 0000               	dw	0
   322  002D' 0010               	dw	16
   323  002F' 0000               	dw	0
   324  0031' 0100               	dw	256
   325  0033' 0000               	dw	0
   326  0035' 1000               	dw	4096
   327  0037' 0000               	dw	0
   328  0039' 0000               	dw	0
   329  003B' 0001               	dw	1
   330  003D' 0000               	dw	0
   331  003F' 0010               	dw	16
   332  0041' 0000               	dw	0
   333  0043' 0100               	dw	256
   334  0045' 0000               	dw	0
   335  0047' 1000               	dw	4096
   336  0049'                    __end_of_hexpowers:
   337                           	opt stack 0
   338  0000                     _ADCON1	set	4033
   339  0000                     _CCP2CON	set	4026
   340  0000                     _CCPR2L	set	4027
   341  0000                     _INTCON2bits	set	4081
   342  0000                     _INTCONbits	set	4082
   343  0000                     _OSCCON	set	4051
   344  0000                     _PIE1bits	set	3997
   345  0000                     _PIR1bits	set	3998
   346  0000                     _PORTA	set	3968
   347  0000                     _PORTBbits	set	3969
   348  0000                     _PORTD	set	3971
   349  0000                     _PORTDbits	set	3971
   350  0000                     _PORTE	set	3972
   351  0000                     _PR2	set	4043
   352  0000                     _RCSTA	set	4011
   353  0000                     _RCSTAbits	set	4011
   354  0000                     _SPBRG	set	4015
   355  0000                     _SPBRGH	set	4016
   356  0000                     _T0CON	set	4053
   357  0000                     _T0CONbits	set	4053
   358  0000                     _T1CON	set	4045
   359  0000                     _T1CONbits	set	4045
   360  0000                     _T2CON	set	4042
   361  0000                     _TMR0H	set	4055
   362  0000                     _TMR0L	set	4054
   363  0000                     _TMR1H	set	4047
   364  0000                     _TMR1L	set	4046
   365  0000                     _TRISA	set	3986
   366  0000                     _TRISB	set	3987
   367  0000                     _TRISBbits	set	3987
   368  0000                     _TRISC	set	3988
   369  0000                     _TRISCbits	set	3988
   370  0000                     _TRISD	set	3989
   371  0000                     _TRISDbits	set	3989
   372  0000                     _TRISE	set	3990
   373  0000                     _TXREG	set	4013
   374  0000                     _TXSTA	set	4012
   375  0000                     _TXSTAbits	set	4012
   376  0000                     _INT0IE	set	32660
   377  0000                     _RBPU	set	32655
   378  0000                     _TRMT	set	32097
   379  0049'                    STR_1:
   380  0049' 20                 	db	32
   381  004A' 54                 	db	84	;'T'
   382  004B' 65                 	db	101	;'e'
   383  004C' 6D                 	db	109	;'m'
   384  004D' 70                 	db	112	;'p'
   385  004E' 65                 	db	101	;'e'
   386  004F' 72                 	db	114	;'r'
   387  0050' 61                 	db	97	;'a'
   388  0051' 74                 	db	116	;'t'
   389  0052' 75                 	db	117	;'u'
   390  0053' 72                 	db	114	;'r'
   391  0054' 65                 	db	101	;'e'
   392  0055' 20                 	db	32
   393  0056' 3D                 	db	61	;'='
   394  0057' 20                 	db	32
   395  0058' 25                 	db	37
   396  0059' 64                 	db	100	;'d'
   397  005A' 20                 	db	32
   398  005B' 64                 	db	100	;'d'
   399  005C' 65                 	db	101	;'e'
   400  005D' 67                 	db	103	;'g'
   401  005E' 72                 	db	114	;'r'
   402  005F' 65                 	db	101	;'e'
   403  0060' 65                 	db	101	;'e'
   404  0061' 73                 	db	115	;'s'
   405  0062' 43                 	db	67	;'C'
   406  0063' 20                 	db	32
   407  0064' 3D                 	db	61	;'='
   408  0065' 20                 	db	32
   409  0066' 25                 	db	37
   410  0067' 64                 	db	100	;'d'
   411  0068' 20                 	db	32
   412  0069' 64                 	db	100	;'d'
   413  006A' 65                 	db	101	;'e'
   414  006B' 67                 	db	103	;'g'
   415  006C' 72                 	db	114	;'r'
   416  006D' 65                 	db	101	;'e'
   417  006E' 65                 	db	101	;'e'
   418  006F' 73                 	db	115	;'s'
   419  0070' 46                 	db	70	;'F'
   420  0071' 0D                 	db	13
   421  0072' 0A                 	db	10
   422  0073' 00                 	db	0
   423  0074'                    STR_2:
   424  0074' 25                 	db	37
   425  0075' 30                 	db	48	;'0'
   426  0076' 32                 	db	50	;'2'
   427  0077' 78                 	db	120	;'x'
   428  0078' 3A                 	db	58	;':'
   429  0079' 25                 	db	37
   430  007A' 30                 	db	48	;'0'
   431  007B' 32                 	db	50	;'2'
   432  007C' 78                 	db	120	;'x'
   433  007D' 3A                 	db	58	;':'
   434  007E' 25                 	db	37
   435  007F' 30                 	db	48	;'0'
   436  0080' 32                 	db	50	;'2'
   437  0081' 78                 	db	120	;'x'
   438  0082' 20                 	db	32
   439  0083' 25                 	db	37
   440  0084' 30                 	db	48	;'0'
   441  0085' 32                 	db	50	;'2'
   442  0086' 78                 	db	120	;'x'
   443  0087' 2F                 	db	47
   444  0088' 25                 	db	37
   445  0089' 30                 	db	48	;'0'
   446  008A' 32                 	db	50	;'2'
   447  008B' 78                 	db	120	;'x'
   448  008C' 2F                 	db	47
   449  008D' 25                 	db	37
   450  008E' 30                 	db	48	;'0'
   451  008F' 32                 	db	50	;'2'
   452  0090' 78                 	db	120	;'x'
   453  0091' 00                 	db	0
   454  0092' 45                 	db	69	;'E'
   455  0093' 43                 	db	67	;'C'
   456  0094' 45                 	db	69	;'E'
   457  0095' 33                 	db	51	;'3'
   458  0096' 33                 	db	51	;'3'
   459  0097' 30                 	db	48	;'0'
   460  0098' 31                 	db	49	;'1'
   461  0099' 4C                 	db	76	;'L'
   462  009A' 20                 	db	32
   463  009B' 53                 	db	83	;'S'
   464  009C' 70                 	db	112	;'p'
   465  009D' 72                 	db	114	;'r'
   466  009E' 69                 	db	105	;'i'
   467  009F' 6E                 	db	110	;'n'
   468  00A0' 67                 	db	103	;'g'
   469  00A1' 20                 	db	32
   470  00A2' 32                 	db	50	;'2'
   471  00A3' 32                 	db	50	;'2'
   472  00A4' 2D                 	db	45
   473  00A5' 53                 	db	83	;'S'
   474  00A6' 33                 	db	51	;'3'
   475  00A7' 00                 	db	0
   476  00A8'                    STR_4:
   477  00A8' 4E                 	db	78	;'N'
   478  00A9' 45                 	db	69	;'E'
   479  00AA' 43                 	db	67	;'C'
   480  00AB' 5F                 	db	95	;'_'
   481  00AC' 43                 	db	67	;'C'
   482  00AD' 6F                 	db	111	;'o'
   483  00AE' 64                 	db	100	;'d'
   484  00AF' 65                 	db	101	;'e'
   485  00B0' 20                 	db	32
   486  00B1' 3D                 	db	61	;'='
   487  00B2' 20                 	db	32
   488  00B3' 25                 	db	37
   489  00B4' 30                 	db	48	;'0'
   490  00B5' 38                 	db	56	;'8'
   491  00B6' 6C                 	db	108	;'l'
   492  00B7' 78                 	db	120	;'x'
   493  00B8' 20                 	db	32
   494  00B9' 25                 	db	37
   495  00BA' 78                 	db	120	;'x'
   496  00BB' 20                 	db	32
   497  00BC' 00                 	db	0
   498  00BD'                    STR_8:
   499  00BD' 30                 	db	48	;'0'
   500  00BE' 31                 	db	49	;'1'
   501  00BF' 32                 	db	50	;'2'
   502  00C0' 33                 	db	51	;'3'
   503  00C1' 34                 	db	52	;'4'
   504  00C2' 35                 	db	53	;'5'
   505  00C3' 36                 	db	54	;'6'
   506  00C4' 37                 	db	55	;'7'
   507  00C5' 38                 	db	56	;'8'
   508  00C6' 39                 	db	57	;'9'
   509  00C7' 61                 	db	97	;'a'
   510  00C8' 62                 	db	98	;'b'
   511  00C9' 63                 	db	99	;'c'
   512  00CA' 64                 	db	100	;'d'
   513  00CB' 65                 	db	101	;'e'
   514  00CC' 66                 	db	102	;'f'
   515  00CD' 00                 	db	0
   516  00CE'                    STR_5:
   517  00CE' 46                 	db	70	;'F'
   518  00CF' 6F                 	db	111	;'o'
   519  00D0' 75                 	db	117	;'u'
   520  00D1' 6E                 	db	110	;'n'
   521  00D2' 64                 	db	100	;'d'
   522  00D3' 20                 	db	32
   523  00D4' 3D                 	db	61	;'='
   524  00D5' 20                 	db	32
   525  00D6' 25                 	db	37
   526  00D7' 64                 	db	100	;'d'
   527  00D8' 0D                 	db	13
   528  00D9' 0A                 	db	10
   529  00DA' 00                 	db	0
   530  00DB' 4C                 	db	76	;'L'
   531  00DC' 41                 	db	65	;'A'
   532  00DD' 42                 	db	66	;'B'
   533  00DE' 20                 	db	32
   534  00DF' 31                 	db	49	;'1'
   535  00E0' 31                 	db	49	;'1'
   536  00E1' 20                 	db	32
   537  00E2' 00                 	db	0
   538  00E3' 00                 	db	0	; dummy byte at the end
   539  0000                     
   540                           ; #config settings
   541                           
   542                           	psect	cinit
   543  0000'                    __pcinit:
   544                           	opt stack 0
   545  0000'                    start_initialization:
   546                           	opt stack 0
   547  0000'                    __initialization:
   548                           	opt stack 0
   549                           
   550                           ; Clear objects allocated to BANK0 (31 bytes)
   551  0000' EE00' F000'        	lfsr	0,__pbssBANK0
   552  0004' 0E1F               	movlw	31
   553  0006'                    clear_0:
   554  0006' 6AEE               	clrf	postinc0,c
   555  0008' 06E8               	decf	wreg,f,c
   556  000A' E1FD               	bnz	clear_0
   557                           
   558                           ; Clear objects allocated to COMRAM (39 bytes)
   559  000C' EE00' F000'        	lfsr	0,__pbssCOMRAM
   560  0010' 0E27               	movlw	39
   561  0012'                    clear_1:
   562  0012' 6AEE               	clrf	postinc0,c
   563  0014' 06E8               	decf	wreg,f,c
   564  0016' E1FD               	bnz	clear_1
   565                           
   566                           ; Initialize objects allocated to BANK1 (126 bytes)
   567                           ; load TBLPTR registers with __pidataBANK1
   568  0018' 0E00'              	movlw	low __pidataBANK1
   569  001A' 6EF6               	movwf	tblptrl,c
   570  001C' 0E00'              	movlw	high __pidataBANK1
   571  001E' 6EF7               	movwf	tblptrh,c
   572  0020' 0E00'              	movlw	low (__pidataBANK1 shr (0+16))
   573  0022' 6EF8               	movwf	tblptru,c
   574  0024' EE00' F000'        	lfsr	0,__pdataBANK1
   575  0028' EE10 F07E          	lfsr	1,126
   576  002C'                    copy_data0:
   577  002C' 0009               	tblrd		*+
   578  002E' CFF5 FFEE          	movff	tablat,postinc0
   579  0032' 50E5               	movf	postdec1,w,c
   580  0034' 50E1               	movf	fsr1l,w,c
   581  0036' E1FA               	bnz	copy_data0
   582                           
   583                           ; Initialize objects allocated to BANK0 (84 bytes)
   584                           ; load TBLPTR registers with __pidataBANK0
   585  0038' 0E00'              	movlw	low __pidataBANK0
   586  003A' 6EF6               	movwf	tblptrl,c
   587  003C' 0E00'              	movlw	high __pidataBANK0
   588  003E' 6EF7               	movwf	tblptrh,c
   589  0040' 0E00'              	movlw	low (__pidataBANK0 shr (0+16))
   590  0042' 6EF8               	movwf	tblptru,c
   591  0044' EE00' F000'        	lfsr	0,__pdataBANK0
   592  0048' EE10 F054          	lfsr	1,84
   593  004C'                    copy_data1:
   594  004C' 0009               	tblrd		*+
   595  004E' CFF5 FFEE          	movff	tablat,postinc0
   596  0052' 50E5               	movf	postdec1,w,c
   597  0054' 50E1               	movf	fsr1l,w,c
   598  0056' E1FA               	bnz	copy_data1
   599                           
   600                           ; Initialize objects allocated to COMRAM (1 bytes)
   601                           ; load TBLPTR registers with __pidataCOMRAM
   602  0058' 0E00'              	movlw	low __pidataCOMRAM
   603  005A' 6EF6               	movwf	tblptrl,c
   604  005C' 0E00'              	movlw	high __pidataCOMRAM
   605  005E' 6EF7               	movwf	tblptrh,c
   606  0060' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
   607  0062' 6EF8               	movwf	tblptru,c
   608  0064' 0009               	tblrd		*+	;fetch initializer
   609  0066' CFF5 F000'         	movff	tablat,__pdataCOMRAM
   610  006A'                    end_of_initialization:
   611                           	opt stack 0
   612  006A'                    __end_of__initialization:
   613                           	opt stack 0
   614  006A' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   615  006C' 6EF8               	movwf	tblptru,c
   616  006E' 0100               	movlb	0
   617  0070' EF00' F000'        	goto	_main	;jump to C main() function
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           postdec1	equ	0xFE5
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	bssCOMRAM
   628  0000'                    __pbssCOMRAM:
   629                           	opt stack 0
   630  0000'                    _Nec_code:
   631                           	opt stack 0
   632  0000'                    	ds	4
   633  0004'                    _Time_Elapsed:
   634                           	opt stack 0
   635  0004'                    	ds	2
   636  0006'                    _nbr:
   637                           	opt stack 0
   638  0006'                    	ds	2
   639  0008'                    _nec_ok:
   640                           	opt stack 0
   641  0008'                    	ds	2
   642  000A'                    _txt:
   643                           	opt stack 0
   644  000A'                    	ds	2
   645  000C'                    _Nec_code1:
   646                           	opt stack 0
   647  000C'                    	ds	1
   648  000D'                    _Nec_state:
   649                           	opt stack 0
   650  000D'                    	ds	1
   651  000E'                    _TempSecond:
   652                           	opt stack 0
   653  000E'                    	ds	1
   654  000F'                    _alarm_date:
   655                           	opt stack 0
   656  000F'                    	ds	1
   657  0010'                    _alarm_hour:
   658                           	opt stack 0
   659  0010'                    	ds	1
   660  0011'                    _alarm_minute:
   661                           	opt stack 0
   662  0011'                    	ds	1
   663  0012'                    _alarm_second:
   664                           	opt stack 0
   665  0012'                    	ds	1
   666  0013'                    _bit_count:
   667                           	opt stack 0
   668  0013'                    	ds	1
   669  0014'                    _day:
   670                           	opt stack 0
   671  0014'                    	ds	1
   672  0015'                    _dow:
   673                           	opt stack 0
   674  0015'                    	ds	1
   675  0016'                    _found:
   676                           	opt stack 0
   677  0016'                    	ds	1
   678  0017'                    _hour:
   679                           	opt stack 0
   680  0017'                    	ds	1
   681  0018'                    _i:
   682                           	opt stack 0
   683  0018'                    	ds	1
   684  0019'                    _minute:
   685                           	opt stack 0
   686  0019'                    	ds	1
   687  001A'                    _month:
   688                           	opt stack 0
   689  001A'                    	ds	1
   690  001B'                    _nec_code:
   691                           	opt stack 0
   692  001B'                    	ds	1
   693  001C'                    _second:
   694                           	opt stack 0
   695  001C'                    	ds	1
   696  001D'                    _setup_alarm_hour:
   697                           	opt stack 0
   698  001D'                    	ds	1
   699  001E'                    _setup_alarm_minute:
   700                           	opt stack 0
   701  001E'                    	ds	1
   702  001F'                    _setup_alarm_second:
   703                           	opt stack 0
   704  001F'                    	ds	1
   705  0020'                    _setup_day:
   706                           	opt stack 0
   707  0020'                    	ds	1
   708  0021'                    _setup_hour:
   709                           	opt stack 0
   710  0021'                    	ds	1
   711  0022'                    _setup_minute:
   712                           	opt stack 0
   713  0022'                    	ds	1
   714  0023'                    _setup_month:
   715                           	opt stack 0
   716  0023'                    	ds	1
   717  0024'                    _setup_second:
   718                           	opt stack 0
   719  0024'                    	ds	1
   720  0025'                    _setup_year:
   721                           	opt stack 0
   722  0025'                    	ds	1
   723  0026'                    _year:
   724                           	opt stack 0
   725  0026'                    	ds	1
   726                           tblptru	equ	0xFF8
   727                           tblptrh	equ	0xFF7
   728                           tblptrl	equ	0xFF6
   729                           tablat	equ	0xFF5
   730                           postinc0	equ	0xFEE
   731                           wreg	equ	0xFE8
   732                           postdec1	equ	0xFE5
   733                           fsr1l	equ	0xFE1
   734                           
   735                           	psect	dataCOMRAM
   736  0000'                    __pdataCOMRAM:
   737                           	opt stack 0
   738  0000'                    _tempSecond:
   739                           	opt stack 0
   740  0000'                    	ds	1
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           postinc0	equ	0xFEE
   746                           wreg	equ	0xFE8
   747                           postdec1	equ	0xFE5
   748                           fsr1l	equ	0xFE1
   749                           
   750                           	psect	bssBANK0
   751  0000'                    __pbssBANK0:
   752                           	opt stack 0
   753  0000'                    _buffer:
   754                           	opt stack 0
   755  0000'                    	ds	31
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           fsr1l	equ	0xFE1
   764                           
   765                           	psect	dataBANK0
   766  0000'                    __pdataBANK0:
   767                           	opt stack 0
   768  0000'                    _D1:
   769                           	opt stack 0
   770  0000'                    	ds	21
   771  0015'                    _D2:
   772                           	opt stack 0
   773  0015'                    	ds	21
   774  002A'                    _D3:
   775                           	opt stack 0
   776  002A'                    	ds	21
   777  003F'                    _array1:
   778                           	opt stack 0
   779  003F'                    	ds	21
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           postdec1	equ	0xFE5
   787                           fsr1l	equ	0xFE1
   788                           
   789                           	psect	dataBANK1
   790  0000'                    __pdataBANK1:
   791                           	opt stack 0
   792  0000'                    _color:
   793                           	opt stack 0
   794  0000'                    	ds	42
   795  002A'                    _txt1:
   796                           	opt stack 0
   797  002A'                    	ds	84
   798                           tblptru	equ	0xFF8
   799                           tblptrh	equ	0xFF7
   800                           tblptrl	equ	0xFF6
   801                           tablat	equ	0xFF5
   802                           postinc0	equ	0xFEE
   803                           wreg	equ	0xFE8
   804                           postdec1	equ	0xFE5
   805                           fsr1l	equ	0xFE1
   806                           
   807                           	psect	cstackCOMRAM
   808  0000'                    __pcstackCOMRAM:
   809                           	opt stack 0
   810  0000'                    ??_chkisr:
   811  0000'                    
   812                           ; 1 bytes @ 0x0
   813  0000'                    	ds	14
   814  000E'                    ??_isdigit:
   815  000E'                    ?___wmul:
   816                           	opt stack 0
   817  000E'                    ?___awdiv:
   818                           	opt stack 0
   819  000E'                    ?___lldiv:
   820                           	opt stack 0
   821  000E'                    _drawtext$1:
   822                           	opt stack 0
   823  000E'                    putch@c:
   824                           	opt stack 0
   825  000E'                    I2C_Read@ack:
   826                           	opt stack 0
   827  000E'                    I2C_Write@outByte:
   828                           	opt stack 0
   829  000E'                    _fillCircle$0:
   830                           	opt stack 0
   831  000E'                    _drawCircle$0:
   832                           	opt stack 0
   833  000E'                    OpenUSART@spbrg:
   834                           	opt stack 0
   835  000E'                    ___wmul@multiplier:
   836                           	opt stack 0
   837  000E'                    ___awdiv@dividend:
   838                           	opt stack 0
   839  000E'                    I2C_Init@c:
   840                           	opt stack 0
   841  000E'                    ___lldiv@dividend:
   842                           	opt stack 0
   843                           
   844                           ; 4 bytes @ 0xE
   845  000E'                    	ds	1
   846  000F'                    I2C_Read@n:
   847                           	opt stack 0
   848  000F'                    I2C_Write@n:
   849                           	opt stack 0
   850  000F'                    _isdigit$1523:
   851                           	opt stack 0
   852  000F'                    _drawtext$2:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0xF
   856  000F'                    	ds	1
   857  0010'                    I2C_Read@inByte:
   858                           	opt stack 0
   859  0010'                    I2C_Write_Cmd_Only@Cmd:
   860                           	opt stack 0
   861  0010'                    I2C_Write_Cmd_Write_Data@Cmd:
   862                           	opt stack 0
   863  0010'                    DS3231_Setup_Time@Device:
   864                           	opt stack 0
   865  0010'                    OpenUSART@config:
   866                           	opt stack 0
   867  0010'                    isdigit@c:
   868                           	opt stack 0
   869  0010'                    _fillCircle$1:
   870                           	opt stack 0
   871  0010'                    _drawCircle$1:
   872                           	opt stack 0
   873  0010'                    ___wmul@multiplicand:
   874                           	opt stack 0
   875  0010'                    ___awdiv@divisor:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x10
   879  0010'                    	ds	1
   880  0011'                    ?_DS1621_Read_Temp:
   881                           	opt stack 0
   882  0011'                    I2C_Write_Cmd_Only@Device:
   883                           	opt stack 0
   884  0011'                    I2C_Write_Cmd_Write_Data@Data_Out:
   885                           	opt stack 0
   886  0011'                    DS3231_Read_Time@Address:
   887                           	opt stack 0
   888  0011'                    DS3231_Setup_Time@Address:
   889                           	opt stack 0
   890  0011'                    _drawtext$3:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x11
   894  0011'                    	ds	1
   895  0012'                    I2C_Write_Cmd_Write_Data@Device:
   896                           	opt stack 0
   897  0012'                    DS3231_Read_Time@Device:
   898                           	opt stack 0
   899  0012'                    ___awdiv@counter:
   900                           	opt stack 0
   901  0012'                    _fillCircle$2:
   902                           	opt stack 0
   903  0012'                    _drawCircle$2:
   904                           	opt stack 0
   905  0012'                    ___wmul@product:
   906                           	opt stack 0
   907  0012'                    ___lldiv@divisor:
   908                           	opt stack 0
   909                           
   910                           ; 4 bytes @ 0x12
   911  0012'                    	ds	1
   912  0013'                    DS1621_Init@Device:
   913                           	opt stack 0
   914  0013'                    DS1621_Read_Temp@Cmd:
   915                           	opt stack 0
   916  0013'                    ___awdiv@sign:
   917                           	opt stack 0
   918  0013'                    _drawtext$4:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x13
   922  0013'                    	ds	1
   923  0014'                    DS1621_Read_Temp@Data_Ret:
   924                           	opt stack 0
   925  0014'                    _fillCircle$3:
   926                           	opt stack 0
   927  0014'                    _drawCircle$3:
   928                           	opt stack 0
   929  0014'                    ___awdiv@quotient:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x14
   933  0014'                    	ds	1
   934  0015'                    _drawtext$5:
   935                           	opt stack 0
   936  0015'                    DS1621_Read_Temp@Device:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x15
   940  0015'                    	ds	1
   941  0016'                    ___lldiv@quotient:
   942                           	opt stack 0
   943                           
   944                           ; 4 bytes @ 0x16
   945  0016'                    	ds	4
   946  001A'                    ___lldiv@counter:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x1A
   950  001A'                    	ds	1
   951  001B'                    ?___llmod:
   952                           	opt stack 0
   953  001B'                    ___llmod@dividend:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x1B
   957  001B'                    	ds	4
   958  001F'                    ___llmod@divisor:
   959                           	opt stack 0
   960                           
   961                           ; 4 bytes @ 0x1F
   962  001F'                    	ds	4
   963  0023'                    ___llmod@counter:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x23
   967  0023'                    	ds	1
   968  0024'                    ?_printf:
   969                           	opt stack 0
   970  0024'                    printf@f:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x24
   974  0024'                    	ds	14
   975  0032'                    ??_printf:
   976                           
   977                           ; 0 bytes @ 0x32
   978  0032'                    	ds	4
   979  0036'                    printf@idx:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x36
   983  0036'                    	ds	1
   984  0037'                    printf@prec:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x37
   988  0037'                    	ds	2
   989  0039'                    printf@ap:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x39
   993  0039'                    	ds	2
   994  003B'                    printf@val:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x3B
   998  003B'                    	ds	4
   999  003F'                    printf@width:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x3F
  1003  003F'                    	ds	2
  1004  0041'                    printf@flag:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x41
  1008  0041'                    	ds	1
  1009  0042'                    printf@c:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x42
  1013  0042'                    	ds	1
  1014  0043'                    
  1015                           ; 0 bytes @ 0x43
  1016  0043'                    	ds	1
  1017  0044'                    main@previousSecond:
  1018                           	opt stack 0
  1019                           
  1020                           ; 1 bytes @ 0x44
  1021  0044'                    	ds	1
  1022  0045'                    main@tempF:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x45
  1026  0045'                    	ds	1
  1027  0046'                    main@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x46
  1031  0046'                    	ds	2
  1032  0048'                    main@tempC:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x48
  1036  0048'                    	ds	1
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           fsr1l	equ	0xFE1
  1045                           
  1046 ;;
  1047 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1048 ;;
  1049 ;; *************** function _main *****************
  1050 ;; Defined at:
  1051 ;;		line 100 in file "lab11.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  i               2   70[COMRAM] int 
  1056 ;;  tempC           1   72[COMRAM] unsigned char 
  1057 ;;  tempF           1   69[COMRAM] unsigned char 
  1058 ;;  previousSeco    1   68[COMRAM] unsigned char 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;		None               void
  1061 ;; Registers used:
  1062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;Total ram usage:        6 bytes
  1073 ;; Hardware stack levels required when called:    7
  1074 ;; This function calls:
  1075 ;;		_Activate_Buzzer
  1076 ;;		_DS1621_Read_Temp
  1077 ;;		_DS3231_Read_Time
  1078 ;;		_DS3231_Setup_Time
  1079 ;;		_Deactivate_Buzzer
  1080 ;;		_Do_Init
  1081 ;;		_Wait_Half_Second
  1082 ;;		___awdiv
  1083 ;;		_drawCircle
  1084 ;;		_drawtext
  1085 ;;		_fillCircle
  1086 ;;		_printf
  1087 ;; This function is called by:
  1088 ;;		Startup code after reset
  1089 ;; This function uses a non-reentrant model
  1090 ;;
  1091                           
  1092                           	psect	text0
  1093  0000'                    __ptext0:
  1094                           	opt stack 0
  1095  0000'                    _main:
  1096                           	opt stack 24
  1097                           
  1098                           ;lab11.c: 102: Do_Init();
  1099                           
  1100                           ;incstack = 0
  1101  0000' EC00' F000'        	call	_Do_Init	;wreg free
  1102                           
  1103                           ;lab11.c: 104: DS3231_Setup_Time();
  1104  0004' EC00' F000'        	call	_DS3231_Setup_Time	;wreg free
  1105  0008'                    l169:
  1106                           
  1107                           ;lab11.c: 106: {
  1108                           ;lab11.c: 107: char tempC = DS1621_Read_Temp();
  1109  0008' EC00' F000'        	call	_DS1621_Read_Temp	;wreg free
  1110  000C' 5011'              	movf	?_DS1621_Read_Temp,w,c
  1111  000E' 6E48'              	movwf	main@tempC,c
  1112                           
  1113                           ;lab11.c: 108: char tempF = (tempC * 9 / 5) + 32;
  1114  0010' 5048'              	movf	main@tempC,w,c
  1115  0012' 0D09               	mullw	9
  1116  0014' CFF3 F00E'         	movff	prodl,___awdiv@dividend
  1117  0018' CFF4 F00F'         	movff	prodh,___awdiv@dividend+1
  1118  001C' 0E00               	movlw	0
  1119  001E' 6E11'              	movwf	___awdiv@divisor+1,c
  1120  0020' 0E05               	movlw	5
  1121  0022' 6E10'              	movwf	___awdiv@divisor,c
  1122  0024' EC00' F000'        	call	___awdiv	;wreg free
  1123  0028' 500E'              	movf	?___awdiv,w,c
  1124  002A' 0F20               	addlw	32
  1125  002C' 6E45'              	movwf	main@tempF,c
  1126                           
  1127                           ;lab11.c: 109: printf(" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1128  002E' 0E00'              	movlw	low STR_1
  1129  0030' 6E24'              	movwf	printf@f,c
  1130  0032' 0E00'              	movlw	high STR_1
  1131  0034' 6E25'              	movwf	printf@f+1,c
  1132  0036' C048' F026'        	movff	main@tempC,?_printf+2
  1133  003A' 6A27'              	clrf	?_printf+3,c
  1134  003C' C045' F028'        	movff	main@tempF,?_printf+4
  1135  0040' 6A29'              	clrf	?_printf+5,c
  1136  0042' EC00' F000'        	call	_printf	;wreg free
  1137                           
  1138                           ;lab11.c: 110: char previousSecond = second;
  1139  0046' C01C' F044'        	movff	_second,main@previousSecond
  1140                           
  1141                           ;lab11.c: 111: DS3231_Read_Time();
  1142  004A' EC00' F000'        	call	_DS3231_Read_Time	;wreg free
  1143                           
  1144                           ;lab11.c: 112: if(second != previousSecond){
  1145  004E' 5044'              	movf	main@previousSecond,w,c
  1146  0050' 181C'              	xorwf	_second,w,c
  1147  0052' B4D8               	btfsc	status,2,c
  1148  0054' D038               	goto	l2408
  1149                           
  1150                           ;lab11.c: 113: printf("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  1151  0056' 0E00'              	movlw	low STR_2
  1152  0058' 6E24'              	movwf	printf@f,c
  1153  005A' 0E00'              	movlw	high STR_2
  1154  005C' 6E25'              	movwf	printf@f+1,c
  1155  005E' C017' F026'        	movff	_hour,?_printf+2
  1156  0062' 6A27'              	clrf	?_printf+3,c
  1157  0064' C019' F028'        	movff	_minute,?_printf+4
  1158  0068' 6A29'              	clrf	?_printf+5,c
  1159  006A' C01C' F02A'        	movff	_second,?_printf+6
  1160  006E' 6A2B'              	clrf	?_printf+7,c
  1161  0070' C01A' F02C'        	movff	_month,?_printf+8
  1162  0074' 6A2D'              	clrf	?_printf+9,c
  1163  0076' C014' F02E'        	movff	_day,?_printf+10
  1164  007A' 6A2F'              	clrf	?_printf+11,c
  1165  007C' C026' F030'        	movff	_year,?_printf+12
  1166  0080' 6A31'              	clrf	?_printf+13,c
  1167  0082' EC00' F000'        	call	_printf	;wreg free
  1168                           
  1169                           ;lab11.c: 114: tempC = DS1621_Read_Temp();
  1170  0086' EC00' F000'        	call	_DS1621_Read_Temp	;wreg free
  1171  008A' 5011'              	movf	?_DS1621_Read_Temp,w,c
  1172  008C' 6E48'              	movwf	main@tempC,c
  1173                           
  1174                           ;lab11.c: 115: tempF = (tempC * 9 / 5) + 32;
  1175  008E' 5048'              	movf	main@tempC,w,c
  1176  0090' 0D09               	mullw	9
  1177  0092' CFF3 F00E'         	movff	prodl,___awdiv@dividend
  1178  0096' CFF4 F00F'         	movff	prodh,___awdiv@dividend+1
  1179  009A' 0E00               	movlw	0
  1180  009C' 6E11'              	movwf	___awdiv@divisor+1,c
  1181  009E' 0E05               	movlw	5
  1182  00A0' 6E10'              	movwf	___awdiv@divisor,c
  1183  00A2' EC00' F000'        	call	___awdiv	;wreg free
  1184  00A6' 500E'              	movf	?___awdiv,w,c
  1185  00A8' 0F20               	addlw	32
  1186  00AA' 6E45'              	movwf	main@tempF,c
  1187                           
  1188                           ;lab11.c: 116: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1189  00AC' 0E00'              	movlw	low STR_1
  1190  00AE' 6E24'              	movwf	printf@f,c
  1191  00B0' 0E00'              	movlw	high STR_1
  1192  00B2' 6E25'              	movwf	printf@f+1,c
  1193  00B4' C048' F026'        	movff	main@tempC,?_printf+2
  1194  00B8' 6A27'              	clrf	?_printf+3,c
  1195  00BA' C045' F028'        	movff	main@tempF,?_printf+4
  1196  00BE' 6A29'              	clrf	?_printf+5,c
  1197  00C0' EC00' F000'        	call	_printf	;wreg free
  1198  00C4' D000               	goto	l2408
  1199  00C6'                    l2408:
  1200                           
  1201                           ;lab11.c: 117: }
  1202                           ;lab11.c: 118: if(nec_ok == 1)
  1203  00C6' 0408'              	decf	_nec_ok,w,c
  1204  00C8' 1009'              	iorwf	_nec_ok+1,w,c
  1205  00CA' A4D8               	btfss	status,2,c
  1206  00CC' D79D               	goto	l169
  1207                           
  1208                           ;lab11.c: 119: {
  1209                           ;lab11.c: 120: nec_ok = 0;
  1210  00CE' 0E00               	movlw	0
  1211  00D0' 6E09'              	movwf	_nec_ok+1,c
  1212  00D2' 0E00               	movlw	0
  1213  00D4' 6E08'              	movwf	_nec_ok,c
  1214                           
  1215                           ;lab11.c: 121: Nec_code1 = (char)((Nec_code >> 8));
  1216  00D6' C001' F00C'        	movff	_Nec_code+1,_Nec_code1
  1217                           
  1218                           ;lab11.c: 122: INTCONbits.INT0IE = 1;
  1219  00DA' 88F2               	bsf	intcon,4,c	;volatile
  1220                           
  1221                           ;lab11.c: 123: INTCON2bits.INTEDG0 = 0;
  1222  00DC' 9CF1               	bcf	intcon2,6,c	;volatile
  1223                           
  1224                           ;lab11.c: 125: found = 0xff;
  1225  00DE' 6816'              	setf	_found,c
  1226                           
  1227                           ;lab11.c: 129: for(int i = 0;i < 21;i++)
  1228  00E0' 0E00               	movlw	0
  1229  00E2' 6E47'              	movwf	main@i+1,c
  1230  00E4' 0E00               	movlw	0
  1231  00E6' 6E46'              	movwf	main@i,c
  1232  00E8'                    l2420:
  1233  00E8' BE47'              	btfsc	main@i+1,7,c
  1234  00EA' D008               	goto	l2424
  1235  00EC' 5047'              	movf	main@i+1,w,c
  1236  00EE' E117               	bnz	l2432
  1237  00F0' 0E15               	movlw	21
  1238  00F2' 5C46'              	subwf	main@i,w,c
  1239  00F4' B0D8               	btfsc	status,0,c
  1240  00F6' D013               	goto	l2432
  1241  00F8' D001               	goto	l2424
  1242  00FA' D011               	goto	l2432
  1243  00FC'                    l2424:
  1244                           
  1245                           ;lab11.c: 130: {
  1246                           ;lab11.c: 131: if(array1[i] == Nec_code1)
  1247  00FC' 0E00'              	movlw	low _array1
  1248  00FE' 2446'              	addwf	main@i,w,c
  1249  0100' 6ED9               	movwf	fsr2l,c
  1250  0102' 0E00'              	movlw	high _array1
  1251  0104' 2047'              	addwfc	main@i+1,w,c
  1252  0106' 6EDA               	movwf	fsr2h,c
  1253  0108' 500C'              	movf	_Nec_code1,w,c
  1254  010A' 18DE               	xorwf	postinc2,w,c
  1255  010C' A4D8               	btfss	status,2,c
  1256  010E' D003               	goto	l2428
  1257                           
  1258                           ;lab11.c: 132: {
  1259                           ;lab11.c: 133: found = i;
  1260  0110' C046' F016'        	movff	main@i,_found
  1261                           
  1262                           ;lab11.c: 134: break;
  1263  0114' D004               	goto	l2432
  1264  0116'                    l2428:
  1265  0116' 4A46'              	infsnz	main@i,f,c
  1266  0118' 2A47'              	incf	main@i+1,f,c
  1267  011A' D7E6               	goto	l2420
  1268  011C' D000               	goto	l2432
  1269  011E'                    l2432:
  1270                           
  1271                           ;lab11.c: 135: }
  1272                           ;lab11.c: 136: }
  1273                           ;lab11.c: 138: printf ("NEC_Code = %08lx %x ", Nec_code, Nec_code1);
  1274  011E' 0E00'              	movlw	low STR_4
  1275  0120' 6E24'              	movwf	printf@f,c
  1276  0122' 0E00'              	movlw	high STR_4
  1277  0124' 6E25'              	movwf	printf@f+1,c
  1278  0126' C000' F026'        	movff	_Nec_code,?_printf+2
  1279  012A' C001' F027'        	movff	_Nec_code+1,?_printf+3
  1280  012E' C002' F028'        	movff	_Nec_code+2,?_printf+4
  1281  0132' C003' F029'        	movff	_Nec_code+3,?_printf+5
  1282  0136' C00C' F02A'        	movff	_Nec_code1,?_printf+6
  1283  013A' 6A2B'              	clrf	?_printf+7,c
  1284  013C' EC00' F000'        	call	_printf	;wreg free
  1285                           
  1286                           ;lab11.c: 139: printf ("Found = %d\r\n", found);
  1287  0140' 0E00'              	movlw	low STR_5
  1288  0142' 6E24'              	movwf	printf@f,c
  1289  0144' 0E00'              	movlw	high STR_5
  1290  0146' 6E25'              	movwf	printf@f+1,c
  1291  0148' C016' F026'        	movff	_found,?_printf+2
  1292  014C' 6A27'              	clrf	?_printf+3,c
  1293  014E' EC00' F000'        	call	_printf	;wreg free
  1294                           
  1295                           ;lab11.c: 140: if (found != 0xff)
  1296  0152' 2816'              	incf	_found,w,c
  1297  0154' B4D8               	btfsc	status,2,c
  1298  0156' D758               	goto	l169
  1299                           
  1300                           ;lab11.c: 141: {
  1301                           ;lab11.c: 142: PORTA = D1[found];
  1302  0158' 5016'              	movf	_found,w,c
  1303  015A' 0D01               	mullw	1
  1304  015C' 0E00'              	movlw	low _D1
  1305  015E' 24F3               	addwf	prodl,w,c
  1306  0160' 6ED9               	movwf	fsr2l,c
  1307  0162' 0E00'              	movlw	high _D1
  1308  0164' 20F4               	addwfc	prodh,w,c
  1309  0166' 6EDA               	movwf	fsr2h,c
  1310  0168' 50DF               	movf	indf2,w,c
  1311  016A' 6E80               	movwf	3968,c	;volatile
  1312                           
  1313                           ;lab11.c: 143: PORTD = D2[found];
  1314  016C' 5016'              	movf	_found,w,c
  1315  016E' 0D01               	mullw	1
  1316  0170' 0E00'              	movlw	low _D2
  1317  0172' 24F3               	addwf	prodl,w,c
  1318  0174' 6ED9               	movwf	fsr2l,c
  1319  0176' 0E00'              	movlw	high _D2
  1320  0178' 20F4               	addwfc	prodh,w,c
  1321  017A' 6EDA               	movwf	fsr2h,c
  1322  017C' 50DF               	movf	indf2,w,c
  1323  017E' 6E83               	movwf	3971,c	;volatile
  1324                           
  1325                           ;lab11.c: 144: PORTE = D3[found];
  1326  0180' 5016'              	movf	_found,w,c
  1327  0182' 0D01               	mullw	1
  1328  0184' 0E00'              	movlw	low _D3
  1329  0186' 24F3               	addwf	prodl,w,c
  1330  0188' 6ED9               	movwf	fsr2l,c
  1331  018A' 0E00'              	movlw	high _D3
  1332  018C' 20F4               	addwfc	prodh,w,c
  1333  018E' 6EDA               	movwf	fsr2h,c
  1334  0190' 50DF               	movf	indf2,w,c
  1335  0192' 6E84               	movwf	3972,c	;volatile
  1336                           
  1337                           ;lab11.c: 146: fillCircle(60, 80, 20, color[found]);
  1338  0194' 0E00               	movlw	0
  1339  0196' 6E0F'              	movwf	_fillCircle$0+1,c
  1340  0198' 0E3C               	movlw	60
  1341  019A' 6E0E'              	movwf	_fillCircle$0,c
  1342  019C' 0E00               	movlw	0
  1343  019E' 6E11'              	movwf	_fillCircle$1+1,c
  1344  01A0' 0E50               	movlw	80
  1345  01A2' 6E10'              	movwf	_fillCircle$1,c
  1346  01A4' 0E00               	movlw	0
  1347  01A6' 6E13'              	movwf	_fillCircle$2+1,c
  1348  01A8' 0E14               	movlw	20
  1349  01AA' 6E12'              	movwf	_fillCircle$2,c
  1350  01AC' 5016'              	movf	_found,w,c
  1351  01AE' 0D02               	mullw	2
  1352  01B0' 0E00'              	movlw	low _color
  1353  01B2' 24F3               	addwf	prodl,w,c
  1354  01B4' 6ED9               	movwf	fsr2l,c
  1355  01B6' 0E00'              	movlw	high _color
  1356  01B8' 20F4               	addwfc	prodh,w,c
  1357  01BA' 6EDA               	movwf	fsr2h,c
  1358  01BC' CFDE F014'         	movff	postinc2,_fillCircle$3
  1359  01C0' CFDD F015'         	movff	postdec2,_fillCircle$3+1
  1360  01C4' EC00' F000'        	call	_fillCircle	;wreg free
  1361                           
  1362                           ;lab11.c: 147: drawCircle(60, 80, 20, 0xFFFF);
  1363  01C8' 0E00               	movlw	0
  1364  01CA' 6E0F'              	movwf	_drawCircle$0+1,c
  1365  01CC' 0E3C               	movlw	60
  1366  01CE' 6E0E'              	movwf	_drawCircle$0,c
  1367  01D0' 0E00               	movlw	0
  1368  01D2' 6E11'              	movwf	_drawCircle$1+1,c
  1369  01D4' 0E50               	movlw	80
  1370  01D6' 6E10'              	movwf	_drawCircle$1,c
  1371  01D8' 0E00               	movlw	0
  1372  01DA' 6E13'              	movwf	_drawCircle$2+1,c
  1373  01DC' 0E14               	movlw	20
  1374  01DE' 6E12'              	movwf	_drawCircle$2,c
  1375  01E0' 0EFF               	movlw	255
  1376  01E2' 6E15'              	movwf	_drawCircle$3+1,c
  1377  01E4' 6814'              	setf	_drawCircle$3,c
  1378  01E6' EC00' F000'        	call	_drawCircle	;wreg free
  1379                           
  1380                           ;lab11.c: 148: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  1381  01EA' 0E4D               	movlw	77
  1382  01EC' 6E0E'              	movwf	_drawtext$1,c
  1383  01EE' 5016'              	movf	_found,w,c
  1384  01F0' 0D04               	mullw	4
  1385  01F2' 0E00'              	movlw	low _txt1
  1386  01F4' 24F3               	addwf	prodl,w,c
  1387  01F6' 6E0F'              	movwf	_drawtext$2,c
  1388  01F8' 0E00'              	movlw	high _txt1
  1389  01FA' 20F4               	addwfc	prodh,w,c
  1390  01FC' 6E10'              	movwf	_drawtext$2+1,c
  1391  01FE' 0EFF               	movlw	255
  1392  0200' 6E12'              	movwf	_drawtext$3+1,c
  1393  0202' 6811'              	setf	_drawtext$3,c
  1394  0204' 0E00               	movlw	0
  1395  0206' 6E14'              	movwf	_drawtext$4+1,c
  1396  0208' 0E00               	movlw	0
  1397  020A' 6E13'              	movwf	_drawtext$4,c
  1398  020C' 0E01               	movlw	1
  1399  020E' 6E15'              	movwf	_drawtext$5,c
  1400  0210' 0E34               	movlw	52
  1401  0212' EC00' F000'        	call	_drawtext
  1402                           
  1403                           ;lab11.c: 150: PORTBbits.RB7 = 1;
  1404  0216' 8E81               	bsf	3969,7,c	;volatile
  1405                           
  1406                           ;lab11.c: 152: Activate_Buzzer();
  1407  0218' EC00' F000'        	call	_Activate_Buzzer	;wreg free
  1408                           
  1409                           ;lab11.c: 153: Wait_Half_Second();
  1410  021C' EC00' F000'        	call	_Wait_Half_Second	;wreg free
  1411                           
  1412                           ;lab11.c: 154: PORTBbits.RB7 = 0;
  1413  0220' 9E81               	bcf	3969,7,c	;volatile
  1414                           
  1415                           ;lab11.c: 156: Deactivate_Buzzer();
  1416  0222' EC00' F000'        	call	_Deactivate_Buzzer	;wreg free
  1417  0226' D6F0               	goto	l169
  1418  0228' EF00' F000'        	goto	start
  1419  022C'                    __end_of_main:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           intcon	equ	0xFF2
  1428                           intcon2	equ	0xFF1
  1429                           postinc0	equ	0xFEE
  1430                           wreg	equ	0xFE8
  1431                           postdec1	equ	0xFE5
  1432                           fsr1l	equ	0xFE1
  1433                           indf2	equ	0xFDF
  1434                           postinc2	equ	0xFDE
  1435                           postdec2	equ	0xFDD
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _printf *****************
  1441 ;; Defined at:
  1442 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  f               2   36[COMRAM] PTR const unsigned char 
  1445 ;;		 -> STR_5(13), STR_4(21), STR_3(43), STR_2(30), 
  1446 ;;		 -> STR_1(43), 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  idx             1   54[COMRAM] unsigned char 
  1449 ;;  val             4   59[COMRAM] unsigned long 
  1450 ;;  tmpval          4    0        struct .
  1451 ;;  cp              3    0        PTR const unsigned char 
  1452 ;;  width           2   63[COMRAM] int 
  1453 ;;  ap              2   57[COMRAM] PTR void [1]
  1454 ;;		 -> ?_printf(2), 
  1455 ;;  prec            2   55[COMRAM] int 
  1456 ;;  len             2    0        unsigned int 
  1457 ;;  c               1   66[COMRAM] char 
  1458 ;;  flag            1   65[COMRAM] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2   36[COMRAM] int 
  1461 ;; Registers used:
  1462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1468 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1470 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1471 ;;      Totals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;Total ram usage:       31 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    3
  1475 ;; This function calls:
  1476 ;;		___lldiv
  1477 ;;		___llmod
  1478 ;;		___wmul
  1479 ;;		_isdigit
  1480 ;;		_putch
  1481 ;; This function is called by:
  1482 ;;		_main
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text1
  1487  0000'                    __ptext1:
  1488                           	opt stack 0
  1489  0000'                    _printf:
  1490                           	opt stack 27
  1491                           
  1492                           ;doprnt.c: 466: va_list ap;
  1493                           ;doprnt.c: 499: signed char c;
  1494                           ;doprnt.c: 501: int width;
  1495                           ;doprnt.c: 504: int prec;
  1496                           ;doprnt.c: 508: unsigned char flag;
  1497                           ;doprnt.c: 523: union {
  1498                           ;doprnt.c: 524: unsigned long vd;
  1499                           ;doprnt.c: 525: double integ;
  1500                           ;doprnt.c: 526: } tmpval;
  1501                           ;doprnt.c: 528: unsigned long val;
  1502                           ;doprnt.c: 529: unsigned len;
  1503                           ;doprnt.c: 530: const char * cp;
  1504                           ;doprnt.c: 533: *ap = __va_start();
  1505                           
  1506                           ;incstack = 0
  1507  0000' 0E00'              	movlw	low (?_printf+2)
  1508  0002' 6E39'              	movwf	printf@ap,c
  1509  0004' 0E00'              	movlw	high (?_printf+2)
  1510  0006' 6E3A'              	movwf	printf@ap+1,c
  1511                           
  1512                           ;doprnt.c: 536: while(c = *f++) {
  1513  0008' D20D               	goto	l2302
  1514  000A'                    l2164:
  1515                           
  1516                           ;doprnt.c: 538: if(c != '%')
  1517  000A' 0E25               	movlw	37
  1518  000C' 1842'              	xorwf	printf@c,w,c
  1519  000E' B4D8               	btfsc	status,2,c
  1520  0010' D004               	goto	l2168
  1521                           
  1522                           ;doprnt.c: 540: {
  1523                           ;doprnt.c: 541: (putch(c) );
  1524  0012' 5042'              	movf	printf@c,w,c
  1525  0014' EC00' F000'        	call	_putch
  1526                           
  1527                           ;doprnt.c: 542: continue;
  1528  0018' D205               	goto	l2302
  1529  001A'                    l2168:
  1530                           
  1531                           ;doprnt.c: 543: }
  1532                           ;doprnt.c: 546: width = 0;
  1533  001A' 0E00               	movlw	0
  1534  001C' 6E40'              	movwf	printf@width+1,c
  1535  001E' 0E00               	movlw	0
  1536  0020' 6E3F'              	movwf	printf@width,c
  1537                           
  1538                           ;doprnt.c: 548: flag = 0;
  1539  0022' 0E00               	movlw	0
  1540  0024' 6E41'              	movwf	printf@flag,c
  1541                           
  1542                           ;doprnt.c: 551: switch(*f) {
  1543                           
  1544                           ;doprnt.c: 550: for(;;) {
  1545  0026' D005               	goto	l2174
  1546  0028'                    l2170:
  1547                           
  1548                           ;doprnt.c: 580: flag |= 0x04;
  1549  0028' 8441'              	bsf	printf@flag,2,c
  1550                           
  1551                           ;doprnt.c: 581: f++;
  1552  002A' 4A24'              	infsnz	printf@f,f,c
  1553  002C' 2A25'              	incf	printf@f+1,f,c
  1554                           
  1555                           ;doprnt.c: 582: continue;
  1556  002E' D001               	goto	l2174
  1557                           
  1558                           ;doprnt.c: 584: }
  1559  0030' D00B               	goto	l2176
  1560  0032'                    l2174:
  1561  0032' C024' FFF6         	movff	printf@f,tblptrl
  1562  0036' C025' FFF7         	movff	printf@f+1,tblptrh
  1563  003A'                    	if	0	;tblptru may be non-zero
  1564  003A'                    	endif
  1565  003A'                    	if	0	;tblptru may be non-zero
  1566  003A'                    	endif
  1567  003A' 0008               	tblrd		*
  1568  003C' 50F5               	movf	tablat,w,c
  1569                           
  1570                           ; Switch size 1, requested type "space"
  1571                           ; Number of cases is 1, Range of values is 48 to 48
  1572                           ; switch strategies available:
  1573                           ; Name         Instructions Cycles
  1574                           ; simple_byte            4     3 (average)
  1575                           ;	Chosen strategy is simple_byte
  1576  003E' 0A30               	xorlw	48	; case 48
  1577  0040' B4D8               	btfsc	status,2,c
  1578  0042' D7F2               	goto	l2170
  1579                           
  1580                           ;doprnt.c: 585: break;
  1581  0044' D001               	goto	l2176
  1582                           
  1583                           ;doprnt.c: 586: }
  1584  0046' D7F5               	goto	l2174
  1585  0048'                    l2176:
  1586                           
  1587                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1588  0048' C024' FFF6         	movff	printf@f,tblptrl
  1589  004C' C025' FFF7         	movff	printf@f+1,tblptrh
  1590  0050'                    	if	0	;tblptru may be non-zero
  1591  0050'                    	endif
  1592  0050'                    	if	0	;tblptru may be non-zero
  1593  0050'                    	endif
  1594  0050' 0008               	tblrd		*
  1595  0052' 50F5               	movf	tablat,w,c
  1596  0054' EC00' F000'        	call	_isdigit
  1597  0058' A0D8               	btfss	status,0,c
  1598  005A' D03D               	goto	l2194
  1599                           
  1600                           ;doprnt.c: 598: width = 0;
  1601  005C' 0E00               	movlw	0
  1602  005E' 6E40'              	movwf	printf@width+1,c
  1603  0060' 0E00               	movlw	0
  1604  0062' 6E3F'              	movwf	printf@width,c
  1605  0064' D000               	goto	l2180
  1606  0066'                    l2180:
  1607                           
  1608                           ;doprnt.c: 600: width *= 10;
  1609  0066' C03F' F00E'        	movff	printf@width,___wmul@multiplier
  1610  006A' C040' F00F'        	movff	printf@width+1,___wmul@multiplier+1
  1611  006E' 0E00               	movlw	0
  1612  0070' 6E11'              	movwf	___wmul@multiplicand+1,c
  1613  0072' 0E0A               	movlw	10
  1614  0074' 6E10'              	movwf	___wmul@multiplicand,c
  1615  0076' EC00' F000'        	call	___wmul	;wreg free
  1616  007A' C00E' F03F'        	movff	?___wmul,printf@width
  1617  007E' C00F' F040'        	movff	?___wmul+1,printf@width+1
  1618                           
  1619                           ;doprnt.c: 601: width += *f++ - '0';
  1620  0082' 0ED0               	movlw	208
  1621  0084' 6E00'              	movwf	??_printf& (0+255),c
  1622  0086' 0EFF               	movlw	255
  1623  0088' 6E00'              	movwf	(??_printf+1)& (0+255),c
  1624  008A' C024' FFF6         	movff	printf@f,tblptrl
  1625  008E' C025' FFF7         	movff	printf@f+1,tblptrh
  1626  0092'                    	if	0	;tblptru may be non-zero
  1627  0092'                    	endif
  1628  0092'                    	if	0	;tblptru may be non-zero
  1629  0092'                    	endif
  1630  0092' 0008               	tblrd		*
  1631  0094' 50F5               	movf	tablat,w,c
  1632  0096' 6E00'              	movwf	(??_printf+2)& (0+255),c
  1633  0098' 6A00'              	clrf	(??_printf+3)& (0+255),c
  1634  009A' 5032'              	movf	??_printf,w,c
  1635  009C' 2634'              	addwf	??_printf+2,f,c
  1636  009E' 5033'              	movf	??_printf+1,w,c
  1637  00A0' 2235'              	addwfc	??_printf+3,f,c
  1638  00A2' 5034'              	movf	??_printf+2,w,c
  1639  00A4' 263F'              	addwf	printf@width,f,c
  1640  00A6' 5035'              	movf	??_printf+3,w,c
  1641  00A8' 2240'              	addwfc	printf@width+1,f,c
  1642  00AA' 4A24'              	infsnz	printf@f,f,c
  1643  00AC' 2A25'              	incf	printf@f+1,f,c
  1644                           
  1645                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1646  00AE' C024' FFF6         	movff	printf@f,tblptrl
  1647  00B2' C025' FFF7         	movff	printf@f+1,tblptrh
  1648  00B6'                    	if	0	;tblptru may be non-zero
  1649  00B6'                    	endif
  1650  00B6'                    	if	0	;tblptru may be non-zero
  1651  00B6'                    	endif
  1652  00B6' 0008               	tblrd		*
  1653  00B8' 50F5               	movf	tablat,w,c
  1654  00BA' EC00' F000'        	call	_isdigit
  1655  00BE' A0D8               	btfss	status,0,c
  1656  00C0' D00A               	goto	l2194
  1657  00C2' D7D1               	goto	l2180
  1658                           
  1659                           ;doprnt.c: 635: switch(c = *f++) {
  1660                           
  1661                           ;doprnt.c: 608: }
  1662                           ;doprnt.c: 633: loop:
  1663  00C4' D008               	goto	l2194
  1664                           
  1665                           ;doprnt.c: 638: goto alldone;
  1666                           
  1667                           ;doprnt.c: 637: case 0:
  1668  00C6' D1BC               	goto	l472
  1669  00C8'                    l2188:
  1670                           
  1671                           ;doprnt.c: 643: flag |= 0x10;
  1672  00C8' 8841'              	bsf	printf@flag,4,c
  1673                           
  1674                           ;doprnt.c: 644: goto loop;
  1675  00CA' D005               	goto	l2194
  1676                           
  1677                           ;doprnt.c: 698: case 'i':
  1678                           ;doprnt.c: 699: break;
  1679                           
  1680                           ;doprnt.c: 697: case 'd':
  1681  00CC' D01E               	goto	l431
  1682  00CE'                    l2190:
  1683                           
  1684                           ;doprnt.c: 721: flag |= 0x80;
  1685  00CE' 8E41'              	bsf	printf@flag,7,c
  1686                           
  1687                           ;doprnt.c: 723: break;
  1688  00D0' D01C               	goto	l431
  1689                           
  1690                           ;doprnt.c: 813: continue;
  1691                           
  1692                           ;doprnt.c: 802: default:
  1693  00D2' D1A8               	goto	l2302
  1694                           
  1695                           ;doprnt.c: 822: }
  1696  00D4' D01A               	goto	l431
  1697  00D6'                    l2194:
  1698  00D6' C024' FFF6         	movff	printf@f,tblptrl
  1699  00DA' C025' FFF7         	movff	printf@f+1,tblptrh
  1700  00DE' 4A24'              	infsnz	printf@f,f,c
  1701  00E0' 2A25'              	incf	printf@f+1,f,c
  1702  00E2'                    	if	0	;tblptru may be non-zero
  1703  00E2'                    	endif
  1704  00E2'                    	if	0	;tblptru may be non-zero
  1705  00E2'                    	endif
  1706  00E2' 0008               	tblrd		*
  1707  00E4' CFF5 F042'         	movff	tablat,printf@c
  1708  00E8' 5042'              	movf	printf@c,w,c
  1709                           
  1710                           ; Switch size 1, requested type "space"
  1711                           ; Number of cases is 5, Range of values is 0 to 120
  1712                           ; switch strategies available:
  1713                           ; Name         Instructions Cycles
  1714                           ; simple_byte           16     9 (average)
  1715                           ;	Chosen strategy is simple_byte
  1716  00EA' 0A00               	xorlw	0	; case 0
  1717  00EC' B4D8               	btfsc	status,2,c
  1718  00EE' D1A8               	goto	l472
  1719  00F0' 0A64               	xorlw	100	; case 100
  1720  00F2' B4D8               	btfsc	status,2,c
  1721  00F4' D00A               	goto	l431
  1722  00F6' 0A0D               	xorlw	13	; case 105
  1723  00F8' B4D8               	btfsc	status,2,c
  1724  00FA' D007               	goto	l431
  1725  00FC' 0A05               	xorlw	5	; case 108
  1726  00FE' B4D8               	btfsc	status,2,c
  1727  0100' D7E3               	goto	l2188
  1728  0102' 0A14               	xorlw	20	; case 120
  1729  0104' B4D8               	btfsc	status,2,c
  1730  0106' D7E3               	goto	l2190
  1731  0108' D18D               	goto	l2302
  1732  010A'                    l431:
  1733                           
  1734                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  1735  010A' BE41'              	btfsc	printf@flag,7,c
  1736  010C' D02F               	goto	l434
  1737                           
  1738                           ;doprnt.c: 1253: {
  1739                           ;doprnt.c: 1255: if(flag & 0x10)
  1740  010E' A841'              	btfss	printf@flag,4,c
  1741  0110' D00E               	goto	l2202
  1742                           
  1743                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1744  0112' C039' FFD9         	movff	printf@ap,fsr2l
  1745  0116' C03A' FFDA         	movff	printf@ap+1,fsr2h
  1746  011A' CFDE F03B'         	movff	postinc2,printf@val
  1747  011E' CFDE F03C'         	movff	postinc2,printf@val+1
  1748  0122' CFDE F03D'         	movff	postinc2,printf@val+2
  1749  0126' CFDE F03E'         	movff	postinc2,printf@val+3
  1750  012A' 0E04               	movlw	4
  1751  012C' D00E               	goto	L1
  1752  012E'                    l2202:
  1753                           
  1754                           ;doprnt.c: 1257: else
  1755                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1756  012E' C039' FFD9         	movff	printf@ap,fsr2l
  1757  0132' C03A' FFDA         	movff	printf@ap+1,fsr2h
  1758  0136' CFDE F03B'         	movff	postinc2,printf@val
  1759  013A' CFDD F03C'         	movff	postdec2,printf@val+1
  1760  013E' 0E00               	movlw	0
  1761  0140' BE3C'              	btfsc	printf@val+1,7,c
  1762  0142' 0EFF               	movlw	-1
  1763  0144' 6E3D'              	movwf	printf@val+2,c
  1764  0146' 6E3E'              	movwf	printf@val+3,c
  1765  0148' 0E02               	movlw	2
  1766  014A'                    L1:
  1767  014A' 2639'              	addwf	printf@ap,f,c
  1768  014C' 0E00               	movlw	0
  1769  014E' 223A'              	addwfc	printf@ap+1,f,c
  1770  0150' D000               	goto	l2206
  1771  0152'                    l2206:
  1772                           
  1773                           ;doprnt.c: 1261: if((long)val < 0) {
  1774  0152' AE3E'              	btfss	printf@val+3,7,c
  1775  0154' D074               	goto	l2250
  1776                           
  1777                           ;doprnt.c: 1262: flag |= 0x03;
  1778  0156' 0E03               	movlw	3
  1779  0158' 1241'              	iorwf	printf@flag,f,c
  1780                           
  1781                           ;doprnt.c: 1263: val = -val;
  1782  015A' 1E3E'              	comf	printf@val+3,f,c
  1783  015C' 1E3D'              	comf	printf@val+2,f,c
  1784  015E' 1E3C'              	comf	printf@val+1,f,c
  1785  0160' 6C3B'              	negf	printf@val,c
  1786  0162' 0E00               	movlw	0
  1787  0164' 223C'              	addwfc	printf@val+1,f,c
  1788  0166' 223D'              	addwfc	printf@val+2,f,c
  1789  0168' 223E'              	addwfc	printf@val+3,f,c
  1790                           
  1791                           ;doprnt.c: 1264: }
  1792                           ;doprnt.c: 1266: }
  1793  016A' D069               	goto	l2250
  1794  016C'                    l434:
  1795                           
  1796                           ;doprnt.c: 1268: else
  1797                           ;doprnt.c: 1273: {
  1798                           ;doprnt.c: 1281: if(flag & 0x10)
  1799  016C' A841'              	btfss	printf@flag,4,c
  1800  016E' D00E               	goto	l2216
  1801                           
  1802                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1803  0170' C039' FFD9         	movff	printf@ap,fsr2l
  1804  0174' C03A' FFDA         	movff	printf@ap+1,fsr2h
  1805  0178' CFDE F03B'         	movff	postinc2,printf@val
  1806  017C' CFDE F03C'         	movff	postinc2,printf@val+1
  1807  0180' CFDE F03D'         	movff	postinc2,printf@val+2
  1808  0184' CFDE F03E'         	movff	postinc2,printf@val+3
  1809  0188' 0E04               	movlw	4
  1810  018A' D00F               	goto	L2
  1811  018C'                    l2216:
  1812                           
  1813                           ;doprnt.c: 1283: else
  1814                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1815  018C' C039' FFD9         	movff	printf@ap,fsr2l
  1816  0190' C03A' FFDA         	movff	printf@ap+1,fsr2h
  1817  0194' CFDE F032'         	movff	postinc2,??_printf
  1818  0198' CFDD F033'         	movff	postdec2,??_printf+1
  1819  019C' C032' F03B'        	movff	??_printf,printf@val
  1820  01A0' C033' F03C'        	movff	??_printf+1,printf@val+1
  1821  01A4' 6A3D'              	clrf	printf@val+2,c
  1822  01A6' 6A3E'              	clrf	printf@val+3,c
  1823  01A8' 0E02               	movlw	2
  1824  01AA'                    L2:
  1825  01AA' 2639'              	addwf	printf@ap,f,c
  1826  01AC' 0E00               	movlw	0
  1827  01AE' 223A'              	addwfc	printf@ap+1,f,c
  1828                           
  1829                           ;doprnt.c: 1287: }
  1830                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  1831  01B0' D046               	goto	l2250
  1832  01B2'                    l2220:
  1833                           
  1834                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1835  01B2' 0E01               	movlw	1
  1836  01B4' 6E42'              	movwf	printf@c,c
  1837  01B6'                    l2222:
  1838  01B6' 0E0A               	movlw	10
  1839  01B8' 1842'              	xorwf	printf@c,w,c
  1840  01BA' B4D8               	btfsc	status,2,c
  1841  01BC' D049               	goto	l2252
  1842  01BE' D001               	goto	l2226
  1843  01C0' D047               	goto	l2252
  1844  01C2'                    l2226:
  1845                           
  1846                           ;doprnt.c: 1306: if(val < dpowers[c])
  1847  01C2' 5042'              	movf	printf@c,w,c
  1848  01C4' 0D04               	mullw	4
  1849  01C6' 0E00'              	movlw	low _dpowers
  1850  01C8' 24F3               	addwf	prodl,w,c
  1851  01CA' 6EF6               	movwf	tblptrl,c
  1852  01CC' 0E00'              	movlw	high _dpowers
  1853  01CE' 20F4               	addwfc	prodh,w,c
  1854  01D0' 6EF7               	movwf	tblptrh,c
  1855  01D2'                    	if	0	;There are less than 3 active tblptr bytes
  1856  01D2'                    	endif
  1857  01D2' 0009               	tblrd		*+
  1858  01D4' 50F5               	movf	tablat,w,c
  1859  01D6' 5C3B'              	subwf	printf@val,w,c
  1860  01D8' 0009               	tblrd		*+
  1861  01DA' 50F5               	movf	tablat,w,c
  1862  01DC' 583C'              	subwfb	printf@val+1,w,c
  1863  01DE' 0009               	tblrd		*+
  1864  01E0' 50F5               	movf	tablat,w,c
  1865  01E2' 583D'              	subwfb	printf@val+2,w,c
  1866  01E4' 0009               	tblrd		*+
  1867  01E6' 50F5               	movf	tablat,w,c
  1868  01E8' 583E'              	subwfb	printf@val+3,w,c
  1869  01EA' A0D8               	btfss	status,0,c
  1870  01EC' D031               	goto	l2252
  1871  01EE' D001               	goto	l2230
  1872                           
  1873                           ;doprnt.c: 1307: break;
  1874  01F0' D02F               	goto	l2252
  1875  01F2'                    l2230:
  1876  01F2' 2A42'              	incf	printf@c,f,c
  1877  01F4' D7E0               	goto	l2222
  1878                           
  1879                           ;doprnt.c: 1309: break;
  1880  01F6' D02C               	goto	l2252
  1881  01F8'                    l2234:
  1882                           
  1883                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1884  01F8' 0E01               	movlw	1
  1885  01FA' 6E42'              	movwf	printf@c,c
  1886  01FC'                    l2236:
  1887  01FC' 0E08               	movlw	8
  1888  01FE' 1842'              	xorwf	printf@c,w,c
  1889  0200' B4D8               	btfsc	status,2,c
  1890  0202' D026               	goto	l2252
  1891  0204' D001               	goto	l2240
  1892  0206' D024               	goto	l2252
  1893  0208'                    l2240:
  1894                           
  1895                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1896  0208' 5042'              	movf	printf@c,w,c
  1897  020A' 0D04               	mullw	4
  1898  020C' 0E00'              	movlw	low _hexpowers
  1899  020E' 24F3               	addwf	prodl,w,c
  1900  0210' 6EF6               	movwf	tblptrl,c
  1901  0212' 0E00'              	movlw	high _hexpowers
  1902  0214' 20F4               	addwfc	prodh,w,c
  1903  0216' 6EF7               	movwf	tblptrh,c
  1904  0218'                    	if	0	;There are less than 3 active tblptr bytes
  1905  0218'                    	endif
  1906  0218' 0009               	tblrd		*+
  1907  021A' 50F5               	movf	tablat,w,c
  1908  021C' 5C3B'              	subwf	printf@val,w,c
  1909  021E' 0009               	tblrd		*+
  1910  0220' 50F5               	movf	tablat,w,c
  1911  0222' 583C'              	subwfb	printf@val+1,w,c
  1912  0224' 0009               	tblrd		*+
  1913  0226' 50F5               	movf	tablat,w,c
  1914  0228' 583D'              	subwfb	printf@val+2,w,c
  1915  022A' 0009               	tblrd		*+
  1916  022C' 50F5               	movf	tablat,w,c
  1917  022E' 583E'              	subwfb	printf@val+3,w,c
  1918  0230' A0D8               	btfss	status,0,c
  1919  0232' D00E               	goto	l2252
  1920  0234' D001               	goto	l2244
  1921                           
  1922                           ;doprnt.c: 1318: break;
  1923  0236' D00C               	goto	l2252
  1924  0238'                    l2244:
  1925  0238' 2A42'              	incf	printf@c,f,c
  1926  023A' D7E0               	goto	l2236
  1927                           
  1928                           ;doprnt.c: 1336: }
  1929                           
  1930                           ;doprnt.c: 1320: break;
  1931  023C' D009               	goto	l2252
  1932  023E'                    l2250:
  1933  023E' 5041'              	movf	printf@flag,w,c
  1934  0240' 0B80               	andlw	128
  1935                           
  1936                           ; Switch size 1, requested type "space"
  1937                           ; Number of cases is 2, Range of values is 0 to 128
  1938                           ; switch strategies available:
  1939                           ; Name         Instructions Cycles
  1940                           ; simple_byte            7     4 (average)
  1941                           ;	Chosen strategy is simple_byte
  1942  0242' 0A00               	xorlw	0	; case 0
  1943  0244' B4D8               	btfsc	status,2,c
  1944  0246' D7B5               	goto	l2220
  1945  0248' 0A80               	xorlw	128	; case 128
  1946  024A' B4D8               	btfsc	status,2,c
  1947  024C' D7D5               	goto	l2234
  1948  024E' D000               	goto	l2252
  1949  0250'                    l2252:
  1950                           
  1951                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1952  0250' 503F'              	movf	printf@width,w,c
  1953  0252' 1040'              	iorwf	printf@width+1,w,c
  1954  0254' B4D8               	btfsc	status,2,c
  1955  0256' D00A               	goto	l2258
  1956  0258' C041' F032'        	movff	printf@flag,??_printf
  1957  025C' 0E03               	movlw	3
  1958  025E' 1632'              	andwf	??_printf,f,c
  1959  0260' B4D8               	btfsc	status,2,c
  1960  0262' D004               	goto	l2258
  1961                           
  1962                           ;doprnt.c: 1346: width--;
  1963  0264' 063F'              	decf	printf@width,f,c
  1964  0266' A0D8               	btfss	status,0,c
  1965  0268' 0640'              	decf	printf@width+1,f,c
  1966  026A' D000               	goto	l2258
  1967  026C'                    l2258:
  1968                           
  1969                           ;doprnt.c: 1381: if(width > c)
  1970  026C' 0E80               	movlw	128
  1971  026E' BE42'              	btfsc	printf@c,7,c
  1972  0270' 0E7F               	movlw	127
  1973  0272' 6E00'              	movwf	??_printf& (0+255),c
  1974  0274' 503F'              	movf	printf@width,w,c
  1975  0276' 5C42'              	subwf	printf@c,w,c
  1976  0278' 5040'              	movf	printf@width+1,w,c
  1977  027A' 0A80               	xorlw	128
  1978  027C' 5800'              	subwfb	??_printf& (0+255),w,c
  1979  027E' B0D8               	btfsc	status,0,c
  1980  0280' D007               	goto	l2262
  1981                           
  1982                           ;doprnt.c: 1382: width -= c;
  1983  0282' 5042'              	movf	printf@c,w,c
  1984  0284' 5E3F'              	subwf	printf@width,f,c
  1985  0286' 0E00               	movlw	0
  1986  0288' BE42'              	btfsc	printf@c,7,c
  1987  028A' 0EFF               	movlw	255
  1988  028C' 5A40'              	subwfb	printf@width+1,f,c
  1989  028E' D005               	goto	l2264
  1990  0290'                    l2262:
  1991                           
  1992                           ;doprnt.c: 1383: else
  1993                           ;doprnt.c: 1384: width = 0;
  1994  0290' 0E00               	movlw	0
  1995  0292' 6E40'              	movwf	printf@width+1,c
  1996  0294' 0E00               	movlw	0
  1997  0296' 6E3F'              	movwf	printf@width,c
  1998  0298' D000               	goto	l2264
  1999  029A'                    l2264:
  2000                           
  2001                           ;doprnt.c: 1387: if(flag & 0x04) {
  2002  029A' A441'              	btfss	printf@flag,2,c
  2003  029C' D01A               	goto	l2276
  2004                           
  2005                           ;doprnt.c: 1392: if(flag & 0x03)
  2006  029E' C041' F032'        	movff	printf@flag,??_printf
  2007  02A2' 0E03               	movlw	3
  2008  02A4' 1632'              	andwf	??_printf,f,c
  2009  02A6' B4D8               	btfsc	status,2,c
  2010  02A8' D004               	goto	l2270
  2011                           
  2012                           ;doprnt.c: 1393: (putch('-') );
  2013  02AA' 0E2D               	movlw	45
  2014  02AC' EC00' F000'        	call	_putch
  2015  02B0' D000               	goto	l2270
  2016  02B2'                    l2270:
  2017                           
  2018                           ;doprnt.c: 1415: if(width)
  2019  02B2' 503F'              	movf	printf@width,w,c
  2020  02B4' 1040'              	iorwf	printf@width+1,w,c
  2021  02B6' B4D8               	btfsc	status,2,c
  2022  02B8' D026               	goto	l2286
  2023  02BA'                    l2272:
  2024                           
  2025                           ;doprnt.c: 1417: (putch('0') );
  2026  02BA' 0E30               	movlw	48
  2027  02BC' EC00' F000'        	call	_putch
  2028                           
  2029                           ;doprnt.c: 1418: while(--width);
  2030  02C0' 063F'              	decf	printf@width,f,c
  2031  02C2' A0D8               	btfss	status,0,c
  2032  02C4' 0640'              	decf	printf@width+1,f,c
  2033  02C6' 503F'              	movf	printf@width,w,c
  2034  02C8' 1040'              	iorwf	printf@width+1,w,c
  2035  02CA' B4D8               	btfsc	status,2,c
  2036  02CC' D01C               	goto	l2286
  2037  02CE' D7F5               	goto	l2272
  2038                           
  2039                           ;doprnt.c: 1420: } else
  2040  02D0' D01A               	goto	l2286
  2041  02D2'                    l2276:
  2042                           
  2043                           ;doprnt.c: 1422: {
  2044                           ;doprnt.c: 1424: if(width
  2045                           ;doprnt.c: 1428: )
  2046  02D2' 503F'              	movf	printf@width,w,c
  2047  02D4' 1040'              	iorwf	printf@width+1,w,c
  2048  02D6' B4D8               	btfsc	status,2,c
  2049  02D8' D00C               	goto	l2282
  2050  02DA'                    l2278:
  2051                           
  2052                           ;doprnt.c: 1430: (putch(' ') );
  2053  02DA' 0E20               	movlw	32
  2054  02DC' EC00' F000'        	call	_putch
  2055                           
  2056                           ;doprnt.c: 1431: while(--width);
  2057  02E0' 063F'              	decf	printf@width,f,c
  2058  02E2' A0D8               	btfss	status,0,c
  2059  02E4' 0640'              	decf	printf@width+1,f,c
  2060  02E6' 503F'              	movf	printf@width,w,c
  2061  02E8' 1040'              	iorwf	printf@width+1,w,c
  2062  02EA' B4D8               	btfsc	status,2,c
  2063  02EC' D002               	goto	l2282
  2064  02EE' D7F5               	goto	l2278
  2065  02F0' D000               	goto	l2282
  2066  02F2'                    l2282:
  2067                           
  2068                           ;doprnt.c: 1438: if(flag & 0x03)
  2069  02F2' C041' F032'        	movff	printf@flag,??_printf
  2070  02F6' 0E03               	movlw	3
  2071  02F8' 1632'              	andwf	??_printf,f,c
  2072  02FA' B4D8               	btfsc	status,2,c
  2073  02FC' D004               	goto	l2286
  2074                           
  2075                           ;doprnt.c: 1439: (putch('-') );
  2076  02FE' 0E2D               	movlw	45
  2077  0300' EC00' F000'        	call	_putch
  2078  0304' D000               	goto	l2286
  2079  0306'                    l2286:
  2080                           
  2081                           ;doprnt.c: 1469: }
  2082                           ;doprnt.c: 1472: prec = c;
  2083  0306' 5042'              	movf	printf@c,w,c
  2084  0308' 6E37'              	movwf	printf@prec,c
  2085  030A' 6A38'              	clrf	printf@prec+1,c
  2086  030C' BE37'              	btfsc	printf@prec,7,c
  2087  030E' 0638'              	decf	printf@prec+1,f,c
  2088                           
  2089                           ;doprnt.c: 1474: while(prec--) {
  2090  0310' D07F               	goto	l2300
  2091                           
  2092                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2093  0312' D071               	goto	l2296
  2094  0314'                    l2288:
  2095                           
  2096                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2097  0314' C037' F032'        	movff	printf@prec,??_printf
  2098  0318' C038' F033'        	movff	printf@prec+1,??_printf+1
  2099  031C' 90D8               	bcf	status,0,c
  2100  031E' 3632'              	rlcf	??_printf,f,c
  2101  0320' 3633'              	rlcf	??_printf+1,f,c
  2102  0322' 90D8               	bcf	status,0,c
  2103  0324' 3632'              	rlcf	??_printf,f,c
  2104  0326' 3633'              	rlcf	??_printf+1,f,c
  2105  0328' 0E00'              	movlw	low _dpowers
  2106  032A' 2432'              	addwf	??_printf,w,c
  2107  032C' 6EF6               	movwf	tblptrl,c
  2108  032E' 0E00'              	movlw	high _dpowers
  2109  0330' 2033'              	addwfc	??_printf+1,w,c
  2110  0332' 6EF7               	movwf	tblptrh,c
  2111  0334'                    	if	0	;There are less than 3 active tblptr bytes
  2112  0334'                    	endif
  2113  0334' 0009               	tblrd		*+
  2114  0336' CFF5 F012'         	movff	tablat,___lldiv@divisor
  2115  033A' 0009               	tblrd		*+
  2116  033C' CFF5 F013'         	movff	tablat,___lldiv@divisor+1
  2117  0340' 0009               	tblrd		*+
  2118  0342' CFF5 F014'         	movff	tablat,___lldiv@divisor+2
  2119  0346' 000A               	tblrd		*-
  2120  0348' CFF5 F015'         	movff	tablat,___lldiv@divisor+3
  2121  034C' C03B' F00E'        	movff	printf@val,___lldiv@dividend
  2122  0350' C03C' F00F'        	movff	printf@val+1,___lldiv@dividend+1
  2123  0354' C03D' F010'        	movff	printf@val+2,___lldiv@dividend+2
  2124  0358' C03E' F011'        	movff	printf@val+3,___lldiv@dividend+3
  2125  035C' EC00' F000'        	call	___lldiv	;wreg free
  2126  0360' C00E' F01B'        	movff	?___lldiv,___llmod@dividend
  2127  0364' C00F' F01C'        	movff	?___lldiv+1,___llmod@dividend+1
  2128  0368' C010' F01D'        	movff	?___lldiv+2,___llmod@dividend+2
  2129  036C' C011' F01E'        	movff	?___lldiv+3,___llmod@dividend+3
  2130  0370' 0E0A               	movlw	10
  2131  0372' 6E1F'              	movwf	___llmod@divisor,c
  2132  0374' 0E00               	movlw	0
  2133  0376' 6E20'              	movwf	___llmod@divisor+1,c
  2134  0378' 0E00               	movlw	0
  2135  037A' 6E21'              	movwf	___llmod@divisor+2,c
  2136  037C' 0E00               	movlw	0
  2137  037E' 6E22'              	movwf	___llmod@divisor+3,c
  2138  0380' EC00' F000'        	call	___llmod	;wreg free
  2139  0384' 501B'              	movf	?___llmod,w,c
  2140  0386' 0F30               	addlw	48
  2141  0388' 6E42'              	movwf	printf@c,c
  2142                           
  2143                           ;doprnt.c: 1491: break;
  2144  038A' D03E               	goto	l2298
  2145  038C'                    l2290:
  2146                           
  2147                           ;doprnt.c: 1499: {
  2148                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2149  038C' C03B' F00E'        	movff	printf@val,___lldiv@dividend
  2150  0390' C03C' F00F'        	movff	printf@val+1,___lldiv@dividend+1
  2151  0394' C03D' F010'        	movff	printf@val+2,___lldiv@dividend+2
  2152  0398' C03E' F011'        	movff	printf@val+3,___lldiv@dividend+3
  2153  039C' C037' F032'        	movff	printf@prec,??_printf
  2154  03A0' C038' F033'        	movff	printf@prec+1,??_printf+1
  2155  03A4' 90D8               	bcf	status,0,c
  2156  03A6' 3632'              	rlcf	??_printf,f,c
  2157  03A8' 3633'              	rlcf	??_printf+1,f,c
  2158  03AA' 90D8               	bcf	status,0,c
  2159  03AC' 3632'              	rlcf	??_printf,f,c
  2160  03AE' 3633'              	rlcf	??_printf+1,f,c
  2161  03B0' 0E00'              	movlw	low _hexpowers
  2162  03B2' 2432'              	addwf	??_printf,w,c
  2163  03B4' 6EF6               	movwf	tblptrl,c
  2164  03B6' 0E00'              	movlw	high _hexpowers
  2165  03B8' 2033'              	addwfc	??_printf+1,w,c
  2166  03BA' 6EF7               	movwf	tblptrh,c
  2167  03BC'                    	if	0	;There are less than 3 active tblptr bytes
  2168  03BC'                    	endif
  2169  03BC' 0009               	tblrd		*+
  2170  03BE' CFF5 F012'         	movff	tablat,___lldiv@divisor
  2171  03C2' 0009               	tblrd		*+
  2172  03C4' CFF5 F013'         	movff	tablat,___lldiv@divisor+1
  2173  03C8' 0009               	tblrd		*+
  2174  03CA' CFF5 F014'         	movff	tablat,___lldiv@divisor+2
  2175  03CE' 000A               	tblrd		*-
  2176  03D0' CFF5 F015'         	movff	tablat,___lldiv@divisor+3
  2177  03D4' EC00' F000'        	call	___lldiv	;wreg free
  2178  03D8' 500E'              	movf	?___lldiv,w,c
  2179  03DA' 0B0F               	andlw	15
  2180  03DC' 6E36'              	movwf	printf@idx,c
  2181                           
  2182                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2183  03DE' 5036'              	movf	printf@idx,w,c
  2184  03E0' 0D01               	mullw	1
  2185  03E2' 0E00'              	movlw	low STR_8
  2186  03E4' 24F3               	addwf	prodl,w,c
  2187  03E6' 6EF6               	movwf	tblptrl,c
  2188  03E8' 0E00'              	movlw	high STR_8
  2189  03EA' 20F4               	addwfc	prodh,w,c
  2190  03EC' 6EF7               	movwf	tblptrh,c
  2191  03EE'                    	if	0	;There are less than 3 active tblptr bytes
  2192  03EE'                    	endif
  2193  03EE' 0008               	tblrd		*
  2194  03F0' CFF5 F042'         	movff	tablat,printf@c
  2195                           
  2196                           ;doprnt.c: 1523: }
  2197                           
  2198                           ;doprnt.c: 1508: }
  2199                           ;doprnt.c: 1510: break;
  2200  03F4' D009               	goto	l2298
  2201  03F6'                    l2296:
  2202  03F6' 5041'              	movf	printf@flag,w,c
  2203  03F8' 0B80               	andlw	128
  2204                           
  2205                           ; Switch size 1, requested type "space"
  2206                           ; Number of cases is 2, Range of values is 0 to 128
  2207                           ; switch strategies available:
  2208                           ; Name         Instructions Cycles
  2209                           ; simple_byte            7     4 (average)
  2210                           ;	Chosen strategy is simple_byte
  2211  03FA' 0A00               	xorlw	0	; case 0
  2212  03FC' B4D8               	btfsc	status,2,c
  2213  03FE' D78A               	goto	l2288
  2214  0400' 0A80               	xorlw	128	; case 128
  2215  0402' B4D8               	btfsc	status,2,c
  2216  0404' D7C3               	goto	l2290
  2217  0406' D000               	goto	l2298
  2218  0408'                    l2298:
  2219                           
  2220                           ;doprnt.c: 1524: (putch(c) );
  2221  0408' 5042'              	movf	printf@c,w,c
  2222  040A' EC00' F000'        	call	_putch
  2223  040E' D000               	goto	l2300
  2224  0410'                    l2300:
  2225  0410' 0637'              	decf	printf@prec,f,c
  2226  0412' A0D8               	btfss	status,0,c
  2227  0414' 0638'              	decf	printf@prec+1,f,c
  2228  0416' 2837'              	incf	printf@prec,w,c
  2229  0418' E1EE               	bnz	l2296
  2230  041A' 2838'              	incf	printf@prec+1,w,c
  2231  041C' B4D8               	btfsc	status,2,c
  2232  041E' D002               	goto	l2302
  2233  0420' D7EA               	goto	l2296
  2234  0422' D000               	goto	l2302
  2235  0424'                    l2302:
  2236  0424' C024' FFF6         	movff	printf@f,tblptrl
  2237  0428' C025' FFF7         	movff	printf@f+1,tblptrh
  2238  042C' 4A24'              	infsnz	printf@f,f,c
  2239  042E' 2A25'              	incf	printf@f+1,f,c
  2240  0430'                    	if	0	;tblptru may be non-zero
  2241  0430'                    	endif
  2242  0430'                    	if	0	;tblptru may be non-zero
  2243  0430'                    	endif
  2244  0430' 0008               	tblrd		*
  2245  0432' CFF5 F042'         	movff	tablat,printf@c
  2246  0436' 5042'              	movf	printf@c,w,c
  2247  0438' B4D8               	btfsc	status,2,c
  2248  043A' D002               	goto	l472
  2249  043C' D5E6               	goto	l2164
  2250  043E' D000               	goto	l472
  2251  0440'                    l472:
  2252  0440' 0012               	return		;funcret
  2253  0442'                    __end_of_printf:
  2254                           	opt stack 0
  2255                           tblptru	equ	0xFF8
  2256                           tblptrh	equ	0xFF7
  2257                           tblptrl	equ	0xFF6
  2258                           tablat	equ	0xFF5
  2259                           prodh	equ	0xFF4
  2260                           prodl	equ	0xFF3
  2261                           intcon	equ	0xFF2
  2262                           intcon2	equ	0xFF1
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1l	equ	0xFE1
  2267                           indf2	equ	0xFDF
  2268                           postinc2	equ	0xFDE
  2269                           postdec2	equ	0xFDD
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _putch *****************
  2275 ;; Defined at:
  2276 ;;		line 200 in file "lab11.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  c               1    wreg     unsigned char 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  c               1   14[COMRAM] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;		None               void
  2283 ;; Registers used:
  2284 ;;		wreg
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2294 ;;Total ram usage:        1 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    2
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_printf
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text2
  2305  0000'                    __ptext2:
  2306                           	opt stack 0
  2307  0000'                    _putch:
  2308                           	opt stack 27
  2309                           
  2310                           ;incstack = 0
  2311                           ;putch@c stored from wreg
  2312  0000' 6E0E'              	movwf	putch@c,c
  2313                           
  2314                           ;lab11.c: 202: while (!TRMT);
  2315  0002' D000               	goto	l184
  2316  0004'                    l184:
  2317  0004' A2AC               	btfss	4012,1,c	;volatile
  2318  0006' D7FE               	goto	l184
  2319                           
  2320                           ;lab11.c: 203: TXREG = c;
  2321  0008' C00E' FFAD         	movff	putch@c,4013	;volatile
  2322  000C' 0012               	return		;funcret
  2323  000E'                    __end_of_putch:
  2324                           	opt stack 0
  2325                           tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           prodh	equ	0xFF4
  2330                           prodl	equ	0xFF3
  2331                           intcon	equ	0xFF2
  2332                           intcon2	equ	0xFF1
  2333                           postinc0	equ	0xFEE
  2334                           wreg	equ	0xFE8
  2335                           postdec1	equ	0xFE5
  2336                           fsr1l	equ	0xFE1
  2337                           indf2	equ	0xFDF
  2338                           postinc2	equ	0xFDE
  2339                           postdec2	equ	0xFDD
  2340                           fsr2h	equ	0xFDA
  2341                           fsr2l	equ	0xFD9
  2342                           status	equ	0xFD8
  2343                           
  2344 ;; *************** function _isdigit *****************
  2345 ;; Defined at:
  2346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  c               1    wreg     unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  c               1   16[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;		None               void
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, status,0
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;Total ram usage:        3 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; Hardware stack levels required when called:    2
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_printf
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text3
  2375  0000'                    __ptext3:
  2376                           	opt stack 0
  2377  0000'                    _isdigit:
  2378                           	opt stack 27
  2379                           
  2380                           ;incstack = 0
  2381                           ;isdigit@c stored from wreg
  2382  0000' 6E10'              	movwf	isdigit@c,c
  2383  0002' 0E00               	movlw	0
  2384  0004' 6E0F'              	movwf	_isdigit$1523,c
  2385  0006' 0E3A               	movlw	58
  2386  0008' 6010'              	cpfslt	isdigit@c,c
  2387  000A' D006               	goto	l2050
  2388  000C' 0E2F               	movlw	47
  2389  000E' 6410'              	cpfsgt	isdigit@c,c
  2390  0010' D003               	goto	l2050
  2391  0012' 0E01               	movlw	1
  2392  0014' 6E0F'              	movwf	_isdigit$1523,c
  2393  0016' D000               	goto	l2050
  2394  0018'                    l2050:
  2395  0018' C00F' F00E'        	movff	_isdigit$1523,??_isdigit
  2396  001C' 300E'              	rrcf	??_isdigit,w,c
  2397  001E' D000               	goto	l939
  2398  0020'                    l939:
  2399  0020' 0012               	return		;funcret
  2400  0022'                    __end_of_isdigit:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           intcon	equ	0xFF2
  2409                           intcon2	equ	0xFF1
  2410                           postinc0	equ	0xFEE
  2411                           wreg	equ	0xFE8
  2412                           postdec1	equ	0xFE5
  2413                           fsr1l	equ	0xFE1
  2414                           indf2	equ	0xFDF
  2415                           postinc2	equ	0xFDE
  2416                           postdec2	equ	0xFDD
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function ___wmul *****************
  2422 ;; Defined at:
  2423 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  multiplier      2   14[COMRAM] unsigned int 
  2426 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  product         2   18[COMRAM] unsigned int 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  2   14[COMRAM] unsigned int 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, prodl, prodh
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;Total ram usage:        6 bytes
  2443 ;; Hardware stack levels used:    1
  2444 ;; Hardware stack levels required when called:    2
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		_printf
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text4
  2453  0000'                    __ptext4:
  2454                           	opt stack 0
  2455  0000'                    ___wmul:
  2456                           	opt stack 27
  2457                           
  2458                           ;incstack = 0
  2459  0000' 500E'              	movf	___wmul@multiplier,w,c
  2460  0002' 0210'              	mulwf	___wmul@multiplicand,c
  2461  0004' CFF3 F012'         	movff	prodl,___wmul@product
  2462  0008' CFF4 F013'         	movff	prodh,___wmul@product+1
  2463  000C' 500E'              	movf	___wmul@multiplier,w,c
  2464  000E' 0211'              	mulwf	___wmul@multiplicand+1,c
  2465  0010' 50F3               	movf	prodl,w,c
  2466  0012' 2613'              	addwf	___wmul@product+1,f,c
  2467  0014' 500F'              	movf	___wmul@multiplier+1,w,c
  2468  0016' 0210'              	mulwf	___wmul@multiplicand,c
  2469  0018' 50F3               	movf	prodl,w,c
  2470  001A' 2613'              	addwf	___wmul@product+1,f,c
  2471  001C' C012' F00E'        	movff	___wmul@product,?___wmul
  2472  0020' C013' F00F'        	movff	___wmul@product+1,?___wmul+1
  2473  0024' D000               	goto	l508
  2474  0026'                    l508:
  2475  0026' 0012               	return		;funcret
  2476  0028'                    __end_of___wmul:
  2477                           	opt stack 0
  2478                           tblptru	equ	0xFF8
  2479                           tblptrh	equ	0xFF7
  2480                           tblptrl	equ	0xFF6
  2481                           tablat	equ	0xFF5
  2482                           prodh	equ	0xFF4
  2483                           prodl	equ	0xFF3
  2484                           intcon	equ	0xFF2
  2485                           intcon2	equ	0xFF1
  2486                           postinc0	equ	0xFEE
  2487                           wreg	equ	0xFE8
  2488                           postdec1	equ	0xFE5
  2489                           fsr1l	equ	0xFE1
  2490                           indf2	equ	0xFDF
  2491                           postinc2	equ	0xFDE
  2492                           postdec2	equ	0xFDD
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function ___llmod *****************
  2498 ;; Defined at:
  2499 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  dividend        4   27[COMRAM] unsigned long 
  2502 ;;  divisor         4   31[COMRAM] unsigned long 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  counter         1   35[COMRAM] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  4   27[COMRAM] unsigned long 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2514 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;Total ram usage:        9 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    2
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_printf
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text5
  2529  0000'                    __ptext5:
  2530                           	opt stack 0
  2531  0000'                    ___llmod:
  2532                           	opt stack 27
  2533                           
  2534                           ;incstack = 0
  2535  0000' 501F'              	movf	___llmod@divisor,w,c
  2536  0002' 1020'              	iorwf	___llmod@divisor+1,w,c
  2537  0004' 1021'              	iorwf	___llmod@divisor+2,w,c
  2538  0006' 1022'              	iorwf	___llmod@divisor+3,w,c
  2539  0008' B4D8               	btfsc	status,2,c
  2540  000A' D029               	goto	l978
  2541  000C' 0E01               	movlw	1
  2542  000E' 6E23'              	movwf	___llmod@counter,c
  2543  0010' D007               	goto	l2088
  2544  0012'                    l2086:
  2545  0012' 90D8               	bcf	status,0,c
  2546  0014' 361F'              	rlcf	___llmod@divisor,f,c
  2547  0016' 3620'              	rlcf	___llmod@divisor+1,f,c
  2548  0018' 3621'              	rlcf	___llmod@divisor+2,f,c
  2549  001A' 3622'              	rlcf	___llmod@divisor+3,f,c
  2550  001C' 2A23'              	incf	___llmod@counter,f,c
  2551  001E' D000               	goto	l2088
  2552  0020'                    l2088:
  2553  0020' BE22'              	btfsc	___llmod@divisor+3,7,c
  2554  0022' D002               	goto	l2090
  2555  0024' D7F6               	goto	l2086
  2556  0026' D000               	goto	l2090
  2557  0028'                    l2090:
  2558  0028' 501F'              	movf	___llmod@divisor,w,c
  2559  002A' 5C1B'              	subwf	___llmod@dividend,w,c
  2560  002C' 5020'              	movf	___llmod@divisor+1,w,c
  2561  002E' 581C'              	subwfb	___llmod@dividend+1,w,c
  2562  0030' 5021'              	movf	___llmod@divisor+2,w,c
  2563  0032' 581D'              	subwfb	___llmod@dividend+2,w,c
  2564  0034' 5022'              	movf	___llmod@divisor+3,w,c
  2565  0036' 581E'              	subwfb	___llmod@dividend+3,w,c
  2566  0038' A0D8               	btfss	status,0,c
  2567  003A' D009               	goto	l2094
  2568  003C' 501F'              	movf	___llmod@divisor,w,c
  2569  003E' 5E1B'              	subwf	___llmod@dividend,f,c
  2570  0040' 5020'              	movf	___llmod@divisor+1,w,c
  2571  0042' 5A1C'              	subwfb	___llmod@dividend+1,f,c
  2572  0044' 5021'              	movf	___llmod@divisor+2,w,c
  2573  0046' 5A1D'              	subwfb	___llmod@dividend+2,f,c
  2574  0048' 5022'              	movf	___llmod@divisor+3,w,c
  2575  004A' 5A1E'              	subwfb	___llmod@dividend+3,f,c
  2576  004C' D000               	goto	l2094
  2577  004E'                    l2094:
  2578  004E' 90D8               	bcf	status,0,c
  2579  0050' 3222'              	rrcf	___llmod@divisor+3,f,c
  2580  0052' 3221'              	rrcf	___llmod@divisor+2,f,c
  2581  0054' 3220'              	rrcf	___llmod@divisor+1,f,c
  2582  0056' 321F'              	rrcf	___llmod@divisor,f,c
  2583  0058' 2E23'              	decfsz	___llmod@counter,f,c
  2584  005A' D7E6               	goto	l2090
  2585  005C' D000               	goto	l978
  2586  005E'                    l978:
  2587  005E' C01B' F01B'        	movff	___llmod@dividend,?___llmod
  2588  0062' C01C' F01C'        	movff	___llmod@dividend+1,?___llmod+1
  2589  0066' C01D' F01D'        	movff	___llmod@dividend+2,?___llmod+2
  2590  006A' C01E' F01E'        	movff	___llmod@dividend+3,?___llmod+3
  2591  006E' 0012               	return		;funcret
  2592  0070'                    __end_of___llmod:
  2593                           	opt stack 0
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           prodh	equ	0xFF4
  2599                           prodl	equ	0xFF3
  2600                           intcon	equ	0xFF2
  2601                           intcon2	equ	0xFF1
  2602                           postinc0	equ	0xFEE
  2603                           wreg	equ	0xFE8
  2604                           postdec1	equ	0xFE5
  2605                           fsr1l	equ	0xFE1
  2606                           indf2	equ	0xFDF
  2607                           postinc2	equ	0xFDE
  2608                           postdec2	equ	0xFDD
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function ___lldiv *****************
  2614 ;; Defined at:
  2615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  dividend        4   14[COMRAM] unsigned long 
  2618 ;;  divisor         4   18[COMRAM] unsigned long 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  quotient        4   22[COMRAM] unsigned long 
  2621 ;;  counter         1   26[COMRAM] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  4   14[COMRAM] unsigned long 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2631 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;Total ram usage:       13 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    2
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_printf
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text6
  2646  0000'                    __ptext6:
  2647                           	opt stack 0
  2648  0000'                    ___lldiv:
  2649                           	opt stack 27
  2650                           
  2651                           ;incstack = 0
  2652  0000' 0E00               	movlw	0
  2653  0002' 6E16'              	movwf	___lldiv@quotient,c
  2654  0004' 0E00               	movlw	0
  2655  0006' 6E17'              	movwf	___lldiv@quotient+1,c
  2656  0008' 0E00               	movlw	0
  2657  000A' 6E18'              	movwf	___lldiv@quotient+2,c
  2658  000C' 0E00               	movlw	0
  2659  000E' 6E19'              	movwf	___lldiv@quotient+3,c
  2660  0010' 5012'              	movf	___lldiv@divisor,w,c
  2661  0012' 1013'              	iorwf	___lldiv@divisor+1,w,c
  2662  0014' 1014'              	iorwf	___lldiv@divisor+2,w,c
  2663  0016' 1015'              	iorwf	___lldiv@divisor+3,w,c
  2664  0018' B4D8               	btfsc	status,2,c
  2665  001A' D02F               	goto	l968
  2666  001C' 0E01               	movlw	1
  2667  001E' 6E1A'              	movwf	___lldiv@counter,c
  2668  0020' D007               	goto	l2068
  2669  0022'                    l2066:
  2670  0022' 90D8               	bcf	status,0,c
  2671  0024' 3612'              	rlcf	___lldiv@divisor,f,c
  2672  0026' 3613'              	rlcf	___lldiv@divisor+1,f,c
  2673  0028' 3614'              	rlcf	___lldiv@divisor+2,f,c
  2674  002A' 3615'              	rlcf	___lldiv@divisor+3,f,c
  2675  002C' 2A1A'              	incf	___lldiv@counter,f,c
  2676  002E' D000               	goto	l2068
  2677  0030'                    l2068:
  2678  0030' BE15'              	btfsc	___lldiv@divisor+3,7,c
  2679  0032' D002               	goto	l2070
  2680  0034' D7F6               	goto	l2066
  2681  0036' D000               	goto	l2070
  2682  0038'                    l2070:
  2683  0038' 90D8               	bcf	status,0,c
  2684  003A' 3616'              	rlcf	___lldiv@quotient,f,c
  2685  003C' 3617'              	rlcf	___lldiv@quotient+1,f,c
  2686  003E' 3618'              	rlcf	___lldiv@quotient+2,f,c
  2687  0040' 3619'              	rlcf	___lldiv@quotient+3,f,c
  2688  0042' 5012'              	movf	___lldiv@divisor,w,c
  2689  0044' 5C0E'              	subwf	___lldiv@dividend,w,c
  2690  0046' 5013'              	movf	___lldiv@divisor+1,w,c
  2691  0048' 580F'              	subwfb	___lldiv@dividend+1,w,c
  2692  004A' 5014'              	movf	___lldiv@divisor+2,w,c
  2693  004C' 5810'              	subwfb	___lldiv@dividend+2,w,c
  2694  004E' 5015'              	movf	___lldiv@divisor+3,w,c
  2695  0050' 5811'              	subwfb	___lldiv@dividend+3,w,c
  2696  0052' A0D8               	btfss	status,0,c
  2697  0054' D00A               	goto	l2078
  2698  0056' 5012'              	movf	___lldiv@divisor,w,c
  2699  0058' 5E0E'              	subwf	___lldiv@dividend,f,c
  2700  005A' 5013'              	movf	___lldiv@divisor+1,w,c
  2701  005C' 5A0F'              	subwfb	___lldiv@dividend+1,f,c
  2702  005E' 5014'              	movf	___lldiv@divisor+2,w,c
  2703  0060' 5A10'              	subwfb	___lldiv@dividend+2,f,c
  2704  0062' 5015'              	movf	___lldiv@divisor+3,w,c
  2705  0064' 5A11'              	subwfb	___lldiv@dividend+3,f,c
  2706  0066' 8016'              	bsf	___lldiv@quotient,0,c
  2707  0068' D000               	goto	l2078
  2708  006A'                    l2078:
  2709  006A' 90D8               	bcf	status,0,c
  2710  006C' 3215'              	rrcf	___lldiv@divisor+3,f,c
  2711  006E' 3214'              	rrcf	___lldiv@divisor+2,f,c
  2712  0070' 3213'              	rrcf	___lldiv@divisor+1,f,c
  2713  0072' 3212'              	rrcf	___lldiv@divisor,f,c
  2714  0074' 2E1A'              	decfsz	___lldiv@counter,f,c
  2715  0076' D7E0               	goto	l2070
  2716  0078' D000               	goto	l968
  2717  007A'                    l968:
  2718  007A' C016' F00E'        	movff	___lldiv@quotient,?___lldiv
  2719  007E' C017' F00F'        	movff	___lldiv@quotient+1,?___lldiv+1
  2720  0082' C018' F010'        	movff	___lldiv@quotient+2,?___lldiv+2
  2721  0086' C019' F011'        	movff	___lldiv@quotient+3,?___lldiv+3
  2722  008A' 0012               	return		;funcret
  2723  008C'                    __end_of___lldiv:
  2724                           	opt stack 0
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           intcon2	equ	0xFF1
  2733                           postinc0	equ	0xFEE
  2734                           wreg	equ	0xFE8
  2735                           postdec1	equ	0xFE5
  2736                           fsr1l	equ	0xFE1
  2737                           indf2	equ	0xFDF
  2738                           postinc2	equ	0xFDE
  2739                           postdec2	equ	0xFDD
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function ___awdiv *****************
  2745 ;; Defined at:
  2746 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  dividend        2   14[COMRAM] int 
  2749 ;;  divisor         2   16[COMRAM] int 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  quotient        2   20[COMRAM] int 
  2752 ;;  sign            1   19[COMRAM] unsigned char 
  2753 ;;  counter         1   18[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;                  2   14[COMRAM] int 
  2756 ;; Registers used:
  2757 ;;		wreg, status,2, status,0
  2758 ;; Tracked objects:
  2759 ;;		On entry : 0/0
  2760 ;;		On exit  : 0/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2764 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2766 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2767 ;;Total ram usage:        8 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    2
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_main
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text7
  2778  0000'                    __ptext7:
  2779                           	opt stack 0
  2780  0000'                    ___awdiv:
  2781                           	opt stack 28
  2782                           
  2783                           ;incstack = 0
  2784  0000' 0E00               	movlw	0
  2785  0002' 6E13'              	movwf	___awdiv@sign,c
  2786  0004' AE11'              	btfss	___awdiv@divisor+1,7,c
  2787  0006' D007               	goto	l2352
  2788  0008' 6C10'              	negf	___awdiv@divisor,c
  2789  000A' 1E11'              	comf	___awdiv@divisor+1,f,c
  2790  000C' B0D8               	btfsc	status,0,c
  2791  000E' 2A11'              	incf	___awdiv@divisor+1,f,c
  2792  0010' 0E01               	movlw	1
  2793  0012' 6E13'              	movwf	___awdiv@sign,c
  2794  0014' D000               	goto	l2352
  2795  0016'                    l2352:
  2796  0016' AE0F'              	btfss	___awdiv@dividend+1,7,c
  2797  0018' D007               	goto	l2358
  2798  001A' 6C0E'              	negf	___awdiv@dividend,c
  2799  001C' 1E0F'              	comf	___awdiv@dividend+1,f,c
  2800  001E' B0D8               	btfsc	status,0,c
  2801  0020' 2A0F'              	incf	___awdiv@dividend+1,f,c
  2802  0022' 0E01               	movlw	1
  2803  0024' 1A13'              	xorwf	___awdiv@sign,f,c
  2804  0026' D000               	goto	l2358
  2805  0028'                    l2358:
  2806  0028' 0E00               	movlw	0
  2807  002A' 6E15'              	movwf	___awdiv@quotient+1,c
  2808  002C' 0E00               	movlw	0
  2809  002E' 6E14'              	movwf	___awdiv@quotient,c
  2810  0030' 5010'              	movf	___awdiv@divisor,w,c
  2811  0032' 1011'              	iorwf	___awdiv@divisor+1,w,c
  2812  0034' B4D8               	btfsc	status,2,c
  2813  0036' D021               	goto	l2380
  2814  0038' 0E01               	movlw	1
  2815  003A' 6E12'              	movwf	___awdiv@counter,c
  2816  003C' D005               	goto	l2366
  2817  003E'                    l2364:
  2818  003E' 90D8               	bcf	status,0,c
  2819  0040' 3610'              	rlcf	___awdiv@divisor,f,c
  2820  0042' 3611'              	rlcf	___awdiv@divisor+1,f,c
  2821  0044' 2A12'              	incf	___awdiv@counter,f,c
  2822  0046' D000               	goto	l2366
  2823  0048'                    l2366:
  2824  0048' BE11'              	btfsc	___awdiv@divisor+1,7,c
  2825  004A' D002               	goto	l2368
  2826  004C' D7F8               	goto	l2364
  2827  004E' D000               	goto	l2368
  2828  0050'                    l2368:
  2829  0050' 90D8               	bcf	status,0,c
  2830  0052' 3614'              	rlcf	___awdiv@quotient,f,c
  2831  0054' 3615'              	rlcf	___awdiv@quotient+1,f,c
  2832  0056' 5010'              	movf	___awdiv@divisor,w,c
  2833  0058' 5C0E'              	subwf	___awdiv@dividend,w,c
  2834  005A' 5011'              	movf	___awdiv@divisor+1,w,c
  2835  005C' 580F'              	subwfb	___awdiv@dividend+1,w,c
  2836  005E' A0D8               	btfss	status,0,c
  2837  0060' D006               	goto	l2376
  2838  0062' 5010'              	movf	___awdiv@divisor,w,c
  2839  0064' 5E0E'              	subwf	___awdiv@dividend,f,c
  2840  0066' 5011'              	movf	___awdiv@divisor+1,w,c
  2841  0068' 5A0F'              	subwfb	___awdiv@dividend+1,f,c
  2842  006A' 8014'              	bsf	___awdiv@quotient,0,c
  2843  006C' D000               	goto	l2376
  2844  006E'                    l2376:
  2845  006E' 90D8               	bcf	status,0,c
  2846  0070' 3211'              	rrcf	___awdiv@divisor+1,f,c
  2847  0072' 3210'              	rrcf	___awdiv@divisor,f,c
  2848  0074' 2E12'              	decfsz	___awdiv@counter,f,c
  2849  0076' D7EC               	goto	l2368
  2850  0078' D000               	goto	l2380
  2851  007A'                    l2380:
  2852  007A' 5013'              	movf	___awdiv@sign,w,c
  2853  007C' B4D8               	btfsc	status,2,c
  2854  007E' D005               	goto	l2384
  2855  0080' 6C14'              	negf	___awdiv@quotient,c
  2856  0082' 1E15'              	comf	___awdiv@quotient+1,f,c
  2857  0084' B0D8               	btfsc	status,0,c
  2858  0086' 2A15'              	incf	___awdiv@quotient+1,f,c
  2859  0088' D000               	goto	l2384
  2860  008A'                    l2384:
  2861  008A' C014' F00E'        	movff	___awdiv@quotient,?___awdiv
  2862  008E' C015' F00F'        	movff	___awdiv@quotient+1,?___awdiv+1
  2863  0092' D000               	goto	l701
  2864  0094'                    l701:
  2865  0094' 0012               	return		;funcret
  2866  0096'                    __end_of___awdiv:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           intcon	equ	0xFF2
  2875                           intcon2	equ	0xFF1
  2876                           postinc0	equ	0xFEE
  2877                           wreg	equ	0xFE8
  2878                           postdec1	equ	0xFE5
  2879                           fsr1l	equ	0xFE1
  2880                           indf2	equ	0xFDF
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _Wait_Half_Second *****************
  2888 ;; Defined at:
  2889 ;;		line 233 in file "lab11.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;		None
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;		None
  2894 ;; Return value:  Size  Location     Type
  2895 ;;		None               void
  2896 ;; Registers used:
  2897 ;;		wreg, status,2
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;Total ram usage:        0 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    2
  2910 ;; This function calls:
  2911 ;;		Nothing
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;;		_Wait_One_Sec
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text8
  2919  0000'                    __ptext8:
  2920                           	opt stack 0
  2921  0000'                    _Wait_Half_Second:
  2922                           	opt stack 28
  2923                           
  2924                           ;lab11.c: 235: T0CON = 0x03;
  2925                           
  2926                           ;incstack = 0
  2927  0000' 0E03               	movlw	3
  2928  0002' 6ED5               	movwf	4053,c	;volatile
  2929                           
  2930                           ;lab11.c: 236: TMR0L = 0xDB;
  2931  0004' 0EDB               	movlw	219
  2932  0006' 6ED6               	movwf	4054,c	;volatile
  2933                           
  2934                           ;lab11.c: 237: TMR0H = 0x0B;
  2935  0008' 0E0B               	movlw	11
  2936  000A' 6ED7               	movwf	4055,c	;volatile
  2937                           
  2938                           ;lab11.c: 238: INTCONbits.TMR0IF = 0;
  2939  000C' 94F2               	bcf	intcon,2,c	;volatile
  2940                           
  2941                           ;lab11.c: 239: T0CONbits.TMR0ON = 1;
  2942  000E' 8ED5               	bsf	4053,7,c	;volatile
  2943                           
  2944                           ;lab11.c: 240: while (INTCONbits.TMR0IF == 0);
  2945  0010' D000               	goto	l202
  2946  0012'                    l202:
  2947  0012' A4F2               	btfss	intcon,2,c	;volatile
  2948  0014' D7FE               	goto	l202
  2949                           
  2950                           ;lab11.c: 241: T0CONbits.TMR0ON = 0;
  2951  0016' 9ED5               	bcf	4053,7,c	;volatile
  2952  0018' 0012               	return		;funcret
  2953  001A'                    __end_of_Wait_Half_Second:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodh	equ	0xFF4
  2960                           prodl	equ	0xFF3
  2961                           intcon	equ	0xFF2
  2962                           intcon2	equ	0xFF1
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           postdec1	equ	0xFE5
  2966                           fsr1l	equ	0xFE1
  2967                           indf2	equ	0xFDF
  2968                           postinc2	equ	0xFDE
  2969                           postdec2	equ	0xFDD
  2970                           fsr2h	equ	0xFDA
  2971                           fsr2l	equ	0xFD9
  2972                           status	equ	0xFD8
  2973                           
  2974 ;; *************** function _Do_Init *****************
  2975 ;; Defined at:
  2976 ;;		line 183 in file "lab11.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;		None               void
  2983 ;; Registers used:
  2984 ;;		wreg, status,2, status,0, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;Total ram usage:        0 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    6
  2997 ;; This function calls:
  2998 ;;		_DS1621_Init
  2999 ;;		_I2C_Init
  3000 ;;		_init_UART
  3001 ;; This function is called by:
  3002 ;;		_main
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text9
  3007  0000'                    __ptext9:
  3008                           	opt stack 0
  3009  0000'                    _Do_Init:
  3010                           	opt stack 24
  3011                           
  3012                           ;lab11.c: 185: init_UART();
  3013                           
  3014                           ;incstack = 0
  3015  0000' EC00' F000'        	call	_init_UART	;wreg free
  3016                           
  3017                           ;lab11.c: 187: OSCCON=0x70;
  3018  0004' 0E70               	movlw	112
  3019  0006' 6ED3               	movwf	4051,c	;volatile
  3020                           
  3021                           ;lab11.c: 188: DS1621_Init();
  3022  0008' EC00' F000'        	call	_DS1621_Init	;wreg free
  3023                           
  3024                           ;lab11.c: 190: ADCON1= 0x0F;
  3025  000C' 0E0F               	movlw	15
  3026  000E' 6EC1               	movwf	4033,c	;volatile
  3027                           
  3028                           ;lab11.c: 191: TRISA = 0x00;
  3029  0010' 0E00               	movlw	0
  3030  0012' 6E92               	movwf	3986,c	;volatile
  3031                           
  3032                           ;lab11.c: 192: TRISB = 0x11;
  3033  0014' 0E11               	movlw	17
  3034  0016' 6E93               	movwf	3987,c	;volatile
  3035                           
  3036                           ;lab11.c: 193: TRISC = 0x00;
  3037  0018' 0E00               	movlw	0
  3038  001A' 6E94               	movwf	3988,c	;volatile
  3039                           
  3040                           ;lab11.c: 194: TRISD = 0x40;
  3041  001C' 0E40               	movlw	64
  3042  001E' 6E95               	movwf	3989,c	;volatile
  3043                           
  3044                           ;lab11.c: 195: TRISE = 0x00;
  3045  0020' 0E00               	movlw	0
  3046  0022' 6E96               	movwf	3990,c	;volatile
  3047                           
  3048                           ;lab11.c: 196: RBPU=0;
  3049  0024' 9EF1               	bcf	intcon2,7,c	;volatile
  3050                           
  3051                           ;lab11.c: 197: I2C_Init(100000);
  3052  0026' 0EA0               	movlw	160
  3053  0028' 6E0E'              	movwf	I2C_Init@c,c
  3054  002A' 0E86               	movlw	134
  3055  002C' 6E0F'              	movwf	I2C_Init@c+1,c
  3056  002E' 0E01               	movlw	1
  3057  0030' 6E10'              	movwf	I2C_Init@c+2,c
  3058  0032' 0E00               	movlw	0
  3059  0034' 6E11'              	movwf	I2C_Init@c+3,c
  3060  0036' EC00' F000'        	call	_I2C_Init	;wreg free
  3061  003A' 0012               	return		;funcret
  3062  003C'                    __end_of_Do_Init:
  3063                           	opt stack 0
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           intcon	equ	0xFF2
  3071                           intcon2	equ	0xFF1
  3072                           postinc0	equ	0xFEE
  3073                           wreg	equ	0xFE8
  3074                           postdec1	equ	0xFE5
  3075                           fsr1l	equ	0xFE1
  3076                           indf2	equ	0xFDF
  3077                           postinc2	equ	0xFDE
  3078                           postdec2	equ	0xFDD
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _init_UART *****************
  3084 ;; Defined at:
  3085 ;;		line 206 in file "lab11.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;		None               void
  3092 ;; Registers used:
  3093 ;;		wreg, status,2, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;Total ram usage:        0 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    3
  3106 ;; This function calls:
  3107 ;;		_OpenUSART
  3108 ;; This function is called by:
  3109 ;;		_Do_Init
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text10
  3114  0000'                    __ptext10:
  3115                           	opt stack 0
  3116  0000'                    _init_UART:
  3117                           	opt stack 26
  3118                           
  3119                           ;lab11.c: 208: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111
      +                           & 0b11111111, 25);
  3120                           
  3121                           ;incstack = 0
  3122  0000' 0E00               	movlw	0
  3123  0002' 6E0F'              	movwf	OpenUSART@spbrg+1,c
  3124  0004' 0E19               	movlw	25
  3125  0006' 6E0E'              	movwf	OpenUSART@spbrg,c
  3126  0008' 0E3C               	movlw	60
  3127  000A' EC00' F000'        	call	_OpenUSART
  3128                           
  3129                           ;lab11.c: 209: OSCCON = 0x70;
  3130  000E' 0E70               	movlw	112
  3131  0010' 6ED3               	movwf	4051,c	;volatile
  3132  0012' 0012               	return		;funcret
  3133  0014'                    __end_of_init_UART:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodh	equ	0xFF4
  3140                           prodl	equ	0xFF3
  3141                           intcon	equ	0xFF2
  3142                           intcon2	equ	0xFF1
  3143                           postinc0	equ	0xFEE
  3144                           wreg	equ	0xFE8
  3145                           postdec1	equ	0xFE5
  3146                           fsr1l	equ	0xFE1
  3147                           indf2	equ	0xFDF
  3148                           postinc2	equ	0xFDE
  3149                           postdec2	equ	0xFDD
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _OpenUSART *****************
  3155 ;; Defined at:
  3156 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  config          1    wreg     unsigned char 
  3159 ;;  spbrg           2   14[COMRAM] unsigned int 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  config          1   16[COMRAM] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;		None               void
  3164 ;; Registers used:
  3165 ;;		wreg, status,2
  3166 ;; Tracked objects:
  3167 ;;		On entry : 0/0
  3168 ;;		On exit  : 0/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;Total ram usage:        3 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    2
  3178 ;; This function calls:
  3179 ;;		Nothing
  3180 ;; This function is called by:
  3181 ;;		_init_UART
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text11
  3186  0000'                    __ptext11:
  3187                           	opt stack 0
  3188  0000'                    _OpenUSART:
  3189                           	opt stack 26
  3190                           
  3191                           ;incstack = 0
  3192                           ;OpenUSART@config stored from wreg
  3193  0000' 6E10'              	movwf	OpenUSART@config,c
  3194  0002' 0E00               	movlw	0
  3195  0004' 6EAC               	movwf	4012,c	;volatile
  3196  0006' 0E00               	movlw	0
  3197  0008' 6EAB               	movwf	4011,c	;volatile
  3198  000A' A010'              	btfss	OpenUSART@config,0,c
  3199  000C' D002               	goto	l1912
  3200  000E' 88AC               	bsf	4012,4,c	;volatile
  3201  0010' D000               	goto	l1912
  3202  0012'                    l1912:
  3203  0012' A210'              	btfss	OpenUSART@config,1,c
  3204  0014' D003               	goto	l1916
  3205  0016' 8CAC               	bsf	4012,6,c	;volatile
  3206  0018' 8CAB               	bsf	4011,6,c	;volatile
  3207  001A' D000               	goto	l1916
  3208  001C'                    l1916:
  3209  001C' A410'              	btfss	OpenUSART@config,2,c
  3210  001E' D002               	goto	l1920
  3211  0020' 8EAC               	bsf	4012,7,c	;volatile
  3212  0022' D000               	goto	l1920
  3213  0024'                    l1920:
  3214  0024' A610'              	btfss	OpenUSART@config,3,c
  3215  0026' D002               	goto	l496
  3216  0028' 88AB               	bsf	4011,4,c	;volatile
  3217  002A' D002               	goto	l1924
  3218  002C'                    l496:
  3219  002C' 8AAB               	bsf	4011,5,c	;volatile
  3220  002E' D000               	goto	l1924
  3221  0030'                    l1924:
  3222  0030' B810'              	btfsc	OpenUSART@config,4,c
  3223  0032' 84AC               	bsf	4012,2,c	;volatile
  3224  0034' 989E               	bcf	3998,4,c	;volatile
  3225  0036' AA10'              	btfss	OpenUSART@config,5,c
  3226  0038' D002               	goto	l1932
  3227  003A' 86AB               	bsf	4011,3,c	;volatile
  3228  003C' D000               	goto	l1932
  3229  003E'                    l1932:
  3230  003E' AC10'              	btfss	OpenUSART@config,6,c
  3231  0040' D002               	goto	l500
  3232  0042' 8A9D               	bsf	3997,5,c	;volatile
  3233  0044' D001               	goto	l501
  3234  0046'                    l500:
  3235  0046' 9A9D               	bcf	3997,5,c	;volatile
  3236  0048'                    l501:
  3237  0048' 9A9E               	bcf	3998,5,c	;volatile
  3238  004A' AE10'              	btfss	OpenUSART@config,7,c
  3239  004C' D002               	goto	l502
  3240  004E' 889D               	bsf	3997,4,c	;volatile
  3241  0050' D001               	goto	l503
  3242  0052'                    l502:
  3243  0052' 989D               	bcf	3997,4,c	;volatile
  3244  0054'                    l503:
  3245  0054' C00E' FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  3246  0058' 500F'              	movf	OpenUSART@spbrg+1,w,c
  3247  005A' 6EB0               	movwf	4016,c	;volatile
  3248  005C' 8AAC               	bsf	4012,5,c	;volatile
  3249  005E' 8EAB               	bsf	4011,7,c	;volatile
  3250  0060' 9C94               	bcf	3988,6,c	;volatile
  3251  0062' 8E94               	bsf	3988,7,c	;volatile
  3252  0064' B8AC               	btfsc	4012,4,c	;volatile
  3253  0066' BEAC               	btfsc	4012,7,c	;volatile
  3254  0068' D002               	goto	l505
  3255  006A' 8C94               	bsf	3988,6,c	;volatile
  3256  006C' D000               	goto	l505
  3257  006E'                    l505:
  3258  006E' 0012               	return		;funcret
  3259  0070'                    __end_of_OpenUSART:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon	equ	0xFF2
  3268                           intcon2	equ	0xFF1
  3269                           postinc0	equ	0xFEE
  3270                           wreg	equ	0xFE8
  3271                           postdec1	equ	0xFE5
  3272                           fsr1l	equ	0xFE1
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _I2C_Init *****************
  3281 ;; Defined at:
  3282 ;;		line 14 in file "I2C_Soft.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  c               4   14[COMRAM] unsigned long 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;		None
  3287 ;; Return value:  Size  Location     Type
  3288 ;;		None               void
  3289 ;; Registers used:
  3290 ;;		wreg, cstack
  3291 ;; Tracked objects:
  3292 ;;		On entry : 0/0
  3293 ;;		On exit  : 0/0
  3294 ;;		Unchanged: 0/0
  3295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3296 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;Total ram usage:        4 bytes
  3301 ;; Hardware stack levels used:    1
  3302 ;; Hardware stack levels required when called:    3
  3303 ;; This function calls:
  3304 ;;		_i2cHighScl
  3305 ;;		_i2cHighSda
  3306 ;; This function is called by:
  3307 ;;		_Do_Init
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text12
  3312  0000'                    __ptext12:
  3313                           	opt stack 0
  3314  0000'                    _I2C_Init:
  3315                           	opt stack 26
  3316                           
  3317                           ;I2C_Soft.c: 16: i2cHighScl();
  3318                           
  3319                           ;incstack = 0
  3320  0000' EC00' F000'        	call	_i2cHighScl	;wreg free
  3321                           
  3322                           ;I2C_Soft.c: 17: i2cHighSda();
  3323  0004' EC00' F000'        	call	_i2cHighSda	;wreg free
  3324  0008' 0012               	return		;funcret
  3325  000A'                    __end_of_I2C_Init:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           intcon	equ	0xFF2
  3334                           intcon2	equ	0xFF1
  3335                           postinc0	equ	0xFEE
  3336                           wreg	equ	0xFE8
  3337                           postdec1	equ	0xFE5
  3338                           fsr1l	equ	0xFE1
  3339                           indf2	equ	0xFDF
  3340                           postinc2	equ	0xFDE
  3341                           postdec2	equ	0xFDD
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _DS1621_Init *****************
  3347 ;; Defined at:
  3348 ;;		line 21 in file "I2C_Support.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;		None
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  Device          1   19[COMRAM] unsigned char 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;		None               void
  3355 ;; Registers used:
  3356 ;;		wreg, status,2, status,0, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;Total ram usage:        1 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    5
  3369 ;; This function calls:
  3370 ;;		_I2C_Write_Cmd_Only
  3371 ;;		_I2C_Write_Cmd_Write_Data
  3372 ;; This function is called by:
  3373 ;;		_Do_Init
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text13
  3378  0000'                    __ptext13:
  3379                           	opt stack 0
  3380  0000'                    _DS1621_Init:
  3381                           	opt stack 24
  3382                           
  3383                           ;I2C_Support.c: 23: char Device = 0x48;
  3384                           
  3385                           ;incstack = 0
  3386  0000' 0E48               	movlw	72
  3387  0002' 6E13'              	movwf	DS1621_Init@Device,c
  3388                           
  3389                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  3390  0004' 0EAC               	movlw	172
  3391  0006' 6E10'              	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  3392  0008' 0E02               	movlw	2
  3393  000A' 6E11'              	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  3394  000C' 5013'              	movf	DS1621_Init@Device,w,c
  3395  000E' EC00' F000'        	call	_I2C_Write_Cmd_Write_Data
  3396                           
  3397                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  3398  0012' 0EEE               	movlw	238
  3399  0014' 6E10'              	movwf	I2C_Write_Cmd_Only@Cmd,c
  3400  0016' 5013'              	movf	DS1621_Init@Device,w,c
  3401  0018' EC00' F000'        	call	_I2C_Write_Cmd_Only
  3402  001C' 0012               	return		;funcret
  3403  001E'                    __end_of_DS1621_Init:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           intcon	equ	0xFF2
  3412                           intcon2	equ	0xFF1
  3413                           postinc0	equ	0xFEE
  3414                           wreg	equ	0xFE8
  3415                           postdec1	equ	0xFE5
  3416                           fsr1l	equ	0xFE1
  3417                           indf2	equ	0xFDF
  3418                           postinc2	equ	0xFDE
  3419                           postdec2	equ	0xFDD
  3420                           fsr2h	equ	0xFDA
  3421                           fsr2l	equ	0xFD9
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  3425 ;; Defined at:
  3426 ;;		line 152 in file "I2C_Soft.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;  Device          1    wreg     unsigned char 
  3429 ;;  Cmd             1   16[COMRAM] unsigned char 
  3430 ;;  Data_Out        1   17[COMRAM] unsigned char 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;  Device          1   18[COMRAM] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;		None               void
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0, cstack
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;Total ram usage:        3 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    4
  3449 ;; This function calls:
  3450 ;;		_I2C_Start
  3451 ;;		_I2C_Stop
  3452 ;;		_I2C_Write
  3453 ;; This function is called by:
  3454 ;;		_DS1621_Init
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text14
  3459  0000'                    __ptext14:
  3460                           	opt stack 0
  3461  0000'                    _I2C_Write_Cmd_Write_Data:
  3462                           	opt stack 24
  3463                           
  3464                           ;incstack = 0
  3465                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  3466  0000' 6E12'              	movwf	I2C_Write_Cmd_Write_Data@Device,c
  3467                           
  3468                           ;I2C_Soft.c: 154: I2C_Start();
  3469  0002' EC00' F000'        	call	_I2C_Start	;wreg free
  3470                           
  3471                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  3472  0006' 5012'              	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  3473  0008' 2412'              	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  3474  000A' EC00' F000'        	call	_I2C_Write
  3475                           
  3476                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  3477  000E' 5010'              	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  3478  0010' EC00' F000'        	call	_I2C_Write
  3479                           
  3480                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  3481  0014' 5011'              	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  3482  0016' EC00' F000'        	call	_I2C_Write
  3483                           
  3484                           ;I2C_Soft.c: 158: I2C_Stop();
  3485  001A' EC00' F000'        	call	_I2C_Stop	;wreg free
  3486  001E' 0012               	return		;funcret
  3487  0020'                    __end_of_I2C_Write_Cmd_Write_Data:
  3488                           	opt stack 0
  3489                           tblptru	equ	0xFF8
  3490                           tblptrh	equ	0xFF7
  3491                           tblptrl	equ	0xFF6
  3492                           tablat	equ	0xFF5
  3493                           prodh	equ	0xFF4
  3494                           prodl	equ	0xFF3
  3495                           intcon	equ	0xFF2
  3496                           intcon2	equ	0xFF1
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           postdec1	equ	0xFE5
  3500                           fsr1l	equ	0xFE1
  3501                           indf2	equ	0xFDF
  3502                           postinc2	equ	0xFDE
  3503                           postdec2	equ	0xFDD
  3504                           fsr2h	equ	0xFDA
  3505                           fsr2l	equ	0xFD9
  3506                           status	equ	0xFD8
  3507                           
  3508 ;; *************** function _I2C_Write_Cmd_Only *****************
  3509 ;; Defined at:
  3510 ;;		line 144 in file "I2C_Soft.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;  Device          1    wreg     unsigned char 
  3513 ;;  Cmd             1   16[COMRAM] unsigned char 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;  Device          1   17[COMRAM] unsigned char 
  3516 ;; Return value:  Size  Location     Type
  3517 ;;		None               void
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3525 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;Total ram usage:        2 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    4
  3532 ;; This function calls:
  3533 ;;		_I2C_Start
  3534 ;;		_I2C_Stop
  3535 ;;		_I2C_Write
  3536 ;; This function is called by:
  3537 ;;		_DS1621_Init
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text15
  3542  0000'                    __ptext15:
  3543                           	opt stack 0
  3544  0000'                    _I2C_Write_Cmd_Only:
  3545                           	opt stack 24
  3546                           
  3547                           ;incstack = 0
  3548                           ;I2C_Write_Cmd_Only@Device stored from wreg
  3549  0000' 6E11'              	movwf	I2C_Write_Cmd_Only@Device,c
  3550                           
  3551                           ;I2C_Soft.c: 146: I2C_Start();
  3552  0002' EC00' F000'        	call	_I2C_Start	;wreg free
  3553                           
  3554                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  3555  0006' 5011'              	movf	I2C_Write_Cmd_Only@Device,w,c
  3556  0008' 2411'              	addwf	I2C_Write_Cmd_Only@Device,w,c
  3557  000A' EC00' F000'        	call	_I2C_Write
  3558                           
  3559                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  3560  000E' 5010'              	movf	I2C_Write_Cmd_Only@Cmd,w,c
  3561  0010' EC00' F000'        	call	_I2C_Write
  3562                           
  3563                           ;I2C_Soft.c: 149: I2C_Stop();
  3564  0014' EC00' F000'        	call	_I2C_Stop	;wreg free
  3565  0018' 0012               	return		;funcret
  3566  001A'                    __end_of_I2C_Write_Cmd_Only:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           intcon2	equ	0xFF1
  3576                           postinc0	equ	0xFEE
  3577                           wreg	equ	0xFE8
  3578                           postdec1	equ	0xFE5
  3579                           fsr1l	equ	0xFE1
  3580                           indf2	equ	0xFDF
  3581                           postinc2	equ	0xFDE
  3582                           postdec2	equ	0xFDD
  3583                           fsr2h	equ	0xFDA
  3584                           fsr2l	equ	0xFD9
  3585                           status	equ	0xFD8
  3586                           
  3587 ;; *************** function _Deactivate_Buzzer *****************
  3588 ;; Defined at:
  3589 ;;		line 227 in file "lab11.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;		None
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;		None
  3594 ;; Return value:  Size  Location     Type
  3595 ;;		None               void
  3596 ;; Registers used:
  3597 ;;		wreg, status,2
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3607 ;;Total ram usage:        0 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    2
  3610 ;; This function calls:
  3611 ;;		Nothing
  3612 ;; This function is called by:
  3613 ;;		_main
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	text16
  3618  0000'                    __ptext16:
  3619                           	opt stack 0
  3620  0000'                    _Deactivate_Buzzer:
  3621                           	opt stack 28
  3622                           
  3623                           ;lab11.c: 229: CCP2CON = 0x0;
  3624                           
  3625                           ;incstack = 0
  3626  0000' 0E00               	movlw	0
  3627  0002' 6EBA               	movwf	4026,c	;volatile
  3628                           
  3629                           ;lab11.c: 230: PORTBbits.RB3 = 0;
  3630  0004' 9681               	bcf	3969,3,c	;volatile
  3631  0006' 0012               	return		;funcret
  3632  0008'                    __end_of_Deactivate_Buzzer:
  3633                           	opt stack 0
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           intcon	equ	0xFF2
  3641                           intcon2	equ	0xFF1
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _DS3231_Setup_Time *****************
  3654 ;; Defined at:
  3655 ;;		line 64 in file "I2C_Support.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;		None
  3658 ;; Auto vars:     Size  Location     Type
  3659 ;;  Address         1   17[COMRAM] unsigned char 
  3660 ;;  Device          1   16[COMRAM] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;		None               void
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;Total ram usage:        2 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    4
  3677 ;; This function calls:
  3678 ;;		_I2C_Start
  3679 ;;		_I2C_Stop
  3680 ;;		_I2C_Write
  3681 ;; This function is called by:
  3682 ;;		_main
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text17
  3687  0000'                    __ptext17:
  3688                           	opt stack 0
  3689  0000'                    _DS3231_Setup_Time:
  3690                           	opt stack 26
  3691                           
  3692                           ;I2C_Support.c: 66: char Device = 0x68;
  3693                           
  3694                           ;incstack = 0
  3695  0000' 0E68               	movlw	104
  3696  0002' 6E10'              	movwf	DS3231_Setup_Time@Device,c
  3697                           
  3698                           ;I2C_Support.c: 67: char Address = 0x00;
  3699  0004' 0E00               	movlw	0
  3700  0006' 6E11'              	movwf	DS3231_Setup_Time@Address,c
  3701                           
  3702                           ;I2C_Support.c: 68: second = 0x00;
  3703  0008' 0E00               	movlw	0
  3704  000A' 6E1C'              	movwf	_second,c
  3705                           
  3706                           ;I2C_Support.c: 69: hour = 0x00;
  3707  000C' 0E00               	movlw	0
  3708  000E' 6E17'              	movwf	_hour,c
  3709                           
  3710                           ;I2C_Support.c: 70: dow = 0x00;
  3711  0010' 0E00               	movlw	0
  3712  0012' 6E15'              	movwf	_dow,c
  3713                           
  3714                           ;I2C_Support.c: 71: day = 0x00;
  3715  0014' 0E00               	movlw	0
  3716  0016' 6E14'              	movwf	_day,c
  3717                           
  3718                           ;I2C_Support.c: 72: month = 0x00;
  3719  0018' 0E00               	movlw	0
  3720  001A' 6E1A'              	movwf	_month,c
  3721                           
  3722                           ;I2C_Support.c: 73: year = 0x00;
  3723  001C' 0E00               	movlw	0
  3724  001E' 6E26'              	movwf	_year,c
  3725                           
  3726                           ;I2C_Support.c: 75: I2C_Start();
  3727  0020' EC00' F000'        	call	_I2C_Start	;wreg free
  3728                           
  3729                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
  3730  0024' 5010'              	movf	DS3231_Setup_Time@Device,w,c
  3731  0026' 2410'              	addwf	DS3231_Setup_Time@Device,w,c
  3732  0028' EC00' F000'        	call	_I2C_Write
  3733                           
  3734                           ;I2C_Support.c: 77: I2C_Write(Address);
  3735  002C' 5011'              	movf	DS3231_Setup_Time@Address,w,c
  3736  002E' EC00' F000'        	call	_I2C_Write
  3737                           
  3738                           ;I2C_Support.c: 78: I2C_Write(second);
  3739  0032' 501C'              	movf	_second,w,c
  3740  0034' EC00' F000'        	call	_I2C_Write
  3741                           
  3742                           ;I2C_Support.c: 79: I2C_Write(hour);
  3743  0038' 5017'              	movf	_hour,w,c
  3744  003A' EC00' F000'        	call	_I2C_Write
  3745                           
  3746                           ;I2C_Support.c: 80: I2C_Write(dow);
  3747  003E' 5015'              	movf	_dow,w,c
  3748  0040' EC00' F000'        	call	_I2C_Write
  3749                           
  3750                           ;I2C_Support.c: 81: I2C_Write(day);
  3751  0044' 5014'              	movf	_day,w,c
  3752  0046' EC00' F000'        	call	_I2C_Write
  3753                           
  3754                           ;I2C_Support.c: 82: I2C_Write(month);
  3755  004A' 501A'              	movf	_month,w,c
  3756  004C' EC00' F000'        	call	_I2C_Write
  3757                           
  3758                           ;I2C_Support.c: 83: I2C_Write(year);
  3759  0050' 5026'              	movf	_year,w,c
  3760  0052' EC00' F000'        	call	_I2C_Write
  3761                           
  3762                           ;I2C_Support.c: 84: I2C_Stop();
  3763  0056' EC00' F000'        	call	_I2C_Stop	;wreg free
  3764  005A' 0012               	return		;funcret
  3765  005C'                    __end_of_DS3231_Setup_Time:
  3766                           	opt stack 0
  3767                           tblptru	equ	0xFF8
  3768                           tblptrh	equ	0xFF7
  3769                           tblptrl	equ	0xFF6
  3770                           tablat	equ	0xFF5
  3771                           prodh	equ	0xFF4
  3772                           prodl	equ	0xFF3
  3773                           intcon	equ	0xFF2
  3774                           intcon2	equ	0xFF1
  3775                           postinc0	equ	0xFEE
  3776                           wreg	equ	0xFE8
  3777                           postdec1	equ	0xFE5
  3778                           fsr1l	equ	0xFE1
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           fsr2h	equ	0xFDA
  3783                           fsr2l	equ	0xFD9
  3784                           status	equ	0xFD8
  3785                           
  3786 ;; *************** function _DS3231_Read_Time *****************
  3787 ;; Defined at:
  3788 ;;		line 44 in file "I2C_Support.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;		None
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  Device          1   18[COMRAM] unsigned char 
  3793 ;;  Address         1   17[COMRAM] unsigned char 
  3794 ;;  Data_Ret        1    0        unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;		None               void
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        2 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    5
  3811 ;; This function calls:
  3812 ;;		_I2C_ReStart
  3813 ;;		_I2C_Read
  3814 ;;		_I2C_Start
  3815 ;;		_I2C_Stop
  3816 ;;		_I2C_Write
  3817 ;; This function is called by:
  3818 ;;		_main
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text18
  3823  0000'                    __ptext18:
  3824                           	opt stack 0
  3825  0000'                    _DS3231_Read_Time:
  3826                           	opt stack 25
  3827                           
  3828                           ;I2C_Support.c: 46: char Device = 0x68;
  3829                           
  3830                           ;incstack = 0
  3831  0000' 0E68               	movlw	104
  3832  0002' 6E12'              	movwf	DS3231_Read_Time@Device,c
  3833                           
  3834                           ;I2C_Support.c: 47: char Address = 0x00;
  3835  0004' 0E00               	movlw	0
  3836  0006' 6E11'              	movwf	DS3231_Read_Time@Address,c
  3837                           
  3838                           ;I2C_Support.c: 48: char Data_Ret;
  3839                           ;I2C_Support.c: 49: I2C_Start();
  3840  0008' EC00' F000'        	call	_I2C_Start	;wreg free
  3841                           
  3842                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
  3843  000C' 5012'              	movf	DS3231_Read_Time@Device,w,c
  3844  000E' 2412'              	addwf	DS3231_Read_Time@Device,w,c
  3845  0010' EC00' F000'        	call	_I2C_Write
  3846                           
  3847                           ;I2C_Support.c: 51: I2C_Write(Address);
  3848  0014' 5011'              	movf	DS3231_Read_Time@Address,w,c
  3849  0016' EC00' F000'        	call	_I2C_Write
  3850                           
  3851                           ;I2C_Support.c: 52: I2C_ReStart();
  3852  001A' EC00' F000'        	call	_I2C_ReStart	;wreg free
  3853                           
  3854                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
  3855  001E' 80D8               	bsf	status,0,c
  3856  0020' 3412'              	rlcf	DS3231_Read_Time@Device,w,c
  3857  0022' EC00' F000'        	call	_I2C_Write
  3858                           
  3859                           ;I2C_Support.c: 54: second = I2C_Read(1);
  3860  0026' 0E01               	movlw	1
  3861  0028' EC00' F000'        	call	_I2C_Read
  3862  002C' 6E1C'              	movwf	_second,c
  3863                           
  3864                           ;I2C_Support.c: 55: minute = I2C_Read(1);
  3865  002E' 0E01               	movlw	1
  3866  0030' EC00' F000'        	call	_I2C_Read
  3867  0034' 6E19'              	movwf	_minute,c
  3868                           
  3869                           ;I2C_Support.c: 56: hour = I2C_Read(1);
  3870  0036' 0E01               	movlw	1
  3871  0038' EC00' F000'        	call	_I2C_Read
  3872  003C' 6E17'              	movwf	_hour,c
  3873                           
  3874                           ;I2C_Support.c: 57: dow = I2C_Read(1);
  3875  003E' 0E01               	movlw	1
  3876  0040' EC00' F000'        	call	_I2C_Read
  3877  0044' 6E15'              	movwf	_dow,c
  3878                           
  3879                           ;I2C_Support.c: 58: day = I2C_Read(1);
  3880  0046' 0E01               	movlw	1
  3881  0048' EC00' F000'        	call	_I2C_Read
  3882  004C' 6E14'              	movwf	_day,c
  3883                           
  3884                           ;I2C_Support.c: 59: month = I2C_Read(1);
  3885  004E' 0E01               	movlw	1
  3886  0050' EC00' F000'        	call	_I2C_Read
  3887  0054' 6E1A'              	movwf	_month,c
  3888                           
  3889                           ;I2C_Support.c: 60: year = I2C_Read(0);
  3890  0056' 0E00               	movlw	0
  3891  0058' EC00' F000'        	call	_I2C_Read
  3892  005C' 6E26'              	movwf	_year,c
  3893                           
  3894                           ;I2C_Support.c: 61: I2C_Stop();
  3895  005E' EC00' F000'        	call	_I2C_Stop	;wreg free
  3896  0062' 0012               	return		;funcret
  3897  0064'                    __end_of_DS3231_Read_Time:
  3898                           	opt stack 0
  3899                           tblptru	equ	0xFF8
  3900                           tblptrh	equ	0xFF7
  3901                           tblptrl	equ	0xFF6
  3902                           tablat	equ	0xFF5
  3903                           prodh	equ	0xFF4
  3904                           prodl	equ	0xFF3
  3905                           intcon	equ	0xFF2
  3906                           intcon2	equ	0xFF1
  3907                           postinc0	equ	0xFEE
  3908                           wreg	equ	0xFE8
  3909                           postdec1	equ	0xFE5
  3910                           fsr1l	equ	0xFE1
  3911                           indf2	equ	0xFDF
  3912                           postinc2	equ	0xFDE
  3913                           postdec2	equ	0xFDD
  3914                           fsr2h	equ	0xFDA
  3915                           fsr2l	equ	0xFD9
  3916                           status	equ	0xFD8
  3917                           
  3918 ;; *************** function _DS1621_Read_Temp *****************
  3919 ;; Defined at:
  3920 ;;		line 29 in file "I2C_Support.c"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;		None
  3923 ;; Auto vars:     Size  Location     Type
  3924 ;;  Device          1   21[COMRAM] unsigned char 
  3925 ;;  Data_Ret        1   20[COMRAM] unsigned char 
  3926 ;;  Cmd             1   19[COMRAM] unsigned char 
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  2   17[COMRAM] int 
  3929 ;; Registers used:
  3930 ;;		wreg, status,2, status,0, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3936 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;Total ram usage:        5 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    5
  3943 ;; This function calls:
  3944 ;;		_I2C_ReStart
  3945 ;;		_I2C_Read
  3946 ;;		_I2C_Start
  3947 ;;		_I2C_Stop
  3948 ;;		_I2C_Write
  3949 ;; This function is called by:
  3950 ;;		_main
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text19
  3955  0000'                    __ptext19:
  3956                           	opt stack 0
  3957  0000'                    _DS1621_Read_Temp:
  3958                           	opt stack 25
  3959                           
  3960                           ;I2C_Support.c: 31: char Device = 0x48;
  3961                           
  3962                           ;incstack = 0
  3963  0000' 0E48               	movlw	72
  3964  0002' 6E15'              	movwf	DS1621_Read_Temp@Device,c
  3965                           
  3966                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  3967  0004' 0EAA               	movlw	170
  3968  0006' 6E13'              	movwf	DS1621_Read_Temp@Cmd,c
  3969                           
  3970                           ;I2C_Support.c: 33: char Data_Ret;
  3971                           ;I2C_Support.c: 34: I2C_Start();
  3972  0008' EC00' F000'        	call	_I2C_Start	;wreg free
  3973                           
  3974                           ;I2C_Support.c: 35: I2C_Write((Device << 1) | 0);
  3975  000C' 5015'              	movf	DS1621_Read_Temp@Device,w,c
  3976  000E' 2415'              	addwf	DS1621_Read_Temp@Device,w,c
  3977  0010' EC00' F000'        	call	_I2C_Write
  3978                           
  3979                           ;I2C_Support.c: 36: I2C_Write(Cmd);
  3980  0014' 5013'              	movf	DS1621_Read_Temp@Cmd,w,c
  3981  0016' EC00' F000'        	call	_I2C_Write
  3982                           
  3983                           ;I2C_Support.c: 37: I2C_ReStart();
  3984  001A' EC00' F000'        	call	_I2C_ReStart	;wreg free
  3985                           
  3986                           ;I2C_Support.c: 38: I2C_Write((Device << 1) | 1);
  3987  001E' 80D8               	bsf	status,0,c
  3988  0020' 3415'              	rlcf	DS1621_Read_Temp@Device,w,c
  3989  0022' EC00' F000'        	call	_I2C_Write
  3990                           
  3991                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
  3992  0026' 0E00               	movlw	0
  3993  0028' EC00' F000'        	call	_I2C_Read
  3994  002C' 6E14'              	movwf	DS1621_Read_Temp@Data_Ret,c
  3995                           
  3996                           ;I2C_Support.c: 40: I2C_Stop();
  3997  002E' EC00' F000'        	call	_I2C_Stop	;wreg free
  3998                           
  3999                           ;I2C_Support.c: 41: return Data_Ret;
  4000  0032' C014' F011'        	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  4001  0036' 6A12'              	clrf	?_DS1621_Read_Temp+1,c
  4002  0038' D000               	goto	l325
  4003  003A'                    l325:
  4004  003A' 0012               	return		;funcret
  4005  003C'                    __end_of_DS1621_Read_Temp:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           prodh	equ	0xFF4
  4012                           prodl	equ	0xFF3
  4013                           intcon	equ	0xFF2
  4014                           intcon2	equ	0xFF1
  4015                           postinc0	equ	0xFEE
  4016                           wreg	equ	0xFE8
  4017                           postdec1	equ	0xFE5
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _I2C_Write *****************
  4027 ;; Defined at:
  4028 ;;		line 41 in file "I2C_Soft.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  outByte         1    wreg     unsigned char 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  outByte         1   14[COMRAM] unsigned char 
  4033 ;;  n               1   15[COMRAM] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;		None               void
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:        2 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    3
  4050 ;; This function calls:
  4051 ;;		_i2cHighScl
  4052 ;;		_i2cHighSda
  4053 ;;		_i2cLowScl
  4054 ;;		_i2cLowSda
  4055 ;; This function is called by:
  4056 ;;		_I2C_Write_Cmd_Only
  4057 ;;		_I2C_Write_Cmd_Write_Data
  4058 ;;		_DS1621_Read_Temp
  4059 ;;		_DS3231_Read_Time
  4060 ;;		_DS3231_Setup_Time
  4061 ;;		_I2C_Write_Address_Read_One_Byte
  4062 ;;		_I2C_Write_Address_Write_One_Byte
  4063 ;;		_I2C_Write_Cmd_Read_One_Byte
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           	psect	text20
  4068  0000'                    __ptext20:
  4069                           	opt stack 0
  4070  0000'                    _I2C_Write:
  4071                           	opt stack 24
  4072                           
  4073                           ;incstack = 0
  4074                           ;I2C_Write@outByte stored from wreg
  4075  0000' 6E0E'              	movwf	I2C_Write@outByte,c
  4076                           
  4077                           ;I2C_Soft.c: 43: unsigned char n;
  4078                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
  4079  0002' 0E00               	movlw	0
  4080  0004' 6E0F'              	movwf	I2C_Write@n,c
  4081  0006'                    l1868:
  4082  0006' 0E07               	movlw	7
  4083  0008' 640F'              	cpfsgt	I2C_Write@n,c
  4084  000A' D001               	goto	l245
  4085  000C' D011               	goto	l1886
  4086  000E'                    l245:
  4087                           
  4088                           ;I2C_Soft.c: 45: {
  4089                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
  4090  000E' AE0E'              	btfss	I2C_Write@outByte,7,c
  4091  0010' D003               	goto	l1874
  4092  0012' EC00' F000'        	call	_i2cHighSda	;wreg free
  4093  0016' D003               	goto	l1876
  4094  0018'                    l1874:
  4095                           
  4096                           ;I2C_Soft.c: 47: else i2cLowSda();
  4097  0018' EC00' F000'        	call	_i2cLowSda	;wreg free
  4098  001C' D000               	goto	l1876
  4099  001E'                    l1876:
  4100                           
  4101                           ;I2C_Soft.c: 48: i2cHighScl();
  4102  001E' EC00' F000'        	call	_i2cHighScl	;wreg free
  4103                           
  4104                           ;I2C_Soft.c: 49: i2cLowScl();
  4105  0022' EC00' F000'        	call	_i2cLowScl	;wreg free
  4106                           
  4107                           ;I2C_Soft.c: 50: outByte = outByte << 1;
  4108  0026' 500E'              	movf	I2C_Write@outByte,w,c
  4109  0028' 240E'              	addwf	I2C_Write@outByte,w,c
  4110  002A' 6E0E'              	movwf	I2C_Write@outByte,c
  4111  002C' 2A0F'              	incf	I2C_Write@n,f,c
  4112  002E' D7EB               	goto	l1868
  4113  0030'                    l1886:
  4114                           
  4115                           ;I2C_Soft.c: 51: }
  4116                           ;I2C_Soft.c: 52: i2cHighSda();
  4117  0030' EC00' F000'        	call	_i2cHighSda	;wreg free
  4118                           
  4119                           ;I2C_Soft.c: 53: i2cHighScl();
  4120  0034' EC00' F000'        	call	_i2cHighScl	;wreg free
  4121                           
  4122                           ;I2C_Soft.c: 54: i2cLowScl();
  4123  0038' EC00' F000'        	call	_i2cLowScl	;wreg free
  4124  003C' 0012               	return		;funcret
  4125  003E'                    __end_of_I2C_Write:
  4126                           	opt stack 0
  4127                           tblptru	equ	0xFF8
  4128                           tblptrh	equ	0xFF7
  4129                           tblptrl	equ	0xFF6
  4130                           tablat	equ	0xFF5
  4131                           prodh	equ	0xFF4
  4132                           prodl	equ	0xFF3
  4133                           intcon	equ	0xFF2
  4134                           intcon2	equ	0xFF1
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1l	equ	0xFE1
  4139                           indf2	equ	0xFDF
  4140                           postinc2	equ	0xFDE
  4141                           postdec2	equ	0xFDD
  4142                           fsr2h	equ	0xFDA
  4143                           fsr2l	equ	0xFD9
  4144                           status	equ	0xFD8
  4145                           
  4146 ;; *************** function _I2C_Stop *****************
  4147 ;; Defined at:
  4148 ;;		line 88 in file "I2C_Soft.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;		None               void
  4155 ;; Registers used:
  4156 ;;		wreg, cstack
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;Total ram usage:        0 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    3
  4169 ;; This function calls:
  4170 ;;		_i2cHighScl
  4171 ;;		_i2cHighSda
  4172 ;;		_i2cLowScl
  4173 ;;		_i2cLowSda
  4174 ;; This function is called by:
  4175 ;;		_I2C_Write_Cmd_Only
  4176 ;;		_I2C_Write_Cmd_Write_Data
  4177 ;;		_DS1621_Read_Temp
  4178 ;;		_DS3231_Read_Time
  4179 ;;		_DS3231_Setup_Time
  4180 ;;		_I2C_Write_Address_Read_One_Byte
  4181 ;;		_I2C_Write_Address_Write_One_Byte
  4182 ;;		_I2C_Write_Cmd_Read_One_Byte
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text21
  4187  0000'                    __ptext21:
  4188                           	opt stack 0
  4189  0000'                    _I2C_Stop:
  4190                           	opt stack 24
  4191                           
  4192                           ;I2C_Soft.c: 90: i2cLowScl();
  4193                           
  4194                           ;incstack = 0
  4195  0000' EC00' F000'        	call	_i2cLowScl	;wreg free
  4196                           
  4197                           ;I2C_Soft.c: 91: i2cLowSda();
  4198  0004' EC00' F000'        	call	_i2cLowSda	;wreg free
  4199                           
  4200                           ;I2C_Soft.c: 92: i2cHighScl();
  4201  0008' EC00' F000'        	call	_i2cHighScl	;wreg free
  4202                           
  4203                           ;I2C_Soft.c: 93: i2cHighSda();
  4204  000C' EC00' F000'        	call	_i2cHighSda	;wreg free
  4205  0010' 0012               	return		;funcret
  4206  0012'                    __end_of_I2C_Stop:
  4207                           	opt stack 0
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           intcon2	equ	0xFF1
  4216                           postinc0	equ	0xFEE
  4217                           wreg	equ	0xFE8
  4218                           postdec1	equ	0xFE5
  4219                           fsr1l	equ	0xFE1
  4220                           indf2	equ	0xFDF
  4221                           postinc2	equ	0xFDE
  4222                           postdec2	equ	0xFDD
  4223                           fsr2h	equ	0xFDA
  4224                           fsr2l	equ	0xFD9
  4225                           status	equ	0xFD8
  4226                           
  4227 ;; *************** function _I2C_Start *****************
  4228 ;; Defined at:
  4229 ;;		line 71 in file "I2C_Soft.c"
  4230 ;; Parameters:    Size  Location     Type
  4231 ;;		None
  4232 ;; Auto vars:     Size  Location     Type
  4233 ;;		None
  4234 ;; Return value:  Size  Location     Type
  4235 ;;		None               void
  4236 ;; Registers used:
  4237 ;;		wreg, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;Total ram usage:        0 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    3
  4250 ;; This function calls:
  4251 ;;		_i2cHighScl
  4252 ;;		_i2cHighSda
  4253 ;;		_i2cLowScl
  4254 ;;		_i2cLowSda
  4255 ;; This function is called by:
  4256 ;;		_I2C_Write_Cmd_Only
  4257 ;;		_I2C_Write_Cmd_Write_Data
  4258 ;;		_DS1621_Read_Temp
  4259 ;;		_DS3231_Read_Time
  4260 ;;		_DS3231_Setup_Time
  4261 ;;		_I2C_Write_Address_Read_One_Byte
  4262 ;;		_I2C_Write_Address_Write_One_Byte
  4263 ;;		_I2C_Write_Cmd_Read_One_Byte
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text22
  4268  0000'                    __ptext22:
  4269                           	opt stack 0
  4270  0000'                    _I2C_Start:
  4271                           	opt stack 24
  4272                           
  4273                           ;I2C_Soft.c: 73: i2cHighSda();
  4274                           
  4275                           ;incstack = 0
  4276  0000' EC00' F000'        	call	_i2cHighSda	;wreg free
  4277                           
  4278                           ;I2C_Soft.c: 74: i2cHighScl();
  4279  0004' EC00' F000'        	call	_i2cHighScl	;wreg free
  4280                           
  4281                           ;I2C_Soft.c: 75: i2cLowSda();
  4282  0008' EC00' F000'        	call	_i2cLowSda	;wreg free
  4283                           
  4284                           ;I2C_Soft.c: 76: i2cLowScl();
  4285  000C' EC00' F000'        	call	_i2cLowScl	;wreg free
  4286  0010' 0012               	return		;funcret
  4287  0012'                    __end_of_I2C_Start:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           intcon	equ	0xFF2
  4296                           intcon2	equ	0xFF1
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           postdec1	equ	0xFE5
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _I2C_Read *****************
  4309 ;; Defined at:
  4310 ;;		line 20 in file "I2C_Soft.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  ack             1    wreg     unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  ack             1   14[COMRAM] unsigned char 
  4315 ;;  inByte          1   16[COMRAM] unsigned char 
  4316 ;;  n               1   15[COMRAM] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      unsigned char 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;Total ram usage:        3 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    4
  4333 ;; This function calls:
  4334 ;;		_i2cAck
  4335 ;;		_i2cHighScl
  4336 ;;		_i2cHighSda
  4337 ;;		_i2cLowScl
  4338 ;;		_i2cNack
  4339 ;; This function is called by:
  4340 ;;		_DS1621_Read_Temp
  4341 ;;		_DS3231_Read_Time
  4342 ;;		_I2C_Write_Address_Read_One_Byte
  4343 ;;		_I2C_Write_Cmd_Read_One_Byte
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text23
  4348  0000'                    __ptext23:
  4349                           	opt stack 0
  4350  0000'                    _I2C_Read:
  4351                           	opt stack 25
  4352                           
  4353                           ;incstack = 0
  4354                           ;I2C_Read@ack stored from wreg
  4355  0000' 6E0E'              	movwf	I2C_Read@ack,c
  4356                           
  4357                           ;I2C_Soft.c: 22: unsigned char inByte, n;
  4358                           ;I2C_Soft.c: 23: i2cHighSda();
  4359  0002' EC00' F000'        	call	_i2cHighSda	;wreg free
  4360                           
  4361                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
  4362  0006' 0E00               	movlw	0
  4363  0008' 6E0F'              	movwf	I2C_Read@n,c
  4364  000A'                    l2006:
  4365  000A' 0E07               	movlw	7
  4366  000C' 640F'              	cpfsgt	I2C_Read@n,c
  4367  000E' D001               	goto	l2010
  4368  0010' D00F               	goto	l2024
  4369  0012'                    l2010:
  4370                           
  4371                           ;I2C_Soft.c: 25: {
  4372                           ;I2C_Soft.c: 26: i2cHighScl();
  4373  0012' EC00' F000'        	call	_i2cHighScl	;wreg free
  4374                           
  4375                           ;I2C_Soft.c: 28: if (PORTDbits.RD6)
  4376  0016' AC83               	btfss	3971,6,c	;volatile
  4377  0018' D003               	goto	l2016
  4378                           
  4379                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
  4380  001A' 80D8               	bsf	status,0,c
  4381  001C' 3610'              	rlcf	I2C_Read@inByte,f,c
  4382  001E' D004               	goto	l2018
  4383  0020'                    l2016:
  4384                           
  4385                           ;I2C_Soft.c: 30: else
  4386                           ;I2C_Soft.c: 31: inByte = inByte << 1;
  4387  0020' 5010'              	movf	I2C_Read@inByte,w,c
  4388  0022' 2410'              	addwf	I2C_Read@inByte,w,c
  4389  0024' 6E10'              	movwf	I2C_Read@inByte,c
  4390  0026' D000               	goto	l2018
  4391  0028'                    l2018:
  4392                           
  4393                           ;I2C_Soft.c: 32: i2cLowScl();
  4394  0028' EC00' F000'        	call	_i2cLowScl	;wreg free
  4395  002C' 2A0F'              	incf	I2C_Read@n,f,c
  4396  002E' D7ED               	goto	l2006
  4397  0030'                    l2024:
  4398                           
  4399                           ;I2C_Soft.c: 33: }
  4400                           ;I2C_Soft.c: 34: if (ack) i2cAck();
  4401  0030' 500E'              	movf	I2C_Read@ack,w,c
  4402  0032' B4D8               	btfsc	status,2,c
  4403  0034' D003               	goto	l2028
  4404  0036' EC00' F000'        	call	_i2cAck	;wreg free
  4405  003A' D003               	goto	l2030
  4406  003C'                    l2028:
  4407                           
  4408                           ;I2C_Soft.c: 35: else i2cNack();
  4409  003C' EC00' F000'        	call	_i2cNack	;wreg free
  4410  0040' D000               	goto	l2030
  4411  0042'                    l2030:
  4412                           
  4413                           ;I2C_Soft.c: 38: return(inByte);
  4414  0042' 5010'              	movf	I2C_Read@inByte,w,c
  4415  0044' D000               	goto	l242
  4416  0046'                    l242:
  4417  0046' 0012               	return		;funcret
  4418  0048'                    __end_of_I2C_Read:
  4419                           	opt stack 0
  4420                           tblptru	equ	0xFF8
  4421                           tblptrh	equ	0xFF7
  4422                           tblptrl	equ	0xFF6
  4423                           tablat	equ	0xFF5
  4424                           prodh	equ	0xFF4
  4425                           prodl	equ	0xFF3
  4426                           intcon	equ	0xFF2
  4427                           intcon2	equ	0xFF1
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           postdec1	equ	0xFE5
  4431                           fsr1l	equ	0xFE1
  4432                           indf2	equ	0xFDF
  4433                           postinc2	equ	0xFDE
  4434                           postdec2	equ	0xFDD
  4435                           fsr2h	equ	0xFDA
  4436                           fsr2l	equ	0xFD9
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function _i2cNack *****************
  4440 ;; Defined at:
  4441 ;;		line 57 in file "I2C_Soft.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;		None
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;		None               void
  4448 ;; Registers used:
  4449 ;;		wreg, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:        0 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    3
  4462 ;; This function calls:
  4463 ;;		_i2cHighScl
  4464 ;;		_i2cLowScl
  4465 ;; This function is called by:
  4466 ;;		_I2C_Read
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text24
  4471  0000'                    __ptext24:
  4472                           	opt stack 0
  4473  0000'                    _i2cNack:
  4474                           	opt stack 25
  4475                           
  4476                           ;I2C_Soft.c: 59: i2cHighScl();
  4477                           
  4478                           ;incstack = 0
  4479  0000' EC00' F000'        	call	_i2cHighScl	;wreg free
  4480                           
  4481                           ;I2C_Soft.c: 60: i2cLowScl();
  4482  0004' EC00' F000'        	call	_i2cLowScl	;wreg free
  4483  0008' 0012               	return		;funcret
  4484  000A'                    __end_of_i2cNack:
  4485                           	opt stack 0
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           prodh	equ	0xFF4
  4491                           prodl	equ	0xFF3
  4492                           intcon	equ	0xFF2
  4493                           intcon2	equ	0xFF1
  4494                           postinc0	equ	0xFEE
  4495                           wreg	equ	0xFE8
  4496                           postdec1	equ	0xFE5
  4497                           fsr1l	equ	0xFE1
  4498                           indf2	equ	0xFDF
  4499                           postinc2	equ	0xFDE
  4500                           postdec2	equ	0xFDD
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _i2cAck *****************
  4506 ;; Defined at:
  4507 ;;		line 63 in file "I2C_Soft.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;Total ram usage:        0 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    3
  4528 ;; This function calls:
  4529 ;;		_i2cHighScl
  4530 ;;		_i2cHighSda
  4531 ;;		_i2cLowScl
  4532 ;;		_i2cLowSda
  4533 ;; This function is called by:
  4534 ;;		_I2C_Read
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text25
  4539  0000'                    __ptext25:
  4540                           	opt stack 0
  4541  0000'                    _i2cAck:
  4542                           	opt stack 25
  4543                           
  4544                           ;I2C_Soft.c: 65: i2cLowSda();
  4545                           
  4546                           ;incstack = 0
  4547  0000' EC00' F000'        	call	_i2cLowSda	;wreg free
  4548                           
  4549                           ;I2C_Soft.c: 66: i2cHighScl();
  4550  0004' EC00' F000'        	call	_i2cHighScl	;wreg free
  4551                           
  4552                           ;I2C_Soft.c: 67: i2cLowScl();
  4553  0008' EC00' F000'        	call	_i2cLowScl	;wreg free
  4554                           
  4555                           ;I2C_Soft.c: 68: i2cHighSda();
  4556  000C' EC00' F000'        	call	_i2cHighSda	;wreg free
  4557  0010' 0012               	return		;funcret
  4558  0012'                    __end_of_i2cAck:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           prodh	equ	0xFF4
  4565                           prodl	equ	0xFF3
  4566                           intcon	equ	0xFF2
  4567                           intcon2	equ	0xFF1
  4568                           postinc0	equ	0xFEE
  4569                           wreg	equ	0xFE8
  4570                           postdec1	equ	0xFE5
  4571                           fsr1l	equ	0xFE1
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           fsr2h	equ	0xFDA
  4576                           fsr2l	equ	0xFD9
  4577                           status	equ	0xFD8
  4578                           
  4579 ;; *************** function _I2C_ReStart *****************
  4580 ;; Defined at:
  4581 ;;		line 79 in file "I2C_Soft.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;		None
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;		None
  4586 ;; Return value:  Size  Location     Type
  4587 ;;		None               void
  4588 ;; Registers used:
  4589 ;;		wreg, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:        0 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    3
  4602 ;; This function calls:
  4603 ;;		_i2cHighScl
  4604 ;;		_i2cHighSda
  4605 ;;		_i2cLowScl
  4606 ;;		_i2cLowSda
  4607 ;; This function is called by:
  4608 ;;		_DS1621_Read_Temp
  4609 ;;		_DS3231_Read_Time
  4610 ;;		_I2C_Write_Address_Read_One_Byte
  4611 ;;		_I2C_Write_Cmd_Read_One_Byte
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text26
  4616  0000'                    __ptext26:
  4617                           	opt stack 0
  4618  0000'                    _I2C_ReStart:
  4619                           	opt stack 26
  4620                           
  4621                           ;I2C_Soft.c: 81: i2cLowScl();
  4622                           
  4623                           ;incstack = 0
  4624  0000' EC00' F000'        	call	_i2cLowScl	;wreg free
  4625                           
  4626                           ;I2C_Soft.c: 82: i2cHighSda();
  4627  0004' EC00' F000'        	call	_i2cHighSda	;wreg free
  4628                           
  4629                           ;I2C_Soft.c: 83: i2cHighScl();
  4630  0008' EC00' F000'        	call	_i2cHighScl	;wreg free
  4631                           
  4632                           ;I2C_Soft.c: 84: i2cLowSda();
  4633  000C' EC00' F000'        	call	_i2cLowSda	;wreg free
  4634                           
  4635                           ;I2C_Soft.c: 85: i2cLowScl();
  4636  0010' EC00' F000'        	call	_i2cLowScl	;wreg free
  4637  0014' 0012               	return		;funcret
  4638  0016'                    __end_of_I2C_ReStart:
  4639                           	opt stack 0
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           intcon	equ	0xFF2
  4647                           intcon2	equ	0xFF1
  4648                           postinc0	equ	0xFEE
  4649                           wreg	equ	0xFE8
  4650                           postdec1	equ	0xFE5
  4651                           fsr1l	equ	0xFE1
  4652                           indf2	equ	0xFDF
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           fsr2h	equ	0xFDA
  4656                           fsr2l	equ	0xFD9
  4657                           status	equ	0xFD8
  4658                           
  4659 ;; *************** function _i2cLowSda *****************
  4660 ;; Defined at:
  4661 ;;		line 102 in file "I2C_Soft.c"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;		None
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		None
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;Total ram usage:        0 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    2
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		_I2C_Write
  4686 ;;		_i2cAck
  4687 ;;		_I2C_Start
  4688 ;;		_I2C_ReStart
  4689 ;;		_I2C_Stop
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text27
  4694  0000'                    __ptext27:
  4695                           	opt stack 0
  4696  0000'                    _i2cLowSda:
  4697                           	opt stack 24
  4698                           
  4699                           ;I2C_Soft.c: 104: PORTDbits.RD6 = 0;
  4700                           
  4701                           ;incstack = 0
  4702  0000' 9C83               	bcf	3971,6,c	;volatile
  4703                           
  4704                           ;I2C_Soft.c: 105: TRISDbits.RD6 = 0;
  4705  0002' 9C95               	bcf	3989,6,c	;volatile
  4706                           
  4707                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4708  0004' D000               	nop2		;2 cycle nop
  4709  0006' D000               	nop2		;2 cycle nop
  4710  0008' 0012               	return		;funcret
  4711  000A'                    __end_of_i2cLowSda:
  4712                           	opt stack 0
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           intcon2	equ	0xFF1
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postdec1	equ	0xFE5
  4724                           fsr1l	equ	0xFE1
  4725                           indf2	equ	0xFDF
  4726                           postinc2	equ	0xFDE
  4727                           postdec2	equ	0xFDD
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8
  4731                           
  4732 ;; *************** function _i2cLowScl *****************
  4733 ;; Defined at:
  4734 ;;		line 115 in file "I2C_Soft.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;		None
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;		None
  4739 ;; Return value:  Size  Location     Type
  4740 ;;		None               void
  4741 ;; Registers used:
  4742 ;;		None
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4752 ;;Total ram usage:        0 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    2
  4755 ;; This function calls:
  4756 ;;		Nothing
  4757 ;; This function is called by:
  4758 ;;		_I2C_Read
  4759 ;;		_I2C_Write
  4760 ;;		_i2cNack
  4761 ;;		_i2cAck
  4762 ;;		_I2C_Start
  4763 ;;		_I2C_ReStart
  4764 ;;		_I2C_Stop
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text28
  4769  0000'                    __ptext28:
  4770                           	opt stack 0
  4771  0000'                    _i2cLowScl:
  4772                           	opt stack 24
  4773                           
  4774                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
  4775                           
  4776                           ;incstack = 0
  4777  0000' 9881               	bcf	3969,4,c	;volatile
  4778                           
  4779                           ;I2C_Soft.c: 118: TRISBbits.RB4 = 0;
  4780  0002' 9893               	bcf	3987,4,c	;volatile
  4781                           
  4782                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  4783  0004' D000               	nop2		;2 cycle nop
  4784  0006' 0012               	return		;funcret
  4785  0008'                    __end_of_i2cLowScl:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           intcon	equ	0xFF2
  4794                           intcon2	equ	0xFF1
  4795                           postinc0	equ	0xFEE
  4796                           wreg	equ	0xFE8
  4797                           postdec1	equ	0xFE5
  4798                           fsr1l	equ	0xFE1
  4799                           indf2	equ	0xFDF
  4800                           postinc2	equ	0xFDE
  4801                           postdec2	equ	0xFDD
  4802                           fsr2h	equ	0xFDA
  4803                           fsr2l	equ	0xFD9
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function _i2cHighSda *****************
  4807 ;; Defined at:
  4808 ;;		line 96 in file "I2C_Soft.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		None
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    2
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_I2C_Init
  4833 ;;		_I2C_Read
  4834 ;;		_I2C_Write
  4835 ;;		_i2cAck
  4836 ;;		_I2C_Start
  4837 ;;		_I2C_ReStart
  4838 ;;		_I2C_Stop
  4839 ;; This function uses a non-reentrant model
  4840 ;;
  4841                           
  4842                           	psect	text29
  4843  0000'                    __ptext29:
  4844                           	opt stack 0
  4845  0000'                    _i2cHighSda:
  4846                           	opt stack 26
  4847                           
  4848                           ;I2C_Soft.c: 98: TRISDbits.RD6 = 1;
  4849                           
  4850                           ;incstack = 0
  4851  0000' 8C95               	bsf	3989,6,c	;volatile
  4852                           
  4853                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  4854  0002' D000               	nop2		;2 cycle nop
  4855  0004' D000               	nop2		;2 cycle nop
  4856  0006' 0012               	return		;funcret
  4857  0008'                    __end_of_i2cHighSda:
  4858                           	opt stack 0
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodh	equ	0xFF4
  4864                           prodl	equ	0xFF3
  4865                           intcon	equ	0xFF2
  4866                           intcon2	equ	0xFF1
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           postdec1	equ	0xFE5
  4870                           fsr1l	equ	0xFE1
  4871                           indf2	equ	0xFDF
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function _i2cHighScl *****************
  4879 ;; Defined at:
  4880 ;;		line 109 in file "I2C_Soft.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;		None
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;		None
  4885 ;; Return value:  Size  Location     Type
  4886 ;;		None               void
  4887 ;; Registers used:
  4888 ;;		wreg
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;Total ram usage:        0 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:    2
  4901 ;; This function calls:
  4902 ;;		Nothing
  4903 ;; This function is called by:
  4904 ;;		_I2C_Init
  4905 ;;		_I2C_Read
  4906 ;;		_I2C_Write
  4907 ;;		_i2cNack
  4908 ;;		_i2cAck
  4909 ;;		_I2C_Start
  4910 ;;		_I2C_ReStart
  4911 ;;		_I2C_Stop
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text30
  4916  0000'                    __ptext30:
  4917                           	opt stack 0
  4918  0000'                    _i2cHighScl:
  4919                           	opt stack 26
  4920                           
  4921                           ;I2C_Soft.c: 111: TRISBbits.RB4 = 1;
  4922                           
  4923                           ;incstack = 0
  4924  0000' 8893               	bsf	3987,4,c	;volatile
  4925                           
  4926                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4927  0002' 0E06               	movlw	6
  4928  0004'                    u1437:
  4929  0004' 2EE8               	decfsz	wreg,f,c
  4930  0006' D7FE               	goto	u1437
  4931  0008' D000               	nop2		;nop
  4932  000A' 0012               	return		;funcret
  4933  000C'                    __end_of_i2cHighScl:
  4934                           	opt stack 0
  4935                           tblptru	equ	0xFF8
  4936                           tblptrh	equ	0xFF7
  4937                           tblptrl	equ	0xFF6
  4938                           tablat	equ	0xFF5
  4939                           prodh	equ	0xFF4
  4940                           prodl	equ	0xFF3
  4941                           intcon	equ	0xFF2
  4942                           intcon2	equ	0xFF1
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           postdec1	equ	0xFE5
  4946                           fsr1l	equ	0xFE1
  4947                           indf2	equ	0xFDF
  4948                           postinc2	equ	0xFDE
  4949                           postdec2	equ	0xFDD
  4950                           fsr2h	equ	0xFDA
  4951                           fsr2l	equ	0xFD9
  4952                           status	equ	0xFD8
  4953                           
  4954 ;; *************** function _Activate_Buzzer *****************
  4955 ;; Defined at:
  4956 ;;		line 219 in file "lab11.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;		None               void
  4963 ;; Registers used:
  4964 ;;		wreg, status,2
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;Total ram usage:        0 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    2
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text31
  4985  0000'                    __ptext31:
  4986                           	opt stack 0
  4987  0000'                    _Activate_Buzzer:
  4988                           	opt stack 28
  4989                           
  4990                           ;lab11.c: 221: PR2 = 0b11111001;
  4991                           
  4992                           ;incstack = 0
  4993  0000' 0EF9               	movlw	249
  4994  0002' 6ECB               	movwf	4043,c	;volatile
  4995                           
  4996                           ;lab11.c: 222: T2CON = 0b00000101;
  4997  0004' 0E05               	movlw	5
  4998  0006' 6ECA               	movwf	4042,c	;volatile
  4999                           
  5000                           ;lab11.c: 223: CCPR2L = 0b01001010;
  5001  0008' 0E4A               	movlw	74
  5002  000A' 6EBB               	movwf	4027,c	;volatile
  5003                           
  5004                           ;lab11.c: 224: CCP2CON = 0b00111100;
  5005  000C' 0E3C               	movlw	60
  5006  000E' 6EBA               	movwf	4026,c	;volatile
  5007  0010' 0012               	return		;funcret
  5008  0012'                    __end_of_Activate_Buzzer:
  5009                           	opt stack 0
  5010                           tblptru	equ	0xFF8
  5011                           tblptrh	equ	0xFF7
  5012                           tblptrl	equ	0xFF6
  5013                           tablat	equ	0xFF5
  5014                           prodh	equ	0xFF4
  5015                           prodl	equ	0xFF3
  5016                           intcon	equ	0xFF2
  5017                           intcon2	equ	0xFF1
  5018                           postinc0	equ	0xFEE
  5019                           wreg	equ	0xFE8
  5020                           postdec1	equ	0xFE5
  5021                           fsr1l	equ	0xFE1
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function _chkisr *****************
  5030 ;; Defined at:
  5031 ;;		line 14 in file "Interrupt.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;		None               void
  5038 ;; Registers used:
  5039 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;Total ram usage:       14 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    1
  5052 ;; This function calls:
  5053 ;;		_INT0_isr
  5054 ;;		_TIMER1_isr
  5055 ;; This function is called by:
  5056 ;;		Interrupt level 2
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	intcode
  5061  0000'                    __pintcode:
  5062                           	opt stack 0
  5063  0000'                    _chkisr:
  5064                           	opt stack 24
  5065                           
  5066                           ;incstack = 0
  5067  0000' CFFA F000'         	movff	pclath,??_chkisr
  5068  0004' CFFB F001'         	movff	pclatu,??_chkisr+1
  5069  0008' CFE9 F002'         	movff	fsr0l,??_chkisr+2
  5070  000C' ED00' F000'        	call	int_func,f	;refresh shadow registers
  5071                           pclatu	equ	0xFFB
  5072                           pclath	equ	0xFFA
  5073                           tblptru	equ	0xFF8
  5074                           tblptrh	equ	0xFF7
  5075                           tblptrl	equ	0xFF6
  5076                           tablat	equ	0xFF5
  5077                           prodh	equ	0xFF4
  5078                           prodl	equ	0xFF3
  5079                           intcon	equ	0xFF2
  5080                           intcon2	equ	0xFF1
  5081                           postinc0	equ	0xFEE
  5082                           fsr0l	equ	0xFE9
  5083                           wreg	equ	0xFE8
  5084                           postdec1	equ	0xFE5
  5085                           fsr1l	equ	0xFE1
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           postdec2	equ	0xFDD
  5089                           fsr2h	equ	0xFDA
  5090                           fsr2l	equ	0xFD9
  5091                           status	equ	0xFD8
  5092                           
  5093                           	psect	intcode_body
  5094  0000'                    __pintcode_body:
  5095                           	opt stack 24
  5096  0000'                    int_func:
  5097                           	opt stack 24
  5098  0000' 0006               	pop		; remove dummy address from shadow register refresh
  5099  0002' CFEA F003'         	movff	fsr0h,??_chkisr+3
  5100  0006' CFE1 F004'         	movff	fsr1l,??_chkisr+4
  5101  000A' CFE2 F005'         	movff	fsr1h,??_chkisr+5
  5102  000E' CFD9 F006'         	movff	fsr2l,??_chkisr+6
  5103  0012' CFDA F007'         	movff	fsr2h,??_chkisr+7
  5104  0016' CFF3 F008'         	movff	prodl,??_chkisr+8
  5105  001A' CFF4 F009'         	movff	prodh,??_chkisr+9
  5106  001E' CFF6 F00A'         	movff	tblptrl,??_chkisr+10
  5107  0022' CFF7 F00B'         	movff	tblptrh,??_chkisr+11
  5108  0026' CFF8 F00C'         	movff	tblptru,??_chkisr+12
  5109  002A' CFF5 F00D'         	movff	tablat,??_chkisr+13
  5110                           
  5111                           ;Interrupt.c: 16: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  5112  002E' A09E               	btfss	3998,0,c	;volatile
  5113  0030' D003               	goto	i2l1768
  5114  0032' EC00' F000'        	call	_TIMER1_isr	;wreg free
  5115  0036' D000               	goto	i2l1768
  5116  0038'                    i2l1768:
  5117                           
  5118                           ;Interrupt.c: 17: if (INTCONbits.INT0IF == 1) INT0_isr();
  5119  0038' A2F2               	btfss	intcon,1,c	;volatile
  5120  003A' D003               	goto	i2l370
  5121  003C' EC00' F000'        	call	_INT0_isr	;wreg free
  5122  0040' D000               	goto	i2l370
  5123  0042'                    i2l370:
  5124  0042' C00D' FFF5         	movff	??_chkisr+13,tablat
  5125  0046' C00C' FFF8         	movff	??_chkisr+12,tblptru
  5126  004A' C00B' FFF7         	movff	??_chkisr+11,tblptrh
  5127  004E' C00A' FFF6         	movff	??_chkisr+10,tblptrl
  5128  0052' C009' FFF4         	movff	??_chkisr+9,prodh
  5129  0056' C008' FFF3         	movff	??_chkisr+8,prodl
  5130  005A' C007' FFDA         	movff	??_chkisr+7,fsr2h
  5131  005E' C006' FFD9         	movff	??_chkisr+6,fsr2l
  5132  0062' C005' FFE2         	movff	??_chkisr+5,fsr1h
  5133  0066' C004' FFE1         	movff	??_chkisr+4,fsr1l
  5134  006A' C003' FFEA         	movff	??_chkisr+3,fsr0h
  5135  006E' C002' FFE9         	movff	??_chkisr+2,fsr0l
  5136  0072' C001' FFFB         	movff	??_chkisr+1,pclatu
  5137  0076' C000' FFFA         	movff	??_chkisr,pclath
  5138  007A' 0011               	retfie		f
  5139  007C'                    __end_of_chkisr:
  5140                           	opt stack 0
  5141                           pclatu	equ	0xFFB
  5142                           pclath	equ	0xFFA
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           intcon	equ	0xFF2
  5150                           intcon2	equ	0xFF1
  5151                           postinc0	equ	0xFEE
  5152                           fsr0h	equ	0xFEA
  5153                           fsr0l	equ	0xFE9
  5154                           wreg	equ	0xFE8
  5155                           postdec1	equ	0xFE5
  5156                           fsr1h	equ	0xFE2
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function _TIMER1_isr *****************
  5166 ;; Defined at:
  5167 ;;		line 20 in file "Interrupt.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg, status,2
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;Total ram usage:        0 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; This function calls:
  5188 ;;		Nothing
  5189 ;; This function is called by:
  5190 ;;		_chkisr
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           	psect	text33
  5195  0000'                    __ptext33:
  5196                           	opt stack 0
  5197  0000'                    _TIMER1_isr:
  5198                           	opt stack 24
  5199                           
  5200                           ;Interrupt.c: 22: Nec_state = 0;
  5201                           
  5202                           ;incstack = 0
  5203  0000' 0E00               	movlw	0
  5204  0002' 6E0D'              	movwf	_Nec_state,c
  5205                           
  5206                           ;Interrupt.c: 23: INTCON2bits.INTEDG0 = 0;
  5207  0004' 9CF1               	bcf	intcon2,6,c	;volatile
  5208                           
  5209                           ;Interrupt.c: 24: T1CONbits.TMR1ON = 0;
  5210  0006' 90CD               	bcf	4045,0,c	;volatile
  5211                           
  5212                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  5213  0008' 909E               	bcf	3998,0,c	;volatile
  5214  000A' 0012               	return		;funcret
  5215  000C'                    __end_of_TIMER1_isr:
  5216                           	opt stack 0
  5217                           pclatu	equ	0xFFB
  5218                           pclath	equ	0xFFA
  5219                           tblptru	equ	0xFF8
  5220                           tblptrh	equ	0xFF7
  5221                           tblptrl	equ	0xFF6
  5222                           tablat	equ	0xFF5
  5223                           prodh	equ	0xFF4
  5224                           prodl	equ	0xFF3
  5225                           intcon	equ	0xFF2
  5226                           intcon2	equ	0xFF1
  5227                           postinc0	equ	0xFEE
  5228                           fsr0h	equ	0xFEA
  5229                           fsr0l	equ	0xFE9
  5230                           wreg	equ	0xFE8
  5231                           postdec1	equ	0xFE5
  5232                           fsr1h	equ	0xFE2
  5233                           fsr1l	equ	0xFE1
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           pclatu	equ	0xFFB
  5241                           pclath	equ	0xFFA
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           intcon2	equ	0xFF1
  5250                           postinc0	equ	0xFEE
  5251                           fsr0h	equ	0xFEA
  5252                           fsr0l	equ	0xFE9
  5253                           wreg	equ	0xFE8
  5254                           postdec1	equ	0xFE5
  5255                           fsr1h	equ	0xFE2
  5256                           fsr1l	equ	0xFE1
  5257                           indf2	equ	0xFDF
  5258                           postinc2	equ	0xFDE
  5259                           postdec2	equ	0xFDD
  5260                           fsr2h	equ	0xFDA
  5261                           fsr2l	equ	0xFD9
  5262                           status	equ	0xFD8
  5263                           
  5264                           	psect	rparam
  5265  0000                     pclatu	equ	0xFFB
  5266                           pclath	equ	0xFFA
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           intcon2	equ	0xFF1
  5275                           postinc0	equ	0xFEE
  5276                           fsr0h	equ	0xFEA
  5277                           fsr0l	equ	0xFE9
  5278                           wreg	equ	0xFE8
  5279                           postdec1	equ	0xFE5
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8


Data Sizes:
    Strings     154
    Constant    72
    Data        211
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     73     113
    BANK0           128      0     115
    BANK1           256      0     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    drawtext$2	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_5(CODE[13]), STR_4(CODE[21]), STR_3(CODE[43]), STR_2(CODE[30]), 
		 -> STR_1(CODE[43]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    ___llmod->___lldiv
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    4912
                                             67 COMRAM     6     6      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                   _Wait_Half_Second
                            ___awdiv
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              40    26     14    2349
                                             36 COMRAM    31    17     14
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     265
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     265
                                             27 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                             14 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8      40
                                             14 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) _drawtext                                             8     0      8     150
                                             14 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                           8     0      8      40
                                             14 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     512
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0     822
                        _DS1621_Init
                           _I2C_Init
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      53
                                             14 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     496
                                             19 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     263
                                             16 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     188
                                             16 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     137
                                             16 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     295
                                             17 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     318
                                             17 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0      91
                                             14 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     136
                                             14 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _chkisr                                              14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (7) _TIMER1_isr                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _INT0_isr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_UART
       _OpenUSART
   _Wait_Half_Second
   ___awdiv
   _drawCircle
   _drawtext
   _fillCircle
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      7E       7       49.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      73       5       89.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     49      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     162      34        0.0%
DATA                 0      0     162       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 21 16:40:19 2022

                                _i 000018                 __size_of_I2C_Start 000000  
               __size_of_I2C_Write 000000                                 _D1 000000  
                               _D2 000015                                 _D3 00002A  
                     ___awdiv@sign 000013                ___wmul@multiplicand 000010  
                              l202 000012                                l242 000046  
                              l500 000046                                l245 00000E  
                              l325 00003A                                l501 000048  
                              l502 000052                                l503 000054  
                              l431 00010A                                l184 000004  
                              l505 00006E                                l169 000008  
                              l434 00016C                                l508 000026  
                              l701 000094                                l472 000440  
                              l496 00002C                                l939 000020  
                              l968 00007A                                l978 00005E  
                ?_Wait_Half_Second 000000                                _PR2 000FCB  
                              _day 000014                  _Deactivate_Buzzer 000000  
             __size_of_I2C_ReStart 000000                                _dow 000015  
                              _nbr 000006                                _txt 00000A  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 00000E                 ?_Deactivate_Buzzer 000000  
                             l2010 000012                               l2030 000042  
                             l2006 00000A                               l2016 000020  
                             l2024 000030                               l2018 000028  
                             l2050 000018                               l2202 00012E  
                             l2028 00003C                               l2300 000410  
                             l2220 0001B2                               l2070 000038  
                             l2230 0001F2                               l2222 0001B6  
                             l2206 000152                               l2302 000424  
                             l2240 000208                               l2216 00018C  
                             l2066 000022                               l2090 000028  
                             l2234 0001F8                               l2226 0001C2  
                             l2250 00023E                               l2170 000028  
                             l2068 000030                               l2244 000238  
                             l2236 0001FC                               l2252 000250  
                             l2180 000066                               l2164 00000A  
                             l2420 0000E8                               l2078 00006A  
                             l2094 00004E                               l2086 000012  
                             l2270 0002B2                               l2262 000290  
                             l2190 0000CE                               l2174 000032  
                             l2352 000016                               l2088 000020  
                             l2272 0002BA                               l2264 00029A  
                             l2176 000048                               l2168 00001A  
                             l2432 00011E                               l2424 0000FC  
                             l2408 0000C6                               l2290 00038C  
                             l2282 0002F2                               l2258 00026C  
                             l2194 0000D6                               l2364 00003E  
                             l2380 00007A                               l2276 0002D2  
                             l2188 0000C8                               l2428 000116  
                             l2366 000048                               l2358 000028  
                             l2278 0002DA                               l2286 000306  
                             l1920 000024                               l1912 000012  
                             l2384 00008A                               l2376 00006E  
                             l2368 000050                               l2288 000314  
                             l2296 0003F6                               l2298 000408  
                             l1932 00003E                               l1924 000030  
                             l1916 00001C                               l1874 000018  
                             l1876 00001E                               l1868 000006  
                             l1886 000030     I2C_Write_Cmd_Write_Data@Device 000012  
                             STR_1 000049                               STR_2 000074  
                             STR_3 000000                               STR_4 0000A8  
                             STR_5 0000CE                               STR_6 000092  
                             STR_7 0000DB                               STR_8 0000BD  
                             u1437 000004                               _RBPU 007F8F  
                             _TRMT 007D61                ??_Deactivate_Buzzer 00000E  
                             _main 000000                               _hour 000017  
                 __end_of_I2C_Init 00000A                   __end_of_I2C_Read 000048  
                             _year 000026                               fsr0h 000FEA  
                             _txt1 00002A                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                   __end_of_I2C_Stop 000012  
                             pclat 000FFA                               prodh 000FF4  
                             prodl 000FF3                               start 000000* 
      __size_of_I2C_Write_Cmd_Only 000000                    __end_of_Do_Init 00003C  
                  __end_of_i2cNack 00000A                       ___param_bank 000010  
                      ?_TIMER1_isr 000000          __end_of_Deactivate_Buzzer 000008  
                            ?_main 000000                    __end_of___awdiv 000096  
                  __end_of___lldiv 00008C                              _T0CON 000FD5  
                  ___awdiv@divisor 000010                              _T1CON 000FCD  
                  __end_of___llmod 000070                              _T2CON 000FCA  
                            i2l370 000042                    ___awdiv@counter 000012  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR1L 000FCE                              _SPBRG 000FAF  
                            _PORTA 000F80                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                       _i2cHighSda 000000                         _i2cHighScl 000000  
                  __end_of_dpowers 000029                              _color 000000  
                            _found 000016                    __end_of_isdigit 000022  
                            _month 00001A                              _putch 000000  
                            main@i 000046                  __end_of_I2C_Start 000012  
                __end_of_I2C_Write 00003E                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 000011  
               ??_DS1621_Read_Temp 000013                    __initialization 000000  
                     __end_of_main 00022C                             ??_main 000043  
                    __activetblptr 000002                  ?_DS3231_Read_Time 000000  
               ??_DS3231_Read_Time 000011                          I2C_Init@c 00000E  
                        I2C_Read@n 00000F                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 000013                   ___llmod@dividend 00001B  
                           _CCPR2L 000FBB                   ___awdiv@dividend 00000E  
               __size_of_i2cLowSda 000000                 __size_of_i2cLowScl 000000  
                           ?_putch 000000                             _INT0IE 007F94  
                           i2l1768 000038                          ??_Do_Init 000014  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000000  
                           _SPBRGH 000FB0                          ??_i2cNack 00000E  
                           _i2cAck 000000                         _TempSecond 00000E  
               __size_of_OpenUSART 000000           __size_of_Activate_Buzzer 000000  
                           ___wmul 000000                          ??___awdiv 000012  
                        ??___lldiv 000016                          ??___llmod 000023  
                           _chkisr 000000                             _array1 00003F  
                           _buffer 000000                             _nec_ok 000008  
                           clear_0 000006                             clear_1 000012  
                 ___awdiv@quotient 000014                             _minute 000019  
                           _second 00001C            DS3231_Setup_Time@Device 000010  
       __size_of_Deactivate_Buzzer 000000                             _printf 000000  
                     __pdataCOMRAM 000000                          ??_isdigit 00000E  
                        ?_I2C_Init 00000E                          ?_I2C_Read 000000  
                        ?_I2C_Stop 000000                       __mediumconst 000000* 
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 000020  
                      ?_i2cHighSda 000000                        ?_i2cHighScl 000000  
                           putch@c 00000E                         __accesstop 000000* 
          __end_of__initialization 00006A                          ?_INT0_isr 000000  
               _setup_alarm_minute 00001E                 _setup_alarm_second 00001F  
                    ___rparam_used 000001                     __pcstackCOMRAM 000000  
                     __pidataBANK0 000000                       __pidataBANK1 000000  
                __end_of_i2cLowSda 00000A                  __end_of_i2cLowScl 000008  
                    __end_of_putch 00000E                         ??_I2C_Init 000012  
                       ??_I2C_Read 00000E                       _alarm_minute 000011  
                     _alarm_second 000012                         ??_I2C_Stop 00000E  
                __end_of_OpenUSART 000070                            ??_putch 00000E  
                       __pbssBANK0 000000                   _setup_alarm_hour 00001D  
                    ??_DS1621_Init 000013                 __size_of_init_UART 000000  
        __size_of_Wait_Half_Second 000000                 main@previousSecond 000044  
                       _alarm_date 00000F                         ??_INT0_isr 000000  
                       _alarm_hour 000010                            ?_i2cAck 000000  
                   I2C_Read@inByte 000010                            ?___wmul 00000E  
              __size_of_i2cHighSda 000000                __size_of_i2cHighScl 000000  
                          ?_chkisr 000000   I2C_Write_Cmd_Write_Data@Data_Out 000011  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 000000  
                    ??_I2C_ReStart 00000E                         _fillCircle 000000* 
                       I2C_Write@n 00000F                            ?_printf 000024  
                ??_Activate_Buzzer 00000E                         _drawCircle 000000* 
                        ?_drawtext 00000E                  _DS3231_Setup_Time 000000  
                          _Do_Init 000000           _I2C_Write_Cmd_Write_Data 000000  
                       _drawtext$1 00000E                         _drawtext$2 00000F  
                       _drawtext$3 000011                         _drawtext$4 000013  
                       _drawtext$5 000015         __end_of_I2C_Write_Cmd_Only 00001A  
           DS1621_Read_Temp@Device 000015                            _i2cNack 000000  
               __end_of_TIMER1_isr 00000C                 ?_DS3231_Setup_Time 000000  
                        _I2C_Start 000000                          _I2C_Write 000000  
                  __size_of_i2cAck 000000                            __Hparam 000000  
                     _fillCircle$0 00000E                       _fillCircle$1 000010  
                     _fillCircle$2 000012                       _fillCircle$3 000014  
                          __Lparam 000000                __end_of_DS1621_Init 00001E  
              ??_DS3231_Setup_Time 000010                            ___awdiv 000000  
                          ___lldiv 000000                    __size_of___wmul 000000  
                          ___llmod 000000                    __size_of_chkisr 000000  
                     __psmallconst 000000                            __pcinit 000000  
                          __ramtop 000000*                           __ptext0 000000  
                          __ptext1 000000                            __ptext2 000000  
                          __ptext3 000000                            __ptext4 000000  
                          __ptext5 000000          __size_of_DS1621_Read_Temp 000000  
                          __ptext6 000000                            __ptext7 000000  
                          __ptext8 000000                            __ptext9 000000  
                  __size_of_printf 000000                  __end_of_init_UART 000014  
                        _T0CONbits 000FD5                  __end_of_hexpowers 000049  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 000011  
                          _dpowers 000001                            _isdigit 000000  
              __end_of_I2C_ReStart 000016                       _drawCircle$0 00000E  
                     _drawCircle$1 000010                       _drawCircle$2 000012  
                     _drawCircle$3 000014          __end_of_DS3231_Setup_Time 00005C  
                   __pintcode_body 000000               end_of_initialization 00006A  
                       ??_drawtext 000016                      __Lmediumconst 000000* 
        __size_of_DS3231_Read_Time 000000                            int_func 000000  
          DS3231_Read_Time@Address 000011                         ?_I2C_Start 000000  
                       ?_I2C_Write 000000                    ___lldiv@divisor 000012  
                  ___lldiv@counter 00001A                         _tempSecond 000000  
                        _RCSTAbits 000FAB                            printf@c 000042  
                          printf@f 000024                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE        I2C_Write_Cmd_Write_Data@Cmd 000010  
                      ?_fillCircle 00000E                          _PORTBbits 000F81  
                        _PORTDbits 000F83                   I2C_Write@outByte 00000E  
                       _setup_hour 000021                         _setup_year 000025  
                      ?_drawCircle 00000E                          _TRISBbits 000F93  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 00000E                       ??_i2cHighScl 00000E  
                __size_of_I2C_Init 000000                  __size_of_I2C_Read 000000  
                __size_of_I2C_Stop 000000                   _Wait_Half_Second 000000  
                      _DS1621_Init 000000                        printf@width 00003F  
                        _TXSTAbits 000FAC                     __end_of_i2cAck 000012  
         DS1621_Read_Temp@Data_Ret 000014                 __end_of_i2cHighSda 000008  
               __end_of_i2cHighScl 00000C                     __end_of___wmul 000028  
                    __pidataCOMRAM 000000                     __end_of_chkisr 00007C  
                      _I2C_ReStart 000000                          _Nec_code1 00000C  
                        _i2cLowSda 000000                          _i2cLowScl 000000  
                   __end_of_printf 000442                          _Nec_state 00000D  
              start_initialization 000000         __size_of_DS3231_Setup_Time 000000  
                        _OpenUSART 000000                    ___llmod@divisor 00001F  
                      ??_I2C_Start 00000E                    ___llmod@counter 000023  
                      ??_I2C_Write 00000E                           ??_i2cAck 00000E  
                  _Activate_Buzzer 000000                           ??___wmul 000012  
                         ??_chkisr 000000                        __pdataBANK0 000000  
                      __pdataBANK1 000000                           ??_printf 000032  
                 _DS1621_Read_Temp 000000                         ?_i2cLowSda 000000  
                       ?_i2cLowScl 000000                        __pbssCOMRAM 000000  
       ??_I2C_Write_Cmd_Write_Data 000012                       _isdigit$1523 00000F  
                         ?_Do_Init 000000                         ?_OpenUSART 00000E  
                 _DS3231_Read_Time 000000                           ?_i2cNack 000000  
                      I2C_Read@ack 00000E                          _bit_count 000013  
                        __pintcode 000000                           ?___awdiv 00000E  
                         ?___lldiv 00000E                           ?___llmod 00001B  
               _I2C_Write_Cmd_Only 000000                        __smallconst 000000* 
              ?_I2C_Write_Cmd_Only 000010                           ?_isdigit 000000  
                         _I2C_Init 000000                           _I2C_Read 000000  
                         _I2C_Stop 000000                          _init_UART 000000  
         I2C_Write_Cmd_Only@Device 000011                          _hexpowers 000029  
                   __size_of_putch 000000            __end_of_Activate_Buzzer 000012  
                   ___wmul@product 000012                           _INT0_isr 000000* 
             ??_I2C_Write_Cmd_Only 000011                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 000012                           _PIR1bits 000F9E  
                        _setup_day 000020                  DS1621_Init@Device 000013  
                     ??_fillCircle 000016           __end_of_Wait_Half_Second 00001A  
                ___wmul@multiplier 00000E                        ??_i2cLowSda 00000E  
                      ??_i2cLowScl 00000E                       ??_drawCircle 000016  
                       printf@flag 000041                         printf@prec 000037  
                        main@tempC 000048                          main@tempF 000045  
                       ?_init_UART 000000                        _INTCON2bits 000FF1  
                        copy_data0 00002C                          copy_data1 00004C  
                         _Nec_code 000000                        ??_OpenUSART 000010  
                     ?_DS1621_Init 000000                   __size_of_Do_Init 000000  
                  OpenUSART@config 000010                       _Time_Elapsed 000004  
                 __size_of_i2cNack 000000                           __Hrparam 000000* 
                         __Lrparam 000000*                  __size_of___awdiv 000000  
                 __size_of___lldiv 000000                   __size_of___llmod 000000  
                     ?_I2C_ReStart 000000                   __size_of_isdigit 000000  
                         __ptext10 000000                           __ptext11 000000  
                         __ptext20 000000                           __ptext12 000000  
                         __ptext21 000000                           __ptext13 000000  
                         __ptext30 000000                           __ptext22 000000  
                         __ptext14 000000                           __ptext31 000000  
                         __ptext23 000000                           __ptext15 000000  
                         __ptext24 000000                           __ptext16 000000  
                         __ptext33 000000                           __ptext25 000000  
                         __ptext17 000000                           __ptext26 000000  
                         __ptext18 000000                           __ptext27 000000  
                         __ptext19 000000                           __ptext28 000000  
                         __ptext29 000000                           _nec_code 00001B  
                         _drawtext 000000*          __end_of_DS1621_Read_Temp 00003C  
                 ?_Activate_Buzzer 000000                      __size_of_main 000000  
                        printf@idx 000036                          printf@val 00003B  
         __end_of_DS3231_Read_Time 000064                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 00000E                        ??_init_UART 000011  
                         isdigit@c 000010                           intlevel2 000000* 
                 ___lldiv@dividend 00000E                           printf@ap 000039  
                       _TIMER1_isr 000000                   ___lldiv@quotient 000016  
            I2C_Write_Cmd_Only@Cmd 000010                       _setup_minute 000022  
                     _setup_second 000024                        _setup_month 000023  
__size_of_I2C_Write_Cmd_Write_Data 000000               __size_of_DS1621_Init 000000  
        ?_I2C_Write_Cmd_Write_Data 000010  
