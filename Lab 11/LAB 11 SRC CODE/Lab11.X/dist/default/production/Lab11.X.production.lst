

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Apr 21 18:03:40 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  001B9C                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _tempSecond
    86  001B9C  FF                 	db	255
    87                           
    88                           ;initializer for _wrap
    89  001B9D  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  001612                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _D1
    96  001612  02                 	db	2
    97  001613  02                 	db	2
    98  001614  02                 	db	2
    99  001615  08                 	db	8
   100  001616  08                 	db	8
   101  001617  04                 	db	4
   102  001618  0A                 	db	10
   103  001619  00                 	db	0
   104  00161A  00                 	db	0
   105  00161B  00                 	db	0
   106  00161C  00                 	db	0
   107  00161D  00                 	db	0
   108  00161E  00                 	db	0
   109  00161F  00                 	db	0
   110  001620  00                 	db	0
   111  001621  00                 	db	0
   112  001622  00                 	db	0
   113  001623  00                 	db	0
   114  001624  00                 	db	0
   115  001625  00                 	db	0
   116  001626  00                 	db	0
   117                           
   118                           ;initializer for _D2
   119  001627  00                 	db	0
   120  001628  00                 	db	0
   121  001629  00                 	db	0
   122  00162A  00                 	db	0
   123  00162B  00                 	db	0
   124  00162C  00                 	db	0
   125  00162D  00                 	db	0
   126  00162E  28                 	db	40
   127  00162F  28                 	db	40
   128  001630  38                 	db	56
   129  001631  38                 	db	56
   130  001632  38                 	db	56
   131  001633  38                 	db	56
   132  001634  38                 	db	56
   133  001635  00                 	db	0
   134  001636  00                 	db	0
   135  001637  00                 	db	0
   136  001638  00                 	db	0
   137  001639  00                 	db	0
   138  00163A  00                 	db	0
   139  00163B  00                 	db	0
   140                           
   141                           ;initializer for _D3
   142  00163C  00                 	db	0
   143  00163D  00                 	db	0
   144  00163E  00                 	db	0
   145  00163F  00                 	db	0
   146  001640  00                 	db	0
   147  001641  00                 	db	0
   148  001642  00                 	db	0
   149  001643  00                 	db	0
   150  001644  00                 	db	0
   151  001645  00                 	db	0
   152  001646  00                 	db	0
   153  001647  00                 	db	0
   154  001648  00                 	db	0
   155  001649  00                 	db	0
   156  00164A  07                 	db	7
   157  00164B  07                 	db	7
   158  00164C  07                 	db	7
   159  00164D  07                 	db	7
   160  00164E  07                 	db	7
   161  00164F  07                 	db	7
   162  001650  07                 	db	7
   163                           
   164                           ;initializer for _array1
   165  001651  A2                 	db	162
   166  001652  00                 	db	0
   167  001653  00                 	db	0
   168  001654  00                 	db	0
   169  001655  00                 	db	0
   170  001656  00                 	db	0
   171  001657  00                 	db	0
   172  001658  00                 	db	0
   173  001659  00                 	db	0
   174  00165A  00                 	db	0
   175  00165B  00                 	db	0
   176  00165C  00                 	db	0
   177  00165D  00                 	db	0
   178  00165E  00                 	db	0
   179  00165F  00                 	db	0
   180  001660  00                 	db	0
   181  001661  00                 	db	0
   182  001662  00                 	db	0
   183  001663  00                 	db	0
   184  001664  00                 	db	0
   185  001665  00                 	db	0
   186                           
   187                           	psect	idataBANK1
   188  0012FE                     __pidataBANK1:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _color
   192  0012FE  F800               	dw	63488
   193  001300  00                 	db	0
   194  001301  00                 	db	0
   195  001302  00                 	db	0
   196  001303  00                 	db	0
   197  001304  00                 	db	0
   198  001305  00                 	db	0
   199  001306  00                 	db	0
   200  001307  00                 	db	0
   201  001308  00                 	db	0
   202  001309  00                 	db	0
   203  00130A  00                 	db	0
   204  00130B  00                 	db	0
   205  00130C  00                 	db	0
   206  00130D  00                 	db	0
   207  00130E  00                 	db	0
   208  00130F  00                 	db	0
   209  001310  00                 	db	0
   210  001311  00                 	db	0
   211  001312  00                 	db	0
   212  001313  00                 	db	0
   213  001314  00                 	db	0
   214  001315  00                 	db	0
   215  001316  00                 	db	0
   216  001317  00                 	db	0
   217  001318  00                 	db	0
   218  001319  00                 	db	0
   219  00131A  00                 	db	0
   220  00131B  00                 	db	0
   221  00131C  00                 	db	0
   222  00131D  00                 	db	0
   223  00131E  00                 	db	0
   224  00131F  00                 	db	0
   225  001320  00                 	db	0
   226  001321  00                 	db	0
   227  001322  00                 	db	0
   228  001323  00                 	db	0
   229  001324  00                 	db	0
   230  001325  00                 	db	0
   231  001326  00                 	db	0
   232  001327  00                 	db	0
   233                           
   234                           ;initializer for _txt1
   235  001328  43                 	db	67
   236  001329  48                 	db	72
   237  00132A  2D                 	db	45
   238  00132B  00                 	db	0
   239  00132C  00                 	db	0
   240  00132D  00                 	db	0
   241  00132E  00                 	db	0
   242  00132F  00                 	db	0
   243  001330  00                 	db	0
   244  001331  00                 	db	0
   245  001332  00                 	db	0
   246  001333  00                 	db	0
   247  001334  00                 	db	0
   248  001335  00                 	db	0
   249  001336  00                 	db	0
   250  001337  00                 	db	0
   251  001338  00                 	db	0
   252  001339  00                 	db	0
   253  00133A  00                 	db	0
   254  00133B  00                 	db	0
   255  00133C  00                 	db	0
   256  00133D  00                 	db	0
   257  00133E  00                 	db	0
   258  00133F  00                 	db	0
   259  001340  00                 	db	0
   260  001341  00                 	db	0
   261  001342  00                 	db	0
   262  001343  00                 	db	0
   263  001344  00                 	db	0
   264  001345  00                 	db	0
   265  001346  00                 	db	0
   266  001347  00                 	db	0
   267  001348  00                 	db	0
   268  001349  00                 	db	0
   269  00134A  00                 	db	0
   270  00134B  00                 	db	0
   271  00134C  00                 	db	0
   272  00134D  00                 	db	0
   273  00134E  00                 	db	0
   274  00134F  00                 	db	0
   275  001350  00                 	db	0
   276  001351  00                 	db	0
   277  001352  00                 	db	0
   278  001353  00                 	db	0
   279  001354  00                 	db	0
   280  001355  00                 	db	0
   281  001356  00                 	db	0
   282  001357  00                 	db	0
   283  001358  00                 	db	0
   284  001359  00                 	db	0
   285  00135A  00                 	db	0
   286  00135B  00                 	db	0
   287  00135C  00                 	db	0
   288  00135D  00                 	db	0
   289  00135E  00                 	db	0
   290  00135F  00                 	db	0
   291  001360  00                 	db	0
   292  001361  00                 	db	0
   293  001362  00                 	db	0
   294  001363  00                 	db	0
   295  001364  00                 	db	0
   296  001365  00                 	db	0
   297  001366  00                 	db	0
   298  001367  00                 	db	0
   299  001368  00                 	db	0
   300  001369  00                 	db	0
   301  00136A  00                 	db	0
   302  00136B  00                 	db	0
   303  00136C  00                 	db	0
   304  00136D  00                 	db	0
   305  00136E  00                 	db	0
   306  00136F  00                 	db	0
   307  001370  00                 	db	0
   308  001371  00                 	db	0
   309  001372  00                 	db	0
   310  001373  00                 	db	0
   311  001374  00                 	db	0
   312  001375  00                 	db	0
   313  001376  00                 	db	0
   314  001377  00                 	db	0
   315  001378  00                 	db	0
   316  001379  00                 	db	0
   317  00137A  00                 	db	0
   318  00137B  00                 	db	0
   319                           
   320                           	psect	mediumconst
   321  00FD40                     __pmediumconst:
   322                           	opt stack 0
   323  00FD40  00                 	db	0
   324  00FD41                     _font:
   325                           	opt stack 0
   326  00FD41  00                 	db	0
   327  00FD42  00                 	db	0
   328  00FD43  00                 	db	0
   329  00FD44  00                 	db	0
   330  00FD45  00                 	db	0
   331  00FD46  00                 	db	0
   332  00FD47  00                 	db	0
   333  00FD48  5F                 	db	95
   334  00FD49  00                 	db	0
   335  00FD4A  00                 	db	0
   336  00FD4B  00                 	db	0
   337  00FD4C  07                 	db	7
   338  00FD4D  00                 	db	0
   339  00FD4E  07                 	db	7
   340  00FD4F  00                 	db	0
   341  00FD50  14                 	db	20
   342  00FD51  7F                 	db	127
   343  00FD52  14                 	db	20
   344  00FD53  7F                 	db	127
   345  00FD54  14                 	db	20
   346  00FD55  24                 	db	36
   347  00FD56  2A                 	db	42
   348  00FD57  7F                 	db	127
   349  00FD58  2A                 	db	42
   350  00FD59  12                 	db	18
   351  00FD5A  23                 	db	35
   352  00FD5B  13                 	db	19
   353  00FD5C  08                 	db	8
   354  00FD5D  64                 	db	100
   355  00FD5E  62                 	db	98
   356  00FD5F  36                 	db	54
   357  00FD60  49                 	db	73
   358  00FD61  56                 	db	86
   359  00FD62  20                 	db	32
   360  00FD63  50                 	db	80
   361  00FD64  00                 	db	0
   362  00FD65  08                 	db	8
   363  00FD66  07                 	db	7
   364  00FD67  03                 	db	3
   365  00FD68  00                 	db	0
   366  00FD69  00                 	db	0
   367  00FD6A  1C                 	db	28
   368  00FD6B  22                 	db	34
   369  00FD6C  41                 	db	65
   370  00FD6D  00                 	db	0
   371  00FD6E  00                 	db	0
   372  00FD6F  41                 	db	65
   373  00FD70  22                 	db	34
   374  00FD71  1C                 	db	28
   375  00FD72  00                 	db	0
   376  00FD73  2A                 	db	42
   377  00FD74  1C                 	db	28
   378  00FD75  7F                 	db	127
   379  00FD76  1C                 	db	28
   380  00FD77  2A                 	db	42
   381  00FD78  08                 	db	8
   382  00FD79  08                 	db	8
   383  00FD7A  3E                 	db	62
   384  00FD7B  08                 	db	8
   385  00FD7C  08                 	db	8
   386  00FD7D  00                 	db	0
   387  00FD7E  80                 	db	128
   388  00FD7F  70                 	db	112
   389  00FD80  30                 	db	48
   390  00FD81  00                 	db	0
   391  00FD82  08                 	db	8
   392  00FD83  08                 	db	8
   393  00FD84  08                 	db	8
   394  00FD85  08                 	db	8
   395  00FD86  08                 	db	8
   396  00FD87  00                 	db	0
   397  00FD88  00                 	db	0
   398  00FD89  60                 	db	96
   399  00FD8A  60                 	db	96
   400  00FD8B  00                 	db	0
   401  00FD8C  20                 	db	32
   402  00FD8D  10                 	db	16
   403  00FD8E  08                 	db	8
   404  00FD8F  04                 	db	4
   405  00FD90  02                 	db	2
   406  00FD91  3E                 	db	62
   407  00FD92  51                 	db	81
   408  00FD93  49                 	db	73
   409  00FD94  45                 	db	69
   410  00FD95  3E                 	db	62
   411  00FD96  00                 	db	0
   412  00FD97  42                 	db	66
   413  00FD98  7F                 	db	127
   414  00FD99  40                 	db	64
   415  00FD9A  00                 	db	0
   416  00FD9B  72                 	db	114
   417  00FD9C  49                 	db	73
   418  00FD9D  49                 	db	73
   419  00FD9E  49                 	db	73
   420  00FD9F  46                 	db	70
   421  00FDA0  21                 	db	33
   422  00FDA1  41                 	db	65
   423  00FDA2  49                 	db	73
   424  00FDA3  4D                 	db	77
   425  00FDA4  33                 	db	51
   426  00FDA5  18                 	db	24
   427  00FDA6  14                 	db	20
   428  00FDA7  12                 	db	18
   429  00FDA8  7F                 	db	127
   430  00FDA9  10                 	db	16
   431  00FDAA  27                 	db	39
   432  00FDAB  45                 	db	69
   433  00FDAC  45                 	db	69
   434  00FDAD  45                 	db	69
   435  00FDAE  39                 	db	57
   436  00FDAF  3C                 	db	60
   437  00FDB0  4A                 	db	74
   438  00FDB1  49                 	db	73
   439  00FDB2  49                 	db	73
   440  00FDB3  31                 	db	49
   441  00FDB4  41                 	db	65
   442  00FDB5  21                 	db	33
   443  00FDB6  11                 	db	17
   444  00FDB7  09                 	db	9
   445  00FDB8  07                 	db	7
   446  00FDB9  36                 	db	54
   447  00FDBA  49                 	db	73
   448  00FDBB  49                 	db	73
   449  00FDBC  49                 	db	73
   450  00FDBD  36                 	db	54
   451  00FDBE  46                 	db	70
   452  00FDBF  49                 	db	73
   453  00FDC0  49                 	db	73
   454  00FDC1  29                 	db	41
   455  00FDC2  1E                 	db	30
   456  00FDC3  00                 	db	0
   457  00FDC4  00                 	db	0
   458  00FDC5  14                 	db	20
   459  00FDC6  00                 	db	0
   460  00FDC7  00                 	db	0
   461  00FDC8  00                 	db	0
   462  00FDC9  40                 	db	64
   463  00FDCA  34                 	db	52
   464  00FDCB  00                 	db	0
   465  00FDCC  00                 	db	0
   466  00FDCD  00                 	db	0
   467  00FDCE  08                 	db	8
   468  00FDCF  14                 	db	20
   469  00FDD0  22                 	db	34
   470  00FDD1  41                 	db	65
   471  00FDD2  14                 	db	20
   472  00FDD3  14                 	db	20
   473  00FDD4  14                 	db	20
   474  00FDD5  14                 	db	20
   475  00FDD6  14                 	db	20
   476  00FDD7  00                 	db	0
   477  00FDD8  41                 	db	65
   478  00FDD9  22                 	db	34
   479  00FDDA  14                 	db	20
   480  00FDDB  08                 	db	8
   481  00FDDC  02                 	db	2
   482  00FDDD  01                 	db	1
   483  00FDDE  59                 	db	89
   484  00FDDF  09                 	db	9
   485  00FDE0  06                 	db	6
   486  00FDE1  3E                 	db	62
   487  00FDE2  41                 	db	65
   488  00FDE3  5D                 	db	93
   489  00FDE4  59                 	db	89
   490  00FDE5  4E                 	db	78
   491  00FDE6  7C                 	db	124
   492  00FDE7  12                 	db	18
   493  00FDE8  11                 	db	17
   494  00FDE9  12                 	db	18
   495  00FDEA  7C                 	db	124
   496  00FDEB  7F                 	db	127
   497  00FDEC  49                 	db	73
   498  00FDED  49                 	db	73
   499  00FDEE  49                 	db	73
   500  00FDEF  36                 	db	54
   501  00FDF0  3E                 	db	62
   502  00FDF1  41                 	db	65
   503  00FDF2  41                 	db	65
   504  00FDF3  41                 	db	65
   505  00FDF4  22                 	db	34
   506  00FDF5  7F                 	db	127
   507  00FDF6  41                 	db	65
   508  00FDF7  41                 	db	65
   509  00FDF8  41                 	db	65
   510  00FDF9  3E                 	db	62
   511  00FDFA  7F                 	db	127
   512  00FDFB  49                 	db	73
   513  00FDFC  49                 	db	73
   514  00FDFD  49                 	db	73
   515  00FDFE  41                 	db	65
   516  00FDFF  7F                 	db	127
   517  00FE00  09                 	db	9
   518  00FE01  09                 	db	9
   519  00FE02  09                 	db	9
   520  00FE03  01                 	db	1
   521  00FE04  3E                 	db	62
   522  00FE05  41                 	db	65
   523  00FE06  41                 	db	65
   524  00FE07  51                 	db	81
   525  00FE08  73                 	db	115
   526  00FE09  7F                 	db	127
   527  00FE0A  08                 	db	8
   528  00FE0B  08                 	db	8
   529  00FE0C  08                 	db	8
   530  00FE0D  7F                 	db	127
   531  00FE0E  00                 	db	0
   532  00FE0F  41                 	db	65
   533  00FE10  7F                 	db	127
   534  00FE11  41                 	db	65
   535  00FE12  00                 	db	0
   536  00FE13  20                 	db	32
   537  00FE14  40                 	db	64
   538  00FE15  41                 	db	65
   539  00FE16  3F                 	db	63
   540  00FE17  01                 	db	1
   541  00FE18  7F                 	db	127
   542  00FE19  08                 	db	8
   543  00FE1A  14                 	db	20
   544  00FE1B  22                 	db	34
   545  00FE1C  41                 	db	65
   546  00FE1D  7F                 	db	127
   547  00FE1E  40                 	db	64
   548  00FE1F  40                 	db	64
   549  00FE20  40                 	db	64
   550  00FE21  40                 	db	64
   551  00FE22  7F                 	db	127
   552  00FE23  02                 	db	2
   553  00FE24  1C                 	db	28
   554  00FE25  02                 	db	2
   555  00FE26  7F                 	db	127
   556  00FE27  7F                 	db	127
   557  00FE28  04                 	db	4
   558  00FE29  08                 	db	8
   559  00FE2A  10                 	db	16
   560  00FE2B  7F                 	db	127
   561  00FE2C  3E                 	db	62
   562  00FE2D  41                 	db	65
   563  00FE2E  41                 	db	65
   564  00FE2F  41                 	db	65
   565  00FE30  3E                 	db	62
   566  00FE31  7F                 	db	127
   567  00FE32  09                 	db	9
   568  00FE33  09                 	db	9
   569  00FE34  09                 	db	9
   570  00FE35  06                 	db	6
   571  00FE36  3E                 	db	62
   572  00FE37  41                 	db	65
   573  00FE38  51                 	db	81
   574  00FE39  21                 	db	33
   575  00FE3A  5E                 	db	94
   576  00FE3B  7F                 	db	127
   577  00FE3C  09                 	db	9
   578  00FE3D  19                 	db	25
   579  00FE3E  29                 	db	41
   580  00FE3F  46                 	db	70
   581  00FE40                     __end_of_font:
   582                           	opt stack 0
   583  00FE40                     _font2:
   584                           	opt stack 0
   585  00FE40  26                 	db	38
   586  00FE41  49                 	db	73
   587  00FE42  49                 	db	73
   588  00FE43  49                 	db	73
   589  00FE44  32                 	db	50
   590  00FE45  03                 	db	3
   591  00FE46  01                 	db	1
   592  00FE47  7F                 	db	127
   593  00FE48  01                 	db	1
   594  00FE49  03                 	db	3
   595  00FE4A  3F                 	db	63
   596  00FE4B  40                 	db	64
   597  00FE4C  40                 	db	64
   598  00FE4D  40                 	db	64
   599  00FE4E  3F                 	db	63
   600  00FE4F  1F                 	db	31
   601  00FE50  20                 	db	32
   602  00FE51  40                 	db	64
   603  00FE52  20                 	db	32
   604  00FE53  1F                 	db	31
   605  00FE54  3F                 	db	63
   606  00FE55  40                 	db	64
   607  00FE56  38                 	db	56
   608  00FE57  40                 	db	64
   609  00FE58  3F                 	db	63
   610  00FE59  63                 	db	99
   611  00FE5A  14                 	db	20
   612  00FE5B  08                 	db	8
   613  00FE5C  14                 	db	20
   614  00FE5D  63                 	db	99
   615  00FE5E  03                 	db	3
   616  00FE5F  04                 	db	4
   617  00FE60  78                 	db	120
   618  00FE61  04                 	db	4
   619  00FE62  03                 	db	3
   620  00FE63  61                 	db	97
   621  00FE64  59                 	db	89
   622  00FE65  49                 	db	73
   623  00FE66  4D                 	db	77
   624  00FE67  43                 	db	67
   625  00FE68  00                 	db	0
   626  00FE69  7F                 	db	127
   627  00FE6A  41                 	db	65
   628  00FE6B  41                 	db	65
   629  00FE6C  41                 	db	65
   630  00FE6D  02                 	db	2
   631  00FE6E  04                 	db	4
   632  00FE6F  08                 	db	8
   633  00FE70  10                 	db	16
   634  00FE71  20                 	db	32
   635  00FE72  00                 	db	0
   636  00FE73  41                 	db	65
   637  00FE74  41                 	db	65
   638  00FE75  41                 	db	65
   639  00FE76  7F                 	db	127
   640  00FE77  04                 	db	4
   641  00FE78  02                 	db	2
   642  00FE79  01                 	db	1
   643  00FE7A  02                 	db	2
   644  00FE7B  04                 	db	4
   645  00FE7C  40                 	db	64
   646  00FE7D  40                 	db	64
   647  00FE7E  40                 	db	64
   648  00FE7F  40                 	db	64
   649  00FE80  40                 	db	64
   650  00FE81  00                 	db	0
   651  00FE82  03                 	db	3
   652  00FE83  07                 	db	7
   653  00FE84  08                 	db	8
   654  00FE85  00                 	db	0
   655  00FE86  20                 	db	32
   656  00FE87  54                 	db	84
   657  00FE88  54                 	db	84
   658  00FE89  78                 	db	120
   659  00FE8A  40                 	db	64
   660  00FE8B  7F                 	db	127
   661  00FE8C  28                 	db	40
   662  00FE8D  44                 	db	68
   663  00FE8E  44                 	db	68
   664  00FE8F  38                 	db	56
   665  00FE90  38                 	db	56
   666  00FE91  44                 	db	68
   667  00FE92  44                 	db	68
   668  00FE93  44                 	db	68
   669  00FE94  28                 	db	40
   670  00FE95  38                 	db	56
   671  00FE96  44                 	db	68
   672  00FE97  44                 	db	68
   673  00FE98  28                 	db	40
   674  00FE99  7F                 	db	127
   675  00FE9A  38                 	db	56
   676  00FE9B  54                 	db	84
   677  00FE9C  54                 	db	84
   678  00FE9D  54                 	db	84
   679  00FE9E  18                 	db	24
   680  00FE9F  00                 	db	0
   681  00FEA0  08                 	db	8
   682  00FEA1  7E                 	db	126
   683  00FEA2  09                 	db	9
   684  00FEA3  02                 	db	2
   685  00FEA4  18                 	db	24
   686  00FEA5  A4                 	db	164
   687  00FEA6  A4                 	db	164
   688  00FEA7  9C                 	db	156
   689  00FEA8  78                 	db	120
   690  00FEA9  7F                 	db	127
   691  00FEAA  08                 	db	8
   692  00FEAB  04                 	db	4
   693  00FEAC  04                 	db	4
   694  00FEAD  78                 	db	120
   695  00FEAE  00                 	db	0
   696  00FEAF  44                 	db	68
   697  00FEB0  7D                 	db	125
   698  00FEB1  40                 	db	64
   699  00FEB2  00                 	db	0
   700  00FEB3  20                 	db	32
   701  00FEB4  40                 	db	64
   702  00FEB5  40                 	db	64
   703  00FEB6  3D                 	db	61
   704  00FEB7  00                 	db	0
   705  00FEB8  7F                 	db	127
   706  00FEB9  10                 	db	16
   707  00FEBA  28                 	db	40
   708  00FEBB  44                 	db	68
   709  00FEBC  00                 	db	0
   710  00FEBD  00                 	db	0
   711  00FEBE  41                 	db	65
   712  00FEBF  7F                 	db	127
   713  00FEC0  40                 	db	64
   714  00FEC1  00                 	db	0
   715  00FEC2  7C                 	db	124
   716  00FEC3  04                 	db	4
   717  00FEC4  78                 	db	120
   718  00FEC5  04                 	db	4
   719  00FEC6  78                 	db	120
   720  00FEC7  7C                 	db	124
   721  00FEC8  08                 	db	8
   722  00FEC9  04                 	db	4
   723  00FECA  04                 	db	4
   724  00FECB  78                 	db	120
   725  00FECC  38                 	db	56
   726  00FECD  44                 	db	68
   727  00FECE  44                 	db	68
   728  00FECF  44                 	db	68
   729  00FED0  38                 	db	56
   730  00FED1  FC                 	db	252
   731  00FED2  18                 	db	24
   732  00FED3  24                 	db	36
   733  00FED4  24                 	db	36
   734  00FED5  18                 	db	24
   735  00FED6  18                 	db	24
   736  00FED7  24                 	db	36
   737  00FED8  24                 	db	36
   738  00FED9  18                 	db	24
   739  00FEDA  FC                 	db	252
   740  00FEDB  7C                 	db	124
   741  00FEDC  08                 	db	8
   742  00FEDD  04                 	db	4
   743  00FEDE  04                 	db	4
   744  00FEDF  08                 	db	8
   745  00FEE0  48                 	db	72
   746  00FEE1  54                 	db	84
   747  00FEE2  54                 	db	84
   748  00FEE3  54                 	db	84
   749  00FEE4  24                 	db	36
   750  00FEE5  04                 	db	4
   751  00FEE6  04                 	db	4
   752  00FEE7  3F                 	db	63
   753  00FEE8  44                 	db	68
   754  00FEE9  24                 	db	36
   755  00FEEA  3C                 	db	60
   756  00FEEB  40                 	db	64
   757  00FEEC  40                 	db	64
   758  00FEED  20                 	db	32
   759  00FEEE  7C                 	db	124
   760  00FEEF  1C                 	db	28
   761  00FEF0  20                 	db	32
   762  00FEF1  40                 	db	64
   763  00FEF2  20                 	db	32
   764  00FEF3  1C                 	db	28
   765  00FEF4  3C                 	db	60
   766  00FEF5  40                 	db	64
   767  00FEF6  30                 	db	48
   768  00FEF7  40                 	db	64
   769  00FEF8  3C                 	db	60
   770  00FEF9  44                 	db	68
   771  00FEFA  28                 	db	40
   772  00FEFB  10                 	db	16
   773  00FEFC  28                 	db	40
   774  00FEFD  44                 	db	68
   775  00FEFE  4C                 	db	76
   776  00FEFF  90                 	db	144
   777  00FF00  90                 	db	144
   778  00FF01  90                 	db	144
   779  00FF02  7C                 	db	124
   780  00FF03  44                 	db	68
   781  00FF04  64                 	db	100
   782  00FF05  54                 	db	84
   783  00FF06  4C                 	db	76
   784  00FF07  44                 	db	68
   785  00FF08  00                 	db	0
   786  00FF09  08                 	db	8
   787  00FF0A  36                 	db	54
   788  00FF0B  41                 	db	65
   789  00FF0C  00                 	db	0
   790  00FF0D  00                 	db	0
   791  00FF0E  00                 	db	0
   792  00FF0F  77                 	db	119
   793  00FF10  00                 	db	0
   794  00FF11  00                 	db	0
   795  00FF12  00                 	db	0
   796  00FF13  41                 	db	65
   797  00FF14  36                 	db	54
   798  00FF15  08                 	db	8
   799  00FF16  00                 	db	0
   800  00FF17  02                 	db	2
   801  00FF18  01                 	db	1
   802  00FF19  02                 	db	2
   803  00FF1A  04                 	db	4
   804  00FF1B  02                 	db	2
   805  00FF1C                     __end_of_font2:
   806                           	opt stack 0
   807  00FF1C                     _dpowers:
   808                           	opt stack 0
   809  00FF1C  0001               	dw	1
   810  00FF1E  0000               	dw	0
   811  00FF20  000A               	dw	10
   812  00FF22  0000               	dw	0
   813  00FF24  0064               	dw	100
   814  00FF26  0000               	dw	0
   815  00FF28  03E8               	dw	1000
   816  00FF2A  0000               	dw	0
   817  00FF2C  2710               	dw	10000
   818  00FF2E  0000               	dw	0
   819  00FF30  86A0               	dw	34464
   820  00FF32  0001               	dw	1
   821  00FF34  4240               	dw	16960
   822  00FF36  000F               	dw	15
   823  00FF38  9680               	dw	38528
   824  00FF3A  0098               	dw	152
   825  00FF3C  E100               	dw	57600
   826  00FF3E  05F5               	dw	1525
   827  00FF40  CA00               	dw	51712
   828  00FF42  3B9A               	dw	15258
   829  00FF44                     __end_of_dpowers:
   830                           	opt stack 0
   831  00FF44                     _hexpowers:
   832                           	opt stack 0
   833  00FF44  0001               	dw	1
   834  00FF46  0000               	dw	0
   835  00FF48  0010               	dw	16
   836  00FF4A  0000               	dw	0
   837  00FF4C  0100               	dw	256
   838  00FF4E  0000               	dw	0
   839  00FF50  1000               	dw	4096
   840  00FF52  0000               	dw	0
   841  00FF54  0000               	dw	0
   842  00FF56  0001               	dw	1
   843  00FF58  0000               	dw	0
   844  00FF5A  0010               	dw	16
   845  00FF5C  0000               	dw	0
   846  00FF5E  0100               	dw	256
   847  00FF60  0000               	dw	0
   848  00FF62  1000               	dw	4096
   849  00FF64                     __end_of_hexpowers:
   850                           	opt stack 0
   851  0000                     _ADCON1	set	4033
   852  0000                     _CCP2CON	set	4026
   853  0000                     _CCPR2L	set	4027
   854  0000                     _INTCON2bits	set	4081
   855  0000                     _INTCONbits	set	4082
   856  0000                     _OSCCON	set	4051
   857  0000                     _PIE1bits	set	3997
   858  0000                     _PIR1bits	set	3998
   859  0000                     _PIR2bits	set	4001
   860  0000                     _PORTA	set	3968
   861  0000                     _PORTBbits	set	3969
   862  0000                     _PORTCbits	set	3970
   863  0000                     _PORTD	set	3971
   864  0000                     _PORTDbits	set	3971
   865  0000                     _PORTE	set	3972
   866  0000                     _PR2	set	4043
   867  0000                     _RCSTA	set	4011
   868  0000                     _RCSTAbits	set	4011
   869  0000                     _SPBRG	set	4015
   870  0000                     _SPBRGH	set	4016
   871  0000                     _SSPBUF	set	4041
   872  0000                     _SSPCON1	set	4038
   873  0000                     _SSPSTAT	set	4039
   874  0000                     _SSPSTATbits	set	4039
   875  0000                     _T0CON	set	4053
   876  0000                     _T0CONbits	set	4053
   877  0000                     _T1CON	set	4045
   878  0000                     _T1CONbits	set	4045
   879  0000                     _T2CON	set	4042
   880  0000                     _T3CON	set	4017
   881  0000                     _T3CONbits	set	4017
   882  0000                     _TMR0H	set	4055
   883  0000                     _TMR0L	set	4054
   884  0000                     _TMR1H	set	4047
   885  0000                     _TMR1L	set	4046
   886  0000                     _TMR3H	set	4019
   887  0000                     _TMR3L	set	4018
   888  0000                     _TRISA	set	3986
   889  0000                     _TRISB	set	3987
   890  0000                     _TRISBbits	set	3987
   891  0000                     _TRISC	set	3988
   892  0000                     _TRISCbits	set	3988
   893  0000                     _TRISD	set	3989
   894  0000                     _TRISDbits	set	3989
   895  0000                     _TRISE	set	3990
   896  0000                     _TXREG	set	4013
   897  0000                     _TXSTA	set	4012
   898  0000                     _TXSTAbits	set	4012
   899  0000                     _INT0IE	set	32660
   900  0000                     _RBPU	set	32655
   901  0000                     _TRMT	set	32097
   902  00FF64                     STR_1:
   903  00FF64  20                 	db	32
   904  00FF65  54                 	db	84	;'T'
   905  00FF66  65                 	db	101	;'e'
   906  00FF67  6D                 	db	109	;'m'
   907  00FF68  70                 	db	112	;'p'
   908  00FF69  65                 	db	101	;'e'
   909  00FF6A  72                 	db	114	;'r'
   910  00FF6B  61                 	db	97	;'a'
   911  00FF6C  74                 	db	116	;'t'
   912  00FF6D  75                 	db	117	;'u'
   913  00FF6E  72                 	db	114	;'r'
   914  00FF6F  65                 	db	101	;'e'
   915  00FF70  20                 	db	32
   916  00FF71  3D                 	db	61	;'='
   917  00FF72  20                 	db	32
   918  00FF73  25                 	db	37
   919  00FF74  64                 	db	100	;'d'
   920  00FF75  20                 	db	32
   921  00FF76  64                 	db	100	;'d'
   922  00FF77  65                 	db	101	;'e'
   923  00FF78  67                 	db	103	;'g'
   924  00FF79  72                 	db	114	;'r'
   925  00FF7A  65                 	db	101	;'e'
   926  00FF7B  65                 	db	101	;'e'
   927  00FF7C  73                 	db	115	;'s'
   928  00FF7D  43                 	db	67	;'C'
   929  00FF7E  20                 	db	32
   930  00FF7F  3D                 	db	61	;'='
   931  00FF80  20                 	db	32
   932  00FF81  25                 	db	37
   933  00FF82  64                 	db	100	;'d'
   934  00FF83  20                 	db	32
   935  00FF84  64                 	db	100	;'d'
   936  00FF85  65                 	db	101	;'e'
   937  00FF86  67                 	db	103	;'g'
   938  00FF87  72                 	db	114	;'r'
   939  00FF88  65                 	db	101	;'e'
   940  00FF89  65                 	db	101	;'e'
   941  00FF8A  73                 	db	115	;'s'
   942  00FF8B  46                 	db	70	;'F'
   943  00FF8C  0D                 	db	13
   944  00FF8D  0A                 	db	10
   945  00FF8E  00                 	db	0
   946  00FF8F                     STR_2:
   947  00FF8F  25                 	db	37
   948  00FF90  30                 	db	48	;'0'
   949  00FF91  32                 	db	50	;'2'
   950  00FF92  78                 	db	120	;'x'
   951  00FF93  3A                 	db	58	;':'
   952  00FF94  25                 	db	37
   953  00FF95  30                 	db	48	;'0'
   954  00FF96  32                 	db	50	;'2'
   955  00FF97  78                 	db	120	;'x'
   956  00FF98  3A                 	db	58	;':'
   957  00FF99  25                 	db	37
   958  00FF9A  30                 	db	48	;'0'
   959  00FF9B  32                 	db	50	;'2'
   960  00FF9C  78                 	db	120	;'x'
   961  00FF9D  20                 	db	32
   962  00FF9E  25                 	db	37
   963  00FF9F  30                 	db	48	;'0'
   964  00FFA0  32                 	db	50	;'2'
   965  00FFA1  78                 	db	120	;'x'
   966  00FFA2  2F                 	db	47
   967  00FFA3  25                 	db	37
   968  00FFA4  30                 	db	48	;'0'
   969  00FFA5  32                 	db	50	;'2'
   970  00FFA6  78                 	db	120	;'x'
   971  00FFA7  2F                 	db	47
   972  00FFA8  25                 	db	37
   973  00FFA9  30                 	db	48	;'0'
   974  00FFAA  32                 	db	50	;'2'
   975  00FFAB  78                 	db	120	;'x'
   976  00FFAC  00                 	db	0
   977  00FFAD                     STR_6:
   978  00FFAD  45                 	db	69	;'E'
   979  00FFAE  43                 	db	67	;'C'
   980  00FFAF  45                 	db	69	;'E'
   981  00FFB0  33                 	db	51	;'3'
   982  00FFB1  33                 	db	51	;'3'
   983  00FFB2  30                 	db	48	;'0'
   984  00FFB3  31                 	db	49	;'1'
   985  00FFB4  4C                 	db	76	;'L'
   986  00FFB5  20                 	db	32
   987  00FFB6  53                 	db	83	;'S'
   988  00FFB7  70                 	db	112	;'p'
   989  00FFB8  72                 	db	114	;'r'
   990  00FFB9  69                 	db	105	;'i'
   991  00FFBA  6E                 	db	110	;'n'
   992  00FFBB  67                 	db	103	;'g'
   993  00FFBC  20                 	db	32
   994  00FFBD  32                 	db	50	;'2'
   995  00FFBE  32                 	db	50	;'2'
   996  00FFBF  2D                 	db	45
   997  00FFC0  53                 	db	83	;'S'
   998  00FFC1  33                 	db	51	;'3'
   999  00FFC2  00                 	db	0
  1000  00FFC3                     STR_4:
  1001  00FFC3  4E                 	db	78	;'N'
  1002  00FFC4  45                 	db	69	;'E'
  1003  00FFC5  43                 	db	67	;'C'
  1004  00FFC6  5F                 	db	95	;'_'
  1005  00FFC7  43                 	db	67	;'C'
  1006  00FFC8  6F                 	db	111	;'o'
  1007  00FFC9  64                 	db	100	;'d'
  1008  00FFCA  65                 	db	101	;'e'
  1009  00FFCB  20                 	db	32
  1010  00FFCC  3D                 	db	61	;'='
  1011  00FFCD  20                 	db	32
  1012  00FFCE  25                 	db	37
  1013  00FFCF  30                 	db	48	;'0'
  1014  00FFD0  38                 	db	56	;'8'
  1015  00FFD1  6C                 	db	108	;'l'
  1016  00FFD2  78                 	db	120	;'x'
  1017  00FFD3  20                 	db	32
  1018  00FFD4  25                 	db	37
  1019  00FFD5  78                 	db	120	;'x'
  1020  00FFD6  20                 	db	32
  1021  00FFD7  00                 	db	0
  1022  00FFD8                     STR_8:
  1023  00FFD8  30                 	db	48	;'0'
  1024  00FFD9  31                 	db	49	;'1'
  1025  00FFDA  32                 	db	50	;'2'
  1026  00FFDB  33                 	db	51	;'3'
  1027  00FFDC  34                 	db	52	;'4'
  1028  00FFDD  35                 	db	53	;'5'
  1029  00FFDE  36                 	db	54	;'6'
  1030  00FFDF  37                 	db	55	;'7'
  1031  00FFE0  38                 	db	56	;'8'
  1032  00FFE1  39                 	db	57	;'9'
  1033  00FFE2  61                 	db	97	;'a'
  1034  00FFE3  62                 	db	98	;'b'
  1035  00FFE4  63                 	db	99	;'c'
  1036  00FFE5  64                 	db	100	;'d'
  1037  00FFE6  65                 	db	101	;'e'
  1038  00FFE7  66                 	db	102	;'f'
  1039  00FFE8  00                 	db	0
  1040  00FFE9                     STR_5:
  1041  00FFE9  46                 	db	70	;'F'
  1042  00FFEA  6F                 	db	111	;'o'
  1043  00FFEB  75                 	db	117	;'u'
  1044  00FFEC  6E                 	db	110	;'n'
  1045  00FFED  64                 	db	100	;'d'
  1046  00FFEE  20                 	db	32
  1047  00FFEF  3D                 	db	61	;'='
  1048  00FFF0  20                 	db	32
  1049  00FFF1  25                 	db	37
  1050  00FFF2  64                 	db	100	;'d'
  1051  00FFF3  0D                 	db	13
  1052  00FFF4  0A                 	db	10
  1053  00FFF5  00                 	db	0
  1054  00FFF6                     STR_7:
  1055  00FFF6  4C                 	db	76	;'L'
  1056  00FFF7  41                 	db	65	;'A'
  1057  00FFF8  42                 	db	66	;'B'
  1058  00FFF9  20                 	db	32
  1059  00FFFA  31                 	db	49	;'1'
  1060  00FFFB  31                 	db	49	;'1'
  1061  00FFFC  20                 	db	32
  1062  00FFFD  00                 	db	0
  1063  0000                     
  1064                           ; #config settings
  1065  00FFFE  00                 	db	0	; dummy byte at the end
  1066  0000                     
  1067                           	psect	cinit
  1068  0013F8                     __pcinit:
  1069                           	opt stack 0
  1070  0013F8                     start_initialization:
  1071                           	opt stack 0
  1072  0013F8                     __initialization:
  1073                           	opt stack 0
  1074                           
  1075                           ; Clear objects allocated to BANK0 (31 bytes)
  1076  0013F8  EE00  F0D4         	lfsr	0,__pbssBANK0
  1077  0013FC  0E1F               	movlw	31
  1078  0013FE                     clear_0:
  1079  0013FE  6AEE               	clrf	postinc0,c
  1080  001400  06E8               	decf	wreg,f,c
  1081  001402  E1FD               	bnz	clear_0
  1082                           
  1083                           ; Clear objects allocated to COMRAM (42 bytes)
  1084  001404  EE00  F044         	lfsr	0,__pbssCOMRAM
  1085  001408  0E2A               	movlw	42
  1086  00140A                     clear_1:
  1087  00140A  6AEE               	clrf	postinc0,c
  1088  00140C  06E8               	decf	wreg,f,c
  1089  00140E  E1FD               	bnz	clear_1
  1090                           
  1091                           ; Initialize objects allocated to BANK1 (126 bytes)
  1092                           ; load TBLPTR registers with __pidataBANK1
  1093  001410  0EFE               	movlw	low __pidataBANK1
  1094  001412  6EF6               	movwf	tblptrl,c
  1095  001414  0E12               	movlw	high __pidataBANK1
  1096  001416  6EF7               	movwf	tblptrh,c
  1097  001418  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1098  00141A  6EF8               	movwf	tblptru,c
  1099  00141C  EE01  F000         	lfsr	0,__pdataBANK1
  1100  001420  EE10 F07E          	lfsr	1,126
  1101  001424                     copy_data0:
  1102  001424  0009               	tblrd		*+
  1103  001426  CFF5 FFEE          	movff	tablat,postinc0
  1104  00142A  50E5               	movf	postdec1,w,c
  1105  00142C  50E1               	movf	fsr1l,w,c
  1106  00142E  E1FA               	bnz	copy_data0
  1107                           
  1108                           ; Initialize objects allocated to BANK0 (84 bytes)
  1109                           ; load TBLPTR registers with __pidataBANK0
  1110  001430  0E12               	movlw	low __pidataBANK0
  1111  001432  6EF6               	movwf	tblptrl,c
  1112  001434  0E16               	movlw	high __pidataBANK0
  1113  001436  6EF7               	movwf	tblptrh,c
  1114  001438  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1115  00143A  6EF8               	movwf	tblptru,c
  1116  00143C  EE00  F080         	lfsr	0,__pdataBANK0
  1117  001440  EE10 F054          	lfsr	1,84
  1118  001444                     copy_data1:
  1119  001444  0009               	tblrd		*+
  1120  001446  CFF5 FFEE          	movff	tablat,postinc0
  1121  00144A  50E5               	movf	postdec1,w,c
  1122  00144C  50E1               	movf	fsr1l,w,c
  1123  00144E  E1FA               	bnz	copy_data1
  1124                           
  1125                           ; Initialize objects allocated to COMRAM (2 bytes)
  1126                           ; load TBLPTR registers with __pidataCOMRAM
  1127  001450  0E9C               	movlw	low __pidataCOMRAM
  1128  001452  6EF6               	movwf	tblptrl,c
  1129  001454  0E1B               	movlw	high __pidataCOMRAM
  1130  001456  6EF7               	movwf	tblptrh,c
  1131  001458  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1132  00145A  6EF8               	movwf	tblptru,c
  1133  00145C  0009               	tblrd		*+	;fetch initializer
  1134  00145E  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1135  001462  0009               	tblrd		*+	;fetch initializer
  1136  001464  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1137  001468                     end_of_initialization:
  1138                           	opt stack 0
  1139  001468                     __end_of__initialization:
  1140                           	opt stack 0
  1141  001468  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1142  00146A  6EF8               	movwf	tblptru,c
  1143  00146C  0100               	movlb	0
  1144  00146E  EF79  F002         	goto	_main	;jump to C main() function
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           postdec1	equ	0xFE5
  1152                           fsr1l	equ	0xFE1
  1153                           
  1154                           	psect	bssCOMRAM
  1155  000044                     __pbssCOMRAM:
  1156                           	opt stack 0
  1157  000044                     _Nec_code:
  1158                           	opt stack 0
  1159  000044                     	ds	4
  1160  000048                     _Time_Elapsed:
  1161                           	opt stack 0
  1162  000048                     	ds	2
  1163  00004A                     _nbr:
  1164                           	opt stack 0
  1165  00004A                     	ds	2
  1166  00004C                     _nec_ok:
  1167                           	opt stack 0
  1168  00004C                     	ds	2
  1169  00004E                     _txt:
  1170                           	opt stack 0
  1171  00004E                     	ds	2
  1172  000050                     _Nec_code1:
  1173                           	opt stack 0
  1174  000050                     	ds	1
  1175  000051                     _Nec_state:
  1176                           	opt stack 0
  1177  000051                     	ds	1
  1178  000052                     _TempSecond:
  1179                           	opt stack 0
  1180  000052                     	ds	1
  1181  000053                     __tft_type:
  1182                           	opt stack 0
  1183  000053                     	ds	1
  1184  000054                     _alarm_date:
  1185                           	opt stack 0
  1186  000054                     	ds	1
  1187  000055                     _alarm_hour:
  1188                           	opt stack 0
  1189  000055                     	ds	1
  1190  000056                     _alarm_minute:
  1191                           	opt stack 0
  1192  000056                     	ds	1
  1193  000057                     _alarm_second:
  1194                           	opt stack 0
  1195  000057                     	ds	1
  1196  000058                     _bit_count:
  1197                           	opt stack 0
  1198  000058                     	ds	1
  1199  000059                     _colstart:
  1200                           	opt stack 0
  1201  000059                     	ds	1
  1202  00005A                     _day:
  1203                           	opt stack 0
  1204  00005A                     	ds	1
  1205  00005B                     _dow:
  1206                           	opt stack 0
  1207  00005B                     	ds	1
  1208  00005C                     _found:
  1209                           	opt stack 0
  1210  00005C                     	ds	1
  1211  00005D                     _hour:
  1212                           	opt stack 0
  1213  00005D                     	ds	1
  1214  00005E                     _i:
  1215                           	opt stack 0
  1216  00005E                     	ds	1
  1217  00005F                     _minute:
  1218                           	opt stack 0
  1219  00005F                     	ds	1
  1220  000060                     _month:
  1221                           	opt stack 0
  1222  000060                     	ds	1
  1223  000061                     _nec_code:
  1224                           	opt stack 0
  1225  000061                     	ds	1
  1226  000062                     _rowstart:
  1227                           	opt stack 0
  1228  000062                     	ds	1
  1229  000063                     _second:
  1230                           	opt stack 0
  1231  000063                     	ds	1
  1232  000064                     _setup_alarm_hour:
  1233                           	opt stack 0
  1234  000064                     	ds	1
  1235  000065                     _setup_alarm_minute:
  1236                           	opt stack 0
  1237  000065                     	ds	1
  1238  000066                     _setup_alarm_second:
  1239                           	opt stack 0
  1240  000066                     	ds	1
  1241  000067                     _setup_day:
  1242                           	opt stack 0
  1243  000067                     	ds	1
  1244  000068                     _setup_hour:
  1245                           	opt stack 0
  1246  000068                     	ds	1
  1247  000069                     _setup_minute:
  1248                           	opt stack 0
  1249  000069                     	ds	1
  1250  00006A                     _setup_month:
  1251                           	opt stack 0
  1252  00006A                     	ds	1
  1253  00006B                     _setup_second:
  1254                           	opt stack 0
  1255  00006B                     	ds	1
  1256  00006C                     _setup_year:
  1257                           	opt stack 0
  1258  00006C                     	ds	1
  1259  00006D                     _year:
  1260                           	opt stack 0
  1261  00006D                     	ds	1
  1262                           tblptru	equ	0xFF8
  1263                           tblptrh	equ	0xFF7
  1264                           tblptrl	equ	0xFF6
  1265                           tablat	equ	0xFF5
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           postdec1	equ	0xFE5
  1269                           fsr1l	equ	0xFE1
  1270                           
  1271                           	psect	dataCOMRAM
  1272  00006E                     __pdataCOMRAM:
  1273                           	opt stack 0
  1274  00006E                     _tempSecond:
  1275                           	opt stack 0
  1276  00006E                     	ds	1
  1277  00006F                     _wrap:
  1278                           	opt stack 0
  1279  00006F                     	ds	1
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec1	equ	0xFE5
  1287                           fsr1l	equ	0xFE1
  1288                           
  1289                           	psect	bssBANK0
  1290  0000D4                     __pbssBANK0:
  1291                           	opt stack 0
  1292  0000D4                     _buffer:
  1293                           	opt stack 0
  1294  0000D4                     	ds	31
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           postdec1	equ	0xFE5
  1302                           fsr1l	equ	0xFE1
  1303                           
  1304                           	psect	dataBANK0
  1305  000080                     __pdataBANK0:
  1306                           	opt stack 0
  1307  000080                     _D1:
  1308                           	opt stack 0
  1309  000080                     	ds	21
  1310  000095                     _D2:
  1311                           	opt stack 0
  1312  000095                     	ds	21
  1313  0000AA                     _D3:
  1314                           	opt stack 0
  1315  0000AA                     	ds	21
  1316  0000BF                     _array1:
  1317                           	opt stack 0
  1318  0000BF                     	ds	21
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postdec1	equ	0xFE5
  1326                           fsr1l	equ	0xFE1
  1327                           
  1328                           	psect	dataBANK1
  1329  000100                     __pdataBANK1:
  1330                           	opt stack 0
  1331  000100                     _color:
  1332                           	opt stack 0
  1333  000100                     	ds	42
  1334  00012A                     _txt1:
  1335                           	opt stack 0
  1336  00012A                     	ds	84
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1l	equ	0xFE1
  1345                           
  1346                           	psect	cstackBANK1
  1347  00017E                     __pcstackBANK1:
  1348                           	opt stack 0
  1349  00017E                     main@previousSecond:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x0
  1353  00017E                     	ds	1
  1354  00017F                     main@tempF:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x1
  1358  00017F                     	ds	1
  1359  000180                     main@i:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x2
  1363  000180                     	ds	2
  1364  000182                     main@tempC:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x4
  1368  000182                     	ds	1
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postdec1	equ	0xFE5
  1376                           fsr1l	equ	0xFE1
  1377                           
  1378                           	psect	cstackBANK0
  1379  0000F3                     __pcstackBANK0:
  1380                           	opt stack 0
  1381  0000F3                     drawtext@x:
  1382                           	opt stack 0
  1383  0000F3                     printf@idx:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x0
  1387  0000F3                     	ds	1
  1388  0000F4                     drawtext@textsize:
  1389                           	opt stack 0
  1390  0000F4                     printf@prec:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x1
  1394  0000F4                     	ds	2
  1395  0000F6                     drawtext@i:
  1396                           	opt stack 0
  1397  0000F6                     printf@ap:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x3
  1401  0000F6                     	ds	2
  1402  0000F8                     drawtext@cursor_y:
  1403                           	opt stack 0
  1404  0000F8                     printf@val:
  1405                           	opt stack 0
  1406                           
  1407                           ; 4 bytes @ 0x5
  1408  0000F8                     	ds	1
  1409  0000F9                     drawtext@cursor_x:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x6
  1413  0000F9                     	ds	3
  1414  0000FC                     printf@width:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x9
  1418  0000FC                     	ds	2
  1419  0000FE                     printf@flag:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0xB
  1423  0000FE                     	ds	1
  1424  0000FF                     printf@c:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0xC
  1428  0000FF                     	ds	1
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec1	equ	0xFE5
  1436                           fsr1l	equ	0xFE1
  1437                           
  1438                           	psect	cstackCOMRAM
  1439  000001                     __pcstackCOMRAM:
  1440                           	opt stack 0
  1441  000001                     ??_INT0_isr:
  1442  000001                     
  1443                           ; 1 bytes @ 0x0
  1444  000001                     	ds	2
  1445  000003                     ??_chkisr:
  1446                           
  1447                           ; 0 bytes @ 0x2
  1448  000003                     	ds	14
  1449  000011                     ??_isdigit:
  1450  000011                     ?_strlen:
  1451                           	opt stack 0
  1452  000011                     ?___wmul:
  1453                           	opt stack 0
  1454  000011                     ?___awdiv:
  1455                           	opt stack 0
  1456  000011                     ?___lldiv:
  1457                           	opt stack 0
  1458  000011                     spiwrite@x:
  1459                           	opt stack 0
  1460  000011                     I2C_Read@ack:
  1461                           	opt stack 0
  1462  000011                     I2C_Write@outByte:
  1463                           	opt stack 0
  1464  000011                     putch@c:
  1465                           	opt stack 0
  1466  000011                     OpenUSART@spbrg:
  1467                           	opt stack 0
  1468  000011                     ___wmul@multiplier:
  1469                           	opt stack 0
  1470  000011                     ___awdiv@dividend:
  1471                           	opt stack 0
  1472  000011                     strcpy@to:
  1473                           	opt stack 0
  1474  000011                     strlen@s:
  1475                           	opt stack 0
  1476  000011                     I2C_Init@c:
  1477                           	opt stack 0
  1478  000011                     ___lldiv@dividend:
  1479                           	opt stack 0
  1480                           
  1481                           ; 4 bytes @ 0x10
  1482  000011                     	ds	1
  1483  000012                     spiwrite@spidata:
  1484                           	opt stack 0
  1485  000012                     I2C_Read@n:
  1486                           	opt stack 0
  1487  000012                     I2C_Write@n:
  1488                           	opt stack 0
  1489  000012                     _isdigit$2032:
  1490                           	opt stack 0
  1491                           
  1492                           ; 1 bytes @ 0x11
  1493  000012                     	ds	1
  1494  000013                     ??_strlen:
  1495  000013                     write_command@cmd_:
  1496                           	opt stack 0
  1497  000013                     write_data@data_:
  1498                           	opt stack 0
  1499  000013                     I2C_Read@inByte:
  1500                           	opt stack 0
  1501  000013                     I2C_Write_Cmd_Only@Cmd:
  1502                           	opt stack 0
  1503  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1504                           	opt stack 0
  1505  000013                     DS3231_Setup_Time@Device:
  1506                           	opt stack 0
  1507  000013                     OpenUSART@config:
  1508                           	opt stack 0
  1509  000013                     isdigit@c:
  1510                           	opt stack 0
  1511  000013                     ___wmul@multiplicand:
  1512                           	opt stack 0
  1513  000013                     ___awdiv@divisor:
  1514                           	opt stack 0
  1515  000013                     strcpy@from:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x12
  1519  000013                     	ds	1
  1520  000014                     ?_DS1621_Read_Temp:
  1521                           	opt stack 0
  1522  000014                     setAddrWindow@y0:
  1523                           	opt stack 0
  1524  000014                     I2C_Write_Cmd_Only@Device:
  1525                           	opt stack 0
  1526  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1527                           	opt stack 0
  1528  000014                     DS3231_Read_Time@Address:
  1529                           	opt stack 0
  1530  000014                     DS3231_Setup_Time@Address:
  1531                           	opt stack 0
  1532                           
  1533                           ; 1 bytes @ 0x13
  1534  000014                     	ds	1
  1535  000015                     setAddrWindow@x1:
  1536                           	opt stack 0
  1537  000015                     I2C_Write_Cmd_Write_Data@Device:
  1538                           	opt stack 0
  1539  000015                     DS3231_Read_Time@Device:
  1540                           	opt stack 0
  1541  000015                     ___awdiv@counter:
  1542                           	opt stack 0
  1543  000015                     ___wmul@product:
  1544                           	opt stack 0
  1545  000015                     strcpy@cp:
  1546                           	opt stack 0
  1547  000015                     strlen@cp:
  1548                           	opt stack 0
  1549  000015                     ___lldiv@divisor:
  1550                           	opt stack 0
  1551                           
  1552                           ; 4 bytes @ 0x14
  1553  000015                     	ds	1
  1554  000016                     setAddrWindow@y1:
  1555                           	opt stack 0
  1556  000016                     DS1621_Init@Device:
  1557                           	opt stack 0
  1558  000016                     DS1621_Read_Temp@Cmd:
  1559                           	opt stack 0
  1560  000016                     ___awdiv@sign:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x15
  1564  000016                     	ds	1
  1565  000017                     setAddrWindow@x0:
  1566                           	opt stack 0
  1567  000017                     DS1621_Read_Temp@Data_Ret:
  1568                           	opt stack 0
  1569  000017                     delay_ms@ms:
  1570                           	opt stack 0
  1571  000017                     ___awdiv@quotient:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x16
  1575  000017                     	ds	1
  1576  000018                     drawPixel@y:
  1577                           	opt stack 0
  1578  000018                     drawFastVLine@y:
  1579                           	opt stack 0
  1580  000018                     fillRectangle@y:
  1581                           	opt stack 0
  1582  000018                     DS1621_Read_Temp@Device:
  1583                           	opt stack 0
  1584                           
  1585                           ; 1 bytes @ 0x17
  1586  000018                     	ds	1
  1587  000019                     ??_delay_ms:
  1588  000019                     drawFastVLine@h:
  1589                           	opt stack 0
  1590  000019                     fillRectangle@w:
  1591                           	opt stack 0
  1592  000019                     drawPixel@color:
  1593                           	opt stack 0
  1594  000019                     ___lldiv@quotient:
  1595                           	opt stack 0
  1596                           
  1597                           ; 4 bytes @ 0x18
  1598  000019                     	ds	1
  1599  00001A                     fillRectangle@h:
  1600                           	opt stack 0
  1601  00001A                     drawFastVLine@color:
  1602                           	opt stack 0
  1603                           
  1604                           ; 2 bytes @ 0x19
  1605  00001A                     	ds	1
  1606  00001B                     drawPixel@x:
  1607                           	opt stack 0
  1608  00001B                     delay_ms@count:
  1609                           	opt stack 0
  1610  00001B                     fillRectangle@color:
  1611                           	opt stack 0
  1612                           
  1613                           ; 2 bytes @ 0x1A
  1614  00001B                     	ds	1
  1615  00001C                     ??_drawFastVLine:
  1616  00001C                     drawCircle@x0:
  1617                           	opt stack 0
  1618                           
  1619                           ; 2 bytes @ 0x1B
  1620  00001C                     	ds	1
  1621  00001D                     ??_fillRectangle:
  1622  00001D                     ___lldiv@counter:
  1623                           	opt stack 0
  1624                           
  1625                           ; 1 bytes @ 0x1C
  1626  00001D                     	ds	1
  1627  00001E                     ?___llmod:
  1628                           	opt stack 0
  1629  00001E                     drawCircle@y0:
  1630                           	opt stack 0
  1631  00001E                     ___llmod@dividend:
  1632                           	opt stack 0
  1633                           
  1634                           ; 4 bytes @ 0x1D
  1635  00001E                     	ds	2
  1636  000020                     drawFastVLine@hi:
  1637                           	opt stack 0
  1638  000020                     drawCircle@r:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x1F
  1642  000020                     	ds	1
  1643  000021                     drawFastVLine@lo:
  1644                           	opt stack 0
  1645  000021                     fillRectangle@hi:
  1646                           	opt stack 0
  1647                           
  1648                           ; 1 bytes @ 0x20
  1649  000021                     	ds	1
  1650  000022                     drawFastVLine@x:
  1651                           	opt stack 0
  1652  000022                     fillRectangle@lo:
  1653                           	opt stack 0
  1654  000022                     drawCircle@color:
  1655                           	opt stack 0
  1656  000022                     ___llmod@divisor:
  1657                           	opt stack 0
  1658                           
  1659                           ; 4 bytes @ 0x21
  1660  000022                     	ds	1
  1661  000023                     fillRect@y:
  1662                           	opt stack 0
  1663  000023                     fillRectangle@x:
  1664                           	opt stack 0
  1665  000023                     fillCircleHelper@x0:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0x22
  1669  000023                     	ds	1
  1670  000024                     ??_drawCircle:
  1671  000024                     fillRect@w:
  1672                           	opt stack 0
  1673  000024                     fillScreen@color:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x23
  1677  000024                     	ds	1
  1678  000025                     fillRect@h:
  1679                           	opt stack 0
  1680  000025                     fillCircleHelper@y0:
  1681                           	opt stack 0
  1682                           
  1683                           ; 2 bytes @ 0x24
  1684  000025                     	ds	1
  1685  000026                     ___llmod@counter:
  1686                           	opt stack 0
  1687  000026                     fillRect@color:
  1688                           	opt stack 0
  1689  000026                     drawCircle@ddF_x:
  1690                           	opt stack 0
  1691                           
  1692                           ; 2 bytes @ 0x25
  1693  000026                     	ds	1
  1694  000027                     ?_printf:
  1695                           	opt stack 0
  1696  000027                     fillCircleHelper@r:
  1697                           	opt stack 0
  1698  000027                     printf@f:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x26
  1702  000027                     	ds	1
  1703  000028                     ??_fillRect:
  1704  000028                     drawCircle@ddF_y:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x27
  1708  000028                     	ds	1
  1709  000029                     fillCircleHelper@cornername:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x28
  1713  000029                     	ds	1
  1714  00002A                     drawCircle@f:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0x29
  1718  00002A                     	ds	1
  1719  00002B                     fillRect@x:
  1720                           	opt stack 0
  1721  00002B                     fillCircleHelper@delta:
  1722                           	opt stack 0
  1723                           
  1724                           ; 2 bytes @ 0x2A
  1725  00002B                     	ds	1
  1726  00002C                     fillRect@i:
  1727                           	opt stack 0
  1728  00002C                     drawCircle@x:
  1729                           	opt stack 0
  1730                           
  1731                           ; 2 bytes @ 0x2B
  1732  00002C                     	ds	1
  1733  00002D                     fillCircleHelper@color:
  1734                           	opt stack 0
  1735                           
  1736                           ; 2 bytes @ 0x2C
  1737  00002D                     	ds	1
  1738  00002E                     drawChar@y:
  1739                           	opt stack 0
  1740  00002E                     drawCircle@y:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x2D
  1744  00002E                     	ds	1
  1745  00002F                     ??_fillCircleHelper:
  1746  00002F                     drawChar@c:
  1747                           	opt stack 0
  1748                           
  1749                           ; 1 bytes @ 0x2E
  1750  00002F                     	ds	1
  1751  000030                     drawChar@color:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x2F
  1755  000030                     	ds	1
  1756  000031                     fillCircleHelper@ddF_x:
  1757                           	opt stack 0
  1758                           
  1759                           ; 2 bytes @ 0x30
  1760  000031                     	ds	1
  1761  000032                     drawChar@bg:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x31
  1765  000032                     	ds	1
  1766  000033                     fillCircleHelper@ddF_y:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x32
  1770  000033                     	ds	1
  1771  000034                     drawChar@size:
  1772                           	opt stack 0
  1773                           
  1774                           ; 1 bytes @ 0x33
  1775  000034                     	ds	1
  1776  000035                     ??_printf:
  1777  000035                     drawChar@line:
  1778                           	opt stack 0
  1779  000035                     fillCircleHelper@f:
  1780                           	opt stack 0
  1781                           
  1782                           ; 2 bytes @ 0x34
  1783  000035                     	ds	1
  1784  000036                     drawChar@x:
  1785                           	opt stack 0
  1786                           
  1787                           ; 1 bytes @ 0x35
  1788  000036                     	ds	1
  1789  000037                     drawChar@j:
  1790                           	opt stack 0
  1791  000037                     fillCircleHelper@x:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x36
  1795  000037                     	ds	1
  1796  000038                     drawChar@i:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x37
  1800  000038                     	ds	1
  1801  000039                     drawtext@y:
  1802                           	opt stack 0
  1803  000039                     fillCircleHelper@y:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x38
  1807  000039                     	ds	1
  1808  00003A                     drawtext@_text:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x39
  1812  00003A                     	ds	1
  1813  00003B                     fillCircle@x0:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x3A
  1817  00003B                     	ds	1
  1818  00003C                     drawtext@color:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x3B
  1822  00003C                     	ds	1
  1823  00003D                     fillCircle@y0:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x3C
  1827  00003D                     	ds	1
  1828  00003E                     drawtext@bg:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x3D
  1832  00003E                     	ds	1
  1833  00003F                     fillCircle@r:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x3E
  1837  00003F                     	ds	1
  1838  000040                     drawtext@size:
  1839                           	opt stack 0
  1840                           
  1841                           ; 1 bytes @ 0x3F
  1842  000040                     	ds	1
  1843  000041                     ??_drawtext:
  1844  000041                     fillCircle@color:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x40
  1848  000041                     	ds	2
  1849  000043                     
  1850                           ; 0 bytes @ 0x42
  1851  000043                     	ds	1
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1l	equ	0xFE1
  1860                           
  1861 ;;
  1862 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1863 ;;
  1864 ;; *************** function _main *****************
  1865 ;; Defined at:
  1866 ;;		line 107 in file "Lab11.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;		None
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  i               2    2[BANK1 ] int 
  1871 ;;  tempC           1    4[BANK1 ] unsigned char 
  1872 ;;  tempF           1    1[BANK1 ] unsigned char 
  1873 ;;  previousSeco    1    0[BANK1 ] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;		None               void
  1876 ;; Registers used:
  1877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Totals:         1       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;Total ram usage:        6 bytes
  1888 ;; Hardware stack levels required when called:   11
  1889 ;; This function calls:
  1890 ;;		_Activate_Buzzer
  1891 ;;		_DS1621_Read_Temp
  1892 ;;		_DS3231_Read_Time
  1893 ;;		_DS3231_Setup_Time
  1894 ;;		_Deactivate_Buzzer
  1895 ;;		_Do_Init
  1896 ;;		_Initialize_Screen
  1897 ;;		_Wait_Half_Second
  1898 ;;		___awdiv
  1899 ;;		_drawCircle
  1900 ;;		_drawtext
  1901 ;;		_fillCircle
  1902 ;;		_printf
  1903 ;; This function is called by:
  1904 ;;		Startup code after reset
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text0
  1909  0004F2                     __ptext0:
  1910                           	opt stack 0
  1911  0004F2                     _main:
  1912                           	opt stack 20
  1913                           
  1914                           ;Lab11.c: 109: Do_Init();
  1915                           
  1916                           ;incstack = 0
  1917  0004F2  EC52  F00C         	call	_Do_Init	;wreg free
  1918                           
  1919                           ;Lab11.c: 110: Initialize_Screen();
  1920  0004F6  ECAE  F008         	call	_Initialize_Screen	;wreg free
  1921                           
  1922                           ;Lab11.c: 111: DS3231_Setup_Time();
  1923  0004FA  ECDB  F00A         	call	_DS3231_Setup_Time	;wreg free
  1924  0004FE  D000               	goto	l5396
  1925  000500                     l5396:
  1926                           
  1927                           ;Lab11.c: 113: {
  1928                           ;Lab11.c: 114: char tempC = DS1621_Read_Temp();
  1929  000500  EC70  F00C         	call	_DS1621_Read_Temp	;wreg free
  1930  000504  5014               	movf	?_DS1621_Read_Temp,w,c
  1931  000506  0101               	movlb	1	; () banked
  1932  000508  6F82               	movwf	main@tempC& (0+255),b
  1933                           
  1934                           ; BSR set to: 1
  1935                           ;Lab11.c: 115: char tempF = (tempC * 9 / 5) + 32;
  1936  00050A  0101               	movlb	1	; () banked
  1937  00050C  5182               	movf	main@tempC& (0+255),w,b
  1938  00050E  0D09               	mullw	9
  1939  000510  CFF3 F011          	movff	prodl,___awdiv@dividend
  1940  000514  CFF4 F012          	movff	prodh,___awdiv@dividend+1
  1941  000518  0E00               	movlw	0
  1942  00051A  6E14               	movwf	___awdiv@divisor+1,c
  1943  00051C  0E05               	movlw	5
  1944  00051E  6E13               	movwf	___awdiv@divisor,c
  1945  000520  EC63  F008         	call	___awdiv	;wreg free
  1946  000524  5011               	movf	?___awdiv,w,c
  1947  000526  0F20               	addlw	32
  1948  000528  0101               	movlb	1	; () banked
  1949  00052A  6F7F               	movwf	main@tempF& (0+255),b
  1950                           
  1951                           ; BSR set to: 1
  1952                           ;Lab11.c: 116: printf(" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1953  00052C  0E64               	movlw	low STR_1
  1954  00052E  6E27               	movwf	printf@f,c
  1955  000530  0EFF               	movlw	high STR_1
  1956  000532  6E28               	movwf	printf@f+1,c
  1957  000534  C182  F029         	movff	main@tempC,?_printf+2
  1958  000538  6A2A               	clrf	?_printf+3,c
  1959  00053A  C17F  F02B         	movff	main@tempF,?_printf+4
  1960  00053E  6A2C               	clrf	?_printf+5,c
  1961  000540  EC0E  F000         	call	_printf	;wreg free
  1962                           
  1963                           ;Lab11.c: 117: char previousSecond = second;
  1964  000544  C063  F17E         	movff	_second,main@previousSecond
  1965                           
  1966                           ;Lab11.c: 118: DS3231_Read_Time();
  1967  000548  ECA9  F00A         	call	_DS3231_Read_Time	;wreg free
  1968                           
  1969                           ;Lab11.c: 119: if(second != previousSecond){
  1970  00054C  0101               	movlb	1	; () banked
  1971  00054E  517E               	movf	main@previousSecond& (0+255),w,b
  1972  000550  1863               	xorwf	_second,w,c
  1973  000552  B4D8               	btfsc	status,2,c
  1974  000554  D03B               	goto	l5416
  1975                           
  1976                           ; BSR set to: 1
  1977                           ;Lab11.c: 120: printf("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year)
      +                          ;
  1978  000556  0E8F               	movlw	low STR_2
  1979  000558  6E27               	movwf	printf@f,c
  1980  00055A  0EFF               	movlw	high STR_2
  1981  00055C  6E28               	movwf	printf@f+1,c
  1982  00055E  C05D  F029         	movff	_hour,?_printf+2
  1983  000562  6A2A               	clrf	?_printf+3,c
  1984  000564  C05F  F02B         	movff	_minute,?_printf+4
  1985  000568  6A2C               	clrf	?_printf+5,c
  1986  00056A  C063  F02D         	movff	_second,?_printf+6
  1987  00056E  6A2E               	clrf	?_printf+7,c
  1988  000570  C060  F02F         	movff	_month,?_printf+8
  1989  000574  6A30               	clrf	?_printf+9,c
  1990  000576  C05A  F031         	movff	_day,?_printf+10
  1991  00057A  6A32               	clrf	?_printf+11,c
  1992  00057C  C06D  F033         	movff	_year,?_printf+12
  1993  000580  6A34               	clrf	?_printf+13,c
  1994  000582  EC0E  F000         	call	_printf	;wreg free
  1995                           
  1996                           ;Lab11.c: 121: tempC = DS1621_Read_Temp();
  1997  000586  EC70  F00C         	call	_DS1621_Read_Temp	;wreg free
  1998  00058A  5014               	movf	?_DS1621_Read_Temp,w,c
  1999  00058C  0101               	movlb	1	; () banked
  2000  00058E  6F82               	movwf	main@tempC& (0+255),b
  2001                           
  2002                           ; BSR set to: 1
  2003                           ;Lab11.c: 122: tempF = (tempC * 9 / 5) + 32;
  2004  000590  0101               	movlb	1	; () banked
  2005  000592  5182               	movf	main@tempC& (0+255),w,b
  2006  000594  0D09               	mullw	9
  2007  000596  CFF3 F011          	movff	prodl,___awdiv@dividend
  2008  00059A  CFF4 F012          	movff	prodh,___awdiv@dividend+1
  2009  00059E  0E00               	movlw	0
  2010  0005A0  6E14               	movwf	___awdiv@divisor+1,c
  2011  0005A2  0E05               	movlw	5
  2012  0005A4  6E13               	movwf	___awdiv@divisor,c
  2013  0005A6  EC63  F008         	call	___awdiv	;wreg free
  2014  0005AA  5011               	movf	?___awdiv,w,c
  2015  0005AC  0F20               	addlw	32
  2016  0005AE  0101               	movlb	1	; () banked
  2017  0005B0  6F7F               	movwf	main@tempF& (0+255),b
  2018                           
  2019                           ; BSR set to: 1
  2020                           ;Lab11.c: 123: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  2021  0005B2  0E64               	movlw	low STR_1
  2022  0005B4  6E27               	movwf	printf@f,c
  2023  0005B6  0EFF               	movlw	high STR_1
  2024  0005B8  6E28               	movwf	printf@f+1,c
  2025  0005BA  C182  F029         	movff	main@tempC,?_printf+2
  2026  0005BE  6A2A               	clrf	?_printf+3,c
  2027  0005C0  C17F  F02B         	movff	main@tempF,?_printf+4
  2028  0005C4  6A2C               	clrf	?_printf+5,c
  2029  0005C6  EC0E  F000         	call	_printf	;wreg free
  2030  0005CA  D000               	goto	l5416
  2031  0005CC                     l5416:
  2032                           
  2033                           ;Lab11.c: 124: }
  2034                           ;Lab11.c: 125: if(nec_ok == 1)
  2035  0005CC  044C               	decf	_nec_ok,w,c
  2036  0005CE  104D               	iorwf	_nec_ok+1,w,c
  2037  0005D0  A4D8               	btfss	status,2,c
  2038  0005D2  D796               	goto	l5396
  2039                           
  2040                           ;Lab11.c: 126: {
  2041                           ;Lab11.c: 127: nec_ok = 0;
  2042  0005D4  0E00               	movlw	0
  2043  0005D6  6E4D               	movwf	_nec_ok+1,c
  2044  0005D8  0E00               	movlw	0
  2045  0005DA  6E4C               	movwf	_nec_ok,c
  2046                           
  2047                           ;Lab11.c: 128: INTCONbits.INT0IE = 1;
  2048  0005DC  88F2               	bsf	intcon,4,c	;volatile
  2049                           
  2050                           ;Lab11.c: 129: INTCON2bits.INTEDG0 = 0;
  2051  0005DE  9CF1               	bcf	intcon2,6,c	;volatile
  2052                           
  2053                           ;Lab11.c: 131: found = 0xff;
  2054  0005E0  685C               	setf	_found,c
  2055                           
  2056                           ;Lab11.c: 135: for(int i = 0;i < 21;i++)
  2057  0005E2  0E00               	movlw	0
  2058  0005E4  0101               	movlb	1	; () banked
  2059  0005E6  6F81               	movwf	(main@i+1)& (0+255),b
  2060  0005E8  0E00               	movlw	0
  2061  0005EA  6F80               	movwf	main@i& (0+255),b
  2062  0005EC                     l5426:
  2063                           
  2064                           ; BSR set to: 1
  2065  0005EC  0101               	movlb	1	; () banked
  2066  0005EE  BF81               	btfsc	(main@i+1)& (0+255),7,b
  2067  0005F0  D00A               	goto	l5430
  2068  0005F2  0101               	movlb	1	; () banked
  2069  0005F4  5181               	movf	(main@i+1)& (0+255),w,b
  2070  0005F6  E11B               	bnz	l5438
  2071  0005F8  0E15               	movlw	21
  2072  0005FA  0101               	movlb	1	; () banked
  2073  0005FC  5D80               	subwf	main@i& (0+255),w,b
  2074  0005FE  B0D8               	btfsc	status,0,c
  2075  000600  D016               	goto	l5438
  2076  000602  D001               	goto	l5430
  2077                           
  2078                           ; BSR set to: 1
  2079  000604  D014               	goto	l5438
  2080  000606                     l5430:
  2081                           
  2082                           ; BSR set to: 1
  2083                           ;Lab11.c: 136: {
  2084                           ;Lab11.c: 137: if(array1[i] == Nec_code1)
  2085  000606  0EBF               	movlw	low _array1
  2086  000608  0101               	movlb	1	; () banked
  2087  00060A  2580               	addwf	main@i& (0+255),w,b
  2088  00060C  6ED9               	movwf	fsr2l,c
  2089  00060E  0E00               	movlw	high _array1
  2090  000610  0101               	movlb	1	; () banked
  2091  000612  2181               	addwfc	(main@i+1)& (0+255),w,b
  2092  000614  6EDA               	movwf	fsr2h,c
  2093  000616  5050               	movf	_Nec_code1,w,c
  2094  000618  18DE               	xorwf	postinc2,w,c
  2095  00061A  A4D8               	btfss	status,2,c
  2096  00061C  D003               	goto	l5434
  2097                           
  2098                           ; BSR set to: 1
  2099                           ;Lab11.c: 138: {
  2100                           ;Lab11.c: 139: found = i;
  2101  00061E  C180  F05C         	movff	main@i,_found
  2102                           
  2103                           ;Lab11.c: 140: break;
  2104  000622  D005               	goto	l5438
  2105  000624                     l5434:
  2106                           
  2107                           ; BSR set to: 1
  2108  000624  0101               	movlb	1	; () banked
  2109  000626  4B80               	infsnz	main@i& (0+255),f,b
  2110  000628  2B81               	incf	(main@i+1)& (0+255),f,b
  2111  00062A  D7E0               	goto	l5426
  2112                           
  2113                           ; BSR set to: 1
  2114  00062C  D000               	goto	l5438
  2115  00062E                     l5438:
  2116                           
  2117                           ; BSR set to: 1
  2118                           ;Lab11.c: 141: }
  2119                           ;Lab11.c: 142: }
  2120                           ;Lab11.c: 144: printf ("NEC_Code = %08lx %x ", Nec_code, Nec_code1);
  2121  00062E  0EC3               	movlw	low STR_4
  2122  000630  6E27               	movwf	printf@f,c
  2123  000632  0EFF               	movlw	high STR_4
  2124  000634  6E28               	movwf	printf@f+1,c
  2125  000636  C044  F029         	movff	_Nec_code,?_printf+2
  2126  00063A  C045  F02A         	movff	_Nec_code+1,?_printf+3
  2127  00063E  C046  F02B         	movff	_Nec_code+2,?_printf+4
  2128  000642  C047  F02C         	movff	_Nec_code+3,?_printf+5
  2129  000646  C050  F02D         	movff	_Nec_code1,?_printf+6
  2130  00064A  6A2E               	clrf	?_printf+7,c
  2131  00064C  EC0E  F000         	call	_printf	;wreg free
  2132                           
  2133                           ;Lab11.c: 145: printf ("Found = %d\r\n", found);
  2134  000650  0EE9               	movlw	low STR_5
  2135  000652  6E27               	movwf	printf@f,c
  2136  000654  0EFF               	movlw	high STR_5
  2137  000656  6E28               	movwf	printf@f+1,c
  2138  000658  C05C  F029         	movff	_found,?_printf+2
  2139  00065C  6A2A               	clrf	?_printf+3,c
  2140  00065E  EC0E  F000         	call	_printf	;wreg free
  2141                           
  2142                           ;Lab11.c: 146: if (found != 0xff)
  2143  000662  285C               	incf	_found,w,c
  2144  000664  B4D8               	btfsc	status,2,c
  2145  000666  D068               	goto	l5460
  2146                           
  2147                           ;Lab11.c: 147: {
  2148                           ;Lab11.c: 148: PORTA = D1[found];
  2149  000668  505C               	movf	_found,w,c
  2150  00066A  0D01               	mullw	1
  2151  00066C  0E80               	movlw	low _D1
  2152  00066E  24F3               	addwf	prodl,w,c
  2153  000670  6ED9               	movwf	fsr2l,c
  2154  000672  0E00               	movlw	high _D1
  2155  000674  20F4               	addwfc	prodh,w,c
  2156  000676  6EDA               	movwf	fsr2h,c
  2157  000678  50DF               	movf	indf2,w,c
  2158  00067A  6E80               	movwf	3968,c	;volatile
  2159                           
  2160                           ;Lab11.c: 149: PORTD = D2[found];
  2161  00067C  505C               	movf	_found,w,c
  2162  00067E  0D01               	mullw	1
  2163  000680  0E95               	movlw	low _D2
  2164  000682  24F3               	addwf	prodl,w,c
  2165  000684  6ED9               	movwf	fsr2l,c
  2166  000686  0E00               	movlw	high _D2
  2167  000688  20F4               	addwfc	prodh,w,c
  2168  00068A  6EDA               	movwf	fsr2h,c
  2169  00068C  50DF               	movf	indf2,w,c
  2170  00068E  6E83               	movwf	3971,c	;volatile
  2171                           
  2172                           ;Lab11.c: 150: PORTE = D3[found];
  2173  000690  505C               	movf	_found,w,c
  2174  000692  0D01               	mullw	1
  2175  000694  0EAA               	movlw	low _D3
  2176  000696  24F3               	addwf	prodl,w,c
  2177  000698  6ED9               	movwf	fsr2l,c
  2178  00069A  0E00               	movlw	high _D3
  2179  00069C  20F4               	addwfc	prodh,w,c
  2180  00069E  6EDA               	movwf	fsr2h,c
  2181  0006A0  50DF               	movf	indf2,w,c
  2182  0006A2  6E84               	movwf	3972,c	;volatile
  2183                           
  2184                           ;Lab11.c: 152: fillCircle(60, 80, 20, color[found]);
  2185  0006A4  0E00               	movlw	0
  2186  0006A6  6E3C               	movwf	fillCircle@x0+1,c
  2187  0006A8  0E3C               	movlw	60
  2188  0006AA  6E3B               	movwf	fillCircle@x0,c
  2189  0006AC  0E00               	movlw	0
  2190  0006AE  6E3E               	movwf	fillCircle@y0+1,c
  2191  0006B0  0E50               	movlw	80
  2192  0006B2  6E3D               	movwf	fillCircle@y0,c
  2193  0006B4  0E00               	movlw	0
  2194  0006B6  6E40               	movwf	fillCircle@r+1,c
  2195  0006B8  0E14               	movlw	20
  2196  0006BA  6E3F               	movwf	fillCircle@r,c
  2197  0006BC  505C               	movf	_found,w,c
  2198  0006BE  0D02               	mullw	2
  2199  0006C0  0E00               	movlw	low _color
  2200  0006C2  24F3               	addwf	prodl,w,c
  2201  0006C4  6ED9               	movwf	fsr2l,c
  2202  0006C6  0E01               	movlw	high _color
  2203  0006C8  20F4               	addwfc	prodh,w,c
  2204  0006CA  6EDA               	movwf	fsr2h,c
  2205  0006CC  CFDE F041          	movff	postinc2,fillCircle@color
  2206  0006D0  CFDD F042          	movff	postdec2,fillCircle@color+1
  2207  0006D4  EC33  F00B         	call	_fillCircle	;wreg free
  2208                           
  2209                           ;Lab11.c: 153: drawCircle(60, 80, 20, 0xFFFF);
  2210  0006D8  0E00               	movlw	0
  2211  0006DA  6E1D               	movwf	drawCircle@x0+1,c
  2212  0006DC  0E3C               	movlw	60
  2213  0006DE  6E1C               	movwf	drawCircle@x0,c
  2214  0006E0  0E00               	movlw	0
  2215  0006E2  6E1F               	movwf	drawCircle@y0+1,c
  2216  0006E4  0E50               	movlw	80
  2217  0006E6  6E1E               	movwf	drawCircle@y0,c
  2218  0006E8  0E00               	movlw	0
  2219  0006EA  6E21               	movwf	drawCircle@r+1,c
  2220  0006EC  0E14               	movlw	20
  2221  0006EE  6E20               	movwf	drawCircle@r,c
  2222  0006F0  0EFF               	movlw	255
  2223  0006F2  6E23               	movwf	drawCircle@color+1,c
  2224  0006F4  6822               	setf	drawCircle@color,c
  2225  0006F6  ECA5  F003         	call	_drawCircle	;wreg free
  2226                           
  2227                           ;Lab11.c: 154: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2228  0006FA  0E4D               	movlw	77
  2229  0006FC  6E39               	movwf	drawtext@y,c
  2230  0006FE  505C               	movf	_found,w,c
  2231  000700  0D04               	mullw	4
  2232  000702  0E2A               	movlw	low _txt1
  2233  000704  24F3               	addwf	prodl,w,c
  2234  000706  6E3A               	movwf	drawtext@_text,c
  2235  000708  0E01               	movlw	high _txt1
  2236  00070A  20F4               	addwfc	prodh,w,c
  2237  00070C  6E3B               	movwf	drawtext@_text+1,c
  2238  00070E  0EFF               	movlw	255
  2239  000710  6E3D               	movwf	drawtext@color+1,c
  2240  000712  683C               	setf	drawtext@color,c
  2241  000714  0E00               	movlw	0
  2242  000716  6E3F               	movwf	drawtext@bg+1,c
  2243  000718  0E00               	movlw	0
  2244  00071A  6E3E               	movwf	drawtext@bg,c
  2245  00071C  0E01               	movlw	1
  2246  00071E  6E40               	movwf	drawtext@size,c
  2247  000720  0E34               	movlw	52
  2248  000722  ECF7  F006         	call	_drawtext
  2249                           
  2250                           ;Lab11.c: 156: PORTBbits.RB7 = 1;
  2251  000726  8E81               	bsf	3969,7,c	;volatile
  2252                           
  2253                           ;Lab11.c: 158: Activate_Buzzer();
  2254  000728  EC83  F00D         	call	_Activate_Buzzer	;wreg free
  2255                           
  2256                           ;Lab11.c: 159: Wait_Half_Second();
  2257  00072C  EC26  F00D         	call	_Wait_Half_Second	;wreg free
  2258                           
  2259                           ;Lab11.c: 160: PORTBbits.RB7 = 0;
  2260  000730  9E81               	bcf	3969,7,c	;volatile
  2261                           
  2262                           ;Lab11.c: 162: Deactivate_Buzzer();
  2263  000732  ECBE  F00D         	call	_Deactivate_Buzzer	;wreg free
  2264  000736  D000               	goto	l5460
  2265  000738                     l5460:
  2266                           
  2267                           ;Lab11.c: 163: }
  2268                           ;Lab11.c: 165: if (found == 8)
  2269  000738  0E08               	movlw	8
  2270  00073A  185C               	xorwf	_found,w,c
  2271  00073C  A4D8               	btfss	status,2,c
  2272  00073E  D6E0               	goto	l5396
  2273                           
  2274                           ;Lab11.c: 166: {
  2275                           ;Lab11.c: 167: DS3231_Setup_Time();
  2276  000740  ECDB  F00A         	call	_DS3231_Setup_Time	;wreg free
  2277  000744  D6DD               	goto	l5396
  2278  000746  EF0C  F000         	goto	start
  2279  00074A                     __end_of_main:
  2280                           	opt stack 0
  2281                           tblptru	equ	0xFF8
  2282                           tblptrh	equ	0xFF7
  2283                           tblptrl	equ	0xFF6
  2284                           tablat	equ	0xFF5
  2285                           prodh	equ	0xFF4
  2286                           prodl	equ	0xFF3
  2287                           intcon	equ	0xFF2
  2288                           intcon2	equ	0xFF1
  2289                           postinc0	equ	0xFEE
  2290                           wreg	equ	0xFE8
  2291                           postdec1	equ	0xFE5
  2292                           fsr1l	equ	0xFE1
  2293                           indf2	equ	0xFDF
  2294                           postinc2	equ	0xFDE
  2295                           postdec2	equ	0xFDD
  2296                           fsr2h	equ	0xFDA
  2297                           fsr2l	equ	0xFD9
  2298                           status	equ	0xFD8
  2299                           
  2300 ;; *************** function _printf *****************
  2301 ;; Defined at:
  2302 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  f               2   38[COMRAM] PTR const unsigned char 
  2305 ;;		 -> STR_5(13), STR_4(21), STR_3(43), STR_2(30), 
  2306 ;;		 -> STR_1(43), 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;  idx             1    0[BANK0 ] unsigned char 
  2309 ;;  val             4    5[BANK0 ] unsigned long 
  2310 ;;  tmpval          4    0        struct .
  2311 ;;  cp              3    0        PTR const unsigned char 
  2312 ;;  width           2    9[BANK0 ] int 
  2313 ;;  ap              2    3[BANK0 ] PTR void [1]
  2314 ;;		 -> ?_printf(2), 
  2315 ;;  prec            2    1[BANK0 ] int 
  2316 ;;  len             2    0        unsigned int 
  2317 ;;  c               1   12[BANK0 ] char 
  2318 ;;  flag            1   11[BANK0 ] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  2   38[COMRAM] int 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2328 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Totals:        18      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;Total ram usage:       31 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    4
  2335 ;; This function calls:
  2336 ;;		___lldiv
  2337 ;;		___llmod
  2338 ;;		___wmul
  2339 ;;		_isdigit
  2340 ;;		_putch
  2341 ;; This function is called by:
  2342 ;;		_main
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text1
  2347  00001C                     __ptext1:
  2348                           	opt stack 0
  2349  00001C                     _printf:
  2350                           	opt stack 26
  2351                           
  2352                           ;doprnt.c: 466: va_list ap;
  2353                           ;doprnt.c: 499: signed char c;
  2354                           ;doprnt.c: 501: int width;
  2355                           ;doprnt.c: 504: int prec;
  2356                           ;doprnt.c: 508: unsigned char flag;
  2357                           ;doprnt.c: 523: union {
  2358                           ;doprnt.c: 524: unsigned long vd;
  2359                           ;doprnt.c: 525: double integ;
  2360                           ;doprnt.c: 526: } tmpval;
  2361                           ;doprnt.c: 528: unsigned long val;
  2362                           ;doprnt.c: 529: unsigned len;
  2363                           ;doprnt.c: 530: const char * cp;
  2364                           ;doprnt.c: 533: *ap = __va_start();
  2365                           
  2366                           ;incstack = 0
  2367  00001C  0E29               	movlw	low (?_printf+2)
  2368  00001E  0100               	movlb	0	; () banked
  2369  000020  6FF6               	movwf	printf@ap& (0+255),b
  2370  000022  0E00               	movlw	high (?_printf+2)
  2371  000024  0100               	movlb	0	; () banked
  2372  000026  6FF7               	movwf	(printf@ap+1)& (0+255),b
  2373                           
  2374                           ;doprnt.c: 536: while(c = *f++) {
  2375  000028  D254               	goto	l5060
  2376  00002A                     l4922:
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;doprnt.c: 538: if(c != '%')
  2380  00002A  0E25               	movlw	37
  2381  00002C  0100               	movlb	0	; () banked
  2382  00002E  19FF               	xorwf	printf@c& (0+255),w,b
  2383  000030  B4D8               	btfsc	status,2,c
  2384  000032  D005               	goto	l4926
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;doprnt.c: 540: {
  2388                           ;doprnt.c: 541: (putch(c) );
  2389  000034  0100               	movlb	0	; () banked
  2390  000036  51FF               	movf	printf@c& (0+255),w,b
  2391  000038  EC9C  F00D         	call	_putch
  2392                           
  2393                           ;doprnt.c: 542: continue;
  2394  00003C  D24A               	goto	l5060
  2395  00003E                     l4926:
  2396                           
  2397                           ;doprnt.c: 543: }
  2398                           ;doprnt.c: 546: width = 0;
  2399  00003E  0E00               	movlw	0
  2400  000040  0100               	movlb	0	; () banked
  2401  000042  6FFD               	movwf	(printf@width+1)& (0+255),b
  2402  000044  0E00               	movlw	0
  2403  000046  6FFC               	movwf	printf@width& (0+255),b
  2404                           
  2405                           ;doprnt.c: 548: flag = 0;
  2406  000048  0E00               	movlw	0
  2407  00004A  0100               	movlb	0	; () banked
  2408  00004C  6FFE               	movwf	printf@flag& (0+255),b
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;doprnt.c: 551: switch(*f) {
  2412                           
  2413                           ;doprnt.c: 550: for(;;) {
  2414  00004E  D006               	goto	l4932
  2415  000050                     l4928:
  2416                           
  2417                           ;doprnt.c: 580: flag |= 0x04;
  2418  000050  0100               	movlb	0	; () banked
  2419  000052  85FE               	bsf	printf@flag& (0+255),2,b
  2420                           
  2421                           ;doprnt.c: 581: f++;
  2422  000054  4A27               	infsnz	printf@f,f,c
  2423  000056  2A28               	incf	printf@f+1,f,c
  2424                           
  2425                           ;doprnt.c: 582: continue;
  2426  000058  D001               	goto	l4932
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;doprnt.c: 584: }
  2430  00005A  D00B               	goto	l4934
  2431  00005C                     l4932:
  2432  00005C  C027  FFF6         	movff	printf@f,tblptrl
  2433  000060  C028  FFF7         	movff	printf@f+1,tblptrh
  2434  000064                     	if	0	;tblptru may be non-zero
  2435  000064                     	endif
  2436  000064                     	if	0	;tblptru may be non-zero
  2437  000064                     	endif
  2438  000064  0008               	tblrd		*
  2439  000066  50F5               	movf	tablat,w,c
  2440                           
  2441                           ; Switch size 1, requested type "space"
  2442                           ; Number of cases is 1, Range of values is 48 to 48
  2443                           ; switch strategies available:
  2444                           ; Name         Instructions Cycles
  2445                           ; simple_byte            4     3 (average)
  2446                           ;	Chosen strategy is simple_byte
  2447  000068  0A30               	xorlw	48	; case 48
  2448  00006A  B4D8               	btfsc	status,2,c
  2449  00006C  D7F1               	goto	l4928
  2450                           
  2451                           ;doprnt.c: 585: break;
  2452  00006E  D001               	goto	l4934
  2453                           
  2454                           ;doprnt.c: 586: }
  2455  000070  D7F5               	goto	l4932
  2456  000072                     l4934:
  2457                           
  2458                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2459  000072  C027  FFF6         	movff	printf@f,tblptrl
  2460  000076  C028  FFF7         	movff	printf@f+1,tblptrh
  2461  00007A                     	if	0	;tblptru may be non-zero
  2462  00007A                     	endif
  2463  00007A                     	if	0	;tblptru may be non-zero
  2464  00007A                     	endif
  2465  00007A  0008               	tblrd		*
  2466  00007C  50F5               	movf	tablat,w,c
  2467  00007E  ECE8  F00C         	call	_isdigit
  2468  000082  A0D8               	btfss	status,0,c
  2469  000084  D042               	goto	l4952
  2470                           
  2471                           ;doprnt.c: 598: width = 0;
  2472  000086  0E00               	movlw	0
  2473  000088  0100               	movlb	0	; () banked
  2474  00008A  6FFD               	movwf	(printf@width+1)& (0+255),b
  2475  00008C  0E00               	movlw	0
  2476  00008E  6FFC               	movwf	printf@width& (0+255),b
  2477  000090  D000               	goto	l4938
  2478  000092                     l4938:
  2479                           
  2480                           ;doprnt.c: 600: width *= 10;
  2481  000092  C0FC  F011         	movff	printf@width,___wmul@multiplier
  2482  000096  C0FD  F012         	movff	printf@width+1,___wmul@multiplier+1
  2483  00009A  0E00               	movlw	0
  2484  00009C  6E14               	movwf	___wmul@multiplicand+1,c
  2485  00009E  0E0A               	movlw	10
  2486  0000A0  6E13               	movwf	___wmul@multiplicand,c
  2487  0000A2  ECD4  F00C         	call	___wmul	;wreg free
  2488  0000A6  C011  F0FC         	movff	?___wmul,printf@width
  2489  0000AA  C012  F0FD         	movff	?___wmul+1,printf@width+1
  2490                           
  2491                           ;doprnt.c: 601: width += *f++ - '0';
  2492  0000AE  0ED0               	movlw	208
  2493  0000B0  6E35               	movwf	??_printf& (0+255),c
  2494  0000B2  0EFF               	movlw	255
  2495  0000B4  6E36               	movwf	(??_printf+1)& (0+255),c
  2496  0000B6  C027  FFF6         	movff	printf@f,tblptrl
  2497  0000BA  C028  FFF7         	movff	printf@f+1,tblptrh
  2498  0000BE                     	if	0	;tblptru may be non-zero
  2499  0000BE                     	endif
  2500  0000BE                     	if	0	;tblptru may be non-zero
  2501  0000BE                     	endif
  2502  0000BE  0008               	tblrd		*
  2503  0000C0  50F5               	movf	tablat,w,c
  2504  0000C2  6E37               	movwf	(??_printf+2)& (0+255),c
  2505  0000C4  6A38               	clrf	(??_printf+3)& (0+255),c
  2506  0000C6  5035               	movf	??_printf,w,c
  2507  0000C8  2637               	addwf	??_printf+2,f,c
  2508  0000CA  5036               	movf	??_printf+1,w,c
  2509  0000CC  2238               	addwfc	??_printf+3,f,c
  2510  0000CE  5037               	movf	??_printf+2,w,c
  2511  0000D0  0100               	movlb	0	; () banked
  2512  0000D2  27FC               	addwf	printf@width& (0+255),f,b
  2513  0000D4  5038               	movf	??_printf+3,w,c
  2514  0000D6  0100               	movlb	0	; () banked
  2515  0000D8  23FD               	addwfc	(printf@width+1)& (0+255),f,b
  2516                           
  2517                           ; BSR set to: 0
  2518  0000DA  4A27               	infsnz	printf@f,f,c
  2519  0000DC  2A28               	incf	printf@f+1,f,c
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2523  0000DE  C027  FFF6         	movff	printf@f,tblptrl
  2524  0000E2  C028  FFF7         	movff	printf@f+1,tblptrh
  2525  0000E6                     	if	0	;tblptru may be non-zero
  2526  0000E6                     	endif
  2527  0000E6                     	if	0	;tblptru may be non-zero
  2528  0000E6                     	endif
  2529  0000E6  0008               	tblrd		*
  2530  0000E8  50F5               	movf	tablat,w,c
  2531  0000EA  ECE8  F00C         	call	_isdigit
  2532  0000EE  A0D8               	btfss	status,0,c
  2533  0000F0  D00C               	goto	l4952
  2534  0000F2  D7CF               	goto	l4938
  2535                           
  2536                           ;doprnt.c: 635: switch(c = *f++) {
  2537                           
  2538                           ;doprnt.c: 608: }
  2539                           ;doprnt.c: 633: loop:
  2540  0000F4  D00A               	goto	l4952
  2541                           
  2542                           ;doprnt.c: 638: goto alldone;
  2543                           
  2544                           ;doprnt.c: 637: case 0:
  2545  0000F6  D1FC               	goto	l684
  2546  0000F8                     l4946:
  2547                           
  2548                           ;doprnt.c: 643: flag |= 0x10;
  2549  0000F8  0100               	movlb	0	; () banked
  2550  0000FA  89FE               	bsf	printf@flag& (0+255),4,b
  2551                           
  2552                           ;doprnt.c: 644: goto loop;
  2553  0000FC  D006               	goto	l4952
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;doprnt.c: 698: case 'i':
  2557                           ;doprnt.c: 699: break;
  2558                           
  2559                           ; BSR set to: 0
  2560                           
  2561                           ;doprnt.c: 697: case 'd':
  2562  0000FE  D020               	goto	l643
  2563  000100                     l4948:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 721: flag |= 0x80;
  2567  000100  0100               	movlb	0	; () banked
  2568  000102  8FFE               	bsf	printf@flag& (0+255),7,b
  2569                           
  2570                           ;doprnt.c: 723: break;
  2571  000104  D01D               	goto	l643
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;doprnt.c: 813: continue;
  2575                           
  2576                           ;doprnt.c: 802: default:
  2577  000106  D1E5               	goto	l5060
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;doprnt.c: 822: }
  2581  000108  D01B               	goto	l643
  2582  00010A                     l4952:
  2583  00010A  C027  FFF6         	movff	printf@f,tblptrl
  2584  00010E  C028  FFF7         	movff	printf@f+1,tblptrh
  2585  000112  4A27               	infsnz	printf@f,f,c
  2586  000114  2A28               	incf	printf@f+1,f,c
  2587  000116                     	if	0	;tblptru may be non-zero
  2588  000116                     	endif
  2589  000116                     	if	0	;tblptru may be non-zero
  2590  000116                     	endif
  2591  000116  0008               	tblrd		*
  2592  000118  CFF5 F0FF          	movff	tablat,printf@c
  2593  00011C  0100               	movlb	0	; () banked
  2594  00011E  51FF               	movf	printf@c& (0+255),w,b
  2595                           
  2596                           ; Switch size 1, requested type "space"
  2597                           ; Number of cases is 5, Range of values is 0 to 120
  2598                           ; switch strategies available:
  2599                           ; Name         Instructions Cycles
  2600                           ; simple_byte           16     9 (average)
  2601                           ;	Chosen strategy is simple_byte
  2602  000120  0A00               	xorlw	0	; case 0
  2603  000122  B4D8               	btfsc	status,2,c
  2604  000124  D1E5               	goto	l684
  2605  000126  0A64               	xorlw	100	; case 100
  2606  000128  B4D8               	btfsc	status,2,c
  2607  00012A  D00A               	goto	l643
  2608  00012C  0A0D               	xorlw	13	; case 105
  2609  00012E  B4D8               	btfsc	status,2,c
  2610  000130  D007               	goto	l643
  2611  000132  0A05               	xorlw	5	; case 108
  2612  000134  B4D8               	btfsc	status,2,c
  2613  000136  D7E0               	goto	l4946
  2614  000138  0A14               	xorlw	20	; case 120
  2615  00013A  B4D8               	btfsc	status,2,c
  2616  00013C  D7E1               	goto	l4948
  2617  00013E  D1C9               	goto	l5060
  2618  000140                     l643:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2622  000140  0100               	movlb	0	; () banked
  2623  000142  BFFE               	btfsc	printf@flag& (0+255),7,b
  2624  000144  D035               	goto	l646
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;doprnt.c: 1253: {
  2628                           ;doprnt.c: 1255: if(flag & 0x10)
  2629  000146  0100               	movlb	0	; () banked
  2630  000148  A9FE               	btfss	printf@flag& (0+255),4,b
  2631  00014A  D00E               	goto	l4960
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2635  00014C  C0F6  FFD9         	movff	printf@ap,fsr2l
  2636  000150  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2637  000154  CFDE F0F8          	movff	postinc2,printf@val
  2638  000158  CFDE F0F9          	movff	postinc2,printf@val+1
  2639  00015C  CFDE F0FA          	movff	postinc2,printf@val+2
  2640  000160  CFDE F0FB          	movff	postinc2,printf@val+3
  2641                           
  2642                           ; BSR set to: 0
  2643  000164  0E04               	movlw	4
  2644  000166  D00F               	goto	L1
  2645  000168                     l4960:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;doprnt.c: 1257: else
  2649                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2650  000168  C0F6  FFD9         	movff	printf@ap,fsr2l
  2651  00016C  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2652  000170  CFDE F0F8          	movff	postinc2,printf@val
  2653  000174  CFDD F0F9          	movff	postdec2,printf@val+1
  2654  000178  0100               	movlb	0	; () banked
  2655  00017A  0E00               	movlw	0
  2656  00017C  BFF9               	btfsc	(printf@val+1)& (0+255),7,b
  2657  00017E  0EFF               	movlw	-1
  2658  000180  6FFA               	movwf	(printf@val+2)& (0+255),b
  2659  000182  6FFB               	movwf	(printf@val+3)& (0+255),b
  2660                           
  2661                           ; BSR set to: 0
  2662  000184  0E02               	movlw	2
  2663  000186                     L1:
  2664  000186  0100               	movlb	0	; () banked
  2665  000188  27F6               	addwf	printf@ap& (0+255),f,b
  2666  00018A  0E00               	movlw	0
  2667  00018C  23F7               	addwfc	(printf@ap+1)& (0+255),f,b
  2668  00018E  D000               	goto	l4964
  2669  000190                     l4964:
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;doprnt.c: 1261: if((long)val < 0) {
  2673  000190  0100               	movlb	0	; () banked
  2674  000192  AFFB               	btfss	(printf@val+3)& (0+255),7,b
  2675  000194  D089               	goto	l5008
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;doprnt.c: 1262: flag |= 0x03;
  2679  000196  0E03               	movlw	3
  2680  000198  0100               	movlb	0	; () banked
  2681  00019A  13FE               	iorwf	printf@flag& (0+255),f,b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;doprnt.c: 1263: val = -val;
  2685  00019C  0100               	movlb	0	; () banked
  2686  00019E  1FFB               	comf	(printf@val+3)& (0+255),f,b
  2687  0001A0  1FFA               	comf	(printf@val+2)& (0+255),f,b
  2688  0001A2  1FF9               	comf	(printf@val+1)& (0+255),f,b
  2689  0001A4  6DF8               	negf	printf@val& (0+255),b
  2690  0001A6  0E00               	movlw	0
  2691  0001A8  23F9               	addwfc	(printf@val+1)& (0+255),f,b
  2692  0001AA  23FA               	addwfc	(printf@val+2)& (0+255),f,b
  2693  0001AC  23FB               	addwfc	(printf@val+3)& (0+255),f,b
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;doprnt.c: 1264: }
  2697                           ;doprnt.c: 1266: }
  2698  0001AE  D07C               	goto	l5008
  2699  0001B0                     l646:
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;doprnt.c: 1268: else
  2703                           ;doprnt.c: 1273: {
  2704                           ;doprnt.c: 1281: if(flag & 0x10)
  2705  0001B0  0100               	movlb	0	; () banked
  2706  0001B2  A9FE               	btfss	printf@flag& (0+255),4,b
  2707  0001B4  D00E               	goto	l4974
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2711  0001B6  C0F6  FFD9         	movff	printf@ap,fsr2l
  2712  0001BA  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2713  0001BE  CFDE F0F8          	movff	postinc2,printf@val
  2714  0001C2  CFDE F0F9          	movff	postinc2,printf@val+1
  2715  0001C6  CFDE F0FA          	movff	postinc2,printf@val+2
  2716  0001CA  CFDE F0FB          	movff	postinc2,printf@val+3
  2717                           
  2718                           ; BSR set to: 0
  2719  0001CE  0E04               	movlw	4
  2720  0001D0  D010               	goto	L2
  2721  0001D2                     l4974:
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;doprnt.c: 1283: else
  2725                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2726  0001D2  C0F6  FFD9         	movff	printf@ap,fsr2l
  2727  0001D6  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2728  0001DA  CFDE F035          	movff	postinc2,??_printf
  2729  0001DE  CFDD F036          	movff	postdec2,??_printf+1
  2730  0001E2  C035  F0F8         	movff	??_printf,printf@val
  2731  0001E6  C036  F0F9         	movff	??_printf+1,printf@val+1
  2732  0001EA  0100               	movlb	0	; () banked
  2733  0001EC  6BFA               	clrf	(printf@val+2)& (0+255),b
  2734  0001EE  6BFB               	clrf	(printf@val+3)& (0+255),b
  2735                           
  2736                           ; BSR set to: 0
  2737  0001F0  0E02               	movlw	2
  2738  0001F2                     L2:
  2739  0001F2  0100               	movlb	0	; () banked
  2740  0001F4  27F6               	addwf	printf@ap& (0+255),f,b
  2741  0001F6  0E00               	movlw	0
  2742  0001F8  23F7               	addwfc	(printf@ap+1)& (0+255),f,b
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;doprnt.c: 1287: }
  2746                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2747                           
  2748                           ; BSR set to: 0
  2749  0001FA  D056               	goto	l5008
  2750  0001FC                     l4978:
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2754  0001FC  0E01               	movlw	1
  2755  0001FE  0100               	movlb	0	; () banked
  2756  000200  6FFF               	movwf	printf@c& (0+255),b
  2757  000202                     l4980:
  2758                           
  2759                           ; BSR set to: 0
  2760  000202  0E0A               	movlw	10
  2761  000204  0100               	movlb	0	; () banked
  2762  000206  19FF               	xorwf	printf@c& (0+255),w,b
  2763  000208  B4D8               	btfsc	status,2,c
  2764  00020A  D058               	goto	l5010
  2765  00020C  D001               	goto	l4984
  2766                           
  2767                           ; BSR set to: 0
  2768  00020E  D056               	goto	l5010
  2769  000210                     l4984:
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;doprnt.c: 1306: if(val < dpowers[c])
  2773  000210  0100               	movlb	0	; () banked
  2774  000212  51FF               	movf	printf@c& (0+255),w,b
  2775  000214  0D04               	mullw	4
  2776  000216  0E1C               	movlw	low _dpowers
  2777  000218  24F3               	addwf	prodl,w,c
  2778  00021A  6EF6               	movwf	tblptrl,c
  2779  00021C  0EFF               	movlw	high _dpowers
  2780  00021E  20F4               	addwfc	prodh,w,c
  2781  000220  6EF7               	movwf	tblptrh,c
  2782  000222                     	if	0	;There are less than 3 active tblptr bytes
  2783  000222                     	endif
  2784  000222  0009               	tblrd		*+
  2785  000224  50F5               	movf	tablat,w,c
  2786  000226  0100               	movlb	0	; () banked
  2787  000228  5DF8               	subwf	printf@val& (0+255),w,b
  2788  00022A  0009               	tblrd		*+
  2789  00022C  50F5               	movf	tablat,w,c
  2790  00022E  0100               	movlb	0	; () banked
  2791  000230  59F9               	subwfb	(printf@val+1)& (0+255),w,b
  2792  000232  0009               	tblrd		*+
  2793  000234  50F5               	movf	tablat,w,c
  2794  000236  0100               	movlb	0	; () banked
  2795  000238  59FA               	subwfb	(printf@val+2)& (0+255),w,b
  2796  00023A  0009               	tblrd		*+
  2797  00023C  50F5               	movf	tablat,w,c
  2798  00023E  0100               	movlb	0	; () banked
  2799  000240  59FB               	subwfb	(printf@val+3)& (0+255),w,b
  2800  000242  A0D8               	btfss	status,0,c
  2801  000244  D03B               	goto	l5010
  2802  000246  D001               	goto	l4988
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;doprnt.c: 1307: break;
  2806  000248  D039               	goto	l5010
  2807  00024A                     l4988:
  2808                           
  2809                           ; BSR set to: 0
  2810  00024A  0100               	movlb	0	; () banked
  2811  00024C  2BFF               	incf	printf@c& (0+255),f,b
  2812  00024E  D7D9               	goto	l4980
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;doprnt.c: 1309: break;
  2816                           
  2817                           ; BSR set to: 0
  2818  000250  D035               	goto	l5010
  2819  000252                     l4992:
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2823  000252  0E01               	movlw	1
  2824  000254  0100               	movlb	0	; () banked
  2825  000256  6FFF               	movwf	printf@c& (0+255),b
  2826  000258                     l4994:
  2827                           
  2828                           ; BSR set to: 0
  2829  000258  0E08               	movlw	8
  2830  00025A  0100               	movlb	0	; () banked
  2831  00025C  19FF               	xorwf	printf@c& (0+255),w,b
  2832  00025E  B4D8               	btfsc	status,2,c
  2833  000260  D02D               	goto	l5010
  2834  000262  D001               	goto	l4998
  2835                           
  2836                           ; BSR set to: 0
  2837  000264  D02B               	goto	l5010
  2838  000266                     l4998:
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2842  000266  0100               	movlb	0	; () banked
  2843  000268  51FF               	movf	printf@c& (0+255),w,b
  2844  00026A  0D04               	mullw	4
  2845  00026C  0E44               	movlw	low _hexpowers
  2846  00026E  24F3               	addwf	prodl,w,c
  2847  000270  6EF6               	movwf	tblptrl,c
  2848  000272  0EFF               	movlw	high _hexpowers
  2849  000274  20F4               	addwfc	prodh,w,c
  2850  000276  6EF7               	movwf	tblptrh,c
  2851  000278                     	if	0	;There are less than 3 active tblptr bytes
  2852  000278                     	endif
  2853  000278  0009               	tblrd		*+
  2854  00027A  50F5               	movf	tablat,w,c
  2855  00027C  0100               	movlb	0	; () banked
  2856  00027E  5DF8               	subwf	printf@val& (0+255),w,b
  2857  000280  0009               	tblrd		*+
  2858  000282  50F5               	movf	tablat,w,c
  2859  000284  0100               	movlb	0	; () banked
  2860  000286  59F9               	subwfb	(printf@val+1)& (0+255),w,b
  2861  000288  0009               	tblrd		*+
  2862  00028A  50F5               	movf	tablat,w,c
  2863  00028C  0100               	movlb	0	; () banked
  2864  00028E  59FA               	subwfb	(printf@val+2)& (0+255),w,b
  2865  000290  0009               	tblrd		*+
  2866  000292  50F5               	movf	tablat,w,c
  2867  000294  0100               	movlb	0	; () banked
  2868  000296  59FB               	subwfb	(printf@val+3)& (0+255),w,b
  2869  000298  A0D8               	btfss	status,0,c
  2870  00029A  D010               	goto	l5010
  2871  00029C  D001               	goto	l5002
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;doprnt.c: 1318: break;
  2875  00029E  D00E               	goto	l5010
  2876  0002A0                     l5002:
  2877                           
  2878                           ; BSR set to: 0
  2879  0002A0  0100               	movlb	0	; () banked
  2880  0002A2  2BFF               	incf	printf@c& (0+255),f,b
  2881  0002A4  D7D9               	goto	l4994
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;doprnt.c: 1336: }
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;doprnt.c: 1320: break;
  2888                           
  2889                           ; BSR set to: 0
  2890  0002A6  D00A               	goto	l5010
  2891  0002A8                     l5008:
  2892                           
  2893                           ; BSR set to: 0
  2894  0002A8  0100               	movlb	0	; () banked
  2895  0002AA  51FE               	movf	printf@flag& (0+255),w,b
  2896  0002AC  0B80               	andlw	128
  2897                           
  2898                           ; Switch size 1, requested type "space"
  2899                           ; Number of cases is 2, Range of values is 0 to 128
  2900                           ; switch strategies available:
  2901                           ; Name         Instructions Cycles
  2902                           ; simple_byte            7     4 (average)
  2903                           ;	Chosen strategy is simple_byte
  2904  0002AE  0A00               	xorlw	0	; case 0
  2905  0002B0  B4D8               	btfsc	status,2,c
  2906  0002B2  D7A4               	goto	l4978
  2907  0002B4  0A80               	xorlw	128	; case 128
  2908  0002B6  B4D8               	btfsc	status,2,c
  2909  0002B8  D7CC               	goto	l4992
  2910  0002BA  D000               	goto	l5010
  2911  0002BC                     l5010:
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2915  0002BC  0100               	movlb	0	; () banked
  2916  0002BE  51FC               	movf	printf@width& (0+255),w,b
  2917  0002C0  0100               	movlb	0	; () banked
  2918  0002C2  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  2919  0002C4  B4D8               	btfsc	status,2,c
  2920  0002C6  D00B               	goto	l5016
  2921                           
  2922                           ; BSR set to: 0
  2923  0002C8  C0FE  F035         	movff	printf@flag,??_printf
  2924  0002CC  0E03               	movlw	3
  2925  0002CE  1635               	andwf	??_printf,f,c
  2926  0002D0  B4D8               	btfsc	status,2,c
  2927  0002D2  D005               	goto	l5016
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;doprnt.c: 1346: width--;
  2931  0002D4  0100               	movlb	0	; () banked
  2932  0002D6  07FC               	decf	printf@width& (0+255),f,b
  2933  0002D8  A0D8               	btfss	status,0,c
  2934  0002DA  07FD               	decf	(printf@width+1)& (0+255),f,b
  2935  0002DC  D000               	goto	l5016
  2936  0002DE                     l5016:
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;doprnt.c: 1381: if(width > c)
  2940  0002DE  0E80               	movlw	128
  2941  0002E0  0100               	movlb	0	; () banked
  2942  0002E2  BFFF               	btfsc	printf@c& (0+255),7,b
  2943  0002E4  0E7F               	movlw	127
  2944  0002E6  6E35               	movwf	??_printf& (0+255),c
  2945  0002E8  0100               	movlb	0	; () banked
  2946  0002EA  51FC               	movf	printf@width& (0+255),w,b
  2947  0002EC  0100               	movlb	0	; () banked
  2948  0002EE  5DFF               	subwf	printf@c& (0+255),w,b
  2949  0002F0  0100               	movlb	0	; () banked
  2950  0002F2  51FD               	movf	(printf@width+1)& (0+255),w,b
  2951  0002F4  0A80               	xorlw	128
  2952  0002F6  5835               	subwfb	??_printf& (0+255),w,c
  2953  0002F8  B0D8               	btfsc	status,0,c
  2954  0002FA  D00B               	goto	l5020
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;doprnt.c: 1382: width -= c;
  2958  0002FC  0100               	movlb	0	; () banked
  2959  0002FE  51FF               	movf	printf@c& (0+255),w,b
  2960  000300  0100               	movlb	0	; () banked
  2961  000302  5FFC               	subwf	printf@width& (0+255),f,b
  2962  000304  0E00               	movlw	0
  2963  000306  0100               	movlb	0	; () banked
  2964  000308  BFFF               	btfsc	printf@c& (0+255),7,b
  2965  00030A  0EFF               	movlw	255
  2966  00030C  0100               	movlb	0	; () banked
  2967  00030E  5BFD               	subwfb	(printf@width+1)& (0+255),f,b
  2968  000310  D006               	goto	l5022
  2969  000312                     l5020:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 1383: else
  2973                           ;doprnt.c: 1384: width = 0;
  2974  000312  0E00               	movlw	0
  2975  000314  0100               	movlb	0	; () banked
  2976  000316  6FFD               	movwf	(printf@width+1)& (0+255),b
  2977  000318  0E00               	movlw	0
  2978  00031A  6FFC               	movwf	printf@width& (0+255),b
  2979  00031C  D000               	goto	l5022
  2980  00031E                     l5022:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;doprnt.c: 1387: if(flag & 0x04) {
  2984  00031E  0100               	movlb	0	; () banked
  2985  000320  A5FE               	btfss	printf@flag& (0+255),2,b
  2986  000322  D01F               	goto	l5034
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;doprnt.c: 1392: if(flag & 0x03)
  2990  000324  C0FE  F035         	movff	printf@flag,??_printf
  2991  000328  0E03               	movlw	3
  2992  00032A  1635               	andwf	??_printf,f,c
  2993  00032C  B4D8               	btfsc	status,2,c
  2994  00032E  D004               	goto	l5028
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;doprnt.c: 1393: (putch('-') );
  2998  000330  0E2D               	movlw	45
  2999  000332  EC9C  F00D         	call	_putch
  3000  000336  D000               	goto	l5028
  3001  000338                     l5028:
  3002                           
  3003                           ;doprnt.c: 1415: if(width)
  3004  000338  0100               	movlb	0	; () banked
  3005  00033A  51FC               	movf	printf@width& (0+255),w,b
  3006  00033C  0100               	movlb	0	; () banked
  3007  00033E  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  3008  000340  B4D8               	btfsc	status,2,c
  3009  000342  D02E               	goto	l5044
  3010  000344                     l5030:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;doprnt.c: 1417: (putch('0') );
  3014  000344  0E30               	movlw	48
  3015  000346  EC9C  F00D         	call	_putch
  3016                           
  3017                           ;doprnt.c: 1418: while(--width);
  3018  00034A  0100               	movlb	0	; () banked
  3019  00034C  07FC               	decf	printf@width& (0+255),f,b
  3020  00034E  A0D8               	btfss	status,0,c
  3021  000350  07FD               	decf	(printf@width+1)& (0+255),f,b
  3022  000352  0100               	movlb	0	; () banked
  3023  000354  51FC               	movf	printf@width& (0+255),w,b
  3024  000356  0100               	movlb	0	; () banked
  3025  000358  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  3026  00035A  B4D8               	btfsc	status,2,c
  3027  00035C  D021               	goto	l5044
  3028  00035E  D7F2               	goto	l5030
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;doprnt.c: 1420: } else
  3032                           
  3033                           ; BSR set to: 0
  3034  000360  D01F               	goto	l5044
  3035  000362                     l5034:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;doprnt.c: 1422: {
  3039                           ;doprnt.c: 1424: if(width
  3040                           ;doprnt.c: 1428: )
  3041  000362  0100               	movlb	0	; () banked
  3042  000364  51FC               	movf	printf@width& (0+255),w,b
  3043  000366  0100               	movlb	0	; () banked
  3044  000368  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  3045  00036A  B4D8               	btfsc	status,2,c
  3046  00036C  D00F               	goto	l5040
  3047  00036E                     l5036:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;doprnt.c: 1430: (putch(' ') );
  3051  00036E  0E20               	movlw	32
  3052  000370  EC9C  F00D         	call	_putch
  3053                           
  3054                           ;doprnt.c: 1431: while(--width);
  3055  000374  0100               	movlb	0	; () banked
  3056  000376  07FC               	decf	printf@width& (0+255),f,b
  3057  000378  A0D8               	btfss	status,0,c
  3058  00037A  07FD               	decf	(printf@width+1)& (0+255),f,b
  3059  00037C  0100               	movlb	0	; () banked
  3060  00037E  51FC               	movf	printf@width& (0+255),w,b
  3061  000380  0100               	movlb	0	; () banked
  3062  000382  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  3063  000384  B4D8               	btfsc	status,2,c
  3064  000386  D002               	goto	l5040
  3065  000388  D7F2               	goto	l5036
  3066                           
  3067                           ; BSR set to: 0
  3068  00038A  D000               	goto	l5040
  3069  00038C                     l5040:
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;doprnt.c: 1438: if(flag & 0x03)
  3073  00038C  C0FE  F035         	movff	printf@flag,??_printf
  3074  000390  0E03               	movlw	3
  3075  000392  1635               	andwf	??_printf,f,c
  3076  000394  B4D8               	btfsc	status,2,c
  3077  000396  D004               	goto	l5044
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;doprnt.c: 1439: (putch('-') );
  3081  000398  0E2D               	movlw	45
  3082  00039A  EC9C  F00D         	call	_putch
  3083  00039E  D000               	goto	l5044
  3084  0003A0                     l5044:
  3085                           
  3086                           ;doprnt.c: 1469: }
  3087                           ;doprnt.c: 1472: prec = c;
  3088  0003A0  0100               	movlb	0	; () banked
  3089  0003A2  51FF               	movf	printf@c& (0+255),w,b
  3090  0003A4  0100               	movlb	0	; () banked
  3091  0003A6  6FF4               	movwf	printf@prec& (0+255),b
  3092  0003A8  6BF5               	clrf	(printf@prec+1)& (0+255),b
  3093  0003AA  BFF4               	btfsc	printf@prec& (0+255),7,b
  3094  0003AC  07F5               	decf	(printf@prec+1)& (0+255),f,b
  3095                           
  3096                           ;doprnt.c: 1474: while(prec--) {
  3097  0003AE  D084               	goto	l5058
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3101  0003B0  D074               	goto	l5054
  3102  0003B2                     l5046:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3106  0003B2  C0F4  F035         	movff	printf@prec,??_printf
  3107  0003B6  C0F5  F036         	movff	printf@prec+1,??_printf+1
  3108  0003BA  90D8               	bcf	status,0,c
  3109  0003BC  3635               	rlcf	??_printf,f,c
  3110  0003BE  3636               	rlcf	??_printf+1,f,c
  3111  0003C0  90D8               	bcf	status,0,c
  3112  0003C2  3635               	rlcf	??_printf,f,c
  3113  0003C4  3636               	rlcf	??_printf+1,f,c
  3114  0003C6  0E1C               	movlw	low _dpowers
  3115  0003C8  2435               	addwf	??_printf,w,c
  3116  0003CA  6EF6               	movwf	tblptrl,c
  3117  0003CC  0EFF               	movlw	high _dpowers
  3118  0003CE  2036               	addwfc	??_printf+1,w,c
  3119  0003D0  6EF7               	movwf	tblptrh,c
  3120  0003D2                     	if	0	;There are less than 3 active tblptr bytes
  3121  0003D2                     	endif
  3122  0003D2  0009               	tblrd		*+
  3123  0003D4  CFF5 F015          	movff	tablat,___lldiv@divisor
  3124  0003D8  0009               	tblrd		*+
  3125  0003DA  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3126  0003DE  0009               	tblrd		*+
  3127  0003E0  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3128  0003E4  000A               	tblrd		*-
  3129  0003E6  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3130  0003EA  C0F8  F011         	movff	printf@val,___lldiv@dividend
  3131  0003EE  C0F9  F012         	movff	printf@val+1,___lldiv@dividend+1
  3132  0003F2  C0FA  F013         	movff	printf@val+2,___lldiv@dividend+2
  3133  0003F6  C0FB  F014         	movff	printf@val+3,___lldiv@dividend+3
  3134  0003FA  ECF5  F008         	call	___lldiv	;wreg free
  3135  0003FE  C011  F01E         	movff	?___lldiv,___llmod@dividend
  3136  000402  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  3137  000406  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  3138  00040A  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  3139  00040E  0E0A               	movlw	10
  3140  000410  6E22               	movwf	___llmod@divisor,c
  3141  000412  0E00               	movlw	0
  3142  000414  6E23               	movwf	___llmod@divisor+1,c
  3143  000416  0E00               	movlw	0
  3144  000418  6E24               	movwf	___llmod@divisor+2,c
  3145  00041A  0E00               	movlw	0
  3146  00041C  6E25               	movwf	___llmod@divisor+3,c
  3147  00041E  EC39  F00A         	call	___llmod	;wreg free
  3148  000422  501E               	movf	?___llmod,w,c
  3149  000424  0F30               	addlw	48
  3150  000426  0100               	movlb	0	; () banked
  3151  000428  6FFF               	movwf	printf@c& (0+255),b
  3152                           
  3153                           ;doprnt.c: 1491: break;
  3154  00042A  D041               	goto	l5056
  3155  00042C                     l5048:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;doprnt.c: 1499: {
  3159                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3160  00042C  C0F8  F011         	movff	printf@val,___lldiv@dividend
  3161  000430  C0F9  F012         	movff	printf@val+1,___lldiv@dividend+1
  3162  000434  C0FA  F013         	movff	printf@val+2,___lldiv@dividend+2
  3163  000438  C0FB  F014         	movff	printf@val+3,___lldiv@dividend+3
  3164  00043C  C0F4  F035         	movff	printf@prec,??_printf
  3165  000440  C0F5  F036         	movff	printf@prec+1,??_printf+1
  3166  000444  90D8               	bcf	status,0,c
  3167  000446  3635               	rlcf	??_printf,f,c
  3168  000448  3636               	rlcf	??_printf+1,f,c
  3169  00044A  90D8               	bcf	status,0,c
  3170  00044C  3635               	rlcf	??_printf,f,c
  3171  00044E  3636               	rlcf	??_printf+1,f,c
  3172  000450  0E44               	movlw	low _hexpowers
  3173  000452  2435               	addwf	??_printf,w,c
  3174  000454  6EF6               	movwf	tblptrl,c
  3175  000456  0EFF               	movlw	high _hexpowers
  3176  000458  2036               	addwfc	??_printf+1,w,c
  3177  00045A  6EF7               	movwf	tblptrh,c
  3178  00045C                     	if	0	;There are less than 3 active tblptr bytes
  3179  00045C                     	endif
  3180  00045C  0009               	tblrd		*+
  3181  00045E  CFF5 F015          	movff	tablat,___lldiv@divisor
  3182  000462  0009               	tblrd		*+
  3183  000464  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3184  000468  0009               	tblrd		*+
  3185  00046A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3186  00046E  000A               	tblrd		*-
  3187  000470  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3188  000474  ECF5  F008         	call	___lldiv	;wreg free
  3189  000478  5011               	movf	?___lldiv,w,c
  3190  00047A  0B0F               	andlw	15
  3191  00047C  0100               	movlb	0	; () banked
  3192  00047E  6FF3               	movwf	printf@idx& (0+255),b
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3196  000480  0100               	movlb	0	; () banked
  3197  000482  51F3               	movf	printf@idx& (0+255),w,b
  3198  000484  0D01               	mullw	1
  3199  000486  0ED8               	movlw	low STR_8
  3200  000488  24F3               	addwf	prodl,w,c
  3201  00048A  6EF6               	movwf	tblptrl,c
  3202  00048C  0EFF               	movlw	high STR_8
  3203  00048E  20F4               	addwfc	prodh,w,c
  3204  000490  6EF7               	movwf	tblptrh,c
  3205  000492                     	if	0	;There are less than 3 active tblptr bytes
  3206  000492                     	endif
  3207  000492  0008               	tblrd		*
  3208  000494  CFF5 F0FF          	movff	tablat,printf@c
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;doprnt.c: 1523: }
  3212                           
  3213                           ;doprnt.c: 1508: }
  3214                           ;doprnt.c: 1510: break;
  3215  000498  D00A               	goto	l5056
  3216  00049A                     l5054:
  3217                           
  3218                           ; BSR set to: 0
  3219  00049A  0100               	movlb	0	; () banked
  3220  00049C  51FE               	movf	printf@flag& (0+255),w,b
  3221  00049E  0B80               	andlw	128
  3222                           
  3223                           ; Switch size 1, requested type "space"
  3224                           ; Number of cases is 2, Range of values is 0 to 128
  3225                           ; switch strategies available:
  3226                           ; Name         Instructions Cycles
  3227                           ; simple_byte            7     4 (average)
  3228                           ;	Chosen strategy is simple_byte
  3229  0004A0  0A00               	xorlw	0	; case 0
  3230  0004A2  B4D8               	btfsc	status,2,c
  3231  0004A4  D786               	goto	l5046
  3232  0004A6  0A80               	xorlw	128	; case 128
  3233  0004A8  B4D8               	btfsc	status,2,c
  3234  0004AA  D7C0               	goto	l5048
  3235  0004AC  D000               	goto	l5056
  3236  0004AE                     l5056:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;doprnt.c: 1524: (putch(c) );
  3240  0004AE  0100               	movlb	0	; () banked
  3241  0004B0  51FF               	movf	printf@c& (0+255),w,b
  3242  0004B2  EC9C  F00D         	call	_putch
  3243  0004B6  D000               	goto	l5058
  3244  0004B8                     l5058:
  3245  0004B8  0100               	movlb	0	; () banked
  3246  0004BA  07F4               	decf	printf@prec& (0+255),f,b
  3247  0004BC  A0D8               	btfss	status,0,c
  3248  0004BE  07F5               	decf	(printf@prec+1)& (0+255),f,b
  3249  0004C0  0100               	movlb	0	; () banked
  3250  0004C2  29F4               	incf	printf@prec& (0+255),w,b
  3251  0004C4  E1EA               	bnz	l5054
  3252  0004C6  0100               	movlb	0	; () banked
  3253  0004C8  29F5               	incf	(printf@prec+1)& (0+255),w,b
  3254  0004CA  B4D8               	btfsc	status,2,c
  3255  0004CC  D002               	goto	l5060
  3256  0004CE  D7E5               	goto	l5054
  3257                           
  3258                           ; BSR set to: 0
  3259  0004D0  D000               	goto	l5060
  3260  0004D2                     l5060:
  3261  0004D2  C027  FFF6         	movff	printf@f,tblptrl
  3262  0004D6  C028  FFF7         	movff	printf@f+1,tblptrh
  3263  0004DA  4A27               	infsnz	printf@f,f,c
  3264  0004DC  2A28               	incf	printf@f+1,f,c
  3265  0004DE                     	if	0	;tblptru may be non-zero
  3266  0004DE                     	endif
  3267  0004DE                     	if	0	;tblptru may be non-zero
  3268  0004DE                     	endif
  3269  0004DE  0008               	tblrd		*
  3270  0004E0  CFF5 F0FF          	movff	tablat,printf@c
  3271  0004E4  0100               	movlb	0	; () banked
  3272  0004E6  51FF               	movf	printf@c& (0+255),w,b
  3273  0004E8  B4D8               	btfsc	status,2,c
  3274  0004EA  D002               	goto	l684
  3275  0004EC  D59E               	goto	l4922
  3276                           
  3277                           ; BSR set to: 0
  3278  0004EE  D000               	goto	l684
  3279  0004F0                     l684:
  3280  0004F0  0012               	return		;funcret
  3281  0004F2                     __end_of_printf:
  3282                           	opt stack 0
  3283                           tblptru	equ	0xFF8
  3284                           tblptrh	equ	0xFF7
  3285                           tblptrl	equ	0xFF6
  3286                           tablat	equ	0xFF5
  3287                           prodh	equ	0xFF4
  3288                           prodl	equ	0xFF3
  3289                           intcon	equ	0xFF2
  3290                           intcon2	equ	0xFF1
  3291                           postinc0	equ	0xFEE
  3292                           wreg	equ	0xFE8
  3293                           postdec1	equ	0xFE5
  3294                           fsr1l	equ	0xFE1
  3295                           indf2	equ	0xFDF
  3296                           postinc2	equ	0xFDE
  3297                           postdec2	equ	0xFDD
  3298                           fsr2h	equ	0xFDA
  3299                           fsr2l	equ	0xFD9
  3300                           status	equ	0xFD8
  3301                           
  3302 ;; *************** function _putch *****************
  3303 ;; Defined at:
  3304 ;;		line 211 in file "Lab11.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  c               1    wreg     unsigned char 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  c               1   16[COMRAM] unsigned char 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;		None               void
  3311 ;; Registers used:
  3312 ;;		wreg
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;Total ram usage:        1 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    3
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_printf
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text2
  3333  001B38                     __ptext2:
  3334                           	opt stack 0
  3335  001B38                     _putch:
  3336                           	opt stack 26
  3337                           
  3338                           ;incstack = 0
  3339                           ;putch@c stored from wreg
  3340  001B38  6E11               	movwf	putch@c,c
  3341                           
  3342                           ;Lab11.c: 213: while (!TRMT);
  3343  001B3A  D000               	goto	l585
  3344  001B3C                     l585:
  3345  001B3C  A2AC               	btfss	4012,1,c	;volatile
  3346  001B3E  D7FE               	goto	l585
  3347                           
  3348                           ;Lab11.c: 214: TXREG = c;
  3349  001B40  C011  FFAD         	movff	putch@c,4013	;volatile
  3350  001B44  0012               	return		;funcret
  3351  001B46                     __end_of_putch:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           intcon	equ	0xFF2
  3360                           intcon2	equ	0xFF1
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           postdec1	equ	0xFE5
  3364                           fsr1l	equ	0xFE1
  3365                           indf2	equ	0xFDF
  3366                           postinc2	equ	0xFDE
  3367                           postdec2	equ	0xFDD
  3368                           fsr2h	equ	0xFDA
  3369                           fsr2l	equ	0xFD9
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _isdigit *****************
  3373 ;; Defined at:
  3374 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  c               1    wreg     unsigned char 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  c               1   18[COMRAM] unsigned char 
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		wreg, status,2, status,0
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;Total ram usage:        3 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    3
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_printf
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text3
  3403  0019D0                     __ptext3:
  3404                           	opt stack 0
  3405  0019D0                     _isdigit:
  3406                           	opt stack 26
  3407                           
  3408                           ;incstack = 0
  3409                           ;isdigit@c stored from wreg
  3410  0019D0  6E13               	movwf	isdigit@c,c
  3411  0019D2  0E00               	movlw	0
  3412  0019D4  6E12               	movwf	_isdigit$2032,c
  3413  0019D6  0E3A               	movlw	58
  3414  0019D8  6013               	cpfslt	isdigit@c,c
  3415  0019DA  D006               	goto	l4698
  3416  0019DC  0E2F               	movlw	47
  3417  0019DE  6413               	cpfsgt	isdigit@c,c
  3418  0019E0  D003               	goto	l4698
  3419  0019E2  0E01               	movlw	1
  3420  0019E4  6E12               	movwf	_isdigit$2032,c
  3421  0019E6  D000               	goto	l4698
  3422  0019E8                     l4698:
  3423  0019E8  C012  F011         	movff	_isdigit$2032,??_isdigit
  3424  0019EC  3011               	rrcf	??_isdigit,w,c
  3425  0019EE  D000               	goto	l1151
  3426  0019F0                     l1151:
  3427  0019F0  0012               	return		;funcret
  3428  0019F2                     __end_of_isdigit:
  3429                           	opt stack 0
  3430                           tblptru	equ	0xFF8
  3431                           tblptrh	equ	0xFF7
  3432                           tblptrl	equ	0xFF6
  3433                           tablat	equ	0xFF5
  3434                           prodh	equ	0xFF4
  3435                           prodl	equ	0xFF3
  3436                           intcon	equ	0xFF2
  3437                           intcon2	equ	0xFF1
  3438                           postinc0	equ	0xFEE
  3439                           wreg	equ	0xFE8
  3440                           postdec1	equ	0xFE5
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function ___llmod *****************
  3450 ;; Defined at:
  3451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;  dividend        4   29[COMRAM] unsigned long 
  3454 ;;  divisor         4   33[COMRAM] unsigned long 
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;  counter         1   37[COMRAM] unsigned char 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  4   29[COMRAM] unsigned long 
  3459 ;; Registers used:
  3460 ;;		wreg, status,2, status,0
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3466 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;Total ram usage:        9 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    3
  3473 ;; This function calls:
  3474 ;;		Nothing
  3475 ;; This function is called by:
  3476 ;;		_printf
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text4
  3481  001472                     __ptext4:
  3482                           	opt stack 0
  3483  001472                     ___llmod:
  3484                           	opt stack 26
  3485                           
  3486                           ;incstack = 0
  3487  001472  5022               	movf	___llmod@divisor,w,c
  3488  001474  1023               	iorwf	___llmod@divisor+1,w,c
  3489  001476  1024               	iorwf	___llmod@divisor+2,w,c
  3490  001478  1025               	iorwf	___llmod@divisor+3,w,c
  3491  00147A  B4D8               	btfsc	status,2,c
  3492  00147C  D029               	goto	l1190
  3493  00147E  0E01               	movlw	1
  3494  001480  6E26               	movwf	___llmod@counter,c
  3495  001482  D007               	goto	l4730
  3496  001484                     l4728:
  3497  001484  90D8               	bcf	status,0,c
  3498  001486  3622               	rlcf	___llmod@divisor,f,c
  3499  001488  3623               	rlcf	___llmod@divisor+1,f,c
  3500  00148A  3624               	rlcf	___llmod@divisor+2,f,c
  3501  00148C  3625               	rlcf	___llmod@divisor+3,f,c
  3502  00148E  2A26               	incf	___llmod@counter,f,c
  3503  001490  D000               	goto	l4730
  3504  001492                     l4730:
  3505  001492  BE25               	btfsc	___llmod@divisor+3,7,c
  3506  001494  D002               	goto	l4732
  3507  001496  D7F6               	goto	l4728
  3508  001498  D000               	goto	l4732
  3509  00149A                     l4732:
  3510  00149A  5022               	movf	___llmod@divisor,w,c
  3511  00149C  5C1E               	subwf	___llmod@dividend,w,c
  3512  00149E  5023               	movf	___llmod@divisor+1,w,c
  3513  0014A0  581F               	subwfb	___llmod@dividend+1,w,c
  3514  0014A2  5024               	movf	___llmod@divisor+2,w,c
  3515  0014A4  5820               	subwfb	___llmod@dividend+2,w,c
  3516  0014A6  5025               	movf	___llmod@divisor+3,w,c
  3517  0014A8  5821               	subwfb	___llmod@dividend+3,w,c
  3518  0014AA  A0D8               	btfss	status,0,c
  3519  0014AC  D009               	goto	l4736
  3520  0014AE  5022               	movf	___llmod@divisor,w,c
  3521  0014B0  5E1E               	subwf	___llmod@dividend,f,c
  3522  0014B2  5023               	movf	___llmod@divisor+1,w,c
  3523  0014B4  5A1F               	subwfb	___llmod@dividend+1,f,c
  3524  0014B6  5024               	movf	___llmod@divisor+2,w,c
  3525  0014B8  5A20               	subwfb	___llmod@dividend+2,f,c
  3526  0014BA  5025               	movf	___llmod@divisor+3,w,c
  3527  0014BC  5A21               	subwfb	___llmod@dividend+3,f,c
  3528  0014BE  D000               	goto	l4736
  3529  0014C0                     l4736:
  3530  0014C0  90D8               	bcf	status,0,c
  3531  0014C2  3225               	rrcf	___llmod@divisor+3,f,c
  3532  0014C4  3224               	rrcf	___llmod@divisor+2,f,c
  3533  0014C6  3223               	rrcf	___llmod@divisor+1,f,c
  3534  0014C8  3222               	rrcf	___llmod@divisor,f,c
  3535  0014CA  2E26               	decfsz	___llmod@counter,f,c
  3536  0014CC  D7E6               	goto	l4732
  3537  0014CE  D000               	goto	l1190
  3538  0014D0                     l1190:
  3539  0014D0  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3540  0014D4  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3541  0014D8  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3542  0014DC  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3543  0014E0  0012               	return		;funcret
  3544  0014E2                     __end_of___llmod:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           intcon	equ	0xFF2
  3553                           intcon2	equ	0xFF1
  3554                           postinc0	equ	0xFEE
  3555                           wreg	equ	0xFE8
  3556                           postdec1	equ	0xFE5
  3557                           fsr1l	equ	0xFE1
  3558                           indf2	equ	0xFDF
  3559                           postinc2	equ	0xFDE
  3560                           postdec2	equ	0xFDD
  3561                           fsr2h	equ	0xFDA
  3562                           fsr2l	equ	0xFD9
  3563                           status	equ	0xFD8
  3564                           
  3565 ;; *************** function ___lldiv *****************
  3566 ;; Defined at:
  3567 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  dividend        4   16[COMRAM] unsigned long 
  3570 ;;  divisor         4   20[COMRAM] unsigned long 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  quotient        4   24[COMRAM] unsigned long 
  3573 ;;  counter         1   28[COMRAM] unsigned char 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  4   16[COMRAM] unsigned long 
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3583 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;Total ram usage:       13 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    3
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_printf
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text5
  3598  0011EA                     __ptext5:
  3599                           	opt stack 0
  3600  0011EA                     ___lldiv:
  3601                           	opt stack 26
  3602                           
  3603                           ;incstack = 0
  3604  0011EA  0E00               	movlw	0
  3605  0011EC  6E19               	movwf	___lldiv@quotient,c
  3606  0011EE  0E00               	movlw	0
  3607  0011F0  6E1A               	movwf	___lldiv@quotient+1,c
  3608  0011F2  0E00               	movlw	0
  3609  0011F4  6E1B               	movwf	___lldiv@quotient+2,c
  3610  0011F6  0E00               	movlw	0
  3611  0011F8  6E1C               	movwf	___lldiv@quotient+3,c
  3612  0011FA  5015               	movf	___lldiv@divisor,w,c
  3613  0011FC  1016               	iorwf	___lldiv@divisor+1,w,c
  3614  0011FE  1017               	iorwf	___lldiv@divisor+2,w,c
  3615  001200  1018               	iorwf	___lldiv@divisor+3,w,c
  3616  001202  B4D8               	btfsc	status,2,c
  3617  001204  D02F               	goto	l1180
  3618  001206  0E01               	movlw	1
  3619  001208  6E1D               	movwf	___lldiv@counter,c
  3620  00120A  D007               	goto	l4710
  3621  00120C                     l4708:
  3622  00120C  90D8               	bcf	status,0,c
  3623  00120E  3615               	rlcf	___lldiv@divisor,f,c
  3624  001210  3616               	rlcf	___lldiv@divisor+1,f,c
  3625  001212  3617               	rlcf	___lldiv@divisor+2,f,c
  3626  001214  3618               	rlcf	___lldiv@divisor+3,f,c
  3627  001216  2A1D               	incf	___lldiv@counter,f,c
  3628  001218  D000               	goto	l4710
  3629  00121A                     l4710:
  3630  00121A  BE18               	btfsc	___lldiv@divisor+3,7,c
  3631  00121C  D002               	goto	l4712
  3632  00121E  D7F6               	goto	l4708
  3633  001220  D000               	goto	l4712
  3634  001222                     l4712:
  3635  001222  90D8               	bcf	status,0,c
  3636  001224  3619               	rlcf	___lldiv@quotient,f,c
  3637  001226  361A               	rlcf	___lldiv@quotient+1,f,c
  3638  001228  361B               	rlcf	___lldiv@quotient+2,f,c
  3639  00122A  361C               	rlcf	___lldiv@quotient+3,f,c
  3640  00122C  5015               	movf	___lldiv@divisor,w,c
  3641  00122E  5C11               	subwf	___lldiv@dividend,w,c
  3642  001230  5016               	movf	___lldiv@divisor+1,w,c
  3643  001232  5812               	subwfb	___lldiv@dividend+1,w,c
  3644  001234  5017               	movf	___lldiv@divisor+2,w,c
  3645  001236  5813               	subwfb	___lldiv@dividend+2,w,c
  3646  001238  5018               	movf	___lldiv@divisor+3,w,c
  3647  00123A  5814               	subwfb	___lldiv@dividend+3,w,c
  3648  00123C  A0D8               	btfss	status,0,c
  3649  00123E  D00A               	goto	l4720
  3650  001240  5015               	movf	___lldiv@divisor,w,c
  3651  001242  5E11               	subwf	___lldiv@dividend,f,c
  3652  001244  5016               	movf	___lldiv@divisor+1,w,c
  3653  001246  5A12               	subwfb	___lldiv@dividend+1,f,c
  3654  001248  5017               	movf	___lldiv@divisor+2,w,c
  3655  00124A  5A13               	subwfb	___lldiv@dividend+2,f,c
  3656  00124C  5018               	movf	___lldiv@divisor+3,w,c
  3657  00124E  5A14               	subwfb	___lldiv@dividend+3,f,c
  3658  001250  8019               	bsf	___lldiv@quotient,0,c
  3659  001252  D000               	goto	l4720
  3660  001254                     l4720:
  3661  001254  90D8               	bcf	status,0,c
  3662  001256  3218               	rrcf	___lldiv@divisor+3,f,c
  3663  001258  3217               	rrcf	___lldiv@divisor+2,f,c
  3664  00125A  3216               	rrcf	___lldiv@divisor+1,f,c
  3665  00125C  3215               	rrcf	___lldiv@divisor,f,c
  3666  00125E  2E1D               	decfsz	___lldiv@counter,f,c
  3667  001260  D7E0               	goto	l4712
  3668  001262  D000               	goto	l1180
  3669  001264                     l1180:
  3670  001264  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3671  001268  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3672  00126C  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3673  001270  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3674  001274  0012               	return		;funcret
  3675  001276                     __end_of___lldiv:
  3676                           	opt stack 0
  3677                           tblptru	equ	0xFF8
  3678                           tblptrh	equ	0xFF7
  3679                           tblptrl	equ	0xFF6
  3680                           tablat	equ	0xFF5
  3681                           prodh	equ	0xFF4
  3682                           prodl	equ	0xFF3
  3683                           intcon	equ	0xFF2
  3684                           intcon2	equ	0xFF1
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           postdec1	equ	0xFE5
  3688                           fsr1l	equ	0xFE1
  3689                           indf2	equ	0xFDF
  3690                           postinc2	equ	0xFDE
  3691                           postdec2	equ	0xFDD
  3692                           fsr2h	equ	0xFDA
  3693                           fsr2l	equ	0xFD9
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _fillCircle *****************
  3697 ;; Defined at:
  3698 ;;		line 613 in file "ST7735_TFT.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  x0              2   58[COMRAM] int 
  3701 ;;  y0              2   60[COMRAM] int 
  3702 ;;  r               2   62[COMRAM] int 
  3703 ;;  color           2   64[COMRAM] unsigned int 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;		None               void
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3715 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;Total ram usage:        8 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    8
  3722 ;; This function calls:
  3723 ;;		_drawFastVLine
  3724 ;;		_fillCircleHelper
  3725 ;; This function is called by:
  3726 ;;		_main
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text6
  3731  001666                     __ptext6:
  3732                           	opt stack 0
  3733  001666                     _fillCircle:
  3734                           	opt stack 22
  3735                           
  3736                           ;ST7735_TFT.c: 615: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3737                           
  3738                           ;incstack = 0
  3739  001666  503F               	movf	fillCircle@r,w,c
  3740  001668  0800               	sublw	0
  3741  00166A  243D               	addwf	fillCircle@y0,w,c
  3742  00166C  6E18               	movwf	drawFastVLine@y,c
  3743  00166E  80D8               	bsf	status,0,c
  3744  001670  343F               	rlcf	fillCircle@r,w,c
  3745  001672  6E19               	movwf	drawFastVLine@h,c
  3746  001674  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3747  001678  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3748  00167C  503B               	movf	fillCircle@x0,w,c
  3749  00167E  EC3B  F009         	call	_drawFastVLine
  3750                           
  3751                           ;ST7735_TFT.c: 616: fillCircleHelper(x0, y0, r, 3, 0, color);
  3752  001682  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3753  001686  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3754  00168A  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3755  00168E  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3756  001692  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3757  001696  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3758  00169A  0E00               	movlw	0
  3759  00169C  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3760  00169E  0E03               	movlw	3
  3761  0016A0  6E29               	movwf	fillCircleHelper@cornername,c
  3762  0016A2  0E00               	movlw	0
  3763  0016A4  6E2C               	movwf	fillCircleHelper@delta+1,c
  3764  0016A6  0E00               	movlw	0
  3765  0016A8  6E2B               	movwf	fillCircleHelper@delta,c
  3766  0016AA  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3767  0016AE  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3768  0016B2  ECD3  F005         	call	_fillCircleHelper	;wreg free
  3769  0016B6  0012               	return		;funcret
  3770  0016B8                     __end_of_fillCircle:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           intcon	equ	0xFF2
  3779                           intcon2	equ	0xFF1
  3780                           postinc0	equ	0xFEE
  3781                           wreg	equ	0xFE8
  3782                           postdec1	equ	0xFE5
  3783                           fsr1l	equ	0xFE1
  3784                           indf2	equ	0xFDF
  3785                           postinc2	equ	0xFDE
  3786                           postdec2	equ	0xFDD
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function _fillCircleHelper *****************
  3792 ;; Defined at:
  3793 ;;		line 588 in file "ST7735_TFT.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  x0              2   34[COMRAM] int 
  3796 ;;  y0              2   36[COMRAM] int 
  3797 ;;  r               2   38[COMRAM] int 
  3798 ;;  cornername      2   40[COMRAM] unsigned int 
  3799 ;;  delta           2   42[COMRAM] int 
  3800 ;;  color           2   44[COMRAM] unsigned int 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  y               2   56[COMRAM] int 
  3803 ;;  x               2   54[COMRAM] int 
  3804 ;;  f               2   52[COMRAM] int 
  3805 ;;  ddF_y           2   50[COMRAM] int 
  3806 ;;  ddF_x           2   48[COMRAM] int 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;		None               void
  3809 ;; Registers used:
  3810 ;;		wreg, status,2, status,0, cstack
  3811 ;; Tracked objects:
  3812 ;;		On entry : 0/0
  3813 ;;		On exit  : 0/0
  3814 ;;		Unchanged: 0/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3816 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3818 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3819 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;Total ram usage:       24 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    7
  3823 ;; This function calls:
  3824 ;;		_drawFastVLine
  3825 ;; This function is called by:
  3826 ;;		_fillCircle
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text7
  3831  000BA6                     __ptext7:
  3832                           	opt stack 0
  3833  000BA6                     _fillCircleHelper:
  3834                           	opt stack 22
  3835                           
  3836                           ;ST7735_TFT.c: 590: signed int f, ddF_x, ddF_y, x, y;
  3837                           ;ST7735_TFT.c: 591: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3838                           
  3839                           ;incstack = 0
  3840  000BA6  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3841  000BAA  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3842  000BAE  1E2F               	comf	??_fillCircleHelper,f,c
  3843  000BB0  1E30               	comf	??_fillCircleHelper+1,f,c
  3844  000BB2  4A2F               	infsnz	??_fillCircleHelper,f,c
  3845  000BB4  2A30               	incf	??_fillCircleHelper+1,f,c
  3846  000BB6  0E01               	movlw	1
  3847  000BB8  242F               	addwf	??_fillCircleHelper,w,c
  3848  000BBA  6E35               	movwf	fillCircleHelper@f,c
  3849  000BBC  0E00               	movlw	0
  3850  000BBE  2030               	addwfc	??_fillCircleHelper+1,w,c
  3851  000BC0  6E36               	movwf	fillCircleHelper@f+1,c
  3852  000BC2  0E00               	movlw	0
  3853  000BC4  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3854  000BC6  0E01               	movlw	1
  3855  000BC8  6E31               	movwf	fillCircleHelper@ddF_x,c
  3856  000BCA  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3857  000BCE  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3858  000BD2  90D8               	bcf	status,0,c
  3859  000BD4  362F               	rlcf	??_fillCircleHelper,f,c
  3860  000BD6  3630               	rlcf	??_fillCircleHelper+1,f,c
  3861  000BD8  1E2F               	comf	??_fillCircleHelper,f,c
  3862  000BDA  1E30               	comf	??_fillCircleHelper+1,f,c
  3863  000BDC  4A2F               	infsnz	??_fillCircleHelper,f,c
  3864  000BDE  2A30               	incf	??_fillCircleHelper+1,f,c
  3865  000BE0  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3866  000BE4  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3867  000BE8  0E00               	movlw	0
  3868  000BEA  6E38               	movwf	fillCircleHelper@x+1,c
  3869  000BEC  0E00               	movlw	0
  3870  000BEE  6E37               	movwf	fillCircleHelper@x,c
  3871  000BF0  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3872  000BF4  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3873                           
  3874                           ;ST7735_TFT.c: 592: while (x<y) {
  3875  000BF8  D067               	goto	l4606
  3876  000BFA                     l4586:
  3877                           
  3878                           ;ST7735_TFT.c: 593: if (f >= 0) {
  3879  000BFA  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3880  000BFC  D00B               	goto	l177
  3881                           
  3882                           ;ST7735_TFT.c: 594: y--;
  3883  000BFE  0639               	decf	fillCircleHelper@y,f,c
  3884  000C00  A0D8               	btfss	status,0,c
  3885  000C02  063A               	decf	fillCircleHelper@y+1,f,c
  3886                           
  3887                           ;ST7735_TFT.c: 595: ddF_y += 2;
  3888  000C04  0E02               	movlw	2
  3889  000C06  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3890  000C08  0E00               	movlw	0
  3891  000C0A  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3892                           
  3893                           ;ST7735_TFT.c: 596: f += ddF_y;
  3894  000C0C  5033               	movf	fillCircleHelper@ddF_y,w,c
  3895  000C0E  2635               	addwf	fillCircleHelper@f,f,c
  3896  000C10  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3897  000C12  2236               	addwfc	fillCircleHelper@f+1,f,c
  3898  000C14                     l177:
  3899                           
  3900                           ;ST7735_TFT.c: 597: }
  3901                           ;ST7735_TFT.c: 598: x++;
  3902  000C14  4A37               	infsnz	fillCircleHelper@x,f,c
  3903  000C16  2A38               	incf	fillCircleHelper@x+1,f,c
  3904                           
  3905                           ;ST7735_TFT.c: 599: ddF_x += 2;
  3906  000C18  0E02               	movlw	2
  3907  000C1A  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3908  000C1C  0E00               	movlw	0
  3909  000C1E  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3910                           
  3911                           ;ST7735_TFT.c: 600: f += ddF_x;
  3912  000C20  5031               	movf	fillCircleHelper@ddF_x,w,c
  3913  000C22  2635               	addwf	fillCircleHelper@f,f,c
  3914  000C24  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3915  000C26  2236               	addwfc	fillCircleHelper@f+1,f,c
  3916                           
  3917                           ;ST7735_TFT.c: 602: if (cornername & 0x1) {
  3918  000C28  A029               	btfss	fillCircleHelper@cornername,0,c
  3919  000C2A  D025               	goto	l4602
  3920                           
  3921                           ;ST7735_TFT.c: 603: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3922  000C2C  5039               	movf	fillCircleHelper@y,w,c
  3923  000C2E  0800               	sublw	0
  3924  000C30  2425               	addwf	fillCircleHelper@y0,w,c
  3925  000C32  6E18               	movwf	drawFastVLine@y,c
  3926  000C34  5039               	movf	fillCircleHelper@y,w,c
  3927  000C36  2439               	addwf	fillCircleHelper@y,w,c
  3928  000C38  242B               	addwf	fillCircleHelper@delta,w,c
  3929  000C3A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3930  000C3C  282F               	incf	??_fillCircleHelper,w,c
  3931  000C3E  6E19               	movwf	drawFastVLine@h,c
  3932  000C40  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3933  000C44  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3934  000C48  5023               	movf	fillCircleHelper@x0,w,c
  3935  000C4A  2437               	addwf	fillCircleHelper@x,w,c
  3936  000C4C  EC3B  F009         	call	_drawFastVLine
  3937                           
  3938                           ;ST7735_TFT.c: 604: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3939  000C50  5037               	movf	fillCircleHelper@x,w,c
  3940  000C52  0800               	sublw	0
  3941  000C54  2425               	addwf	fillCircleHelper@y0,w,c
  3942  000C56  6E18               	movwf	drawFastVLine@y,c
  3943  000C58  5037               	movf	fillCircleHelper@x,w,c
  3944  000C5A  2437               	addwf	fillCircleHelper@x,w,c
  3945  000C5C  242B               	addwf	fillCircleHelper@delta,w,c
  3946  000C5E  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3947  000C60  282F               	incf	??_fillCircleHelper,w,c
  3948  000C62  6E19               	movwf	drawFastVLine@h,c
  3949  000C64  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3950  000C68  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3951  000C6C  5023               	movf	fillCircleHelper@x0,w,c
  3952  000C6E  2439               	addwf	fillCircleHelper@y,w,c
  3953  000C70  EC3B  F009         	call	_drawFastVLine
  3954  000C74  D000               	goto	l4602
  3955  000C76                     l4602:
  3956                           
  3957                           ;ST7735_TFT.c: 605: }
  3958                           ;ST7735_TFT.c: 606: if (cornername & 0x2) {
  3959  000C76  A229               	btfss	fillCircleHelper@cornername,1,c
  3960  000C78  D027               	goto	l4606
  3961                           
  3962                           ;ST7735_TFT.c: 607: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3963  000C7A  5039               	movf	fillCircleHelper@y,w,c
  3964  000C7C  0800               	sublw	0
  3965  000C7E  2425               	addwf	fillCircleHelper@y0,w,c
  3966  000C80  6E18               	movwf	drawFastVLine@y,c
  3967  000C82  5039               	movf	fillCircleHelper@y,w,c
  3968  000C84  2439               	addwf	fillCircleHelper@y,w,c
  3969  000C86  242B               	addwf	fillCircleHelper@delta,w,c
  3970  000C88  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3971  000C8A  282F               	incf	??_fillCircleHelper,w,c
  3972  000C8C  6E19               	movwf	drawFastVLine@h,c
  3973  000C8E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3974  000C92  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3975  000C96  5037               	movf	fillCircleHelper@x,w,c
  3976  000C98  0800               	sublw	0
  3977  000C9A  2423               	addwf	fillCircleHelper@x0,w,c
  3978  000C9C  EC3B  F009         	call	_drawFastVLine
  3979                           
  3980                           ;ST7735_TFT.c: 608: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3981  000CA0  5037               	movf	fillCircleHelper@x,w,c
  3982  000CA2  0800               	sublw	0
  3983  000CA4  2425               	addwf	fillCircleHelper@y0,w,c
  3984  000CA6  6E18               	movwf	drawFastVLine@y,c
  3985  000CA8  5037               	movf	fillCircleHelper@x,w,c
  3986  000CAA  2437               	addwf	fillCircleHelper@x,w,c
  3987  000CAC  242B               	addwf	fillCircleHelper@delta,w,c
  3988  000CAE  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3989  000CB0  282F               	incf	??_fillCircleHelper,w,c
  3990  000CB2  6E19               	movwf	drawFastVLine@h,c
  3991  000CB4  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3992  000CB8  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3993  000CBC  5039               	movf	fillCircleHelper@y,w,c
  3994  000CBE  0800               	sublw	0
  3995  000CC0  2423               	addwf	fillCircleHelper@x0,w,c
  3996  000CC2  EC3B  F009         	call	_drawFastVLine
  3997  000CC6  D000               	goto	l4606
  3998  000CC8                     l4606:
  3999  000CC8  5039               	movf	fillCircleHelper@y,w,c
  4000  000CCA  5C37               	subwf	fillCircleHelper@x,w,c
  4001  000CCC  5038               	movf	fillCircleHelper@x+1,w,c
  4002  000CCE  0A80               	xorlw	128
  4003  000CD0  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  4004  000CD2  503A               	movf	fillCircleHelper@y+1,w,c
  4005  000CD4  0A80               	xorlw	128
  4006  000CD6  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  4007  000CD8  A0D8               	btfss	status,0,c
  4008  000CDA  D78F               	goto	l4586
  4009  000CDC  0012               	return		;funcret
  4010  000CDE                     __end_of_fillCircleHelper:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           intcon	equ	0xFF2
  4019                           intcon2	equ	0xFF1
  4020                           postinc0	equ	0xFEE
  4021                           wreg	equ	0xFE8
  4022                           postdec1	equ	0xFE5
  4023                           fsr1l	equ	0xFE1
  4024                           indf2	equ	0xFDF
  4025                           postinc2	equ	0xFDE
  4026                           postdec2	equ	0xFDD
  4027                           fsr2h	equ	0xFDA
  4028                           fsr2l	equ	0xFD9
  4029                           status	equ	0xFD8
  4030                           
  4031 ;; *************** function _drawCircle *****************
  4032 ;; Defined at:
  4033 ;;		line 527 in file "ST7735_TFT.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  x0              2   27[COMRAM] int 
  4036 ;;  y0              2   29[COMRAM] int 
  4037 ;;  r               2   31[COMRAM] int 
  4038 ;;  color           2   33[COMRAM] unsigned int 
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  y               2   45[COMRAM] int 
  4041 ;;  x               2   43[COMRAM] int 
  4042 ;;  f               2   41[COMRAM] int 
  4043 ;;  ddF_y           2   39[COMRAM] int 
  4044 ;;  ddF_x           2   37[COMRAM] int 
  4045 ;; Return value:  Size  Location     Type
  4046 ;;		None               void
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4054 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;Total ram usage:       20 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    7
  4061 ;; This function calls:
  4062 ;;		_drawPixel
  4063 ;; This function is called by:
  4064 ;;		_main
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text8
  4069  00074A                     __ptext8:
  4070                           	opt stack 0
  4071  00074A                     _drawCircle:
  4072                           	opt stack 23
  4073                           
  4074                           ;ST7735_TFT.c: 529: signed int f, ddF_x, ddF_y, x, y;
  4075                           ;ST7735_TFT.c: 530: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  4076                           
  4077                           ;incstack = 0
  4078  00074A  C020  F024         	movff	drawCircle@r,??_drawCircle
  4079  00074E  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  4080  000752  1E24               	comf	??_drawCircle,f,c
  4081  000754  1E25               	comf	??_drawCircle+1,f,c
  4082  000756  4A24               	infsnz	??_drawCircle,f,c
  4083  000758  2A25               	incf	??_drawCircle+1,f,c
  4084  00075A  0E01               	movlw	1
  4085  00075C  2424               	addwf	??_drawCircle,w,c
  4086  00075E  6E2A               	movwf	drawCircle@f,c
  4087  000760  0E00               	movlw	0
  4088  000762  2025               	addwfc	??_drawCircle+1,w,c
  4089  000764  6E2B               	movwf	drawCircle@f+1,c
  4090  000766  0E00               	movlw	0
  4091  000768  6E27               	movwf	drawCircle@ddF_x+1,c
  4092  00076A  0E01               	movlw	1
  4093  00076C  6E26               	movwf	drawCircle@ddF_x,c
  4094  00076E  C020  F024         	movff	drawCircle@r,??_drawCircle
  4095  000772  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  4096  000776  90D8               	bcf	status,0,c
  4097  000778  3624               	rlcf	??_drawCircle,f,c
  4098  00077A  3625               	rlcf	??_drawCircle+1,f,c
  4099  00077C  1E24               	comf	??_drawCircle,f,c
  4100  00077E  1E25               	comf	??_drawCircle+1,f,c
  4101  000780  4A24               	infsnz	??_drawCircle,f,c
  4102  000782  2A25               	incf	??_drawCircle+1,f,c
  4103  000784  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  4104  000788  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  4105  00078C  0E00               	movlw	0
  4106  00078E  6E2D               	movwf	drawCircle@x+1,c
  4107  000790  0E00               	movlw	0
  4108  000792  6E2C               	movwf	drawCircle@x,c
  4109  000794  C020  F02E         	movff	drawCircle@r,drawCircle@y
  4110  000798  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  4111                           
  4112                           ;ST7735_TFT.c: 531: drawPixel(x0 , y0 + r, color);
  4113  00079C  501E               	movf	drawCircle@y0,w,c
  4114  00079E  2420               	addwf	drawCircle@r,w,c
  4115  0007A0  6E18               	movwf	drawPixel@y,c
  4116  0007A2  C022  F019         	movff	drawCircle@color,drawPixel@color
  4117  0007A6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4118  0007AA  501C               	movf	drawCircle@x0,w,c
  4119  0007AC  ECA7  F00C         	call	_drawPixel
  4120                           
  4121                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 - r, color);
  4122  0007B0  5020               	movf	drawCircle@r,w,c
  4123  0007B2  0800               	sublw	0
  4124  0007B4  241E               	addwf	drawCircle@y0,w,c
  4125  0007B6  6E18               	movwf	drawPixel@y,c
  4126  0007B8  C022  F019         	movff	drawCircle@color,drawPixel@color
  4127  0007BC  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4128  0007C0  501C               	movf	drawCircle@x0,w,c
  4129  0007C2  ECA7  F00C         	call	_drawPixel
  4130                           
  4131                           ;ST7735_TFT.c: 533: drawPixel(x0+r, y0 , color);
  4132  0007C6  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4133  0007CA  C022  F019         	movff	drawCircle@color,drawPixel@color
  4134  0007CE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4135  0007D2  501C               	movf	drawCircle@x0,w,c
  4136  0007D4  2420               	addwf	drawCircle@r,w,c
  4137  0007D6  ECA7  F00C         	call	_drawPixel
  4138                           
  4139                           ;ST7735_TFT.c: 534: drawPixel(x0-r, y0 , color);
  4140  0007DA  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4141  0007DE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4142  0007E2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4143  0007E6  5020               	movf	drawCircle@r,w,c
  4144  0007E8  0800               	sublw	0
  4145  0007EA  241C               	addwf	drawCircle@x0,w,c
  4146  0007EC  ECA7  F00C         	call	_drawPixel
  4147                           
  4148                           ;ST7735_TFT.c: 535: while (x < y) {
  4149  0007F0  D078               	goto	l4788
  4150  0007F2                     l4760:
  4151                           
  4152                           ;ST7735_TFT.c: 536: if (f >= 0) {
  4153  0007F2  BE2B               	btfsc	drawCircle@f+1,7,c
  4154  0007F4  D00B               	goto	l159
  4155                           
  4156                           ;ST7735_TFT.c: 537: y--;
  4157  0007F6  062E               	decf	drawCircle@y,f,c
  4158  0007F8  A0D8               	btfss	status,0,c
  4159  0007FA  062F               	decf	drawCircle@y+1,f,c
  4160                           
  4161                           ;ST7735_TFT.c: 538: ddF_y += 2;
  4162  0007FC  0E02               	movlw	2
  4163  0007FE  2628               	addwf	drawCircle@ddF_y,f,c
  4164  000800  0E00               	movlw	0
  4165  000802  2229               	addwfc	drawCircle@ddF_y+1,f,c
  4166                           
  4167                           ;ST7735_TFT.c: 539: f += ddF_y;
  4168  000804  5028               	movf	drawCircle@ddF_y,w,c
  4169  000806  262A               	addwf	drawCircle@f,f,c
  4170  000808  5029               	movf	drawCircle@ddF_y+1,w,c
  4171  00080A  222B               	addwfc	drawCircle@f+1,f,c
  4172  00080C                     l159:
  4173                           
  4174                           ;ST7735_TFT.c: 540: }
  4175                           ;ST7735_TFT.c: 541: x++;
  4176  00080C  4A2C               	infsnz	drawCircle@x,f,c
  4177  00080E  2A2D               	incf	drawCircle@x+1,f,c
  4178                           
  4179                           ;ST7735_TFT.c: 542: ddF_x += 2;
  4180  000810  0E02               	movlw	2
  4181  000812  2626               	addwf	drawCircle@ddF_x,f,c
  4182  000814  0E00               	movlw	0
  4183  000816  2227               	addwfc	drawCircle@ddF_x+1,f,c
  4184                           
  4185                           ;ST7735_TFT.c: 543: f += ddF_x;
  4186  000818  5026               	movf	drawCircle@ddF_x,w,c
  4187  00081A  262A               	addwf	drawCircle@f,f,c
  4188  00081C  5027               	movf	drawCircle@ddF_x+1,w,c
  4189  00081E  222B               	addwfc	drawCircle@f+1,f,c
  4190                           
  4191                           ;ST7735_TFT.c: 544: drawPixel(x0 + x, y0 + y, color);
  4192  000820  501E               	movf	drawCircle@y0,w,c
  4193  000822  242E               	addwf	drawCircle@y,w,c
  4194  000824  6E18               	movwf	drawPixel@y,c
  4195  000826  C022  F019         	movff	drawCircle@color,drawPixel@color
  4196  00082A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4197  00082E  501C               	movf	drawCircle@x0,w,c
  4198  000830  242C               	addwf	drawCircle@x,w,c
  4199  000832  ECA7  F00C         	call	_drawPixel
  4200                           
  4201                           ;ST7735_TFT.c: 545: drawPixel(x0 - x, y0 + y, color);
  4202  000836  501E               	movf	drawCircle@y0,w,c
  4203  000838  242E               	addwf	drawCircle@y,w,c
  4204  00083A  6E18               	movwf	drawPixel@y,c
  4205  00083C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4206  000840  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4207  000844  502C               	movf	drawCircle@x,w,c
  4208  000846  0800               	sublw	0
  4209  000848  241C               	addwf	drawCircle@x0,w,c
  4210  00084A  ECA7  F00C         	call	_drawPixel
  4211                           
  4212                           ;ST7735_TFT.c: 546: drawPixel(x0 + x, y0 - y, color);
  4213  00084E  502E               	movf	drawCircle@y,w,c
  4214  000850  0800               	sublw	0
  4215  000852  241E               	addwf	drawCircle@y0,w,c
  4216  000854  6E18               	movwf	drawPixel@y,c
  4217  000856  C022  F019         	movff	drawCircle@color,drawPixel@color
  4218  00085A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4219  00085E  501C               	movf	drawCircle@x0,w,c
  4220  000860  242C               	addwf	drawCircle@x,w,c
  4221  000862  ECA7  F00C         	call	_drawPixel
  4222                           
  4223                           ;ST7735_TFT.c: 547: drawPixel(x0 - x, y0 - y, color);
  4224  000866  502E               	movf	drawCircle@y,w,c
  4225  000868  0800               	sublw	0
  4226  00086A  241E               	addwf	drawCircle@y0,w,c
  4227  00086C  6E18               	movwf	drawPixel@y,c
  4228  00086E  C022  F019         	movff	drawCircle@color,drawPixel@color
  4229  000872  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4230  000876  502C               	movf	drawCircle@x,w,c
  4231  000878  0800               	sublw	0
  4232  00087A  241C               	addwf	drawCircle@x0,w,c
  4233  00087C  ECA7  F00C         	call	_drawPixel
  4234                           
  4235                           ;ST7735_TFT.c: 548: drawPixel(x0 + y, y0 + x, color);
  4236  000880  501E               	movf	drawCircle@y0,w,c
  4237  000882  242C               	addwf	drawCircle@x,w,c
  4238  000884  6E18               	movwf	drawPixel@y,c
  4239  000886  C022  F019         	movff	drawCircle@color,drawPixel@color
  4240  00088A  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4241  00088E  501C               	movf	drawCircle@x0,w,c
  4242  000890  242E               	addwf	drawCircle@y,w,c
  4243  000892  ECA7  F00C         	call	_drawPixel
  4244                           
  4245                           ;ST7735_TFT.c: 549: drawPixel(x0 - y, y0 + x, color);
  4246  000896  501E               	movf	drawCircle@y0,w,c
  4247  000898  242C               	addwf	drawCircle@x,w,c
  4248  00089A  6E18               	movwf	drawPixel@y,c
  4249  00089C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4250  0008A0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4251  0008A4  502E               	movf	drawCircle@y,w,c
  4252  0008A6  0800               	sublw	0
  4253  0008A8  241C               	addwf	drawCircle@x0,w,c
  4254  0008AA  ECA7  F00C         	call	_drawPixel
  4255                           
  4256                           ;ST7735_TFT.c: 550: drawPixel(x0 + y, y0 - x, color);
  4257  0008AE  502C               	movf	drawCircle@x,w,c
  4258  0008B0  0800               	sublw	0
  4259  0008B2  241E               	addwf	drawCircle@y0,w,c
  4260  0008B4  6E18               	movwf	drawPixel@y,c
  4261  0008B6  C022  F019         	movff	drawCircle@color,drawPixel@color
  4262  0008BA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4263  0008BE  501C               	movf	drawCircle@x0,w,c
  4264  0008C0  242E               	addwf	drawCircle@y,w,c
  4265  0008C2  ECA7  F00C         	call	_drawPixel
  4266                           
  4267                           ;ST7735_TFT.c: 551: drawPixel(x0 - y, y0 - x, color);
  4268  0008C6  502C               	movf	drawCircle@x,w,c
  4269  0008C8  0800               	sublw	0
  4270  0008CA  241E               	addwf	drawCircle@y0,w,c
  4271  0008CC  6E18               	movwf	drawPixel@y,c
  4272  0008CE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4273  0008D2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4274  0008D6  502E               	movf	drawCircle@y,w,c
  4275  0008D8  0800               	sublw	0
  4276  0008DA  241C               	addwf	drawCircle@x0,w,c
  4277  0008DC  ECA7  F00C         	call	_drawPixel
  4278  0008E0  D000               	goto	l4788
  4279  0008E2                     l4788:
  4280  0008E2  502E               	movf	drawCircle@y,w,c
  4281  0008E4  5C2C               	subwf	drawCircle@x,w,c
  4282  0008E6  502D               	movf	drawCircle@x+1,w,c
  4283  0008E8  0A80               	xorlw	128
  4284  0008EA  6E24               	movwf	??_drawCircle& (0+255),c
  4285  0008EC  502F               	movf	drawCircle@y+1,w,c
  4286  0008EE  0A80               	xorlw	128
  4287  0008F0  5824               	subwfb	??_drawCircle& (0+255),w,c
  4288  0008F2  A0D8               	btfss	status,0,c
  4289  0008F4  D77E               	goto	l4760
  4290  0008F6  0012               	return		;funcret
  4291  0008F8                     __end_of_drawCircle:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           intcon	equ	0xFF2
  4300                           intcon2	equ	0xFF1
  4301                           postinc0	equ	0xFEE
  4302                           wreg	equ	0xFE8
  4303                           postdec1	equ	0xFE5
  4304                           fsr1l	equ	0xFE1
  4305                           indf2	equ	0xFDF
  4306                           postinc2	equ	0xFDE
  4307                           postdec2	equ	0xFDD
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8
  4311                           
  4312 ;; *************** function ___awdiv *****************
  4313 ;; Defined at:
  4314 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  dividend        2   16[COMRAM] int 
  4317 ;;  divisor         2   18[COMRAM] int 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  quotient        2   22[COMRAM] int 
  4320 ;;  sign            1   21[COMRAM] unsigned char 
  4321 ;;  counter         1   20[COMRAM] unsigned char 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  2   16[COMRAM] int 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4331 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;Total ram usage:        8 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    3
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_main
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text9
  4346  0010C6                     __ptext9:
  4347                           	opt stack 0
  4348  0010C6                     ___awdiv:
  4349                           	opt stack 27
  4350                           
  4351                           ;incstack = 0
  4352  0010C6  0E00               	movlw	0
  4353  0010C8  6E16               	movwf	___awdiv@sign,c
  4354  0010CA  AE14               	btfss	___awdiv@divisor+1,7,c
  4355  0010CC  D007               	goto	l5082
  4356  0010CE  6C13               	negf	___awdiv@divisor,c
  4357  0010D0  1E14               	comf	___awdiv@divisor+1,f,c
  4358  0010D2  B0D8               	btfsc	status,0,c
  4359  0010D4  2A14               	incf	___awdiv@divisor+1,f,c
  4360  0010D6  0E01               	movlw	1
  4361  0010D8  6E16               	movwf	___awdiv@sign,c
  4362  0010DA  D000               	goto	l5082
  4363  0010DC                     l5082:
  4364  0010DC  AE12               	btfss	___awdiv@dividend+1,7,c
  4365  0010DE  D007               	goto	l5088
  4366  0010E0  6C11               	negf	___awdiv@dividend,c
  4367  0010E2  1E12               	comf	___awdiv@dividend+1,f,c
  4368  0010E4  B0D8               	btfsc	status,0,c
  4369  0010E6  2A12               	incf	___awdiv@dividend+1,f,c
  4370  0010E8  0E01               	movlw	1
  4371  0010EA  1A16               	xorwf	___awdiv@sign,f,c
  4372  0010EC  D000               	goto	l5088
  4373  0010EE                     l5088:
  4374  0010EE  0E00               	movlw	0
  4375  0010F0  6E18               	movwf	___awdiv@quotient+1,c
  4376  0010F2  0E00               	movlw	0
  4377  0010F4  6E17               	movwf	___awdiv@quotient,c
  4378  0010F6  5013               	movf	___awdiv@divisor,w,c
  4379  0010F8  1014               	iorwf	___awdiv@divisor+1,w,c
  4380  0010FA  B4D8               	btfsc	status,2,c
  4381  0010FC  D021               	goto	l5110
  4382  0010FE  0E01               	movlw	1
  4383  001100  6E15               	movwf	___awdiv@counter,c
  4384  001102  D005               	goto	l5096
  4385  001104                     l5094:
  4386  001104  90D8               	bcf	status,0,c
  4387  001106  3613               	rlcf	___awdiv@divisor,f,c
  4388  001108  3614               	rlcf	___awdiv@divisor+1,f,c
  4389  00110A  2A15               	incf	___awdiv@counter,f,c
  4390  00110C  D000               	goto	l5096
  4391  00110E                     l5096:
  4392  00110E  BE14               	btfsc	___awdiv@divisor+1,7,c
  4393  001110  D002               	goto	l5098
  4394  001112  D7F8               	goto	l5094
  4395  001114  D000               	goto	l5098
  4396  001116                     l5098:
  4397  001116  90D8               	bcf	status,0,c
  4398  001118  3617               	rlcf	___awdiv@quotient,f,c
  4399  00111A  3618               	rlcf	___awdiv@quotient+1,f,c
  4400  00111C  5013               	movf	___awdiv@divisor,w,c
  4401  00111E  5C11               	subwf	___awdiv@dividend,w,c
  4402  001120  5014               	movf	___awdiv@divisor+1,w,c
  4403  001122  5812               	subwfb	___awdiv@dividend+1,w,c
  4404  001124  A0D8               	btfss	status,0,c
  4405  001126  D006               	goto	l5106
  4406  001128  5013               	movf	___awdiv@divisor,w,c
  4407  00112A  5E11               	subwf	___awdiv@dividend,f,c
  4408  00112C  5014               	movf	___awdiv@divisor+1,w,c
  4409  00112E  5A12               	subwfb	___awdiv@dividend+1,f,c
  4410  001130  8017               	bsf	___awdiv@quotient,0,c
  4411  001132  D000               	goto	l5106
  4412  001134                     l5106:
  4413  001134  90D8               	bcf	status,0,c
  4414  001136  3214               	rrcf	___awdiv@divisor+1,f,c
  4415  001138  3213               	rrcf	___awdiv@divisor,f,c
  4416  00113A  2E15               	decfsz	___awdiv@counter,f,c
  4417  00113C  D7EC               	goto	l5098
  4418  00113E  D000               	goto	l5110
  4419  001140                     l5110:
  4420  001140  5016               	movf	___awdiv@sign,w,c
  4421  001142  B4D8               	btfsc	status,2,c
  4422  001144  D005               	goto	l5114
  4423  001146  6C17               	negf	___awdiv@quotient,c
  4424  001148  1E18               	comf	___awdiv@quotient+1,f,c
  4425  00114A  B0D8               	btfsc	status,0,c
  4426  00114C  2A18               	incf	___awdiv@quotient+1,f,c
  4427  00114E  D000               	goto	l5114
  4428  001150                     l5114:
  4429  001150  C017  F011         	movff	___awdiv@quotient,?___awdiv
  4430  001154  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  4431  001158  D000               	goto	l913
  4432  00115A                     l913:
  4433  00115A  0012               	return		;funcret
  4434  00115C                     __end_of___awdiv:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodh	equ	0xFF4
  4441                           prodl	equ	0xFF3
  4442                           intcon	equ	0xFF2
  4443                           intcon2	equ	0xFF1
  4444                           postinc0	equ	0xFEE
  4445                           wreg	equ	0xFE8
  4446                           postdec1	equ	0xFE5
  4447                           fsr1l	equ	0xFE1
  4448                           indf2	equ	0xFDF
  4449                           postinc2	equ	0xFDE
  4450                           postdec2	equ	0xFDD
  4451                           fsr2h	equ	0xFDA
  4452                           fsr2l	equ	0xFD9
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function _Wait_Half_Second *****************
  4456 ;; Defined at:
  4457 ;;		line 244 in file "Lab11.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;		None
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;		None               void
  4464 ;; Registers used:
  4465 ;;		wreg, status,2
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;Total ram usage:        0 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    3
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_main
  4482 ;;		_Wait_One_Sec
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text10
  4487  001A4C                     __ptext10:
  4488                           	opt stack 0
  4489  001A4C                     _Wait_Half_Second:
  4490                           	opt stack 27
  4491                           
  4492                           ;Lab11.c: 246: T0CON = 0x03;
  4493                           
  4494                           ;incstack = 0
  4495  001A4C  0E03               	movlw	3
  4496  001A4E  6ED5               	movwf	4053,c	;volatile
  4497                           
  4498                           ;Lab11.c: 247: TMR0L = 0xDB;
  4499  001A50  0EDB               	movlw	219
  4500  001A52  6ED6               	movwf	4054,c	;volatile
  4501                           
  4502                           ;Lab11.c: 248: TMR0H = 0x0B;
  4503  001A54  0E0B               	movlw	11
  4504  001A56  6ED7               	movwf	4055,c	;volatile
  4505                           
  4506                           ;Lab11.c: 249: INTCONbits.TMR0IF = 0;
  4507  001A58  94F2               	bcf	intcon,2,c	;volatile
  4508                           
  4509                           ;Lab11.c: 250: T0CONbits.TMR0ON = 1;
  4510  001A5A  8ED5               	bsf	4053,7,c	;volatile
  4511                           
  4512                           ;Lab11.c: 251: while (INTCONbits.TMR0IF == 0);
  4513  001A5C  D000               	goto	l603
  4514  001A5E                     l603:
  4515  001A5E  A4F2               	btfss	intcon,2,c	;volatile
  4516  001A60  D7FE               	goto	l603
  4517                           
  4518                           ;Lab11.c: 252: T0CONbits.TMR0ON = 0;
  4519  001A62  9ED5               	bcf	4053,7,c	;volatile
  4520  001A64  0012               	return		;funcret
  4521  001A66                     __end_of_Wait_Half_Second:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           intcon	equ	0xFF2
  4530                           intcon2	equ	0xFF1
  4531                           postinc0	equ	0xFEE
  4532                           wreg	equ	0xFE8
  4533                           postdec1	equ	0xFE5
  4534                           fsr1l	equ	0xFE1
  4535                           indf2	equ	0xFDF
  4536                           postinc2	equ	0xFDE
  4537                           postdec2	equ	0xFDD
  4538                           fsr2h	equ	0xFDA
  4539                           fsr2l	equ	0xFD9
  4540                           status	equ	0xFD8
  4541                           
  4542 ;; *************** function _Initialize_Screen *****************
  4543 ;; Defined at:
  4544 ;;		line 255 in file "Lab11.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;		None               void
  4551 ;; Registers used:
  4552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : 0/0
  4555 ;;		On exit  : 0/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;Total ram usage:        0 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:   10
  4565 ;; This function calls:
  4566 ;;		_LCD_Reset
  4567 ;;		_TFT_GreenTab_Initialize
  4568 ;;		_drawtext
  4569 ;;		_fillScreen
  4570 ;;		_strcpy
  4571 ;; This function is called by:
  4572 ;;		_main
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text11
  4577  00115C                     __ptext11:
  4578                           	opt stack 0
  4579  00115C                     _Initialize_Screen:
  4580                           	opt stack 20
  4581                           
  4582                           ;Lab11.c: 257: LCD_Reset();
  4583                           
  4584                           ;incstack = 0
  4585  00115C  EC5F  F00D         	call	_LCD_Reset	;wreg free
  4586                           
  4587                           ;Lab11.c: 258: TFT_GreenTab_Initialize();
  4588  001160  ECBF  F00C         	call	_TFT_GreenTab_Initialize	;wreg free
  4589                           
  4590                           ;Lab11.c: 259: fillScreen(0x0000);
  4591  001164  0E00               	movlw	0
  4592  001166  6E25               	movwf	fillScreen@color+1,c
  4593  001168  0E00               	movlw	0
  4594  00116A  6E24               	movwf	fillScreen@color,c
  4595  00116C  EC18  F00D         	call	_fillScreen	;wreg free
  4596                           
  4597                           ;Lab11.c: 262: txt = buffer;
  4598  001170  0ED4               	movlw	low _buffer
  4599  001172  6E4E               	movwf	_txt,c
  4600  001174  0E00               	movlw	high _buffer
  4601  001176  6E4F               	movwf	_txt+1,c
  4602                           
  4603                           ;Lab11.c: 263: strcpy(txt, "ECE3301L Spring 22-S3");
  4604  001178  C04E  F011         	movff	_txt,strcpy@to
  4605  00117C  C04F  F012         	movff	_txt+1,strcpy@to+1
  4606  001180  0EAD               	movlw	low STR_6
  4607  001182  6E13               	movwf	strcpy@from,c
  4608  001184  0EFF               	movlw	high STR_6
  4609  001186  6E14               	movwf	strcpy@from+1,c
  4610  001188  EC8E  F00C         	call	_strcpy	;wreg free
  4611                           
  4612                           ;Lab11.c: 264: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4613  00118C  0E02               	movlw	2
  4614  00118E  6E39               	movwf	drawtext@y,c
  4615  001190  C04E  F03A         	movff	_txt,drawtext@_text
  4616  001194  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4617  001198  0EFF               	movlw	255
  4618  00119A  6E3D               	movwf	drawtext@color+1,c
  4619  00119C  683C               	setf	drawtext@color,c
  4620  00119E  0E00               	movlw	0
  4621  0011A0  6E3F               	movwf	drawtext@bg+1,c
  4622  0011A2  0E00               	movlw	0
  4623  0011A4  6E3E               	movwf	drawtext@bg,c
  4624  0011A6  0E01               	movlw	1
  4625  0011A8  6E40               	movwf	drawtext@size,c
  4626  0011AA  0E02               	movlw	2
  4627  0011AC  ECF7  F006         	call	_drawtext
  4628                           
  4629                           ;Lab11.c: 266: strcpy(txt, "LAB 11 ");
  4630  0011B0  C04E  F011         	movff	_txt,strcpy@to
  4631  0011B4  C04F  F012         	movff	_txt+1,strcpy@to+1
  4632  0011B8  0EF6               	movlw	low STR_7
  4633  0011BA  6E13               	movwf	strcpy@from,c
  4634  0011BC  0EFF               	movlw	high STR_7
  4635  0011BE  6E14               	movwf	strcpy@from+1,c
  4636  0011C0  EC8E  F00C         	call	_strcpy	;wreg free
  4637                           
  4638                           ;Lab11.c: 267: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4639  0011C4  0E0A               	movlw	10
  4640  0011C6  6E39               	movwf	drawtext@y,c
  4641  0011C8  C04E  F03A         	movff	_txt,drawtext@_text
  4642  0011CC  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4643  0011D0  0EFF               	movlw	255
  4644  0011D2  6E3D               	movwf	drawtext@color+1,c
  4645  0011D4  683C               	setf	drawtext@color,c
  4646  0011D6  0E00               	movlw	0
  4647  0011D8  6E3F               	movwf	drawtext@bg+1,c
  4648  0011DA  0E00               	movlw	0
  4649  0011DC  6E3E               	movwf	drawtext@bg,c
  4650  0011DE  0E01               	movlw	1
  4651  0011E0  6E40               	movwf	drawtext@size,c
  4652  0011E2  0E32               	movlw	50
  4653  0011E4  ECF7  F006         	call	_drawtext
  4654  0011E8  0012               	return		;funcret
  4655  0011EA                     __end_of_Initialize_Screen:
  4656                           	opt stack 0
  4657                           tblptru	equ	0xFF8
  4658                           tblptrh	equ	0xFF7
  4659                           tblptrl	equ	0xFF6
  4660                           tablat	equ	0xFF5
  4661                           prodh	equ	0xFF4
  4662                           prodl	equ	0xFF3
  4663                           intcon	equ	0xFF2
  4664                           intcon2	equ	0xFF1
  4665                           postinc0	equ	0xFEE
  4666                           wreg	equ	0xFE8
  4667                           postdec1	equ	0xFE5
  4668                           fsr1l	equ	0xFE1
  4669                           indf2	equ	0xFDF
  4670                           postinc2	equ	0xFDE
  4671                           postdec2	equ	0xFDD
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _strcpy *****************
  4677 ;; Defined at:
  4678 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  to              2   16[COMRAM] PTR unsigned char 
  4681 ;;		 -> NULL(0), buffer(31), 
  4682 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4683 ;;		 -> STR_7(8), STR_6(22), 
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4686 ;;		 -> NULL(0), buffer(31), 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  2   16[COMRAM] PTR unsigned char 
  4689 ;; Registers used:
  4690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4691 ;; Tracked objects:
  4692 ;;		On entry : 0/0
  4693 ;;		On exit  : 0/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;Total ram usage:        6 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    3
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		_Initialize_Screen
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text12
  4711  00191C                     __ptext12:
  4712                           	opt stack 0
  4713  00191C                     _strcpy:
  4714                           	opt stack 26
  4715                           
  4716                           ;incstack = 0
  4717  00191C  C011  F015         	movff	strcpy@to,strcpy@cp
  4718  001920  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4719  001924  D005               	goto	l4688
  4720  001926                     l4686:
  4721  001926  4A15               	infsnz	strcpy@cp,f,c
  4722  001928  2A16               	incf	strcpy@cp+1,f,c
  4723  00192A  4A13               	infsnz	strcpy@from,f,c
  4724  00192C  2A14               	incf	strcpy@from+1,f,c
  4725  00192E  D000               	goto	l4688
  4726  001930                     l4688:
  4727  001930  C013  FFF6         	movff	strcpy@from,tblptrl
  4728  001934  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4729  001938                     	if	0	;tblptru may be non-zero
  4730  001938                     	endif
  4731  001938                     	if	0	;tblptru may be non-zero
  4732  001938                     	endif
  4733  001938  C015  FFD9         	movff	strcpy@cp,fsr2l
  4734  00193C  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4735  001940  0008               	tblrd		*
  4736  001942  CFF5 FFDF          	movff	tablat,indf2
  4737  001946  50DF               	movf	indf2,w,c
  4738  001948  A4D8               	btfss	status,2,c
  4739  00194A  D7ED               	goto	l4686
  4740                           
  4741                           ;	Return value of _strcpy is never used
  4742  00194C  0012               	return		;funcret
  4743  00194E                     __end_of_strcpy:
  4744                           	opt stack 0
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           intcon2	equ	0xFF1
  4753                           postinc0	equ	0xFEE
  4754                           wreg	equ	0xFE8
  4755                           postdec1	equ	0xFE5
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _fillScreen *****************
  4765 ;; Defined at:
  4766 ;;		line 618 in file "ST7735_TFT.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  color           2   35[COMRAM] unsigned int 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;		None               void
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;Total ram usage:        2 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    7
  4787 ;; This function calls:
  4788 ;;		_fillRectangle
  4789 ;; This function is called by:
  4790 ;;		_Initialize_Screen
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text13
  4795  001A30                     __ptext13:
  4796                           	opt stack 0
  4797  001A30                     _fillScreen:
  4798                           	opt stack 22
  4799                           
  4800                           ;ST7735_TFT.c: 620: fillRectangle(0, 0, 128, 160, color);
  4801                           
  4802                           ;incstack = 0
  4803  001A30  0E00               	movlw	0
  4804  001A32  6E18               	movwf	fillRectangle@y,c
  4805  001A34  0E80               	movlw	128
  4806  001A36  6E19               	movwf	fillRectangle@w,c
  4807  001A38  0EA0               	movlw	160
  4808  001A3A  6E1A               	movwf	fillRectangle@h,c
  4809  001A3C  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4810  001A40  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4811  001A44  0E00               	movlw	0
  4812  001A46  ECF5  F007         	call	_fillRectangle
  4813  001A4A  0012               	return		;funcret
  4814  001A4C                     __end_of_fillScreen:
  4815                           	opt stack 0
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           intcon2	equ	0xFF1
  4824                           postinc0	equ	0xFEE
  4825                           wreg	equ	0xFE8
  4826                           postdec1	equ	0xFE5
  4827                           fsr1l	equ	0xFE1
  4828                           indf2	equ	0xFDF
  4829                           postinc2	equ	0xFDE
  4830                           postdec2	equ	0xFDD
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _fillRectangle *****************
  4836 ;; Defined at:
  4837 ;;		line 502 in file "ST7735_TFT.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  x               1    wreg     unsigned char 
  4840 ;;  y               1   23[COMRAM] unsigned char 
  4841 ;;  w               1   24[COMRAM] unsigned char 
  4842 ;;  h               1   25[COMRAM] unsigned char 
  4843 ;;  color           2   26[COMRAM] unsigned int 
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;  x               1   34[COMRAM] unsigned char 
  4846 ;;  lo              1   33[COMRAM] unsigned char 
  4847 ;;  hi              1   32[COMRAM] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;		None               void
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4857 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;Total ram usage:       12 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    6
  4864 ;; This function calls:
  4865 ;;		_setAddrWindow
  4866 ;;		_spiwrite
  4867 ;; This function is called by:
  4868 ;;		_fillScreen
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text14
  4873  000FEA                     __ptext14:
  4874                           	opt stack 0
  4875  000FEA                     _fillRectangle:
  4876                           	opt stack 22
  4877                           
  4878                           ;incstack = 0
  4879                           ;fillRectangle@x stored from wreg
  4880  000FEA  6E23               	movwf	fillRectangle@x,c
  4881                           
  4882                           ;ST7735_TFT.c: 504: unsigned char hi, lo;
  4883                           ;ST7735_TFT.c: 505: if((x >= 128) || (y >= 160))
  4884  000FEC  0E80               	movlw	128
  4885  000FEE  6023               	cpfslt	fillRectangle@x,c
  4886  000FF0  D069               	goto	l148
  4887  000FF2  0E9F               	movlw	159
  4888  000FF4  6418               	cpfsgt	fillRectangle@y,c
  4889  000FF6  D001               	goto	l4420
  4890                           
  4891                           ;ST7735_TFT.c: 506: return;
  4892  000FF8  D065               	goto	l148
  4893  000FFA                     l4420:
  4894                           
  4895                           ;ST7735_TFT.c: 507: if((x + w - 1) >= 128)
  4896  000FFA  0EFF               	movlw	255
  4897  000FFC  6E1D               	movwf	??_fillRectangle& (0+255),c
  4898  000FFE  0EFF               	movlw	255
  4899  001000  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4900  001002  5019               	movf	fillRectangle@w,w,c
  4901  001004  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4902  001008  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4903  00100A  261F               	addwf	??_fillRectangle+2,f,c
  4904  00100C  0E00               	movlw	0
  4905  00100E  2220               	addwfc	??_fillRectangle+3,f,c
  4906  001010  501D               	movf	??_fillRectangle,w,c
  4907  001012  261F               	addwf	??_fillRectangle+2,f,c
  4908  001014  501E               	movf	??_fillRectangle+1,w,c
  4909  001016  2220               	addwfc	??_fillRectangle+3,f,c
  4910  001018  BE20               	btfsc	??_fillRectangle+3,7,c
  4911  00101A  D00A               	goto	l149
  4912  00101C  5020               	movf	??_fillRectangle+3,w,c
  4913  00101E  E104               	bnz	u2970
  4914  001020  0E80               	movlw	128
  4915  001022  5C1F               	subwf	??_fillRectangle+2,w,c
  4916  001024  A0D8               	btfss	status,0,c
  4917  001026  D004               	goto	l149
  4918  001028                     u2970:
  4919                           
  4920                           ;ST7735_TFT.c: 508: w = 128 - x;
  4921  001028  5023               	movf	fillRectangle@x,w,c
  4922  00102A  0800               	sublw	0
  4923  00102C  0F80               	addlw	128
  4924  00102E  6E19               	movwf	fillRectangle@w,c
  4925  001030                     l149:
  4926                           
  4927                           ;ST7735_TFT.c: 509: if((y + h - 1) >= 160)
  4928  001030  0EFF               	movlw	255
  4929  001032  6E1D               	movwf	??_fillRectangle& (0+255),c
  4930  001034  0EFF               	movlw	255
  4931  001036  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4932  001038  501A               	movf	fillRectangle@h,w,c
  4933  00103A  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4934  00103E  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4935  001040  261F               	addwf	??_fillRectangle+2,f,c
  4936  001042  0E00               	movlw	0
  4937  001044  2220               	addwfc	??_fillRectangle+3,f,c
  4938  001046  501D               	movf	??_fillRectangle,w,c
  4939  001048  261F               	addwf	??_fillRectangle+2,f,c
  4940  00104A  501E               	movf	??_fillRectangle+1,w,c
  4941  00104C  2220               	addwfc	??_fillRectangle+3,f,c
  4942  00104E  BE20               	btfsc	??_fillRectangle+3,7,c
  4943  001050  D00B               	goto	l4426
  4944  001052  5020               	movf	??_fillRectangle+3,w,c
  4945  001054  E104               	bnz	u2980
  4946  001056  0EA0               	movlw	160
  4947  001058  5C1F               	subwf	??_fillRectangle+2,w,c
  4948  00105A  A0D8               	btfss	status,0,c
  4949  00105C  D005               	goto	l4426
  4950  00105E                     u2980:
  4951                           
  4952                           ;ST7735_TFT.c: 510: h = 160 - y;
  4953  00105E  5018               	movf	fillRectangle@y,w,c
  4954  001060  0800               	sublw	0
  4955  001062  0FA0               	addlw	160
  4956  001064  6E1A               	movwf	fillRectangle@h,c
  4957  001066  D000               	goto	l4426
  4958  001068                     l4426:
  4959                           
  4960                           ;ST7735_TFT.c: 511: setAddrWindow(x, y, x+w-1, y+h-1);
  4961  001068  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4962  00106C  5023               	movf	fillRectangle@x,w,c
  4963  00106E  2419               	addwf	fillRectangle@w,w,c
  4964  001070  6E1D               	movwf	??_fillRectangle& (0+255),c
  4965  001072  041D               	decf	??_fillRectangle,w,c
  4966  001074  6E15               	movwf	setAddrWindow@x1,c
  4967  001076  5018               	movf	fillRectangle@y,w,c
  4968  001078  241A               	addwf	fillRectangle@h,w,c
  4969  00107A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4970  00107C  041E               	decf	??_fillRectangle+1,w,c
  4971  00107E  6E16               	movwf	setAddrWindow@y1,c
  4972  001080  5023               	movf	fillRectangle@x,w,c
  4973  001082  EC85  F00B         	call	_setAddrWindow
  4974                           
  4975                           ;ST7735_TFT.c: 512: hi = color >> 8; lo = color;
  4976  001086  501C               	movf	fillRectangle@color+1,w,c
  4977  001088  6E21               	movwf	fillRectangle@hi,c
  4978  00108A  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4979                           
  4980                           ;ST7735_TFT.c: 513: PORTCbits.RC0 = 1;
  4981  00108E  8082               	bsf	3970,0,c	;volatile
  4982                           
  4983                           ;ST7735_TFT.c: 514: PORTCbits.RC2 = 0;
  4984  001090  9482               	bcf	3970,2,c	;volatile
  4985                           
  4986                           ;ST7735_TFT.c: 516: for(y=h; y>0; y--) {
  4987  001092  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4988  001096                     l4438:
  4989  001096  5018               	movf	fillRectangle@y,w,c
  4990  001098  B4D8               	btfsc	status,2,c
  4991  00109A  D013               	goto	l152
  4992  00109C  D001               	goto	l151
  4993  00109E  D011               	goto	l152
  4994  0010A0                     l151:
  4995                           
  4996                           ;ST7735_TFT.c: 517: for(x = w; x > 0; x--) {
  4997  0010A0  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4998  0010A4                     l4442:
  4999  0010A4  5023               	movf	fillRectangle@x,w,c
  5000  0010A6  B4D8               	btfsc	status,2,c
  5001  0010A8  D00A               	goto	l4452
  5002  0010AA  D001               	goto	l4446
  5003  0010AC  D008               	goto	l4452
  5004  0010AE                     l4446:
  5005                           
  5006                           ;ST7735_TFT.c: 518: spiwrite(hi);
  5007  0010AE  5021               	movf	fillRectangle@hi,w,c
  5008  0010B0  EC4B  F00D         	call	_spiwrite
  5009                           
  5010                           ;ST7735_TFT.c: 519: spiwrite(lo);
  5011  0010B4  5022               	movf	fillRectangle@lo,w,c
  5012  0010B6  EC4B  F00D         	call	_spiwrite
  5013  0010BA  0623               	decf	fillRectangle@x,f,c
  5014  0010BC  D7F3               	goto	l4442
  5015  0010BE                     l4452:
  5016  0010BE  0618               	decf	fillRectangle@y,f,c
  5017  0010C0  D7EA               	goto	l4438
  5018  0010C2                     l152:
  5019                           
  5020                           ;ST7735_TFT.c: 520: }
  5021                           ;ST7735_TFT.c: 521: }
  5022                           ;ST7735_TFT.c: 522: PORTCbits.RC2 = 1;
  5023  0010C2  8482               	bsf	3970,2,c	;volatile
  5024  0010C4                     l148:
  5025  0010C4  0012               	return		;funcret
  5026  0010C6                     __end_of_fillRectangle:
  5027                           	opt stack 0
  5028                           tblptru	equ	0xFF8
  5029                           tblptrh	equ	0xFF7
  5030                           tblptrl	equ	0xFF6
  5031                           tablat	equ	0xFF5
  5032                           prodh	equ	0xFF4
  5033                           prodl	equ	0xFF3
  5034                           intcon	equ	0xFF2
  5035                           intcon2	equ	0xFF1
  5036                           postinc0	equ	0xFEE
  5037                           wreg	equ	0xFE8
  5038                           postdec1	equ	0xFE5
  5039                           fsr1l	equ	0xFE1
  5040                           indf2	equ	0xFDF
  5041                           postinc2	equ	0xFDE
  5042                           postdec2	equ	0xFDD
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _drawtext *****************
  5048 ;; Defined at:
  5049 ;;		line 473 in file "ST7735_TFT.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;  x               1    wreg     unsigned char 
  5052 ;;  y               1   56[COMRAM] unsigned char 
  5053 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5054 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5055 ;;  color           2   59[COMRAM] unsigned int 
  5056 ;;  bg              2   61[COMRAM] unsigned int 
  5057 ;;  size            1   63[COMRAM] unsigned char 
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;  x               1    0[BANK0 ] unsigned char 
  5060 ;;  i               2    3[BANK0 ] unsigned int 
  5061 ;;  textsize        2    1[BANK0 ] unsigned int 
  5062 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5063 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5064 ;; Return value:  Size  Location     Type
  5065 ;;		None               void
  5066 ;; Registers used:
  5067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5073 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5077 ;;Total ram usage:       17 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    9
  5080 ;; This function calls:
  5081 ;;		_drawChar
  5082 ;;		_strlen
  5083 ;; This function is called by:
  5084 ;;		_main
  5085 ;;		_Initialize_Screen
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           	psect	text15
  5090  000DEE                     __ptext15:
  5091                           	opt stack 0
  5092  000DEE                     _drawtext:
  5093                           	opt stack 21
  5094                           
  5095                           ;incstack = 0
  5096                           ;drawtext@x stored from wreg
  5097  000DEE  0100               	movlb	0	; () banked
  5098  000DF0  6FF3               	movwf	drawtext@x& (0+255),b
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;ST7735_TFT.c: 475: unsigned char cursor_x, cursor_y;
  5102                           ;ST7735_TFT.c: 476: unsigned int textsize, i;
  5103                           ;ST7735_TFT.c: 477: cursor_x = x, cursor_y = y;
  5104  000DF2  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  5105                           
  5106                           ; BSR set to: 0
  5107  000DF6  C039  F0F8         	movff	drawtext@y,drawtext@cursor_y
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;ST7735_TFT.c: 478: textsize = strlen(_text);
  5111  000DFA  C03A  F011         	movff	drawtext@_text,strlen@s
  5112  000DFE  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5113  000E02  ECF5  F00B         	call	_strlen	;wreg free
  5114  000E06  C011  F0F4         	movff	?_strlen,drawtext@textsize
  5115  000E0A  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  5116                           
  5117                           ;ST7735_TFT.c: 479: for(i = 0; i < textsize; i++){
  5118  000E0E  0E00               	movlw	0
  5119  000E10  0100               	movlb	0	; () banked
  5120  000E12  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  5121  000E14  0E00               	movlw	0
  5122  000E16  6FF6               	movwf	drawtext@i& (0+255),b
  5123  000E18  D064               	goto	l4574
  5124  000E1A                     l4548:
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;ST7735_TFT.c: 480: if(wrap && ((cursor_x + size * 5) > 128)){
  5128  000E1A  506F               	movf	_wrap,w,c
  5129  000E1C  B4D8               	btfsc	status,2,c
  5130  000E1E  D034               	goto	l4564
  5131                           
  5132                           ; BSR set to: 0
  5133  000E20  5040               	movf	drawtext@size,w,c
  5134  000E22  0D05               	mullw	5
  5135  000E24  0100               	movlb	0	; () banked
  5136  000E26  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5137  000E28  6E41               	movwf	??_drawtext& (0+255),c
  5138  000E2A  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5139  000E2C  50F3               	movf	prodl,w,c
  5140  000E2E  2641               	addwf	??_drawtext,f,c
  5141  000E30  50F4               	movf	prodh,w,c
  5142  000E32  2242               	addwfc	??_drawtext+1,f,c
  5143  000E34  BE42               	btfsc	??_drawtext+1,7,c
  5144  000E36  D028               	goto	l4564
  5145  000E38  5042               	movf	??_drawtext+1,w,c
  5146  000E3A  E104               	bnz	u3140
  5147  000E3C  0E81               	movlw	129
  5148  000E3E  5C41               	subwf	??_drawtext,w,c
  5149  000E40  A0D8               	btfss	status,0,c
  5150  000E42  D022               	goto	l4564
  5151  000E44                     u3140:
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;ST7735_TFT.c: 481: cursor_x = 0;
  5155  000E44  0E00               	movlw	0
  5156  000E46  0100               	movlb	0	; () banked
  5157  000E48  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;ST7735_TFT.c: 482: cursor_y = cursor_y + size * 7 + 3 ;
  5161  000E4A  5040               	movf	drawtext@size,w,c
  5162  000E4C  0D07               	mullw	7
  5163  000E4E  50F3               	movf	prodl,w,c
  5164  000E50  0100               	movlb	0	; () banked
  5165  000E52  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  5166  000E54  0F03               	addlw	3
  5167  000E56  0100               	movlb	0	; () banked
  5168  000E58  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;ST7735_TFT.c: 483: if(cursor_y > 160) cursor_y = 160;
  5172  000E5A  0EA0               	movlw	160
  5173  000E5C  0100               	movlb	0	; () banked
  5174  000E5E  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  5175  000E60  D004               	goto	l4560
  5176                           
  5177                           ; BSR set to: 0
  5178  000E62  0EA0               	movlw	160
  5179  000E64  0100               	movlb	0	; () banked
  5180  000E66  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5181  000E68  D000               	goto	l4560
  5182  000E6A                     l4560:
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;ST7735_TFT.c: 484: if(_text[i] == 0x20) goto _skip; }
  5186  000E6A  0100               	movlb	0	; () banked
  5187  000E6C  51F6               	movf	drawtext@i& (0+255),w,b
  5188  000E6E  243A               	addwf	drawtext@_text,w,c
  5189  000E70  6ED9               	movwf	fsr2l,c
  5190  000E72  0100               	movlb	0	; () banked
  5191  000E74  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5192  000E76  203B               	addwfc	drawtext@_text+1,w,c
  5193  000E78  6EDA               	movwf	fsr2h,c
  5194  000E7A  0E20               	movlw	32
  5195  000E7C  18DE               	xorwf	postinc2,w,c
  5196  000E7E  B4D8               	btfsc	status,2,c
  5197  000E80  D02C               	goto	l4572
  5198  000E82  D002               	goto	l4564
  5199                           
  5200                           ; BSR set to: 0
  5201  000E84  D02A               	goto	l4572
  5202                           
  5203                           ; BSR set to: 0
  5204  000E86  D000               	goto	l4564
  5205  000E88                     l4564:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;ST7735_TFT.c: 485: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5209  000E88  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  5210  000E8C  0100               	movlb	0	; () banked
  5211  000E8E  51F6               	movf	drawtext@i& (0+255),w,b
  5212  000E90  243A               	addwf	drawtext@_text,w,c
  5213  000E92  6ED9               	movwf	fsr2l,c
  5214  000E94  0100               	movlb	0	; () banked
  5215  000E96  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5216  000E98  203B               	addwfc	drawtext@_text+1,w,c
  5217  000E9A  6EDA               	movwf	fsr2h,c
  5218  000E9C  50DF               	movf	indf2,w,c
  5219  000E9E  6E2F               	movwf	drawChar@c,c
  5220  000EA0  C03C  F030         	movff	drawtext@color,drawChar@color
  5221  000EA4  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5222  000EA8  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5223  000EAC  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5224  000EB0  C040  F034         	movff	drawtext@size,drawChar@size
  5225  000EB4  0100               	movlb	0	; () banked
  5226  000EB6  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5227  000EB8  EC28  F005         	call	_drawChar
  5228                           
  5229                           ;ST7735_TFT.c: 486: cursor_x = cursor_x + size * 6;
  5230  000EBC  5040               	movf	drawtext@size,w,c
  5231  000EBE  0D06               	mullw	6
  5232  000EC0  50F3               	movf	prodl,w,c
  5233  000EC2  0100               	movlb	0	; () banked
  5234  000EC4  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  5235  000EC6  0100               	movlb	0	; () banked
  5236  000EC8  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;ST7735_TFT.c: 487: if(cursor_x > 128) cursor_x = 128;
  5240  000ECA  0E80               	movlw	128
  5241  000ECC  0100               	movlb	0	; () banked
  5242  000ECE  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  5243  000ED0  D004               	goto	l4572
  5244                           
  5245                           ; BSR set to: 0
  5246  000ED2  0E80               	movlw	128
  5247  000ED4  0100               	movlb	0	; () banked
  5248  000ED6  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5249                           
  5250                           ; BSR set to: 0
  5251  000ED8  D000               	goto	l4572
  5252  000EDA                     l4572:
  5253                           
  5254                           ; BSR set to: 0
  5255  000EDA  0100               	movlb	0	; () banked
  5256  000EDC  4BF6               	infsnz	drawtext@i& (0+255),f,b
  5257  000EDE  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  5258  000EE0  D000               	goto	l4574
  5259  000EE2                     l4574:
  5260                           
  5261                           ; BSR set to: 0
  5262  000EE2  0100               	movlb	0	; () banked
  5263  000EE4  51F4               	movf	drawtext@textsize& (0+255),w,b
  5264  000EE6  0100               	movlb	0	; () banked
  5265  000EE8  5DF6               	subwf	drawtext@i& (0+255),w,b
  5266  000EEA  0100               	movlb	0	; () banked
  5267  000EEC  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  5268  000EEE  0100               	movlb	0	; () banked
  5269  000EF0  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  5270  000EF2  A0D8               	btfss	status,0,c
  5271  000EF4  D792               	goto	l4548
  5272                           
  5273                           ; BSR set to: 0
  5274                           
  5275                           ; BSR set to: 0
  5276  000EF6  0012               	return		;funcret
  5277  000EF8                     __end_of_drawtext:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon	equ	0xFF2
  5286                           intcon2	equ	0xFF1
  5287                           postinc0	equ	0xFEE
  5288                           wreg	equ	0xFE8
  5289                           postdec1	equ	0xFE5
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           postinc2	equ	0xFDE
  5293                           postdec2	equ	0xFDD
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function _strlen *****************
  5299 ;; Defined at:
  5300 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5303 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5306 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  2   16[COMRAM] unsigned int 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : 0/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;Total ram usage:        6 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    3
  5323 ;; This function calls:
  5324 ;;		Nothing
  5325 ;; This function is called by:
  5326 ;;		_drawtext
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text16
  5331  0017EA                     __ptext16:
  5332                           	opt stack 0
  5333  0017EA                     _strlen:
  5334                           	opt stack 26
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;incstack = 0
  5338  0017EA  C011  F015         	movff	strlen@s,strlen@cp
  5339  0017EE  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5340  0017F2  D003               	goto	l4410
  5341  0017F4                     l4408:
  5342  0017F4  4A15               	infsnz	strlen@cp,f,c
  5343  0017F6  2A16               	incf	strlen@cp+1,f,c
  5344  0017F8  D000               	goto	l4410
  5345  0017FA                     l4410:
  5346  0017FA  C015  FFD9         	movff	strlen@cp,fsr2l
  5347  0017FE  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5348  001802  50DF               	movf	indf2,w,c
  5349  001804  A4D8               	btfss	status,2,c
  5350  001806  D7F6               	goto	l4408
  5351  001808  C011  F013         	movff	strlen@s,??_strlen
  5352  00180C  C012  F014         	movff	strlen@s+1,??_strlen+1
  5353  001810  1E13               	comf	??_strlen,f,c
  5354  001812  1E14               	comf	??_strlen+1,f,c
  5355  001814  4A13               	infsnz	??_strlen,f,c
  5356  001816  2A14               	incf	??_strlen+1,f,c
  5357  001818  5015               	movf	strlen@cp,w,c
  5358  00181A  2413               	addwf	??_strlen,w,c
  5359  00181C  6E11               	movwf	?_strlen,c
  5360  00181E  5016               	movf	strlen@cp+1,w,c
  5361  001820  2014               	addwfc	??_strlen+1,w,c
  5362  001822  6E12               	movwf	?_strlen+1,c
  5363  001824  D000               	goto	l1282
  5364  001826                     l1282:
  5365  001826  0012               	return		;funcret
  5366  001828                     __end_of_strlen:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           intcon2	equ	0xFF1
  5376                           postinc0	equ	0xFEE
  5377                           wreg	equ	0xFE8
  5378                           postdec1	equ	0xFE5
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _drawChar *****************
  5388 ;; Defined at:
  5389 ;;		line 446 in file "ST7735_TFT.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  x               1    wreg     unsigned char 
  5392 ;;  y               1   45[COMRAM] unsigned char 
  5393 ;;  c               1   46[COMRAM] unsigned char 
  5394 ;;  color           2   47[COMRAM] unsigned int 
  5395 ;;  bg              2   49[COMRAM] unsigned int 
  5396 ;;  size            1   51[COMRAM] unsigned char 
  5397 ;; Auto vars:     Size  Location     Type
  5398 ;;  x               1   53[COMRAM] unsigned char 
  5399 ;;  line            1   52[COMRAM] unsigned char 
  5400 ;;  i               1   55[COMRAM] unsigned char 
  5401 ;;  j               1   54[COMRAM] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5411 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;Total ram usage:       11 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:    8
  5418 ;; This function calls:
  5419 ;;		___wmul
  5420 ;;		_drawPixel
  5421 ;;		_fillRect
  5422 ;; This function is called by:
  5423 ;;		_drawtext
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text17
  5428  000A50                     __ptext17:
  5429                           	opt stack 0
  5430  000A50                     _drawChar:
  5431                           	opt stack 21
  5432                           
  5433                           ;incstack = 0
  5434                           ;drawChar@x stored from wreg
  5435  000A50  6E36               	movwf	drawChar@x,c
  5436                           
  5437                           ;ST7735_TFT.c: 448: char i, j;
  5438                           ;ST7735_TFT.c: 449: if((x >= 128) || (y >= 160))
  5439  000A52  0E80               	movlw	128
  5440  000A54  6036               	cpfslt	drawChar@x,c
  5441  000A56  D0A6               	goto	l111
  5442  000A58  0E9F               	movlw	159
  5443  000A5A  642E               	cpfsgt	drawChar@y,c
  5444  000A5C  D001               	goto	l4356
  5445                           
  5446                           ;ST7735_TFT.c: 450: return;
  5447  000A5E  D0A2               	goto	l111
  5448  000A60                     l4356:
  5449                           
  5450                           ;ST7735_TFT.c: 451: if(size < 1) size = 1;
  5451  000A60  5034               	movf	drawChar@size,w,c
  5452  000A62  A4D8               	btfss	status,2,c
  5453  000A64  D003               	goto	l4360
  5454  000A66  0E01               	movlw	1
  5455  000A68  6E34               	movwf	drawChar@size,c
  5456  000A6A  D000               	goto	l4360
  5457  000A6C                     l4360:
  5458                           
  5459                           ;ST7735_TFT.c: 452: if((c < ' ') || (c > '~'))
  5460  000A6C  0E1F               	movlw	31
  5461  000A6E  642F               	cpfsgt	drawChar@c,c
  5462  000A70  D004               	goto	l4364
  5463  000A72  0E7E               	movlw	126
  5464  000A74  642F               	cpfsgt	drawChar@c,c
  5465  000A76  D003               	goto	l113
  5466  000A78  D000               	goto	l4364
  5467  000A7A                     l4364:
  5468                           
  5469                           ;ST7735_TFT.c: 453: c = '?';
  5470  000A7A  0E3F               	movlw	63
  5471  000A7C  6E2F               	movwf	drawChar@c,c
  5472  000A7E                     l113:
  5473                           
  5474                           ;ST7735_TFT.c: 454: for(i=0; i<5; i++ ) {
  5475  000A7E  0E00               	movlw	0
  5476  000A80  6E38               	movwf	drawChar@i,c
  5477  000A82                     l4366:
  5478  000A82  0E04               	movlw	4
  5479  000A84  6438               	cpfsgt	drawChar@i,c
  5480  000A86  D001               	goto	l4370
  5481  000A88  D08D               	goto	l111
  5482  000A8A                     l4370:
  5483                           
  5484                           ;ST7735_TFT.c: 455: unsigned char line;
  5485                           ;ST7735_TFT.c: 456: if(c < 'S')
  5486  000A8A  0E53               	movlw	83
  5487  000A8C  602F               	cpfslt	drawChar@c,c
  5488  000A8E  D015               	goto	l4374
  5489                           
  5490                           ;ST7735_TFT.c: 457: line = font[(c - 32)*5 + i];
  5491  000A90  0EE0               	movlw	224
  5492  000A92  242F               	addwf	drawChar@c,w,c
  5493  000A94  6E11               	movwf	___wmul@multiplier,c
  5494  000A96  6A12               	clrf	___wmul@multiplier+1,c
  5495  000A98  0EFF               	movlw	255
  5496  000A9A  2212               	addwfc	___wmul@multiplier+1,f,c
  5497  000A9C  0E00               	movlw	0
  5498  000A9E  6E14               	movwf	___wmul@multiplicand+1,c
  5499  000AA0  0E05               	movlw	5
  5500  000AA2  6E13               	movwf	___wmul@multiplicand,c
  5501  000AA4  ECD4  F00C         	call	___wmul	;wreg free
  5502  000AA8  5038               	movf	drawChar@i,w,c
  5503  000AAA  2611               	addwf	?___wmul,f,c
  5504  000AAC  0E00               	movlw	0
  5505  000AAE  2212               	addwfc	?___wmul+1,f,c
  5506  000AB0  0E41               	movlw	low _font
  5507  000AB2  2411               	addwf	?___wmul,w,c
  5508  000AB4  6EF6               	movwf	tblptrl,c
  5509  000AB6  0EFD               	movlw	high _font
  5510  000AB8  D014               	goto	L3
  5511  000ABA                     l4374:
  5512                           
  5513                           ;ST7735_TFT.c: 458: else
  5514                           ;ST7735_TFT.c: 459: line = font2[(c - 'S')*5 + i];
  5515  000ABA  0EAD               	movlw	173
  5516  000ABC  242F               	addwf	drawChar@c,w,c
  5517  000ABE  6E11               	movwf	___wmul@multiplier,c
  5518  000AC0  6A12               	clrf	___wmul@multiplier+1,c
  5519  000AC2  0EFF               	movlw	255
  5520  000AC4  2212               	addwfc	___wmul@multiplier+1,f,c
  5521  000AC6  0E00               	movlw	0
  5522  000AC8  6E14               	movwf	___wmul@multiplicand+1,c
  5523  000ACA  0E05               	movlw	5
  5524  000ACC  6E13               	movwf	___wmul@multiplicand,c
  5525  000ACE  ECD4  F00C         	call	___wmul	;wreg free
  5526  000AD2  5038               	movf	drawChar@i,w,c
  5527  000AD4  2611               	addwf	?___wmul,f,c
  5528  000AD6  0E00               	movlw	0
  5529  000AD8  2212               	addwfc	?___wmul+1,f,c
  5530  000ADA  0E40               	movlw	low _font2
  5531  000ADC  2411               	addwf	?___wmul,w,c
  5532  000ADE  6EF6               	movwf	tblptrl,c
  5533  000AE0  0EFE               	movlw	high _font2
  5534  000AE2                     L3:
  5535  000AE2  2012               	addwfc	?___wmul+1,w,c
  5536  000AE4  6EF7               	movwf	tblptrh,c
  5537  000AE6                     	if	0	;There are less than 3 active tblptr bytes
  5538  000AE6                     	endif
  5539  000AE6  0008               	tblrd		*
  5540  000AE8  CFF5 F035          	movff	tablat,drawChar@line
  5541  000AEC  D000               	goto	l4376
  5542  000AEE                     l4376:
  5543                           
  5544                           ;ST7735_TFT.c: 460: for(j=0; j<7; j++, line >>= 1) {
  5545  000AEE  0E00               	movlw	0
  5546  000AF0  6E37               	movwf	drawChar@j,c
  5547  000AF2                     l4378:
  5548  000AF2  0E06               	movlw	6
  5549  000AF4  6437               	cpfsgt	drawChar@j,c
  5550  000AF6  D001               	goto	l120
  5551  000AF8  D053               	goto	l4402
  5552  000AFA                     l120:
  5553                           
  5554                           ;ST7735_TFT.c: 461: if(line & 0x01) {
  5555  000AFA  A035               	btfss	drawChar@line,0,c
  5556  000AFC  D023               	goto	l4388
  5557                           
  5558                           ;ST7735_TFT.c: 462: if(size == 1) drawPixel(x+i, y+j, color);
  5559  000AFE  0434               	decf	drawChar@size,w,c
  5560  000B00  A4D8               	btfss	status,2,c
  5561  000B02  D00C               	goto	l4386
  5562  000B04  502E               	movf	drawChar@y,w,c
  5563  000B06  2437               	addwf	drawChar@j,w,c
  5564  000B08  6E18               	movwf	drawPixel@y,c
  5565  000B0A  C030  F019         	movff	drawChar@color,drawPixel@color
  5566  000B0E  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5567  000B12  5036               	movf	drawChar@x,w,c
  5568  000B14  2438               	addwf	drawChar@i,w,c
  5569  000B16  ECA7  F00C         	call	_drawPixel
  5570  000B1A  D03E               	goto	l4396
  5571  000B1C                     l4386:
  5572                           
  5573                           ;ST7735_TFT.c: 463: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5574  000B1C  5037               	movf	drawChar@j,w,c
  5575  000B1E  0234               	mulwf	drawChar@size,c
  5576  000B20  50F3               	movf	prodl,w,c
  5577  000B22  242E               	addwf	drawChar@y,w,c
  5578  000B24  6E23               	movwf	fillRect@y,c
  5579  000B26  C034  F024         	movff	drawChar@size,fillRect@w
  5580  000B2A  C034  F025         	movff	drawChar@size,fillRect@h
  5581  000B2E  C030  F026         	movff	drawChar@color,fillRect@color
  5582  000B32  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5583  000B36  5038               	movf	drawChar@i,w,c
  5584  000B38  0234               	mulwf	drawChar@size,c
  5585  000B3A  50F3               	movf	prodl,w,c
  5586  000B3C  2436               	addwf	drawChar@x,w,c
  5587  000B3E  ECAC  F00B         	call	_fillRect
  5588                           
  5589                           ;ST7735_TFT.c: 464: }
  5590  000B42  D02A               	goto	l4396
  5591  000B44                     l4388:
  5592                           
  5593                           ;ST7735_TFT.c: 465: else if(bg != color) {
  5594  000B44  5030               	movf	drawChar@color,w,c
  5595  000B46  1832               	xorwf	drawChar@bg,w,c
  5596  000B48  E104               	bnz	u2900
  5597  000B4A  5031               	movf	drawChar@color+1,w,c
  5598  000B4C  1833               	xorwf	drawChar@bg+1,w,c
  5599  000B4E  B4D8               	btfsc	status,2,c
  5600  000B50  D023               	goto	l4396
  5601  000B52                     u2900:
  5602                           
  5603                           ;ST7735_TFT.c: 466: if(size == 1) drawPixel(x+i, y+j, bg);
  5604  000B52  0434               	decf	drawChar@size,w,c
  5605  000B54  A4D8               	btfss	status,2,c
  5606  000B56  D00C               	goto	l4394
  5607  000B58  502E               	movf	drawChar@y,w,c
  5608  000B5A  2437               	addwf	drawChar@j,w,c
  5609  000B5C  6E18               	movwf	drawPixel@y,c
  5610  000B5E  C032  F019         	movff	drawChar@bg,drawPixel@color
  5611  000B62  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5612  000B66  5036               	movf	drawChar@x,w,c
  5613  000B68  2438               	addwf	drawChar@i,w,c
  5614  000B6A  ECA7  F00C         	call	_drawPixel
  5615  000B6E  D014               	goto	l4396
  5616  000B70                     l4394:
  5617                           
  5618                           ;ST7735_TFT.c: 467: else fillRect(x+i*size, y+j*size, size, size, bg);
  5619  000B70  5037               	movf	drawChar@j,w,c
  5620  000B72  0234               	mulwf	drawChar@size,c
  5621  000B74  50F3               	movf	prodl,w,c
  5622  000B76  242E               	addwf	drawChar@y,w,c
  5623  000B78  6E23               	movwf	fillRect@y,c
  5624  000B7A  C034  F024         	movff	drawChar@size,fillRect@w
  5625  000B7E  C034  F025         	movff	drawChar@size,fillRect@h
  5626  000B82  C032  F026         	movff	drawChar@bg,fillRect@color
  5627  000B86  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5628  000B8A  5038               	movf	drawChar@i,w,c
  5629  000B8C  0234               	mulwf	drawChar@size,c
  5630  000B8E  50F3               	movf	prodl,w,c
  5631  000B90  2436               	addwf	drawChar@x,w,c
  5632  000B92  ECAC  F00B         	call	_fillRect
  5633  000B96  D000               	goto	l4396
  5634  000B98                     l4396:
  5635  000B98  2A37               	incf	drawChar@j,f,c
  5636  000B9A  90D8               	bcf	status,0,c
  5637  000B9C  3235               	rrcf	drawChar@line,f,c
  5638  000B9E  D7A9               	goto	l4378
  5639  000BA0                     l4402:
  5640  000BA0  2A38               	incf	drawChar@i,f,c
  5641  000BA2  D76F               	goto	l4366
  5642  000BA4                     l111:
  5643  000BA4  0012               	return		;funcret
  5644  000BA6                     __end_of_drawChar:
  5645                           	opt stack 0
  5646                           tblptru	equ	0xFF8
  5647                           tblptrh	equ	0xFF7
  5648                           tblptrl	equ	0xFF6
  5649                           tablat	equ	0xFF5
  5650                           prodh	equ	0xFF4
  5651                           prodl	equ	0xFF3
  5652                           intcon	equ	0xFF2
  5653                           intcon2	equ	0xFF1
  5654                           postinc0	equ	0xFEE
  5655                           wreg	equ	0xFE8
  5656                           postdec1	equ	0xFE5
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _fillRect *****************
  5666 ;; Defined at:
  5667 ;;		line 436 in file "ST7735_TFT.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  x               1    wreg     unsigned char 
  5670 ;;  y               1   34[COMRAM] unsigned char 
  5671 ;;  w               1   35[COMRAM] unsigned char 
  5672 ;;  h               1   36[COMRAM] unsigned char 
  5673 ;;  color           2   37[COMRAM] unsigned int 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  x               1   42[COMRAM] unsigned char 
  5676 ;;  i               2   43[COMRAM] int 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;		None               void
  5679 ;; Registers used:
  5680 ;;		wreg, status,2, status,0, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5686 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5688 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;Total ram usage:       11 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    7
  5693 ;; This function calls:
  5694 ;;		_drawFastVLine
  5695 ;; This function is called by:
  5696 ;;		_drawChar
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           	psect	text18
  5701  001758                     __ptext18:
  5702                           	opt stack 0
  5703  001758                     _fillRect:
  5704                           	opt stack 21
  5705                           
  5706                           ;incstack = 0
  5707                           ;fillRect@x stored from wreg
  5708  001758  6E2B               	movwf	fillRect@x,c
  5709                           
  5710                           ;ST7735_TFT.c: 438: signed int i;
  5711                           ;ST7735_TFT.c: 440: for (i = x; i < x + w; i++)
  5712  00175A  C02B  F02C         	movff	fillRect@x,fillRect@i
  5713  00175E  6A2D               	clrf	fillRect@i+1,c
  5714  001760  D00E               	goto	l4218
  5715  001762                     l4214:
  5716                           
  5717                           ;ST7735_TFT.c: 441: {
  5718                           ;ST7735_TFT.c: 442: drawFastVLine(i, y, h, color);
  5719  001762  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5720  001766  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5721  00176A  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5722  00176E  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5723  001772  502C               	movf	fillRect@i,w,c
  5724  001774  EC3B  F009         	call	_drawFastVLine
  5725  001778  4A2C               	infsnz	fillRect@i,f,c
  5726  00177A  2A2D               	incf	fillRect@i+1,f,c
  5727  00177C  D000               	goto	l4218
  5728  00177E                     l4218:
  5729  00177E  5024               	movf	fillRect@w,w,c
  5730  001780  C02B  F028         	movff	fillRect@x,??_fillRect
  5731  001784  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5732  001786  2628               	addwf	??_fillRect,f,c
  5733  001788  0E00               	movlw	0
  5734  00178A  2229               	addwfc	??_fillRect+1,f,c
  5735  00178C  5028               	movf	??_fillRect,w,c
  5736  00178E  5C2C               	subwf	fillRect@i,w,c
  5737  001790  502D               	movf	fillRect@i+1,w,c
  5738  001792  0A80               	xorlw	128
  5739  001794  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5740  001796  5029               	movf	??_fillRect+1,w,c
  5741  001798  0A80               	xorlw	128
  5742  00179A  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5743  00179C  A0D8               	btfss	status,0,c
  5744  00179E  D7E1               	goto	l4214
  5745  0017A0  0012               	return		;funcret
  5746  0017A2                     __end_of_fillRect:
  5747                           	opt stack 0
  5748                           tblptru	equ	0xFF8
  5749                           tblptrh	equ	0xFF7
  5750                           tblptrl	equ	0xFF6
  5751                           tablat	equ	0xFF5
  5752                           prodh	equ	0xFF4
  5753                           prodl	equ	0xFF3
  5754                           intcon	equ	0xFF2
  5755                           intcon2	equ	0xFF1
  5756                           postinc0	equ	0xFEE
  5757                           wreg	equ	0xFE8
  5758                           postdec1	equ	0xFE5
  5759                           fsr1l	equ	0xFE1
  5760                           indf2	equ	0xFDF
  5761                           postinc2	equ	0xFDE
  5762                           postdec2	equ	0xFDD
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function _drawFastVLine *****************
  5768 ;; Defined at:
  5769 ;;		line 415 in file "ST7735_TFT.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  x               1    wreg     unsigned char 
  5772 ;;  y               1   23[COMRAM] unsigned char 
  5773 ;;  h               1   24[COMRAM] unsigned char 
  5774 ;;  color           2   25[COMRAM] unsigned int 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  x               1   33[COMRAM] unsigned char 
  5777 ;;  lo              1   32[COMRAM] unsigned char 
  5778 ;;  hi              1   31[COMRAM] unsigned char 
  5779 ;; Return value:  Size  Location     Type
  5780 ;;		None               void
  5781 ;; Registers used:
  5782 ;;		wreg, status,2, status,0, cstack
  5783 ;; Tracked objects:
  5784 ;;		On entry : 0/0
  5785 ;;		On exit  : 0/0
  5786 ;;		Unchanged: 0/0
  5787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5788 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5789 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5790 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5791 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5792 ;;Total ram usage:       11 bytes
  5793 ;; Hardware stack levels used:    1
  5794 ;; Hardware stack levels required when called:    6
  5795 ;; This function calls:
  5796 ;;		_setAddrWindow
  5797 ;;		_spiwrite
  5798 ;; This function is called by:
  5799 ;;		_fillRect
  5800 ;;		_fillCircleHelper
  5801 ;;		_fillCircle
  5802 ;;		_drawRect
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text19
  5807  001276                     __ptext19:
  5808                           	opt stack 0
  5809  001276                     _drawFastVLine:
  5810                           	opt stack 22
  5811                           
  5812                           ;incstack = 0
  5813                           ;drawFastVLine@x stored from wreg
  5814  001276  6E22               	movwf	drawFastVLine@x,c
  5815                           
  5816                           ;ST7735_TFT.c: 417: unsigned char hi, lo;
  5817                           ;ST7735_TFT.c: 418: if((x >= 128) || (y >= 160))
  5818  001278  0E80               	movlw	128
  5819  00127A  6022               	cpfslt	drawFastVLine@x,c
  5820  00127C  D03F               	goto	l95
  5821  00127E  0E9F               	movlw	159
  5822  001280  6418               	cpfsgt	drawFastVLine@y,c
  5823  001282  D001               	goto	l4154
  5824                           
  5825                           ;ST7735_TFT.c: 419: return;
  5826  001284  D03B               	goto	l95
  5827  001286                     l4154:
  5828                           
  5829                           ;ST7735_TFT.c: 420: if((y + h - 1) >= 160)
  5830  001286  0EFF               	movlw	255
  5831  001288  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5832  00128A  0EFF               	movlw	255
  5833  00128C  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5834  00128E  5019               	movf	drawFastVLine@h,w,c
  5835  001290  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5836  001294  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5837  001296  261E               	addwf	??_drawFastVLine+2,f,c
  5838  001298  0E00               	movlw	0
  5839  00129A  221F               	addwfc	??_drawFastVLine+3,f,c
  5840  00129C  501C               	movf	??_drawFastVLine,w,c
  5841  00129E  261E               	addwf	??_drawFastVLine+2,f,c
  5842  0012A0  501D               	movf	??_drawFastVLine+1,w,c
  5843  0012A2  221F               	addwfc	??_drawFastVLine+3,f,c
  5844  0012A4  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5845  0012A6  D00B               	goto	l4158
  5846  0012A8  501F               	movf	??_drawFastVLine+3,w,c
  5847  0012AA  E104               	bnz	u2710
  5848  0012AC  0EA0               	movlw	160
  5849  0012AE  5C1E               	subwf	??_drawFastVLine+2,w,c
  5850  0012B0  A0D8               	btfss	status,0,c
  5851  0012B2  D005               	goto	l4158
  5852  0012B4                     u2710:
  5853                           
  5854                           ;ST7735_TFT.c: 421: h = 160 - y;
  5855  0012B4  5018               	movf	drawFastVLine@y,w,c
  5856  0012B6  0800               	sublw	0
  5857  0012B8  0FA0               	addlw	160
  5858  0012BA  6E19               	movwf	drawFastVLine@h,c
  5859  0012BC  D000               	goto	l4158
  5860  0012BE                     l4158:
  5861                           
  5862                           ;ST7735_TFT.c: 422: hi = color >> 8; lo = color;
  5863  0012BE  501B               	movf	drawFastVLine@color+1,w,c
  5864  0012C0  6E20               	movwf	drawFastVLine@hi,c
  5865  0012C2  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5866                           
  5867                           ;ST7735_TFT.c: 423: setAddrWindow(x, y, x, y + h - 1);
  5868  0012C6  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5869  0012CA  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5870  0012CE  5018               	movf	drawFastVLine@y,w,c
  5871  0012D0  2419               	addwf	drawFastVLine@h,w,c
  5872  0012D2  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5873  0012D4  041C               	decf	??_drawFastVLine,w,c
  5874  0012D6  6E16               	movwf	setAddrWindow@y1,c
  5875  0012D8  5022               	movf	drawFastVLine@x,w,c
  5876  0012DA  EC85  F00B         	call	_setAddrWindow
  5877                           
  5878                           ;ST7735_TFT.c: 424: PORTCbits.RC0 = 1;
  5879  0012DE  8082               	bsf	3970,0,c	;volatile
  5880                           
  5881                           ;ST7735_TFT.c: 425: PORTCbits.RC2 = 0;
  5882  0012E0  9482               	bcf	3970,2,c	;volatile
  5883                           
  5884                           ;ST7735_TFT.c: 427: while (h--) {
  5885  0012E2  D007               	goto	l4170
  5886  0012E4                     l4168:
  5887                           
  5888                           ;ST7735_TFT.c: 428: spiwrite(hi);
  5889  0012E4  5020               	movf	drawFastVLine@hi,w,c
  5890  0012E6  EC4B  F00D         	call	_spiwrite
  5891                           
  5892                           ;ST7735_TFT.c: 429: spiwrite(lo);
  5893  0012EA  5021               	movf	drawFastVLine@lo,w,c
  5894  0012EC  EC4B  F00D         	call	_spiwrite
  5895  0012F0  D000               	goto	l4170
  5896  0012F2                     l4170:
  5897  0012F2  0619               	decf	drawFastVLine@h,f,c
  5898  0012F4  2819               	incf	drawFastVLine@h,w,c
  5899  0012F6  A4D8               	btfss	status,2,c
  5900  0012F8  D7F5               	goto	l4168
  5901                           
  5902                           ;ST7735_TFT.c: 430: }
  5903                           ;ST7735_TFT.c: 431: PORTCbits.RC2 = 1;
  5904  0012FA  8482               	bsf	3970,2,c	;volatile
  5905  0012FC                     l95:
  5906  0012FC  0012               	return		;funcret
  5907  0012FE                     __end_of_drawFastVLine:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           intcon	equ	0xFF2
  5916                           intcon2	equ	0xFF1
  5917                           postinc0	equ	0xFEE
  5918                           wreg	equ	0xFE8
  5919                           postdec1	equ	0xFE5
  5920                           fsr1l	equ	0xFE1
  5921                           indf2	equ	0xFDF
  5922                           postinc2	equ	0xFDE
  5923                           postdec2	equ	0xFDD
  5924                           fsr2h	equ	0xFDA
  5925                           fsr2l	equ	0xFD9
  5926                           status	equ	0xFD8
  5927                           
  5928 ;; *************** function _drawPixel *****************
  5929 ;; Defined at:
  5930 ;;		line 406 in file "ST7735_TFT.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;  x               1    wreg     unsigned char 
  5933 ;;  y               1   23[COMRAM] unsigned char 
  5934 ;;  color           2   24[COMRAM] unsigned int 
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;  x               1   26[COMRAM] unsigned char 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;		None               void
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0, cstack
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5946 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;Total ram usage:        4 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    6
  5953 ;; This function calls:
  5954 ;;		_setAddrWindow
  5955 ;;		_write_data
  5956 ;; This function is called by:
  5957 ;;		_drawChar
  5958 ;;		_drawCircle
  5959 ;;		_drawCircleHelper
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	text20
  5964  00194E                     __ptext20:
  5965                           	opt stack 0
  5966  00194E                     _drawPixel:
  5967                           	opt stack 22
  5968                           
  5969                           ;incstack = 0
  5970                           ;drawPixel@x stored from wreg
  5971  00194E  6E1B               	movwf	drawPixel@x,c
  5972                           
  5973                           ;ST7735_TFT.c: 408: if((x >= 128) || (y >= 160))
  5974  001950  0E80               	movlw	128
  5975  001952  601B               	cpfslt	drawPixel@x,c
  5976  001954  D013               	goto	l89
  5977  001956  0E9F               	movlw	159
  5978  001958  6418               	cpfsgt	drawPixel@y,c
  5979  00195A  D001               	goto	l4206
  5980                           
  5981                           ;ST7735_TFT.c: 409: return;
  5982  00195C  D00F               	goto	l89
  5983  00195E                     l4206:
  5984                           
  5985                           ;ST7735_TFT.c: 410: setAddrWindow(x,y,x+1,y+1);
  5986  00195E  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5987  001962  281B               	incf	drawPixel@x,w,c
  5988  001964  6E15               	movwf	setAddrWindow@x1,c
  5989  001966  2818               	incf	drawPixel@y,w,c
  5990  001968  6E16               	movwf	setAddrWindow@y1,c
  5991  00196A  501B               	movf	drawPixel@x,w,c
  5992  00196C  EC85  F00B         	call	_setAddrWindow
  5993                           
  5994                           ;ST7735_TFT.c: 411: write_data(color >> 8);
  5995  001970  501A               	movf	drawPixel@color+1,w,c
  5996  001972  EC8C  F00D         	call	_write_data
  5997                           
  5998                           ;ST7735_TFT.c: 412: write_data(color & 0xFF);
  5999  001976  5019               	movf	drawPixel@color,w,c
  6000  001978  EC8C  F00D         	call	_write_data
  6001  00197C                     l89:
  6002  00197C  0012               	return		;funcret
  6003  00197E                     __end_of_drawPixel:
  6004                           	opt stack 0
  6005                           tblptru	equ	0xFF8
  6006                           tblptrh	equ	0xFF7
  6007                           tblptrl	equ	0xFF6
  6008                           tablat	equ	0xFF5
  6009                           prodh	equ	0xFF4
  6010                           prodl	equ	0xFF3
  6011                           intcon	equ	0xFF2
  6012                           intcon2	equ	0xFF1
  6013                           postinc0	equ	0xFEE
  6014                           wreg	equ	0xFE8
  6015                           postdec1	equ	0xFE5
  6016                           fsr1l	equ	0xFE1
  6017                           indf2	equ	0xFDF
  6018                           postinc2	equ	0xFDE
  6019                           postdec2	equ	0xFDD
  6020                           fsr2h	equ	0xFDA
  6021                           fsr2l	equ	0xFD9
  6022                           status	equ	0xFD8
  6023                           
  6024 ;; *************** function _setAddrWindow *****************
  6025 ;; Defined at:
  6026 ;;		line 391 in file "ST7735_TFT.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  x0              1    wreg     unsigned char 
  6029 ;;  y0              1   19[COMRAM] unsigned char 
  6030 ;;  x1              1   20[COMRAM] unsigned char 
  6031 ;;  y1              1   21[COMRAM] unsigned char 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  x0              1   22[COMRAM] unsigned char 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;		None               void
  6036 ;; Registers used:
  6037 ;;		wreg, status,2, status,0, cstack
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6043 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;Total ram usage:        4 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    5
  6050 ;; This function calls:
  6051 ;;		_write_command
  6052 ;;		_write_data
  6053 ;; This function is called by:
  6054 ;;		_drawPixel
  6055 ;;		_drawFastVLine
  6056 ;;		_fillRectangle
  6057 ;;		_drawFastHLine
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           	psect	text21
  6062  00170A                     __ptext21:
  6063                           	opt stack 0
  6064  00170A                     _setAddrWindow:
  6065                           	opt stack 22
  6066                           
  6067                           ;incstack = 0
  6068                           ;setAddrWindow@x0 stored from wreg
  6069  00170A  6E17               	movwf	setAddrWindow@x0,c
  6070                           
  6071                           ;ST7735_TFT.c: 393: write_command(0x2A);
  6072  00170C  0E2A               	movlw	42
  6073  00170E  EC94  F00D         	call	_write_command
  6074                           
  6075                           ;ST7735_TFT.c: 394: write_data(0);
  6076  001712  0E00               	movlw	0
  6077  001714  EC8C  F00D         	call	_write_data
  6078                           
  6079                           ;ST7735_TFT.c: 395: write_data(x0 + colstart);
  6080  001718  5017               	movf	setAddrWindow@x0,w,c
  6081  00171A  2459               	addwf	_colstart,w,c
  6082  00171C  EC8C  F00D         	call	_write_data
  6083                           
  6084                           ;ST7735_TFT.c: 396: write_data(0);
  6085  001720  0E00               	movlw	0
  6086  001722  EC8C  F00D         	call	_write_data
  6087                           
  6088                           ;ST7735_TFT.c: 397: write_data(x1 + colstart);
  6089  001726  5015               	movf	setAddrWindow@x1,w,c
  6090  001728  2459               	addwf	_colstart,w,c
  6091  00172A  EC8C  F00D         	call	_write_data
  6092                           
  6093                           ;ST7735_TFT.c: 398: write_command(0x2B);
  6094  00172E  0E2B               	movlw	43
  6095  001730  EC94  F00D         	call	_write_command
  6096                           
  6097                           ;ST7735_TFT.c: 399: write_data(0);
  6098  001734  0E00               	movlw	0
  6099  001736  EC8C  F00D         	call	_write_data
  6100                           
  6101                           ;ST7735_TFT.c: 400: write_data(y0 + rowstart);
  6102  00173A  5014               	movf	setAddrWindow@y0,w,c
  6103  00173C  2462               	addwf	_rowstart,w,c
  6104  00173E  EC8C  F00D         	call	_write_data
  6105                           
  6106                           ;ST7735_TFT.c: 401: write_data(0);
  6107  001742  0E00               	movlw	0
  6108  001744  EC8C  F00D         	call	_write_data
  6109                           
  6110                           ;ST7735_TFT.c: 402: write_data(y1 + rowstart);
  6111  001748  5016               	movf	setAddrWindow@y1,w,c
  6112  00174A  2462               	addwf	_rowstart,w,c
  6113  00174C  EC8C  F00D         	call	_write_data
  6114                           
  6115                           ;ST7735_TFT.c: 403: write_command(0x2C);
  6116  001750  0E2C               	movlw	44
  6117  001752  EC94  F00D         	call	_write_command
  6118  001756  0012               	return		;funcret
  6119  001758                     __end_of_setAddrWindow:
  6120                           	opt stack 0
  6121                           tblptru	equ	0xFF8
  6122                           tblptrh	equ	0xFF7
  6123                           tblptrl	equ	0xFF6
  6124                           tablat	equ	0xFF5
  6125                           prodh	equ	0xFF4
  6126                           prodl	equ	0xFF3
  6127                           intcon	equ	0xFF2
  6128                           intcon2	equ	0xFF1
  6129                           postinc0	equ	0xFEE
  6130                           wreg	equ	0xFE8
  6131                           postdec1	equ	0xFE5
  6132                           fsr1l	equ	0xFE1
  6133                           indf2	equ	0xFDF
  6134                           postinc2	equ	0xFDE
  6135                           postdec2	equ	0xFDD
  6136                           fsr2h	equ	0xFDA
  6137                           fsr2l	equ	0xFD9
  6138                           status	equ	0xFD8
  6139                           
  6140 ;; *************** function _TFT_GreenTab_Initialize *****************
  6141 ;; Defined at:
  6142 ;;		line 643 in file "ST7735_TFT.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;		None
  6147 ;; Return value:  Size  Location     Type
  6148 ;;		None               void
  6149 ;; Registers used:
  6150 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6151 ;; Tracked objects:
  6152 ;;		On entry : 0/0
  6153 ;;		On exit  : 0/0
  6154 ;;		Unchanged: 0/0
  6155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6160 ;;Total ram usage:        0 bytes
  6161 ;; Hardware stack levels used:    1
  6162 ;; Hardware stack levels required when called:    6
  6163 ;; This function calls:
  6164 ;;		_Rcmd1
  6165 ;;		_Rcmd2red
  6166 ;;		_Rcmd3
  6167 ;;		_write_command
  6168 ;;		_write_data
  6169 ;; This function is called by:
  6170 ;;		_Initialize_Screen
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           	psect	text22
  6175  00197E                     __ptext22:
  6176                           	opt stack 0
  6177  00197E                     _TFT_GreenTab_Initialize:
  6178                           	opt stack 23
  6179                           
  6180                           ;ST7735_TFT.c: 645: PORTCbits.RC2 = 1;
  6181                           
  6182                           ;incstack = 0
  6183  00197E  8482               	bsf	3970,2,c	;volatile
  6184                           
  6185                           ;ST7735_TFT.c: 646: PORTCbits.RC0 = 0;
  6186  001980  9082               	bcf	3970,0,c	;volatile
  6187                           
  6188                           ;ST7735_TFT.c: 648: SSPSTAT=0x80;
  6189  001982  0E80               	movlw	128
  6190  001984  6EC7               	movwf	4039,c	;volatile
  6191                           
  6192                           ;ST7735_TFT.c: 649: SSPCON1=0x30;
  6193  001986  0E30               	movlw	48
  6194  001988  6EC6               	movwf	4038,c	;volatile
  6195                           
  6196                           ;ST7735_TFT.c: 652: Rcmd1();
  6197  00198A  EC6F  F006         	call	_Rcmd1	;wreg free
  6198                           
  6199                           ;ST7735_TFT.c: 653: Rcmd2red();
  6200  00198E  EC14  F00C         	call	_Rcmd2red	;wreg free
  6201                           
  6202                           ;ST7735_TFT.c: 654: Rcmd3();
  6203  001992  EC7C  F007         	call	_Rcmd3	;wreg free
  6204                           
  6205                           ;ST7735_TFT.c: 655: write_command(0x36);
  6206  001996  0E36               	movlw	54
  6207  001998  EC94  F00D         	call	_write_command
  6208                           
  6209                           ;ST7735_TFT.c: 656: write_data(0xC0);
  6210  00199C  0EC0               	movlw	192
  6211  00199E  EC8C  F00D         	call	_write_data
  6212                           
  6213                           ;ST7735_TFT.c: 657: _tft_type = 1;
  6214  0019A2  0E01               	movlw	1
  6215  0019A4  6E53               	movwf	__tft_type,c
  6216  0019A6  0012               	return		;funcret
  6217  0019A8                     __end_of_TFT_GreenTab_Initialize:
  6218                           	opt stack 0
  6219                           tblptru	equ	0xFF8
  6220                           tblptrh	equ	0xFF7
  6221                           tblptrl	equ	0xFF6
  6222                           tablat	equ	0xFF5
  6223                           prodh	equ	0xFF4
  6224                           prodl	equ	0xFF3
  6225                           intcon	equ	0xFF2
  6226                           intcon2	equ	0xFF1
  6227                           postinc0	equ	0xFEE
  6228                           wreg	equ	0xFE8
  6229                           postdec1	equ	0xFE5
  6230                           fsr1l	equ	0xFE1
  6231                           indf2	equ	0xFDF
  6232                           postinc2	equ	0xFDE
  6233                           postdec2	equ	0xFDD
  6234                           fsr2h	equ	0xFDA
  6235                           fsr2l	equ	0xFD9
  6236                           status	equ	0xFD8
  6237                           
  6238 ;; *************** function _Rcmd3 *****************
  6239 ;; Defined at:
  6240 ;;		line 337 in file "ST7735_TFT.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;		None
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;		None
  6245 ;; Return value:  Size  Location     Type
  6246 ;;		None               void
  6247 ;; Registers used:
  6248 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6258 ;;Total ram usage:        0 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    5
  6261 ;; This function calls:
  6262 ;;		_delay_ms
  6263 ;;		_write_command
  6264 ;;		_write_data
  6265 ;; This function is called by:
  6266 ;;		_TFT_GreenTab_Initialize
  6267 ;;		_TFT_BlackTab_Initialize
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text23
  6272  000EF8                     __ptext23:
  6273                           	opt stack 0
  6274  000EF8                     _Rcmd3:
  6275                           	opt stack 23
  6276                           
  6277                           ;ST7735_TFT.c: 339: write_command(0xE0);
  6278                           
  6279                           ;incstack = 0
  6280  000EF8  0EE0               	movlw	224
  6281  000EFA  EC94  F00D         	call	_write_command
  6282                           
  6283                           ;ST7735_TFT.c: 340: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6284  000EFE  0E02               	movlw	2
  6285  000F00  EC8C  F00D         	call	_write_data
  6286  000F04  0E1C               	movlw	28
  6287  000F06  EC8C  F00D         	call	_write_data
  6288  000F0A  0E07               	movlw	7
  6289  000F0C  EC8C  F00D         	call	_write_data
  6290  000F10  0E12               	movlw	18
  6291  000F12  EC8C  F00D         	call	_write_data
  6292                           
  6293                           ;ST7735_TFT.c: 341: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6294  000F16  0E37               	movlw	55
  6295  000F18  EC8C  F00D         	call	_write_data
  6296  000F1C  0E32               	movlw	50
  6297  000F1E  EC8C  F00D         	call	_write_data
  6298  000F22  0E29               	movlw	41
  6299  000F24  EC8C  F00D         	call	_write_data
  6300  000F28  0E2D               	movlw	45
  6301  000F2A  EC8C  F00D         	call	_write_data
  6302                           
  6303                           ;ST7735_TFT.c: 342: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6304  000F2E  0E29               	movlw	41
  6305  000F30  EC8C  F00D         	call	_write_data
  6306  000F34  0E25               	movlw	37
  6307  000F36  EC8C  F00D         	call	_write_data
  6308  000F3A  0E2B               	movlw	43
  6309  000F3C  EC8C  F00D         	call	_write_data
  6310  000F40  0E39               	movlw	57
  6311  000F42  EC8C  F00D         	call	_write_data
  6312                           
  6313                           ;ST7735_TFT.c: 343: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6314  000F46  0E00               	movlw	0
  6315  000F48  EC8C  F00D         	call	_write_data
  6316  000F4C  0E01               	movlw	1
  6317  000F4E  EC8C  F00D         	call	_write_data
  6318  000F52  0E03               	movlw	3
  6319  000F54  EC8C  F00D         	call	_write_data
  6320  000F58  0E10               	movlw	16
  6321  000F5A  EC8C  F00D         	call	_write_data
  6322                           
  6323                           ;ST7735_TFT.c: 344: write_command(0xE1);
  6324  000F5E  0EE1               	movlw	225
  6325  000F60  EC94  F00D         	call	_write_command
  6326                           
  6327                           ;ST7735_TFT.c: 345: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6328  000F64  0E03               	movlw	3
  6329  000F66  EC8C  F00D         	call	_write_data
  6330  000F6A  0E1D               	movlw	29
  6331  000F6C  EC8C  F00D         	call	_write_data
  6332  000F70  0E07               	movlw	7
  6333  000F72  EC8C  F00D         	call	_write_data
  6334  000F76  0E06               	movlw	6
  6335  000F78  EC8C  F00D         	call	_write_data
  6336                           
  6337                           ;ST7735_TFT.c: 346: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6338  000F7C  0E2E               	movlw	46
  6339  000F7E  EC8C  F00D         	call	_write_data
  6340  000F82  0E2C               	movlw	44
  6341  000F84  EC8C  F00D         	call	_write_data
  6342  000F88  0E29               	movlw	41
  6343  000F8A  EC8C  F00D         	call	_write_data
  6344  000F8E  0E2D               	movlw	45
  6345  000F90  EC8C  F00D         	call	_write_data
  6346                           
  6347                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6348  000F94  0E2E               	movlw	46
  6349  000F96  EC8C  F00D         	call	_write_data
  6350  000F9A  0E2E               	movlw	46
  6351  000F9C  EC8C  F00D         	call	_write_data
  6352  000FA0  0E37               	movlw	55
  6353  000FA2  EC8C  F00D         	call	_write_data
  6354  000FA6  0E3F               	movlw	63
  6355  000FA8  EC8C  F00D         	call	_write_data
  6356                           
  6357                           ;ST7735_TFT.c: 348: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6358  000FAC  0E00               	movlw	0
  6359  000FAE  EC8C  F00D         	call	_write_data
  6360  000FB2  0E00               	movlw	0
  6361  000FB4  EC8C  F00D         	call	_write_data
  6362  000FB8  0E02               	movlw	2
  6363  000FBA  EC8C  F00D         	call	_write_data
  6364  000FBE  0E10               	movlw	16
  6365  000FC0  EC8C  F00D         	call	_write_data
  6366                           
  6367                           ;ST7735_TFT.c: 349: write_command(0x13);
  6368  000FC4  0E13               	movlw	19
  6369  000FC6  EC94  F00D         	call	_write_command
  6370                           
  6371                           ;ST7735_TFT.c: 350: delay_ms(10);
  6372  000FCA  0E00               	movlw	0
  6373  000FCC  6E18               	movwf	delay_ms@ms+1,c
  6374  000FCE  0E0A               	movlw	10
  6375  000FD0  6E17               	movwf	delay_ms@ms,c
  6376  000FD2  EC5C  F00B         	call	_delay_ms	;wreg free
  6377                           
  6378                           ;ST7735_TFT.c: 351: write_command(0x29);
  6379  000FD6  0E29               	movlw	41
  6380  000FD8  EC94  F00D         	call	_write_command
  6381                           
  6382                           ;ST7735_TFT.c: 352: delay_ms(100);
  6383  000FDC  0E00               	movlw	0
  6384  000FDE  6E18               	movwf	delay_ms@ms+1,c
  6385  000FE0  0E64               	movlw	100
  6386  000FE2  6E17               	movwf	delay_ms@ms,c
  6387  000FE4  EC5C  F00B         	call	_delay_ms	;wreg free
  6388  000FE8  0012               	return		;funcret
  6389  000FEA                     __end_of_Rcmd3:
  6390                           	opt stack 0
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           intcon2	equ	0xFF1
  6399                           postinc0	equ	0xFEE
  6400                           wreg	equ	0xFE8
  6401                           postdec1	equ	0xFE5
  6402                           fsr1l	equ	0xFE1
  6403                           indf2	equ	0xFDF
  6404                           postinc2	equ	0xFDE
  6405                           postdec2	equ	0xFDD
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410 ;; *************** function _Rcmd2red *****************
  6411 ;; Defined at:
  6412 ;;		line 327 in file "ST7735_TFT.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;		None
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;		None
  6417 ;; Return value:  Size  Location     Type
  6418 ;;		None               void
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, cstack
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;Total ram usage:        0 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    5
  6433 ;; This function calls:
  6434 ;;		_write_command
  6435 ;;		_write_data
  6436 ;; This function is called by:
  6437 ;;		_TFT_GreenTab_Initialize
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text24
  6442  001828                     __ptext24:
  6443                           	opt stack 0
  6444  001828                     _Rcmd2red:
  6445                           	opt stack 23
  6446                           
  6447                           ;ST7735_TFT.c: 329: write_command(0x2A);
  6448                           
  6449                           ;incstack = 0
  6450  001828  0E2A               	movlw	42
  6451  00182A  EC94  F00D         	call	_write_command
  6452                           
  6453                           ;ST7735_TFT.c: 330: write_data(0x00); write_data(0x00);
  6454  00182E  0E00               	movlw	0
  6455  001830  EC8C  F00D         	call	_write_data
  6456  001834  0E00               	movlw	0
  6457  001836  EC8C  F00D         	call	_write_data
  6458                           
  6459                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x7F);
  6460  00183A  0E00               	movlw	0
  6461  00183C  EC8C  F00D         	call	_write_data
  6462  001840  0E7F               	movlw	127
  6463  001842  EC8C  F00D         	call	_write_data
  6464                           
  6465                           ;ST7735_TFT.c: 332: write_command(0x2B);
  6466  001846  0E2B               	movlw	43
  6467  001848  EC94  F00D         	call	_write_command
  6468                           
  6469                           ;ST7735_TFT.c: 333: write_data(0x00); write_data(0x00);
  6470  00184C  0E00               	movlw	0
  6471  00184E  EC8C  F00D         	call	_write_data
  6472  001852  0E00               	movlw	0
  6473  001854  EC8C  F00D         	call	_write_data
  6474                           
  6475                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x9F);
  6476  001858  0E00               	movlw	0
  6477  00185A  EC8C  F00D         	call	_write_data
  6478  00185E  0E9F               	movlw	159
  6479  001860  EC8C  F00D         	call	_write_data
  6480  001864  0012               	return		;funcret
  6481  001866                     __end_of_Rcmd2red:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           intcon2	equ	0xFF1
  6491                           postinc0	equ	0xFEE
  6492                           wreg	equ	0xFE8
  6493                           postdec1	equ	0xFE5
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _Rcmd1 *****************
  6503 ;; Defined at:
  6504 ;;		line 280 in file "ST7735_TFT.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;		None
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;		None               void
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;Total ram usage:        0 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    5
  6525 ;; This function calls:
  6526 ;;		_delay_ms
  6527 ;;		_write_command
  6528 ;;		_write_data
  6529 ;; This function is called by:
  6530 ;;		_TFT_GreenTab_Initialize
  6531 ;;		_TFT_BlackTab_Initialize
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text25
  6536  000CDE                     __ptext25:
  6537                           	opt stack 0
  6538  000CDE                     _Rcmd1:
  6539                           	opt stack 23
  6540                           
  6541                           ;ST7735_TFT.c: 282: write_command(0x01);
  6542                           
  6543                           ;incstack = 0
  6544  000CDE  0E01               	movlw	1
  6545  000CE0  EC94  F00D         	call	_write_command
  6546                           
  6547                           ;ST7735_TFT.c: 283: delay_ms(150);
  6548  000CE4  0E00               	movlw	0
  6549  000CE6  6E18               	movwf	delay_ms@ms+1,c
  6550  000CE8  0E96               	movlw	150
  6551  000CEA  6E17               	movwf	delay_ms@ms,c
  6552  000CEC  EC5C  F00B         	call	_delay_ms	;wreg free
  6553                           
  6554                           ;ST7735_TFT.c: 284: write_command(0x11);
  6555  000CF0  0E11               	movlw	17
  6556  000CF2  EC94  F00D         	call	_write_command
  6557                           
  6558                           ;ST7735_TFT.c: 285: delay_ms(500);
  6559  000CF6  0E01               	movlw	1
  6560  000CF8  6E18               	movwf	delay_ms@ms+1,c
  6561  000CFA  0EF4               	movlw	244
  6562  000CFC  6E17               	movwf	delay_ms@ms,c
  6563  000CFE  EC5C  F00B         	call	_delay_ms	;wreg free
  6564                           
  6565                           ;ST7735_TFT.c: 286: write_command(0xB1);
  6566  000D02  0EB1               	movlw	177
  6567  000D04  EC94  F00D         	call	_write_command
  6568                           
  6569                           ;ST7735_TFT.c: 287: write_data(0x01);
  6570  000D08  0E01               	movlw	1
  6571  000D0A  EC8C  F00D         	call	_write_data
  6572                           
  6573                           ;ST7735_TFT.c: 288: write_data(0x2C);
  6574  000D0E  0E2C               	movlw	44
  6575  000D10  EC8C  F00D         	call	_write_data
  6576                           
  6577                           ;ST7735_TFT.c: 289: write_data(0x2D);
  6578  000D14  0E2D               	movlw	45
  6579  000D16  EC8C  F00D         	call	_write_data
  6580                           
  6581                           ;ST7735_TFT.c: 290: write_command(0xB2);
  6582  000D1A  0EB2               	movlw	178
  6583  000D1C  EC94  F00D         	call	_write_command
  6584                           
  6585                           ;ST7735_TFT.c: 291: write_data(0x01);
  6586  000D20  0E01               	movlw	1
  6587  000D22  EC8C  F00D         	call	_write_data
  6588                           
  6589                           ;ST7735_TFT.c: 292: write_data(0x2C);
  6590  000D26  0E2C               	movlw	44
  6591  000D28  EC8C  F00D         	call	_write_data
  6592                           
  6593                           ;ST7735_TFT.c: 293: write_data(0x2D);
  6594  000D2C  0E2D               	movlw	45
  6595  000D2E  EC8C  F00D         	call	_write_data
  6596                           
  6597                           ;ST7735_TFT.c: 294: write_command(0xB3);
  6598  000D32  0EB3               	movlw	179
  6599  000D34  EC94  F00D         	call	_write_command
  6600                           
  6601                           ;ST7735_TFT.c: 295: write_data(0x01);
  6602  000D38  0E01               	movlw	1
  6603  000D3A  EC8C  F00D         	call	_write_data
  6604                           
  6605                           ;ST7735_TFT.c: 296: write_data(0x2C);
  6606  000D3E  0E2C               	movlw	44
  6607  000D40  EC8C  F00D         	call	_write_data
  6608                           
  6609                           ;ST7735_TFT.c: 297: write_data(0x2D);
  6610  000D44  0E2D               	movlw	45
  6611  000D46  EC8C  F00D         	call	_write_data
  6612                           
  6613                           ;ST7735_TFT.c: 298: write_data(0x01);
  6614  000D4A  0E01               	movlw	1
  6615  000D4C  EC8C  F00D         	call	_write_data
  6616                           
  6617                           ;ST7735_TFT.c: 299: write_data(0x2C);
  6618  000D50  0E2C               	movlw	44
  6619  000D52  EC8C  F00D         	call	_write_data
  6620                           
  6621                           ;ST7735_TFT.c: 300: write_data(0x2D);
  6622  000D56  0E2D               	movlw	45
  6623  000D58  EC8C  F00D         	call	_write_data
  6624                           
  6625                           ;ST7735_TFT.c: 301: write_command(0xB4);
  6626  000D5C  0EB4               	movlw	180
  6627  000D5E  EC94  F00D         	call	_write_command
  6628                           
  6629                           ;ST7735_TFT.c: 302: write_data(0x07);
  6630  000D62  0E07               	movlw	7
  6631  000D64  EC8C  F00D         	call	_write_data
  6632                           
  6633                           ;ST7735_TFT.c: 303: write_command(0xC0);
  6634  000D68  0EC0               	movlw	192
  6635  000D6A  EC94  F00D         	call	_write_command
  6636                           
  6637                           ;ST7735_TFT.c: 304: write_data(0xA2);
  6638  000D6E  0EA2               	movlw	162
  6639  000D70  EC8C  F00D         	call	_write_data
  6640                           
  6641                           ;ST7735_TFT.c: 305: write_data(0x02);
  6642  000D74  0E02               	movlw	2
  6643  000D76  EC8C  F00D         	call	_write_data
  6644                           
  6645                           ;ST7735_TFT.c: 306: write_data(0x84);
  6646  000D7A  0E84               	movlw	132
  6647  000D7C  EC8C  F00D         	call	_write_data
  6648                           
  6649                           ;ST7735_TFT.c: 307: write_command(0xC1);
  6650  000D80  0EC1               	movlw	193
  6651  000D82  EC94  F00D         	call	_write_command
  6652                           
  6653                           ;ST7735_TFT.c: 308: write_data(0xC5);
  6654  000D86  0EC5               	movlw	197
  6655  000D88  EC8C  F00D         	call	_write_data
  6656                           
  6657                           ;ST7735_TFT.c: 309: write_command(0xC2);
  6658  000D8C  0EC2               	movlw	194
  6659  000D8E  EC94  F00D         	call	_write_command
  6660                           
  6661                           ;ST7735_TFT.c: 310: write_data(0x0A);
  6662  000D92  0E0A               	movlw	10
  6663  000D94  EC8C  F00D         	call	_write_data
  6664                           
  6665                           ;ST7735_TFT.c: 311: write_data(0x00);
  6666  000D98  0E00               	movlw	0
  6667  000D9A  EC8C  F00D         	call	_write_data
  6668                           
  6669                           ;ST7735_TFT.c: 312: write_command(0xC3);
  6670  000D9E  0EC3               	movlw	195
  6671  000DA0  EC94  F00D         	call	_write_command
  6672                           
  6673                           ;ST7735_TFT.c: 313: write_data(0x8A);
  6674  000DA4  0E8A               	movlw	138
  6675  000DA6  EC8C  F00D         	call	_write_data
  6676                           
  6677                           ;ST7735_TFT.c: 314: write_data(0x2A);
  6678  000DAA  0E2A               	movlw	42
  6679  000DAC  EC8C  F00D         	call	_write_data
  6680                           
  6681                           ;ST7735_TFT.c: 315: write_command(0xC4);
  6682  000DB0  0EC4               	movlw	196
  6683  000DB2  EC94  F00D         	call	_write_command
  6684                           
  6685                           ;ST7735_TFT.c: 316: write_data(0x8A);
  6686  000DB6  0E8A               	movlw	138
  6687  000DB8  EC8C  F00D         	call	_write_data
  6688                           
  6689                           ;ST7735_TFT.c: 317: write_data(0xEE);
  6690  000DBC  0EEE               	movlw	238
  6691  000DBE  EC8C  F00D         	call	_write_data
  6692                           
  6693                           ;ST7735_TFT.c: 318: write_command(0xC5);
  6694  000DC2  0EC5               	movlw	197
  6695  000DC4  EC94  F00D         	call	_write_command
  6696                           
  6697                           ;ST7735_TFT.c: 319: write_data(0x0E);
  6698  000DC8  0E0E               	movlw	14
  6699  000DCA  EC8C  F00D         	call	_write_data
  6700                           
  6701                           ;ST7735_TFT.c: 320: write_command(0x20);
  6702  000DCE  0E20               	movlw	32
  6703  000DD0  EC94  F00D         	call	_write_command
  6704                           
  6705                           ;ST7735_TFT.c: 321: write_command(0x36);
  6706  000DD4  0E36               	movlw	54
  6707  000DD6  EC94  F00D         	call	_write_command
  6708                           
  6709                           ;ST7735_TFT.c: 322: write_data(0xC8);
  6710  000DDA  0EC8               	movlw	200
  6711  000DDC  EC8C  F00D         	call	_write_data
  6712                           
  6713                           ;ST7735_TFT.c: 323: write_command(0x3A);
  6714  000DE0  0E3A               	movlw	58
  6715  000DE2  EC94  F00D         	call	_write_command
  6716                           
  6717                           ;ST7735_TFT.c: 324: write_data(0x05);
  6718  000DE6  0E05               	movlw	5
  6719  000DE8  EC8C  F00D         	call	_write_data
  6720  000DEC  0012               	return		;funcret
  6721  000DEE                     __end_of_Rcmd1:
  6722                           	opt stack 0
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodh	equ	0xFF4
  6728                           prodl	equ	0xFF3
  6729                           intcon	equ	0xFF2
  6730                           intcon2	equ	0xFF1
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _write_data *****************
  6743 ;; Defined at:
  6744 ;;		line 208 in file "ST7735_TFT.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  data_           1    wreg     unsigned char 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  data_           1   18[COMRAM] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;		None               void
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;Total ram usage:        1 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    4
  6765 ;; This function calls:
  6766 ;;		_spiwrite
  6767 ;; This function is called by:
  6768 ;;		_Rcmd1
  6769 ;;		_Rcmd2red
  6770 ;;		_Rcmd3
  6771 ;;		_setAddrWindow
  6772 ;;		_drawPixel
  6773 ;;		_TFT_GreenTab_Initialize
  6774 ;;		_Bcmd
  6775 ;;		_setScrollDefinition
  6776 ;;		_Rcmd2green
  6777 ;;		_VerticalScroll
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text26
  6782  001B18                     __ptext26:
  6783                           	opt stack 0
  6784  001B18                     _write_data:
  6785                           	opt stack 22
  6786                           
  6787                           ;incstack = 0
  6788                           ;write_data@data_ stored from wreg
  6789  001B18  6E13               	movwf	write_data@data_,c
  6790                           
  6791                           ;ST7735_TFT.c: 210: PORTCbits.RC2 = 0;
  6792  001B1A  9482               	bcf	3970,2,c	;volatile
  6793                           
  6794                           ;ST7735_TFT.c: 211: PORTCbits.RC0 = 1;
  6795  001B1C  8082               	bsf	3970,0,c	;volatile
  6796                           
  6797                           ;ST7735_TFT.c: 212: spiwrite(data_);
  6798  001B1E  5013               	movf	write_data@data_,w,c
  6799  001B20  EC4B  F00D         	call	_spiwrite
  6800                           
  6801                           ;ST7735_TFT.c: 213: PORTCbits.RC2 = 1;
  6802  001B24  8482               	bsf	3970,2,c	;volatile
  6803  001B26  0012               	return		;funcret
  6804  001B28                     __end_of_write_data:
  6805                           	opt stack 0
  6806                           tblptru	equ	0xFF8
  6807                           tblptrh	equ	0xFF7
  6808                           tblptrl	equ	0xFF6
  6809                           tablat	equ	0xFF5
  6810                           prodh	equ	0xFF4
  6811                           prodl	equ	0xFF3
  6812                           intcon	equ	0xFF2
  6813                           intcon2	equ	0xFF1
  6814                           postinc0	equ	0xFEE
  6815                           wreg	equ	0xFE8
  6816                           postdec1	equ	0xFE5
  6817                           fsr1l	equ	0xFE1
  6818                           indf2	equ	0xFDF
  6819                           postinc2	equ	0xFDE
  6820                           postdec2	equ	0xFDD
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _write_command *****************
  6826 ;; Defined at:
  6827 ;;		line 197 in file "ST7735_TFT.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  cmd_            1    wreg     unsigned char 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  cmd_            1   18[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;		None               void
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;Total ram usage:        1 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    4
  6848 ;; This function calls:
  6849 ;;		_spiwrite
  6850 ;; This function is called by:
  6851 ;;		_Rcmd1
  6852 ;;		_Rcmd2red
  6853 ;;		_Rcmd3
  6854 ;;		_setAddrWindow
  6855 ;;		_TFT_GreenTab_Initialize
  6856 ;;		_Bcmd
  6857 ;;		_setScrollDefinition
  6858 ;;		_Rcmd2green
  6859 ;;		_VerticalScroll
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           	psect	text27
  6864  001B28                     __ptext27:
  6865                           	opt stack 0
  6866  001B28                     _write_command:
  6867                           	opt stack 22
  6868                           
  6869                           ;incstack = 0
  6870                           ;write_command@cmd_ stored from wreg
  6871  001B28  6E13               	movwf	write_command@cmd_,c
  6872                           
  6873                           ;ST7735_TFT.c: 199: PORTCbits.RC2 = 0;
  6874  001B2A  9482               	bcf	3970,2,c	;volatile
  6875                           
  6876                           ;ST7735_TFT.c: 201: PORTCbits.RC0 = 0;
  6877  001B2C  9082               	bcf	3970,0,c	;volatile
  6878                           
  6879                           ;ST7735_TFT.c: 202: spiwrite(cmd_);
  6880  001B2E  5013               	movf	write_command@cmd_,w,c
  6881  001B30  EC4B  F00D         	call	_spiwrite
  6882                           
  6883                           ;ST7735_TFT.c: 204: PORTCbits.RC2 = 1;
  6884  001B34  8482               	bsf	3970,2,c	;volatile
  6885  001B36  0012               	return		;funcret
  6886  001B38                     __end_of_write_command:
  6887                           	opt stack 0
  6888                           tblptru	equ	0xFF8
  6889                           tblptrh	equ	0xFF7
  6890                           tblptrl	equ	0xFF6
  6891                           tablat	equ	0xFF5
  6892                           prodh	equ	0xFF4
  6893                           prodl	equ	0xFF3
  6894                           intcon	equ	0xFF2
  6895                           intcon2	equ	0xFF1
  6896                           postinc0	equ	0xFEE
  6897                           wreg	equ	0xFE8
  6898                           postdec1	equ	0xFE5
  6899                           fsr1l	equ	0xFE1
  6900                           indf2	equ	0xFDF
  6901                           postinc2	equ	0xFDE
  6902                           postdec2	equ	0xFDD
  6903                           fsr2h	equ	0xFDA
  6904                           fsr2l	equ	0xFD9
  6905                           status	equ	0xFD8
  6906                           
  6907 ;; *************** function _spiwrite *****************
  6908 ;; Defined at:
  6909 ;;		line 188 in file "ST7735_TFT.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  spidata         1    wreg     unsigned char 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  spidata         1   17[COMRAM] unsigned char 
  6914 ;;  x               1   16[COMRAM] unsigned char 
  6915 ;; Return value:  Size  Location     Type
  6916 ;;		None               void
  6917 ;; Registers used:
  6918 ;;		wreg
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;Total ram usage:        2 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    3
  6931 ;; This function calls:
  6932 ;;		Nothing
  6933 ;; This function is called by:
  6934 ;;		_write_command
  6935 ;;		_write_data
  6936 ;;		_drawFastVLine
  6937 ;;		_fillRectangle
  6938 ;;		_drawFastHLine
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text28
  6943  001A96                     __ptext28:
  6944                           	opt stack 0
  6945  001A96                     _spiwrite:
  6946                           	opt stack 24
  6947                           
  6948                           ;incstack = 0
  6949                           ;spiwrite@spidata stored from wreg
  6950  001A96  6E12               	movwf	spiwrite@spidata,c
  6951                           
  6952                           ;ST7735_TFT.c: 190: char x;
  6953                           ;ST7735_TFT.c: 191: PIR1bits.SSPIF = 0;
  6954  001A98  969E               	bcf	3998,3,c	;volatile
  6955                           
  6956                           ;ST7735_TFT.c: 192: x = SSPBUF;
  6957  001A9A  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6958                           
  6959                           ;ST7735_TFT.c: 193: SSPBUF = spidata;
  6960  001A9E  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6961                           
  6962                           ;ST7735_TFT.c: 194: while (!SSPSTATbits.BF);
  6963  001AA2  D000               	goto	l45
  6964  001AA4                     l45:
  6965  001AA4  A0C7               	btfss	4039,0,c	;volatile
  6966  001AA6  D7FE               	goto	l45
  6967  001AA8  0012               	return		;funcret
  6968  001AAA                     __end_of_spiwrite:
  6969                           	opt stack 0
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           intcon	equ	0xFF2
  6977                           intcon2	equ	0xFF1
  6978                           postinc0	equ	0xFEE
  6979                           wreg	equ	0xFE8
  6980                           postdec1	equ	0xFE5
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _LCD_Reset *****************
  6990 ;; Defined at:
  6991 ;;		line 216 in file "ST7735_TFT.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;		None
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;		None
  6996 ;; Return value:  Size  Location     Type
  6997 ;;		None               void
  6998 ;; Registers used:
  6999 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;Total ram usage:        0 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    5
  7012 ;; This function calls:
  7013 ;;		_delay_ms
  7014 ;; This function is called by:
  7015 ;;		_Initialize_Screen
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           	psect	text29
  7020  001ABE                     __ptext29:
  7021                           	opt stack 0
  7022  001ABE                     _LCD_Reset:
  7023                           	opt stack 24
  7024                           
  7025                           ;ST7735_TFT.c: 218: PORTCbits.RC4 = 0;
  7026                           
  7027                           ;incstack = 0
  7028  001ABE  9882               	bcf	3970,4,c	;volatile
  7029                           
  7030                           ;ST7735_TFT.c: 219: delay_ms(100);
  7031  001AC0  0E00               	movlw	0
  7032  001AC2  6E18               	movwf	delay_ms@ms+1,c
  7033  001AC4  0E64               	movlw	100
  7034  001AC6  6E17               	movwf	delay_ms@ms,c
  7035  001AC8  EC5C  F00B         	call	_delay_ms	;wreg free
  7036                           
  7037                           ;ST7735_TFT.c: 220: PORTCbits.RC4 = 1;
  7038  001ACC  8882               	bsf	3970,4,c	;volatile
  7039  001ACE  0012               	return		;funcret
  7040  001AD0                     __end_of_LCD_Reset:
  7041                           	opt stack 0
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon	equ	0xFF2
  7049                           intcon2	equ	0xFF1
  7050                           postinc0	equ	0xFEE
  7051                           wreg	equ	0xFE8
  7052                           postdec1	equ	0xFE5
  7053                           fsr1l	equ	0xFE1
  7054                           indf2	equ	0xFDF
  7055                           postinc2	equ	0xFDE
  7056                           postdec2	equ	0xFDD
  7057                           fsr2h	equ	0xFDA
  7058                           fsr2l	equ	0xFD9
  7059                           status	equ	0xFD8
  7060                           
  7061 ;; *************** function _delay_ms *****************
  7062 ;; Defined at:
  7063 ;;		line 63 in file "ST7735_TFT.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  ms              2   22[COMRAM] int 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  count           2   26[COMRAM] int 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;		None               void
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7077 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;Total ram usage:        6 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    4
  7084 ;; This function calls:
  7085 ;;		___wmul
  7086 ;; This function is called by:
  7087 ;;		_LCD_Reset
  7088 ;;		_Rcmd1
  7089 ;;		_Rcmd3
  7090 ;;		_Bcmd
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           	psect	text30
  7095  0016B8                     __ptext30:
  7096                           	opt stack 0
  7097  0016B8                     _delay_ms:
  7098                           	opt stack 23
  7099                           
  7100                           ;ST7735_TFT.c: 69: int count;
  7101                           ;ST7735_TFT.c: 70: count = 8000000/4000/8 * ms;
  7102                           
  7103                           ;incstack = 0
  7104  0016B8  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7105  0016BC  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7106  0016C0  0E00               	movlw	0
  7107  0016C2  6E14               	movwf	___wmul@multiplicand+1,c
  7108  0016C4  0EFA               	movlw	250
  7109  0016C6  6E13               	movwf	___wmul@multiplicand,c
  7110  0016C8  ECD4  F00C         	call	___wmul	;wreg free
  7111  0016CC  C011  F01B         	movff	?___wmul,delay_ms@count
  7112  0016D0  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7113                           
  7114                           ;ST7735_TFT.c: 71: count = (0xffff - count);
  7115  0016D4  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7116  0016D8  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7117  0016DC  1E19               	comf	??_delay_ms,f,c
  7118  0016DE  1E1A               	comf	??_delay_ms+1,f,c
  7119  0016E0  4A19               	infsnz	??_delay_ms,f,c
  7120  0016E2  2A1A               	incf	??_delay_ms+1,f,c
  7121  0016E4  0EFF               	movlw	255
  7122  0016E6  2419               	addwf	??_delay_ms,w,c
  7123  0016E8  6E1B               	movwf	delay_ms@count,c
  7124  0016EA  0EFF               	movlw	255
  7125  0016EC  201A               	addwfc	??_delay_ms+1,w,c
  7126  0016EE  6E1C               	movwf	delay_ms@count+1,c
  7127                           
  7128                           ;ST7735_TFT.c: 73: T3CON = 0xb8;
  7129  0016F0  0EB8               	movlw	184
  7130  0016F2  6EB1               	movwf	4017,c	;volatile
  7131                           
  7132                           ;ST7735_TFT.c: 75: TMR3L = count & 0x00ff;
  7133  0016F4  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  7134                           
  7135                           ;ST7735_TFT.c: 76: TMR3H = count >> 8;
  7136  0016F8  501C               	movf	delay_ms@count+1,w,c
  7137  0016FA  6EB3               	movwf	4019,c	;volatile
  7138                           
  7139                           ;ST7735_TFT.c: 78: PIR2bits.TMR3IF = 0;
  7140  0016FC  92A1               	bcf	4001,1,c	;volatile
  7141                           
  7142                           ;ST7735_TFT.c: 79: T3CONbits.TMR3ON = 1;
  7143  0016FE  80B1               	bsf	4017,0,c	;volatile
  7144                           
  7145                           ;ST7735_TFT.c: 81: while (PIR2bits.TMR3IF == 0);
  7146  001700  D000               	goto	l35
  7147  001702                     l35:
  7148  001702  A2A1               	btfss	4001,1,c	;volatile
  7149  001704  D7FE               	goto	l35
  7150                           
  7151                           ;ST7735_TFT.c: 82: T3CONbits.TMR3ON = 0;
  7152  001706  90B1               	bcf	4017,0,c	;volatile
  7153  001708  0012               	return		;funcret
  7154  00170A                     __end_of_delay_ms:
  7155                           	opt stack 0
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           prodh	equ	0xFF4
  7161                           prodl	equ	0xFF3
  7162                           intcon	equ	0xFF2
  7163                           intcon2	equ	0xFF1
  7164                           postinc0	equ	0xFEE
  7165                           wreg	equ	0xFE8
  7166                           postdec1	equ	0xFE5
  7167                           fsr1l	equ	0xFE1
  7168                           indf2	equ	0xFDF
  7169                           postinc2	equ	0xFDE
  7170                           postdec2	equ	0xFDD
  7171                           fsr2h	equ	0xFDA
  7172                           fsr2l	equ	0xFD9
  7173                           status	equ	0xFD8
  7174                           
  7175 ;; *************** function ___wmul *****************
  7176 ;; Defined at:
  7177 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  multiplier      2   16[COMRAM] unsigned int 
  7180 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;  product         2   20[COMRAM] unsigned int 
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  2   16[COMRAM] unsigned int 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, status,0, prodl, prodh
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7192 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;Total ram usage:        6 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    3
  7199 ;; This function calls:
  7200 ;;		Nothing
  7201 ;; This function is called by:
  7202 ;;		_delay_ms
  7203 ;;		_drawChar
  7204 ;;		_printf
  7205 ;; This function uses a non-reentrant model
  7206 ;;
  7207                           
  7208                           	psect	text31
  7209  0019A8                     __ptext31:
  7210                           	opt stack 0
  7211  0019A8                     ___wmul:
  7212                           	opt stack 26
  7213                           
  7214                           ;incstack = 0
  7215  0019A8  5011               	movf	___wmul@multiplier,w,c
  7216  0019AA  0213               	mulwf	___wmul@multiplicand,c
  7217  0019AC  CFF3 F015          	movff	prodl,___wmul@product
  7218  0019B0  CFF4 F016          	movff	prodh,___wmul@product+1
  7219  0019B4  5011               	movf	___wmul@multiplier,w,c
  7220  0019B6  0214               	mulwf	___wmul@multiplicand+1,c
  7221  0019B8  50F3               	movf	prodl,w,c
  7222  0019BA  2616               	addwf	___wmul@product+1,f,c
  7223  0019BC  5012               	movf	___wmul@multiplier+1,w,c
  7224  0019BE  0213               	mulwf	___wmul@multiplicand,c
  7225  0019C0  50F3               	movf	prodl,w,c
  7226  0019C2  2616               	addwf	___wmul@product+1,f,c
  7227  0019C4  C015  F011         	movff	___wmul@product,?___wmul
  7228  0019C8  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7229  0019CC  D000               	goto	l720
  7230  0019CE                     l720:
  7231  0019CE  0012               	return		;funcret
  7232  0019D0                     __end_of___wmul:
  7233                           	opt stack 0
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           intcon	equ	0xFF2
  7241                           intcon2	equ	0xFF1
  7242                           postinc0	equ	0xFEE
  7243                           wreg	equ	0xFE8
  7244                           postdec1	equ	0xFE5
  7245                           fsr1l	equ	0xFE1
  7246                           indf2	equ	0xFDF
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           fsr2h	equ	0xFDA
  7250                           fsr2l	equ	0xFD9
  7251                           status	equ	0xFD8
  7252                           
  7253 ;; *************** function _Do_Init *****************
  7254 ;; Defined at:
  7255 ;;		line 194 in file "Lab11.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;		None
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;		None
  7260 ;; Return value:  Size  Location     Type
  7261 ;;		None               void
  7262 ;; Registers used:
  7263 ;;		wreg, status,2, status,0, cstack
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;Total ram usage:        0 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    7
  7276 ;; This function calls:
  7277 ;;		_DS1621_Init
  7278 ;;		_I2C_Init
  7279 ;;		_init_UART
  7280 ;; This function is called by:
  7281 ;;		_main
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text32
  7286  0018A4                     __ptext32:
  7287                           	opt stack 0
  7288  0018A4                     _Do_Init:
  7289                           	opt stack 23
  7290                           
  7291                           ;Lab11.c: 196: init_UART();
  7292                           
  7293                           ;incstack = 0
  7294  0018A4  EC55  F00D         	call	_init_UART	;wreg free
  7295                           
  7296                           ;Lab11.c: 198: OSCCON=0x70;
  7297  0018A8  0E70               	movlw	112
  7298  0018AA  6ED3               	movwf	4051,c	;volatile
  7299                           
  7300                           ;Lab11.c: 199: DS1621_Init();
  7301  0018AC  EC09  F00D         	call	_DS1621_Init	;wreg free
  7302                           
  7303                           ;Lab11.c: 201: ADCON1= 0x0F;
  7304  0018B0  0E0F               	movlw	15
  7305  0018B2  6EC1               	movwf	4033,c	;volatile
  7306                           
  7307                           ;Lab11.c: 202: TRISA = 0x00;
  7308  0018B4  0E00               	movlw	0
  7309  0018B6  6E92               	movwf	3986,c	;volatile
  7310                           
  7311                           ;Lab11.c: 203: TRISB = 0x11;
  7312  0018B8  0E11               	movlw	17
  7313  0018BA  6E93               	movwf	3987,c	;volatile
  7314                           
  7315                           ;Lab11.c: 204: TRISC = 0x00;
  7316  0018BC  0E00               	movlw	0
  7317  0018BE  6E94               	movwf	3988,c	;volatile
  7318                           
  7319                           ;Lab11.c: 205: TRISD = 0x40;
  7320  0018C0  0E40               	movlw	64
  7321  0018C2  6E95               	movwf	3989,c	;volatile
  7322                           
  7323                           ;Lab11.c: 206: TRISE = 0x00;
  7324  0018C4  0E00               	movlw	0
  7325  0018C6  6E96               	movwf	3990,c	;volatile
  7326                           
  7327                           ;Lab11.c: 207: RBPU=0;
  7328  0018C8  9EF1               	bcf	intcon2,7,c	;volatile
  7329                           
  7330                           ;Lab11.c: 208: I2C_Init(100000);
  7331  0018CA  0EA0               	movlw	160
  7332  0018CC  6E11               	movwf	I2C_Init@c,c
  7333  0018CE  0E86               	movlw	134
  7334  0018D0  6E12               	movwf	I2C_Init@c+1,c
  7335  0018D2  0E01               	movlw	1
  7336  0018D4  6E13               	movwf	I2C_Init@c+2,c
  7337  0018D6  0E00               	movlw	0
  7338  0018D8  6E14               	movwf	I2C_Init@c+3,c
  7339  0018DA  ECAF  F00D         	call	_I2C_Init	;wreg free
  7340  0018DE  0012               	return		;funcret
  7341  0018E0                     __end_of_Do_Init:
  7342                           	opt stack 0
  7343                           tblptru	equ	0xFF8
  7344                           tblptrh	equ	0xFF7
  7345                           tblptrl	equ	0xFF6
  7346                           tablat	equ	0xFF5
  7347                           prodh	equ	0xFF4
  7348                           prodl	equ	0xFF3
  7349                           intcon	equ	0xFF2
  7350                           intcon2	equ	0xFF1
  7351                           postinc0	equ	0xFEE
  7352                           wreg	equ	0xFE8
  7353                           postdec1	equ	0xFE5
  7354                           fsr1l	equ	0xFE1
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           fsr2h	equ	0xFDA
  7359                           fsr2l	equ	0xFD9
  7360                           status	equ	0xFD8
  7361                           
  7362 ;; *************** function _init_UART *****************
  7363 ;; Defined at:
  7364 ;;		line 217 in file "Lab11.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;		None
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;		None
  7369 ;; Return value:  Size  Location     Type
  7370 ;;		None               void
  7371 ;; Registers used:
  7372 ;;		wreg, status,2, cstack
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;Total ram usage:        0 bytes
  7383 ;; Hardware stack levels used:    1
  7384 ;; Hardware stack levels required when called:    4
  7385 ;; This function calls:
  7386 ;;		_OpenUSART
  7387 ;; This function is called by:
  7388 ;;		_Do_Init
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392                           	psect	text33
  7393  001AAA                     __ptext33:
  7394                           	opt stack 0
  7395  001AAA                     _init_UART:
  7396                           	opt stack 25
  7397                           
  7398                           ;Lab11.c: 219: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b11111111
      +                           & 0b11111111, 25);
  7399                           
  7400                           ;incstack = 0
  7401  001AAA  0E00               	movlw	0
  7402  001AAC  6E12               	movwf	OpenUSART@spbrg+1,c
  7403  001AAE  0E19               	movlw	25
  7404  001AB0  6E11               	movwf	OpenUSART@spbrg,c
  7405  001AB2  0E3C               	movlw	60
  7406  001AB4  EC71  F00A         	call	_OpenUSART
  7407                           
  7408                           ;Lab11.c: 220: OSCCON = 0x70;
  7409  001AB8  0E70               	movlw	112
  7410  001ABA  6ED3               	movwf	4051,c	;volatile
  7411  001ABC  0012               	return		;funcret
  7412  001ABE                     __end_of_init_UART:
  7413                           	opt stack 0
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           prodh	equ	0xFF4
  7419                           prodl	equ	0xFF3
  7420                           intcon	equ	0xFF2
  7421                           intcon2	equ	0xFF1
  7422                           postinc0	equ	0xFEE
  7423                           wreg	equ	0xFE8
  7424                           postdec1	equ	0xFE5
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _OpenUSART *****************
  7434 ;; Defined at:
  7435 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  config          1    wreg     unsigned char 
  7438 ;;  spbrg           2   16[COMRAM] unsigned int 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  config          1   18[COMRAM] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;		None               void
  7443 ;; Registers used:
  7444 ;;		wreg, status,2
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:        3 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    3
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_init_UART
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           	psect	text34
  7465  0014E2                     __ptext34:
  7466                           	opt stack 0
  7467  0014E2                     _OpenUSART:
  7468                           	opt stack 25
  7469                           
  7470                           ;incstack = 0
  7471                           ;OpenUSART@config stored from wreg
  7472  0014E2  6E13               	movwf	OpenUSART@config,c
  7473  0014E4  0E00               	movlw	0
  7474  0014E6  6EAC               	movwf	4012,c	;volatile
  7475  0014E8  0E00               	movlw	0
  7476  0014EA  6EAB               	movwf	4011,c	;volatile
  7477  0014EC  A013               	btfss	OpenUSART@config,0,c
  7478  0014EE  D002               	goto	l4490
  7479  0014F0  88AC               	bsf	4012,4,c	;volatile
  7480  0014F2  D000               	goto	l4490
  7481  0014F4                     l4490:
  7482  0014F4  A213               	btfss	OpenUSART@config,1,c
  7483  0014F6  D003               	goto	l4494
  7484  0014F8  8CAC               	bsf	4012,6,c	;volatile
  7485  0014FA  8CAB               	bsf	4011,6,c	;volatile
  7486  0014FC  D000               	goto	l4494
  7487  0014FE                     l4494:
  7488  0014FE  A413               	btfss	OpenUSART@config,2,c
  7489  001500  D002               	goto	l4498
  7490  001502  8EAC               	bsf	4012,7,c	;volatile
  7491  001504  D000               	goto	l4498
  7492  001506                     l4498:
  7493  001506  A613               	btfss	OpenUSART@config,3,c
  7494  001508  D002               	goto	l708
  7495  00150A  88AB               	bsf	4011,4,c	;volatile
  7496  00150C  D002               	goto	l4502
  7497  00150E                     l708:
  7498  00150E  8AAB               	bsf	4011,5,c	;volatile
  7499  001510  D000               	goto	l4502
  7500  001512                     l4502:
  7501  001512  B813               	btfsc	OpenUSART@config,4,c
  7502  001514  84AC               	bsf	4012,2,c	;volatile
  7503  001516  989E               	bcf	3998,4,c	;volatile
  7504  001518  AA13               	btfss	OpenUSART@config,5,c
  7505  00151A  D002               	goto	l4510
  7506  00151C  86AB               	bsf	4011,3,c	;volatile
  7507  00151E  D000               	goto	l4510
  7508  001520                     l4510:
  7509  001520  AC13               	btfss	OpenUSART@config,6,c
  7510  001522  D002               	goto	l712
  7511  001524  8A9D               	bsf	3997,5,c	;volatile
  7512  001526  D001               	goto	l713
  7513  001528                     l712:
  7514  001528  9A9D               	bcf	3997,5,c	;volatile
  7515  00152A                     l713:
  7516  00152A  9A9E               	bcf	3998,5,c	;volatile
  7517  00152C  AE13               	btfss	OpenUSART@config,7,c
  7518  00152E  D002               	goto	l714
  7519  001530  889D               	bsf	3997,4,c	;volatile
  7520  001532  D001               	goto	l715
  7521  001534                     l714:
  7522  001534  989D               	bcf	3997,4,c	;volatile
  7523  001536                     l715:
  7524  001536  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7525  00153A  5012               	movf	OpenUSART@spbrg+1,w,c
  7526  00153C  6EB0               	movwf	4016,c	;volatile
  7527  00153E  8AAC               	bsf	4012,5,c	;volatile
  7528  001540  8EAB               	bsf	4011,7,c	;volatile
  7529  001542  9C94               	bcf	3988,6,c	;volatile
  7530  001544  8E94               	bsf	3988,7,c	;volatile
  7531  001546  B8AC               	btfsc	4012,4,c	;volatile
  7532  001548  BEAC               	btfsc	4012,7,c	;volatile
  7533  00154A  D002               	goto	l717
  7534  00154C  8C94               	bsf	3988,6,c	;volatile
  7535  00154E  D000               	goto	l717
  7536  001550                     l717:
  7537  001550  0012               	return		;funcret
  7538  001552                     __end_of_OpenUSART:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           intcon2	equ	0xFF1
  7548                           postinc0	equ	0xFEE
  7549                           wreg	equ	0xFE8
  7550                           postdec1	equ	0xFE5
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function _I2C_Init *****************
  7560 ;; Defined at:
  7561 ;;		line 14 in file "I2C_Soft.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  c               4   16[COMRAM] unsigned long 
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;		None
  7566 ;; Return value:  Size  Location     Type
  7567 ;;		None               void
  7568 ;; Registers used:
  7569 ;;		wreg, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7575 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;Total ram usage:        4 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    4
  7582 ;; This function calls:
  7583 ;;		_i2cHighScl
  7584 ;;		_i2cHighSda
  7585 ;; This function is called by:
  7586 ;;		_Do_Init
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text35
  7591  001B5E                     __ptext35:
  7592                           	opt stack 0
  7593  001B5E                     _I2C_Init:
  7594                           	opt stack 25
  7595                           
  7596                           ;I2C_Soft.c: 16: i2cHighScl();
  7597                           
  7598                           ;incstack = 0
  7599  001B5E  ECA3  F00D         	call	_i2cHighScl	;wreg free
  7600                           
  7601                           ;I2C_Soft.c: 17: i2cHighSda();
  7602  001B62  ECC6  F00D         	call	_i2cHighSda	;wreg free
  7603  001B66  0012               	return		;funcret
  7604  001B68                     __end_of_I2C_Init:
  7605                           	opt stack 0
  7606                           tblptru	equ	0xFF8
  7607                           tblptrh	equ	0xFF7
  7608                           tblptrl	equ	0xFF6
  7609                           tablat	equ	0xFF5
  7610                           prodh	equ	0xFF4
  7611                           prodl	equ	0xFF3
  7612                           intcon	equ	0xFF2
  7613                           intcon2	equ	0xFF1
  7614                           postinc0	equ	0xFEE
  7615                           wreg	equ	0xFE8
  7616                           postdec1	equ	0xFE5
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           postinc2	equ	0xFDE
  7620                           postdec2	equ	0xFDD
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _DS1621_Init *****************
  7626 ;; Defined at:
  7627 ;;		line 22 in file "I2C_Support.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  Device          1   21[COMRAM] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;		None               void
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;Total ram usage:        1 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    6
  7648 ;; This function calls:
  7649 ;;		_I2C_Write_Cmd_Only
  7650 ;;		_I2C_Write_Cmd_Write_Data
  7651 ;; This function is called by:
  7652 ;;		_Do_Init
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text36
  7657  001A12                     __ptext36:
  7658                           	opt stack 0
  7659  001A12                     _DS1621_Init:
  7660                           	opt stack 23
  7661                           
  7662                           ;I2C_Support.c: 24: char Device = 0x48;
  7663                           
  7664                           ;incstack = 0
  7665  001A12  0E48               	movlw	72
  7666  001A14  6E16               	movwf	DS1621_Init@Device,c
  7667                           
  7668                           ;I2C_Support.c: 25: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7669  001A16  0EAC               	movlw	172
  7670  001A18  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7671  001A1A  0E02               	movlw	2
  7672  001A1C  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7673  001A1E  5016               	movf	DS1621_Init@Device,w,c
  7674  001A20  ECF9  F00C         	call	_I2C_Write_Cmd_Write_Data
  7675                           
  7676                           ;I2C_Support.c: 26: I2C_Write_Cmd_Only(Device, 0xEE);
  7677  001A24  0EEE               	movlw	238
  7678  001A26  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7679  001A28  5016               	movf	DS1621_Init@Device,w,c
  7680  001A2A  EC33  F00D         	call	_I2C_Write_Cmd_Only
  7681  001A2E  0012               	return		;funcret
  7682  001A30                     __end_of_DS1621_Init:
  7683                           	opt stack 0
  7684                           tblptru	equ	0xFF8
  7685                           tblptrh	equ	0xFF7
  7686                           tblptrl	equ	0xFF6
  7687                           tablat	equ	0xFF5
  7688                           prodh	equ	0xFF4
  7689                           prodl	equ	0xFF3
  7690                           intcon	equ	0xFF2
  7691                           intcon2	equ	0xFF1
  7692                           postinc0	equ	0xFEE
  7693                           wreg	equ	0xFE8
  7694                           postdec1	equ	0xFE5
  7695                           fsr1l	equ	0xFE1
  7696                           indf2	equ	0xFDF
  7697                           postinc2	equ	0xFDE
  7698                           postdec2	equ	0xFDD
  7699                           fsr2h	equ	0xFDA
  7700                           fsr2l	equ	0xFD9
  7701                           status	equ	0xFD8
  7702                           
  7703 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7704 ;; Defined at:
  7705 ;;		line 152 in file "I2C_Soft.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  Device          1    wreg     unsigned char 
  7708 ;;  Cmd             1   18[COMRAM] unsigned char 
  7709 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;  Device          1   20[COMRAM] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;		None               void
  7714 ;; Registers used:
  7715 ;;		wreg, status,2, status,0, cstack
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7721 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7725 ;;Total ram usage:        3 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    5
  7728 ;; This function calls:
  7729 ;;		_I2C_Start
  7730 ;;		_I2C_Stop
  7731 ;;		_I2C_Write
  7732 ;; This function is called by:
  7733 ;;		_DS1621_Init
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           	psect	text37
  7738  0019F2                     __ptext37:
  7739                           	opt stack 0
  7740  0019F2                     _I2C_Write_Cmd_Write_Data:
  7741                           	opt stack 23
  7742                           
  7743                           ;incstack = 0
  7744                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7745  0019F2  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7746                           
  7747                           ;I2C_Soft.c: 154: I2C_Start();
  7748  0019F4  EC71  F00D         	call	_I2C_Start	;wreg free
  7749                           
  7750                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  7751  0019F8  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7752  0019FA  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7753  0019FC  EC33  F00C         	call	_I2C_Write
  7754                           
  7755                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  7756  001A00  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7757  001A02  EC33  F00C         	call	_I2C_Write
  7758                           
  7759                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  7760  001A06  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7761  001A08  EC33  F00C         	call	_I2C_Write
  7762                           
  7763                           ;I2C_Soft.c: 158: I2C_Stop();
  7764  001A0C  EC68  F00D         	call	_I2C_Stop	;wreg free
  7765  001A10  0012               	return		;funcret
  7766  001A12                     __end_of_I2C_Write_Cmd_Write_Data:
  7767                           	opt stack 0
  7768                           tblptru	equ	0xFF8
  7769                           tblptrh	equ	0xFF7
  7770                           tblptrl	equ	0xFF6
  7771                           tablat	equ	0xFF5
  7772                           prodh	equ	0xFF4
  7773                           prodl	equ	0xFF3
  7774                           intcon	equ	0xFF2
  7775                           intcon2	equ	0xFF1
  7776                           postinc0	equ	0xFEE
  7777                           wreg	equ	0xFE8
  7778                           postdec1	equ	0xFE5
  7779                           fsr1l	equ	0xFE1
  7780                           indf2	equ	0xFDF
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           fsr2h	equ	0xFDA
  7784                           fsr2l	equ	0xFD9
  7785                           status	equ	0xFD8
  7786                           
  7787 ;; *************** function _I2C_Write_Cmd_Only *****************
  7788 ;; Defined at:
  7789 ;;		line 144 in file "I2C_Soft.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;  Device          1    wreg     unsigned char 
  7792 ;;  Cmd             1   18[COMRAM] unsigned char 
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  Device          1   19[COMRAM] unsigned char 
  7795 ;; Return value:  Size  Location     Type
  7796 ;;		None               void
  7797 ;; Registers used:
  7798 ;;		wreg, status,2, status,0, cstack
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7804 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;Total ram usage:        2 bytes
  7809 ;; Hardware stack levels used:    1
  7810 ;; Hardware stack levels required when called:    5
  7811 ;; This function calls:
  7812 ;;		_I2C_Start
  7813 ;;		_I2C_Stop
  7814 ;;		_I2C_Write
  7815 ;; This function is called by:
  7816 ;;		_DS1621_Init
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text38
  7821  001A66                     __ptext38:
  7822                           	opt stack 0
  7823  001A66                     _I2C_Write_Cmd_Only:
  7824                           	opt stack 23
  7825                           
  7826                           ;incstack = 0
  7827                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7828  001A66  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7829                           
  7830                           ;I2C_Soft.c: 146: I2C_Start();
  7831  001A68  EC71  F00D         	call	_I2C_Start	;wreg free
  7832                           
  7833                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  7834  001A6C  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7835  001A6E  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7836  001A70  EC33  F00C         	call	_I2C_Write
  7837                           
  7838                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  7839  001A74  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7840  001A76  EC33  F00C         	call	_I2C_Write
  7841                           
  7842                           ;I2C_Soft.c: 149: I2C_Stop();
  7843  001A7A  EC68  F00D         	call	_I2C_Stop	;wreg free
  7844  001A7E  0012               	return		;funcret
  7845  001A80                     __end_of_I2C_Write_Cmd_Only:
  7846                           	opt stack 0
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           intcon2	equ	0xFF1
  7855                           postinc0	equ	0xFEE
  7856                           wreg	equ	0xFE8
  7857                           postdec1	equ	0xFE5
  7858                           fsr1l	equ	0xFE1
  7859                           indf2	equ	0xFDF
  7860                           postinc2	equ	0xFDE
  7861                           postdec2	equ	0xFDD
  7862                           fsr2h	equ	0xFDA
  7863                           fsr2l	equ	0xFD9
  7864                           status	equ	0xFD8
  7865                           
  7866 ;; *************** function _Deactivate_Buzzer *****************
  7867 ;; Defined at:
  7868 ;;		line 238 in file "Lab11.c"
  7869 ;; Parameters:    Size  Location     Type
  7870 ;;		None
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;		None
  7873 ;; Return value:  Size  Location     Type
  7874 ;;		None               void
  7875 ;; Registers used:
  7876 ;;		wreg, status,2
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7886 ;;Total ram usage:        0 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:    3
  7889 ;; This function calls:
  7890 ;;		Nothing
  7891 ;; This function is called by:
  7892 ;;		_main
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           	psect	text39
  7897  001B7C                     __ptext39:
  7898                           	opt stack 0
  7899  001B7C                     _Deactivate_Buzzer:
  7900                           	opt stack 27
  7901                           
  7902                           ;Lab11.c: 240: CCP2CON = 0x0;
  7903                           
  7904                           ;incstack = 0
  7905  001B7C  0E00               	movlw	0
  7906  001B7E  6EBA               	movwf	4026,c	;volatile
  7907                           
  7908                           ;Lab11.c: 241: PORTBbits.RB3 = 0;
  7909  001B80  9681               	bcf	3969,3,c	;volatile
  7910  001B82  0012               	return		;funcret
  7911  001B84                     __end_of_Deactivate_Buzzer:
  7912                           	opt stack 0
  7913                           tblptru	equ	0xFF8
  7914                           tblptrh	equ	0xFF7
  7915                           tblptrl	equ	0xFF6
  7916                           tablat	equ	0xFF5
  7917                           prodh	equ	0xFF4
  7918                           prodl	equ	0xFF3
  7919                           intcon	equ	0xFF2
  7920                           intcon2	equ	0xFF1
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           postdec1	equ	0xFE5
  7924                           fsr1l	equ	0xFE1
  7925                           indf2	equ	0xFDF
  7926                           postinc2	equ	0xFDE
  7927                           postdec2	equ	0xFDD
  7928                           fsr2h	equ	0xFDA
  7929                           fsr2l	equ	0xFD9
  7930                           status	equ	0xFD8
  7931                           
  7932 ;; *************** function _DS3231_Setup_Time *****************
  7933 ;; Defined at:
  7934 ;;		line 65 in file "I2C_Support.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  Address         1   19[COMRAM] unsigned char 
  7939 ;;  Device          1   18[COMRAM] unsigned char 
  7940 ;; Return value:  Size  Location     Type
  7941 ;;		None               void
  7942 ;; Registers used:
  7943 ;;		wreg, status,2, status,0, cstack
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;Total ram usage:        2 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    5
  7956 ;; This function calls:
  7957 ;;		_I2C_Start
  7958 ;;		_I2C_Stop
  7959 ;;		_I2C_Write
  7960 ;; This function is called by:
  7961 ;;		_main
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           	psect	text40
  7966  0015B6                     __ptext40:
  7967                           	opt stack 0
  7968  0015B6                     _DS3231_Setup_Time:
  7969                           	opt stack 25
  7970                           
  7971                           ;I2C_Support.c: 67: char Device = 0x68;
  7972                           
  7973                           ;incstack = 0
  7974  0015B6  0E68               	movlw	104
  7975  0015B8  6E13               	movwf	DS3231_Setup_Time@Device,c
  7976                           
  7977                           ;I2C_Support.c: 68: char Address = 0x00;
  7978  0015BA  0E00               	movlw	0
  7979  0015BC  6E14               	movwf	DS3231_Setup_Time@Address,c
  7980                           
  7981                           ;I2C_Support.c: 69: second = 0x00;
  7982  0015BE  0E00               	movlw	0
  7983  0015C0  6E63               	movwf	_second,c
  7984                           
  7985                           ;I2C_Support.c: 70: hour = 0x00;
  7986  0015C2  0E00               	movlw	0
  7987  0015C4  6E5D               	movwf	_hour,c
  7988                           
  7989                           ;I2C_Support.c: 71: dow = 0x00;
  7990  0015C6  0E00               	movlw	0
  7991  0015C8  6E5B               	movwf	_dow,c
  7992                           
  7993                           ;I2C_Support.c: 72: day = 0x00;
  7994  0015CA  0E00               	movlw	0
  7995  0015CC  6E5A               	movwf	_day,c
  7996                           
  7997                           ;I2C_Support.c: 73: month = 0x00;
  7998  0015CE  0E00               	movlw	0
  7999  0015D0  6E60               	movwf	_month,c
  8000                           
  8001                           ;I2C_Support.c: 74: year = 0x00;
  8002  0015D2  0E00               	movlw	0
  8003  0015D4  6E6D               	movwf	_year,c
  8004                           
  8005                           ;I2C_Support.c: 76: I2C_Start();
  8006  0015D6  EC71  F00D         	call	_I2C_Start	;wreg free
  8007                           
  8008                           ;I2C_Support.c: 77: I2C_Write((Device << 1) | 0);
  8009  0015DA  5013               	movf	DS3231_Setup_Time@Device,w,c
  8010  0015DC  2413               	addwf	DS3231_Setup_Time@Device,w,c
  8011  0015DE  EC33  F00C         	call	_I2C_Write
  8012                           
  8013                           ;I2C_Support.c: 78: I2C_Write(Address);
  8014  0015E2  5014               	movf	DS3231_Setup_Time@Address,w,c
  8015  0015E4  EC33  F00C         	call	_I2C_Write
  8016                           
  8017                           ;I2C_Support.c: 79: I2C_Write(second);
  8018  0015E8  5063               	movf	_second,w,c
  8019  0015EA  EC33  F00C         	call	_I2C_Write
  8020                           
  8021                           ;I2C_Support.c: 80: I2C_Write(hour);
  8022  0015EE  505D               	movf	_hour,w,c
  8023  0015F0  EC33  F00C         	call	_I2C_Write
  8024                           
  8025                           ;I2C_Support.c: 81: I2C_Write(dow);
  8026  0015F4  505B               	movf	_dow,w,c
  8027  0015F6  EC33  F00C         	call	_I2C_Write
  8028                           
  8029                           ;I2C_Support.c: 82: I2C_Write(day);
  8030  0015FA  505A               	movf	_day,w,c
  8031  0015FC  EC33  F00C         	call	_I2C_Write
  8032                           
  8033                           ;I2C_Support.c: 83: I2C_Write(month);
  8034  001600  5060               	movf	_month,w,c
  8035  001602  EC33  F00C         	call	_I2C_Write
  8036                           
  8037                           ;I2C_Support.c: 84: I2C_Write(year);
  8038  001606  506D               	movf	_year,w,c
  8039  001608  EC33  F00C         	call	_I2C_Write
  8040                           
  8041                           ;I2C_Support.c: 85: I2C_Stop();
  8042  00160C  EC68  F00D         	call	_I2C_Stop	;wreg free
  8043  001610  0012               	return		;funcret
  8044  001612                     __end_of_DS3231_Setup_Time:
  8045                           	opt stack 0
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           intcon	equ	0xFF2
  8053                           intcon2	equ	0xFF1
  8054                           postinc0	equ	0xFEE
  8055                           wreg	equ	0xFE8
  8056                           postdec1	equ	0xFE5
  8057                           fsr1l	equ	0xFE1
  8058                           indf2	equ	0xFDF
  8059                           postinc2	equ	0xFDE
  8060                           postdec2	equ	0xFDD
  8061                           fsr2h	equ	0xFDA
  8062                           fsr2l	equ	0xFD9
  8063                           status	equ	0xFD8
  8064                           
  8065 ;; *************** function _DS3231_Read_Time *****************
  8066 ;; Defined at:
  8067 ;;		line 45 in file "I2C_Support.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  Device          1   20[COMRAM] unsigned char 
  8072 ;;  Address         1   19[COMRAM] unsigned char 
  8073 ;;  Data_Ret        1    0        unsigned char 
  8074 ;; Return value:  Size  Location     Type
  8075 ;;		None               void
  8076 ;; Registers used:
  8077 ;;		wreg, status,2, status,0, cstack
  8078 ;; Tracked objects:
  8079 ;;		On entry : 0/0
  8080 ;;		On exit  : 0/0
  8081 ;;		Unchanged: 0/0
  8082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;Total ram usage:        2 bytes
  8088 ;; Hardware stack levels used:    1
  8089 ;; Hardware stack levels required when called:    6
  8090 ;; This function calls:
  8091 ;;		_I2C_ReStart
  8092 ;;		_I2C_Read
  8093 ;;		_I2C_Start
  8094 ;;		_I2C_Stop
  8095 ;;		_I2C_Write
  8096 ;; This function is called by:
  8097 ;;		_main
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text41
  8102  001552                     __ptext41:
  8103                           	opt stack 0
  8104  001552                     _DS3231_Read_Time:
  8105                           	opt stack 24
  8106                           
  8107                           ;I2C_Support.c: 47: char Device = 0x68;
  8108                           
  8109                           ;incstack = 0
  8110  001552  0E68               	movlw	104
  8111  001554  6E15               	movwf	DS3231_Read_Time@Device,c
  8112                           
  8113                           ;I2C_Support.c: 48: char Address = 0x00;
  8114  001556  0E00               	movlw	0
  8115  001558  6E14               	movwf	DS3231_Read_Time@Address,c
  8116                           
  8117                           ;I2C_Support.c: 49: char Data_Ret;
  8118                           ;I2C_Support.c: 50: I2C_Start();
  8119  00155A  EC71  F00D         	call	_I2C_Start	;wreg free
  8120                           
  8121                           ;I2C_Support.c: 51: I2C_Write((Device << 1) | 0);
  8122  00155E  5015               	movf	DS3231_Read_Time@Device,w,c
  8123  001560  2415               	addwf	DS3231_Read_Time@Device,w,c
  8124  001562  EC33  F00C         	call	_I2C_Write
  8125                           
  8126                           ;I2C_Support.c: 52: I2C_Write(Address);
  8127  001566  5014               	movf	DS3231_Read_Time@Address,w,c
  8128  001568  EC33  F00C         	call	_I2C_Write
  8129                           
  8130                           ;I2C_Support.c: 53: I2C_ReStart();
  8131  00156C  EC40  F00D         	call	_I2C_ReStart	;wreg free
  8132                           
  8133                           ;I2C_Support.c: 54: I2C_Write((Device << 1) | 1);
  8134  001570  80D8               	bsf	status,0,c
  8135  001572  3415               	rlcf	DS3231_Read_Time@Device,w,c
  8136  001574  EC33  F00C         	call	_I2C_Write
  8137                           
  8138                           ;I2C_Support.c: 55: second = I2C_Read(1);
  8139  001578  0E01               	movlw	1
  8140  00157A  ECD1  F00B         	call	_I2C_Read
  8141  00157E  6E63               	movwf	_second,c
  8142                           
  8143                           ;I2C_Support.c: 56: minute = I2C_Read(1);
  8144  001580  0E01               	movlw	1
  8145  001582  ECD1  F00B         	call	_I2C_Read
  8146  001586  6E5F               	movwf	_minute,c
  8147                           
  8148                           ;I2C_Support.c: 57: hour = I2C_Read(1);
  8149  001588  0E01               	movlw	1
  8150  00158A  ECD1  F00B         	call	_I2C_Read
  8151  00158E  6E5D               	movwf	_hour,c
  8152                           
  8153                           ;I2C_Support.c: 58: dow = I2C_Read(1);
  8154  001590  0E01               	movlw	1
  8155  001592  ECD1  F00B         	call	_I2C_Read
  8156  001596  6E5B               	movwf	_dow,c
  8157                           
  8158                           ;I2C_Support.c: 59: day = I2C_Read(1);
  8159  001598  0E01               	movlw	1
  8160  00159A  ECD1  F00B         	call	_I2C_Read
  8161  00159E  6E5A               	movwf	_day,c
  8162                           
  8163                           ;I2C_Support.c: 60: month = I2C_Read(1);
  8164  0015A0  0E01               	movlw	1
  8165  0015A2  ECD1  F00B         	call	_I2C_Read
  8166  0015A6  6E60               	movwf	_month,c
  8167                           
  8168                           ;I2C_Support.c: 61: year = I2C_Read(0);
  8169  0015A8  0E00               	movlw	0
  8170  0015AA  ECD1  F00B         	call	_I2C_Read
  8171  0015AE  6E6D               	movwf	_year,c
  8172                           
  8173                           ;I2C_Support.c: 62: I2C_Stop();
  8174  0015B0  EC68  F00D         	call	_I2C_Stop	;wreg free
  8175  0015B4  0012               	return		;funcret
  8176  0015B6                     __end_of_DS3231_Read_Time:
  8177                           	opt stack 0
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodh	equ	0xFF4
  8183                           prodl	equ	0xFF3
  8184                           intcon	equ	0xFF2
  8185                           intcon2	equ	0xFF1
  8186                           postinc0	equ	0xFEE
  8187                           wreg	equ	0xFE8
  8188                           postdec1	equ	0xFE5
  8189                           fsr1l	equ	0xFE1
  8190                           indf2	equ	0xFDF
  8191                           postinc2	equ	0xFDE
  8192                           postdec2	equ	0xFDD
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _DS1621_Read_Temp *****************
  8198 ;; Defined at:
  8199 ;;		line 30 in file "I2C_Support.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;		None
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  Device          1   23[COMRAM] unsigned char 
  8204 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  8205 ;;  Cmd             1   21[COMRAM] unsigned char 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  2   19[COMRAM] int 
  8208 ;; Registers used:
  8209 ;;		wreg, status,2, status,0, cstack
  8210 ;; Tracked objects:
  8211 ;;		On entry : 0/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8215 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;Total ram usage:        5 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    6
  8222 ;; This function calls:
  8223 ;;		_I2C_ReStart
  8224 ;;		_I2C_Read
  8225 ;;		_I2C_Start
  8226 ;;		_I2C_Stop
  8227 ;;		_I2C_Write
  8228 ;; This function is called by:
  8229 ;;		_main
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           	psect	text42
  8234  0018E0                     __ptext42:
  8235                           	opt stack 0
  8236  0018E0                     _DS1621_Read_Temp:
  8237                           	opt stack 24
  8238                           
  8239                           ;I2C_Support.c: 32: char Device = 0x48;
  8240                           
  8241                           ;incstack = 0
  8242  0018E0  0E48               	movlw	72
  8243  0018E2  6E18               	movwf	DS1621_Read_Temp@Device,c
  8244                           
  8245                           ;I2C_Support.c: 33: char Cmd = 0xAA;
  8246  0018E4  0EAA               	movlw	170
  8247  0018E6  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  8248                           
  8249                           ;I2C_Support.c: 34: char Data_Ret;
  8250                           ;I2C_Support.c: 35: I2C_Start();
  8251  0018E8  EC71  F00D         	call	_I2C_Start	;wreg free
  8252                           
  8253                           ;I2C_Support.c: 36: I2C_Write((Device << 1) | 0);
  8254  0018EC  5018               	movf	DS1621_Read_Temp@Device,w,c
  8255  0018EE  2418               	addwf	DS1621_Read_Temp@Device,w,c
  8256  0018F0  EC33  F00C         	call	_I2C_Write
  8257                           
  8258                           ;I2C_Support.c: 37: I2C_Write(Cmd);
  8259  0018F4  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  8260  0018F6  EC33  F00C         	call	_I2C_Write
  8261                           
  8262                           ;I2C_Support.c: 38: I2C_ReStart();
  8263  0018FA  EC40  F00D         	call	_I2C_ReStart	;wreg free
  8264                           
  8265                           ;I2C_Support.c: 39: I2C_Write((Device << 1) | 1);
  8266  0018FE  80D8               	bsf	status,0,c
  8267  001900  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  8268  001902  EC33  F00C         	call	_I2C_Write
  8269                           
  8270                           ;I2C_Support.c: 40: Data_Ret = I2C_Read(0);
  8271  001906  0E00               	movlw	0
  8272  001908  ECD1  F00B         	call	_I2C_Read
  8273  00190C  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  8274                           
  8275                           ;I2C_Support.c: 41: I2C_Stop();
  8276  00190E  EC68  F00D         	call	_I2C_Stop	;wreg free
  8277                           
  8278                           ;I2C_Support.c: 42: return Data_Ret;
  8279  001912  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8280  001916  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8281  001918  D000               	goto	l326
  8282  00191A                     l326:
  8283  00191A  0012               	return		;funcret
  8284  00191C                     __end_of_DS1621_Read_Temp:
  8285                           	opt stack 0
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           intcon2	equ	0xFF1
  8294                           postinc0	equ	0xFEE
  8295                           wreg	equ	0xFE8
  8296                           postdec1	equ	0xFE5
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function _I2C_Write *****************
  8306 ;; Defined at:
  8307 ;;		line 41 in file "I2C_Soft.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;  outByte         1    wreg     unsigned char 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  outByte         1   16[COMRAM] unsigned char 
  8312 ;;  n               1   17[COMRAM] unsigned char 
  8313 ;; Return value:  Size  Location     Type
  8314 ;;		None               void
  8315 ;; Registers used:
  8316 ;;		wreg, status,2, status,0, cstack
  8317 ;; Tracked objects:
  8318 ;;		On entry : 0/0
  8319 ;;		On exit  : 0/0
  8320 ;;		Unchanged: 0/0
  8321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;Total ram usage:        2 bytes
  8327 ;; Hardware stack levels used:    1
  8328 ;; Hardware stack levels required when called:    4
  8329 ;; This function calls:
  8330 ;;		_i2cHighScl
  8331 ;;		_i2cHighSda
  8332 ;;		_i2cLowScl
  8333 ;;		_i2cLowSda
  8334 ;; This function is called by:
  8335 ;;		_I2C_Write_Cmd_Only
  8336 ;;		_I2C_Write_Cmd_Write_Data
  8337 ;;		_DS1621_Read_Temp
  8338 ;;		_DS3231_Read_Time
  8339 ;;		_DS3231_Setup_Time
  8340 ;;		_I2C_Write_Address_Read_One_Byte
  8341 ;;		_I2C_Write_Address_Write_One_Byte
  8342 ;;		_I2C_Write_Cmd_Read_One_Byte
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text43
  8347  001866                     __ptext43:
  8348                           	opt stack 0
  8349  001866                     _I2C_Write:
  8350                           	opt stack 23
  8351                           
  8352                           ;incstack = 0
  8353                           ;I2C_Write@outByte stored from wreg
  8354  001866  6E11               	movwf	I2C_Write@outByte,c
  8355                           
  8356                           ;I2C_Soft.c: 43: unsigned char n;
  8357                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
  8358  001868  0E00               	movlw	0
  8359  00186A  6E12               	movwf	I2C_Write@n,c
  8360  00186C                     l4222:
  8361  00186C  0E07               	movlw	7
  8362  00186E  6412               	cpfsgt	I2C_Write@n,c
  8363  001870  D001               	goto	l246
  8364  001872  D011               	goto	l4240
  8365  001874                     l246:
  8366                           
  8367                           ;I2C_Soft.c: 45: {
  8368                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
  8369  001874  AE11               	btfss	I2C_Write@outByte,7,c
  8370  001876  D003               	goto	l4228
  8371  001878  ECC6  F00D         	call	_i2cHighSda	;wreg free
  8372  00187C  D003               	goto	l4230
  8373  00187E                     l4228:
  8374                           
  8375                           ;I2C_Soft.c: 47: else i2cLowSda();
  8376  00187E  ECB9  F00D         	call	_i2cLowSda	;wreg free
  8377  001882  D000               	goto	l4230
  8378  001884                     l4230:
  8379                           
  8380                           ;I2C_Soft.c: 48: i2cHighScl();
  8381  001884  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8382                           
  8383                           ;I2C_Soft.c: 49: i2cLowScl();
  8384  001888  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8385                           
  8386                           ;I2C_Soft.c: 50: outByte = outByte << 1;
  8387  00188C  5011               	movf	I2C_Write@outByte,w,c
  8388  00188E  2411               	addwf	I2C_Write@outByte,w,c
  8389  001890  6E11               	movwf	I2C_Write@outByte,c
  8390  001892  2A12               	incf	I2C_Write@n,f,c
  8391  001894  D7EB               	goto	l4222
  8392  001896                     l4240:
  8393                           
  8394                           ;I2C_Soft.c: 51: }
  8395                           ;I2C_Soft.c: 52: i2cHighSda();
  8396  001896  ECC6  F00D         	call	_i2cHighSda	;wreg free
  8397                           
  8398                           ;I2C_Soft.c: 53: i2cHighScl();
  8399  00189A  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8400                           
  8401                           ;I2C_Soft.c: 54: i2cLowScl();
  8402  00189E  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8403  0018A2  0012               	return		;funcret
  8404  0018A4                     __end_of_I2C_Write:
  8405                           	opt stack 0
  8406                           tblptru	equ	0xFF8
  8407                           tblptrh	equ	0xFF7
  8408                           tblptrl	equ	0xFF6
  8409                           tablat	equ	0xFF5
  8410                           prodh	equ	0xFF4
  8411                           prodl	equ	0xFF3
  8412                           intcon	equ	0xFF2
  8413                           intcon2	equ	0xFF1
  8414                           postinc0	equ	0xFEE
  8415                           wreg	equ	0xFE8
  8416                           postdec1	equ	0xFE5
  8417                           fsr1l	equ	0xFE1
  8418                           indf2	equ	0xFDF
  8419                           postinc2	equ	0xFDE
  8420                           postdec2	equ	0xFDD
  8421                           fsr2h	equ	0xFDA
  8422                           fsr2l	equ	0xFD9
  8423                           status	equ	0xFD8
  8424                           
  8425 ;; *************** function _I2C_Stop *****************
  8426 ;; Defined at:
  8427 ;;		line 88 in file "I2C_Soft.c"
  8428 ;; Parameters:    Size  Location     Type
  8429 ;;		None
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;		None
  8432 ;; Return value:  Size  Location     Type
  8433 ;;		None               void
  8434 ;; Registers used:
  8435 ;;		wreg, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;Total ram usage:        0 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    4
  8448 ;; This function calls:
  8449 ;;		_i2cHighScl
  8450 ;;		_i2cHighSda
  8451 ;;		_i2cLowScl
  8452 ;;		_i2cLowSda
  8453 ;; This function is called by:
  8454 ;;		_I2C_Write_Cmd_Only
  8455 ;;		_I2C_Write_Cmd_Write_Data
  8456 ;;		_DS1621_Read_Temp
  8457 ;;		_DS3231_Read_Time
  8458 ;;		_DS3231_Setup_Time
  8459 ;;		_I2C_Write_Address_Read_One_Byte
  8460 ;;		_I2C_Write_Address_Write_One_Byte
  8461 ;;		_I2C_Write_Cmd_Read_One_Byte
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           	psect	text44
  8466  001AD0                     __ptext44:
  8467                           	opt stack 0
  8468  001AD0                     _I2C_Stop:
  8469                           	opt stack 23
  8470                           
  8471                           ;I2C_Soft.c: 90: i2cLowScl();
  8472                           
  8473                           ;incstack = 0
  8474  001AD0  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8475                           
  8476                           ;I2C_Soft.c: 91: i2cLowSda();
  8477  001AD4  ECB9  F00D         	call	_i2cLowSda	;wreg free
  8478                           
  8479                           ;I2C_Soft.c: 92: i2cHighScl();
  8480  001AD8  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8481                           
  8482                           ;I2C_Soft.c: 93: i2cHighSda();
  8483  001ADC  ECC6  F00D         	call	_i2cHighSda	;wreg free
  8484  001AE0  0012               	return		;funcret
  8485  001AE2                     __end_of_I2C_Stop:
  8486                           	opt stack 0
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           intcon2	equ	0xFF1
  8495                           postinc0	equ	0xFEE
  8496                           wreg	equ	0xFE8
  8497                           postdec1	equ	0xFE5
  8498                           fsr1l	equ	0xFE1
  8499                           indf2	equ	0xFDF
  8500                           postinc2	equ	0xFDE
  8501                           postdec2	equ	0xFDD
  8502                           fsr2h	equ	0xFDA
  8503                           fsr2l	equ	0xFD9
  8504                           status	equ	0xFD8
  8505                           
  8506 ;; *************** function _I2C_Start *****************
  8507 ;; Defined at:
  8508 ;;		line 71 in file "I2C_Soft.c"
  8509 ;; Parameters:    Size  Location     Type
  8510 ;;		None
  8511 ;; Auto vars:     Size  Location     Type
  8512 ;;		None
  8513 ;; Return value:  Size  Location     Type
  8514 ;;		None               void
  8515 ;; Registers used:
  8516 ;;		wreg, cstack
  8517 ;; Tracked objects:
  8518 ;;		On entry : 0/0
  8519 ;;		On exit  : 0/0
  8520 ;;		Unchanged: 0/0
  8521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8526 ;;Total ram usage:        0 bytes
  8527 ;; Hardware stack levels used:    1
  8528 ;; Hardware stack levels required when called:    4
  8529 ;; This function calls:
  8530 ;;		_i2cHighScl
  8531 ;;		_i2cHighSda
  8532 ;;		_i2cLowScl
  8533 ;;		_i2cLowSda
  8534 ;; This function is called by:
  8535 ;;		_I2C_Write_Cmd_Only
  8536 ;;		_I2C_Write_Cmd_Write_Data
  8537 ;;		_DS1621_Read_Temp
  8538 ;;		_DS3231_Read_Time
  8539 ;;		_DS3231_Setup_Time
  8540 ;;		_I2C_Write_Address_Read_One_Byte
  8541 ;;		_I2C_Write_Address_Write_One_Byte
  8542 ;;		_I2C_Write_Cmd_Read_One_Byte
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           	psect	text45
  8547  001AE2                     __ptext45:
  8548                           	opt stack 0
  8549  001AE2                     _I2C_Start:
  8550                           	opt stack 23
  8551                           
  8552                           ;I2C_Soft.c: 73: i2cHighSda();
  8553                           
  8554                           ;incstack = 0
  8555  001AE2  ECC6  F00D         	call	_i2cHighSda	;wreg free
  8556                           
  8557                           ;I2C_Soft.c: 74: i2cHighScl();
  8558  001AE6  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8559                           
  8560                           ;I2C_Soft.c: 75: i2cLowSda();
  8561  001AEA  ECB9  F00D         	call	_i2cLowSda	;wreg free
  8562                           
  8563                           ;I2C_Soft.c: 76: i2cLowScl();
  8564  001AEE  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8565  001AF2  0012               	return		;funcret
  8566  001AF4                     __end_of_I2C_Start:
  8567                           	opt stack 0
  8568                           tblptru	equ	0xFF8
  8569                           tblptrh	equ	0xFF7
  8570                           tblptrl	equ	0xFF6
  8571                           tablat	equ	0xFF5
  8572                           prodh	equ	0xFF4
  8573                           prodl	equ	0xFF3
  8574                           intcon	equ	0xFF2
  8575                           intcon2	equ	0xFF1
  8576                           postinc0	equ	0xFEE
  8577                           wreg	equ	0xFE8
  8578                           postdec1	equ	0xFE5
  8579                           fsr1l	equ	0xFE1
  8580                           indf2	equ	0xFDF
  8581                           postinc2	equ	0xFDE
  8582                           postdec2	equ	0xFDD
  8583                           fsr2h	equ	0xFDA
  8584                           fsr2l	equ	0xFD9
  8585                           status	equ	0xFD8
  8586                           
  8587 ;; *************** function _I2C_Read *****************
  8588 ;; Defined at:
  8589 ;;		line 20 in file "I2C_Soft.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;  ack             1    wreg     unsigned char 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;  ack             1   16[COMRAM] unsigned char 
  8594 ;;  inByte          1   18[COMRAM] unsigned char 
  8595 ;;  n               1   17[COMRAM] unsigned char 
  8596 ;; Return value:  Size  Location     Type
  8597 ;;                  1    wreg      unsigned char 
  8598 ;; Registers used:
  8599 ;;		wreg, status,2, status,0, cstack
  8600 ;; Tracked objects:
  8601 ;;		On entry : 0/0
  8602 ;;		On exit  : 0/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8608 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8609 ;;Total ram usage:        3 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    5
  8612 ;; This function calls:
  8613 ;;		_i2cAck
  8614 ;;		_i2cHighScl
  8615 ;;		_i2cHighSda
  8616 ;;		_i2cLowScl
  8617 ;;		_i2cNack
  8618 ;; This function is called by:
  8619 ;;		_DS1621_Read_Temp
  8620 ;;		_DS3231_Read_Time
  8621 ;;		_I2C_Write_Address_Read_One_Byte
  8622 ;;		_I2C_Write_Cmd_Read_One_Byte
  8623 ;; This function uses a non-reentrant model
  8624 ;;
  8625                           
  8626                           	psect	text46
  8627  0017A2                     __ptext46:
  8628                           	opt stack 0
  8629  0017A2                     _I2C_Read:
  8630                           	opt stack 24
  8631                           
  8632                           ;incstack = 0
  8633                           ;I2C_Read@ack stored from wreg
  8634  0017A2  6E11               	movwf	I2C_Read@ack,c
  8635                           
  8636                           ;I2C_Soft.c: 22: unsigned char inByte, n;
  8637                           ;I2C_Soft.c: 23: i2cHighSda();
  8638  0017A4  ECC6  F00D         	call	_i2cHighSda	;wreg free
  8639                           
  8640                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
  8641  0017A8  0E00               	movlw	0
  8642  0017AA  6E12               	movwf	I2C_Read@n,c
  8643  0017AC                     l4634:
  8644  0017AC  0E07               	movlw	7
  8645  0017AE  6412               	cpfsgt	I2C_Read@n,c
  8646  0017B0  D001               	goto	l4638
  8647  0017B2  D00F               	goto	l4652
  8648  0017B4                     l4638:
  8649                           
  8650                           ;I2C_Soft.c: 25: {
  8651                           ;I2C_Soft.c: 26: i2cHighScl();
  8652  0017B4  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8653                           
  8654                           ;I2C_Soft.c: 28: if (PORTDbits.RD6)
  8655  0017B8  AC83               	btfss	3971,6,c	;volatile
  8656  0017BA  D003               	goto	l4644
  8657                           
  8658                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
  8659  0017BC  80D8               	bsf	status,0,c
  8660  0017BE  3613               	rlcf	I2C_Read@inByte,f,c
  8661  0017C0  D004               	goto	l4646
  8662  0017C2                     l4644:
  8663                           
  8664                           ;I2C_Soft.c: 30: else
  8665                           ;I2C_Soft.c: 31: inByte = inByte << 1;
  8666  0017C2  5013               	movf	I2C_Read@inByte,w,c
  8667  0017C4  2413               	addwf	I2C_Read@inByte,w,c
  8668  0017C6  6E13               	movwf	I2C_Read@inByte,c
  8669  0017C8  D000               	goto	l4646
  8670  0017CA                     l4646:
  8671                           
  8672                           ;I2C_Soft.c: 32: i2cLowScl();
  8673  0017CA  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8674  0017CE  2A12               	incf	I2C_Read@n,f,c
  8675  0017D0  D7ED               	goto	l4634
  8676  0017D2                     l4652:
  8677                           
  8678                           ;I2C_Soft.c: 33: }
  8679                           ;I2C_Soft.c: 34: if (ack) i2cAck();
  8680  0017D2  5011               	movf	I2C_Read@ack,w,c
  8681  0017D4  B4D8               	btfsc	status,2,c
  8682  0017D6  D003               	goto	l4656
  8683  0017D8  EC7A  F00D         	call	_i2cAck	;wreg free
  8684  0017DC  D003               	goto	l4658
  8685  0017DE                     l4656:
  8686                           
  8687                           ;I2C_Soft.c: 35: else i2cNack();
  8688  0017DE  ECB4  F00D         	call	_i2cNack	;wreg free
  8689  0017E2  D000               	goto	l4658
  8690  0017E4                     l4658:
  8691                           
  8692                           ;I2C_Soft.c: 38: return(inByte);
  8693  0017E4  5013               	movf	I2C_Read@inByte,w,c
  8694  0017E6  D000               	goto	l243
  8695  0017E8                     l243:
  8696  0017E8  0012               	return		;funcret
  8697  0017EA                     __end_of_I2C_Read:
  8698                           	opt stack 0
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon2	equ	0xFF1
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           fsr1l	equ	0xFE1
  8711                           indf2	equ	0xFDF
  8712                           postinc2	equ	0xFDE
  8713                           postdec2	equ	0xFDD
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _i2cNack *****************
  8719 ;; Defined at:
  8720 ;;		line 57 in file "I2C_Soft.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;		None               void
  8727 ;; Registers used:
  8728 ;;		wreg, cstack
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;Total ram usage:        0 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    4
  8741 ;; This function calls:
  8742 ;;		_i2cHighScl
  8743 ;;		_i2cLowScl
  8744 ;; This function is called by:
  8745 ;;		_I2C_Read
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text47
  8750  001B68                     __ptext47:
  8751                           	opt stack 0
  8752  001B68                     _i2cNack:
  8753                           	opt stack 24
  8754                           
  8755                           ;I2C_Soft.c: 59: i2cHighScl();
  8756                           
  8757                           ;incstack = 0
  8758  001B68  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8759                           
  8760                           ;I2C_Soft.c: 60: i2cLowScl();
  8761  001B6C  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8762  001B70  0012               	return		;funcret
  8763  001B72                     __end_of_i2cNack:
  8764                           	opt stack 0
  8765                           tblptru	equ	0xFF8
  8766                           tblptrh	equ	0xFF7
  8767                           tblptrl	equ	0xFF6
  8768                           tablat	equ	0xFF5
  8769                           prodh	equ	0xFF4
  8770                           prodl	equ	0xFF3
  8771                           intcon	equ	0xFF2
  8772                           intcon2	equ	0xFF1
  8773                           postinc0	equ	0xFEE
  8774                           wreg	equ	0xFE8
  8775                           postdec1	equ	0xFE5
  8776                           fsr1l	equ	0xFE1
  8777                           indf2	equ	0xFDF
  8778                           postinc2	equ	0xFDE
  8779                           postdec2	equ	0xFDD
  8780                           fsr2h	equ	0xFDA
  8781                           fsr2l	equ	0xFD9
  8782                           status	equ	0xFD8
  8783                           
  8784 ;; *************** function _i2cAck *****************
  8785 ;; Defined at:
  8786 ;;		line 63 in file "I2C_Soft.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;		None
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;		None
  8791 ;; Return value:  Size  Location     Type
  8792 ;;		None               void
  8793 ;; Registers used:
  8794 ;;		wreg, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;Total ram usage:        0 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    4
  8807 ;; This function calls:
  8808 ;;		_i2cHighScl
  8809 ;;		_i2cHighSda
  8810 ;;		_i2cLowScl
  8811 ;;		_i2cLowSda
  8812 ;; This function is called by:
  8813 ;;		_I2C_Read
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           	psect	text48
  8818  001AF4                     __ptext48:
  8819                           	opt stack 0
  8820  001AF4                     _i2cAck:
  8821                           	opt stack 24
  8822                           
  8823                           ;I2C_Soft.c: 65: i2cLowSda();
  8824                           
  8825                           ;incstack = 0
  8826  001AF4  ECB9  F00D         	call	_i2cLowSda	;wreg free
  8827                           
  8828                           ;I2C_Soft.c: 66: i2cHighScl();
  8829  001AF8  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8830                           
  8831                           ;I2C_Soft.c: 67: i2cLowScl();
  8832  001AFC  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8833                           
  8834                           ;I2C_Soft.c: 68: i2cHighSda();
  8835  001B00  ECC6  F00D         	call	_i2cHighSda	;wreg free
  8836  001B04  0012               	return		;funcret
  8837  001B06                     __end_of_i2cAck:
  8838                           	opt stack 0
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           intcon2	equ	0xFF1
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           postdec1	equ	0xFE5
  8850                           fsr1l	equ	0xFE1
  8851                           indf2	equ	0xFDF
  8852                           postinc2	equ	0xFDE
  8853                           postdec2	equ	0xFDD
  8854                           fsr2h	equ	0xFDA
  8855                           fsr2l	equ	0xFD9
  8856                           status	equ	0xFD8
  8857                           
  8858 ;; *************** function _I2C_ReStart *****************
  8859 ;; Defined at:
  8860 ;;		line 79 in file "I2C_Soft.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;		None
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;		None
  8865 ;; Return value:  Size  Location     Type
  8866 ;;		None               void
  8867 ;; Registers used:
  8868 ;;		wreg, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;Total ram usage:        0 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    4
  8881 ;; This function calls:
  8882 ;;		_i2cHighScl
  8883 ;;		_i2cHighSda
  8884 ;;		_i2cLowScl
  8885 ;;		_i2cLowSda
  8886 ;; This function is called by:
  8887 ;;		_DS1621_Read_Temp
  8888 ;;		_DS3231_Read_Time
  8889 ;;		_I2C_Write_Address_Read_One_Byte
  8890 ;;		_I2C_Write_Cmd_Read_One_Byte
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           	psect	text49
  8895  001A80                     __ptext49:
  8896                           	opt stack 0
  8897  001A80                     _I2C_ReStart:
  8898                           	opt stack 25
  8899                           
  8900                           ;I2C_Soft.c: 81: i2cLowScl();
  8901                           
  8902                           ;incstack = 0
  8903  001A80  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8904                           
  8905                           ;I2C_Soft.c: 82: i2cHighSda();
  8906  001A84  ECC6  F00D         	call	_i2cHighSda	;wreg free
  8907                           
  8908                           ;I2C_Soft.c: 83: i2cHighScl();
  8909  001A88  ECA3  F00D         	call	_i2cHighScl	;wreg free
  8910                           
  8911                           ;I2C_Soft.c: 84: i2cLowSda();
  8912  001A8C  ECB9  F00D         	call	_i2cLowSda	;wreg free
  8913                           
  8914                           ;I2C_Soft.c: 85: i2cLowScl();
  8915  001A90  ECC2  F00D         	call	_i2cLowScl	;wreg free
  8916  001A94  0012               	return		;funcret
  8917  001A96                     __end_of_I2C_ReStart:
  8918                           	opt stack 0
  8919                           tblptru	equ	0xFF8
  8920                           tblptrh	equ	0xFF7
  8921                           tblptrl	equ	0xFF6
  8922                           tablat	equ	0xFF5
  8923                           prodh	equ	0xFF4
  8924                           prodl	equ	0xFF3
  8925                           intcon	equ	0xFF2
  8926                           intcon2	equ	0xFF1
  8927                           postinc0	equ	0xFEE
  8928                           wreg	equ	0xFE8
  8929                           postdec1	equ	0xFE5
  8930                           fsr1l	equ	0xFE1
  8931                           indf2	equ	0xFDF
  8932                           postinc2	equ	0xFDE
  8933                           postdec2	equ	0xFDD
  8934                           fsr2h	equ	0xFDA
  8935                           fsr2l	equ	0xFD9
  8936                           status	equ	0xFD8
  8937                           
  8938 ;; *************** function _i2cLowSda *****************
  8939 ;; Defined at:
  8940 ;;		line 102 in file "I2C_Soft.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;		None
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;		None
  8945 ;; Return value:  Size  Location     Type
  8946 ;;		None               void
  8947 ;; Registers used:
  8948 ;;		None
  8949 ;; Tracked objects:
  8950 ;;		On entry : 0/0
  8951 ;;		On exit  : 0/0
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;Total ram usage:        0 bytes
  8959 ;; Hardware stack levels used:    1
  8960 ;; Hardware stack levels required when called:    3
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_I2C_Write
  8965 ;;		_i2cAck
  8966 ;;		_I2C_Start
  8967 ;;		_I2C_ReStart
  8968 ;;		_I2C_Stop
  8969 ;; This function uses a non-reentrant model
  8970 ;;
  8971                           
  8972                           	psect	text50
  8973  001B72                     __ptext50:
  8974                           	opt stack 0
  8975  001B72                     _i2cLowSda:
  8976                           	opt stack 23
  8977                           
  8978                           ;I2C_Soft.c: 104: PORTDbits.RD6 = 0;
  8979                           
  8980                           ;incstack = 0
  8981  001B72  9C83               	bcf	3971,6,c	;volatile
  8982                           
  8983                           ;I2C_Soft.c: 105: TRISDbits.RD6 = 0;
  8984  001B74  9C95               	bcf	3989,6,c	;volatile
  8985                           
  8986                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8987  001B76  D000               	nop2		;2 cycle nop
  8988  001B78  D000               	nop2		;2 cycle nop
  8989  001B7A  0012               	return		;funcret
  8990  001B7C                     __end_of_i2cLowSda:
  8991                           	opt stack 0
  8992                           tblptru	equ	0xFF8
  8993                           tblptrh	equ	0xFF7
  8994                           tblptrl	equ	0xFF6
  8995                           tablat	equ	0xFF5
  8996                           prodh	equ	0xFF4
  8997                           prodl	equ	0xFF3
  8998                           intcon	equ	0xFF2
  8999                           intcon2	equ	0xFF1
  9000                           postinc0	equ	0xFEE
  9001                           wreg	equ	0xFE8
  9002                           postdec1	equ	0xFE5
  9003                           fsr1l	equ	0xFE1
  9004                           indf2	equ	0xFDF
  9005                           postinc2	equ	0xFDE
  9006                           postdec2	equ	0xFDD
  9007                           fsr2h	equ	0xFDA
  9008                           fsr2l	equ	0xFD9
  9009                           status	equ	0xFD8
  9010                           
  9011 ;; *************** function _i2cLowScl *****************
  9012 ;; Defined at:
  9013 ;;		line 115 in file "I2C_Soft.c"
  9014 ;; Parameters:    Size  Location     Type
  9015 ;;		None
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;		None
  9018 ;; Return value:  Size  Location     Type
  9019 ;;		None               void
  9020 ;; Registers used:
  9021 ;;		None
  9022 ;; Tracked objects:
  9023 ;;		On entry : 0/0
  9024 ;;		On exit  : 0/0
  9025 ;;		Unchanged: 0/0
  9026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;Total ram usage:        0 bytes
  9032 ;; Hardware stack levels used:    1
  9033 ;; Hardware stack levels required when called:    3
  9034 ;; This function calls:
  9035 ;;		Nothing
  9036 ;; This function is called by:
  9037 ;;		_I2C_Read
  9038 ;;		_I2C_Write
  9039 ;;		_i2cNack
  9040 ;;		_i2cAck
  9041 ;;		_I2C_Start
  9042 ;;		_I2C_ReStart
  9043 ;;		_I2C_Stop
  9044 ;; This function uses a non-reentrant model
  9045 ;;
  9046                           
  9047                           	psect	text51
  9048  001B84                     __ptext51:
  9049                           	opt stack 0
  9050  001B84                     _i2cLowScl:
  9051                           	opt stack 23
  9052                           
  9053                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
  9054                           
  9055                           ;incstack = 0
  9056  001B84  9881               	bcf	3969,4,c	;volatile
  9057                           
  9058                           ;I2C_Soft.c: 118: TRISBbits.RB4 = 0;
  9059  001B86  9893               	bcf	3987,4,c	;volatile
  9060                           
  9061                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9062  001B88  D000               	nop2		;2 cycle nop
  9063  001B8A  0012               	return		;funcret
  9064  001B8C                     __end_of_i2cLowScl:
  9065                           	opt stack 0
  9066                           tblptru	equ	0xFF8
  9067                           tblptrh	equ	0xFF7
  9068                           tblptrl	equ	0xFF6
  9069                           tablat	equ	0xFF5
  9070                           prodh	equ	0xFF4
  9071                           prodl	equ	0xFF3
  9072                           intcon	equ	0xFF2
  9073                           intcon2	equ	0xFF1
  9074                           postinc0	equ	0xFEE
  9075                           wreg	equ	0xFE8
  9076                           postdec1	equ	0xFE5
  9077                           fsr1l	equ	0xFE1
  9078                           indf2	equ	0xFDF
  9079                           postinc2	equ	0xFDE
  9080                           postdec2	equ	0xFDD
  9081                           fsr2h	equ	0xFDA
  9082                           fsr2l	equ	0xFD9
  9083                           status	equ	0xFD8
  9084                           
  9085 ;; *************** function _i2cHighSda *****************
  9086 ;; Defined at:
  9087 ;;		line 96 in file "I2C_Soft.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;		None
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;		None               void
  9094 ;; Registers used:
  9095 ;;		None
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;Total ram usage:        0 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    3
  9108 ;; This function calls:
  9109 ;;		Nothing
  9110 ;; This function is called by:
  9111 ;;		_I2C_Init
  9112 ;;		_I2C_Read
  9113 ;;		_I2C_Write
  9114 ;;		_i2cAck
  9115 ;;		_I2C_Start
  9116 ;;		_I2C_ReStart
  9117 ;;		_I2C_Stop
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           	psect	text52
  9122  001B8C                     __ptext52:
  9123                           	opt stack 0
  9124  001B8C                     _i2cHighSda:
  9125                           	opt stack 25
  9126                           
  9127                           ;I2C_Soft.c: 98: TRISDbits.RD6 = 1;
  9128                           
  9129                           ;incstack = 0
  9130  001B8C  8C95               	bsf	3989,6,c	;volatile
  9131                           
  9132                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9133  001B8E  D000               	nop2		;2 cycle nop
  9134  001B90  D000               	nop2		;2 cycle nop
  9135  001B92  0012               	return		;funcret
  9136  001B94                     __end_of_i2cHighSda:
  9137                           	opt stack 0
  9138                           tblptru	equ	0xFF8
  9139                           tblptrh	equ	0xFF7
  9140                           tblptrl	equ	0xFF6
  9141                           tablat	equ	0xFF5
  9142                           prodh	equ	0xFF4
  9143                           prodl	equ	0xFF3
  9144                           intcon	equ	0xFF2
  9145                           intcon2	equ	0xFF1
  9146                           postinc0	equ	0xFEE
  9147                           wreg	equ	0xFE8
  9148                           postdec1	equ	0xFE5
  9149                           fsr1l	equ	0xFE1
  9150                           indf2	equ	0xFDF
  9151                           postinc2	equ	0xFDE
  9152                           postdec2	equ	0xFDD
  9153                           fsr2h	equ	0xFDA
  9154                           fsr2l	equ	0xFD9
  9155                           status	equ	0xFD8
  9156                           
  9157 ;; *************** function _i2cHighScl *****************
  9158 ;; Defined at:
  9159 ;;		line 109 in file "I2C_Soft.c"
  9160 ;; Parameters:    Size  Location     Type
  9161 ;;		None
  9162 ;; Auto vars:     Size  Location     Type
  9163 ;;		None
  9164 ;; Return value:  Size  Location     Type
  9165 ;;		None               void
  9166 ;; Registers used:
  9167 ;;		wreg
  9168 ;; Tracked objects:
  9169 ;;		On entry : 0/0
  9170 ;;		On exit  : 0/0
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9177 ;;Total ram usage:        0 bytes
  9178 ;; Hardware stack levels used:    1
  9179 ;; Hardware stack levels required when called:    3
  9180 ;; This function calls:
  9181 ;;		Nothing
  9182 ;; This function is called by:
  9183 ;;		_I2C_Init
  9184 ;;		_I2C_Read
  9185 ;;		_I2C_Write
  9186 ;;		_i2cNack
  9187 ;;		_i2cAck
  9188 ;;		_I2C_Start
  9189 ;;		_I2C_ReStart
  9190 ;;		_I2C_Stop
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text53
  9195  001B46                     __ptext53:
  9196                           	opt stack 0
  9197  001B46                     _i2cHighScl:
  9198                           	opt stack 25
  9199                           
  9200                           ;I2C_Soft.c: 111: TRISBbits.RB4 = 1;
  9201                           
  9202                           ;incstack = 0
  9203  001B46  8893               	bsf	3987,4,c	;volatile
  9204                           
  9205                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9206  001B48  0E06               	movlw	6
  9207  001B4A                     u3957:
  9208  001B4A  2EE8               	decfsz	wreg,f,c
  9209  001B4C  D7FE               	goto	u3957
  9210  001B4E  D000               	nop2		;nop
  9211  001B50  0012               	return		;funcret
  9212  001B52                     __end_of_i2cHighScl:
  9213                           	opt stack 0
  9214                           tblptru	equ	0xFF8
  9215                           tblptrh	equ	0xFF7
  9216                           tblptrl	equ	0xFF6
  9217                           tablat	equ	0xFF5
  9218                           prodh	equ	0xFF4
  9219                           prodl	equ	0xFF3
  9220                           intcon	equ	0xFF2
  9221                           intcon2	equ	0xFF1
  9222                           postinc0	equ	0xFEE
  9223                           wreg	equ	0xFE8
  9224                           postdec1	equ	0xFE5
  9225                           fsr1l	equ	0xFE1
  9226                           indf2	equ	0xFDF
  9227                           postinc2	equ	0xFDE
  9228                           postdec2	equ	0xFDD
  9229                           fsr2h	equ	0xFDA
  9230                           fsr2l	equ	0xFD9
  9231                           status	equ	0xFD8
  9232                           
  9233 ;; *************** function _Activate_Buzzer *****************
  9234 ;; Defined at:
  9235 ;;		line 230 in file "Lab11.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;		None
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;		None
  9240 ;; Return value:  Size  Location     Type
  9241 ;;		None               void
  9242 ;; Registers used:
  9243 ;;		wreg, status,2
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;Total ram usage:        0 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    3
  9256 ;; This function calls:
  9257 ;;		Nothing
  9258 ;; This function is called by:
  9259 ;;		_main
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           	psect	text54
  9264  001B06                     __ptext54:
  9265                           	opt stack 0
  9266  001B06                     _Activate_Buzzer:
  9267                           	opt stack 27
  9268                           
  9269                           ;Lab11.c: 232: PR2 = 0b11111001;
  9270                           
  9271                           ;incstack = 0
  9272  001B06  0EF9               	movlw	249
  9273  001B08  6ECB               	movwf	4043,c	;volatile
  9274                           
  9275                           ;Lab11.c: 233: T2CON = 0b00000101;
  9276  001B0A  0E05               	movlw	5
  9277  001B0C  6ECA               	movwf	4042,c	;volatile
  9278                           
  9279                           ;Lab11.c: 234: CCPR2L = 0b01001010;
  9280  001B0E  0E4A               	movlw	74
  9281  001B10  6EBB               	movwf	4027,c	;volatile
  9282                           
  9283                           ;Lab11.c: 235: CCP2CON = 0b00111100;
  9284  001B12  0E3C               	movlw	60
  9285  001B14  6EBA               	movwf	4026,c	;volatile
  9286  001B16  0012               	return		;funcret
  9287  001B18                     __end_of_Activate_Buzzer:
  9288                           	opt stack 0
  9289                           tblptru	equ	0xFF8
  9290                           tblptrh	equ	0xFF7
  9291                           tblptrl	equ	0xFF6
  9292                           tablat	equ	0xFF5
  9293                           prodh	equ	0xFF4
  9294                           prodl	equ	0xFF3
  9295                           intcon	equ	0xFF2
  9296                           intcon2	equ	0xFF1
  9297                           postinc0	equ	0xFEE
  9298                           wreg	equ	0xFE8
  9299                           postdec1	equ	0xFE5
  9300                           fsr1l	equ	0xFE1
  9301                           indf2	equ	0xFDF
  9302                           postinc2	equ	0xFDE
  9303                           postdec2	equ	0xFDD
  9304                           fsr2h	equ	0xFDA
  9305                           fsr2l	equ	0xFD9
  9306                           status	equ	0xFD8
  9307                           
  9308 ;; *************** function _chkisr *****************
  9309 ;; Defined at:
  9310 ;;		line 14 in file "Interrupt.c"
  9311 ;; Parameters:    Size  Location     Type
  9312 ;;		None
  9313 ;; Auto vars:     Size  Location     Type
  9314 ;;		None
  9315 ;; Return value:  Size  Location     Type
  9316 ;;		None               void
  9317 ;; Registers used:
  9318 ;;		wreg, status,2, status,0, cstack
  9319 ;; Tracked objects:
  9320 ;;		On entry : 0/0
  9321 ;;		On exit  : 0/0
  9322 ;;		Unchanged: 0/0
  9323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;Total ram usage:       14 bytes
  9329 ;; Hardware stack levels used:    1
  9330 ;; Hardware stack levels required when called:    2
  9331 ;; This function calls:
  9332 ;;		_INT0_isr
  9333 ;;		_TIMER1_isr
  9334 ;; This function is called by:
  9335 ;;		Interrupt level 2
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	intcode
  9340  000008                     __pintcode:
  9341                           	opt stack 0
  9342  000008                     _chkisr:
  9343                           	opt stack 20
  9344                           
  9345                           ;incstack = 0
  9346  000008  CFFA F003          	movff	pclath,??_chkisr
  9347  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9348  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9349  000014  EDBE  F009         	call	int_func,f	;refresh shadow registers
  9350                           pclatu	equ	0xFFB
  9351                           pclath	equ	0xFFA
  9352                           tblptru	equ	0xFF8
  9353                           tblptrh	equ	0xFF7
  9354                           tblptrl	equ	0xFF6
  9355                           tablat	equ	0xFF5
  9356                           prodh	equ	0xFF4
  9357                           prodl	equ	0xFF3
  9358                           intcon	equ	0xFF2
  9359                           intcon2	equ	0xFF1
  9360                           postinc0	equ	0xFEE
  9361                           fsr0l	equ	0xFE9
  9362                           wreg	equ	0xFE8
  9363                           postdec1	equ	0xFE5
  9364                           fsr1l	equ	0xFE1
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8
  9371                           
  9372                           	psect	intcode_body
  9373  00137C                     __pintcode_body:
  9374                           	opt stack 20
  9375  00137C                     int_func:
  9376                           	opt stack 20
  9377  00137C  0006               	pop		; remove dummy address from shadow register refresh
  9378  00137E  CFEA F006          	movff	fsr0h,??_chkisr+3
  9379  001382  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9380  001386  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9381  00138A  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9382  00138E  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9383  001392  CFF3 F00B          	movff	prodl,??_chkisr+8
  9384  001396  CFF4 F00C          	movff	prodh,??_chkisr+9
  9385  00139A  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9386  00139E  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9387  0013A2  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9388  0013A6  CFF5 F010          	movff	tablat,??_chkisr+13
  9389                           
  9390                           ;Interrupt.c: 16: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9391  0013AA  A09E               	btfss	3998,0,c	;volatile
  9392  0013AC  D003               	goto	i2l2694
  9393  0013AE  ECA9  F00D         	call	_TIMER1_isr	;wreg free
  9394  0013B2  D000               	goto	i2l2694
  9395  0013B4                     i2l2694:
  9396                           
  9397                           ;Interrupt.c: 17: if (INTCONbits.INT0IF == 1) INT0_isr();
  9398  0013B4  A2F2               	btfss	intcon,1,c	;volatile
  9399  0013B6  D003               	goto	i2l371
  9400  0013B8  EC7C  F004         	call	_INT0_isr	;wreg free
  9401  0013BC  D000               	goto	i2l371
  9402  0013BE                     i2l371:
  9403  0013BE  C010  FFF5         	movff	??_chkisr+13,tablat
  9404  0013C2  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9405  0013C6  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9406  0013CA  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9407  0013CE  C00C  FFF4         	movff	??_chkisr+9,prodh
  9408  0013D2  C00B  FFF3         	movff	??_chkisr+8,prodl
  9409  0013D6  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9410  0013DA  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9411  0013DE  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9412  0013E2  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9413  0013E6  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9414  0013EA  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9415  0013EE  C004  FFFB         	movff	??_chkisr+1,pclatu
  9416  0013F2  C003  FFFA         	movff	??_chkisr,pclath
  9417  0013F6  0011               	retfie		f
  9418  0013F8                     __end_of_chkisr:
  9419                           	opt stack 0
  9420                           pclatu	equ	0xFFB
  9421                           pclath	equ	0xFFA
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           intcon2	equ	0xFF1
  9430                           postinc0	equ	0xFEE
  9431                           fsr0h	equ	0xFEA
  9432                           fsr0l	equ	0xFE9
  9433                           wreg	equ	0xFE8
  9434                           postdec1	equ	0xFE5
  9435                           fsr1h	equ	0xFE2
  9436                           fsr1l	equ	0xFE1
  9437                           indf2	equ	0xFDF
  9438                           postinc2	equ	0xFDE
  9439                           postdec2	equ	0xFDD
  9440                           fsr2h	equ	0xFDA
  9441                           fsr2l	equ	0xFD9
  9442                           status	equ	0xFD8
  9443                           
  9444 ;; *************** function _TIMER1_isr *****************
  9445 ;; Defined at:
  9446 ;;		line 20 in file "Interrupt.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;		None
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;		None
  9451 ;; Return value:  Size  Location     Type
  9452 ;;		None               void
  9453 ;; Registers used:
  9454 ;;		wreg, status,2
  9455 ;; Tracked objects:
  9456 ;;		On entry : 0/0
  9457 ;;		On exit  : 0/0
  9458 ;;		Unchanged: 0/0
  9459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;Total ram usage:        0 bytes
  9465 ;; Hardware stack levels used:    1
  9466 ;; This function calls:
  9467 ;;		Nothing
  9468 ;; This function is called by:
  9469 ;;		_chkisr
  9470 ;; This function uses a non-reentrant model
  9471 ;;
  9472                           
  9473                           	psect	text56
  9474  001B52                     __ptext56:
  9475                           	opt stack 0
  9476  001B52                     _TIMER1_isr:
  9477                           	opt stack 21
  9478                           
  9479                           ;Interrupt.c: 22: Nec_state = 0;
  9480                           
  9481                           ;incstack = 0
  9482  001B52  0E00               	movlw	0
  9483  001B54  6E51               	movwf	_Nec_state,c
  9484                           
  9485                           ;Interrupt.c: 23: INTCON2bits.INTEDG0 = 0;
  9486  001B56  9CF1               	bcf	intcon2,6,c	;volatile
  9487                           
  9488                           ;Interrupt.c: 24: T1CONbits.TMR1ON = 0;
  9489  001B58  90CD               	bcf	4045,0,c	;volatile
  9490                           
  9491                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  9492  001B5A  909E               	bcf	3998,0,c	;volatile
  9493  001B5C  0012               	return		;funcret
  9494  001B5E                     __end_of_TIMER1_isr:
  9495                           	opt stack 0
  9496                           pclatu	equ	0xFFB
  9497                           pclath	equ	0xFFA
  9498                           tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           intcon	equ	0xFF2
  9505                           intcon2	equ	0xFF1
  9506                           postinc0	equ	0xFEE
  9507                           fsr0h	equ	0xFEA
  9508                           fsr0l	equ	0xFE9
  9509                           wreg	equ	0xFE8
  9510                           postdec1	equ	0xFE5
  9511                           fsr1h	equ	0xFE2
  9512                           fsr1l	equ	0xFE1
  9513                           indf2	equ	0xFDF
  9514                           postinc2	equ	0xFDE
  9515                           postdec2	equ	0xFDD
  9516                           fsr2h	equ	0xFDA
  9517                           fsr2l	equ	0xFD9
  9518                           status	equ	0xFD8
  9519                           
  9520 ;; *************** function _INT0_isr *****************
  9521 ;; Defined at:
  9522 ;;		line 34 in file "Interrupt.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;		None
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;		None
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg, status,2, status,0, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9540 ;;Total ram usage:        2 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    1
  9543 ;; This function calls:
  9544 ;;		_force_nec_state0
  9545 ;; This function is called by:
  9546 ;;		_chkisr
  9547 ;; This function uses a non-reentrant model
  9548 ;;
  9549                           
  9550                           	psect	text57
  9551  0008F8                     __ptext57:
  9552                           	opt stack 0
  9553  0008F8                     _INT0_isr:
  9554                           	opt stack 20
  9555                           
  9556                           ;Interrupt.c: 36: INTCONbits.INT0IF = 0;
  9557                           
  9558                           ;incstack = 0
  9559  0008F8  92F2               	bcf	intcon,1,c	;volatile
  9560                           
  9561                           ;Interrupt.c: 37: if (Nec_state != 0)
  9562  0008FA  5051               	movf	_Nec_state,w,c
  9563  0008FC  B4D8               	btfsc	status,2,c
  9564  0008FE  D096               	goto	i2l2182
  9565                           
  9566                           ;Interrupt.c: 38: {
  9567                           ;Interrupt.c: 39: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9568  000900  50CE               	movf	4046,w,c	;volatile
  9569  000902  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9570  000906  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9571  000908  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9572  00090C  6A01               	clrf	??_INT0_isr,c
  9573  00090E  1001               	iorwf	??_INT0_isr,w,c
  9574  000910  6E48               	movwf	_Time_Elapsed,c
  9575  000912  5002               	movf	??_INT0_isr+1,w,c
  9576  000914  6E49               	movwf	_Time_Elapsed+1,c
  9577                           
  9578                           ;Interrupt.c: 40: TMR1H = 0;
  9579  000916  0E00               	movlw	0
  9580  000918  6ECF               	movwf	4047,c	;volatile
  9581                           
  9582                           ;Interrupt.c: 41: TMR1L = 0;
  9583  00091A  0E00               	movlw	0
  9584  00091C  6ECE               	movwf	4046,c	;volatile
  9585                           
  9586                           ;Interrupt.c: 42: }
  9587                           ;Interrupt.c: 44: switch(Nec_state)
  9588  00091E  D086               	goto	i2l2182
  9589  000920                     i2l2110:
  9590                           
  9591                           ;Interrupt.c: 47: {
  9592                           ;Interrupt.c: 49: TMR1H = 0;
  9593  000920  0E00               	movlw	0
  9594  000922  6ECF               	movwf	4047,c	;volatile
  9595                           
  9596                           ;Interrupt.c: 50: TMR1L = 0;
  9597  000924  0E00               	movlw	0
  9598  000926  6ECE               	movwf	4046,c	;volatile
  9599                           
  9600                           ;Interrupt.c: 51: PIR1bits.TMR1IF = 0;
  9601  000928  909E               	bcf	3998,0,c	;volatile
  9602                           
  9603                           ;Interrupt.c: 52: T1CON= 0x90;
  9604  00092A  0E90               	movlw	144
  9605  00092C  6ECD               	movwf	4045,c	;volatile
  9606                           
  9607                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 1;
  9608  00092E  80CD               	bsf	4045,0,c	;volatile
  9609                           
  9610                           ;Interrupt.c: 54: bit_count = 0;
  9611  000930  0E00               	movlw	0
  9612  000932  6E58               	movwf	_bit_count,c
  9613                           
  9614                           ;Interrupt.c: 55: Nec_code = 0;
  9615  000934  0E00               	movlw	0
  9616  000936  6E44               	movwf	_Nec_code,c
  9617  000938  0E00               	movlw	0
  9618  00093A  6E45               	movwf	_Nec_code+1,c
  9619  00093C  0E00               	movlw	0
  9620  00093E  6E46               	movwf	_Nec_code+2,c
  9621  000940  0E00               	movlw	0
  9622  000942  6E47               	movwf	_Nec_code+3,c
  9623                           
  9624                           ;Interrupt.c: 56: Nec_state = 1;
  9625  000944  0E01               	movlw	1
  9626  000946  6E51               	movwf	_Nec_state,c
  9627  000948  D06F               	goto	i2l2176
  9628                           
  9629                           ;Interrupt.c: 58: return;
  9630                           
  9631                           ;Interrupt.c: 57: INTCON2bits.INTEDG0 = 1;
  9632  00094A  D081               	goto	i2l383
  9633  00094C                     i2l2120:
  9634                           
  9635                           ;Interrupt.c: 62: {
  9636                           ;Interrupt.c: 63: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  9637  00094C  0E35               	movlw	53
  9638  00094E  5C48               	subwf	_Time_Elapsed,w,c
  9639  000950  0E21               	movlw	33
  9640  000952  5849               	subwfb	_Time_Elapsed+1,w,c
  9641  000954  A0D8               	btfss	status,0,c
  9642  000956  D009               	goto	i2l2126
  9643  000958  0E1C               	movlw	28
  9644  00095A  5C48               	subwf	_Time_Elapsed,w,c
  9645  00095C  0E25               	movlw	37
  9646  00095E  5849               	subwfb	_Time_Elapsed+1,w,c
  9647  000960  B0D8               	btfsc	status,0,c
  9648  000962  D003               	goto	i2l2126
  9649                           
  9650                           ;Interrupt.c: 64: {
  9651                           ;Interrupt.c: 65: Nec_state = 2;
  9652  000964  0E02               	movlw	2
  9653  000966  6E51               	movwf	_Nec_state,c
  9654                           
  9655                           ;Interrupt.c: 66: }
  9656  000968  D02A               	goto	i2l2152
  9657  00096A                     i2l2126:
  9658                           
  9659                           ;Interrupt.c: 67: else
  9660                           ;Interrupt.c: 68: {
  9661                           ;Interrupt.c: 69: force_nec_state0();
  9662  00096A  ECCA  F00D         	call	_force_nec_state0	;wreg free
  9663  00096E  D027               	goto	i2l2152
  9664  000970  D026               	goto	i2l2152
  9665                           
  9666                           ;Interrupt.c: 72: return;
  9667                           
  9668                           ;Interrupt.c: 70: }
  9669                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 0;
  9670  000972  D06D               	goto	i2l383
  9671  000974                     i2l2132:
  9672                           
  9673                           ;Interrupt.c: 76: {
  9674                           ;Interrupt.c: 77: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  9675  000974  0EA1               	movlw	161
  9676  000976  5C48               	subwf	_Time_Elapsed,w,c
  9677  000978  0E0F               	movlw	15
  9678  00097A  5849               	subwfb	_Time_Elapsed+1,w,c
  9679  00097C  A0D8               	btfss	status,0,c
  9680  00097E  D009               	goto	i2l2138
  9681  000980  0E88               	movlw	136
  9682  000982  5C48               	subwf	_Time_Elapsed,w,c
  9683  000984  0E13               	movlw	19
  9684  000986  5849               	subwfb	_Time_Elapsed+1,w,c
  9685  000988  B0D8               	btfsc	status,0,c
  9686  00098A  D003               	goto	i2l2138
  9687  00098C                     
  9688                           ;Interrupt.c: 78: {
  9689                           ;Interrupt.c: 79: Nec_state = 3;
  9690  00098C  0E03               	movlw	3
  9691  00098E  6E51               	movwf	_Nec_state,c
  9692                           
  9693                           ;Interrupt.c: 80: }
  9694  000990  D04B               	goto	i2l2176
  9695  000992                     i2l2138:
  9696                           
  9697                           ;Interrupt.c: 81: else
  9698                           ;Interrupt.c: 82: {
  9699                           ;Interrupt.c: 83: force_nec_state0();
  9700  000992  ECCA  F00D         	call	_force_nec_state0	;wreg free
  9701  000996  D048               	goto	i2l2176
  9702  000998  D047               	goto	i2l2176
  9703                           
  9704                           ;Interrupt.c: 86: return;
  9705                           
  9706                           ;Interrupt.c: 84: }
  9707                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 1;
  9708  00099A  D059               	goto	i2l383
  9709  00099C                     i2l2144:
  9710                           
  9711                           ;Interrupt.c: 90: {
  9712                           ;Interrupt.c: 91: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  9713  00099C  0E91               	movlw	145
  9714  00099E  5C48               	subwf	_Time_Elapsed,w,c
  9715  0009A0  0E01               	movlw	1
  9716  0009A2  5849               	subwfb	_Time_Elapsed+1,w,c
  9717  0009A4  A0D8               	btfss	status,0,c
  9718  0009A6  D008               	goto	i2l2150
  9719  0009A8  0EBC               	movlw	188
  9720  0009AA  5C48               	subwf	_Time_Elapsed,w,c
  9721  0009AC  0E02               	movlw	2
  9722  0009AE  5849               	subwfb	_Time_Elapsed+1,w,c
  9723  0009B0  B0D8               	btfsc	status,0,c
  9724  0009B2  D002               	goto	i2l2150
  9725                           
  9726                           ;Interrupt.c: 92: {
  9727                           ;Interrupt.c: 93: Nec_state = 4;
  9728  0009B4  0E04               	movlw	4
  9729  0009B6  D7D7               	goto	L4
  9730  0009B8                     i2l2150:
  9731                           
  9732                           ;Interrupt.c: 95: else
  9733                           ;Interrupt.c: 96: {
  9734                           ;Interrupt.c: 97: force_nec_state0();
  9735  0009B8  ECCA  F00D         	call	_force_nec_state0	;wreg free
  9736  0009BC  D000               	goto	i2l2152
  9737  0009BE                     i2l2152:
  9738                           
  9739                           ;Interrupt.c: 98: }
  9740                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 0;
  9741  0009BE  9CF1               	bcf	intcon2,6,c	;volatile
  9742                           
  9743                           ;Interrupt.c: 100: return;
  9744  0009C0  D046               	goto	i2l383
  9745  0009C2                     i2l2156:
  9746                           
  9747                           ;Interrupt.c: 104: {
  9748                           ;Interrupt.c: 105: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  9749  0009C2  0E91               	movlw	145
  9750  0009C4  5C48               	subwf	_Time_Elapsed,w,c
  9751  0009C6  0E01               	movlw	1
  9752  0009C8  5849               	subwfb	_Time_Elapsed+1,w,c
  9753  0009CA  A0D8               	btfss	status,0,c
  9754  0009CC  D02A               	goto	i2l2174
  9755  0009CE  0E08               	movlw	8
  9756  0009D0  5C48               	subwf	_Time_Elapsed,w,c
  9757  0009D2  0E07               	movlw	7
  9758  0009D4  5849               	subwfb	_Time_Elapsed+1,w,c
  9759  0009D6  B0D8               	btfsc	status,0,c
  9760  0009D8  D024               	goto	i2l2174
  9761                           
  9762                           ;Interrupt.c: 106: {
  9763                           ;Interrupt.c: 107: Nec_code = Nec_code << 1;
  9764  0009DA  90D8               	bcf	status,0,c
  9765  0009DC  3444               	rlcf	_Nec_code,w,c
  9766  0009DE  6E44               	movwf	_Nec_code,c
  9767  0009E0  3445               	rlcf	_Nec_code+1,w,c
  9768  0009E2  6E45               	movwf	_Nec_code+1,c
  9769  0009E4  3446               	rlcf	_Nec_code+2,w,c
  9770  0009E6  6E46               	movwf	_Nec_code+2,c
  9771  0009E8  3447               	rlcf	_Nec_code+3,w,c
  9772  0009EA  6E47               	movwf	_Nec_code+3,c
  9773                           
  9774                           ;Interrupt.c: 108: if(Time_Elapsed > 1000)
  9775  0009EC  0EE9               	movlw	233
  9776  0009EE  5C48               	subwf	_Time_Elapsed,w,c
  9777  0009F0  0E03               	movlw	3
  9778  0009F2  5849               	subwfb	_Time_Elapsed+1,w,c
  9779  0009F4  A0D8               	btfss	status,0,c
  9780  0009F6  D007               	goto	i2l2164
  9781                           
  9782                           ;Interrupt.c: 109: {
  9783                           ;Interrupt.c: 110: Nec_code++;
  9784  0009F8  0E01               	movlw	1
  9785  0009FA  2644               	addwf	_Nec_code,f,c
  9786  0009FC  0E00               	movlw	0
  9787  0009FE  2245               	addwfc	_Nec_code+1,f,c
  9788  000A00  2246               	addwfc	_Nec_code+2,f,c
  9789  000A02  2247               	addwfc	_Nec_code+3,f,c
  9790  000A04  D000               	goto	i2l2164
  9791  000A06                     i2l2164:
  9792                           
  9793                           ;Interrupt.c: 111: }
  9794                           ;Interrupt.c: 112: bit_count++;
  9795  000A06  2A58               	incf	_bit_count,f,c
  9796                           
  9797                           ;Interrupt.c: 113: if(bit_count > 31)
  9798  000A08  0E1F               	movlw	31
  9799  000A0A  6458               	cpfsgt	_bit_count,c
  9800  000A0C  D7BF               	goto	L5
  9801                           
  9802                           ;Interrupt.c: 114: {
  9803                           ;Interrupt.c: 115: nec_ok = 1;
  9804  000A0E  0E00               	movlw	0
  9805  000A10  6E4D               	movwf	_nec_ok+1,c
  9806  000A12  0E01               	movlw	1
  9807  000A14  6E4C               	movwf	_nec_ok,c
  9808                           
  9809                           ;Interrupt.c: 116: Nec_code1 = (char)((Nec_code >> 8));
  9810  000A16  C045  F050         	movff	_Nec_code+1,_Nec_code1
  9811                           
  9812                           ;Interrupt.c: 117: INT0IE = 0;
  9813  000A1A  98F2               	bcf	intcon,4,c	;volatile
  9814                           
  9815                           ;Interrupt.c: 118: Nec_state = 0;
  9816  000A1C  0E00               	movlw	0
  9817  000A1E  6E51               	movwf	_Nec_state,c
  9818  000A20  D7B5               	goto	L5
  9819  000A22                     i2l2174:
  9820                           
  9821                           ;Interrupt.c: 122: else
  9822                           ;Interrupt.c: 123: {
  9823                           ;Interrupt.c: 124: force_nec_state0();
  9824  000A22  ECCA  F00D         	call	_force_nec_state0	;wreg free
  9825  000A26  D000               	goto	i2l2176
  9826  000A28                     i2l2176:
  9827                           
  9828                           ;Interrupt.c: 125: }
  9829                           ;Interrupt.c: 126: INTCON2bits.INTEDG0 = 1;
  9830  000A28  8CF1               	bsf	intcon2,6,c	;volatile
  9831                           
  9832                           ;Interrupt.c: 128: }
  9833                           ;Interrupt.c: 129: }
  9834                           
  9835                           ;Interrupt.c: 127: return;
  9836  000A2A  D011               	goto	i2l383
  9837  000A2C                     i2l2182:
  9838  000A2C  5051               	movf	_Nec_state,w,c
  9839                           
  9840                           ; Switch size 1, requested type "space"
  9841                           ; Number of cases is 5, Range of values is 0 to 4
  9842                           ; switch strategies available:
  9843                           ; Name         Instructions Cycles
  9844                           ; simple_byte           16     9 (average)
  9845                           ;	Chosen strategy is simple_byte
  9846  000A2E  0A00               	xorlw	0	; case 0
  9847  000A30  B4D8               	btfsc	status,2,c
  9848  000A32  D776               	goto	i2l2110
  9849  000A34  0A01               	xorlw	1	; case 1
  9850  000A36  B4D8               	btfsc	status,2,c
  9851  000A38  D789               	goto	i2l2120
  9852  000A3A  0A03               	xorlw	3	; case 2
  9853  000A3C  B4D8               	btfsc	status,2,c
  9854  000A3E  D79A               	goto	i2l2132
  9855  000A40  0A01               	xorlw	1	; case 3
  9856  000A42  B4D8               	btfsc	status,2,c
  9857  000A44  D7AB               	goto	i2l2144
  9858  000A46  0A07               	xorlw	7	; case 4
  9859  000A48  B4D8               	btfsc	status,2,c
  9860  000A4A  D7BB               	goto	i2l2156
  9861  000A4C  D000               	goto	i2l383
  9862  000A4E                     i2l383:
  9863  000A4E  0012               	return		;funcret
  9864  000A50                     __end_of_INT0_isr:
  9865                           	opt stack 0
  9866                           pclatu	equ	0xFFB
  9867                           pclath	equ	0xFFA
  9868                           tblptru	equ	0xFF8
  9869                           tblptrh	equ	0xFF7
  9870                           tblptrl	equ	0xFF6
  9871                           tablat	equ	0xFF5
  9872                           prodh	equ	0xFF4
  9873                           prodl	equ	0xFF3
  9874                           intcon	equ	0xFF2
  9875                           intcon2	equ	0xFF1
  9876                           postinc0	equ	0xFEE
  9877                           fsr0h	equ	0xFEA
  9878                           fsr0l	equ	0xFE9
  9879                           wreg	equ	0xFE8
  9880                           postdec1	equ	0xFE5
  9881                           fsr1h	equ	0xFE2
  9882                           fsr1l	equ	0xFE1
  9883                           indf2	equ	0xFDF
  9884                           postinc2	equ	0xFDE
  9885                           postdec2	equ	0xFDD
  9886                           fsr2h	equ	0xFDA
  9887                           fsr2l	equ	0xFD9
  9888                           status	equ	0xFD8
  9889                           
  9890 ;; *************** function _force_nec_state0 *****************
  9891 ;; Defined at:
  9892 ;;		line 28 in file "Interrupt.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;		None
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;		None               void
  9899 ;; Registers used:
  9900 ;;		wreg, status,2
  9901 ;; Tracked objects:
  9902 ;;		On entry : 0/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;Total ram usage:        0 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; This function calls:
  9913 ;;		Nothing
  9914 ;; This function is called by:
  9915 ;;		_INT0_isr
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           	psect	text58
  9920  001B94                     __ptext58:
  9921                           	opt stack 0
  9922  001B94                     _force_nec_state0:
  9923                           	opt stack 20
  9924                           
  9925                           ;Interrupt.c: 30: Nec_state=0;
  9926                           
  9927                           ;incstack = 0
  9928  001B94  0E00               	movlw	0
  9929  001B96  6E51               	movwf	_Nec_state,c
  9930                           
  9931                           ;Interrupt.c: 31: T1CONbits.TMR1ON = 0;
  9932  001B98  90CD               	bcf	4045,0,c	;volatile
  9933  001B9A  0012               	return		;funcret
  9934  001B9C                     __end_of_force_nec_state0:
  9935                           	opt stack 0
  9936                           pclatu	equ	0xFFB
  9937                           pclath	equ	0xFFA
  9938                           tblptru	equ	0xFF8
  9939                           tblptrh	equ	0xFF7
  9940                           tblptrl	equ	0xFF6
  9941                           tablat	equ	0xFF5
  9942                           prodh	equ	0xFF4
  9943                           prodl	equ	0xFF3
  9944                           intcon	equ	0xFF2
  9945                           intcon2	equ	0xFF1
  9946                           postinc0	equ	0xFEE
  9947                           fsr0h	equ	0xFEA
  9948                           fsr0l	equ	0xFE9
  9949                           wreg	equ	0xFE8
  9950                           postdec1	equ	0xFE5
  9951                           fsr1h	equ	0xFE2
  9952                           fsr1l	equ	0xFE1
  9953                           indf2	equ	0xFDF
  9954                           postinc2	equ	0xFDE
  9955                           postdec2	equ	0xFDD
  9956                           fsr2h	equ	0xFDA
  9957                           fsr2l	equ	0xFD9
  9958                           status	equ	0xFD8
  9959                           pclatu	equ	0xFFB
  9960                           pclath	equ	0xFFA
  9961                           tblptru	equ	0xFF8
  9962                           tblptrh	equ	0xFF7
  9963                           tblptrl	equ	0xFF6
  9964                           tablat	equ	0xFF5
  9965                           prodh	equ	0xFF4
  9966                           prodl	equ	0xFF3
  9967                           intcon	equ	0xFF2
  9968                           intcon2	equ	0xFF1
  9969                           postinc0	equ	0xFEE
  9970                           fsr0h	equ	0xFEA
  9971                           fsr0l	equ	0xFE9
  9972                           wreg	equ	0xFE8
  9973                           postdec1	equ	0xFE5
  9974                           fsr1h	equ	0xFE2
  9975                           fsr1l	equ	0xFE1
  9976                           indf2	equ	0xFDF
  9977                           postinc2	equ	0xFDE
  9978                           postdec2	equ	0xFDD
  9979                           fsr2h	equ	0xFDA
  9980                           fsr2l	equ	0xFD9
  9981                           status	equ	0xFD8
  9982                           
  9983                           	psect	rparam
  9984  0000                     pclatu	equ	0xFFB
  9985                           pclath	equ	0xFFA
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           intcon	equ	0xFF2
  9993                           intcon2	equ	0xFF1
  9994                           postinc0	equ	0xFEE
  9995                           fsr0h	equ	0xFEA
  9996                           fsr0l	equ	0xFE9
  9997                           wreg	equ	0xFE8
  9998                           postdec1	equ	0xFE5
  9999                           fsr1h	equ	0xFE2
 10000                           fsr1l	equ	0xFE1
 10001                           indf2	equ	0xFDF
 10002                           postinc2	equ	0xFDE
 10003                           postdec2	equ	0xFDD
 10004                           fsr2h	equ	0xFDA
 10005                           fsr2l	equ	0xFD9
 10006                           status	equ	0xFD8


Data Sizes:
    Strings     154
    Constant    547
    Data        212
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     13     128
    BANK1           256      5     131
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[8]), STR_6(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_5(CODE[13]), STR_4(CODE[21]), STR_3(CODE[43]), STR_2(CODE[30]), 
		 -> STR_1(CODE[43]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_printf
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   55280
                                             66 COMRAM     1     1      0
                                              0 BANK1      5     5      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                  _Initialize_Screen
                   _Wait_Half_Second
                            ___awdiv
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              40    26     14    3660
                                             38 COMRAM    18     4     14
                                              0 BANK0     13    13      0
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     362
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     501
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     705
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20983
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_Half_Second
   ___awdiv
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5      83       7       51.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     172      34        0.0%
DATA                 0      0     172       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Apr 21 18:03:40 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 0080                                 _D2 0095  
                               _D3 00AA                                 l35 1702  
                               l45 1AA4                                 l95 12FC  
                               l89 197C                       ___awdiv@sign 0016  
              ___wmul@multiplicand 0013                                l111 0BA4  
                              l120 0AFA                                l113 0A7E  
                              l151 10A0                                l152 10C2  
                              l243 17E8                                l148 10C4  
                              l149 1030                                l246 1874  
                              l326 191A                                l159 080C  
                              l177 0C14                                l603 1A5E  
                              l712 1528                                l720 19CE  
                              l713 152A                                l714 1534  
                              l715 1536                                l643 0140  
                              l708 150E                                l717 1550  
                              l646 01B0                                l913 115A  
                              l585 1B3C                                l684 04F0  
                ?_Wait_Half_Second 0001                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 1B7C  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 004A                                _txt 004E  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 197E                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1151 19F0  
                             l1180 1264                               l1190 14D0  
                             l1282 1826                     drawFastVLine@x 0022  
                   drawFastVLine@y 0018                               l5002 02A0  
                             l5010 02BC                               l5020 0312  
                             l4230 1884                               l4222 186C  
                             l4206 195E                               l4214 1762  
                             l5110 1140                               l5030 0344  
                             l5022 031E                               l4240 1896  
                             l5040 038C                               l5016 02DE  
                             l5008 02A8                               l4170 12F2  
                             l4154 1286                               l4218 177E  
                             l4402 0BA0                               l4410 17FA  
                             l5114 1150                               l5106 1134  
                             l5034 0362                               l4228 187E  
                             l4420 0FFA                               l5036 036E  
                             l5044 03A0                               l5028 0338  
                             l5060 04D2                               l4510 1520  
                             l4502 1512                               l4158 12BE  
                             l5046 03B2                               l5054 049A  
                             l4168 12E4                               l4360 0A6C  
                             l4408 17F4                               l5048 042C  
                             l5056 04AE                               l4370 0A8A  
                             l4442 10A4                               l4426 1068  
                             l5082 10DC                               l4602 0C76  
                             l5058 04B8                               l4364 0A7A  
                             l4356 0A60                               l4452 10BE  
                             l4374 0ABA                               l4366 0A82  
                             l4446 10AE                               l4438 1096  
                             l5094 1104                               l4606 0CC8  
                             l4710 121A                               l5430 0606  
                             l4376 0AEE                               l4560 0E6A  
                             l5096 110E                               l5088 10EE  
                             l4720 1254                               l4712 1222  
                             l5416 05CC                               l4634 17AC  
                             l4490 14F4                               l4394 0B70  
                             l4386 0B1C                               l4378 0AF2  
                             l5098 1116                               l4730 1492  
                             l5434 0624                               l5426 05EC  
                             l4644 17C2                               l4652 17D2  
                             l4396 0B98                               l4388 0B44  
                             l4572 0EDA                               l4564 0E88  
                             l4548 0E1A                               l4708 120C  
                             l4732 149A                               l5460 0738  
                             l4646 17CA                               l4638 17B4  
                             l4494 14FE                               l4574 0EE2  
                             l5438 062E     I2C_Write_Cmd_Write_Data@Device 0015  
                             l4656 17DE                               l4760 07F2  
                             l4736 14C0                               l4728 1484  
                             l4658 17E4                               l4498 1506  
                             l4586 0BFA                               l4922 002A  
                             l4932 005C                               l5396 0500  
                             l4686 1926                               l4934 0072  
                             l4926 003E                               l4688 1930  
                             l4960 0168                               l4952 010A  
                             l4928 0050                               l4698 19E8  
                             l4946 00F8                               l4938 0092  
                             l4788 08E2                               l4980 0202  
                             l4964 0190                               l4948 0100  
                             l4974 01D2                               l4992 0252  
                             l4984 0210                               l4994 0258  
                             l4978 01FC                               l4988 024A  
                             l4998 0266                               STR_1 FF64  
                             STR_2 FF8F                               STR_3 FF64  
                             STR_4 FFC3                               STR_5 FFE9  
                             STR_6 FFAD                               STR_7 FFF6  
                             STR_8 FFD8                               u3140 0E44  
                             u2710 12B4                               u2900 0B52  
                             u2970 1028                               u2980 105E  
                             u3957 1B4A                               _RBPU 007F8F  
                             _TRMT 007D61                ??_Deactivate_Buzzer 0011  
                             _main 04F2                               _font FD41  
                             _hour 005D                   __end_of_I2C_Init 1B68  
                 __end_of_I2C_Read 17EA                               _year 006D  
                             fsr0h 000FEA                               _txt1 012A  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             _wrap 006F                   __end_of_I2C_Stop 1AE2  
                             pclat 000FFA                 __size_of_LCD_Reset 0012  
                             prodh 000FF4                               prodl 000FF3  
                             start 0018        __size_of_I2C_Write_Cmd_Only 001A  
                  __end_of_Do_Init 18E0                    ??_drawFastVLine 001C  
                  __end_of_i2cNack 1B72                       ___param_bank 000010  
                      ?_TIMER1_isr 0001                   __end_of_INT0_isr 0A50  
        __end_of_Deactivate_Buzzer 1B84                    drawFastVLine@hi 0020  
                  drawFastVLine@lo 0021                              ?_main 0001  
                  __end_of___awdiv 115C                    drawCircle@ddF_x 0026  
                  drawCircle@ddF_y 0028                    __end_of___lldiv 1276  
                            _T0CON 000FD5                    ___awdiv@divisor 0013  
                            _T1CON 000FCD                    __end_of___llmod 14E2  
                            _T2CON 000FCA                              _T3CON 000FB1  
                            i2l371 13BE                              i2l383 0A4E  
                  ___awdiv@counter 0015                    drawCircle@color 0022  
                            _RCSTA 000FAB                              _TMR0H 000FD7  
                            _TMR1H 000FCF                              _TMR0L 000FD6  
                            _TMR3H 000FB3                              _TMR1L 000FCE  
                            _TMR3L 000FB2                              _SPBRG 000FAF  
                            _PORTA 000F80                              _PORTD 000F83  
                            _PORTE 000F84                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                            _Rcmd1 0CDE                              _Rcmd3 0EF8  
                       _i2cHighSda 1B8C                         _i2cHighScl 1B46  
                  __end_of_dpowers FF44                              _color 0100  
                            _font2 FE40              fillCircleHelper@ddF_x 0031  
            fillCircleHelper@ddF_y 0033                              _found 005C  
                  __end_of_isdigit 19F2                              _month 0060  
            fillCircleHelper@delta 002B                              _putch 1B38  
            fillCircleHelper@color 002D                              main@i 0180  
                __end_of_I2C_Start 1AF4                  __end_of_I2C_Write 18A4  
                   __CFG_BOREN$OFF 000000                              tablat 000FF5  
                            status 000FD8                  ?_DS1621_Read_Temp 0014  
                  write_data@data_ 0013                 ??_DS1621_Read_Temp 0016  
                  __initialization 13F8                       __end_of_main 074A  
                     __end_of_font FE40                   __end_of_Rcmd2red 1866  
                           ??_main 0043                      __activetblptr 000002  
                ?_DS3231_Read_Time 0001                  __end_of_LCD_Reset 1AD0  
        ??_TFT_GreenTab_Initialize 001D                 ??_DS3231_Read_Time 0014  
                           ?_Rcmd1 0001                             ?_Rcmd3 0001  
                        I2C_Init@c 0011                          I2C_Read@n 0012  
                           _ADCON1 000FC1                DS1621_Read_Temp@Cmd 0016  
                 ___llmod@dividend 001E                             _CCPR2L 000FBB  
                 ___awdiv@dividend 0011                 __size_of_i2cLowSda 000A  
               __size_of_i2cLowScl 0008                             ?_putch 0001  
                           _INT0IE 007F94                             i2l2110 0920  
                           i2l2120 094C                             i2l2132 0974  
                           i2l2150 09B8                             i2l2126 096A  
                           i2l2152 09BE                             i2l2144 099C  
                           i2l2138 0992                             i2l2164 0A06  
                           i2l2156 09C2                             i2l2174 0A22  
                           i2l2182 0A2C                             i2l2176 0A28  
                        ??_Do_Init 0017                             i2l2694 13B4  
                           _OSCCON 000FD3                __size_of_TIMER1_isr 000C  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
                        ??_i2cNack 0011                   _force_nec_state0 1B94  
                 __end_of_delay_ms 170A                             _i2cAck 1AF4  
                       _TempSecond 0052                   __end_of_fillRect 17A2  
                 __end_of_drawChar 0BA6                 __size_of_OpenUSART 0070  
         __size_of_Activate_Buzzer 0012                             ___wmul 19A8  
                        ??___awdiv 0015          __size_of_fillCircleHelper 0138  
                 __end_of_drawtext 0EF8                          ??___lldiv 0019  
                        ??___llmod 0026                             _chkisr 0008  
                           _array1 00BF                             _buffer 00D4  
                           _nec_ok 004C                             clear_0 13FE  
                           clear_1 140A                   ___awdiv@quotient 0017  
                           _minute 005F                             _second 0063  
          DS3231_Setup_Time@Device 0013         __size_of_Deactivate_Buzzer 0008  
                           _printf 001C                       drawtext@size 0040  
                           _strcpy 191C                             _strlen 17EA  
                     __pdataCOMRAM 006E                          ??_isdigit 0011  
                        ?_I2C_Init 0011                          ?_I2C_Read 0001  
                        ?_I2C_Stop 0001                       __mediumconst FD40  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8   __end_of_I2C_Write_Cmd_Write_Data 1A12  
                      ?_i2cHighSda 0001                        ?_i2cHighScl 0001  
                           putch@c 0011                   __end_of_spiwrite 1AAA  
                       __accesstop 0080            __end_of__initialization 1468  
                        ?_INT0_isr 0001                 _setup_alarm_minute 0065  
               _setup_alarm_second 0066                      ___rparam_used 000001  
                    __end_of_Rcmd1 0DEE                      __end_of_Rcmd3 0FEA  
                   __pcstackCOMRAM 0001                       __pidataBANK0 1612  
                     __pidataBANK1 12FE                      __end_of_font2 FF1C  
                __end_of_i2cLowSda 1B7C                  __end_of_i2cLowScl 1B8C  
                    __end_of_putch 1B46                     drawPixel@color 0019  
           __size_of_write_command 0010                         ??_I2C_Init 0015  
                       ??_I2C_Read 0011                       _alarm_minute 0056  
                     _alarm_second 0057                         ??_I2C_Stop 0011  
       fillCircleHelper@cornername 0029                            ??_Rcmd1 001D  
                          ??_Rcmd3 001D                 __size_of_drawPixel 0030  
                __end_of_OpenUSART 1552                            ??_putch 0011  
                       __pbssBANK0 00D4                   _setup_alarm_hour 0064  
                    ??_DS1621_Init 0016                          ?_Rcmd2red 0001  
               __size_of_init_UART 0014          __size_of_Wait_Half_Second 001A  
               main@previousSecond 017E                    spiwrite@spidata 0012  
                       _alarm_date 0054                         ??_INT0_isr 0001  
                       _alarm_hour 0055                            ?_i2cAck 0001  
               __CFG_CCP2MX$PORTBE 000000                     I2C_Read@inByte 0013  
                          ?___wmul 0011                __size_of_i2cHighSda 0008  
              __size_of_i2cHighScl 000C                            ?_chkisr 0001  
           __size_of_setAddrWindow 004E   I2C_Write_Cmd_Write_Data@Data_Out 0014  
                          _CCP2CON 000FBA                       ??_TIMER1_isr 0001  
                    ??_I2C_ReStart 0011                         _fillCircle 1666  
                       I2C_Write@n 0012                            ?_printf 0027  
                          ?_strcpy 0011                            ?_strlen 0011  
                ??_Activate_Buzzer 0011                         _fillScreen 1A30  
                       _drawCircle 074A                          ?_delay_ms 0017  
                        ?_fillRect 0023                          ?_drawChar 002E  
                          _SSPCON1 000FC6                            _SSPSTAT 000FC7  
            __end_of_fillRectangle 10C6                          ?_drawtext 0039  
                _DS3231_Setup_Time 15B6                            _Do_Init 18A4  
         _I2C_Write_Cmd_Write_Data 19F2         __end_of_I2C_Write_Cmd_Only 1A80  
                       ??_Rcmd2red 0014             DS1621_Read_Temp@Device 0018  
                          _i2cNack 1B68                 __end_of_TIMER1_isr 1B5E  
               ?_DS3231_Setup_Time 0001                      _write_command 1B28  
                        _I2C_Start 1AE2                          _I2C_Write 1866  
                  __size_of_i2cAck 0012                            __Hparam 0000  
                          __Lparam 0000                __end_of_DS1621_Init 1A30  
                __end_of_drawPixel 197E                ??_DS3231_Setup_Time 0013  
            __end_of_drawFastVLine 12FE                   _fillCircleHelper 0BA6  
                          ___awdiv 10C6                            ___lldiv 11EA  
                  __size_of___wmul 0028                            ___llmod 1472  
                  __size_of_chkisr 13F0                          ?_spiwrite 0001  
                          __pcinit 13F8                            __ramtop 1000  
                          __ptext0 04F2                            __ptext1 001C  
                          __ptext2 1B38                            __ptext3 19D0  
                          __ptext4 1472                            __ptext5 11EA  
        __size_of_DS1621_Read_Temp 003C                            __ptext6 1666  
                          __ptext7 0BA6                            __ptext8 074A  
                          __ptext9 10C6                    __size_of_printf 04D6  
                __end_of_init_UART 1ABE                          _T0CONbits 000FD5  
                  __size_of_strcpy 0032                    __size_of_strlen 003E  
                __end_of_hexpowers FF64           __end_of_force_nec_state0 1B9C  
                        _T1CONbits 000FCD           DS3231_Setup_Time@Address 0014  
                          _dpowers FF1C                            _isdigit 19D0  
                        _T3CONbits 000FB1                         ??_delay_ms 0019  
              __end_of_I2C_ReStart 1A96                      drawtext@_text 003A  
                    drawtext@color 003C                         ??_fillRect 0028  
        __end_of_DS3231_Setup_Time 1612                         ??_drawChar 0035  
                        _LCD_Reset 1ABE                      _setAddrWindow 170A  
                   __pintcode_body 137C                         delay_ms@ms 0017  
             end_of_initialization 1468                         ??_drawtext 0041  
                   ?_write_command 0001                      __Lmediumconst FD40  
        __size_of_DS3231_Read_Time 0064                            int_func 137C  
          DS3231_Read_Time@Address 0014                         ?_I2C_Start 0001  
                       ?_I2C_Write 0001                    ___lldiv@divisor 0015  
                  ___lldiv@counter 001D                         _tempSecond 006E  
                        _RCSTAbits 000FAB                            printf@c 00FF  
                          printf@f 0027                            postdec1 000FE5  
                          postdec2 000FDD                            postinc0 000FEE  
                          postinc2 000FDE                         ??_spiwrite 0011  
                          strlen@s 0011                    fillCircle@color 0041  
      I2C_Write_Cmd_Write_Data@Cmd 0013                        ?_fillCircle 003B  
                 drawtext@cursor_x 00F9                   drawtext@cursor_y 00F8  
                        _PORTBbits 000F81                          _PORTCbits 000F82  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                      ?_fillScreen 0024                         _setup_hour 0068  
                       _setup_year 006C                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISBbits 000F93  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00F4  
                       drawPixel@x 001B                         drawPixel@y 0018  
                 _Wait_Half_Second 1A4C                        _DS1621_Init 1A12  
                      printf@width 00FC                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0158                     __end_of_i2cAck 1B06  
         DS1621_Read_Temp@Data_Ret 0017                 __end_of_i2cHighSda 1B94  
               __end_of_i2cHighScl 1B52                     __end_of___wmul 19D0  
                    delay_ms@count 001B                         _write_data 1B18  
                    __pidataCOMRAM 1B9C                     __end_of_chkisr 13F8  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 1A80  
                       drawtext@bg 003E                          _Nec_code1 0050  
                        _i2cLowSda 1B72                          _i2cLowScl 1B84  
                   __end_of_printf 04F2                     __end_of_strcpy 194E  
                   __end_of_strlen 1828                          _Nec_state 0051  
              start_initialization 13F8         __size_of_DS3231_Setup_Time 005C  
                  ??_write_command 0013                          _OpenUSART 14E2  
              __size_of_fillCircle 0052                    ___llmod@divisor 0022  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                  ___llmod@counter 0026                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 1B06                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 0035  
                 _DS1621_Read_Temp 18E0                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00F3                      __pcstackBANK1 017E  
                      ??_LCD_Reset 001D                       _isdigit$2032 0012  
         __end_of_fillCircleHelper 0CDE                  __size_of_delay_ms 0052  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 1552                           ?_i2cNack 0001  
                __size_of_drawtext 010A                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 19A8                      __pmediumconst FD40  
                         ?___awdiv 0011                           ?___lldiv 0011  
                         ?___llmod 001E                          __tft_type 0053  
               _I2C_Write_Cmd_Only 1A66                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 194E  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 1B5E                           _I2C_Read 17A2  
                         _I2C_Stop 1AD0                  _Initialize_Screen 115C  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 1AAA                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF44  
               ?_Initialize_Screen 0001                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 1B18                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 08F8  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                          _setup_day 0067  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                       ??_fillCircle 0043  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
         __end_of_Wait_Half_Second 1A66                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 11EA                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 00FE  
                       printf@prec 00F4                          main@tempC 0182  
                        main@tempF 017F                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 1424  
                        copy_data1 1444                          drawtext@i 00F6  
           __size_of_drawFastVLine 0088                          drawtext@x 00F3  
                        drawtext@y 0039                           _Nec_code 0044  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                     ?_DS1621_Init 0001                           _Rcmd2red 1828  
                 __size_of_Do_Init 003C                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0048  
               __end_of_fillCircle 16B8                   __size_of_i2cNack 000A  
                         __Hrparam 0000                 __end_of_fillScreen 1A4C  
                         __Lrparam 0000                 __end_of_drawCircle 08F8  
                 __size_of___awdiv 0096                   __size_of___lldiv 008C  
                 __size_of___llmod 0070                       ?_I2C_ReStart 0001  
                 __size_of_isdigit 0022                           _delay_ms 16B8  
                         __ptext10 1A4C                           __ptext11 115C  
                         __ptext20 194E                           __ptext12 191C  
                         __ptext21 170A                           __ptext13 1A30  
                         __ptext30 16B8                           __ptext22 197E  
                         __ptext14 0FEA                           __ptext31 19A8  
                         __ptext23 0EF8                           __ptext15 0DEE  
                         __ptext40 15B6                           __ptext32 18A4  
                         __ptext24 1828                           __ptext16 17EA  
                         __ptext41 1552                           __ptext33 1AAA  
                         __ptext25 0CDE                           __ptext17 0A50  
                         __ptext50 1B72                           __ptext42 18E0  
                         __ptext34 14E2                           __ptext26 1B18  
                         __ptext18 1758                           __ptext51 1B84  
                         __ptext43 1866                           __ptext35 1B5E  
                         __ptext27 1B28                           __ptext19 1276  
                         __ptext52 1B8C                           __ptext44 1AD0  
                         __ptext36 1A12                           __ptext28 1A96  
                         __ptext53 1B46                           __ptext45 1AE2  
                         __ptext37 19F2                           __ptext29 1ABE  
                         __ptext54 1B06                           __ptext46 17A2  
                         __ptext38 1A66                           __ptext47 1B68  
                         __ptext39 1B7C                           __ptext56 1B52  
                         __ptext48 1AF4                           __ptext57 08F8  
                         __ptext49 1A80                           __ptext58 1B94  
                         _fillRect 1758                           _drawChar 0A50  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _nec_code 0061                           _drawtext 0DEE  
                       strcpy@from 0013                      _fillRectangle 0FEA  
         __end_of_DS1621_Read_Temp 191C                   ?_Activate_Buzzer 0001  
                    __size_of_main 0258                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 1276  
                        printf@idx 00F3                           _spiwrite 1A96  
                        printf@val 00F8                        ??_drawPixel 001B  
                         _rowstart 0062           __end_of_DS3231_Read_Time 15B6  
               fillCircleHelper@x0 0023                 fillCircleHelper@y0 0025  
       __size_of_Initialize_Screen 008E                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                         isdigit@c 0013                  ?_fillCircleHelper 0023  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                 ??_fillCircleHelper 002F  
            __end_of_write_command 1B38                   ___lldiv@dividend 0011  
                  fillScreen@color 0024                       fillCircle@x0 003B  
                     fillCircle@y0 003D                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 00F6                  fillCircleHelper@f 0035  
                fillCircleHelper@r 0027                  fillCircleHelper@x 0037  
                fillCircleHelper@y 0039                       ??_write_data 0013  
                       _TIMER1_isr 1B52                      fillRect@color 0026  
                 ___lldiv@quotient 0019                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                       _setup_minute 0069  
                     _setup_second 006B                        fillCircle@r 003F  
            __end_of_setAddrWindow 1758                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 006A  
               __end_of_write_data 1B28          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
