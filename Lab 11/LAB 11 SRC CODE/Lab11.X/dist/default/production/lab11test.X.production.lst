

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun May 01 12:01:19 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  001B92                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _tempSecond
    86  001B92  FF                 	db	255
    87                           
    88                           ;initializer for _wrap
    89  001B93  01                 	db	1
    90                           
    91                           	psect	idataBANK0
    92  001608                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _D1
    96  001608  02                 	db	2
    97  001609  02                 	db	2
    98  00160A  02                 	db	2
    99  00160B  08                 	db	8
   100  00160C  08                 	db	8
   101  00160D  04                 	db	4
   102  00160E  0A                 	db	10
   103  00160F  00                 	db	0
   104  001610  00                 	db	0
   105  001611  00                 	db	0
   106  001612  00                 	db	0
   107  001613  00                 	db	0
   108  001614  00                 	db	0
   109  001615  00                 	db	0
   110  001616  00                 	db	0
   111  001617  00                 	db	0
   112  001618  00                 	db	0
   113  001619  00                 	db	0
   114  00161A  00                 	db	0
   115  00161B  00                 	db	0
   116  00161C  00                 	db	0
   117                           
   118                           ;initializer for _D2
   119  00161D  00                 	db	0
   120  00161E  00                 	db	0
   121  00161F  00                 	db	0
   122  001620  00                 	db	0
   123  001621  00                 	db	0
   124  001622  00                 	db	0
   125  001623  00                 	db	0
   126  001624  28                 	db	40
   127  001625  28                 	db	40
   128  001626  38                 	db	56
   129  001627  38                 	db	56
   130  001628  38                 	db	56
   131  001629  38                 	db	56
   132  00162A  38                 	db	56
   133  00162B  00                 	db	0
   134  00162C  00                 	db	0
   135  00162D  00                 	db	0
   136  00162E  00                 	db	0
   137  00162F  00                 	db	0
   138  001630  00                 	db	0
   139  001631  00                 	db	0
   140                           
   141                           ;initializer for _D3
   142  001632  00                 	db	0
   143  001633  00                 	db	0
   144  001634  00                 	db	0
   145  001635  00                 	db	0
   146  001636  00                 	db	0
   147  001637  00                 	db	0
   148  001638  00                 	db	0
   149  001639  00                 	db	0
   150  00163A  00                 	db	0
   151  00163B  00                 	db	0
   152  00163C  00                 	db	0
   153  00163D  00                 	db	0
   154  00163E  00                 	db	0
   155  00163F  00                 	db	0
   156  001640  07                 	db	7
   157  001641  07                 	db	7
   158  001642  07                 	db	7
   159  001643  07                 	db	7
   160  001644  07                 	db	7
   161  001645  07                 	db	7
   162  001646  07                 	db	7
   163                           
   164                           ;initializer for _array1
   165  001647  A2                 	db	162
   166  001648  00                 	db	0
   167  001649  00                 	db	0
   168  00164A  00                 	db	0
   169  00164B  00                 	db	0
   170  00164C  00                 	db	0
   171  00164D  00                 	db	0
   172  00164E  00                 	db	0
   173  00164F  00                 	db	0
   174  001650  00                 	db	0
   175  001651  00                 	db	0
   176  001652  00                 	db	0
   177  001653  00                 	db	0
   178  001654  00                 	db	0
   179  001655  00                 	db	0
   180  001656  00                 	db	0
   181  001657  00                 	db	0
   182  001658  00                 	db	0
   183  001659  00                 	db	0
   184  00165A  00                 	db	0
   185  00165B  00                 	db	0
   186                           
   187                           	psect	idataBANK1
   188  0012F4                     __pidataBANK1:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _color
   192  0012F4  F800               	dw	63488
   193  0012F6  00                 	db	0
   194  0012F7  00                 	db	0
   195  0012F8  00                 	db	0
   196  0012F9  00                 	db	0
   197  0012FA  00                 	db	0
   198  0012FB  00                 	db	0
   199  0012FC  00                 	db	0
   200  0012FD  00                 	db	0
   201  0012FE  00                 	db	0
   202  0012FF  00                 	db	0
   203  001300  00                 	db	0
   204  001301  00                 	db	0
   205  001302  00                 	db	0
   206  001303  00                 	db	0
   207  001304  00                 	db	0
   208  001305  00                 	db	0
   209  001306  00                 	db	0
   210  001307  00                 	db	0
   211  001308  00                 	db	0
   212  001309  00                 	db	0
   213  00130A  00                 	db	0
   214  00130B  00                 	db	0
   215  00130C  00                 	db	0
   216  00130D  00                 	db	0
   217  00130E  00                 	db	0
   218  00130F  00                 	db	0
   219  001310  00                 	db	0
   220  001311  00                 	db	0
   221  001312  00                 	db	0
   222  001313  00                 	db	0
   223  001314  00                 	db	0
   224  001315  00                 	db	0
   225  001316  00                 	db	0
   226  001317  00                 	db	0
   227  001318  00                 	db	0
   228  001319  00                 	db	0
   229  00131A  00                 	db	0
   230  00131B  00                 	db	0
   231  00131C  00                 	db	0
   232  00131D  00                 	db	0
   233                           
   234                           ;initializer for _txt1
   235  00131E  43                 	db	67
   236  00131F  48                 	db	72
   237  001320  2D                 	db	45
   238  001321  00                 	db	0
   239  001322  00                 	db	0
   240  001323  00                 	db	0
   241  001324  00                 	db	0
   242  001325  00                 	db	0
   243  001326  00                 	db	0
   244  001327  00                 	db	0
   245  001328  00                 	db	0
   246  001329  00                 	db	0
   247  00132A  00                 	db	0
   248  00132B  00                 	db	0
   249  00132C  00                 	db	0
   250  00132D  00                 	db	0
   251  00132E  00                 	db	0
   252  00132F  00                 	db	0
   253  001330  00                 	db	0
   254  001331  00                 	db	0
   255  001332  00                 	db	0
   256  001333  00                 	db	0
   257  001334  00                 	db	0
   258  001335  00                 	db	0
   259  001336  00                 	db	0
   260  001337  00                 	db	0
   261  001338  00                 	db	0
   262  001339  00                 	db	0
   263  00133A  00                 	db	0
   264  00133B  00                 	db	0
   265  00133C  00                 	db	0
   266  00133D  00                 	db	0
   267  00133E  00                 	db	0
   268  00133F  00                 	db	0
   269  001340  00                 	db	0
   270  001341  00                 	db	0
   271  001342  00                 	db	0
   272  001343  00                 	db	0
   273  001344  00                 	db	0
   274  001345  00                 	db	0
   275  001346  00                 	db	0
   276  001347  00                 	db	0
   277  001348  00                 	db	0
   278  001349  00                 	db	0
   279  00134A  00                 	db	0
   280  00134B  00                 	db	0
   281  00134C  00                 	db	0
   282  00134D  00                 	db	0
   283  00134E  00                 	db	0
   284  00134F  00                 	db	0
   285  001350  00                 	db	0
   286  001351  00                 	db	0
   287  001352  00                 	db	0
   288  001353  00                 	db	0
   289  001354  00                 	db	0
   290  001355  00                 	db	0
   291  001356  00                 	db	0
   292  001357  00                 	db	0
   293  001358  00                 	db	0
   294  001359  00                 	db	0
   295  00135A  00                 	db	0
   296  00135B  00                 	db	0
   297  00135C  00                 	db	0
   298  00135D  00                 	db	0
   299  00135E  00                 	db	0
   300  00135F  00                 	db	0
   301  001360  00                 	db	0
   302  001361  00                 	db	0
   303  001362  00                 	db	0
   304  001363  00                 	db	0
   305  001364  00                 	db	0
   306  001365  00                 	db	0
   307  001366  00                 	db	0
   308  001367  00                 	db	0
   309  001368  00                 	db	0
   310  001369  00                 	db	0
   311  00136A  00                 	db	0
   312  00136B  00                 	db	0
   313  00136C  00                 	db	0
   314  00136D  00                 	db	0
   315  00136E  00                 	db	0
   316  00136F  00                 	db	0
   317  001370  00                 	db	0
   318  001371  00                 	db	0
   319                           
   320                           	psect	mediumconst
   321  00FD40                     __pmediumconst:
   322                           	opt stack 0
   323  00FD40  00                 	db	0
   324  00FD41                     _font:
   325                           	opt stack 0
   326  00FD41  00                 	db	0
   327  00FD42  00                 	db	0
   328  00FD43  00                 	db	0
   329  00FD44  00                 	db	0
   330  00FD45  00                 	db	0
   331  00FD46  00                 	db	0
   332  00FD47  00                 	db	0
   333  00FD48  5F                 	db	95
   334  00FD49  00                 	db	0
   335  00FD4A  00                 	db	0
   336  00FD4B  00                 	db	0
   337  00FD4C  07                 	db	7
   338  00FD4D  00                 	db	0
   339  00FD4E  07                 	db	7
   340  00FD4F  00                 	db	0
   341  00FD50  14                 	db	20
   342  00FD51  7F                 	db	127
   343  00FD52  14                 	db	20
   344  00FD53  7F                 	db	127
   345  00FD54  14                 	db	20
   346  00FD55  24                 	db	36
   347  00FD56  2A                 	db	42
   348  00FD57  7F                 	db	127
   349  00FD58  2A                 	db	42
   350  00FD59  12                 	db	18
   351  00FD5A  23                 	db	35
   352  00FD5B  13                 	db	19
   353  00FD5C  08                 	db	8
   354  00FD5D  64                 	db	100
   355  00FD5E  62                 	db	98
   356  00FD5F  36                 	db	54
   357  00FD60  49                 	db	73
   358  00FD61  56                 	db	86
   359  00FD62  20                 	db	32
   360  00FD63  50                 	db	80
   361  00FD64  00                 	db	0
   362  00FD65  08                 	db	8
   363  00FD66  07                 	db	7
   364  00FD67  03                 	db	3
   365  00FD68  00                 	db	0
   366  00FD69  00                 	db	0
   367  00FD6A  1C                 	db	28
   368  00FD6B  22                 	db	34
   369  00FD6C  41                 	db	65
   370  00FD6D  00                 	db	0
   371  00FD6E  00                 	db	0
   372  00FD6F  41                 	db	65
   373  00FD70  22                 	db	34
   374  00FD71  1C                 	db	28
   375  00FD72  00                 	db	0
   376  00FD73  2A                 	db	42
   377  00FD74  1C                 	db	28
   378  00FD75  7F                 	db	127
   379  00FD76  1C                 	db	28
   380  00FD77  2A                 	db	42
   381  00FD78  08                 	db	8
   382  00FD79  08                 	db	8
   383  00FD7A  3E                 	db	62
   384  00FD7B  08                 	db	8
   385  00FD7C  08                 	db	8
   386  00FD7D  00                 	db	0
   387  00FD7E  80                 	db	128
   388  00FD7F  70                 	db	112
   389  00FD80  30                 	db	48
   390  00FD81  00                 	db	0
   391  00FD82  08                 	db	8
   392  00FD83  08                 	db	8
   393  00FD84  08                 	db	8
   394  00FD85  08                 	db	8
   395  00FD86  08                 	db	8
   396  00FD87  00                 	db	0
   397  00FD88  00                 	db	0
   398  00FD89  60                 	db	96
   399  00FD8A  60                 	db	96
   400  00FD8B  00                 	db	0
   401  00FD8C  20                 	db	32
   402  00FD8D  10                 	db	16
   403  00FD8E  08                 	db	8
   404  00FD8F  04                 	db	4
   405  00FD90  02                 	db	2
   406  00FD91  3E                 	db	62
   407  00FD92  51                 	db	81
   408  00FD93  49                 	db	73
   409  00FD94  45                 	db	69
   410  00FD95  3E                 	db	62
   411  00FD96  00                 	db	0
   412  00FD97  42                 	db	66
   413  00FD98  7F                 	db	127
   414  00FD99  40                 	db	64
   415  00FD9A  00                 	db	0
   416  00FD9B  72                 	db	114
   417  00FD9C  49                 	db	73
   418  00FD9D  49                 	db	73
   419  00FD9E  49                 	db	73
   420  00FD9F  46                 	db	70
   421  00FDA0  21                 	db	33
   422  00FDA1  41                 	db	65
   423  00FDA2  49                 	db	73
   424  00FDA3  4D                 	db	77
   425  00FDA4  33                 	db	51
   426  00FDA5  18                 	db	24
   427  00FDA6  14                 	db	20
   428  00FDA7  12                 	db	18
   429  00FDA8  7F                 	db	127
   430  00FDA9  10                 	db	16
   431  00FDAA  27                 	db	39
   432  00FDAB  45                 	db	69
   433  00FDAC  45                 	db	69
   434  00FDAD  45                 	db	69
   435  00FDAE  39                 	db	57
   436  00FDAF  3C                 	db	60
   437  00FDB0  4A                 	db	74
   438  00FDB1  49                 	db	73
   439  00FDB2  49                 	db	73
   440  00FDB3  31                 	db	49
   441  00FDB4  41                 	db	65
   442  00FDB5  21                 	db	33
   443  00FDB6  11                 	db	17
   444  00FDB7  09                 	db	9
   445  00FDB8  07                 	db	7
   446  00FDB9  36                 	db	54
   447  00FDBA  49                 	db	73
   448  00FDBB  49                 	db	73
   449  00FDBC  49                 	db	73
   450  00FDBD  36                 	db	54
   451  00FDBE  46                 	db	70
   452  00FDBF  49                 	db	73
   453  00FDC0  49                 	db	73
   454  00FDC1  29                 	db	41
   455  00FDC2  1E                 	db	30
   456  00FDC3  00                 	db	0
   457  00FDC4  00                 	db	0
   458  00FDC5  14                 	db	20
   459  00FDC6  00                 	db	0
   460  00FDC7  00                 	db	0
   461  00FDC8  00                 	db	0
   462  00FDC9  40                 	db	64
   463  00FDCA  34                 	db	52
   464  00FDCB  00                 	db	0
   465  00FDCC  00                 	db	0
   466  00FDCD  00                 	db	0
   467  00FDCE  08                 	db	8
   468  00FDCF  14                 	db	20
   469  00FDD0  22                 	db	34
   470  00FDD1  41                 	db	65
   471  00FDD2  14                 	db	20
   472  00FDD3  14                 	db	20
   473  00FDD4  14                 	db	20
   474  00FDD5  14                 	db	20
   475  00FDD6  14                 	db	20
   476  00FDD7  00                 	db	0
   477  00FDD8  41                 	db	65
   478  00FDD9  22                 	db	34
   479  00FDDA  14                 	db	20
   480  00FDDB  08                 	db	8
   481  00FDDC  02                 	db	2
   482  00FDDD  01                 	db	1
   483  00FDDE  59                 	db	89
   484  00FDDF  09                 	db	9
   485  00FDE0  06                 	db	6
   486  00FDE1  3E                 	db	62
   487  00FDE2  41                 	db	65
   488  00FDE3  5D                 	db	93
   489  00FDE4  59                 	db	89
   490  00FDE5  4E                 	db	78
   491  00FDE6  7C                 	db	124
   492  00FDE7  12                 	db	18
   493  00FDE8  11                 	db	17
   494  00FDE9  12                 	db	18
   495  00FDEA  7C                 	db	124
   496  00FDEB  7F                 	db	127
   497  00FDEC  49                 	db	73
   498  00FDED  49                 	db	73
   499  00FDEE  49                 	db	73
   500  00FDEF  36                 	db	54
   501  00FDF0  3E                 	db	62
   502  00FDF1  41                 	db	65
   503  00FDF2  41                 	db	65
   504  00FDF3  41                 	db	65
   505  00FDF4  22                 	db	34
   506  00FDF5  7F                 	db	127
   507  00FDF6  41                 	db	65
   508  00FDF7  41                 	db	65
   509  00FDF8  41                 	db	65
   510  00FDF9  3E                 	db	62
   511  00FDFA  7F                 	db	127
   512  00FDFB  49                 	db	73
   513  00FDFC  49                 	db	73
   514  00FDFD  49                 	db	73
   515  00FDFE  41                 	db	65
   516  00FDFF  7F                 	db	127
   517  00FE00  09                 	db	9
   518  00FE01  09                 	db	9
   519  00FE02  09                 	db	9
   520  00FE03  01                 	db	1
   521  00FE04  3E                 	db	62
   522  00FE05  41                 	db	65
   523  00FE06  41                 	db	65
   524  00FE07  51                 	db	81
   525  00FE08  73                 	db	115
   526  00FE09  7F                 	db	127
   527  00FE0A  08                 	db	8
   528  00FE0B  08                 	db	8
   529  00FE0C  08                 	db	8
   530  00FE0D  7F                 	db	127
   531  00FE0E  00                 	db	0
   532  00FE0F  41                 	db	65
   533  00FE10  7F                 	db	127
   534  00FE11  41                 	db	65
   535  00FE12  00                 	db	0
   536  00FE13  20                 	db	32
   537  00FE14  40                 	db	64
   538  00FE15  41                 	db	65
   539  00FE16  3F                 	db	63
   540  00FE17  01                 	db	1
   541  00FE18  7F                 	db	127
   542  00FE19  08                 	db	8
   543  00FE1A  14                 	db	20
   544  00FE1B  22                 	db	34
   545  00FE1C  41                 	db	65
   546  00FE1D  7F                 	db	127
   547  00FE1E  40                 	db	64
   548  00FE1F  40                 	db	64
   549  00FE20  40                 	db	64
   550  00FE21  40                 	db	64
   551  00FE22  7F                 	db	127
   552  00FE23  02                 	db	2
   553  00FE24  1C                 	db	28
   554  00FE25  02                 	db	2
   555  00FE26  7F                 	db	127
   556  00FE27  7F                 	db	127
   557  00FE28  04                 	db	4
   558  00FE29  08                 	db	8
   559  00FE2A  10                 	db	16
   560  00FE2B  7F                 	db	127
   561  00FE2C  3E                 	db	62
   562  00FE2D  41                 	db	65
   563  00FE2E  41                 	db	65
   564  00FE2F  41                 	db	65
   565  00FE30  3E                 	db	62
   566  00FE31  7F                 	db	127
   567  00FE32  09                 	db	9
   568  00FE33  09                 	db	9
   569  00FE34  09                 	db	9
   570  00FE35  06                 	db	6
   571  00FE36  3E                 	db	62
   572  00FE37  41                 	db	65
   573  00FE38  51                 	db	81
   574  00FE39  21                 	db	33
   575  00FE3A  5E                 	db	94
   576  00FE3B  7F                 	db	127
   577  00FE3C  09                 	db	9
   578  00FE3D  19                 	db	25
   579  00FE3E  29                 	db	41
   580  00FE3F  46                 	db	70
   581  00FE40                     __end_of_font:
   582                           	opt stack 0
   583  00FE40                     _font2:
   584                           	opt stack 0
   585  00FE40  26                 	db	38
   586  00FE41  49                 	db	73
   587  00FE42  49                 	db	73
   588  00FE43  49                 	db	73
   589  00FE44  32                 	db	50
   590  00FE45  03                 	db	3
   591  00FE46  01                 	db	1
   592  00FE47  7F                 	db	127
   593  00FE48  01                 	db	1
   594  00FE49  03                 	db	3
   595  00FE4A  3F                 	db	63
   596  00FE4B  40                 	db	64
   597  00FE4C  40                 	db	64
   598  00FE4D  40                 	db	64
   599  00FE4E  3F                 	db	63
   600  00FE4F  1F                 	db	31
   601  00FE50  20                 	db	32
   602  00FE51  40                 	db	64
   603  00FE52  20                 	db	32
   604  00FE53  1F                 	db	31
   605  00FE54  3F                 	db	63
   606  00FE55  40                 	db	64
   607  00FE56  38                 	db	56
   608  00FE57  40                 	db	64
   609  00FE58  3F                 	db	63
   610  00FE59  63                 	db	99
   611  00FE5A  14                 	db	20
   612  00FE5B  08                 	db	8
   613  00FE5C  14                 	db	20
   614  00FE5D  63                 	db	99
   615  00FE5E  03                 	db	3
   616  00FE5F  04                 	db	4
   617  00FE60  78                 	db	120
   618  00FE61  04                 	db	4
   619  00FE62  03                 	db	3
   620  00FE63  61                 	db	97
   621  00FE64  59                 	db	89
   622  00FE65  49                 	db	73
   623  00FE66  4D                 	db	77
   624  00FE67  43                 	db	67
   625  00FE68  00                 	db	0
   626  00FE69  7F                 	db	127
   627  00FE6A  41                 	db	65
   628  00FE6B  41                 	db	65
   629  00FE6C  41                 	db	65
   630  00FE6D  02                 	db	2
   631  00FE6E  04                 	db	4
   632  00FE6F  08                 	db	8
   633  00FE70  10                 	db	16
   634  00FE71  20                 	db	32
   635  00FE72  00                 	db	0
   636  00FE73  41                 	db	65
   637  00FE74  41                 	db	65
   638  00FE75  41                 	db	65
   639  00FE76  7F                 	db	127
   640  00FE77  04                 	db	4
   641  00FE78  02                 	db	2
   642  00FE79  01                 	db	1
   643  00FE7A  02                 	db	2
   644  00FE7B  04                 	db	4
   645  00FE7C  40                 	db	64
   646  00FE7D  40                 	db	64
   647  00FE7E  40                 	db	64
   648  00FE7F  40                 	db	64
   649  00FE80  40                 	db	64
   650  00FE81  00                 	db	0
   651  00FE82  03                 	db	3
   652  00FE83  07                 	db	7
   653  00FE84  08                 	db	8
   654  00FE85  00                 	db	0
   655  00FE86  20                 	db	32
   656  00FE87  54                 	db	84
   657  00FE88  54                 	db	84
   658  00FE89  78                 	db	120
   659  00FE8A  40                 	db	64
   660  00FE8B  7F                 	db	127
   661  00FE8C  28                 	db	40
   662  00FE8D  44                 	db	68
   663  00FE8E  44                 	db	68
   664  00FE8F  38                 	db	56
   665  00FE90  38                 	db	56
   666  00FE91  44                 	db	68
   667  00FE92  44                 	db	68
   668  00FE93  44                 	db	68
   669  00FE94  28                 	db	40
   670  00FE95  38                 	db	56
   671  00FE96  44                 	db	68
   672  00FE97  44                 	db	68
   673  00FE98  28                 	db	40
   674  00FE99  7F                 	db	127
   675  00FE9A  38                 	db	56
   676  00FE9B  54                 	db	84
   677  00FE9C  54                 	db	84
   678  00FE9D  54                 	db	84
   679  00FE9E  18                 	db	24
   680  00FE9F  00                 	db	0
   681  00FEA0  08                 	db	8
   682  00FEA1  7E                 	db	126
   683  00FEA2  09                 	db	9
   684  00FEA3  02                 	db	2
   685  00FEA4  18                 	db	24
   686  00FEA5  A4                 	db	164
   687  00FEA6  A4                 	db	164
   688  00FEA7  9C                 	db	156
   689  00FEA8  78                 	db	120
   690  00FEA9  7F                 	db	127
   691  00FEAA  08                 	db	8
   692  00FEAB  04                 	db	4
   693  00FEAC  04                 	db	4
   694  00FEAD  78                 	db	120
   695  00FEAE  00                 	db	0
   696  00FEAF  44                 	db	68
   697  00FEB0  7D                 	db	125
   698  00FEB1  40                 	db	64
   699  00FEB2  00                 	db	0
   700  00FEB3  20                 	db	32
   701  00FEB4  40                 	db	64
   702  00FEB5  40                 	db	64
   703  00FEB6  3D                 	db	61
   704  00FEB7  00                 	db	0
   705  00FEB8  7F                 	db	127
   706  00FEB9  10                 	db	16
   707  00FEBA  28                 	db	40
   708  00FEBB  44                 	db	68
   709  00FEBC  00                 	db	0
   710  00FEBD  00                 	db	0
   711  00FEBE  41                 	db	65
   712  00FEBF  7F                 	db	127
   713  00FEC0  40                 	db	64
   714  00FEC1  00                 	db	0
   715  00FEC2  7C                 	db	124
   716  00FEC3  04                 	db	4
   717  00FEC4  78                 	db	120
   718  00FEC5  04                 	db	4
   719  00FEC6  78                 	db	120
   720  00FEC7  7C                 	db	124
   721  00FEC8  08                 	db	8
   722  00FEC9  04                 	db	4
   723  00FECA  04                 	db	4
   724  00FECB  78                 	db	120
   725  00FECC  38                 	db	56
   726  00FECD  44                 	db	68
   727  00FECE  44                 	db	68
   728  00FECF  44                 	db	68
   729  00FED0  38                 	db	56
   730  00FED1  FC                 	db	252
   731  00FED2  18                 	db	24
   732  00FED3  24                 	db	36
   733  00FED4  24                 	db	36
   734  00FED5  18                 	db	24
   735  00FED6  18                 	db	24
   736  00FED7  24                 	db	36
   737  00FED8  24                 	db	36
   738  00FED9  18                 	db	24
   739  00FEDA  FC                 	db	252
   740  00FEDB  7C                 	db	124
   741  00FEDC  08                 	db	8
   742  00FEDD  04                 	db	4
   743  00FEDE  04                 	db	4
   744  00FEDF  08                 	db	8
   745  00FEE0  48                 	db	72
   746  00FEE1  54                 	db	84
   747  00FEE2  54                 	db	84
   748  00FEE3  54                 	db	84
   749  00FEE4  24                 	db	36
   750  00FEE5  04                 	db	4
   751  00FEE6  04                 	db	4
   752  00FEE7  3F                 	db	63
   753  00FEE8  44                 	db	68
   754  00FEE9  24                 	db	36
   755  00FEEA  3C                 	db	60
   756  00FEEB  40                 	db	64
   757  00FEEC  40                 	db	64
   758  00FEED  20                 	db	32
   759  00FEEE  7C                 	db	124
   760  00FEEF  1C                 	db	28
   761  00FEF0  20                 	db	32
   762  00FEF1  40                 	db	64
   763  00FEF2  20                 	db	32
   764  00FEF3  1C                 	db	28
   765  00FEF4  3C                 	db	60
   766  00FEF5  40                 	db	64
   767  00FEF6  30                 	db	48
   768  00FEF7  40                 	db	64
   769  00FEF8  3C                 	db	60
   770  00FEF9  44                 	db	68
   771  00FEFA  28                 	db	40
   772  00FEFB  10                 	db	16
   773  00FEFC  28                 	db	40
   774  00FEFD  44                 	db	68
   775  00FEFE  4C                 	db	76
   776  00FEFF  90                 	db	144
   777  00FF00  90                 	db	144
   778  00FF01  90                 	db	144
   779  00FF02  7C                 	db	124
   780  00FF03  44                 	db	68
   781  00FF04  64                 	db	100
   782  00FF05  54                 	db	84
   783  00FF06  4C                 	db	76
   784  00FF07  44                 	db	68
   785  00FF08  00                 	db	0
   786  00FF09  08                 	db	8
   787  00FF0A  36                 	db	54
   788  00FF0B  41                 	db	65
   789  00FF0C  00                 	db	0
   790  00FF0D  00                 	db	0
   791  00FF0E  00                 	db	0
   792  00FF0F  77                 	db	119
   793  00FF10  00                 	db	0
   794  00FF11  00                 	db	0
   795  00FF12  00                 	db	0
   796  00FF13  41                 	db	65
   797  00FF14  36                 	db	54
   798  00FF15  08                 	db	8
   799  00FF16  00                 	db	0
   800  00FF17  02                 	db	2
   801  00FF18  01                 	db	1
   802  00FF19  02                 	db	2
   803  00FF1A  04                 	db	4
   804  00FF1B  02                 	db	2
   805  00FF1C                     __end_of_font2:
   806                           	opt stack 0
   807  00FF1C                     _dpowers:
   808                           	opt stack 0
   809  00FF1C  0001               	dw	1
   810  00FF1E  0000               	dw	0
   811  00FF20  000A               	dw	10
   812  00FF22  0000               	dw	0
   813  00FF24  0064               	dw	100
   814  00FF26  0000               	dw	0
   815  00FF28  03E8               	dw	1000
   816  00FF2A  0000               	dw	0
   817  00FF2C  2710               	dw	10000
   818  00FF2E  0000               	dw	0
   819  00FF30  86A0               	dw	34464
   820  00FF32  0001               	dw	1
   821  00FF34  4240               	dw	16960
   822  00FF36  000F               	dw	15
   823  00FF38  9680               	dw	38528
   824  00FF3A  0098               	dw	152
   825  00FF3C  E100               	dw	57600
   826  00FF3E  05F5               	dw	1525
   827  00FF40  CA00               	dw	51712
   828  00FF42  3B9A               	dw	15258
   829  00FF44                     __end_of_dpowers:
   830                           	opt stack 0
   831  00FF44                     _hexpowers:
   832                           	opt stack 0
   833  00FF44  0001               	dw	1
   834  00FF46  0000               	dw	0
   835  00FF48  0010               	dw	16
   836  00FF4A  0000               	dw	0
   837  00FF4C  0100               	dw	256
   838  00FF4E  0000               	dw	0
   839  00FF50  1000               	dw	4096
   840  00FF52  0000               	dw	0
   841  00FF54  0000               	dw	0
   842  00FF56  0001               	dw	1
   843  00FF58  0000               	dw	0
   844  00FF5A  0010               	dw	16
   845  00FF5C  0000               	dw	0
   846  00FF5E  0100               	dw	256
   847  00FF60  0000               	dw	0
   848  00FF62  1000               	dw	4096
   849  00FF64                     __end_of_hexpowers:
   850                           	opt stack 0
   851  0000                     _ADCON1	set	4033
   852  0000                     _CCP2CON	set	4026
   853  0000                     _CCPR2L	set	4027
   854  0000                     _INTCON2bits	set	4081
   855  0000                     _INTCONbits	set	4082
   856  0000                     _OSCCON	set	4051
   857  0000                     _PIE1bits	set	3997
   858  0000                     _PIR1bits	set	3998
   859  0000                     _PIR2bits	set	4001
   860  0000                     _PORTA	set	3968
   861  0000                     _PORTBbits	set	3969
   862  0000                     _PORTD	set	3971
   863  0000                     _PORTDbits	set	3971
   864  0000                     _PORTE	set	3972
   865  0000                     _PR2	set	4043
   866  0000                     _RCSTA	set	4011
   867  0000                     _RCSTAbits	set	4011
   868  0000                     _SPBRG	set	4015
   869  0000                     _SPBRGH	set	4016
   870  0000                     _SSPBUF	set	4041
   871  0000                     _SSPCON1	set	4038
   872  0000                     _SSPSTAT	set	4039
   873  0000                     _SSPSTATbits	set	4039
   874  0000                     _T0CON	set	4053
   875  0000                     _T0CONbits	set	4053
   876  0000                     _T1CON	set	4045
   877  0000                     _T1CONbits	set	4045
   878  0000                     _T2CON	set	4042
   879  0000                     _T3CON	set	4017
   880  0000                     _T3CONbits	set	4017
   881  0000                     _TMR0H	set	4055
   882  0000                     _TMR0L	set	4054
   883  0000                     _TMR1H	set	4047
   884  0000                     _TMR1L	set	4046
   885  0000                     _TMR3H	set	4019
   886  0000                     _TMR3L	set	4018
   887  0000                     _TRISA	set	3986
   888  0000                     _TRISB	set	3987
   889  0000                     _TRISBbits	set	3987
   890  0000                     _TRISC	set	3988
   891  0000                     _TRISCbits	set	3988
   892  0000                     _TRISD	set	3989
   893  0000                     _TRISDbits	set	3989
   894  0000                     _TRISE	set	3990
   895  0000                     _TXREG	set	4013
   896  0000                     _TXSTA	set	4012
   897  0000                     _TXSTAbits	set	4012
   898  0000                     _INT0IE	set	32660
   899  0000                     _RBPU	set	32655
   900  0000                     _TRMT	set	32097
   901  00FF64                     STR_1:
   902  00FF64  20                 	db	32
   903  00FF65  54                 	db	84	;'T'
   904  00FF66  65                 	db	101	;'e'
   905  00FF67  6D                 	db	109	;'m'
   906  00FF68  70                 	db	112	;'p'
   907  00FF69  65                 	db	101	;'e'
   908  00FF6A  72                 	db	114	;'r'
   909  00FF6B  61                 	db	97	;'a'
   910  00FF6C  74                 	db	116	;'t'
   911  00FF6D  75                 	db	117	;'u'
   912  00FF6E  72                 	db	114	;'r'
   913  00FF6F  65                 	db	101	;'e'
   914  00FF70  20                 	db	32
   915  00FF71  3D                 	db	61	;'='
   916  00FF72  20                 	db	32
   917  00FF73  25                 	db	37
   918  00FF74  64                 	db	100	;'d'
   919  00FF75  20                 	db	32
   920  00FF76  64                 	db	100	;'d'
   921  00FF77  65                 	db	101	;'e'
   922  00FF78  67                 	db	103	;'g'
   923  00FF79  72                 	db	114	;'r'
   924  00FF7A  65                 	db	101	;'e'
   925  00FF7B  65                 	db	101	;'e'
   926  00FF7C  73                 	db	115	;'s'
   927  00FF7D  43                 	db	67	;'C'
   928  00FF7E  20                 	db	32
   929  00FF7F  3D                 	db	61	;'='
   930  00FF80  20                 	db	32
   931  00FF81  25                 	db	37
   932  00FF82  64                 	db	100	;'d'
   933  00FF83  20                 	db	32
   934  00FF84  64                 	db	100	;'d'
   935  00FF85  65                 	db	101	;'e'
   936  00FF86  67                 	db	103	;'g'
   937  00FF87  72                 	db	114	;'r'
   938  00FF88  65                 	db	101	;'e'
   939  00FF89  65                 	db	101	;'e'
   940  00FF8A  73                 	db	115	;'s'
   941  00FF8B  46                 	db	70	;'F'
   942  00FF8C  0D                 	db	13
   943  00FF8D  0A                 	db	10
   944  00FF8E  00                 	db	0
   945  00FF8F                     STR_2:
   946  00FF8F  25                 	db	37
   947  00FF90  30                 	db	48	;'0'
   948  00FF91  32                 	db	50	;'2'
   949  00FF92  78                 	db	120	;'x'
   950  00FF93  3A                 	db	58	;':'
   951  00FF94  25                 	db	37
   952  00FF95  30                 	db	48	;'0'
   953  00FF96  32                 	db	50	;'2'
   954  00FF97  78                 	db	120	;'x'
   955  00FF98  3A                 	db	58	;':'
   956  00FF99  25                 	db	37
   957  00FF9A  30                 	db	48	;'0'
   958  00FF9B  32                 	db	50	;'2'
   959  00FF9C  78                 	db	120	;'x'
   960  00FF9D  20                 	db	32
   961  00FF9E  25                 	db	37
   962  00FF9F  30                 	db	48	;'0'
   963  00FFA0  32                 	db	50	;'2'
   964  00FFA1  78                 	db	120	;'x'
   965  00FFA2  2F                 	db	47
   966  00FFA3  25                 	db	37
   967  00FFA4  30                 	db	48	;'0'
   968  00FFA5  32                 	db	50	;'2'
   969  00FFA6  78                 	db	120	;'x'
   970  00FFA7  2F                 	db	47
   971  00FFA8  25                 	db	37
   972  00FFA9  30                 	db	48	;'0'
   973  00FFAA  32                 	db	50	;'2'
   974  00FFAB  78                 	db	120	;'x'
   975  00FFAC  00                 	db	0
   976  00FFAD                     STR_6:
   977  00FFAD  45                 	db	69	;'E'
   978  00FFAE  43                 	db	67	;'C'
   979  00FFAF  45                 	db	69	;'E'
   980  00FFB0  33                 	db	51	;'3'
   981  00FFB1  33                 	db	51	;'3'
   982  00FFB2  30                 	db	48	;'0'
   983  00FFB3  31                 	db	49	;'1'
   984  00FFB4  4C                 	db	76	;'L'
   985  00FFB5  20                 	db	32
   986  00FFB6  53                 	db	83	;'S'
   987  00FFB7  70                 	db	112	;'p'
   988  00FFB8  72                 	db	114	;'r'
   989  00FFB9  69                 	db	105	;'i'
   990  00FFBA  6E                 	db	110	;'n'
   991  00FFBB  67                 	db	103	;'g'
   992  00FFBC  20                 	db	32
   993  00FFBD  32                 	db	50	;'2'
   994  00FFBE  32                 	db	50	;'2'
   995  00FFBF  2D                 	db	45
   996  00FFC0  53                 	db	83	;'S'
   997  00FFC1  33                 	db	51	;'3'
   998  00FFC2  00                 	db	0
   999  00FFC3                     STR_4:
  1000  00FFC3  4E                 	db	78	;'N'
  1001  00FFC4  45                 	db	69	;'E'
  1002  00FFC5  43                 	db	67	;'C'
  1003  00FFC6  5F                 	db	95	;'_'
  1004  00FFC7  43                 	db	67	;'C'
  1005  00FFC8  6F                 	db	111	;'o'
  1006  00FFC9  64                 	db	100	;'d'
  1007  00FFCA  65                 	db	101	;'e'
  1008  00FFCB  20                 	db	32
  1009  00FFCC  3D                 	db	61	;'='
  1010  00FFCD  20                 	db	32
  1011  00FFCE  25                 	db	37
  1012  00FFCF  30                 	db	48	;'0'
  1013  00FFD0  38                 	db	56	;'8'
  1014  00FFD1  6C                 	db	108	;'l'
  1015  00FFD2  78                 	db	120	;'x'
  1016  00FFD3  20                 	db	32
  1017  00FFD4  25                 	db	37
  1018  00FFD5  78                 	db	120	;'x'
  1019  00FFD6  20                 	db	32
  1020  00FFD7  00                 	db	0
  1021  00FFD8                     STR_8:
  1022  00FFD8  30                 	db	48	;'0'
  1023  00FFD9  31                 	db	49	;'1'
  1024  00FFDA  32                 	db	50	;'2'
  1025  00FFDB  33                 	db	51	;'3'
  1026  00FFDC  34                 	db	52	;'4'
  1027  00FFDD  35                 	db	53	;'5'
  1028  00FFDE  36                 	db	54	;'6'
  1029  00FFDF  37                 	db	55	;'7'
  1030  00FFE0  38                 	db	56	;'8'
  1031  00FFE1  39                 	db	57	;'9'
  1032  00FFE2  61                 	db	97	;'a'
  1033  00FFE3  62                 	db	98	;'b'
  1034  00FFE4  63                 	db	99	;'c'
  1035  00FFE5  64                 	db	100	;'d'
  1036  00FFE6  65                 	db	101	;'e'
  1037  00FFE7  66                 	db	102	;'f'
  1038  00FFE8  00                 	db	0
  1039  00FFE9                     STR_5:
  1040  00FFE9  46                 	db	70	;'F'
  1041  00FFEA  6F                 	db	111	;'o'
  1042  00FFEB  75                 	db	117	;'u'
  1043  00FFEC  6E                 	db	110	;'n'
  1044  00FFED  64                 	db	100	;'d'
  1045  00FFEE  20                 	db	32
  1046  00FFEF  3D                 	db	61	;'='
  1047  00FFF0  20                 	db	32
  1048  00FFF1  25                 	db	37
  1049  00FFF2  64                 	db	100	;'d'
  1050  00FFF3  0D                 	db	13
  1051  00FFF4  0A                 	db	10
  1052  00FFF5  00                 	db	0
  1053  00FFF6                     STR_7:
  1054  00FFF6  4C                 	db	76	;'L'
  1055  00FFF7  41                 	db	65	;'A'
  1056  00FFF8  42                 	db	66	;'B'
  1057  00FFF9  20                 	db	32
  1058  00FFFA  31                 	db	49	;'1'
  1059  00FFFB  31                 	db	49	;'1'
  1060  00FFFC  20                 	db	32
  1061  00FFFD  00                 	db	0
  1062  0000                     
  1063                           ; #config settings
  1064  00FFFE  00                 	db	0	; dummy byte at the end
  1065  0000                     
  1066                           	psect	cinit
  1067  0013EE                     __pcinit:
  1068                           	opt stack 0
  1069  0013EE                     start_initialization:
  1070                           	opt stack 0
  1071  0013EE                     __initialization:
  1072                           	opt stack 0
  1073                           
  1074                           ; Clear objects allocated to BANK0 (31 bytes)
  1075  0013EE  EE00  F0D4         	lfsr	0,__pbssBANK0
  1076  0013F2  0E1F               	movlw	31
  1077  0013F4                     clear_0:
  1078  0013F4  6AEE               	clrf	postinc0,c
  1079  0013F6  06E8               	decf	wreg,f,c
  1080  0013F8  E1FD               	bnz	clear_0
  1081                           
  1082                           ; Clear objects allocated to COMRAM (42 bytes)
  1083  0013FA  EE00  F044         	lfsr	0,__pbssCOMRAM
  1084  0013FE  0E2A               	movlw	42
  1085  001400                     clear_1:
  1086  001400  6AEE               	clrf	postinc0,c
  1087  001402  06E8               	decf	wreg,f,c
  1088  001404  E1FD               	bnz	clear_1
  1089                           
  1090                           ; Initialize objects allocated to BANK1 (126 bytes)
  1091                           ; load TBLPTR registers with __pidataBANK1
  1092  001406  0EF4               	movlw	low __pidataBANK1
  1093  001408  6EF6               	movwf	tblptrl,c
  1094  00140A  0E12               	movlw	high __pidataBANK1
  1095  00140C  6EF7               	movwf	tblptrh,c
  1096  00140E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1097  001410  6EF8               	movwf	tblptru,c
  1098  001412  EE01  F000         	lfsr	0,__pdataBANK1
  1099  001416  EE10 F07E          	lfsr	1,126
  1100  00141A                     copy_data0:
  1101  00141A  0009               	tblrd		*+
  1102  00141C  CFF5 FFEE          	movff	tablat,postinc0
  1103  001420  50E5               	movf	postdec1,w,c
  1104  001422  50E1               	movf	fsr1l,w,c
  1105  001424  E1FA               	bnz	copy_data0
  1106                           
  1107                           ; Initialize objects allocated to BANK0 (84 bytes)
  1108                           ; load TBLPTR registers with __pidataBANK0
  1109  001426  0E08               	movlw	low __pidataBANK0
  1110  001428  6EF6               	movwf	tblptrl,c
  1111  00142A  0E16               	movlw	high __pidataBANK0
  1112  00142C  6EF7               	movwf	tblptrh,c
  1113  00142E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1114  001430  6EF8               	movwf	tblptru,c
  1115  001432  EE00  F080         	lfsr	0,__pdataBANK0
  1116  001436  EE10 F054          	lfsr	1,84
  1117  00143A                     copy_data1:
  1118  00143A  0009               	tblrd		*+
  1119  00143C  CFF5 FFEE          	movff	tablat,postinc0
  1120  001440  50E5               	movf	postdec1,w,c
  1121  001442  50E1               	movf	fsr1l,w,c
  1122  001444  E1FA               	bnz	copy_data1
  1123                           
  1124                           ; Initialize objects allocated to COMRAM (2 bytes)
  1125                           ; load TBLPTR registers with __pidataCOMRAM
  1126  001446  0E92               	movlw	low __pidataCOMRAM
  1127  001448  6EF6               	movwf	tblptrl,c
  1128  00144A  0E1B               	movlw	high __pidataCOMRAM
  1129  00144C  6EF7               	movwf	tblptrh,c
  1130  00144E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1131  001450  6EF8               	movwf	tblptru,c
  1132  001452  0009               	tblrd		*+	;fetch initializer
  1133  001454  CFF5 F06E          	movff	tablat,__pdataCOMRAM
  1134  001458  0009               	tblrd		*+	;fetch initializer
  1135  00145A  CFF5 F06F          	movff	tablat,__pdataCOMRAM+1
  1136  00145E                     end_of_initialization:
  1137                           	opt stack 0
  1138  00145E                     __end_of__initialization:
  1139                           	opt stack 0
  1140  00145E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1141  001460  6EF8               	movwf	tblptru,c
  1142  001462  0100               	movlb	0
  1143  001464  EF79  F002         	goto	_main	;jump to C main() function
  1144                           tblptru	equ	0xFF8
  1145                           tblptrh	equ	0xFF7
  1146                           tblptrl	equ	0xFF6
  1147                           tablat	equ	0xFF5
  1148                           postinc0	equ	0xFEE
  1149                           wreg	equ	0xFE8
  1150                           postdec1	equ	0xFE5
  1151                           fsr1l	equ	0xFE1
  1152                           
  1153                           	psect	bssCOMRAM
  1154  000044                     __pbssCOMRAM:
  1155                           	opt stack 0
  1156  000044                     _Nec_code:
  1157                           	opt stack 0
  1158  000044                     	ds	4
  1159  000048                     _Time_Elapsed:
  1160                           	opt stack 0
  1161  000048                     	ds	2
  1162  00004A                     _nbr:
  1163                           	opt stack 0
  1164  00004A                     	ds	2
  1165  00004C                     _nec_ok:
  1166                           	opt stack 0
  1167  00004C                     	ds	2
  1168  00004E                     _txt:
  1169                           	opt stack 0
  1170  00004E                     	ds	2
  1171  000050                     _Nec_code1:
  1172                           	opt stack 0
  1173  000050                     	ds	1
  1174  000051                     _Nec_state:
  1175                           	opt stack 0
  1176  000051                     	ds	1
  1177  000052                     _TempSecond:
  1178                           	opt stack 0
  1179  000052                     	ds	1
  1180  000053                     __tft_type:
  1181                           	opt stack 0
  1182  000053                     	ds	1
  1183  000054                     _alarm_date:
  1184                           	opt stack 0
  1185  000054                     	ds	1
  1186  000055                     _alarm_hour:
  1187                           	opt stack 0
  1188  000055                     	ds	1
  1189  000056                     _alarm_minute:
  1190                           	opt stack 0
  1191  000056                     	ds	1
  1192  000057                     _alarm_second:
  1193                           	opt stack 0
  1194  000057                     	ds	1
  1195  000058                     _bit_count:
  1196                           	opt stack 0
  1197  000058                     	ds	1
  1198  000059                     _colstart:
  1199                           	opt stack 0
  1200  000059                     	ds	1
  1201  00005A                     _day:
  1202                           	opt stack 0
  1203  00005A                     	ds	1
  1204  00005B                     _dow:
  1205                           	opt stack 0
  1206  00005B                     	ds	1
  1207  00005C                     _found:
  1208                           	opt stack 0
  1209  00005C                     	ds	1
  1210  00005D                     _hour:
  1211                           	opt stack 0
  1212  00005D                     	ds	1
  1213  00005E                     _i:
  1214                           	opt stack 0
  1215  00005E                     	ds	1
  1216  00005F                     _minute:
  1217                           	opt stack 0
  1218  00005F                     	ds	1
  1219  000060                     _month:
  1220                           	opt stack 0
  1221  000060                     	ds	1
  1222  000061                     _nec_code:
  1223                           	opt stack 0
  1224  000061                     	ds	1
  1225  000062                     _rowstart:
  1226                           	opt stack 0
  1227  000062                     	ds	1
  1228  000063                     _second:
  1229                           	opt stack 0
  1230  000063                     	ds	1
  1231  000064                     _setup_alarm_hour:
  1232                           	opt stack 0
  1233  000064                     	ds	1
  1234  000065                     _setup_alarm_minute:
  1235                           	opt stack 0
  1236  000065                     	ds	1
  1237  000066                     _setup_alarm_second:
  1238                           	opt stack 0
  1239  000066                     	ds	1
  1240  000067                     _setup_day:
  1241                           	opt stack 0
  1242  000067                     	ds	1
  1243  000068                     _setup_hour:
  1244                           	opt stack 0
  1245  000068                     	ds	1
  1246  000069                     _setup_minute:
  1247                           	opt stack 0
  1248  000069                     	ds	1
  1249  00006A                     _setup_month:
  1250                           	opt stack 0
  1251  00006A                     	ds	1
  1252  00006B                     _setup_second:
  1253                           	opt stack 0
  1254  00006B                     	ds	1
  1255  00006C                     _setup_year:
  1256                           	opt stack 0
  1257  00006C                     	ds	1
  1258  00006D                     _year:
  1259                           	opt stack 0
  1260  00006D                     	ds	1
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           postdec1	equ	0xFE5
  1268                           fsr1l	equ	0xFE1
  1269                           
  1270                           	psect	dataCOMRAM
  1271  00006E                     __pdataCOMRAM:
  1272                           	opt stack 0
  1273  00006E                     _tempSecond:
  1274                           	opt stack 0
  1275  00006E                     	ds	1
  1276  00006F                     _wrap:
  1277                           	opt stack 0
  1278  00006F                     	ds	1
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           postdec1	equ	0xFE5
  1286                           fsr1l	equ	0xFE1
  1287                           
  1288                           	psect	bssBANK0
  1289  0000D4                     __pbssBANK0:
  1290                           	opt stack 0
  1291  0000D4                     _buffer:
  1292                           	opt stack 0
  1293  0000D4                     	ds	31
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           postinc0	equ	0xFEE
  1299                           wreg	equ	0xFE8
  1300                           postdec1	equ	0xFE5
  1301                           fsr1l	equ	0xFE1
  1302                           
  1303                           	psect	dataBANK0
  1304  000080                     __pdataBANK0:
  1305                           	opt stack 0
  1306  000080                     _D1:
  1307                           	opt stack 0
  1308  000080                     	ds	21
  1309  000095                     _D2:
  1310                           	opt stack 0
  1311  000095                     	ds	21
  1312  0000AA                     _D3:
  1313                           	opt stack 0
  1314  0000AA                     	ds	21
  1315  0000BF                     _array1:
  1316                           	opt stack 0
  1317  0000BF                     	ds	21
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1l	equ	0xFE1
  1326                           
  1327                           	psect	dataBANK1
  1328  000100                     __pdataBANK1:
  1329                           	opt stack 0
  1330  000100                     _color:
  1331                           	opt stack 0
  1332  000100                     	ds	42
  1333  00012A                     _txt1:
  1334                           	opt stack 0
  1335  00012A                     	ds	84
  1336                           tblptru	equ	0xFF8
  1337                           tblptrh	equ	0xFF7
  1338                           tblptrl	equ	0xFF6
  1339                           tablat	equ	0xFF5
  1340                           postinc0	equ	0xFEE
  1341                           wreg	equ	0xFE8
  1342                           postdec1	equ	0xFE5
  1343                           fsr1l	equ	0xFE1
  1344                           
  1345                           	psect	cstackBANK1
  1346  00017E                     __pcstackBANK1:
  1347                           	opt stack 0
  1348  00017E                     main@previousSecond:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x0
  1352  00017E                     	ds	1
  1353  00017F                     main@tempF:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x1
  1357  00017F                     	ds	1
  1358  000180                     main@i:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x2
  1362  000180                     	ds	2
  1363  000182                     main@tempC:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x4
  1367  000182                     	ds	1
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           
  1377                           	psect	cstackBANK0
  1378  0000F3                     __pcstackBANK0:
  1379                           	opt stack 0
  1380  0000F3                     drawtext@x:
  1381                           	opt stack 0
  1382  0000F3                     printf@idx:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x0
  1386  0000F3                     	ds	1
  1387  0000F4                     drawtext@textsize:
  1388                           	opt stack 0
  1389  0000F4                     printf@prec:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x1
  1393  0000F4                     	ds	2
  1394  0000F6                     drawtext@i:
  1395                           	opt stack 0
  1396  0000F6                     printf@ap:
  1397                           	opt stack 0
  1398                           
  1399                           ; 2 bytes @ 0x3
  1400  0000F6                     	ds	2
  1401  0000F8                     drawtext@cursor_y:
  1402                           	opt stack 0
  1403  0000F8                     printf@val:
  1404                           	opt stack 0
  1405                           
  1406                           ; 4 bytes @ 0x5
  1407  0000F8                     	ds	1
  1408  0000F9                     drawtext@cursor_x:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x6
  1412  0000F9                     	ds	3
  1413  0000FC                     printf@width:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x9
  1417  0000FC                     	ds	2
  1418  0000FE                     printf@flag:
  1419                           	opt stack 0
  1420                           
  1421                           ; 1 bytes @ 0xB
  1422  0000FE                     	ds	1
  1423  0000FF                     printf@c:
  1424                           	opt stack 0
  1425                           
  1426                           ; 1 bytes @ 0xC
  1427  0000FF                     	ds	1
  1428                           tblptru	equ	0xFF8
  1429                           tblptrh	equ	0xFF7
  1430                           tblptrl	equ	0xFF6
  1431                           tablat	equ	0xFF5
  1432                           postinc0	equ	0xFEE
  1433                           wreg	equ	0xFE8
  1434                           postdec1	equ	0xFE5
  1435                           fsr1l	equ	0xFE1
  1436                           
  1437                           	psect	cstackCOMRAM
  1438  000001                     __pcstackCOMRAM:
  1439                           	opt stack 0
  1440  000001                     ??_INT0_isr:
  1441  000001                     
  1442                           ; 1 bytes @ 0x0
  1443  000001                     	ds	2
  1444  000003                     ??_chkisr:
  1445                           
  1446                           ; 0 bytes @ 0x2
  1447  000003                     	ds	14
  1448  000011                     ??_isdigit:
  1449  000011                     ?_strlen:
  1450                           	opt stack 0
  1451  000011                     ?___wmul:
  1452                           	opt stack 0
  1453  000011                     ?___awdiv:
  1454                           	opt stack 0
  1455  000011                     ?___lldiv:
  1456                           	opt stack 0
  1457  000011                     I2C_Read@ack:
  1458                           	opt stack 0
  1459  000011                     I2C_Write@outByte:
  1460                           	opt stack 0
  1461  000011                     spiwrite@x:
  1462                           	opt stack 0
  1463  000011                     putch@c:
  1464                           	opt stack 0
  1465  000011                     OpenUSART@spbrg:
  1466                           	opt stack 0
  1467  000011                     ___wmul@multiplier:
  1468                           	opt stack 0
  1469  000011                     ___awdiv@dividend:
  1470                           	opt stack 0
  1471  000011                     strcpy@to:
  1472                           	opt stack 0
  1473  000011                     strlen@s:
  1474                           	opt stack 0
  1475  000011                     I2C_Init@c:
  1476                           	opt stack 0
  1477  000011                     ___lldiv@dividend:
  1478                           	opt stack 0
  1479                           
  1480                           ; 4 bytes @ 0x10
  1481  000011                     	ds	1
  1482  000012                     I2C_Read@n:
  1483                           	opt stack 0
  1484  000012                     I2C_Write@n:
  1485                           	opt stack 0
  1486  000012                     spiwrite@spidata:
  1487                           	opt stack 0
  1488  000012                     _isdigit$1978:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x11
  1492  000012                     	ds	1
  1493  000013                     ??_strlen:
  1494  000013                     I2C_Read@inByte:
  1495                           	opt stack 0
  1496  000013                     I2C_Write_Cmd_Only@Cmd:
  1497                           	opt stack 0
  1498  000013                     I2C_Write_Cmd_Write_Data@Cmd:
  1499                           	opt stack 0
  1500  000013                     DS3231_Setup_Time@Device:
  1501                           	opt stack 0
  1502  000013                     write_command@cmd_:
  1503                           	opt stack 0
  1504  000013                     write_data@data_:
  1505                           	opt stack 0
  1506  000013                     OpenUSART@config:
  1507                           	opt stack 0
  1508  000013                     isdigit@c:
  1509                           	opt stack 0
  1510  000013                     ___wmul@multiplicand:
  1511                           	opt stack 0
  1512  000013                     ___awdiv@divisor:
  1513                           	opt stack 0
  1514  000013                     strcpy@from:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x12
  1518  000013                     	ds	1
  1519  000014                     ?_DS1621_Read_Temp:
  1520                           	opt stack 0
  1521  000014                     I2C_Write_Cmd_Only@Device:
  1522                           	opt stack 0
  1523  000014                     I2C_Write_Cmd_Write_Data@Data_Out:
  1524                           	opt stack 0
  1525  000014                     DS3231_Read_Time@Address:
  1526                           	opt stack 0
  1527  000014                     DS3231_Setup_Time@Address:
  1528                           	opt stack 0
  1529  000014                     setAddrWindow@y0:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x13
  1533  000014                     	ds	1
  1534  000015                     I2C_Write_Cmd_Write_Data@Device:
  1535                           	opt stack 0
  1536  000015                     DS3231_Read_Time@Device:
  1537                           	opt stack 0
  1538  000015                     setAddrWindow@x1:
  1539                           	opt stack 0
  1540  000015                     ___awdiv@counter:
  1541                           	opt stack 0
  1542  000015                     ___wmul@product:
  1543                           	opt stack 0
  1544  000015                     strcpy@cp:
  1545                           	opt stack 0
  1546  000015                     strlen@cp:
  1547                           	opt stack 0
  1548  000015                     ___lldiv@divisor:
  1549                           	opt stack 0
  1550                           
  1551                           ; 4 bytes @ 0x14
  1552  000015                     	ds	1
  1553  000016                     DS1621_Init@Device:
  1554                           	opt stack 0
  1555  000016                     DS1621_Read_Temp@Cmd:
  1556                           	opt stack 0
  1557  000016                     setAddrWindow@y1:
  1558                           	opt stack 0
  1559  000016                     ___awdiv@sign:
  1560                           	opt stack 0
  1561                           
  1562                           ; 1 bytes @ 0x15
  1563  000016                     	ds	1
  1564  000017                     DS1621_Read_Temp@Data_Ret:
  1565                           	opt stack 0
  1566  000017                     setAddrWindow@x0:
  1567                           	opt stack 0
  1568  000017                     delay_ms@ms:
  1569                           	opt stack 0
  1570  000017                     ___awdiv@quotient:
  1571                           	opt stack 0
  1572                           
  1573                           ; 2 bytes @ 0x16
  1574  000017                     	ds	1
  1575  000018                     DS1621_Read_Temp@Device:
  1576                           	opt stack 0
  1577  000018                     drawPixel@y:
  1578                           	opt stack 0
  1579  000018                     drawFastVLine@y:
  1580                           	opt stack 0
  1581  000018                     fillRectangle@y:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x17
  1585  000018                     	ds	1
  1586  000019                     ??_delay_ms:
  1587  000019                     drawFastVLine@h:
  1588                           	opt stack 0
  1589  000019                     fillRectangle@w:
  1590                           	opt stack 0
  1591  000019                     drawPixel@color:
  1592                           	opt stack 0
  1593  000019                     ___lldiv@quotient:
  1594                           	opt stack 0
  1595                           
  1596                           ; 4 bytes @ 0x18
  1597  000019                     	ds	1
  1598  00001A                     fillRectangle@h:
  1599                           	opt stack 0
  1600  00001A                     drawFastVLine@color:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x19
  1604  00001A                     	ds	1
  1605  00001B                     drawPixel@x:
  1606                           	opt stack 0
  1607  00001B                     delay_ms@count:
  1608                           	opt stack 0
  1609  00001B                     fillRectangle@color:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x1A
  1613  00001B                     	ds	1
  1614  00001C                     ??_drawFastVLine:
  1615  00001C                     drawCircle@x0:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x1B
  1619  00001C                     	ds	1
  1620  00001D                     ??_fillRectangle:
  1621  00001D                     ___lldiv@counter:
  1622                           	opt stack 0
  1623                           
  1624                           ; 1 bytes @ 0x1C
  1625  00001D                     	ds	1
  1626  00001E                     ?___llmod:
  1627                           	opt stack 0
  1628  00001E                     drawCircle@y0:
  1629                           	opt stack 0
  1630  00001E                     ___llmod@dividend:
  1631                           	opt stack 0
  1632                           
  1633                           ; 4 bytes @ 0x1D
  1634  00001E                     	ds	2
  1635  000020                     drawFastVLine@hi:
  1636                           	opt stack 0
  1637  000020                     drawCircle@r:
  1638                           	opt stack 0
  1639                           
  1640                           ; 2 bytes @ 0x1F
  1641  000020                     	ds	1
  1642  000021                     drawFastVLine@lo:
  1643                           	opt stack 0
  1644  000021                     fillRectangle@hi:
  1645                           	opt stack 0
  1646                           
  1647                           ; 1 bytes @ 0x20
  1648  000021                     	ds	1
  1649  000022                     drawFastVLine@x:
  1650                           	opt stack 0
  1651  000022                     fillRectangle@lo:
  1652                           	opt stack 0
  1653  000022                     drawCircle@color:
  1654                           	opt stack 0
  1655  000022                     ___llmod@divisor:
  1656                           	opt stack 0
  1657                           
  1658                           ; 4 bytes @ 0x21
  1659  000022                     	ds	1
  1660  000023                     fillRect@y:
  1661                           	opt stack 0
  1662  000023                     fillRectangle@x:
  1663                           	opt stack 0
  1664  000023                     fillCircleHelper@x0:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x22
  1668  000023                     	ds	1
  1669  000024                     ??_drawCircle:
  1670  000024                     fillRect@w:
  1671                           	opt stack 0
  1672  000024                     fillScreen@color:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x23
  1676  000024                     	ds	1
  1677  000025                     fillRect@h:
  1678                           	opt stack 0
  1679  000025                     fillCircleHelper@y0:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x24
  1683  000025                     	ds	1
  1684  000026                     ___llmod@counter:
  1685                           	opt stack 0
  1686  000026                     fillRect@color:
  1687                           	opt stack 0
  1688  000026                     drawCircle@ddF_x:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x25
  1692  000026                     	ds	1
  1693  000027                     ?_printf:
  1694                           	opt stack 0
  1695  000027                     fillCircleHelper@r:
  1696                           	opt stack 0
  1697  000027                     printf@f:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x26
  1701  000027                     	ds	1
  1702  000028                     ??_fillRect:
  1703  000028                     drawCircle@ddF_y:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x27
  1707  000028                     	ds	1
  1708  000029                     fillCircleHelper@cornername:
  1709                           	opt stack 0
  1710                           
  1711                           ; 2 bytes @ 0x28
  1712  000029                     	ds	1
  1713  00002A                     drawCircle@f:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x29
  1717  00002A                     	ds	1
  1718  00002B                     fillRect@x:
  1719                           	opt stack 0
  1720  00002B                     fillCircleHelper@delta:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x2A
  1724  00002B                     	ds	1
  1725  00002C                     fillRect@i:
  1726                           	opt stack 0
  1727  00002C                     drawCircle@x:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x2B
  1731  00002C                     	ds	1
  1732  00002D                     fillCircleHelper@color:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x2C
  1736  00002D                     	ds	1
  1737  00002E                     drawChar@y:
  1738                           	opt stack 0
  1739  00002E                     drawCircle@y:
  1740                           	opt stack 0
  1741                           
  1742                           ; 2 bytes @ 0x2D
  1743  00002E                     	ds	1
  1744  00002F                     ??_fillCircleHelper:
  1745  00002F                     drawChar@c:
  1746                           	opt stack 0
  1747                           
  1748                           ; 1 bytes @ 0x2E
  1749  00002F                     	ds	1
  1750  000030                     drawChar@color:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x2F
  1754  000030                     	ds	1
  1755  000031                     fillCircleHelper@ddF_x:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x30
  1759  000031                     	ds	1
  1760  000032                     drawChar@bg:
  1761                           	opt stack 0
  1762                           
  1763                           ; 2 bytes @ 0x31
  1764  000032                     	ds	1
  1765  000033                     fillCircleHelper@ddF_y:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x32
  1769  000033                     	ds	1
  1770  000034                     drawChar@size:
  1771                           	opt stack 0
  1772                           
  1773                           ; 1 bytes @ 0x33
  1774  000034                     	ds	1
  1775  000035                     ??_printf:
  1776  000035                     drawChar@line:
  1777                           	opt stack 0
  1778  000035                     fillCircleHelper@f:
  1779                           	opt stack 0
  1780                           
  1781                           ; 2 bytes @ 0x34
  1782  000035                     	ds	1
  1783  000036                     drawChar@x:
  1784                           	opt stack 0
  1785                           
  1786                           ; 1 bytes @ 0x35
  1787  000036                     	ds	1
  1788  000037                     drawChar@j:
  1789                           	opt stack 0
  1790  000037                     fillCircleHelper@x:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x36
  1794  000037                     	ds	1
  1795  000038                     drawChar@i:
  1796                           	opt stack 0
  1797                           
  1798                           ; 1 bytes @ 0x37
  1799  000038                     	ds	1
  1800  000039                     drawtext@y:
  1801                           	opt stack 0
  1802  000039                     fillCircleHelper@y:
  1803                           	opt stack 0
  1804                           
  1805                           ; 2 bytes @ 0x38
  1806  000039                     	ds	1
  1807  00003A                     drawtext@_text:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x39
  1811  00003A                     	ds	1
  1812  00003B                     fillCircle@x0:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x3A
  1816  00003B                     	ds	1
  1817  00003C                     drawtext@color:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x3B
  1821  00003C                     	ds	1
  1822  00003D                     fillCircle@y0:
  1823                           	opt stack 0
  1824                           
  1825                           ; 2 bytes @ 0x3C
  1826  00003D                     	ds	1
  1827  00003E                     drawtext@bg:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x3D
  1831  00003E                     	ds	1
  1832  00003F                     fillCircle@r:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x3E
  1836  00003F                     	ds	1
  1837  000040                     drawtext@size:
  1838                           	opt stack 0
  1839                           
  1840                           ; 1 bytes @ 0x3F
  1841  000040                     	ds	1
  1842  000041                     ??_drawtext:
  1843  000041                     fillCircle@color:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x40
  1847  000041                     	ds	2
  1848  000043                     
  1849                           ; 0 bytes @ 0x42
  1850  000043                     	ds	1
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           postdec1	equ	0xFE5
  1858                           fsr1l	equ	0xFE1
  1859                           
  1860 ;;
  1861 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1862 ;;
  1863 ;; *************** function _main *****************
  1864 ;; Defined at:
  1865 ;;		line 108 in file "lab11t.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  i               2    2[BANK1 ] int 
  1870 ;;  tempC           1    4[BANK1 ] unsigned char 
  1871 ;;  tempF           1    1[BANK1 ] unsigned char 
  1872 ;;  previousSeco    1    0[BANK1 ] unsigned char 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Totals:         1       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;Total ram usage:        6 bytes
  1887 ;; Hardware stack levels required when called:   11
  1888 ;; This function calls:
  1889 ;;		_Activate_Buzzer
  1890 ;;		_DS1621_Read_Temp
  1891 ;;		_DS3231_Read_Time
  1892 ;;		_DS3231_Setup_Time
  1893 ;;		_Deactivate_Buzzer
  1894 ;;		_Do_Init
  1895 ;;		_Initialize_Screen
  1896 ;;		_Wait_Half_Second
  1897 ;;		___awdiv
  1898 ;;		_drawCircle
  1899 ;;		_drawtext
  1900 ;;		_fillCircle
  1901 ;;		_printf
  1902 ;; This function is called by:
  1903 ;;		Startup code after reset
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text0
  1908  0004F2                     __ptext0:
  1909                           	opt stack 0
  1910  0004F2                     _main:
  1911                           	opt stack 20
  1912                           
  1913                           ;lab11t.c: 110: Do_Init();
  1914                           
  1915                           ;incstack = 0
  1916  0004F2  EC4D  F00C         	call	_Do_Init	;wreg free
  1917                           
  1918                           ;lab11t.c: 111: Initialize_Screen();
  1919  0004F6  ECA9  F008         	call	_Initialize_Screen	;wreg free
  1920                           
  1921                           ;lab11t.c: 112: DS3231_Setup_Time();
  1922  0004FA  ECD6  F00A         	call	_DS3231_Setup_Time	;wreg free
  1923  0004FE  D000               	goto	l5391
  1924  000500                     l5391:
  1925                           
  1926                           ;lab11t.c: 114: {
  1927                           ;lab11t.c: 115: char tempC = DS1621_Read_Temp();
  1928  000500  EC6B  F00C         	call	_DS1621_Read_Temp	;wreg free
  1929  000504  5014               	movf	?_DS1621_Read_Temp,w,c
  1930  000506  0101               	movlb	1	; () banked
  1931  000508  6F82               	movwf	main@tempC& (0+255),b
  1932                           
  1933                           ; BSR set to: 1
  1934                           ;lab11t.c: 116: char tempF = (tempC * 9 / 5) + 32;
  1935  00050A  0101               	movlb	1	; () banked
  1936  00050C  5182               	movf	main@tempC& (0+255),w,b
  1937  00050E  0D09               	mullw	9
  1938  000510  CFF3 F011          	movff	prodl,___awdiv@dividend
  1939  000514  CFF4 F012          	movff	prodh,___awdiv@dividend+1
  1940  000518  0E00               	movlw	0
  1941  00051A  6E14               	movwf	___awdiv@divisor+1,c
  1942  00051C  0E05               	movlw	5
  1943  00051E  6E13               	movwf	___awdiv@divisor,c
  1944  000520  EC5E  F008         	call	___awdiv	;wreg free
  1945  000524  5011               	movf	?___awdiv,w,c
  1946  000526  0F20               	addlw	32
  1947  000528  0101               	movlb	1	; () banked
  1948  00052A  6F7F               	movwf	main@tempF& (0+255),b
  1949                           
  1950                           ; BSR set to: 1
  1951                           ;lab11t.c: 117: printf(" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  1952  00052C  0E64               	movlw	low STR_1
  1953  00052E  6E27               	movwf	printf@f,c
  1954  000530  0EFF               	movlw	high STR_1
  1955  000532  6E28               	movwf	printf@f+1,c
  1956  000534  C182  F029         	movff	main@tempC,?_printf+2
  1957  000538  6A2A               	clrf	?_printf+3,c
  1958  00053A  C17F  F02B         	movff	main@tempF,?_printf+4
  1959  00053E  6A2C               	clrf	?_printf+5,c
  1960  000540  EC0E  F000         	call	_printf	;wreg free
  1961                           
  1962                           ;lab11t.c: 118: char previousSecond = second;
  1963  000544  C063  F17E         	movff	_second,main@previousSecond
  1964                           
  1965                           ;lab11t.c: 119: DS3231_Read_Time();
  1966  000548  ECA4  F00A         	call	_DS3231_Read_Time	;wreg free
  1967                           
  1968                           ;lab11t.c: 120: if(second != previousSecond){
  1969  00054C  0101               	movlb	1	; () banked
  1970  00054E  517E               	movf	main@previousSecond& (0+255),w,b
  1971  000550  1863               	xorwf	_second,w,c
  1972  000552  B4D8               	btfsc	status,2,c
  1973  000554  D03B               	goto	l5411
  1974                           
  1975                           ; BSR set to: 1
  1976                           ;lab11t.c: 121: printf("%02x:%02x:%02x %02x/%02x/%02x",hour,minute,second,month,day,year
      +                          );
  1977  000556  0E8F               	movlw	low STR_2
  1978  000558  6E27               	movwf	printf@f,c
  1979  00055A  0EFF               	movlw	high STR_2
  1980  00055C  6E28               	movwf	printf@f+1,c
  1981  00055E  C05D  F029         	movff	_hour,?_printf+2
  1982  000562  6A2A               	clrf	?_printf+3,c
  1983  000564  C05F  F02B         	movff	_minute,?_printf+4
  1984  000568  6A2C               	clrf	?_printf+5,c
  1985  00056A  C063  F02D         	movff	_second,?_printf+6
  1986  00056E  6A2E               	clrf	?_printf+7,c
  1987  000570  C060  F02F         	movff	_month,?_printf+8
  1988  000574  6A30               	clrf	?_printf+9,c
  1989  000576  C05A  F031         	movff	_day,?_printf+10
  1990  00057A  6A32               	clrf	?_printf+11,c
  1991  00057C  C06D  F033         	movff	_year,?_printf+12
  1992  000580  6A34               	clrf	?_printf+13,c
  1993  000582  EC0E  F000         	call	_printf	;wreg free
  1994                           
  1995                           ;lab11t.c: 122: tempC = DS1621_Read_Temp();
  1996  000586  EC6B  F00C         	call	_DS1621_Read_Temp	;wreg free
  1997  00058A  5014               	movf	?_DS1621_Read_Temp,w,c
  1998  00058C  0101               	movlb	1	; () banked
  1999  00058E  6F82               	movwf	main@tempC& (0+255),b
  2000                           
  2001                           ; BSR set to: 1
  2002                           ;lab11t.c: 123: tempF = (tempC * 9 / 5) + 32;
  2003  000590  0101               	movlb	1	; () banked
  2004  000592  5182               	movf	main@tempC& (0+255),w,b
  2005  000594  0D09               	mullw	9
  2006  000596  CFF3 F011          	movff	prodl,___awdiv@dividend
  2007  00059A  CFF4 F012          	movff	prodh,___awdiv@dividend+1
  2008  00059E  0E00               	movlw	0
  2009  0005A0  6E14               	movwf	___awdiv@divisor+1,c
  2010  0005A2  0E05               	movlw	5
  2011  0005A4  6E13               	movwf	___awdiv@divisor,c
  2012  0005A6  EC5E  F008         	call	___awdiv	;wreg free
  2013  0005AA  5011               	movf	?___awdiv,w,c
  2014  0005AC  0F20               	addlw	32
  2015  0005AE  0101               	movlb	1	; () banked
  2016  0005B0  6F7F               	movwf	main@tempF& (0+255),b
  2017                           
  2018                           ; BSR set to: 1
  2019                           ;lab11t.c: 124: printf (" Temperature = %d degreesC = %d degreesF\r\n", tempC, tempF);
  2020  0005B2  0E64               	movlw	low STR_1
  2021  0005B4  6E27               	movwf	printf@f,c
  2022  0005B6  0EFF               	movlw	high STR_1
  2023  0005B8  6E28               	movwf	printf@f+1,c
  2024  0005BA  C182  F029         	movff	main@tempC,?_printf+2
  2025  0005BE  6A2A               	clrf	?_printf+3,c
  2026  0005C0  C17F  F02B         	movff	main@tempF,?_printf+4
  2027  0005C4  6A2C               	clrf	?_printf+5,c
  2028  0005C6  EC0E  F000         	call	_printf	;wreg free
  2029  0005CA  D000               	goto	l5411
  2030  0005CC                     l5411:
  2031                           
  2032                           ;lab11t.c: 125: }
  2033                           ;lab11t.c: 126: if(nec_ok == 1)
  2034  0005CC  044C               	decf	_nec_ok,w,c
  2035  0005CE  104D               	iorwf	_nec_ok+1,w,c
  2036  0005D0  A4D8               	btfss	status,2,c
  2037  0005D2  D796               	goto	l5391
  2038                           
  2039                           ;lab11t.c: 127: {
  2040                           ;lab11t.c: 128: nec_ok = 0;
  2041  0005D4  0E00               	movlw	0
  2042  0005D6  6E4D               	movwf	_nec_ok+1,c
  2043  0005D8  0E00               	movlw	0
  2044  0005DA  6E4C               	movwf	_nec_ok,c
  2045                           
  2046                           ;lab11t.c: 129: Nec_code1 = (char)((Nec_code >> 8));
  2047  0005DC  C045  F050         	movff	_Nec_code+1,_Nec_code1
  2048                           
  2049                           ;lab11t.c: 130: INTCONbits.INT0IE = 1;
  2050  0005E0  88F2               	bsf	intcon,4,c	;volatile
  2051                           
  2052                           ;lab11t.c: 131: INTCON2bits.INTEDG0 = 0;
  2053  0005E2  9CF1               	bcf	intcon2,6,c	;volatile
  2054                           
  2055                           ;lab11t.c: 133: found = 0xff;
  2056  0005E4  685C               	setf	_found,c
  2057                           
  2058                           ;lab11t.c: 137: for(int i = 0;i < 21;i++)
  2059  0005E6  0E00               	movlw	0
  2060  0005E8  0101               	movlb	1	; () banked
  2061  0005EA  6F81               	movwf	(main@i+1)& (0+255),b
  2062  0005EC  0E00               	movlw	0
  2063  0005EE  6F80               	movwf	main@i& (0+255),b
  2064  0005F0                     l5423:
  2065                           
  2066                           ; BSR set to: 1
  2067  0005F0  0101               	movlb	1	; () banked
  2068  0005F2  BF81               	btfsc	(main@i+1)& (0+255),7,b
  2069  0005F4  D00A               	goto	l5427
  2070  0005F6  0101               	movlb	1	; () banked
  2071  0005F8  5181               	movf	(main@i+1)& (0+255),w,b
  2072  0005FA  E11B               	bnz	l5435
  2073  0005FC  0E15               	movlw	21
  2074  0005FE  0101               	movlb	1	; () banked
  2075  000600  5D80               	subwf	main@i& (0+255),w,b
  2076  000602  B0D8               	btfsc	status,0,c
  2077  000604  D016               	goto	l5435
  2078  000606  D001               	goto	l5427
  2079                           
  2080                           ; BSR set to: 1
  2081  000608  D014               	goto	l5435
  2082  00060A                     l5427:
  2083                           
  2084                           ; BSR set to: 1
  2085                           ;lab11t.c: 138: {
  2086                           ;lab11t.c: 139: if(array1[i] == Nec_code1)
  2087  00060A  0EBF               	movlw	low _array1
  2088  00060C  0101               	movlb	1	; () banked
  2089  00060E  2580               	addwf	main@i& (0+255),w,b
  2090  000610  6ED9               	movwf	fsr2l,c
  2091  000612  0E00               	movlw	high _array1
  2092  000614  0101               	movlb	1	; () banked
  2093  000616  2181               	addwfc	(main@i+1)& (0+255),w,b
  2094  000618  6EDA               	movwf	fsr2h,c
  2095  00061A  5050               	movf	_Nec_code1,w,c
  2096  00061C  18DE               	xorwf	postinc2,w,c
  2097  00061E  A4D8               	btfss	status,2,c
  2098  000620  D003               	goto	l5431
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;lab11t.c: 140: {
  2102                           ;lab11t.c: 141: found = i;
  2103  000622  C180  F05C         	movff	main@i,_found
  2104                           
  2105                           ;lab11t.c: 142: break;
  2106  000626  D005               	goto	l5435
  2107  000628                     l5431:
  2108                           
  2109                           ; BSR set to: 1
  2110  000628  0101               	movlb	1	; () banked
  2111  00062A  4B80               	infsnz	main@i& (0+255),f,b
  2112  00062C  2B81               	incf	(main@i+1)& (0+255),f,b
  2113  00062E  D7E0               	goto	l5423
  2114                           
  2115                           ; BSR set to: 1
  2116  000630  D000               	goto	l5435
  2117  000632                     l5435:
  2118                           
  2119                           ; BSR set to: 1
  2120                           ;lab11t.c: 143: }
  2121                           ;lab11t.c: 144: }
  2122                           ;lab11t.c: 146: printf ("NEC_Code = %08lx %x ", Nec_code, Nec_code1);
  2123  000632  0EC3               	movlw	low STR_4
  2124  000634  6E27               	movwf	printf@f,c
  2125  000636  0EFF               	movlw	high STR_4
  2126  000638  6E28               	movwf	printf@f+1,c
  2127  00063A  C044  F029         	movff	_Nec_code,?_printf+2
  2128  00063E  C045  F02A         	movff	_Nec_code+1,?_printf+3
  2129  000642  C046  F02B         	movff	_Nec_code+2,?_printf+4
  2130  000646  C047  F02C         	movff	_Nec_code+3,?_printf+5
  2131  00064A  C050  F02D         	movff	_Nec_code1,?_printf+6
  2132  00064E  6A2E               	clrf	?_printf+7,c
  2133  000650  EC0E  F000         	call	_printf	;wreg free
  2134                           
  2135                           ;lab11t.c: 147: printf ("Found = %d\r\n", found);
  2136  000654  0EE9               	movlw	low STR_5
  2137  000656  6E27               	movwf	printf@f,c
  2138  000658  0EFF               	movlw	high STR_5
  2139  00065A  6E28               	movwf	printf@f+1,c
  2140  00065C  C05C  F029         	movff	_found,?_printf+2
  2141  000660  6A2A               	clrf	?_printf+3,c
  2142  000662  EC0E  F000         	call	_printf	;wreg free
  2143                           
  2144                           ;lab11t.c: 148: if (found != 0xff)
  2145  000666  285C               	incf	_found,w,c
  2146  000668  B4D8               	btfsc	status,2,c
  2147  00066A  D74A               	goto	l5391
  2148                           
  2149                           ;lab11t.c: 149: {
  2150                           ;lab11t.c: 150: PORTA = D1[found];
  2151  00066C  505C               	movf	_found,w,c
  2152  00066E  0D01               	mullw	1
  2153  000670  0E80               	movlw	low _D1
  2154  000672  24F3               	addwf	prodl,w,c
  2155  000674  6ED9               	movwf	fsr2l,c
  2156  000676  0E00               	movlw	high _D1
  2157  000678  20F4               	addwfc	prodh,w,c
  2158  00067A  6EDA               	movwf	fsr2h,c
  2159  00067C  50DF               	movf	indf2,w,c
  2160  00067E  6E80               	movwf	3968,c	;volatile
  2161                           
  2162                           ;lab11t.c: 151: PORTD = D2[found];
  2163  000680  505C               	movf	_found,w,c
  2164  000682  0D01               	mullw	1
  2165  000684  0E95               	movlw	low _D2
  2166  000686  24F3               	addwf	prodl,w,c
  2167  000688  6ED9               	movwf	fsr2l,c
  2168  00068A  0E00               	movlw	high _D2
  2169  00068C  20F4               	addwfc	prodh,w,c
  2170  00068E  6EDA               	movwf	fsr2h,c
  2171  000690  50DF               	movf	indf2,w,c
  2172  000692  6E83               	movwf	3971,c	;volatile
  2173                           
  2174                           ;lab11t.c: 152: PORTE = D3[found];
  2175  000694  505C               	movf	_found,w,c
  2176  000696  0D01               	mullw	1
  2177  000698  0EAA               	movlw	low _D3
  2178  00069A  24F3               	addwf	prodl,w,c
  2179  00069C  6ED9               	movwf	fsr2l,c
  2180  00069E  0E00               	movlw	high _D3
  2181  0006A0  20F4               	addwfc	prodh,w,c
  2182  0006A2  6EDA               	movwf	fsr2h,c
  2183  0006A4  50DF               	movf	indf2,w,c
  2184  0006A6  6E84               	movwf	3972,c	;volatile
  2185                           
  2186                           ;lab11t.c: 154: fillCircle(60, 80, 20, color[found]);
  2187  0006A8  0E00               	movlw	0
  2188  0006AA  6E3C               	movwf	fillCircle@x0+1,c
  2189  0006AC  0E3C               	movlw	60
  2190  0006AE  6E3B               	movwf	fillCircle@x0,c
  2191  0006B0  0E00               	movlw	0
  2192  0006B2  6E3E               	movwf	fillCircle@y0+1,c
  2193  0006B4  0E50               	movlw	80
  2194  0006B6  6E3D               	movwf	fillCircle@y0,c
  2195  0006B8  0E00               	movlw	0
  2196  0006BA  6E40               	movwf	fillCircle@r+1,c
  2197  0006BC  0E14               	movlw	20
  2198  0006BE  6E3F               	movwf	fillCircle@r,c
  2199  0006C0  505C               	movf	_found,w,c
  2200  0006C2  0D02               	mullw	2
  2201  0006C4  0E00               	movlw	low _color
  2202  0006C6  24F3               	addwf	prodl,w,c
  2203  0006C8  6ED9               	movwf	fsr2l,c
  2204  0006CA  0E01               	movlw	high _color
  2205  0006CC  20F4               	addwfc	prodh,w,c
  2206  0006CE  6EDA               	movwf	fsr2h,c
  2207  0006D0  CFDE F041          	movff	postinc2,fillCircle@color
  2208  0006D4  CFDD F042          	movff	postdec2,fillCircle@color+1
  2209  0006D8  EC2E  F00B         	call	_fillCircle	;wreg free
  2210                           
  2211                           ;lab11t.c: 155: drawCircle(60, 80, 20, 0xFFFF);
  2212  0006DC  0E00               	movlw	0
  2213  0006DE  6E1D               	movwf	drawCircle@x0+1,c
  2214  0006E0  0E3C               	movlw	60
  2215  0006E2  6E1C               	movwf	drawCircle@x0,c
  2216  0006E4  0E00               	movlw	0
  2217  0006E6  6E1F               	movwf	drawCircle@y0+1,c
  2218  0006E8  0E50               	movlw	80
  2219  0006EA  6E1E               	movwf	drawCircle@y0,c
  2220  0006EC  0E00               	movlw	0
  2221  0006EE  6E21               	movwf	drawCircle@r+1,c
  2222  0006F0  0E14               	movlw	20
  2223  0006F2  6E20               	movwf	drawCircle@r,c
  2224  0006F4  0EFF               	movlw	255
  2225  0006F6  6E23               	movwf	drawCircle@color+1,c
  2226  0006F8  6822               	setf	drawCircle@color,c
  2227  0006FA  ECA0  F003         	call	_drawCircle	;wreg free
  2228                           
  2229                           ;lab11t.c: 156: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000,1);
  2230  0006FE  0E4D               	movlw	77
  2231  000700  6E39               	movwf	drawtext@y,c
  2232  000702  505C               	movf	_found,w,c
  2233  000704  0D04               	mullw	4
  2234  000706  0E2A               	movlw	low _txt1
  2235  000708  24F3               	addwf	prodl,w,c
  2236  00070A  6E3A               	movwf	drawtext@_text,c
  2237  00070C  0E01               	movlw	high _txt1
  2238  00070E  20F4               	addwfc	prodh,w,c
  2239  000710  6E3B               	movwf	drawtext@_text+1,c
  2240  000712  0EFF               	movlw	255
  2241  000714  6E3D               	movwf	drawtext@color+1,c
  2242  000716  683C               	setf	drawtext@color,c
  2243  000718  0E00               	movlw	0
  2244  00071A  6E3F               	movwf	drawtext@bg+1,c
  2245  00071C  0E00               	movlw	0
  2246  00071E  6E3E               	movwf	drawtext@bg,c
  2247  000720  0E01               	movlw	1
  2248  000722  6E40               	movwf	drawtext@size,c
  2249  000724  0E34               	movlw	52
  2250  000726  ECF2  F006         	call	_drawtext
  2251                           
  2252                           ;lab11t.c: 158: PORTBbits.RB7 = 1;
  2253  00072A  8E81               	bsf	3969,7,c	;volatile
  2254                           
  2255                           ;lab11t.c: 160: Activate_Buzzer();
  2256  00072C  EC7E  F00D         	call	_Activate_Buzzer	;wreg free
  2257                           
  2258                           ;lab11t.c: 161: Wait_Half_Second();
  2259  000730  EC21  F00D         	call	_Wait_Half_Second	;wreg free
  2260                           
  2261                           ;lab11t.c: 162: PORTBbits.RB7 = 0;
  2262  000734  9E81               	bcf	3969,7,c	;volatile
  2263                           
  2264                           ;lab11t.c: 164: Deactivate_Buzzer();
  2265  000736  ECB9  F00D         	call	_Deactivate_Buzzer	;wreg free
  2266  00073A  D6E2               	goto	l5391
  2267  00073C  EF0C  F000         	goto	start
  2268  000740                     __end_of_main:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           prodh	equ	0xFF4
  2275                           prodl	equ	0xFF3
  2276                           intcon	equ	0xFF2
  2277                           intcon2	equ	0xFF1
  2278                           postinc0	equ	0xFEE
  2279                           wreg	equ	0xFE8
  2280                           postdec1	equ	0xFE5
  2281                           fsr1l	equ	0xFE1
  2282                           indf2	equ	0xFDF
  2283                           postinc2	equ	0xFDE
  2284                           postdec2	equ	0xFDD
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _printf *****************
  2290 ;; Defined at:
  2291 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  f               2   38[COMRAM] PTR const unsigned char 
  2294 ;;		 -> STR_5(13), STR_4(21), STR_3(43), STR_2(30), 
  2295 ;;		 -> STR_1(43), 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  idx             1    0[BANK0 ] unsigned char 
  2298 ;;  val             4    5[BANK0 ] unsigned long 
  2299 ;;  tmpval          4    0        struct .
  2300 ;;  cp              3    0        PTR const unsigned char 
  2301 ;;  width           2    9[BANK0 ] int 
  2302 ;;  ap              2    3[BANK0 ] PTR void [1]
  2303 ;;		 -> ?_printf(2), 
  2304 ;;  prec            2    1[BANK0 ] int 
  2305 ;;  len             2    0        unsigned int 
  2306 ;;  c               1   12[BANK0 ] char 
  2307 ;;  flag            1   11[BANK0 ] unsigned char 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  2   38[COMRAM] int 
  2310 ;; Registers used:
  2311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2317 ;;      Params:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Totals:        18      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;Total ram usage:       31 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    4
  2324 ;; This function calls:
  2325 ;;		___lldiv
  2326 ;;		___llmod
  2327 ;;		___wmul
  2328 ;;		_isdigit
  2329 ;;		_putch
  2330 ;; This function is called by:
  2331 ;;		_main
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           	psect	text1
  2336  00001C                     __ptext1:
  2337                           	opt stack 0
  2338  00001C                     _printf:
  2339                           	opt stack 26
  2340                           
  2341                           ;doprnt.c: 466: va_list ap;
  2342                           ;doprnt.c: 499: signed char c;
  2343                           ;doprnt.c: 501: int width;
  2344                           ;doprnt.c: 504: int prec;
  2345                           ;doprnt.c: 508: unsigned char flag;
  2346                           ;doprnt.c: 523: union {
  2347                           ;doprnt.c: 524: unsigned long vd;
  2348                           ;doprnt.c: 525: double integ;
  2349                           ;doprnt.c: 526: } tmpval;
  2350                           ;doprnt.c: 528: unsigned long val;
  2351                           ;doprnt.c: 529: unsigned len;
  2352                           ;doprnt.c: 530: const char * cp;
  2353                           ;doprnt.c: 533: *ap = __va_start();
  2354                           
  2355                           ;incstack = 0
  2356  00001C  0E29               	movlw	low (?_printf+2)
  2357  00001E  0100               	movlb	0	; () banked
  2358  000020  6FF6               	movwf	printf@ap& (0+255),b
  2359  000022  0E00               	movlw	high (?_printf+2)
  2360  000024  0100               	movlb	0	; () banked
  2361  000026  6FF7               	movwf	(printf@ap+1)& (0+255),b
  2362                           
  2363                           ;doprnt.c: 536: while(c = *f++) {
  2364  000028  D254               	goto	l5055
  2365  00002A                     l4917:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;doprnt.c: 538: if(c != '%')
  2369  00002A  0E25               	movlw	37
  2370  00002C  0100               	movlb	0	; () banked
  2371  00002E  19FF               	xorwf	printf@c& (0+255),w,b
  2372  000030  B4D8               	btfsc	status,2,c
  2373  000032  D005               	goto	l4921
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 540: {
  2377                           ;doprnt.c: 541: (putch(c) );
  2378  000034  0100               	movlb	0	; () banked
  2379  000036  51FF               	movf	printf@c& (0+255),w,b
  2380  000038  EC97  F00D         	call	_putch
  2381                           
  2382                           ;doprnt.c: 542: continue;
  2383  00003C  D24A               	goto	l5055
  2384  00003E                     l4921:
  2385                           
  2386                           ;doprnt.c: 543: }
  2387                           ;doprnt.c: 546: width = 0;
  2388  00003E  0E00               	movlw	0
  2389  000040  0100               	movlb	0	; () banked
  2390  000042  6FFD               	movwf	(printf@width+1)& (0+255),b
  2391  000044  0E00               	movlw	0
  2392  000046  6FFC               	movwf	printf@width& (0+255),b
  2393                           
  2394                           ;doprnt.c: 548: flag = 0;
  2395  000048  0E00               	movlw	0
  2396  00004A  0100               	movlb	0	; () banked
  2397  00004C  6FFE               	movwf	printf@flag& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;doprnt.c: 551: switch(*f) {
  2401                           
  2402                           ;doprnt.c: 550: for(;;) {
  2403  00004E  D006               	goto	l4927
  2404  000050                     l4923:
  2405                           
  2406                           ;doprnt.c: 580: flag |= 0x04;
  2407  000050  0100               	movlb	0	; () banked
  2408  000052  85FE               	bsf	printf@flag& (0+255),2,b
  2409                           
  2410                           ;doprnt.c: 581: f++;
  2411  000054  4A27               	infsnz	printf@f,f,c
  2412  000056  2A28               	incf	printf@f+1,f,c
  2413                           
  2414                           ;doprnt.c: 582: continue;
  2415  000058  D001               	goto	l4927
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;doprnt.c: 584: }
  2419  00005A  D00B               	goto	l4929
  2420  00005C                     l4927:
  2421  00005C  C027  FFF6         	movff	printf@f,tblptrl
  2422  000060  C028  FFF7         	movff	printf@f+1,tblptrh
  2423  000064                     	if	0	;tblptru may be non-zero
  2424  000064                     	endif
  2425  000064                     	if	0	;tblptru may be non-zero
  2426  000064                     	endif
  2427  000064  0008               	tblrd		*
  2428  000066  50F5               	movf	tablat,w,c
  2429                           
  2430                           ; Switch size 1, requested type "space"
  2431                           ; Number of cases is 1, Range of values is 48 to 48
  2432                           ; switch strategies available:
  2433                           ; Name         Instructions Cycles
  2434                           ; simple_byte            4     3 (average)
  2435                           ;	Chosen strategy is simple_byte
  2436  000068  0A30               	xorlw	48	; case 48
  2437  00006A  B4D8               	btfsc	status,2,c
  2438  00006C  D7F1               	goto	l4923
  2439                           
  2440                           ;doprnt.c: 585: break;
  2441  00006E  D001               	goto	l4929
  2442                           
  2443                           ;doprnt.c: 586: }
  2444  000070  D7F5               	goto	l4927
  2445  000072                     l4929:
  2446                           
  2447                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2448  000072  C027  FFF6         	movff	printf@f,tblptrl
  2449  000076  C028  FFF7         	movff	printf@f+1,tblptrh
  2450  00007A                     	if	0	;tblptru may be non-zero
  2451  00007A                     	endif
  2452  00007A                     	if	0	;tblptru may be non-zero
  2453  00007A                     	endif
  2454  00007A  0008               	tblrd		*
  2455  00007C  50F5               	movf	tablat,w,c
  2456  00007E  ECE3  F00C         	call	_isdigit
  2457  000082  A0D8               	btfss	status,0,c
  2458  000084  D042               	goto	l4947
  2459                           
  2460                           ;doprnt.c: 598: width = 0;
  2461  000086  0E00               	movlw	0
  2462  000088  0100               	movlb	0	; () banked
  2463  00008A  6FFD               	movwf	(printf@width+1)& (0+255),b
  2464  00008C  0E00               	movlw	0
  2465  00008E  6FFC               	movwf	printf@width& (0+255),b
  2466  000090  D000               	goto	l4933
  2467  000092                     l4933:
  2468                           
  2469                           ;doprnt.c: 600: width *= 10;
  2470  000092  C0FC  F011         	movff	printf@width,___wmul@multiplier
  2471  000096  C0FD  F012         	movff	printf@width+1,___wmul@multiplier+1
  2472  00009A  0E00               	movlw	0
  2473  00009C  6E14               	movwf	___wmul@multiplicand+1,c
  2474  00009E  0E0A               	movlw	10
  2475  0000A0  6E13               	movwf	___wmul@multiplicand,c
  2476  0000A2  ECCF  F00C         	call	___wmul	;wreg free
  2477  0000A6  C011  F0FC         	movff	?___wmul,printf@width
  2478  0000AA  C012  F0FD         	movff	?___wmul+1,printf@width+1
  2479                           
  2480                           ;doprnt.c: 601: width += *f++ - '0';
  2481  0000AE  0ED0               	movlw	208
  2482  0000B0  6E35               	movwf	??_printf& (0+255),c
  2483  0000B2  0EFF               	movlw	255
  2484  0000B4  6E36               	movwf	(??_printf+1)& (0+255),c
  2485  0000B6  C027  FFF6         	movff	printf@f,tblptrl
  2486  0000BA  C028  FFF7         	movff	printf@f+1,tblptrh
  2487  0000BE                     	if	0	;tblptru may be non-zero
  2488  0000BE                     	endif
  2489  0000BE                     	if	0	;tblptru may be non-zero
  2490  0000BE                     	endif
  2491  0000BE  0008               	tblrd		*
  2492  0000C0  50F5               	movf	tablat,w,c
  2493  0000C2  6E37               	movwf	(??_printf+2)& (0+255),c
  2494  0000C4  6A38               	clrf	(??_printf+3)& (0+255),c
  2495  0000C6  5035               	movf	??_printf,w,c
  2496  0000C8  2637               	addwf	??_printf+2,f,c
  2497  0000CA  5036               	movf	??_printf+1,w,c
  2498  0000CC  2238               	addwfc	??_printf+3,f,c
  2499  0000CE  5037               	movf	??_printf+2,w,c
  2500  0000D0  0100               	movlb	0	; () banked
  2501  0000D2  27FC               	addwf	printf@width& (0+255),f,b
  2502  0000D4  5038               	movf	??_printf+3,w,c
  2503  0000D6  0100               	movlb	0	; () banked
  2504  0000D8  23FD               	addwfc	(printf@width+1)& (0+255),f,b
  2505                           
  2506                           ; BSR set to: 0
  2507  0000DA  4A27               	infsnz	printf@f,f,c
  2508  0000DC  2A28               	incf	printf@f+1,f,c
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2512  0000DE  C027  FFF6         	movff	printf@f,tblptrl
  2513  0000E2  C028  FFF7         	movff	printf@f+1,tblptrh
  2514  0000E6                     	if	0	;tblptru may be non-zero
  2515  0000E6                     	endif
  2516  0000E6                     	if	0	;tblptru may be non-zero
  2517  0000E6                     	endif
  2518  0000E6  0008               	tblrd		*
  2519  0000E8  50F5               	movf	tablat,w,c
  2520  0000EA  ECE3  F00C         	call	_isdigit
  2521  0000EE  A0D8               	btfss	status,0,c
  2522  0000F0  D00C               	goto	l4947
  2523  0000F2  D7CF               	goto	l4933
  2524                           
  2525                           ;doprnt.c: 635: switch(c = *f++) {
  2526                           
  2527                           ;doprnt.c: 608: }
  2528                           ;doprnt.c: 633: loop:
  2529  0000F4  D00A               	goto	l4947
  2530                           
  2531                           ;doprnt.c: 638: goto alldone;
  2532                           
  2533                           ;doprnt.c: 637: case 0:
  2534  0000F6  D1FC               	goto	l683
  2535  0000F8                     l4941:
  2536                           
  2537                           ;doprnt.c: 643: flag |= 0x10;
  2538  0000F8  0100               	movlb	0	; () banked
  2539  0000FA  89FE               	bsf	printf@flag& (0+255),4,b
  2540                           
  2541                           ;doprnt.c: 644: goto loop;
  2542  0000FC  D006               	goto	l4947
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;doprnt.c: 698: case 'i':
  2546                           ;doprnt.c: 699: break;
  2547                           
  2548                           ; BSR set to: 0
  2549                           
  2550                           ;doprnt.c: 697: case 'd':
  2551  0000FE  D020               	goto	l642
  2552  000100                     l4943:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 721: flag |= 0x80;
  2556  000100  0100               	movlb	0	; () banked
  2557  000102  8FFE               	bsf	printf@flag& (0+255),7,b
  2558                           
  2559                           ;doprnt.c: 723: break;
  2560  000104  D01D               	goto	l642
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;doprnt.c: 813: continue;
  2564                           
  2565                           ;doprnt.c: 802: default:
  2566  000106  D1E5               	goto	l5055
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;doprnt.c: 822: }
  2570  000108  D01B               	goto	l642
  2571  00010A                     l4947:
  2572  00010A  C027  FFF6         	movff	printf@f,tblptrl
  2573  00010E  C028  FFF7         	movff	printf@f+1,tblptrh
  2574  000112  4A27               	infsnz	printf@f,f,c
  2575  000114  2A28               	incf	printf@f+1,f,c
  2576  000116                     	if	0	;tblptru may be non-zero
  2577  000116                     	endif
  2578  000116                     	if	0	;tblptru may be non-zero
  2579  000116                     	endif
  2580  000116  0008               	tblrd		*
  2581  000118  CFF5 F0FF          	movff	tablat,printf@c
  2582  00011C  0100               	movlb	0	; () banked
  2583  00011E  51FF               	movf	printf@c& (0+255),w,b
  2584                           
  2585                           ; Switch size 1, requested type "space"
  2586                           ; Number of cases is 5, Range of values is 0 to 120
  2587                           ; switch strategies available:
  2588                           ; Name         Instructions Cycles
  2589                           ; simple_byte           16     9 (average)
  2590                           ;	Chosen strategy is simple_byte
  2591  000120  0A00               	xorlw	0	; case 0
  2592  000122  B4D8               	btfsc	status,2,c
  2593  000124  D1E5               	goto	l683
  2594  000126  0A64               	xorlw	100	; case 100
  2595  000128  B4D8               	btfsc	status,2,c
  2596  00012A  D00A               	goto	l642
  2597  00012C  0A0D               	xorlw	13	; case 105
  2598  00012E  B4D8               	btfsc	status,2,c
  2599  000130  D007               	goto	l642
  2600  000132  0A05               	xorlw	5	; case 108
  2601  000134  B4D8               	btfsc	status,2,c
  2602  000136  D7E0               	goto	l4941
  2603  000138  0A14               	xorlw	20	; case 120
  2604  00013A  B4D8               	btfsc	status,2,c
  2605  00013C  D7E1               	goto	l4943
  2606  00013E  D1C9               	goto	l5055
  2607  000140                     l642:
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2611  000140  0100               	movlb	0	; () banked
  2612  000142  BFFE               	btfsc	printf@flag& (0+255),7,b
  2613  000144  D035               	goto	l645
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;doprnt.c: 1253: {
  2617                           ;doprnt.c: 1255: if(flag & 0x10)
  2618  000146  0100               	movlb	0	; () banked
  2619  000148  A9FE               	btfss	printf@flag& (0+255),4,b
  2620  00014A  D00E               	goto	l4955
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2624  00014C  C0F6  FFD9         	movff	printf@ap,fsr2l
  2625  000150  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2626  000154  CFDE F0F8          	movff	postinc2,printf@val
  2627  000158  CFDE F0F9          	movff	postinc2,printf@val+1
  2628  00015C  CFDE F0FA          	movff	postinc2,printf@val+2
  2629  000160  CFDE F0FB          	movff	postinc2,printf@val+3
  2630                           
  2631                           ; BSR set to: 0
  2632  000164  0E04               	movlw	4
  2633  000166  D00F               	goto	L1
  2634  000168                     l4955:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;doprnt.c: 1257: else
  2638                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2639  000168  C0F6  FFD9         	movff	printf@ap,fsr2l
  2640  00016C  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2641  000170  CFDE F0F8          	movff	postinc2,printf@val
  2642  000174  CFDD F0F9          	movff	postdec2,printf@val+1
  2643  000178  0100               	movlb	0	; () banked
  2644  00017A  0E00               	movlw	0
  2645  00017C  BFF9               	btfsc	(printf@val+1)& (0+255),7,b
  2646  00017E  0EFF               	movlw	-1
  2647  000180  6FFA               	movwf	(printf@val+2)& (0+255),b
  2648  000182  6FFB               	movwf	(printf@val+3)& (0+255),b
  2649                           
  2650                           ; BSR set to: 0
  2651  000184  0E02               	movlw	2
  2652  000186                     L1:
  2653  000186  0100               	movlb	0	; () banked
  2654  000188  27F6               	addwf	printf@ap& (0+255),f,b
  2655  00018A  0E00               	movlw	0
  2656  00018C  23F7               	addwfc	(printf@ap+1)& (0+255),f,b
  2657  00018E  D000               	goto	l4959
  2658  000190                     l4959:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;doprnt.c: 1261: if((long)val < 0) {
  2662  000190  0100               	movlb	0	; () banked
  2663  000192  AFFB               	btfss	(printf@val+3)& (0+255),7,b
  2664  000194  D089               	goto	l5003
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;doprnt.c: 1262: flag |= 0x03;
  2668  000196  0E03               	movlw	3
  2669  000198  0100               	movlb	0	; () banked
  2670  00019A  13FE               	iorwf	printf@flag& (0+255),f,b
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;doprnt.c: 1263: val = -val;
  2674  00019C  0100               	movlb	0	; () banked
  2675  00019E  1FFB               	comf	(printf@val+3)& (0+255),f,b
  2676  0001A0  1FFA               	comf	(printf@val+2)& (0+255),f,b
  2677  0001A2  1FF9               	comf	(printf@val+1)& (0+255),f,b
  2678  0001A4  6DF8               	negf	printf@val& (0+255),b
  2679  0001A6  0E00               	movlw	0
  2680  0001A8  23F9               	addwfc	(printf@val+1)& (0+255),f,b
  2681  0001AA  23FA               	addwfc	(printf@val+2)& (0+255),f,b
  2682  0001AC  23FB               	addwfc	(printf@val+3)& (0+255),f,b
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;doprnt.c: 1264: }
  2686                           ;doprnt.c: 1266: }
  2687  0001AE  D07C               	goto	l5003
  2688  0001B0                     l645:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 1268: else
  2692                           ;doprnt.c: 1273: {
  2693                           ;doprnt.c: 1281: if(flag & 0x10)
  2694  0001B0  0100               	movlb	0	; () banked
  2695  0001B2  A9FE               	btfss	printf@flag& (0+255),4,b
  2696  0001B4  D00E               	goto	l4969
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2700  0001B6  C0F6  FFD9         	movff	printf@ap,fsr2l
  2701  0001BA  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2702  0001BE  CFDE F0F8          	movff	postinc2,printf@val
  2703  0001C2  CFDE F0F9          	movff	postinc2,printf@val+1
  2704  0001C6  CFDE F0FA          	movff	postinc2,printf@val+2
  2705  0001CA  CFDE F0FB          	movff	postinc2,printf@val+3
  2706                           
  2707                           ; BSR set to: 0
  2708  0001CE  0E04               	movlw	4
  2709  0001D0  D010               	goto	L2
  2710  0001D2                     l4969:
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;doprnt.c: 1283: else
  2714                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2715  0001D2  C0F6  FFD9         	movff	printf@ap,fsr2l
  2716  0001D6  C0F7  FFDA         	movff	printf@ap+1,fsr2h
  2717  0001DA  CFDE F035          	movff	postinc2,??_printf
  2718  0001DE  CFDD F036          	movff	postdec2,??_printf+1
  2719  0001E2  C035  F0F8         	movff	??_printf,printf@val
  2720  0001E6  C036  F0F9         	movff	??_printf+1,printf@val+1
  2721  0001EA  0100               	movlb	0	; () banked
  2722  0001EC  6BFA               	clrf	(printf@val+2)& (0+255),b
  2723  0001EE  6BFB               	clrf	(printf@val+3)& (0+255),b
  2724                           
  2725                           ; BSR set to: 0
  2726  0001F0  0E02               	movlw	2
  2727  0001F2                     L2:
  2728  0001F2  0100               	movlb	0	; () banked
  2729  0001F4  27F6               	addwf	printf@ap& (0+255),f,b
  2730  0001F6  0E00               	movlw	0
  2731  0001F8  23F7               	addwfc	(printf@ap+1)& (0+255),f,b
  2732                           
  2733                           ; BSR set to: 0
  2734                           ;doprnt.c: 1287: }
  2735                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2736                           
  2737                           ; BSR set to: 0
  2738  0001FA  D056               	goto	l5003
  2739  0001FC                     l4973:
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2743  0001FC  0E01               	movlw	1
  2744  0001FE  0100               	movlb	0	; () banked
  2745  000200  6FFF               	movwf	printf@c& (0+255),b
  2746  000202                     l4975:
  2747                           
  2748                           ; BSR set to: 0
  2749  000202  0E0A               	movlw	10
  2750  000204  0100               	movlb	0	; () banked
  2751  000206  19FF               	xorwf	printf@c& (0+255),w,b
  2752  000208  B4D8               	btfsc	status,2,c
  2753  00020A  D058               	goto	l5005
  2754  00020C  D001               	goto	l4979
  2755                           
  2756                           ; BSR set to: 0
  2757  00020E  D056               	goto	l5005
  2758  000210                     l4979:
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;doprnt.c: 1306: if(val < dpowers[c])
  2762  000210  0100               	movlb	0	; () banked
  2763  000212  51FF               	movf	printf@c& (0+255),w,b
  2764  000214  0D04               	mullw	4
  2765  000216  0E1C               	movlw	low _dpowers
  2766  000218  24F3               	addwf	prodl,w,c
  2767  00021A  6EF6               	movwf	tblptrl,c
  2768  00021C  0EFF               	movlw	high _dpowers
  2769  00021E  20F4               	addwfc	prodh,w,c
  2770  000220  6EF7               	movwf	tblptrh,c
  2771  000222                     	if	0	;There are less than 3 active tblptr bytes
  2772  000222                     	endif
  2773  000222  0009               	tblrd		*+
  2774  000224  50F5               	movf	tablat,w,c
  2775  000226  0100               	movlb	0	; () banked
  2776  000228  5DF8               	subwf	printf@val& (0+255),w,b
  2777  00022A  0009               	tblrd		*+
  2778  00022C  50F5               	movf	tablat,w,c
  2779  00022E  0100               	movlb	0	; () banked
  2780  000230  59F9               	subwfb	(printf@val+1)& (0+255),w,b
  2781  000232  0009               	tblrd		*+
  2782  000234  50F5               	movf	tablat,w,c
  2783  000236  0100               	movlb	0	; () banked
  2784  000238  59FA               	subwfb	(printf@val+2)& (0+255),w,b
  2785  00023A  0009               	tblrd		*+
  2786  00023C  50F5               	movf	tablat,w,c
  2787  00023E  0100               	movlb	0	; () banked
  2788  000240  59FB               	subwfb	(printf@val+3)& (0+255),w,b
  2789  000242  A0D8               	btfss	status,0,c
  2790  000244  D03B               	goto	l5005
  2791  000246  D001               	goto	l4983
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;doprnt.c: 1307: break;
  2795  000248  D039               	goto	l5005
  2796  00024A                     l4983:
  2797                           
  2798                           ; BSR set to: 0
  2799  00024A  0100               	movlb	0	; () banked
  2800  00024C  2BFF               	incf	printf@c& (0+255),f,b
  2801  00024E  D7D9               	goto	l4975
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;doprnt.c: 1309: break;
  2805                           
  2806                           ; BSR set to: 0
  2807  000250  D035               	goto	l5005
  2808  000252                     l4987:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2812  000252  0E01               	movlw	1
  2813  000254  0100               	movlb	0	; () banked
  2814  000256  6FFF               	movwf	printf@c& (0+255),b
  2815  000258                     l4989:
  2816                           
  2817                           ; BSR set to: 0
  2818  000258  0E08               	movlw	8
  2819  00025A  0100               	movlb	0	; () banked
  2820  00025C  19FF               	xorwf	printf@c& (0+255),w,b
  2821  00025E  B4D8               	btfsc	status,2,c
  2822  000260  D02D               	goto	l5005
  2823  000262  D001               	goto	l4993
  2824                           
  2825                           ; BSR set to: 0
  2826  000264  D02B               	goto	l5005
  2827  000266                     l4993:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2831  000266  0100               	movlb	0	; () banked
  2832  000268  51FF               	movf	printf@c& (0+255),w,b
  2833  00026A  0D04               	mullw	4
  2834  00026C  0E44               	movlw	low _hexpowers
  2835  00026E  24F3               	addwf	prodl,w,c
  2836  000270  6EF6               	movwf	tblptrl,c
  2837  000272  0EFF               	movlw	high _hexpowers
  2838  000274  20F4               	addwfc	prodh,w,c
  2839  000276  6EF7               	movwf	tblptrh,c
  2840  000278                     	if	0	;There are less than 3 active tblptr bytes
  2841  000278                     	endif
  2842  000278  0009               	tblrd		*+
  2843  00027A  50F5               	movf	tablat,w,c
  2844  00027C  0100               	movlb	0	; () banked
  2845  00027E  5DF8               	subwf	printf@val& (0+255),w,b
  2846  000280  0009               	tblrd		*+
  2847  000282  50F5               	movf	tablat,w,c
  2848  000284  0100               	movlb	0	; () banked
  2849  000286  59F9               	subwfb	(printf@val+1)& (0+255),w,b
  2850  000288  0009               	tblrd		*+
  2851  00028A  50F5               	movf	tablat,w,c
  2852  00028C  0100               	movlb	0	; () banked
  2853  00028E  59FA               	subwfb	(printf@val+2)& (0+255),w,b
  2854  000290  0009               	tblrd		*+
  2855  000292  50F5               	movf	tablat,w,c
  2856  000294  0100               	movlb	0	; () banked
  2857  000296  59FB               	subwfb	(printf@val+3)& (0+255),w,b
  2858  000298  A0D8               	btfss	status,0,c
  2859  00029A  D010               	goto	l5005
  2860  00029C  D001               	goto	l4997
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;doprnt.c: 1318: break;
  2864  00029E  D00E               	goto	l5005
  2865  0002A0                     l4997:
  2866                           
  2867                           ; BSR set to: 0
  2868  0002A0  0100               	movlb	0	; () banked
  2869  0002A2  2BFF               	incf	printf@c& (0+255),f,b
  2870  0002A4  D7D9               	goto	l4989
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;doprnt.c: 1336: }
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;doprnt.c: 1320: break;
  2877                           
  2878                           ; BSR set to: 0
  2879  0002A6  D00A               	goto	l5005
  2880  0002A8                     l5003:
  2881                           
  2882                           ; BSR set to: 0
  2883  0002A8  0100               	movlb	0	; () banked
  2884  0002AA  51FE               	movf	printf@flag& (0+255),w,b
  2885  0002AC  0B80               	andlw	128
  2886                           
  2887                           ; Switch size 1, requested type "space"
  2888                           ; Number of cases is 2, Range of values is 0 to 128
  2889                           ; switch strategies available:
  2890                           ; Name         Instructions Cycles
  2891                           ; simple_byte            7     4 (average)
  2892                           ;	Chosen strategy is simple_byte
  2893  0002AE  0A00               	xorlw	0	; case 0
  2894  0002B0  B4D8               	btfsc	status,2,c
  2895  0002B2  D7A4               	goto	l4973
  2896  0002B4  0A80               	xorlw	128	; case 128
  2897  0002B6  B4D8               	btfsc	status,2,c
  2898  0002B8  D7CC               	goto	l4987
  2899  0002BA  D000               	goto	l5005
  2900  0002BC                     l5005:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2904  0002BC  0100               	movlb	0	; () banked
  2905  0002BE  51FC               	movf	printf@width& (0+255),w,b
  2906  0002C0  0100               	movlb	0	; () banked
  2907  0002C2  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  2908  0002C4  B4D8               	btfsc	status,2,c
  2909  0002C6  D00B               	goto	l5011
  2910                           
  2911                           ; BSR set to: 0
  2912  0002C8  C0FE  F035         	movff	printf@flag,??_printf
  2913  0002CC  0E03               	movlw	3
  2914  0002CE  1635               	andwf	??_printf,f,c
  2915  0002D0  B4D8               	btfsc	status,2,c
  2916  0002D2  D005               	goto	l5011
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;doprnt.c: 1346: width--;
  2920  0002D4  0100               	movlb	0	; () banked
  2921  0002D6  07FC               	decf	printf@width& (0+255),f,b
  2922  0002D8  A0D8               	btfss	status,0,c
  2923  0002DA  07FD               	decf	(printf@width+1)& (0+255),f,b
  2924  0002DC  D000               	goto	l5011
  2925  0002DE                     l5011:
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;doprnt.c: 1381: if(width > c)
  2929  0002DE  0E80               	movlw	128
  2930  0002E0  0100               	movlb	0	; () banked
  2931  0002E2  BFFF               	btfsc	printf@c& (0+255),7,b
  2932  0002E4  0E7F               	movlw	127
  2933  0002E6  6E35               	movwf	??_printf& (0+255),c
  2934  0002E8  0100               	movlb	0	; () banked
  2935  0002EA  51FC               	movf	printf@width& (0+255),w,b
  2936  0002EC  0100               	movlb	0	; () banked
  2937  0002EE  5DFF               	subwf	printf@c& (0+255),w,b
  2938  0002F0  0100               	movlb	0	; () banked
  2939  0002F2  51FD               	movf	(printf@width+1)& (0+255),w,b
  2940  0002F4  0A80               	xorlw	128
  2941  0002F6  5835               	subwfb	??_printf& (0+255),w,c
  2942  0002F8  B0D8               	btfsc	status,0,c
  2943  0002FA  D00B               	goto	l5015
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;doprnt.c: 1382: width -= c;
  2947  0002FC  0100               	movlb	0	; () banked
  2948  0002FE  51FF               	movf	printf@c& (0+255),w,b
  2949  000300  0100               	movlb	0	; () banked
  2950  000302  5FFC               	subwf	printf@width& (0+255),f,b
  2951  000304  0E00               	movlw	0
  2952  000306  0100               	movlb	0	; () banked
  2953  000308  BFFF               	btfsc	printf@c& (0+255),7,b
  2954  00030A  0EFF               	movlw	255
  2955  00030C  0100               	movlb	0	; () banked
  2956  00030E  5BFD               	subwfb	(printf@width+1)& (0+255),f,b
  2957  000310  D006               	goto	l5017
  2958  000312                     l5015:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;doprnt.c: 1383: else
  2962                           ;doprnt.c: 1384: width = 0;
  2963  000312  0E00               	movlw	0
  2964  000314  0100               	movlb	0	; () banked
  2965  000316  6FFD               	movwf	(printf@width+1)& (0+255),b
  2966  000318  0E00               	movlw	0
  2967  00031A  6FFC               	movwf	printf@width& (0+255),b
  2968  00031C  D000               	goto	l5017
  2969  00031E                     l5017:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 1387: if(flag & 0x04) {
  2973  00031E  0100               	movlb	0	; () banked
  2974  000320  A5FE               	btfss	printf@flag& (0+255),2,b
  2975  000322  D01F               	goto	l5029
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;doprnt.c: 1392: if(flag & 0x03)
  2979  000324  C0FE  F035         	movff	printf@flag,??_printf
  2980  000328  0E03               	movlw	3
  2981  00032A  1635               	andwf	??_printf,f,c
  2982  00032C  B4D8               	btfsc	status,2,c
  2983  00032E  D004               	goto	l5023
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;doprnt.c: 1393: (putch('-') );
  2987  000330  0E2D               	movlw	45
  2988  000332  EC97  F00D         	call	_putch
  2989  000336  D000               	goto	l5023
  2990  000338                     l5023:
  2991                           
  2992                           ;doprnt.c: 1415: if(width)
  2993  000338  0100               	movlb	0	; () banked
  2994  00033A  51FC               	movf	printf@width& (0+255),w,b
  2995  00033C  0100               	movlb	0	; () banked
  2996  00033E  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  2997  000340  B4D8               	btfsc	status,2,c
  2998  000342  D02E               	goto	l5039
  2999  000344                     l5025:
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;doprnt.c: 1417: (putch('0') );
  3003  000344  0E30               	movlw	48
  3004  000346  EC97  F00D         	call	_putch
  3005                           
  3006                           ;doprnt.c: 1418: while(--width);
  3007  00034A  0100               	movlb	0	; () banked
  3008  00034C  07FC               	decf	printf@width& (0+255),f,b
  3009  00034E  A0D8               	btfss	status,0,c
  3010  000350  07FD               	decf	(printf@width+1)& (0+255),f,b
  3011  000352  0100               	movlb	0	; () banked
  3012  000354  51FC               	movf	printf@width& (0+255),w,b
  3013  000356  0100               	movlb	0	; () banked
  3014  000358  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  3015  00035A  B4D8               	btfsc	status,2,c
  3016  00035C  D021               	goto	l5039
  3017  00035E  D7F2               	goto	l5025
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;doprnt.c: 1420: } else
  3021                           
  3022                           ; BSR set to: 0
  3023  000360  D01F               	goto	l5039
  3024  000362                     l5029:
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;doprnt.c: 1422: {
  3028                           ;doprnt.c: 1424: if(width
  3029                           ;doprnt.c: 1428: )
  3030  000362  0100               	movlb	0	; () banked
  3031  000364  51FC               	movf	printf@width& (0+255),w,b
  3032  000366  0100               	movlb	0	; () banked
  3033  000368  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  3034  00036A  B4D8               	btfsc	status,2,c
  3035  00036C  D00F               	goto	l5035
  3036  00036E                     l5031:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;doprnt.c: 1430: (putch(' ') );
  3040  00036E  0E20               	movlw	32
  3041  000370  EC97  F00D         	call	_putch
  3042                           
  3043                           ;doprnt.c: 1431: while(--width);
  3044  000374  0100               	movlb	0	; () banked
  3045  000376  07FC               	decf	printf@width& (0+255),f,b
  3046  000378  A0D8               	btfss	status,0,c
  3047  00037A  07FD               	decf	(printf@width+1)& (0+255),f,b
  3048  00037C  0100               	movlb	0	; () banked
  3049  00037E  51FC               	movf	printf@width& (0+255),w,b
  3050  000380  0100               	movlb	0	; () banked
  3051  000382  11FD               	iorwf	(printf@width+1)& (0+255),w,b
  3052  000384  B4D8               	btfsc	status,2,c
  3053  000386  D002               	goto	l5035
  3054  000388  D7F2               	goto	l5031
  3055                           
  3056                           ; BSR set to: 0
  3057  00038A  D000               	goto	l5035
  3058  00038C                     l5035:
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;doprnt.c: 1438: if(flag & 0x03)
  3062  00038C  C0FE  F035         	movff	printf@flag,??_printf
  3063  000390  0E03               	movlw	3
  3064  000392  1635               	andwf	??_printf,f,c
  3065  000394  B4D8               	btfsc	status,2,c
  3066  000396  D004               	goto	l5039
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;doprnt.c: 1439: (putch('-') );
  3070  000398  0E2D               	movlw	45
  3071  00039A  EC97  F00D         	call	_putch
  3072  00039E  D000               	goto	l5039
  3073  0003A0                     l5039:
  3074                           
  3075                           ;doprnt.c: 1469: }
  3076                           ;doprnt.c: 1472: prec = c;
  3077  0003A0  0100               	movlb	0	; () banked
  3078  0003A2  51FF               	movf	printf@c& (0+255),w,b
  3079  0003A4  0100               	movlb	0	; () banked
  3080  0003A6  6FF4               	movwf	printf@prec& (0+255),b
  3081  0003A8  6BF5               	clrf	(printf@prec+1)& (0+255),b
  3082  0003AA  BFF4               	btfsc	printf@prec& (0+255),7,b
  3083  0003AC  07F5               	decf	(printf@prec+1)& (0+255),f,b
  3084                           
  3085                           ;doprnt.c: 1474: while(prec--) {
  3086  0003AE  D084               	goto	l5053
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  3090  0003B0  D074               	goto	l5049
  3091  0003B2                     l5041:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3095  0003B2  C0F4  F035         	movff	printf@prec,??_printf
  3096  0003B6  C0F5  F036         	movff	printf@prec+1,??_printf+1
  3097  0003BA  90D8               	bcf	status,0,c
  3098  0003BC  3635               	rlcf	??_printf,f,c
  3099  0003BE  3636               	rlcf	??_printf+1,f,c
  3100  0003C0  90D8               	bcf	status,0,c
  3101  0003C2  3635               	rlcf	??_printf,f,c
  3102  0003C4  3636               	rlcf	??_printf+1,f,c
  3103  0003C6  0E1C               	movlw	low _dpowers
  3104  0003C8  2435               	addwf	??_printf,w,c
  3105  0003CA  6EF6               	movwf	tblptrl,c
  3106  0003CC  0EFF               	movlw	high _dpowers
  3107  0003CE  2036               	addwfc	??_printf+1,w,c
  3108  0003D0  6EF7               	movwf	tblptrh,c
  3109  0003D2                     	if	0	;There are less than 3 active tblptr bytes
  3110  0003D2                     	endif
  3111  0003D2  0009               	tblrd		*+
  3112  0003D4  CFF5 F015          	movff	tablat,___lldiv@divisor
  3113  0003D8  0009               	tblrd		*+
  3114  0003DA  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3115  0003DE  0009               	tblrd		*+
  3116  0003E0  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3117  0003E4  000A               	tblrd		*-
  3118  0003E6  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3119  0003EA  C0F8  F011         	movff	printf@val,___lldiv@dividend
  3120  0003EE  C0F9  F012         	movff	printf@val+1,___lldiv@dividend+1
  3121  0003F2  C0FA  F013         	movff	printf@val+2,___lldiv@dividend+2
  3122  0003F6  C0FB  F014         	movff	printf@val+3,___lldiv@dividend+3
  3123  0003FA  ECF0  F008         	call	___lldiv	;wreg free
  3124  0003FE  C011  F01E         	movff	?___lldiv,___llmod@dividend
  3125  000402  C012  F01F         	movff	?___lldiv+1,___llmod@dividend+1
  3126  000406  C013  F020         	movff	?___lldiv+2,___llmod@dividend+2
  3127  00040A  C014  F021         	movff	?___lldiv+3,___llmod@dividend+3
  3128  00040E  0E0A               	movlw	10
  3129  000410  6E22               	movwf	___llmod@divisor,c
  3130  000412  0E00               	movlw	0
  3131  000414  6E23               	movwf	___llmod@divisor+1,c
  3132  000416  0E00               	movlw	0
  3133  000418  6E24               	movwf	___llmod@divisor+2,c
  3134  00041A  0E00               	movlw	0
  3135  00041C  6E25               	movwf	___llmod@divisor+3,c
  3136  00041E  EC34  F00A         	call	___llmod	;wreg free
  3137  000422  501E               	movf	?___llmod,w,c
  3138  000424  0F30               	addlw	48
  3139  000426  0100               	movlb	0	; () banked
  3140  000428  6FFF               	movwf	printf@c& (0+255),b
  3141                           
  3142                           ;doprnt.c: 1491: break;
  3143  00042A  D041               	goto	l5051
  3144  00042C                     l5043:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;doprnt.c: 1499: {
  3148                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3149  00042C  C0F8  F011         	movff	printf@val,___lldiv@dividend
  3150  000430  C0F9  F012         	movff	printf@val+1,___lldiv@dividend+1
  3151  000434  C0FA  F013         	movff	printf@val+2,___lldiv@dividend+2
  3152  000438  C0FB  F014         	movff	printf@val+3,___lldiv@dividend+3
  3153  00043C  C0F4  F035         	movff	printf@prec,??_printf
  3154  000440  C0F5  F036         	movff	printf@prec+1,??_printf+1
  3155  000444  90D8               	bcf	status,0,c
  3156  000446  3635               	rlcf	??_printf,f,c
  3157  000448  3636               	rlcf	??_printf+1,f,c
  3158  00044A  90D8               	bcf	status,0,c
  3159  00044C  3635               	rlcf	??_printf,f,c
  3160  00044E  3636               	rlcf	??_printf+1,f,c
  3161  000450  0E44               	movlw	low _hexpowers
  3162  000452  2435               	addwf	??_printf,w,c
  3163  000454  6EF6               	movwf	tblptrl,c
  3164  000456  0EFF               	movlw	high _hexpowers
  3165  000458  2036               	addwfc	??_printf+1,w,c
  3166  00045A  6EF7               	movwf	tblptrh,c
  3167  00045C                     	if	0	;There are less than 3 active tblptr bytes
  3168  00045C                     	endif
  3169  00045C  0009               	tblrd		*+
  3170  00045E  CFF5 F015          	movff	tablat,___lldiv@divisor
  3171  000462  0009               	tblrd		*+
  3172  000464  CFF5 F016          	movff	tablat,___lldiv@divisor+1
  3173  000468  0009               	tblrd		*+
  3174  00046A  CFF5 F017          	movff	tablat,___lldiv@divisor+2
  3175  00046E  000A               	tblrd		*-
  3176  000470  CFF5 F018          	movff	tablat,___lldiv@divisor+3
  3177  000474  ECF0  F008         	call	___lldiv	;wreg free
  3178  000478  5011               	movf	?___lldiv,w,c
  3179  00047A  0B0F               	andlw	15
  3180  00047C  0100               	movlb	0	; () banked
  3181  00047E  6FF3               	movwf	printf@idx& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3185  000480  0100               	movlb	0	; () banked
  3186  000482  51F3               	movf	printf@idx& (0+255),w,b
  3187  000484  0D01               	mullw	1
  3188  000486  0ED8               	movlw	low STR_8
  3189  000488  24F3               	addwf	prodl,w,c
  3190  00048A  6EF6               	movwf	tblptrl,c
  3191  00048C  0EFF               	movlw	high STR_8
  3192  00048E  20F4               	addwfc	prodh,w,c
  3193  000490  6EF7               	movwf	tblptrh,c
  3194  000492                     	if	0	;There are less than 3 active tblptr bytes
  3195  000492                     	endif
  3196  000492  0008               	tblrd		*
  3197  000494  CFF5 F0FF          	movff	tablat,printf@c
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;doprnt.c: 1523: }
  3201                           
  3202                           ;doprnt.c: 1508: }
  3203                           ;doprnt.c: 1510: break;
  3204  000498  D00A               	goto	l5051
  3205  00049A                     l5049:
  3206                           
  3207                           ; BSR set to: 0
  3208  00049A  0100               	movlb	0	; () banked
  3209  00049C  51FE               	movf	printf@flag& (0+255),w,b
  3210  00049E  0B80               	andlw	128
  3211                           
  3212                           ; Switch size 1, requested type "space"
  3213                           ; Number of cases is 2, Range of values is 0 to 128
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte            7     4 (average)
  3217                           ;	Chosen strategy is simple_byte
  3218  0004A0  0A00               	xorlw	0	; case 0
  3219  0004A2  B4D8               	btfsc	status,2,c
  3220  0004A4  D786               	goto	l5041
  3221  0004A6  0A80               	xorlw	128	; case 128
  3222  0004A8  B4D8               	btfsc	status,2,c
  3223  0004AA  D7C0               	goto	l5043
  3224  0004AC  D000               	goto	l5051
  3225  0004AE                     l5051:
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;doprnt.c: 1524: (putch(c) );
  3229  0004AE  0100               	movlb	0	; () banked
  3230  0004B0  51FF               	movf	printf@c& (0+255),w,b
  3231  0004B2  EC97  F00D         	call	_putch
  3232  0004B6  D000               	goto	l5053
  3233  0004B8                     l5053:
  3234  0004B8  0100               	movlb	0	; () banked
  3235  0004BA  07F4               	decf	printf@prec& (0+255),f,b
  3236  0004BC  A0D8               	btfss	status,0,c
  3237  0004BE  07F5               	decf	(printf@prec+1)& (0+255),f,b
  3238  0004C0  0100               	movlb	0	; () banked
  3239  0004C2  29F4               	incf	printf@prec& (0+255),w,b
  3240  0004C4  E1EA               	bnz	l5049
  3241  0004C6  0100               	movlb	0	; () banked
  3242  0004C8  29F5               	incf	(printf@prec+1)& (0+255),w,b
  3243  0004CA  B4D8               	btfsc	status,2,c
  3244  0004CC  D002               	goto	l5055
  3245  0004CE  D7E5               	goto	l5049
  3246                           
  3247                           ; BSR set to: 0
  3248  0004D0  D000               	goto	l5055
  3249  0004D2                     l5055:
  3250  0004D2  C027  FFF6         	movff	printf@f,tblptrl
  3251  0004D6  C028  FFF7         	movff	printf@f+1,tblptrh
  3252  0004DA  4A27               	infsnz	printf@f,f,c
  3253  0004DC  2A28               	incf	printf@f+1,f,c
  3254  0004DE                     	if	0	;tblptru may be non-zero
  3255  0004DE                     	endif
  3256  0004DE                     	if	0	;tblptru may be non-zero
  3257  0004DE                     	endif
  3258  0004DE  0008               	tblrd		*
  3259  0004E0  CFF5 F0FF          	movff	tablat,printf@c
  3260  0004E4  0100               	movlb	0	; () banked
  3261  0004E6  51FF               	movf	printf@c& (0+255),w,b
  3262  0004E8  B4D8               	btfsc	status,2,c
  3263  0004EA  D002               	goto	l683
  3264  0004EC  D59E               	goto	l4917
  3265                           
  3266                           ; BSR set to: 0
  3267  0004EE  D000               	goto	l683
  3268  0004F0                     l683:
  3269  0004F0  0012               	return		;funcret
  3270  0004F2                     __end_of_printf:
  3271                           	opt stack 0
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           intcon	equ	0xFF2
  3279                           intcon2	equ	0xFF1
  3280                           postinc0	equ	0xFEE
  3281                           wreg	equ	0xFE8
  3282                           postdec1	equ	0xFE5
  3283                           fsr1l	equ	0xFE1
  3284                           indf2	equ	0xFDF
  3285                           postinc2	equ	0xFDE
  3286                           postdec2	equ	0xFDD
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _putch *****************
  3292 ;; Defined at:
  3293 ;;		line 208 in file "lab11t.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  c               1    wreg     unsigned char 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  c               1   16[COMRAM] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;		None               void
  3300 ;; Registers used:
  3301 ;;		wreg
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;Total ram usage:        1 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    3
  3314 ;; This function calls:
  3315 ;;		Nothing
  3316 ;; This function is called by:
  3317 ;;		_printf
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text2
  3322  001B2E                     __ptext2:
  3323                           	opt stack 0
  3324  001B2E                     _putch:
  3325                           	opt stack 26
  3326                           
  3327                           ;incstack = 0
  3328                           ;putch@c stored from wreg
  3329  001B2E  6E11               	movwf	putch@c,c
  3330                           
  3331                           ;lab11t.c: 210: while (!TRMT);
  3332  001B30  D000               	goto	l584
  3333  001B32                     l584:
  3334  001B32  A2AC               	btfss	4012,1,c	;volatile
  3335  001B34  D7FE               	goto	l584
  3336                           
  3337                           ;lab11t.c: 211: TXREG = c;
  3338  001B36  C011  FFAD         	movff	putch@c,4013	;volatile
  3339  001B3A  0012               	return		;funcret
  3340  001B3C                     __end_of_putch:
  3341                           	opt stack 0
  3342                           tblptru	equ	0xFF8
  3343                           tblptrh	equ	0xFF7
  3344                           tblptrl	equ	0xFF6
  3345                           tablat	equ	0xFF5
  3346                           prodh	equ	0xFF4
  3347                           prodl	equ	0xFF3
  3348                           intcon	equ	0xFF2
  3349                           intcon2	equ	0xFF1
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           postdec1	equ	0xFE5
  3353                           fsr1l	equ	0xFE1
  3354                           indf2	equ	0xFDF
  3355                           postinc2	equ	0xFDE
  3356                           postdec2	equ	0xFDD
  3357                           fsr2h	equ	0xFDA
  3358                           fsr2l	equ	0xFD9
  3359                           status	equ	0xFD8
  3360                           
  3361 ;; *************** function _isdigit *****************
  3362 ;; Defined at:
  3363 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;  c               1    wreg     unsigned char 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;  c               1   18[COMRAM] unsigned char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;		None               void
  3370 ;; Registers used:
  3371 ;;		wreg, status,2, status,0
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;Total ram usage:        3 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    3
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_printf
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text3
  3392  0019C6                     __ptext3:
  3393                           	opt stack 0
  3394  0019C6                     _isdigit:
  3395                           	opt stack 26
  3396                           
  3397                           ;incstack = 0
  3398                           ;isdigit@c stored from wreg
  3399  0019C6  6E13               	movwf	isdigit@c,c
  3400  0019C8  0E00               	movlw	0
  3401  0019CA  6E12               	movwf	_isdigit$1978,c
  3402  0019CC  0E3A               	movlw	58
  3403  0019CE  6013               	cpfslt	isdigit@c,c
  3404  0019D0  D006               	goto	l4693
  3405  0019D2  0E2F               	movlw	47
  3406  0019D4  6413               	cpfsgt	isdigit@c,c
  3407  0019D6  D003               	goto	l4693
  3408  0019D8  0E01               	movlw	1
  3409  0019DA  6E12               	movwf	_isdigit$1978,c
  3410  0019DC  D000               	goto	l4693
  3411  0019DE                     l4693:
  3412  0019DE  C012  F011         	movff	_isdigit$1978,??_isdigit
  3413  0019E2  3011               	rrcf	??_isdigit,w,c
  3414  0019E4  D000               	goto	l1150
  3415  0019E6                     l1150:
  3416  0019E6  0012               	return		;funcret
  3417  0019E8                     __end_of_isdigit:
  3418                           	opt stack 0
  3419                           tblptru	equ	0xFF8
  3420                           tblptrh	equ	0xFF7
  3421                           tblptrl	equ	0xFF6
  3422                           tablat	equ	0xFF5
  3423                           prodh	equ	0xFF4
  3424                           prodl	equ	0xFF3
  3425                           intcon	equ	0xFF2
  3426                           intcon2	equ	0xFF1
  3427                           postinc0	equ	0xFEE
  3428                           wreg	equ	0xFE8
  3429                           postdec1	equ	0xFE5
  3430                           fsr1l	equ	0xFE1
  3431                           indf2	equ	0xFDF
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function ___llmod *****************
  3439 ;; Defined at:
  3440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  dividend        4   29[COMRAM] unsigned long 
  3443 ;;  divisor         4   33[COMRAM] unsigned long 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  counter         1   37[COMRAM] unsigned char 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  4   29[COMRAM] unsigned long 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:        9 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    3
  3462 ;; This function calls:
  3463 ;;		Nothing
  3464 ;; This function is called by:
  3465 ;;		_printf
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text4
  3470  001468                     __ptext4:
  3471                           	opt stack 0
  3472  001468                     ___llmod:
  3473                           	opt stack 26
  3474                           
  3475                           ;incstack = 0
  3476  001468  5022               	movf	___llmod@divisor,w,c
  3477  00146A  1023               	iorwf	___llmod@divisor+1,w,c
  3478  00146C  1024               	iorwf	___llmod@divisor+2,w,c
  3479  00146E  1025               	iorwf	___llmod@divisor+3,w,c
  3480  001470  B4D8               	btfsc	status,2,c
  3481  001472  D029               	goto	l1189
  3482  001474  0E01               	movlw	1
  3483  001476  6E26               	movwf	___llmod@counter,c
  3484  001478  D007               	goto	l4725
  3485  00147A                     l4723:
  3486  00147A  90D8               	bcf	status,0,c
  3487  00147C  3622               	rlcf	___llmod@divisor,f,c
  3488  00147E  3623               	rlcf	___llmod@divisor+1,f,c
  3489  001480  3624               	rlcf	___llmod@divisor+2,f,c
  3490  001482  3625               	rlcf	___llmod@divisor+3,f,c
  3491  001484  2A26               	incf	___llmod@counter,f,c
  3492  001486  D000               	goto	l4725
  3493  001488                     l4725:
  3494  001488  BE25               	btfsc	___llmod@divisor+3,7,c
  3495  00148A  D002               	goto	l4727
  3496  00148C  D7F6               	goto	l4723
  3497  00148E  D000               	goto	l4727
  3498  001490                     l4727:
  3499  001490  5022               	movf	___llmod@divisor,w,c
  3500  001492  5C1E               	subwf	___llmod@dividend,w,c
  3501  001494  5023               	movf	___llmod@divisor+1,w,c
  3502  001496  581F               	subwfb	___llmod@dividend+1,w,c
  3503  001498  5024               	movf	___llmod@divisor+2,w,c
  3504  00149A  5820               	subwfb	___llmod@dividend+2,w,c
  3505  00149C  5025               	movf	___llmod@divisor+3,w,c
  3506  00149E  5821               	subwfb	___llmod@dividend+3,w,c
  3507  0014A0  A0D8               	btfss	status,0,c
  3508  0014A2  D009               	goto	l4731
  3509  0014A4  5022               	movf	___llmod@divisor,w,c
  3510  0014A6  5E1E               	subwf	___llmod@dividend,f,c
  3511  0014A8  5023               	movf	___llmod@divisor+1,w,c
  3512  0014AA  5A1F               	subwfb	___llmod@dividend+1,f,c
  3513  0014AC  5024               	movf	___llmod@divisor+2,w,c
  3514  0014AE  5A20               	subwfb	___llmod@dividend+2,f,c
  3515  0014B0  5025               	movf	___llmod@divisor+3,w,c
  3516  0014B2  5A21               	subwfb	___llmod@dividend+3,f,c
  3517  0014B4  D000               	goto	l4731
  3518  0014B6                     l4731:
  3519  0014B6  90D8               	bcf	status,0,c
  3520  0014B8  3225               	rrcf	___llmod@divisor+3,f,c
  3521  0014BA  3224               	rrcf	___llmod@divisor+2,f,c
  3522  0014BC  3223               	rrcf	___llmod@divisor+1,f,c
  3523  0014BE  3222               	rrcf	___llmod@divisor,f,c
  3524  0014C0  2E26               	decfsz	___llmod@counter,f,c
  3525  0014C2  D7E6               	goto	l4727
  3526  0014C4  D000               	goto	l1189
  3527  0014C6                     l1189:
  3528  0014C6  C01E  F01E         	movff	___llmod@dividend,?___llmod
  3529  0014CA  C01F  F01F         	movff	___llmod@dividend+1,?___llmod+1
  3530  0014CE  C020  F020         	movff	___llmod@dividend+2,?___llmod+2
  3531  0014D2  C021  F021         	movff	___llmod@dividend+3,?___llmod+3
  3532  0014D6  0012               	return		;funcret
  3533  0014D8                     __end_of___llmod:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           intcon2	equ	0xFF1
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           postdec1	equ	0xFE5
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function ___lldiv *****************
  3555 ;; Defined at:
  3556 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  dividend        4   16[COMRAM] unsigned long 
  3559 ;;  divisor         4   20[COMRAM] unsigned long 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;  quotient        4   24[COMRAM] unsigned long 
  3562 ;;  counter         1   28[COMRAM] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  4   16[COMRAM] unsigned long 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3572 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;Total ram usage:       13 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    3
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_printf
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text5
  3587  0011E0                     __ptext5:
  3588                           	opt stack 0
  3589  0011E0                     ___lldiv:
  3590                           	opt stack 26
  3591                           
  3592                           ;incstack = 0
  3593  0011E0  0E00               	movlw	0
  3594  0011E2  6E19               	movwf	___lldiv@quotient,c
  3595  0011E4  0E00               	movlw	0
  3596  0011E6  6E1A               	movwf	___lldiv@quotient+1,c
  3597  0011E8  0E00               	movlw	0
  3598  0011EA  6E1B               	movwf	___lldiv@quotient+2,c
  3599  0011EC  0E00               	movlw	0
  3600  0011EE  6E1C               	movwf	___lldiv@quotient+3,c
  3601  0011F0  5015               	movf	___lldiv@divisor,w,c
  3602  0011F2  1016               	iorwf	___lldiv@divisor+1,w,c
  3603  0011F4  1017               	iorwf	___lldiv@divisor+2,w,c
  3604  0011F6  1018               	iorwf	___lldiv@divisor+3,w,c
  3605  0011F8  B4D8               	btfsc	status,2,c
  3606  0011FA  D02F               	goto	l1179
  3607  0011FC  0E01               	movlw	1
  3608  0011FE  6E1D               	movwf	___lldiv@counter,c
  3609  001200  D007               	goto	l4705
  3610  001202                     l4703:
  3611  001202  90D8               	bcf	status,0,c
  3612  001204  3615               	rlcf	___lldiv@divisor,f,c
  3613  001206  3616               	rlcf	___lldiv@divisor+1,f,c
  3614  001208  3617               	rlcf	___lldiv@divisor+2,f,c
  3615  00120A  3618               	rlcf	___lldiv@divisor+3,f,c
  3616  00120C  2A1D               	incf	___lldiv@counter,f,c
  3617  00120E  D000               	goto	l4705
  3618  001210                     l4705:
  3619  001210  BE18               	btfsc	___lldiv@divisor+3,7,c
  3620  001212  D002               	goto	l4707
  3621  001214  D7F6               	goto	l4703
  3622  001216  D000               	goto	l4707
  3623  001218                     l4707:
  3624  001218  90D8               	bcf	status,0,c
  3625  00121A  3619               	rlcf	___lldiv@quotient,f,c
  3626  00121C  361A               	rlcf	___lldiv@quotient+1,f,c
  3627  00121E  361B               	rlcf	___lldiv@quotient+2,f,c
  3628  001220  361C               	rlcf	___lldiv@quotient+3,f,c
  3629  001222  5015               	movf	___lldiv@divisor,w,c
  3630  001224  5C11               	subwf	___lldiv@dividend,w,c
  3631  001226  5016               	movf	___lldiv@divisor+1,w,c
  3632  001228  5812               	subwfb	___lldiv@dividend+1,w,c
  3633  00122A  5017               	movf	___lldiv@divisor+2,w,c
  3634  00122C  5813               	subwfb	___lldiv@dividend+2,w,c
  3635  00122E  5018               	movf	___lldiv@divisor+3,w,c
  3636  001230  5814               	subwfb	___lldiv@dividend+3,w,c
  3637  001232  A0D8               	btfss	status,0,c
  3638  001234  D00A               	goto	l4715
  3639  001236  5015               	movf	___lldiv@divisor,w,c
  3640  001238  5E11               	subwf	___lldiv@dividend,f,c
  3641  00123A  5016               	movf	___lldiv@divisor+1,w,c
  3642  00123C  5A12               	subwfb	___lldiv@dividend+1,f,c
  3643  00123E  5017               	movf	___lldiv@divisor+2,w,c
  3644  001240  5A13               	subwfb	___lldiv@dividend+2,f,c
  3645  001242  5018               	movf	___lldiv@divisor+3,w,c
  3646  001244  5A14               	subwfb	___lldiv@dividend+3,f,c
  3647  001246  8019               	bsf	___lldiv@quotient,0,c
  3648  001248  D000               	goto	l4715
  3649  00124A                     l4715:
  3650  00124A  90D8               	bcf	status,0,c
  3651  00124C  3218               	rrcf	___lldiv@divisor+3,f,c
  3652  00124E  3217               	rrcf	___lldiv@divisor+2,f,c
  3653  001250  3216               	rrcf	___lldiv@divisor+1,f,c
  3654  001252  3215               	rrcf	___lldiv@divisor,f,c
  3655  001254  2E1D               	decfsz	___lldiv@counter,f,c
  3656  001256  D7E0               	goto	l4707
  3657  001258  D000               	goto	l1179
  3658  00125A                     l1179:
  3659  00125A  C019  F011         	movff	___lldiv@quotient,?___lldiv
  3660  00125E  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  3661  001262  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  3662  001266  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  3663  00126A  0012               	return		;funcret
  3664  00126C                     __end_of___lldiv:
  3665                           	opt stack 0
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           intcon2	equ	0xFF1
  3674                           postinc0	equ	0xFEE
  3675                           wreg	equ	0xFE8
  3676                           postdec1	equ	0xFE5
  3677                           fsr1l	equ	0xFE1
  3678                           indf2	equ	0xFDF
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function _fillCircle *****************
  3686 ;; Defined at:
  3687 ;;		line 614 in file "ST7735_TFT.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  x0              2   58[COMRAM] int 
  3690 ;;  y0              2   60[COMRAM] int 
  3691 ;;  r               2   62[COMRAM] int 
  3692 ;;  color           2   64[COMRAM] unsigned int 
  3693 ;; Auto vars:     Size  Location     Type
  3694 ;;		None
  3695 ;; Return value:  Size  Location     Type
  3696 ;;		None               void
  3697 ;; Registers used:
  3698 ;;		wreg, status,2, status,0, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3704 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;Total ram usage:        8 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; Hardware stack levels required when called:    8
  3711 ;; This function calls:
  3712 ;;		_drawFastVLine
  3713 ;;		_fillCircleHelper
  3714 ;; This function is called by:
  3715 ;;		_main
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text6
  3720  00165C                     __ptext6:
  3721                           	opt stack 0
  3722  00165C                     _fillCircle:
  3723                           	opt stack 22
  3724                           
  3725                           ;ST7735_TFT.c: 616: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  3726                           
  3727                           ;incstack = 0
  3728  00165C  503F               	movf	fillCircle@r,w,c
  3729  00165E  0800               	sublw	0
  3730  001660  243D               	addwf	fillCircle@y0,w,c
  3731  001662  6E18               	movwf	drawFastVLine@y,c
  3732  001664  80D8               	bsf	status,0,c
  3733  001666  343F               	rlcf	fillCircle@r,w,c
  3734  001668  6E19               	movwf	drawFastVLine@h,c
  3735  00166A  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  3736  00166E  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  3737  001672  503B               	movf	fillCircle@x0,w,c
  3738  001674  EC36  F009         	call	_drawFastVLine
  3739                           
  3740                           ;ST7735_TFT.c: 617: fillCircleHelper(x0, y0, r, 3, 0, color);
  3741  001678  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  3742  00167C  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  3743  001680  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  3744  001684  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  3745  001688  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  3746  00168C  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  3747  001690  0E00               	movlw	0
  3748  001692  6E2A               	movwf	fillCircleHelper@cornername+1,c
  3749  001694  0E03               	movlw	3
  3750  001696  6E29               	movwf	fillCircleHelper@cornername,c
  3751  001698  0E00               	movlw	0
  3752  00169A  6E2C               	movwf	fillCircleHelper@delta+1,c
  3753  00169C  0E00               	movlw	0
  3754  00169E  6E2B               	movwf	fillCircleHelper@delta,c
  3755  0016A0  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  3756  0016A4  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  3757  0016A8  ECCE  F005         	call	_fillCircleHelper	;wreg free
  3758  0016AC  0012               	return		;funcret
  3759  0016AE                     __end_of_fillCircle:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           intcon	equ	0xFF2
  3768                           intcon2	equ	0xFF1
  3769                           postinc0	equ	0xFEE
  3770                           wreg	equ	0xFE8
  3771                           postdec1	equ	0xFE5
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           postinc2	equ	0xFDE
  3775                           postdec2	equ	0xFDD
  3776                           fsr2h	equ	0xFDA
  3777                           fsr2l	equ	0xFD9
  3778                           status	equ	0xFD8
  3779                           
  3780 ;; *************** function _fillCircleHelper *****************
  3781 ;; Defined at:
  3782 ;;		line 589 in file "ST7735_TFT.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;  x0              2   34[COMRAM] int 
  3785 ;;  y0              2   36[COMRAM] int 
  3786 ;;  r               2   38[COMRAM] int 
  3787 ;;  cornername      2   40[COMRAM] unsigned int 
  3788 ;;  delta           2   42[COMRAM] int 
  3789 ;;  color           2   44[COMRAM] unsigned int 
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;  y               2   56[COMRAM] int 
  3792 ;;  x               2   54[COMRAM] int 
  3793 ;;  f               2   52[COMRAM] int 
  3794 ;;  ddF_y           2   50[COMRAM] int 
  3795 ;;  ddF_x           2   48[COMRAM] int 
  3796 ;; Return value:  Size  Location     Type
  3797 ;;		None               void
  3798 ;; Registers used:
  3799 ;;		wreg, status,2, status,0, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3805 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;Total ram usage:       24 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    7
  3812 ;; This function calls:
  3813 ;;		_drawFastVLine
  3814 ;; This function is called by:
  3815 ;;		_fillCircle
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text7
  3820  000B9C                     __ptext7:
  3821                           	opt stack 0
  3822  000B9C                     _fillCircleHelper:
  3823                           	opt stack 22
  3824                           
  3825                           ;ST7735_TFT.c: 591: signed int f, ddF_x, ddF_y, x, y;
  3826                           ;ST7735_TFT.c: 592: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3827                           
  3828                           ;incstack = 0
  3829  000B9C  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3830  000BA0  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3831  000BA4  1E2F               	comf	??_fillCircleHelper,f,c
  3832  000BA6  1E30               	comf	??_fillCircleHelper+1,f,c
  3833  000BA8  4A2F               	infsnz	??_fillCircleHelper,f,c
  3834  000BAA  2A30               	incf	??_fillCircleHelper+1,f,c
  3835  000BAC  0E01               	movlw	1
  3836  000BAE  242F               	addwf	??_fillCircleHelper,w,c
  3837  000BB0  6E35               	movwf	fillCircleHelper@f,c
  3838  000BB2  0E00               	movlw	0
  3839  000BB4  2030               	addwfc	??_fillCircleHelper+1,w,c
  3840  000BB6  6E36               	movwf	fillCircleHelper@f+1,c
  3841  000BB8  0E00               	movlw	0
  3842  000BBA  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  3843  000BBC  0E01               	movlw	1
  3844  000BBE  6E31               	movwf	fillCircleHelper@ddF_x,c
  3845  000BC0  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  3846  000BC4  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  3847  000BC8  90D8               	bcf	status,0,c
  3848  000BCA  362F               	rlcf	??_fillCircleHelper,f,c
  3849  000BCC  3630               	rlcf	??_fillCircleHelper+1,f,c
  3850  000BCE  1E2F               	comf	??_fillCircleHelper,f,c
  3851  000BD0  1E30               	comf	??_fillCircleHelper+1,f,c
  3852  000BD2  4A2F               	infsnz	??_fillCircleHelper,f,c
  3853  000BD4  2A30               	incf	??_fillCircleHelper+1,f,c
  3854  000BD6  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  3855  000BDA  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  3856  000BDE  0E00               	movlw	0
  3857  000BE0  6E38               	movwf	fillCircleHelper@x+1,c
  3858  000BE2  0E00               	movlw	0
  3859  000BE4  6E37               	movwf	fillCircleHelper@x,c
  3860  000BE6  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  3861  000BEA  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  3862                           
  3863                           ;ST7735_TFT.c: 593: while (x<y) {
  3864  000BEE  D067               	goto	l4651
  3865  000BF0                     l4631:
  3866                           
  3867                           ;ST7735_TFT.c: 594: if (f >= 0) {
  3868  000BF0  BE36               	btfsc	fillCircleHelper@f+1,7,c
  3869  000BF2  D00B               	goto	l366
  3870                           
  3871                           ;ST7735_TFT.c: 595: y--;
  3872  000BF4  0639               	decf	fillCircleHelper@y,f,c
  3873  000BF6  A0D8               	btfss	status,0,c
  3874  000BF8  063A               	decf	fillCircleHelper@y+1,f,c
  3875                           
  3876                           ;ST7735_TFT.c: 596: ddF_y += 2;
  3877  000BFA  0E02               	movlw	2
  3878  000BFC  2633               	addwf	fillCircleHelper@ddF_y,f,c
  3879  000BFE  0E00               	movlw	0
  3880  000C00  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  3881                           
  3882                           ;ST7735_TFT.c: 597: f += ddF_y;
  3883  000C02  5033               	movf	fillCircleHelper@ddF_y,w,c
  3884  000C04  2635               	addwf	fillCircleHelper@f,f,c
  3885  000C06  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3886  000C08  2236               	addwfc	fillCircleHelper@f+1,f,c
  3887  000C0A                     l366:
  3888                           
  3889                           ;ST7735_TFT.c: 598: }
  3890                           ;ST7735_TFT.c: 599: x++;
  3891  000C0A  4A37               	infsnz	fillCircleHelper@x,f,c
  3892  000C0C  2A38               	incf	fillCircleHelper@x+1,f,c
  3893                           
  3894                           ;ST7735_TFT.c: 600: ddF_x += 2;
  3895  000C0E  0E02               	movlw	2
  3896  000C10  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3897  000C12  0E00               	movlw	0
  3898  000C14  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3899                           
  3900                           ;ST7735_TFT.c: 601: f += ddF_x;
  3901  000C16  5031               	movf	fillCircleHelper@ddF_x,w,c
  3902  000C18  2635               	addwf	fillCircleHelper@f,f,c
  3903  000C1A  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3904  000C1C  2236               	addwfc	fillCircleHelper@f+1,f,c
  3905                           
  3906                           ;ST7735_TFT.c: 603: if (cornername & 0x1) {
  3907  000C1E  A029               	btfss	fillCircleHelper@cornername,0,c
  3908  000C20  D025               	goto	l4647
  3909                           
  3910                           ;ST7735_TFT.c: 604: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3911  000C22  5039               	movf	fillCircleHelper@y,w,c
  3912  000C24  0800               	sublw	0
  3913  000C26  2425               	addwf	fillCircleHelper@y0,w,c
  3914  000C28  6E18               	movwf	drawFastVLine@y,c
  3915  000C2A  5039               	movf	fillCircleHelper@y,w,c
  3916  000C2C  2439               	addwf	fillCircleHelper@y,w,c
  3917  000C2E  242B               	addwf	fillCircleHelper@delta,w,c
  3918  000C30  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3919  000C32  282F               	incf	??_fillCircleHelper,w,c
  3920  000C34  6E19               	movwf	drawFastVLine@h,c
  3921  000C36  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3922  000C3A  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3923  000C3E  5023               	movf	fillCircleHelper@x0,w,c
  3924  000C40  2437               	addwf	fillCircleHelper@x,w,c
  3925  000C42  EC36  F009         	call	_drawFastVLine
  3926                           
  3927                           ;ST7735_TFT.c: 605: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3928  000C46  5037               	movf	fillCircleHelper@x,w,c
  3929  000C48  0800               	sublw	0
  3930  000C4A  2425               	addwf	fillCircleHelper@y0,w,c
  3931  000C4C  6E18               	movwf	drawFastVLine@y,c
  3932  000C4E  5037               	movf	fillCircleHelper@x,w,c
  3933  000C50  2437               	addwf	fillCircleHelper@x,w,c
  3934  000C52  242B               	addwf	fillCircleHelper@delta,w,c
  3935  000C54  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3936  000C56  282F               	incf	??_fillCircleHelper,w,c
  3937  000C58  6E19               	movwf	drawFastVLine@h,c
  3938  000C5A  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3939  000C5E  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3940  000C62  5023               	movf	fillCircleHelper@x0,w,c
  3941  000C64  2439               	addwf	fillCircleHelper@y,w,c
  3942  000C66  EC36  F009         	call	_drawFastVLine
  3943  000C6A  D000               	goto	l4647
  3944  000C6C                     l4647:
  3945                           
  3946                           ;ST7735_TFT.c: 606: }
  3947                           ;ST7735_TFT.c: 607: if (cornername & 0x2) {
  3948  000C6C  A229               	btfss	fillCircleHelper@cornername,1,c
  3949  000C6E  D027               	goto	l4651
  3950                           
  3951                           ;ST7735_TFT.c: 608: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3952  000C70  5039               	movf	fillCircleHelper@y,w,c
  3953  000C72  0800               	sublw	0
  3954  000C74  2425               	addwf	fillCircleHelper@y0,w,c
  3955  000C76  6E18               	movwf	drawFastVLine@y,c
  3956  000C78  5039               	movf	fillCircleHelper@y,w,c
  3957  000C7A  2439               	addwf	fillCircleHelper@y,w,c
  3958  000C7C  242B               	addwf	fillCircleHelper@delta,w,c
  3959  000C7E  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3960  000C80  282F               	incf	??_fillCircleHelper,w,c
  3961  000C82  6E19               	movwf	drawFastVLine@h,c
  3962  000C84  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3963  000C88  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3964  000C8C  5037               	movf	fillCircleHelper@x,w,c
  3965  000C8E  0800               	sublw	0
  3966  000C90  2423               	addwf	fillCircleHelper@x0,w,c
  3967  000C92  EC36  F009         	call	_drawFastVLine
  3968                           
  3969                           ;ST7735_TFT.c: 609: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3970  000C96  5037               	movf	fillCircleHelper@x,w,c
  3971  000C98  0800               	sublw	0
  3972  000C9A  2425               	addwf	fillCircleHelper@y0,w,c
  3973  000C9C  6E18               	movwf	drawFastVLine@y,c
  3974  000C9E  5037               	movf	fillCircleHelper@x,w,c
  3975  000CA0  2437               	addwf	fillCircleHelper@x,w,c
  3976  000CA2  242B               	addwf	fillCircleHelper@delta,w,c
  3977  000CA4  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3978  000CA6  282F               	incf	??_fillCircleHelper,w,c
  3979  000CA8  6E19               	movwf	drawFastVLine@h,c
  3980  000CAA  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3981  000CAE  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3982  000CB2  5039               	movf	fillCircleHelper@y,w,c
  3983  000CB4  0800               	sublw	0
  3984  000CB6  2423               	addwf	fillCircleHelper@x0,w,c
  3985  000CB8  EC36  F009         	call	_drawFastVLine
  3986  000CBC  D000               	goto	l4651
  3987  000CBE                     l4651:
  3988  000CBE  5039               	movf	fillCircleHelper@y,w,c
  3989  000CC0  5C37               	subwf	fillCircleHelper@x,w,c
  3990  000CC2  5038               	movf	fillCircleHelper@x+1,w,c
  3991  000CC4  0A80               	xorlw	128
  3992  000CC6  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3993  000CC8  503A               	movf	fillCircleHelper@y+1,w,c
  3994  000CCA  0A80               	xorlw	128
  3995  000CCC  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3996  000CCE  A0D8               	btfss	status,0,c
  3997  000CD0  D78F               	goto	l4631
  3998  000CD2  0012               	return		;funcret
  3999  000CD4                     __end_of_fillCircleHelper:
  4000                           	opt stack 0
  4001                           tblptru	equ	0xFF8
  4002                           tblptrh	equ	0xFF7
  4003                           tblptrl	equ	0xFF6
  4004                           tablat	equ	0xFF5
  4005                           prodh	equ	0xFF4
  4006                           prodl	equ	0xFF3
  4007                           intcon	equ	0xFF2
  4008                           intcon2	equ	0xFF1
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1l	equ	0xFE1
  4013                           indf2	equ	0xFDF
  4014                           postinc2	equ	0xFDE
  4015                           postdec2	equ	0xFDD
  4016                           fsr2h	equ	0xFDA
  4017                           fsr2l	equ	0xFD9
  4018                           status	equ	0xFD8
  4019                           
  4020 ;; *************** function _drawCircle *****************
  4021 ;; Defined at:
  4022 ;;		line 528 in file "ST7735_TFT.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;  x0              2   27[COMRAM] int 
  4025 ;;  y0              2   29[COMRAM] int 
  4026 ;;  r               2   31[COMRAM] int 
  4027 ;;  color           2   33[COMRAM] unsigned int 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  y               2   45[COMRAM] int 
  4030 ;;  x               2   43[COMRAM] int 
  4031 ;;  f               2   41[COMRAM] int 
  4032 ;;  ddF_y           2   39[COMRAM] int 
  4033 ;;  ddF_x           2   37[COMRAM] int 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;		None               void
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:       20 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    7
  4050 ;; This function calls:
  4051 ;;		_drawPixel
  4052 ;; This function is called by:
  4053 ;;		_main
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text8
  4058  000740                     __ptext8:
  4059                           	opt stack 0
  4060  000740                     _drawCircle:
  4061                           	opt stack 23
  4062                           
  4063                           ;ST7735_TFT.c: 530: signed int f, ddF_x, ddF_y, x, y;
  4064                           ;ST7735_TFT.c: 531: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  4065                           
  4066                           ;incstack = 0
  4067  000740  C020  F024         	movff	drawCircle@r,??_drawCircle
  4068  000744  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  4069  000748  1E24               	comf	??_drawCircle,f,c
  4070  00074A  1E25               	comf	??_drawCircle+1,f,c
  4071  00074C  4A24               	infsnz	??_drawCircle,f,c
  4072  00074E  2A25               	incf	??_drawCircle+1,f,c
  4073  000750  0E01               	movlw	1
  4074  000752  2424               	addwf	??_drawCircle,w,c
  4075  000754  6E2A               	movwf	drawCircle@f,c
  4076  000756  0E00               	movlw	0
  4077  000758  2025               	addwfc	??_drawCircle+1,w,c
  4078  00075A  6E2B               	movwf	drawCircle@f+1,c
  4079  00075C  0E00               	movlw	0
  4080  00075E  6E27               	movwf	drawCircle@ddF_x+1,c
  4081  000760  0E01               	movlw	1
  4082  000762  6E26               	movwf	drawCircle@ddF_x,c
  4083  000764  C020  F024         	movff	drawCircle@r,??_drawCircle
  4084  000768  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  4085  00076C  90D8               	bcf	status,0,c
  4086  00076E  3624               	rlcf	??_drawCircle,f,c
  4087  000770  3625               	rlcf	??_drawCircle+1,f,c
  4088  000772  1E24               	comf	??_drawCircle,f,c
  4089  000774  1E25               	comf	??_drawCircle+1,f,c
  4090  000776  4A24               	infsnz	??_drawCircle,f,c
  4091  000778  2A25               	incf	??_drawCircle+1,f,c
  4092  00077A  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  4093  00077E  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  4094  000782  0E00               	movlw	0
  4095  000784  6E2D               	movwf	drawCircle@x+1,c
  4096  000786  0E00               	movlw	0
  4097  000788  6E2C               	movwf	drawCircle@x,c
  4098  00078A  C020  F02E         	movff	drawCircle@r,drawCircle@y
  4099  00078E  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  4100                           
  4101                           ;ST7735_TFT.c: 532: drawPixel(x0 , y0 + r, color);
  4102  000792  501E               	movf	drawCircle@y0,w,c
  4103  000794  2420               	addwf	drawCircle@r,w,c
  4104  000796  6E18               	movwf	drawPixel@y,c
  4105  000798  C022  F019         	movff	drawCircle@color,drawPixel@color
  4106  00079C  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4107  0007A0  501C               	movf	drawCircle@x0,w,c
  4108  0007A2  ECA2  F00C         	call	_drawPixel
  4109                           
  4110                           ;ST7735_TFT.c: 533: drawPixel(x0 , y0 - r, color);
  4111  0007A6  5020               	movf	drawCircle@r,w,c
  4112  0007A8  0800               	sublw	0
  4113  0007AA  241E               	addwf	drawCircle@y0,w,c
  4114  0007AC  6E18               	movwf	drawPixel@y,c
  4115  0007AE  C022  F019         	movff	drawCircle@color,drawPixel@color
  4116  0007B2  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4117  0007B6  501C               	movf	drawCircle@x0,w,c
  4118  0007B8  ECA2  F00C         	call	_drawPixel
  4119                           
  4120                           ;ST7735_TFT.c: 534: drawPixel(x0+r, y0 , color);
  4121  0007BC  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4122  0007C0  C022  F019         	movff	drawCircle@color,drawPixel@color
  4123  0007C4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4124  0007C8  501C               	movf	drawCircle@x0,w,c
  4125  0007CA  2420               	addwf	drawCircle@r,w,c
  4126  0007CC  ECA2  F00C         	call	_drawPixel
  4127                           
  4128                           ;ST7735_TFT.c: 535: drawPixel(x0-r, y0 , color);
  4129  0007D0  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  4130  0007D4  C022  F019         	movff	drawCircle@color,drawPixel@color
  4131  0007D8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4132  0007DC  5020               	movf	drawCircle@r,w,c
  4133  0007DE  0800               	sublw	0
  4134  0007E0  241C               	addwf	drawCircle@x0,w,c
  4135  0007E2  ECA2  F00C         	call	_drawPixel
  4136                           
  4137                           ;ST7735_TFT.c: 536: while (x < y) {
  4138  0007E6  D078               	goto	l4853
  4139  0007E8                     l4825:
  4140                           
  4141                           ;ST7735_TFT.c: 537: if (f >= 0) {
  4142  0007E8  BE2B               	btfsc	drawCircle@f+1,7,c
  4143  0007EA  D00B               	goto	l348
  4144                           
  4145                           ;ST7735_TFT.c: 538: y--;
  4146  0007EC  062E               	decf	drawCircle@y,f,c
  4147  0007EE  A0D8               	btfss	status,0,c
  4148  0007F0  062F               	decf	drawCircle@y+1,f,c
  4149                           
  4150                           ;ST7735_TFT.c: 539: ddF_y += 2;
  4151  0007F2  0E02               	movlw	2
  4152  0007F4  2628               	addwf	drawCircle@ddF_y,f,c
  4153  0007F6  0E00               	movlw	0
  4154  0007F8  2229               	addwfc	drawCircle@ddF_y+1,f,c
  4155                           
  4156                           ;ST7735_TFT.c: 540: f += ddF_y;
  4157  0007FA  5028               	movf	drawCircle@ddF_y,w,c
  4158  0007FC  262A               	addwf	drawCircle@f,f,c
  4159  0007FE  5029               	movf	drawCircle@ddF_y+1,w,c
  4160  000800  222B               	addwfc	drawCircle@f+1,f,c
  4161  000802                     l348:
  4162                           
  4163                           ;ST7735_TFT.c: 541: }
  4164                           ;ST7735_TFT.c: 542: x++;
  4165  000802  4A2C               	infsnz	drawCircle@x,f,c
  4166  000804  2A2D               	incf	drawCircle@x+1,f,c
  4167                           
  4168                           ;ST7735_TFT.c: 543: ddF_x += 2;
  4169  000806  0E02               	movlw	2
  4170  000808  2626               	addwf	drawCircle@ddF_x,f,c
  4171  00080A  0E00               	movlw	0
  4172  00080C  2227               	addwfc	drawCircle@ddF_x+1,f,c
  4173                           
  4174                           ;ST7735_TFT.c: 544: f += ddF_x;
  4175  00080E  5026               	movf	drawCircle@ddF_x,w,c
  4176  000810  262A               	addwf	drawCircle@f,f,c
  4177  000812  5027               	movf	drawCircle@ddF_x+1,w,c
  4178  000814  222B               	addwfc	drawCircle@f+1,f,c
  4179                           
  4180                           ;ST7735_TFT.c: 545: drawPixel(x0 + x, y0 + y, color);
  4181  000816  501E               	movf	drawCircle@y0,w,c
  4182  000818  242E               	addwf	drawCircle@y,w,c
  4183  00081A  6E18               	movwf	drawPixel@y,c
  4184  00081C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4185  000820  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4186  000824  501C               	movf	drawCircle@x0,w,c
  4187  000826  242C               	addwf	drawCircle@x,w,c
  4188  000828  ECA2  F00C         	call	_drawPixel
  4189                           
  4190                           ;ST7735_TFT.c: 546: drawPixel(x0 - x, y0 + y, color);
  4191  00082C  501E               	movf	drawCircle@y0,w,c
  4192  00082E  242E               	addwf	drawCircle@y,w,c
  4193  000830  6E18               	movwf	drawPixel@y,c
  4194  000832  C022  F019         	movff	drawCircle@color,drawPixel@color
  4195  000836  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4196  00083A  502C               	movf	drawCircle@x,w,c
  4197  00083C  0800               	sublw	0
  4198  00083E  241C               	addwf	drawCircle@x0,w,c
  4199  000840  ECA2  F00C         	call	_drawPixel
  4200                           
  4201                           ;ST7735_TFT.c: 547: drawPixel(x0 + x, y0 - y, color);
  4202  000844  502E               	movf	drawCircle@y,w,c
  4203  000846  0800               	sublw	0
  4204  000848  241E               	addwf	drawCircle@y0,w,c
  4205  00084A  6E18               	movwf	drawPixel@y,c
  4206  00084C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4207  000850  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4208  000854  501C               	movf	drawCircle@x0,w,c
  4209  000856  242C               	addwf	drawCircle@x,w,c
  4210  000858  ECA2  F00C         	call	_drawPixel
  4211                           
  4212                           ;ST7735_TFT.c: 548: drawPixel(x0 - x, y0 - y, color);
  4213  00085C  502E               	movf	drawCircle@y,w,c
  4214  00085E  0800               	sublw	0
  4215  000860  241E               	addwf	drawCircle@y0,w,c
  4216  000862  6E18               	movwf	drawPixel@y,c
  4217  000864  C022  F019         	movff	drawCircle@color,drawPixel@color
  4218  000868  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4219  00086C  502C               	movf	drawCircle@x,w,c
  4220  00086E  0800               	sublw	0
  4221  000870  241C               	addwf	drawCircle@x0,w,c
  4222  000872  ECA2  F00C         	call	_drawPixel
  4223                           
  4224                           ;ST7735_TFT.c: 549: drawPixel(x0 + y, y0 + x, color);
  4225  000876  501E               	movf	drawCircle@y0,w,c
  4226  000878  242C               	addwf	drawCircle@x,w,c
  4227  00087A  6E18               	movwf	drawPixel@y,c
  4228  00087C  C022  F019         	movff	drawCircle@color,drawPixel@color
  4229  000880  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4230  000884  501C               	movf	drawCircle@x0,w,c
  4231  000886  242E               	addwf	drawCircle@y,w,c
  4232  000888  ECA2  F00C         	call	_drawPixel
  4233                           
  4234                           ;ST7735_TFT.c: 550: drawPixel(x0 - y, y0 + x, color);
  4235  00088C  501E               	movf	drawCircle@y0,w,c
  4236  00088E  242C               	addwf	drawCircle@x,w,c
  4237  000890  6E18               	movwf	drawPixel@y,c
  4238  000892  C022  F019         	movff	drawCircle@color,drawPixel@color
  4239  000896  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4240  00089A  502E               	movf	drawCircle@y,w,c
  4241  00089C  0800               	sublw	0
  4242  00089E  241C               	addwf	drawCircle@x0,w,c
  4243  0008A0  ECA2  F00C         	call	_drawPixel
  4244                           
  4245                           ;ST7735_TFT.c: 551: drawPixel(x0 + y, y0 - x, color);
  4246  0008A4  502C               	movf	drawCircle@x,w,c
  4247  0008A6  0800               	sublw	0
  4248  0008A8  241E               	addwf	drawCircle@y0,w,c
  4249  0008AA  6E18               	movwf	drawPixel@y,c
  4250  0008AC  C022  F019         	movff	drawCircle@color,drawPixel@color
  4251  0008B0  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4252  0008B4  501C               	movf	drawCircle@x0,w,c
  4253  0008B6  242E               	addwf	drawCircle@y,w,c
  4254  0008B8  ECA2  F00C         	call	_drawPixel
  4255                           
  4256                           ;ST7735_TFT.c: 552: drawPixel(x0 - y, y0 - x, color);
  4257  0008BC  502C               	movf	drawCircle@x,w,c
  4258  0008BE  0800               	sublw	0
  4259  0008C0  241E               	addwf	drawCircle@y0,w,c
  4260  0008C2  6E18               	movwf	drawPixel@y,c
  4261  0008C4  C022  F019         	movff	drawCircle@color,drawPixel@color
  4262  0008C8  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  4263  0008CC  502E               	movf	drawCircle@y,w,c
  4264  0008CE  0800               	sublw	0
  4265  0008D0  241C               	addwf	drawCircle@x0,w,c
  4266  0008D2  ECA2  F00C         	call	_drawPixel
  4267  0008D6  D000               	goto	l4853
  4268  0008D8                     l4853:
  4269  0008D8  502E               	movf	drawCircle@y,w,c
  4270  0008DA  5C2C               	subwf	drawCircle@x,w,c
  4271  0008DC  502D               	movf	drawCircle@x+1,w,c
  4272  0008DE  0A80               	xorlw	128
  4273  0008E0  6E24               	movwf	??_drawCircle& (0+255),c
  4274  0008E2  502F               	movf	drawCircle@y+1,w,c
  4275  0008E4  0A80               	xorlw	128
  4276  0008E6  5824               	subwfb	??_drawCircle& (0+255),w,c
  4277  0008E8  A0D8               	btfss	status,0,c
  4278  0008EA  D77E               	goto	l4825
  4279  0008EC  0012               	return		;funcret
  4280  0008EE                     __end_of_drawCircle:
  4281                           	opt stack 0
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           intcon	equ	0xFF2
  4289                           intcon2	equ	0xFF1
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           postdec1	equ	0xFE5
  4293                           fsr1l	equ	0xFE1
  4294                           indf2	equ	0xFDF
  4295                           postinc2	equ	0xFDE
  4296                           postdec2	equ	0xFDD
  4297                           fsr2h	equ	0xFDA
  4298                           fsr2l	equ	0xFD9
  4299                           status	equ	0xFD8
  4300                           
  4301 ;; *************** function ___awdiv *****************
  4302 ;; Defined at:
  4303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  dividend        2   16[COMRAM] int 
  4306 ;;  divisor         2   18[COMRAM] int 
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  quotient        2   22[COMRAM] int 
  4309 ;;  sign            1   21[COMRAM] unsigned char 
  4310 ;;  counter         1   20[COMRAM] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  2   16[COMRAM] int 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:        8 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    3
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_main
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text9
  4335  0010BC                     __ptext9:
  4336                           	opt stack 0
  4337  0010BC                     ___awdiv:
  4338                           	opt stack 27
  4339                           
  4340                           ;incstack = 0
  4341  0010BC  0E00               	movlw	0
  4342  0010BE  6E16               	movwf	___awdiv@sign,c
  4343  0010C0  AE14               	btfss	___awdiv@divisor+1,7,c
  4344  0010C2  D007               	goto	l5077
  4345  0010C4  6C13               	negf	___awdiv@divisor,c
  4346  0010C6  1E14               	comf	___awdiv@divisor+1,f,c
  4347  0010C8  B0D8               	btfsc	status,0,c
  4348  0010CA  2A14               	incf	___awdiv@divisor+1,f,c
  4349  0010CC  0E01               	movlw	1
  4350  0010CE  6E16               	movwf	___awdiv@sign,c
  4351  0010D0  D000               	goto	l5077
  4352  0010D2                     l5077:
  4353  0010D2  AE12               	btfss	___awdiv@dividend+1,7,c
  4354  0010D4  D007               	goto	l5083
  4355  0010D6  6C11               	negf	___awdiv@dividend,c
  4356  0010D8  1E12               	comf	___awdiv@dividend+1,f,c
  4357  0010DA  B0D8               	btfsc	status,0,c
  4358  0010DC  2A12               	incf	___awdiv@dividend+1,f,c
  4359  0010DE  0E01               	movlw	1
  4360  0010E0  1A16               	xorwf	___awdiv@sign,f,c
  4361  0010E2  D000               	goto	l5083
  4362  0010E4                     l5083:
  4363  0010E4  0E00               	movlw	0
  4364  0010E6  6E18               	movwf	___awdiv@quotient+1,c
  4365  0010E8  0E00               	movlw	0
  4366  0010EA  6E17               	movwf	___awdiv@quotient,c
  4367  0010EC  5013               	movf	___awdiv@divisor,w,c
  4368  0010EE  1014               	iorwf	___awdiv@divisor+1,w,c
  4369  0010F0  B4D8               	btfsc	status,2,c
  4370  0010F2  D021               	goto	l5105
  4371  0010F4  0E01               	movlw	1
  4372  0010F6  6E15               	movwf	___awdiv@counter,c
  4373  0010F8  D005               	goto	l5091
  4374  0010FA                     l5089:
  4375  0010FA  90D8               	bcf	status,0,c
  4376  0010FC  3613               	rlcf	___awdiv@divisor,f,c
  4377  0010FE  3614               	rlcf	___awdiv@divisor+1,f,c
  4378  001100  2A15               	incf	___awdiv@counter,f,c
  4379  001102  D000               	goto	l5091
  4380  001104                     l5091:
  4381  001104  BE14               	btfsc	___awdiv@divisor+1,7,c
  4382  001106  D002               	goto	l5093
  4383  001108  D7F8               	goto	l5089
  4384  00110A  D000               	goto	l5093
  4385  00110C                     l5093:
  4386  00110C  90D8               	bcf	status,0,c
  4387  00110E  3617               	rlcf	___awdiv@quotient,f,c
  4388  001110  3618               	rlcf	___awdiv@quotient+1,f,c
  4389  001112  5013               	movf	___awdiv@divisor,w,c
  4390  001114  5C11               	subwf	___awdiv@dividend,w,c
  4391  001116  5014               	movf	___awdiv@divisor+1,w,c
  4392  001118  5812               	subwfb	___awdiv@dividend+1,w,c
  4393  00111A  A0D8               	btfss	status,0,c
  4394  00111C  D006               	goto	l5101
  4395  00111E  5013               	movf	___awdiv@divisor,w,c
  4396  001120  5E11               	subwf	___awdiv@dividend,f,c
  4397  001122  5014               	movf	___awdiv@divisor+1,w,c
  4398  001124  5A12               	subwfb	___awdiv@dividend+1,f,c
  4399  001126  8017               	bsf	___awdiv@quotient,0,c
  4400  001128  D000               	goto	l5101
  4401  00112A                     l5101:
  4402  00112A  90D8               	bcf	status,0,c
  4403  00112C  3214               	rrcf	___awdiv@divisor+1,f,c
  4404  00112E  3213               	rrcf	___awdiv@divisor,f,c
  4405  001130  2E15               	decfsz	___awdiv@counter,f,c
  4406  001132  D7EC               	goto	l5093
  4407  001134  D000               	goto	l5105
  4408  001136                     l5105:
  4409  001136  5016               	movf	___awdiv@sign,w,c
  4410  001138  B4D8               	btfsc	status,2,c
  4411  00113A  D005               	goto	l5109
  4412  00113C  6C17               	negf	___awdiv@quotient,c
  4413  00113E  1E18               	comf	___awdiv@quotient+1,f,c
  4414  001140  B0D8               	btfsc	status,0,c
  4415  001142  2A18               	incf	___awdiv@quotient+1,f,c
  4416  001144  D000               	goto	l5109
  4417  001146                     l5109:
  4418  001146  C017  F011         	movff	___awdiv@quotient,?___awdiv
  4419  00114A  C018  F012         	movff	___awdiv@quotient+1,?___awdiv+1
  4420  00114E  D000               	goto	l912
  4421  001150                     l912:
  4422  001150  0012               	return		;funcret
  4423  001152                     __end_of___awdiv:
  4424                           	opt stack 0
  4425                           tblptru	equ	0xFF8
  4426                           tblptrh	equ	0xFF7
  4427                           tblptrl	equ	0xFF6
  4428                           tablat	equ	0xFF5
  4429                           prodh	equ	0xFF4
  4430                           prodl	equ	0xFF3
  4431                           intcon	equ	0xFF2
  4432                           intcon2	equ	0xFF1
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           postdec1	equ	0xFE5
  4436                           fsr1l	equ	0xFE1
  4437                           indf2	equ	0xFDF
  4438                           postinc2	equ	0xFDE
  4439                           postdec2	equ	0xFDD
  4440                           fsr2h	equ	0xFDA
  4441                           fsr2l	equ	0xFD9
  4442                           status	equ	0xFD8
  4443                           
  4444 ;; *************** function _Wait_Half_Second *****************
  4445 ;; Defined at:
  4446 ;;		line 241 in file "lab11t.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;		None
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;		None
  4451 ;; Return value:  Size  Location     Type
  4452 ;;		None               void
  4453 ;; Registers used:
  4454 ;;		wreg, status,2
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;Total ram usage:        0 bytes
  4465 ;; Hardware stack levels used:    1
  4466 ;; Hardware stack levels required when called:    3
  4467 ;; This function calls:
  4468 ;;		Nothing
  4469 ;; This function is called by:
  4470 ;;		_main
  4471 ;;		_Wait_One_Sec
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           	psect	text10
  4476  001A42                     __ptext10:
  4477                           	opt stack 0
  4478  001A42                     _Wait_Half_Second:
  4479                           	opt stack 27
  4480                           
  4481                           ;lab11t.c: 243: T0CON = 0x03;
  4482                           
  4483                           ;incstack = 0
  4484  001A42  0E03               	movlw	3
  4485  001A44  6ED5               	movwf	4053,c	;volatile
  4486                           
  4487                           ;lab11t.c: 244: TMR0L = 0xDB;
  4488  001A46  0EDB               	movlw	219
  4489  001A48  6ED6               	movwf	4054,c	;volatile
  4490                           
  4491                           ;lab11t.c: 245: TMR0H = 0x0B;
  4492  001A4A  0E0B               	movlw	11
  4493  001A4C  6ED7               	movwf	4055,c	;volatile
  4494                           
  4495                           ;lab11t.c: 246: INTCONbits.TMR0IF = 0;
  4496  001A4E  94F2               	bcf	intcon,2,c	;volatile
  4497                           
  4498                           ;lab11t.c: 247: T0CONbits.TMR0ON = 1;
  4499  001A50  8ED5               	bsf	4053,7,c	;volatile
  4500                           
  4501                           ;lab11t.c: 248: while (INTCONbits.TMR0IF == 0);
  4502  001A52  D000               	goto	l602
  4503  001A54                     l602:
  4504  001A54  A4F2               	btfss	intcon,2,c	;volatile
  4505  001A56  D7FE               	goto	l602
  4506                           
  4507                           ;lab11t.c: 249: T0CONbits.TMR0ON = 0;
  4508  001A58  9ED5               	bcf	4053,7,c	;volatile
  4509  001A5A  0012               	return		;funcret
  4510  001A5C                     __end_of_Wait_Half_Second:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           intcon2	equ	0xFF1
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _Initialize_Screen *****************
  4532 ;; Defined at:
  4533 ;;		line 252 in file "lab11t.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;		None               void
  4540 ;; Registers used:
  4541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;Total ram usage:        0 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:   10
  4554 ;; This function calls:
  4555 ;;		_LCD_Reset
  4556 ;;		_TFT_GreenTab_Initialize
  4557 ;;		_drawtext
  4558 ;;		_fillScreen
  4559 ;;		_strcpy
  4560 ;; This function is called by:
  4561 ;;		_main
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text11
  4566  001152                     __ptext11:
  4567                           	opt stack 0
  4568  001152                     _Initialize_Screen:
  4569                           	opt stack 20
  4570                           
  4571                           ;lab11t.c: 254: LCD_Reset();
  4572                           
  4573                           ;incstack = 0
  4574  001152  EC5A  F00D         	call	_LCD_Reset	;wreg free
  4575                           
  4576                           ;lab11t.c: 255: TFT_GreenTab_Initialize();
  4577  001156  ECBA  F00C         	call	_TFT_GreenTab_Initialize	;wreg free
  4578                           
  4579                           ;lab11t.c: 256: fillScreen(0x0000);
  4580  00115A  0E00               	movlw	0
  4581  00115C  6E25               	movwf	fillScreen@color+1,c
  4582  00115E  0E00               	movlw	0
  4583  001160  6E24               	movwf	fillScreen@color,c
  4584  001162  EC13  F00D         	call	_fillScreen	;wreg free
  4585                           
  4586                           ;lab11t.c: 259: txt = buffer;
  4587  001166  0ED4               	movlw	low _buffer
  4588  001168  6E4E               	movwf	_txt,c
  4589  00116A  0E00               	movlw	high _buffer
  4590  00116C  6E4F               	movwf	_txt+1,c
  4591                           
  4592                           ;lab11t.c: 260: strcpy(txt, "ECE3301L Spring 22-S3");
  4593  00116E  C04E  F011         	movff	_txt,strcpy@to
  4594  001172  C04F  F012         	movff	_txt+1,strcpy@to+1
  4595  001176  0EAD               	movlw	low STR_6
  4596  001178  6E13               	movwf	strcpy@from,c
  4597  00117A  0EFF               	movlw	high STR_6
  4598  00117C  6E14               	movwf	strcpy@from+1,c
  4599  00117E  EC89  F00C         	call	_strcpy	;wreg free
  4600                           
  4601                           ;lab11t.c: 261: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  4602  001182  0E02               	movlw	2
  4603  001184  6E39               	movwf	drawtext@y,c
  4604  001186  C04E  F03A         	movff	_txt,drawtext@_text
  4605  00118A  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4606  00118E  0EFF               	movlw	255
  4607  001190  6E3D               	movwf	drawtext@color+1,c
  4608  001192  683C               	setf	drawtext@color,c
  4609  001194  0E00               	movlw	0
  4610  001196  6E3F               	movwf	drawtext@bg+1,c
  4611  001198  0E00               	movlw	0
  4612  00119A  6E3E               	movwf	drawtext@bg,c
  4613  00119C  0E01               	movlw	1
  4614  00119E  6E40               	movwf	drawtext@size,c
  4615  0011A0  0E02               	movlw	2
  4616  0011A2  ECF2  F006         	call	_drawtext
  4617                           
  4618                           ;lab11t.c: 263: strcpy(txt, "LAB 11 ");
  4619  0011A6  C04E  F011         	movff	_txt,strcpy@to
  4620  0011AA  C04F  F012         	movff	_txt+1,strcpy@to+1
  4621  0011AE  0EF6               	movlw	low STR_7
  4622  0011B0  6E13               	movwf	strcpy@from,c
  4623  0011B2  0EFF               	movlw	high STR_7
  4624  0011B4  6E14               	movwf	strcpy@from+1,c
  4625  0011B6  EC89  F00C         	call	_strcpy	;wreg free
  4626                           
  4627                           ;lab11t.c: 264: drawtext(50, 10, txt, 0xFFFF, 0x0000, 1);
  4628  0011BA  0E0A               	movlw	10
  4629  0011BC  6E39               	movwf	drawtext@y,c
  4630  0011BE  C04E  F03A         	movff	_txt,drawtext@_text
  4631  0011C2  C04F  F03B         	movff	_txt+1,drawtext@_text+1
  4632  0011C6  0EFF               	movlw	255
  4633  0011C8  6E3D               	movwf	drawtext@color+1,c
  4634  0011CA  683C               	setf	drawtext@color,c
  4635  0011CC  0E00               	movlw	0
  4636  0011CE  6E3F               	movwf	drawtext@bg+1,c
  4637  0011D0  0E00               	movlw	0
  4638  0011D2  6E3E               	movwf	drawtext@bg,c
  4639  0011D4  0E01               	movlw	1
  4640  0011D6  6E40               	movwf	drawtext@size,c
  4641  0011D8  0E32               	movlw	50
  4642  0011DA  ECF2  F006         	call	_drawtext
  4643  0011DE  0012               	return		;funcret
  4644  0011E0                     __end_of_Initialize_Screen:
  4645                           	opt stack 0
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           prodh	equ	0xFF4
  4651                           prodl	equ	0xFF3
  4652                           intcon	equ	0xFF2
  4653                           intcon2	equ	0xFF1
  4654                           postinc0	equ	0xFEE
  4655                           wreg	equ	0xFE8
  4656                           postdec1	equ	0xFE5
  4657                           fsr1l	equ	0xFE1
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665 ;; *************** function _strcpy *****************
  4666 ;; Defined at:
  4667 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  to              2   16[COMRAM] PTR unsigned char 
  4670 ;;		 -> NULL(0), buffer(31), 
  4671 ;;  from            2   18[COMRAM] PTR const unsigned char 
  4672 ;;		 -> STR_7(8), STR_6(22), 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  cp              2   20[COMRAM] PTR unsigned char 
  4675 ;;		 -> NULL(0), buffer(31), 
  4676 ;; Return value:  Size  Location     Type
  4677 ;;                  2   16[COMRAM] PTR unsigned char 
  4678 ;; Registers used:
  4679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4680 ;; Tracked objects:
  4681 ;;		On entry : 0/0
  4682 ;;		On exit  : 0/0
  4683 ;;		Unchanged: 0/0
  4684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4685 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4689 ;;Total ram usage:        6 bytes
  4690 ;; Hardware stack levels used:    1
  4691 ;; Hardware stack levels required when called:    3
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_Initialize_Screen
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text12
  4700  001912                     __ptext12:
  4701                           	opt stack 0
  4702  001912                     _strcpy:
  4703                           	opt stack 26
  4704                           
  4705                           ;incstack = 0
  4706  001912  C011  F015         	movff	strcpy@to,strcpy@cp
  4707  001916  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  4708  00191A  D005               	goto	l4683
  4709  00191C                     l4681:
  4710  00191C  4A15               	infsnz	strcpy@cp,f,c
  4711  00191E  2A16               	incf	strcpy@cp+1,f,c
  4712  001920  4A13               	infsnz	strcpy@from,f,c
  4713  001922  2A14               	incf	strcpy@from+1,f,c
  4714  001924  D000               	goto	l4683
  4715  001926                     l4683:
  4716  001926  C013  FFF6         	movff	strcpy@from,tblptrl
  4717  00192A  C014  FFF7         	movff	strcpy@from+1,tblptrh
  4718  00192E                     	if	0	;tblptru may be non-zero
  4719  00192E                     	endif
  4720  00192E                     	if	0	;tblptru may be non-zero
  4721  00192E                     	endif
  4722  00192E  C015  FFD9         	movff	strcpy@cp,fsr2l
  4723  001932  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  4724  001936  0008               	tblrd		*
  4725  001938  CFF5 FFDF          	movff	tablat,indf2
  4726  00193C  50DF               	movf	indf2,w,c
  4727  00193E  A4D8               	btfss	status,2,c
  4728  001940  D7ED               	goto	l4681
  4729                           
  4730                           ;	Return value of _strcpy is never used
  4731  001942  0012               	return		;funcret
  4732  001944                     __end_of_strcpy:
  4733                           	opt stack 0
  4734                           tblptru	equ	0xFF8
  4735                           tblptrh	equ	0xFF7
  4736                           tblptrl	equ	0xFF6
  4737                           tablat	equ	0xFF5
  4738                           prodh	equ	0xFF4
  4739                           prodl	equ	0xFF3
  4740                           intcon	equ	0xFF2
  4741                           intcon2	equ	0xFF1
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           postdec1	equ	0xFE5
  4745                           fsr1l	equ	0xFE1
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _fillScreen *****************
  4754 ;; Defined at:
  4755 ;;		line 619 in file "ST7735_TFT.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  color           2   35[COMRAM] unsigned int 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;		None               void
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4769 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;Total ram usage:        2 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    7
  4776 ;; This function calls:
  4777 ;;		_fillRectangle
  4778 ;; This function is called by:
  4779 ;;		_Initialize_Screen
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text13
  4784  001A26                     __ptext13:
  4785                           	opt stack 0
  4786  001A26                     _fillScreen:
  4787                           	opt stack 22
  4788                           
  4789                           ;ST7735_TFT.c: 621: fillRectangle(0, 0, 128, 160, color);
  4790                           
  4791                           ;incstack = 0
  4792  001A26  0E00               	movlw	0
  4793  001A28  6E18               	movwf	fillRectangle@y,c
  4794  001A2A  0E80               	movlw	128
  4795  001A2C  6E19               	movwf	fillRectangle@w,c
  4796  001A2E  0EA0               	movlw	160
  4797  001A30  6E1A               	movwf	fillRectangle@h,c
  4798  001A32  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  4799  001A36  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  4800  001A3A  0E00               	movlw	0
  4801  001A3C  ECF0  F007         	call	_fillRectangle
  4802  001A40  0012               	return		;funcret
  4803  001A42                     __end_of_fillScreen:
  4804                           	opt stack 0
  4805                           tblptru	equ	0xFF8
  4806                           tblptrh	equ	0xFF7
  4807                           tblptrl	equ	0xFF6
  4808                           tablat	equ	0xFF5
  4809                           prodh	equ	0xFF4
  4810                           prodl	equ	0xFF3
  4811                           intcon	equ	0xFF2
  4812                           intcon2	equ	0xFF1
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           postdec1	equ	0xFE5
  4816                           fsr1l	equ	0xFE1
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _fillRectangle *****************
  4825 ;; Defined at:
  4826 ;;		line 503 in file "ST7735_TFT.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  x               1    wreg     unsigned char 
  4829 ;;  y               1   23[COMRAM] unsigned char 
  4830 ;;  w               1   24[COMRAM] unsigned char 
  4831 ;;  h               1   25[COMRAM] unsigned char 
  4832 ;;  color           2   26[COMRAM] unsigned int 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;  x               1   34[COMRAM] unsigned char 
  4835 ;;  lo              1   33[COMRAM] unsigned char 
  4836 ;;  hi              1   32[COMRAM] unsigned char 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;		None               void
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4846 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;Total ram usage:       12 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    6
  4853 ;; This function calls:
  4854 ;;		_setAddrWindow
  4855 ;;		_spiwrite
  4856 ;; This function is called by:
  4857 ;;		_fillScreen
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text14
  4862  000FE0                     __ptext14:
  4863                           	opt stack 0
  4864  000FE0                     _fillRectangle:
  4865                           	opt stack 22
  4866                           
  4867                           ;incstack = 0
  4868                           ;fillRectangle@x stored from wreg
  4869  000FE0  6E23               	movwf	fillRectangle@x,c
  4870                           
  4871                           ;ST7735_TFT.c: 505: unsigned char hi, lo;
  4872                           ;ST7735_TFT.c: 506: if((x >= 128) || (y >= 160))
  4873  000FE2  0E80               	movlw	128
  4874  000FE4  6023               	cpfslt	fillRectangle@x,c
  4875  000FE6  D069               	goto	l337
  4876  000FE8  0E9F               	movlw	159
  4877  000FEA  6418               	cpfsgt	fillRectangle@y,c
  4878  000FEC  D001               	goto	l4443
  4879                           
  4880                           ;ST7735_TFT.c: 507: return;
  4881  000FEE  D065               	goto	l337
  4882  000FF0                     l4443:
  4883                           
  4884                           ;ST7735_TFT.c: 508: if((x + w - 1) >= 128)
  4885  000FF0  0EFF               	movlw	255
  4886  000FF2  6E1D               	movwf	??_fillRectangle& (0+255),c
  4887  000FF4  0EFF               	movlw	255
  4888  000FF6  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4889  000FF8  5019               	movf	fillRectangle@w,w,c
  4890  000FFA  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  4891  000FFE  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4892  001000  261F               	addwf	??_fillRectangle+2,f,c
  4893  001002  0E00               	movlw	0
  4894  001004  2220               	addwfc	??_fillRectangle+3,f,c
  4895  001006  501D               	movf	??_fillRectangle,w,c
  4896  001008  261F               	addwf	??_fillRectangle+2,f,c
  4897  00100A  501E               	movf	??_fillRectangle+1,w,c
  4898  00100C  2220               	addwfc	??_fillRectangle+3,f,c
  4899  00100E  BE20               	btfsc	??_fillRectangle+3,7,c
  4900  001010  D00A               	goto	l338
  4901  001012  5020               	movf	??_fillRectangle+3,w,c
  4902  001014  E104               	bnz	u2950
  4903  001016  0E80               	movlw	128
  4904  001018  5C1F               	subwf	??_fillRectangle+2,w,c
  4905  00101A  A0D8               	btfss	status,0,c
  4906  00101C  D004               	goto	l338
  4907  00101E                     u2950:
  4908                           
  4909                           ;ST7735_TFT.c: 509: w = 128 - x;
  4910  00101E  5023               	movf	fillRectangle@x,w,c
  4911  001020  0800               	sublw	0
  4912  001022  0F80               	addlw	128
  4913  001024  6E19               	movwf	fillRectangle@w,c
  4914  001026                     l338:
  4915                           
  4916                           ;ST7735_TFT.c: 510: if((y + h - 1) >= 160)
  4917  001026  0EFF               	movlw	255
  4918  001028  6E1D               	movwf	??_fillRectangle& (0+255),c
  4919  00102A  0EFF               	movlw	255
  4920  00102C  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4921  00102E  501A               	movf	fillRectangle@h,w,c
  4922  001030  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4923  001034  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4924  001036  261F               	addwf	??_fillRectangle+2,f,c
  4925  001038  0E00               	movlw	0
  4926  00103A  2220               	addwfc	??_fillRectangle+3,f,c
  4927  00103C  501D               	movf	??_fillRectangle,w,c
  4928  00103E  261F               	addwf	??_fillRectangle+2,f,c
  4929  001040  501E               	movf	??_fillRectangle+1,w,c
  4930  001042  2220               	addwfc	??_fillRectangle+3,f,c
  4931  001044  BE20               	btfsc	??_fillRectangle+3,7,c
  4932  001046  D00B               	goto	l4449
  4933  001048  5020               	movf	??_fillRectangle+3,w,c
  4934  00104A  E104               	bnz	u2960
  4935  00104C  0EA0               	movlw	160
  4936  00104E  5C1F               	subwf	??_fillRectangle+2,w,c
  4937  001050  A0D8               	btfss	status,0,c
  4938  001052  D005               	goto	l4449
  4939  001054                     u2960:
  4940                           
  4941                           ;ST7735_TFT.c: 511: h = 160 - y;
  4942  001054  5018               	movf	fillRectangle@y,w,c
  4943  001056  0800               	sublw	0
  4944  001058  0FA0               	addlw	160
  4945  00105A  6E1A               	movwf	fillRectangle@h,c
  4946  00105C  D000               	goto	l4449
  4947  00105E                     l4449:
  4948                           
  4949                           ;ST7735_TFT.c: 512: setAddrWindow(x, y, x+w-1, y+h-1);
  4950  00105E  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4951  001062  5023               	movf	fillRectangle@x,w,c
  4952  001064  2419               	addwf	fillRectangle@w,w,c
  4953  001066  6E1D               	movwf	??_fillRectangle& (0+255),c
  4954  001068  041D               	decf	??_fillRectangle,w,c
  4955  00106A  6E15               	movwf	setAddrWindow@x1,c
  4956  00106C  5018               	movf	fillRectangle@y,w,c
  4957  00106E  241A               	addwf	fillRectangle@h,w,c
  4958  001070  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4959  001072  041E               	decf	??_fillRectangle+1,w,c
  4960  001074  6E16               	movwf	setAddrWindow@y1,c
  4961  001076  5023               	movf	fillRectangle@x,w,c
  4962  001078  EC80  F00B         	call	_setAddrWindow
  4963                           
  4964                           ;ST7735_TFT.c: 513: hi = color >> 8; lo = color;
  4965  00107C  501C               	movf	fillRectangle@color+1,w,c
  4966  00107E  6E21               	movwf	fillRectangle@hi,c
  4967  001080  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4968                           
  4969                           ;ST7735_TFT.c: 514: PORTDbits.RD0 = 1;
  4970  001084  8083               	bsf	3971,0,c	;volatile
  4971                           
  4972                           ;ST7735_TFT.c: 515: PORTDbits.RD1 = 0;
  4973  001086  9283               	bcf	3971,1,c	;volatile
  4974                           
  4975                           ;ST7735_TFT.c: 517: for(y=h; y>0; y--) {
  4976  001088  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4977  00108C                     l4461:
  4978  00108C  5018               	movf	fillRectangle@y,w,c
  4979  00108E  B4D8               	btfsc	status,2,c
  4980  001090  D013               	goto	l341
  4981  001092  D001               	goto	l340
  4982  001094  D011               	goto	l341
  4983  001096                     l340:
  4984                           
  4985                           ;ST7735_TFT.c: 518: for(x = w; x > 0; x--) {
  4986  001096  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4987  00109A                     l4465:
  4988  00109A  5023               	movf	fillRectangle@x,w,c
  4989  00109C  B4D8               	btfsc	status,2,c
  4990  00109E  D00A               	goto	l4475
  4991  0010A0  D001               	goto	l4469
  4992  0010A2  D008               	goto	l4475
  4993  0010A4                     l4469:
  4994                           
  4995                           ;ST7735_TFT.c: 519: spiwrite(hi);
  4996  0010A4  5021               	movf	fillRectangle@hi,w,c
  4997  0010A6  EC46  F00D         	call	_spiwrite
  4998                           
  4999                           ;ST7735_TFT.c: 520: spiwrite(lo);
  5000  0010AA  5022               	movf	fillRectangle@lo,w,c
  5001  0010AC  EC46  F00D         	call	_spiwrite
  5002  0010B0  0623               	decf	fillRectangle@x,f,c
  5003  0010B2  D7F3               	goto	l4465
  5004  0010B4                     l4475:
  5005  0010B4  0618               	decf	fillRectangle@y,f,c
  5006  0010B6  D7EA               	goto	l4461
  5007  0010B8                     l341:
  5008                           
  5009                           ;ST7735_TFT.c: 521: }
  5010                           ;ST7735_TFT.c: 522: }
  5011                           ;ST7735_TFT.c: 523: PORTDbits.RD1 = 1;
  5012  0010B8  8283               	bsf	3971,1,c	;volatile
  5013  0010BA                     l337:
  5014  0010BA  0012               	return		;funcret
  5015  0010BC                     __end_of_fillRectangle:
  5016                           	opt stack 0
  5017                           tblptru	equ	0xFF8
  5018                           tblptrh	equ	0xFF7
  5019                           tblptrl	equ	0xFF6
  5020                           tablat	equ	0xFF5
  5021                           prodh	equ	0xFF4
  5022                           prodl	equ	0xFF3
  5023                           intcon	equ	0xFF2
  5024                           intcon2	equ	0xFF1
  5025                           postinc0	equ	0xFEE
  5026                           wreg	equ	0xFE8
  5027                           postdec1	equ	0xFE5
  5028                           fsr1l	equ	0xFE1
  5029                           indf2	equ	0xFDF
  5030                           postinc2	equ	0xFDE
  5031                           postdec2	equ	0xFDD
  5032                           fsr2h	equ	0xFDA
  5033                           fsr2l	equ	0xFD9
  5034                           status	equ	0xFD8
  5035                           
  5036 ;; *************** function _drawtext *****************
  5037 ;; Defined at:
  5038 ;;		line 474 in file "ST7735_TFT.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;  x               1    wreg     unsigned char 
  5041 ;;  y               1   56[COMRAM] unsigned char 
  5042 ;;  _text           2   57[COMRAM] PTR unsigned char 
  5043 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5044 ;;  color           2   59[COMRAM] unsigned int 
  5045 ;;  bg              2   61[COMRAM] unsigned int 
  5046 ;;  size            1   63[COMRAM] unsigned char 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  x               1    0[BANK0 ] unsigned char 
  5049 ;;  i               2    3[BANK0 ] unsigned int 
  5050 ;;  textsize        2    1[BANK0 ] unsigned int 
  5051 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  5052 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;		None               void
  5055 ;; Registers used:
  5056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5062 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;Total ram usage:       17 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    9
  5069 ;; This function calls:
  5070 ;;		_drawChar
  5071 ;;		_strlen
  5072 ;; This function is called by:
  5073 ;;		_main
  5074 ;;		_Initialize_Screen
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           	psect	text15
  5079  000DE4                     __ptext15:
  5080                           	opt stack 0
  5081  000DE4                     _drawtext:
  5082                           	opt stack 21
  5083                           
  5084                           ;incstack = 0
  5085                           ;drawtext@x stored from wreg
  5086  000DE4  0100               	movlb	0	; () banked
  5087  000DE6  6FF3               	movwf	drawtext@x& (0+255),b
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;ST7735_TFT.c: 476: unsigned char cursor_x, cursor_y;
  5091                           ;ST7735_TFT.c: 477: unsigned int textsize, i;
  5092                           ;ST7735_TFT.c: 478: cursor_x = x, cursor_y = y;
  5093  000DE8  C0F3  F0F9         	movff	drawtext@x,drawtext@cursor_x
  5094                           
  5095                           ; BSR set to: 0
  5096  000DEC  C039  F0F8         	movff	drawtext@y,drawtext@cursor_y
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;ST7735_TFT.c: 479: textsize = strlen(_text);
  5100  000DF0  C03A  F011         	movff	drawtext@_text,strlen@s
  5101  000DF4  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  5102  000DF8  ECF0  F00B         	call	_strlen	;wreg free
  5103  000DFC  C011  F0F4         	movff	?_strlen,drawtext@textsize
  5104  000E00  C012  F0F5         	movff	?_strlen+1,drawtext@textsize+1
  5105                           
  5106                           ;ST7735_TFT.c: 480: for(i = 0; i < textsize; i++){
  5107  000E04  0E00               	movlw	0
  5108  000E06  0100               	movlb	0	; () banked
  5109  000E08  6FF7               	movwf	(drawtext@i+1)& (0+255),b
  5110  000E0A  0E00               	movlw	0
  5111  000E0C  6FF6               	movwf	drawtext@i& (0+255),b
  5112  000E0E  D064               	goto	l4619
  5113  000E10                     l4593:
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;ST7735_TFT.c: 481: if(wrap && ((cursor_x + size * 5) > 128)){
  5117  000E10  506F               	movf	_wrap,w,c
  5118  000E12  B4D8               	btfsc	status,2,c
  5119  000E14  D034               	goto	l4609
  5120                           
  5121                           ; BSR set to: 0
  5122  000E16  5040               	movf	drawtext@size,w,c
  5123  000E18  0D05               	mullw	5
  5124  000E1A  0100               	movlb	0	; () banked
  5125  000E1C  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5126  000E1E  6E41               	movwf	??_drawtext& (0+255),c
  5127  000E20  6A42               	clrf	(??_drawtext+1)& (0+255),c
  5128  000E22  50F3               	movf	prodl,w,c
  5129  000E24  2641               	addwf	??_drawtext,f,c
  5130  000E26  50F4               	movf	prodh,w,c
  5131  000E28  2242               	addwfc	??_drawtext+1,f,c
  5132  000E2A  BE42               	btfsc	??_drawtext+1,7,c
  5133  000E2C  D028               	goto	l4609
  5134  000E2E  5042               	movf	??_drawtext+1,w,c
  5135  000E30  E104               	bnz	u3160
  5136  000E32  0E81               	movlw	129
  5137  000E34  5C41               	subwf	??_drawtext,w,c
  5138  000E36  A0D8               	btfss	status,0,c
  5139  000E38  D022               	goto	l4609
  5140  000E3A                     u3160:
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;ST7735_TFT.c: 482: cursor_x = 0;
  5144  000E3A  0E00               	movlw	0
  5145  000E3C  0100               	movlb	0	; () banked
  5146  000E3E  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;ST7735_TFT.c: 483: cursor_y = cursor_y + size * 7 + 3 ;
  5150  000E40  5040               	movf	drawtext@size,w,c
  5151  000E42  0D07               	mullw	7
  5152  000E44  50F3               	movf	prodl,w,c
  5153  000E46  0100               	movlb	0	; () banked
  5154  000E48  25F8               	addwf	drawtext@cursor_y& (0+255),w,b
  5155  000E4A  0F03               	addlw	3
  5156  000E4C  0100               	movlb	0	; () banked
  5157  000E4E  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;ST7735_TFT.c: 484: if(cursor_y > 160) cursor_y = 160;
  5161  000E50  0EA0               	movlw	160
  5162  000E52  0100               	movlb	0	; () banked
  5163  000E54  65F8               	cpfsgt	drawtext@cursor_y& (0+255),b
  5164  000E56  D004               	goto	l4605
  5165                           
  5166                           ; BSR set to: 0
  5167  000E58  0EA0               	movlw	160
  5168  000E5A  0100               	movlb	0	; () banked
  5169  000E5C  6FF8               	movwf	drawtext@cursor_y& (0+255),b
  5170  000E5E  D000               	goto	l4605
  5171  000E60                     l4605:
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;ST7735_TFT.c: 485: if(_text[i] == 0x20) goto _skip; }
  5175  000E60  0100               	movlb	0	; () banked
  5176  000E62  51F6               	movf	drawtext@i& (0+255),w,b
  5177  000E64  243A               	addwf	drawtext@_text,w,c
  5178  000E66  6ED9               	movwf	fsr2l,c
  5179  000E68  0100               	movlb	0	; () banked
  5180  000E6A  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5181  000E6C  203B               	addwfc	drawtext@_text+1,w,c
  5182  000E6E  6EDA               	movwf	fsr2h,c
  5183  000E70  0E20               	movlw	32
  5184  000E72  18DE               	xorwf	postinc2,w,c
  5185  000E74  B4D8               	btfsc	status,2,c
  5186  000E76  D02C               	goto	l4617
  5187  000E78  D002               	goto	l4609
  5188                           
  5189                           ; BSR set to: 0
  5190  000E7A  D02A               	goto	l4617
  5191                           
  5192                           ; BSR set to: 0
  5193  000E7C  D000               	goto	l4609
  5194  000E7E                     l4609:
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;ST7735_TFT.c: 486: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  5198  000E7E  C0F8  F02E         	movff	drawtext@cursor_y,drawChar@y
  5199  000E82  0100               	movlb	0	; () banked
  5200  000E84  51F6               	movf	drawtext@i& (0+255),w,b
  5201  000E86  243A               	addwf	drawtext@_text,w,c
  5202  000E88  6ED9               	movwf	fsr2l,c
  5203  000E8A  0100               	movlb	0	; () banked
  5204  000E8C  51F7               	movf	(drawtext@i+1)& (0+255),w,b
  5205  000E8E  203B               	addwfc	drawtext@_text+1,w,c
  5206  000E90  6EDA               	movwf	fsr2h,c
  5207  000E92  50DF               	movf	indf2,w,c
  5208  000E94  6E2F               	movwf	drawChar@c,c
  5209  000E96  C03C  F030         	movff	drawtext@color,drawChar@color
  5210  000E9A  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  5211  000E9E  C03E  F032         	movff	drawtext@bg,drawChar@bg
  5212  000EA2  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  5213  000EA6  C040  F034         	movff	drawtext@size,drawChar@size
  5214  000EAA  0100               	movlb	0	; () banked
  5215  000EAC  51F9               	movf	drawtext@cursor_x& (0+255),w,b
  5216  000EAE  EC23  F005         	call	_drawChar
  5217                           
  5218                           ;ST7735_TFT.c: 487: cursor_x = cursor_x + size * 6;
  5219  000EB2  5040               	movf	drawtext@size,w,c
  5220  000EB4  0D06               	mullw	6
  5221  000EB6  50F3               	movf	prodl,w,c
  5222  000EB8  0100               	movlb	0	; () banked
  5223  000EBA  25F9               	addwf	drawtext@cursor_x& (0+255),w,b
  5224  000EBC  0100               	movlb	0	; () banked
  5225  000EBE  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;ST7735_TFT.c: 488: if(cursor_x > 128) cursor_x = 128;
  5229  000EC0  0E80               	movlw	128
  5230  000EC2  0100               	movlb	0	; () banked
  5231  000EC4  65F9               	cpfsgt	drawtext@cursor_x& (0+255),b
  5232  000EC6  D004               	goto	l4617
  5233                           
  5234                           ; BSR set to: 0
  5235  000EC8  0E80               	movlw	128
  5236  000ECA  0100               	movlb	0	; () banked
  5237  000ECC  6FF9               	movwf	drawtext@cursor_x& (0+255),b
  5238                           
  5239                           ; BSR set to: 0
  5240  000ECE  D000               	goto	l4617
  5241  000ED0                     l4617:
  5242                           
  5243                           ; BSR set to: 0
  5244  000ED0  0100               	movlb	0	; () banked
  5245  000ED2  4BF6               	infsnz	drawtext@i& (0+255),f,b
  5246  000ED4  2BF7               	incf	(drawtext@i+1)& (0+255),f,b
  5247  000ED6  D000               	goto	l4619
  5248  000ED8                     l4619:
  5249                           
  5250                           ; BSR set to: 0
  5251  000ED8  0100               	movlb	0	; () banked
  5252  000EDA  51F4               	movf	drawtext@textsize& (0+255),w,b
  5253  000EDC  0100               	movlb	0	; () banked
  5254  000EDE  5DF6               	subwf	drawtext@i& (0+255),w,b
  5255  000EE0  0100               	movlb	0	; () banked
  5256  000EE2  51F5               	movf	(drawtext@textsize+1)& (0+255),w,b
  5257  000EE4  0100               	movlb	0	; () banked
  5258  000EE6  59F7               	subwfb	(drawtext@i+1)& (0+255),w,b
  5259  000EE8  A0D8               	btfss	status,0,c
  5260  000EEA  D792               	goto	l4593
  5261                           
  5262                           ; BSR set to: 0
  5263                           
  5264                           ; BSR set to: 0
  5265  000EEC  0012               	return		;funcret
  5266  000EEE                     __end_of_drawtext:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           intcon	equ	0xFF2
  5275                           intcon2	equ	0xFF1
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287 ;; *************** function _strlen *****************
  5288 ;; Defined at:
  5289 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  s               2   16[COMRAM] PTR const unsigned char 
  5292 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  5295 ;;		 -> NULL(0), buffer(31), txt1(84), 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  2   16[COMRAM] unsigned int 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;Total ram usage:        6 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    3
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_drawtext
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text16
  5320  0017E0                     __ptext16:
  5321                           	opt stack 0
  5322  0017E0                     _strlen:
  5323                           	opt stack 26
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;incstack = 0
  5327  0017E0  C011  F015         	movff	strlen@s,strlen@cp
  5328  0017E4  C012  F016         	movff	strlen@s+1,strlen@cp+1
  5329  0017E8  D003               	goto	l4433
  5330  0017EA                     l4431:
  5331  0017EA  4A15               	infsnz	strlen@cp,f,c
  5332  0017EC  2A16               	incf	strlen@cp+1,f,c
  5333  0017EE  D000               	goto	l4433
  5334  0017F0                     l4433:
  5335  0017F0  C015  FFD9         	movff	strlen@cp,fsr2l
  5336  0017F4  C016  FFDA         	movff	strlen@cp+1,fsr2h
  5337  0017F8  50DF               	movf	indf2,w,c
  5338  0017FA  A4D8               	btfss	status,2,c
  5339  0017FC  D7F6               	goto	l4431
  5340  0017FE  C011  F013         	movff	strlen@s,??_strlen
  5341  001802  C012  F014         	movff	strlen@s+1,??_strlen+1
  5342  001806  1E13               	comf	??_strlen,f,c
  5343  001808  1E14               	comf	??_strlen+1,f,c
  5344  00180A  4A13               	infsnz	??_strlen,f,c
  5345  00180C  2A14               	incf	??_strlen+1,f,c
  5346  00180E  5015               	movf	strlen@cp,w,c
  5347  001810  2413               	addwf	??_strlen,w,c
  5348  001812  6E11               	movwf	?_strlen,c
  5349  001814  5016               	movf	strlen@cp+1,w,c
  5350  001816  2014               	addwfc	??_strlen+1,w,c
  5351  001818  6E12               	movwf	?_strlen+1,c
  5352  00181A  D000               	goto	l1281
  5353  00181C                     l1281:
  5354  00181C  0012               	return		;funcret
  5355  00181E                     __end_of_strlen:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           intcon	equ	0xFF2
  5364                           intcon2	equ	0xFF1
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           postdec1	equ	0xFE5
  5368                           fsr1l	equ	0xFE1
  5369                           indf2	equ	0xFDF
  5370                           postinc2	equ	0xFDE
  5371                           postdec2	equ	0xFDD
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function _drawChar *****************
  5377 ;; Defined at:
  5378 ;;		line 447 in file "ST7735_TFT.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  x               1    wreg     unsigned char 
  5381 ;;  y               1   45[COMRAM] unsigned char 
  5382 ;;  c               1   46[COMRAM] unsigned char 
  5383 ;;  color           2   47[COMRAM] unsigned int 
  5384 ;;  bg              2   49[COMRAM] unsigned int 
  5385 ;;  size            1   51[COMRAM] unsigned char 
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;  x               1   53[COMRAM] unsigned char 
  5388 ;;  line            1   52[COMRAM] unsigned char 
  5389 ;;  i               1   55[COMRAM] unsigned char 
  5390 ;;  j               1   54[COMRAM] unsigned char 
  5391 ;; Return value:  Size  Location     Type
  5392 ;;		None               void
  5393 ;; Registers used:
  5394 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5400 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;Total ram usage:       11 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    8
  5407 ;; This function calls:
  5408 ;;		___wmul
  5409 ;;		_drawPixel
  5410 ;;		_fillRect
  5411 ;; This function is called by:
  5412 ;;		_drawtext
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text17
  5417  000A46                     __ptext17:
  5418                           	opt stack 0
  5419  000A46                     _drawChar:
  5420                           	opt stack 21
  5421                           
  5422                           ;incstack = 0
  5423                           ;drawChar@x stored from wreg
  5424  000A46  6E36               	movwf	drawChar@x,c
  5425                           
  5426                           ;ST7735_TFT.c: 449: char i, j;
  5427                           ;ST7735_TFT.c: 450: if((x >= 128) || (y >= 160))
  5428  000A48  0E80               	movlw	128
  5429  000A4A  6036               	cpfslt	drawChar@x,c
  5430  000A4C  D0A6               	goto	l300
  5431  000A4E  0E9F               	movlw	159
  5432  000A50  642E               	cpfsgt	drawChar@y,c
  5433  000A52  D001               	goto	l4379
  5434                           
  5435                           ;ST7735_TFT.c: 451: return;
  5436  000A54  D0A2               	goto	l300
  5437  000A56                     l4379:
  5438                           
  5439                           ;ST7735_TFT.c: 452: if(size < 1) size = 1;
  5440  000A56  5034               	movf	drawChar@size,w,c
  5441  000A58  A4D8               	btfss	status,2,c
  5442  000A5A  D003               	goto	l4383
  5443  000A5C  0E01               	movlw	1
  5444  000A5E  6E34               	movwf	drawChar@size,c
  5445  000A60  D000               	goto	l4383
  5446  000A62                     l4383:
  5447                           
  5448                           ;ST7735_TFT.c: 453: if((c < ' ') || (c > '~'))
  5449  000A62  0E1F               	movlw	31
  5450  000A64  642F               	cpfsgt	drawChar@c,c
  5451  000A66  D004               	goto	l4387
  5452  000A68  0E7E               	movlw	126
  5453  000A6A  642F               	cpfsgt	drawChar@c,c
  5454  000A6C  D003               	goto	l302
  5455  000A6E  D000               	goto	l4387
  5456  000A70                     l4387:
  5457                           
  5458                           ;ST7735_TFT.c: 454: c = '?';
  5459  000A70  0E3F               	movlw	63
  5460  000A72  6E2F               	movwf	drawChar@c,c
  5461  000A74                     l302:
  5462                           
  5463                           ;ST7735_TFT.c: 455: for(i=0; i<5; i++ ) {
  5464  000A74  0E00               	movlw	0
  5465  000A76  6E38               	movwf	drawChar@i,c
  5466  000A78                     l4389:
  5467  000A78  0E04               	movlw	4
  5468  000A7A  6438               	cpfsgt	drawChar@i,c
  5469  000A7C  D001               	goto	l4393
  5470  000A7E  D08D               	goto	l300
  5471  000A80                     l4393:
  5472                           
  5473                           ;ST7735_TFT.c: 456: unsigned char line;
  5474                           ;ST7735_TFT.c: 457: if(c < 'S')
  5475  000A80  0E53               	movlw	83
  5476  000A82  602F               	cpfslt	drawChar@c,c
  5477  000A84  D015               	goto	l4397
  5478                           
  5479                           ;ST7735_TFT.c: 458: line = font[(c - 32)*5 + i];
  5480  000A86  0EE0               	movlw	224
  5481  000A88  242F               	addwf	drawChar@c,w,c
  5482  000A8A  6E11               	movwf	___wmul@multiplier,c
  5483  000A8C  6A12               	clrf	___wmul@multiplier+1,c
  5484  000A8E  0EFF               	movlw	255
  5485  000A90  2212               	addwfc	___wmul@multiplier+1,f,c
  5486  000A92  0E00               	movlw	0
  5487  000A94  6E14               	movwf	___wmul@multiplicand+1,c
  5488  000A96  0E05               	movlw	5
  5489  000A98  6E13               	movwf	___wmul@multiplicand,c
  5490  000A9A  ECCF  F00C         	call	___wmul	;wreg free
  5491  000A9E  5038               	movf	drawChar@i,w,c
  5492  000AA0  2611               	addwf	?___wmul,f,c
  5493  000AA2  0E00               	movlw	0
  5494  000AA4  2212               	addwfc	?___wmul+1,f,c
  5495  000AA6  0E41               	movlw	low _font
  5496  000AA8  2411               	addwf	?___wmul,w,c
  5497  000AAA  6EF6               	movwf	tblptrl,c
  5498  000AAC  0EFD               	movlw	high _font
  5499  000AAE  D014               	goto	L3
  5500  000AB0                     l4397:
  5501                           
  5502                           ;ST7735_TFT.c: 459: else
  5503                           ;ST7735_TFT.c: 460: line = font2[(c - 'S')*5 + i];
  5504  000AB0  0EAD               	movlw	173
  5505  000AB2  242F               	addwf	drawChar@c,w,c
  5506  000AB4  6E11               	movwf	___wmul@multiplier,c
  5507  000AB6  6A12               	clrf	___wmul@multiplier+1,c
  5508  000AB8  0EFF               	movlw	255
  5509  000ABA  2212               	addwfc	___wmul@multiplier+1,f,c
  5510  000ABC  0E00               	movlw	0
  5511  000ABE  6E14               	movwf	___wmul@multiplicand+1,c
  5512  000AC0  0E05               	movlw	5
  5513  000AC2  6E13               	movwf	___wmul@multiplicand,c
  5514  000AC4  ECCF  F00C         	call	___wmul	;wreg free
  5515  000AC8  5038               	movf	drawChar@i,w,c
  5516  000ACA  2611               	addwf	?___wmul,f,c
  5517  000ACC  0E00               	movlw	0
  5518  000ACE  2212               	addwfc	?___wmul+1,f,c
  5519  000AD0  0E40               	movlw	low _font2
  5520  000AD2  2411               	addwf	?___wmul,w,c
  5521  000AD4  6EF6               	movwf	tblptrl,c
  5522  000AD6  0EFE               	movlw	high _font2
  5523  000AD8                     L3:
  5524  000AD8  2012               	addwfc	?___wmul+1,w,c
  5525  000ADA  6EF7               	movwf	tblptrh,c
  5526  000ADC                     	if	0	;There are less than 3 active tblptr bytes
  5527  000ADC                     	endif
  5528  000ADC  0008               	tblrd		*
  5529  000ADE  CFF5 F035          	movff	tablat,drawChar@line
  5530  000AE2  D000               	goto	l4399
  5531  000AE4                     l4399:
  5532                           
  5533                           ;ST7735_TFT.c: 461: for(j=0; j<7; j++, line >>= 1) {
  5534  000AE4  0E00               	movlw	0
  5535  000AE6  6E37               	movwf	drawChar@j,c
  5536  000AE8                     l4401:
  5537  000AE8  0E06               	movlw	6
  5538  000AEA  6437               	cpfsgt	drawChar@j,c
  5539  000AEC  D001               	goto	l309
  5540  000AEE  D053               	goto	l4425
  5541  000AF0                     l309:
  5542                           
  5543                           ;ST7735_TFT.c: 462: if(line & 0x01) {
  5544  000AF0  A035               	btfss	drawChar@line,0,c
  5545  000AF2  D023               	goto	l4411
  5546                           
  5547                           ;ST7735_TFT.c: 463: if(size == 1) drawPixel(x+i, y+j, color);
  5548  000AF4  0434               	decf	drawChar@size,w,c
  5549  000AF6  A4D8               	btfss	status,2,c
  5550  000AF8  D00C               	goto	l4409
  5551  000AFA  502E               	movf	drawChar@y,w,c
  5552  000AFC  2437               	addwf	drawChar@j,w,c
  5553  000AFE  6E18               	movwf	drawPixel@y,c
  5554  000B00  C030  F019         	movff	drawChar@color,drawPixel@color
  5555  000B04  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  5556  000B08  5036               	movf	drawChar@x,w,c
  5557  000B0A  2438               	addwf	drawChar@i,w,c
  5558  000B0C  ECA2  F00C         	call	_drawPixel
  5559  000B10  D03E               	goto	l4419
  5560  000B12                     l4409:
  5561                           
  5562                           ;ST7735_TFT.c: 464: else fillRect(x+(i*size), y+(j*size), size, size, color);
  5563  000B12  5037               	movf	drawChar@j,w,c
  5564  000B14  0234               	mulwf	drawChar@size,c
  5565  000B16  50F3               	movf	prodl,w,c
  5566  000B18  242E               	addwf	drawChar@y,w,c
  5567  000B1A  6E23               	movwf	fillRect@y,c
  5568  000B1C  C034  F024         	movff	drawChar@size,fillRect@w
  5569  000B20  C034  F025         	movff	drawChar@size,fillRect@h
  5570  000B24  C030  F026         	movff	drawChar@color,fillRect@color
  5571  000B28  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  5572  000B2C  5038               	movf	drawChar@i,w,c
  5573  000B2E  0234               	mulwf	drawChar@size,c
  5574  000B30  50F3               	movf	prodl,w,c
  5575  000B32  2436               	addwf	drawChar@x,w,c
  5576  000B34  ECA7  F00B         	call	_fillRect
  5577                           
  5578                           ;ST7735_TFT.c: 465: }
  5579  000B38  D02A               	goto	l4419
  5580  000B3A                     l4411:
  5581                           
  5582                           ;ST7735_TFT.c: 466: else if(bg != color) {
  5583  000B3A  5030               	movf	drawChar@color,w,c
  5584  000B3C  1832               	xorwf	drawChar@bg,w,c
  5585  000B3E  E104               	bnz	u2880
  5586  000B40  5031               	movf	drawChar@color+1,w,c
  5587  000B42  1833               	xorwf	drawChar@bg+1,w,c
  5588  000B44  B4D8               	btfsc	status,2,c
  5589  000B46  D023               	goto	l4419
  5590  000B48                     u2880:
  5591                           
  5592                           ;ST7735_TFT.c: 467: if(size == 1) drawPixel(x+i, y+j, bg);
  5593  000B48  0434               	decf	drawChar@size,w,c
  5594  000B4A  A4D8               	btfss	status,2,c
  5595  000B4C  D00C               	goto	l4417
  5596  000B4E  502E               	movf	drawChar@y,w,c
  5597  000B50  2437               	addwf	drawChar@j,w,c
  5598  000B52  6E18               	movwf	drawPixel@y,c
  5599  000B54  C032  F019         	movff	drawChar@bg,drawPixel@color
  5600  000B58  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  5601  000B5C  5036               	movf	drawChar@x,w,c
  5602  000B5E  2438               	addwf	drawChar@i,w,c
  5603  000B60  ECA2  F00C         	call	_drawPixel
  5604  000B64  D014               	goto	l4419
  5605  000B66                     l4417:
  5606                           
  5607                           ;ST7735_TFT.c: 468: else fillRect(x+i*size, y+j*size, size, size, bg);
  5608  000B66  5037               	movf	drawChar@j,w,c
  5609  000B68  0234               	mulwf	drawChar@size,c
  5610  000B6A  50F3               	movf	prodl,w,c
  5611  000B6C  242E               	addwf	drawChar@y,w,c
  5612  000B6E  6E23               	movwf	fillRect@y,c
  5613  000B70  C034  F024         	movff	drawChar@size,fillRect@w
  5614  000B74  C034  F025         	movff	drawChar@size,fillRect@h
  5615  000B78  C032  F026         	movff	drawChar@bg,fillRect@color
  5616  000B7C  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  5617  000B80  5038               	movf	drawChar@i,w,c
  5618  000B82  0234               	mulwf	drawChar@size,c
  5619  000B84  50F3               	movf	prodl,w,c
  5620  000B86  2436               	addwf	drawChar@x,w,c
  5621  000B88  ECA7  F00B         	call	_fillRect
  5622  000B8C  D000               	goto	l4419
  5623  000B8E                     l4419:
  5624  000B8E  2A37               	incf	drawChar@j,f,c
  5625  000B90  90D8               	bcf	status,0,c
  5626  000B92  3235               	rrcf	drawChar@line,f,c
  5627  000B94  D7A9               	goto	l4401
  5628  000B96                     l4425:
  5629  000B96  2A38               	incf	drawChar@i,f,c
  5630  000B98  D76F               	goto	l4389
  5631  000B9A                     l300:
  5632  000B9A  0012               	return		;funcret
  5633  000B9C                     __end_of_drawChar:
  5634                           	opt stack 0
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           intcon2	equ	0xFF1
  5643                           postinc0	equ	0xFEE
  5644                           wreg	equ	0xFE8
  5645                           postdec1	equ	0xFE5
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function _fillRect *****************
  5655 ;; Defined at:
  5656 ;;		line 437 in file "ST7735_TFT.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  x               1    wreg     unsigned char 
  5659 ;;  y               1   34[COMRAM] unsigned char 
  5660 ;;  w               1   35[COMRAM] unsigned char 
  5661 ;;  h               1   36[COMRAM] unsigned char 
  5662 ;;  color           2   37[COMRAM] unsigned int 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  x               1   42[COMRAM] unsigned char 
  5665 ;;  i               2   43[COMRAM] int 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;		None               void
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5675 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5677 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;Total ram usage:       11 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    7
  5682 ;; This function calls:
  5683 ;;		_drawFastVLine
  5684 ;; This function is called by:
  5685 ;;		_drawChar
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           	psect	text18
  5690  00174E                     __ptext18:
  5691                           	opt stack 0
  5692  00174E                     _fillRect:
  5693                           	opt stack 21
  5694                           
  5695                           ;incstack = 0
  5696                           ;fillRect@x stored from wreg
  5697  00174E  6E2B               	movwf	fillRect@x,c
  5698                           
  5699                           ;ST7735_TFT.c: 439: signed int i;
  5700                           ;ST7735_TFT.c: 441: for (i = x; i < x + w; i++)
  5701  001750  C02B  F02C         	movff	fillRect@x,fillRect@i
  5702  001754  6A2D               	clrf	fillRect@i+1,c
  5703  001756  D00E               	goto	l4253
  5704  001758                     l4249:
  5705                           
  5706                           ;ST7735_TFT.c: 442: {
  5707                           ;ST7735_TFT.c: 443: drawFastVLine(i, y, h, color);
  5708  001758  C023  F018         	movff	fillRect@y,drawFastVLine@y
  5709  00175C  C025  F019         	movff	fillRect@h,drawFastVLine@h
  5710  001760  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  5711  001764  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  5712  001768  502C               	movf	fillRect@i,w,c
  5713  00176A  EC36  F009         	call	_drawFastVLine
  5714  00176E  4A2C               	infsnz	fillRect@i,f,c
  5715  001770  2A2D               	incf	fillRect@i+1,f,c
  5716  001772  D000               	goto	l4253
  5717  001774                     l4253:
  5718  001774  5024               	movf	fillRect@w,w,c
  5719  001776  C02B  F028         	movff	fillRect@x,??_fillRect
  5720  00177A  6A29               	clrf	(??_fillRect+1)& (0+255),c
  5721  00177C  2628               	addwf	??_fillRect,f,c
  5722  00177E  0E00               	movlw	0
  5723  001780  2229               	addwfc	??_fillRect+1,f,c
  5724  001782  5028               	movf	??_fillRect,w,c
  5725  001784  5C2C               	subwf	fillRect@i,w,c
  5726  001786  502D               	movf	fillRect@i+1,w,c
  5727  001788  0A80               	xorlw	128
  5728  00178A  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  5729  00178C  5029               	movf	??_fillRect+1,w,c
  5730  00178E  0A80               	xorlw	128
  5731  001790  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  5732  001792  A0D8               	btfss	status,0,c
  5733  001794  D7E1               	goto	l4249
  5734  001796  0012               	return		;funcret
  5735  001798                     __end_of_fillRect:
  5736                           	opt stack 0
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           intcon	equ	0xFF2
  5744                           intcon2	equ	0xFF1
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           postdec1	equ	0xFE5
  5748                           fsr1l	equ	0xFE1
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _drawFastVLine *****************
  5757 ;; Defined at:
  5758 ;;		line 416 in file "ST7735_TFT.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  x               1    wreg     unsigned char 
  5761 ;;  y               1   23[COMRAM] unsigned char 
  5762 ;;  h               1   24[COMRAM] unsigned char 
  5763 ;;  color           2   25[COMRAM] unsigned int 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  x               1   33[COMRAM] unsigned char 
  5766 ;;  lo              1   32[COMRAM] unsigned char 
  5767 ;;  hi              1   31[COMRAM] unsigned char 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;		None               void
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;Total ram usage:       11 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    6
  5784 ;; This function calls:
  5785 ;;		_setAddrWindow
  5786 ;;		_spiwrite
  5787 ;; This function is called by:
  5788 ;;		_fillRect
  5789 ;;		_fillCircleHelper
  5790 ;;		_fillCircle
  5791 ;;		_drawRect
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text19
  5796  00126C                     __ptext19:
  5797                           	opt stack 0
  5798  00126C                     _drawFastVLine:
  5799                           	opt stack 22
  5800                           
  5801                           ;incstack = 0
  5802                           ;drawFastVLine@x stored from wreg
  5803  00126C  6E22               	movwf	drawFastVLine@x,c
  5804                           
  5805                           ;ST7735_TFT.c: 418: unsigned char hi, lo;
  5806                           ;ST7735_TFT.c: 419: if((x >= 128) || (y >= 160))
  5807  00126E  0E80               	movlw	128
  5808  001270  6022               	cpfslt	drawFastVLine@x,c
  5809  001272  D03F               	goto	l284
  5810  001274  0E9F               	movlw	159
  5811  001276  6418               	cpfsgt	drawFastVLine@y,c
  5812  001278  D001               	goto	l4159
  5813                           
  5814                           ;ST7735_TFT.c: 420: return;
  5815  00127A  D03B               	goto	l284
  5816  00127C                     l4159:
  5817                           
  5818                           ;ST7735_TFT.c: 421: if((y + h - 1) >= 160)
  5819  00127C  0EFF               	movlw	255
  5820  00127E  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5821  001280  0EFF               	movlw	255
  5822  001282  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  5823  001284  5019               	movf	drawFastVLine@h,w,c
  5824  001286  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  5825  00128A  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  5826  00128C  261E               	addwf	??_drawFastVLine+2,f,c
  5827  00128E  0E00               	movlw	0
  5828  001290  221F               	addwfc	??_drawFastVLine+3,f,c
  5829  001292  501C               	movf	??_drawFastVLine,w,c
  5830  001294  261E               	addwf	??_drawFastVLine+2,f,c
  5831  001296  501D               	movf	??_drawFastVLine+1,w,c
  5832  001298  221F               	addwfc	??_drawFastVLine+3,f,c
  5833  00129A  BE1F               	btfsc	??_drawFastVLine+3,7,c
  5834  00129C  D00B               	goto	l4163
  5835  00129E  501F               	movf	??_drawFastVLine+3,w,c
  5836  0012A0  E104               	bnz	u2690
  5837  0012A2  0EA0               	movlw	160
  5838  0012A4  5C1E               	subwf	??_drawFastVLine+2,w,c
  5839  0012A6  A0D8               	btfss	status,0,c
  5840  0012A8  D005               	goto	l4163
  5841  0012AA                     u2690:
  5842                           
  5843                           ;ST7735_TFT.c: 422: h = 160 - y;
  5844  0012AA  5018               	movf	drawFastVLine@y,w,c
  5845  0012AC  0800               	sublw	0
  5846  0012AE  0FA0               	addlw	160
  5847  0012B0  6E19               	movwf	drawFastVLine@h,c
  5848  0012B2  D000               	goto	l4163
  5849  0012B4                     l4163:
  5850                           
  5851                           ;ST7735_TFT.c: 423: hi = color >> 8; lo = color;
  5852  0012B4  501B               	movf	drawFastVLine@color+1,w,c
  5853  0012B6  6E20               	movwf	drawFastVLine@hi,c
  5854  0012B8  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  5855                           
  5856                           ;ST7735_TFT.c: 424: setAddrWindow(x, y, x, y + h - 1);
  5857  0012BC  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  5858  0012C0  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  5859  0012C4  5018               	movf	drawFastVLine@y,w,c
  5860  0012C6  2419               	addwf	drawFastVLine@h,w,c
  5861  0012C8  6E1C               	movwf	??_drawFastVLine& (0+255),c
  5862  0012CA  041C               	decf	??_drawFastVLine,w,c
  5863  0012CC  6E16               	movwf	setAddrWindow@y1,c
  5864  0012CE  5022               	movf	drawFastVLine@x,w,c
  5865  0012D0  EC80  F00B         	call	_setAddrWindow
  5866                           
  5867                           ;ST7735_TFT.c: 425: PORTDbits.RD0 = 1;
  5868  0012D4  8083               	bsf	3971,0,c	;volatile
  5869                           
  5870                           ;ST7735_TFT.c: 426: PORTDbits.RD1 = 0;
  5871  0012D6  9283               	bcf	3971,1,c	;volatile
  5872                           
  5873                           ;ST7735_TFT.c: 428: while (h--) {
  5874  0012D8  D007               	goto	l4175
  5875  0012DA                     l4173:
  5876                           
  5877                           ;ST7735_TFT.c: 429: spiwrite(hi);
  5878  0012DA  5020               	movf	drawFastVLine@hi,w,c
  5879  0012DC  EC46  F00D         	call	_spiwrite
  5880                           
  5881                           ;ST7735_TFT.c: 430: spiwrite(lo);
  5882  0012E0  5021               	movf	drawFastVLine@lo,w,c
  5883  0012E2  EC46  F00D         	call	_spiwrite
  5884  0012E6  D000               	goto	l4175
  5885  0012E8                     l4175:
  5886  0012E8  0619               	decf	drawFastVLine@h,f,c
  5887  0012EA  2819               	incf	drawFastVLine@h,w,c
  5888  0012EC  A4D8               	btfss	status,2,c
  5889  0012EE  D7F5               	goto	l4173
  5890                           
  5891                           ;ST7735_TFT.c: 431: }
  5892                           ;ST7735_TFT.c: 432: PORTDbits.RD1 = 1;
  5893  0012F0  8283               	bsf	3971,1,c	;volatile
  5894  0012F2                     l284:
  5895  0012F2  0012               	return		;funcret
  5896  0012F4                     __end_of_drawFastVLine:
  5897                           	opt stack 0
  5898                           tblptru	equ	0xFF8
  5899                           tblptrh	equ	0xFF7
  5900                           tblptrl	equ	0xFF6
  5901                           tablat	equ	0xFF5
  5902                           prodh	equ	0xFF4
  5903                           prodl	equ	0xFF3
  5904                           intcon	equ	0xFF2
  5905                           intcon2	equ	0xFF1
  5906                           postinc0	equ	0xFEE
  5907                           wreg	equ	0xFE8
  5908                           postdec1	equ	0xFE5
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _drawPixel *****************
  5918 ;; Defined at:
  5919 ;;		line 407 in file "ST7735_TFT.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  x               1    wreg     unsigned char 
  5922 ;;  y               1   23[COMRAM] unsigned char 
  5923 ;;  color           2   24[COMRAM] unsigned int 
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;  x               1   26[COMRAM] unsigned char 
  5926 ;; Return value:  Size  Location     Type
  5927 ;;		None               void
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0, cstack
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5935 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;Total ram usage:        4 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    6
  5942 ;; This function calls:
  5943 ;;		_setAddrWindow
  5944 ;;		_write_data
  5945 ;; This function is called by:
  5946 ;;		_drawChar
  5947 ;;		_drawCircle
  5948 ;;		_drawCircleHelper
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           	psect	text20
  5953  001944                     __ptext20:
  5954                           	opt stack 0
  5955  001944                     _drawPixel:
  5956                           	opt stack 22
  5957                           
  5958                           ;incstack = 0
  5959                           ;drawPixel@x stored from wreg
  5960  001944  6E1B               	movwf	drawPixel@x,c
  5961                           
  5962                           ;ST7735_TFT.c: 409: if((x >= 128) || (y >= 160))
  5963  001946  0E80               	movlw	128
  5964  001948  601B               	cpfslt	drawPixel@x,c
  5965  00194A  D013               	goto	l278
  5966  00194C  0E9F               	movlw	159
  5967  00194E  6418               	cpfsgt	drawPixel@y,c
  5968  001950  D001               	goto	l4241
  5969                           
  5970                           ;ST7735_TFT.c: 410: return;
  5971  001952  D00F               	goto	l278
  5972  001954                     l4241:
  5973                           
  5974                           ;ST7735_TFT.c: 411: setAddrWindow(x,y,x+1,y+1);
  5975  001954  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5976  001958  281B               	incf	drawPixel@x,w,c
  5977  00195A  6E15               	movwf	setAddrWindow@x1,c
  5978  00195C  2818               	incf	drawPixel@y,w,c
  5979  00195E  6E16               	movwf	setAddrWindow@y1,c
  5980  001960  501B               	movf	drawPixel@x,w,c
  5981  001962  EC80  F00B         	call	_setAddrWindow
  5982                           
  5983                           ;ST7735_TFT.c: 412: write_data(color >> 8);
  5984  001966  501A               	movf	drawPixel@color+1,w,c
  5985  001968  EC87  F00D         	call	_write_data
  5986                           
  5987                           ;ST7735_TFT.c: 413: write_data(color & 0xFF);
  5988  00196C  5019               	movf	drawPixel@color,w,c
  5989  00196E  EC87  F00D         	call	_write_data
  5990  001972                     l278:
  5991  001972  0012               	return		;funcret
  5992  001974                     __end_of_drawPixel:
  5993                           	opt stack 0
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           intcon	equ	0xFF2
  6001                           intcon2	equ	0xFF1
  6002                           postinc0	equ	0xFEE
  6003                           wreg	equ	0xFE8
  6004                           postdec1	equ	0xFE5
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _setAddrWindow *****************
  6014 ;; Defined at:
  6015 ;;		line 392 in file "ST7735_TFT.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  x0              1    wreg     unsigned char 
  6018 ;;  y0              1   19[COMRAM] unsigned char 
  6019 ;;  x1              1   20[COMRAM] unsigned char 
  6020 ;;  y1              1   21[COMRAM] unsigned char 
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;  x0              1   22[COMRAM] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;		None               void
  6025 ;; Registers used:
  6026 ;;		wreg, status,2, status,0, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6032 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;Total ram usage:        4 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    5
  6039 ;; This function calls:
  6040 ;;		_write_command
  6041 ;;		_write_data
  6042 ;; This function is called by:
  6043 ;;		_drawPixel
  6044 ;;		_drawFastVLine
  6045 ;;		_fillRectangle
  6046 ;;		_drawFastHLine
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           	psect	text21
  6051  001700                     __ptext21:
  6052                           	opt stack 0
  6053  001700                     _setAddrWindow:
  6054                           	opt stack 22
  6055                           
  6056                           ;incstack = 0
  6057                           ;setAddrWindow@x0 stored from wreg
  6058  001700  6E17               	movwf	setAddrWindow@x0,c
  6059                           
  6060                           ;ST7735_TFT.c: 394: write_command(0x2A);
  6061  001702  0E2A               	movlw	42
  6062  001704  EC8F  F00D         	call	_write_command
  6063                           
  6064                           ;ST7735_TFT.c: 395: write_data(0);
  6065  001708  0E00               	movlw	0
  6066  00170A  EC87  F00D         	call	_write_data
  6067                           
  6068                           ;ST7735_TFT.c: 396: write_data(x0 + colstart);
  6069  00170E  5017               	movf	setAddrWindow@x0,w,c
  6070  001710  2459               	addwf	_colstart,w,c
  6071  001712  EC87  F00D         	call	_write_data
  6072                           
  6073                           ;ST7735_TFT.c: 397: write_data(0);
  6074  001716  0E00               	movlw	0
  6075  001718  EC87  F00D         	call	_write_data
  6076                           
  6077                           ;ST7735_TFT.c: 398: write_data(x1 + colstart);
  6078  00171C  5015               	movf	setAddrWindow@x1,w,c
  6079  00171E  2459               	addwf	_colstart,w,c
  6080  001720  EC87  F00D         	call	_write_data
  6081                           
  6082                           ;ST7735_TFT.c: 399: write_command(0x2B);
  6083  001724  0E2B               	movlw	43
  6084  001726  EC8F  F00D         	call	_write_command
  6085                           
  6086                           ;ST7735_TFT.c: 400: write_data(0);
  6087  00172A  0E00               	movlw	0
  6088  00172C  EC87  F00D         	call	_write_data
  6089                           
  6090                           ;ST7735_TFT.c: 401: write_data(y0 + rowstart);
  6091  001730  5014               	movf	setAddrWindow@y0,w,c
  6092  001732  2462               	addwf	_rowstart,w,c
  6093  001734  EC87  F00D         	call	_write_data
  6094                           
  6095                           ;ST7735_TFT.c: 402: write_data(0);
  6096  001738  0E00               	movlw	0
  6097  00173A  EC87  F00D         	call	_write_data
  6098                           
  6099                           ;ST7735_TFT.c: 403: write_data(y1 + rowstart);
  6100  00173E  5016               	movf	setAddrWindow@y1,w,c
  6101  001740  2462               	addwf	_rowstart,w,c
  6102  001742  EC87  F00D         	call	_write_data
  6103                           
  6104                           ;ST7735_TFT.c: 404: write_command(0x2C);
  6105  001746  0E2C               	movlw	44
  6106  001748  EC8F  F00D         	call	_write_command
  6107  00174C  0012               	return		;funcret
  6108  00174E                     __end_of_setAddrWindow:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon2	equ	0xFF1
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           postdec1	equ	0xFE5
  6121                           fsr1l	equ	0xFE1
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           postdec2	equ	0xFDD
  6125                           fsr2h	equ	0xFDA
  6126                           fsr2l	equ	0xFD9
  6127                           status	equ	0xFD8
  6128                           
  6129 ;; *************** function _TFT_GreenTab_Initialize *****************
  6130 ;; Defined at:
  6131 ;;		line 644 in file "ST7735_TFT.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;		None
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;		None
  6136 ;; Return value:  Size  Location     Type
  6137 ;;		None               void
  6138 ;; Registers used:
  6139 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;Total ram usage:        0 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    6
  6152 ;; This function calls:
  6153 ;;		_Rcmd1
  6154 ;;		_Rcmd2red
  6155 ;;		_Rcmd3
  6156 ;;		_write_command
  6157 ;;		_write_data
  6158 ;; This function is called by:
  6159 ;;		_Initialize_Screen
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text22
  6164  001974                     __ptext22:
  6165                           	opt stack 0
  6166  001974                     _TFT_GreenTab_Initialize:
  6167                           	opt stack 23
  6168                           
  6169                           ;ST7735_TFT.c: 646: PORTDbits.RD1 = 1;
  6170                           
  6171                           ;incstack = 0
  6172  001974  8283               	bsf	3971,1,c	;volatile
  6173                           
  6174                           ;ST7735_TFT.c: 647: PORTDbits.RD0 = 0;
  6175  001976  9083               	bcf	3971,0,c	;volatile
  6176                           
  6177                           ;ST7735_TFT.c: 649: SSPSTAT=0x80;
  6178  001978  0E80               	movlw	128
  6179  00197A  6EC7               	movwf	4039,c	;volatile
  6180                           
  6181                           ;ST7735_TFT.c: 650: SSPCON1=0x30;
  6182  00197C  0E30               	movlw	48
  6183  00197E  6EC6               	movwf	4038,c	;volatile
  6184                           
  6185                           ;ST7735_TFT.c: 653: Rcmd1();
  6186  001980  EC6A  F006         	call	_Rcmd1	;wreg free
  6187                           
  6188                           ;ST7735_TFT.c: 654: Rcmd2red();
  6189  001984  EC0F  F00C         	call	_Rcmd2red	;wreg free
  6190                           
  6191                           ;ST7735_TFT.c: 655: Rcmd3();
  6192  001988  EC77  F007         	call	_Rcmd3	;wreg free
  6193                           
  6194                           ;ST7735_TFT.c: 656: write_command(0x36);
  6195  00198C  0E36               	movlw	54
  6196  00198E  EC8F  F00D         	call	_write_command
  6197                           
  6198                           ;ST7735_TFT.c: 657: write_data(0xC0);
  6199  001992  0EC0               	movlw	192
  6200  001994  EC87  F00D         	call	_write_data
  6201                           
  6202                           ;ST7735_TFT.c: 658: _tft_type = 1;
  6203  001998  0E01               	movlw	1
  6204  00199A  6E53               	movwf	__tft_type,c
  6205  00199C  0012               	return		;funcret
  6206  00199E                     __end_of_TFT_GreenTab_Initialize:
  6207                           	opt stack 0
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           intcon	equ	0xFF2
  6215                           intcon2	equ	0xFF1
  6216                           postinc0	equ	0xFEE
  6217                           wreg	equ	0xFE8
  6218                           postdec1	equ	0xFE5
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           fsr2h	equ	0xFDA
  6224                           fsr2l	equ	0xFD9
  6225                           status	equ	0xFD8
  6226                           
  6227 ;; *************** function _Rcmd3 *****************
  6228 ;; Defined at:
  6229 ;;		line 338 in file "ST7735_TFT.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;		None
  6234 ;; Return value:  Size  Location     Type
  6235 ;;		None               void
  6236 ;; Registers used:
  6237 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;Total ram usage:        0 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:    5
  6250 ;; This function calls:
  6251 ;;		_delay_ms
  6252 ;;		_write_command
  6253 ;;		_write_data
  6254 ;; This function is called by:
  6255 ;;		_TFT_GreenTab_Initialize
  6256 ;;		_TFT_BlackTab_Initialize
  6257 ;; This function uses a non-reentrant model
  6258 ;;
  6259                           
  6260                           	psect	text23
  6261  000EEE                     __ptext23:
  6262                           	opt stack 0
  6263  000EEE                     _Rcmd3:
  6264                           	opt stack 23
  6265                           
  6266                           ;ST7735_TFT.c: 340: write_command(0xE0);
  6267                           
  6268                           ;incstack = 0
  6269  000EEE  0EE0               	movlw	224
  6270  000EF0  EC8F  F00D         	call	_write_command
  6271                           
  6272                           ;ST7735_TFT.c: 341: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  6273  000EF4  0E02               	movlw	2
  6274  000EF6  EC87  F00D         	call	_write_data
  6275  000EFA  0E1C               	movlw	28
  6276  000EFC  EC87  F00D         	call	_write_data
  6277  000F00  0E07               	movlw	7
  6278  000F02  EC87  F00D         	call	_write_data
  6279  000F06  0E12               	movlw	18
  6280  000F08  EC87  F00D         	call	_write_data
  6281                           
  6282                           ;ST7735_TFT.c: 342: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  6283  000F0C  0E37               	movlw	55
  6284  000F0E  EC87  F00D         	call	_write_data
  6285  000F12  0E32               	movlw	50
  6286  000F14  EC87  F00D         	call	_write_data
  6287  000F18  0E29               	movlw	41
  6288  000F1A  EC87  F00D         	call	_write_data
  6289  000F1E  0E2D               	movlw	45
  6290  000F20  EC87  F00D         	call	_write_data
  6291                           
  6292                           ;ST7735_TFT.c: 343: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  6293  000F24  0E29               	movlw	41
  6294  000F26  EC87  F00D         	call	_write_data
  6295  000F2A  0E25               	movlw	37
  6296  000F2C  EC87  F00D         	call	_write_data
  6297  000F30  0E2B               	movlw	43
  6298  000F32  EC87  F00D         	call	_write_data
  6299  000F36  0E39               	movlw	57
  6300  000F38  EC87  F00D         	call	_write_data
  6301                           
  6302                           ;ST7735_TFT.c: 344: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  6303  000F3C  0E00               	movlw	0
  6304  000F3E  EC87  F00D         	call	_write_data
  6305  000F42  0E01               	movlw	1
  6306  000F44  EC87  F00D         	call	_write_data
  6307  000F48  0E03               	movlw	3
  6308  000F4A  EC87  F00D         	call	_write_data
  6309  000F4E  0E10               	movlw	16
  6310  000F50  EC87  F00D         	call	_write_data
  6311                           
  6312                           ;ST7735_TFT.c: 345: write_command(0xE1);
  6313  000F54  0EE1               	movlw	225
  6314  000F56  EC8F  F00D         	call	_write_command
  6315                           
  6316                           ;ST7735_TFT.c: 346: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  6317  000F5A  0E03               	movlw	3
  6318  000F5C  EC87  F00D         	call	_write_data
  6319  000F60  0E1D               	movlw	29
  6320  000F62  EC87  F00D         	call	_write_data
  6321  000F66  0E07               	movlw	7
  6322  000F68  EC87  F00D         	call	_write_data
  6323  000F6C  0E06               	movlw	6
  6324  000F6E  EC87  F00D         	call	_write_data
  6325                           
  6326                           ;ST7735_TFT.c: 347: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  6327  000F72  0E2E               	movlw	46
  6328  000F74  EC87  F00D         	call	_write_data
  6329  000F78  0E2C               	movlw	44
  6330  000F7A  EC87  F00D         	call	_write_data
  6331  000F7E  0E29               	movlw	41
  6332  000F80  EC87  F00D         	call	_write_data
  6333  000F84  0E2D               	movlw	45
  6334  000F86  EC87  F00D         	call	_write_data
  6335                           
  6336                           ;ST7735_TFT.c: 348: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  6337  000F8A  0E2E               	movlw	46
  6338  000F8C  EC87  F00D         	call	_write_data
  6339  000F90  0E2E               	movlw	46
  6340  000F92  EC87  F00D         	call	_write_data
  6341  000F96  0E37               	movlw	55
  6342  000F98  EC87  F00D         	call	_write_data
  6343  000F9C  0E3F               	movlw	63
  6344  000F9E  EC87  F00D         	call	_write_data
  6345                           
  6346                           ;ST7735_TFT.c: 349: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  6347  000FA2  0E00               	movlw	0
  6348  000FA4  EC87  F00D         	call	_write_data
  6349  000FA8  0E00               	movlw	0
  6350  000FAA  EC87  F00D         	call	_write_data
  6351  000FAE  0E02               	movlw	2
  6352  000FB0  EC87  F00D         	call	_write_data
  6353  000FB4  0E10               	movlw	16
  6354  000FB6  EC87  F00D         	call	_write_data
  6355                           
  6356                           ;ST7735_TFT.c: 350: write_command(0x13);
  6357  000FBA  0E13               	movlw	19
  6358  000FBC  EC8F  F00D         	call	_write_command
  6359                           
  6360                           ;ST7735_TFT.c: 351: delay_ms(10);
  6361  000FC0  0E00               	movlw	0
  6362  000FC2  6E18               	movwf	delay_ms@ms+1,c
  6363  000FC4  0E0A               	movlw	10
  6364  000FC6  6E17               	movwf	delay_ms@ms,c
  6365  000FC8  EC57  F00B         	call	_delay_ms	;wreg free
  6366                           
  6367                           ;ST7735_TFT.c: 352: write_command(0x29);
  6368  000FCC  0E29               	movlw	41
  6369  000FCE  EC8F  F00D         	call	_write_command
  6370                           
  6371                           ;ST7735_TFT.c: 353: delay_ms(100);
  6372  000FD2  0E00               	movlw	0
  6373  000FD4  6E18               	movwf	delay_ms@ms+1,c
  6374  000FD6  0E64               	movlw	100
  6375  000FD8  6E17               	movwf	delay_ms@ms,c
  6376  000FDA  EC57  F00B         	call	_delay_ms	;wreg free
  6377  000FDE  0012               	return		;funcret
  6378  000FE0                     __end_of_Rcmd3:
  6379                           	opt stack 0
  6380                           tblptru	equ	0xFF8
  6381                           tblptrh	equ	0xFF7
  6382                           tblptrl	equ	0xFF6
  6383                           tablat	equ	0xFF5
  6384                           prodh	equ	0xFF4
  6385                           prodl	equ	0xFF3
  6386                           intcon	equ	0xFF2
  6387                           intcon2	equ	0xFF1
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           postdec1	equ	0xFE5
  6391                           fsr1l	equ	0xFE1
  6392                           indf2	equ	0xFDF
  6393                           postinc2	equ	0xFDE
  6394                           postdec2	equ	0xFDD
  6395                           fsr2h	equ	0xFDA
  6396                           fsr2l	equ	0xFD9
  6397                           status	equ	0xFD8
  6398                           
  6399 ;; *************** function _Rcmd2red *****************
  6400 ;; Defined at:
  6401 ;;		line 328 in file "ST7735_TFT.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;		None
  6404 ;; Auto vars:     Size  Location     Type
  6405 ;;		None
  6406 ;; Return value:  Size  Location     Type
  6407 ;;		None               void
  6408 ;; Registers used:
  6409 ;;		wreg, status,2, cstack
  6410 ;; Tracked objects:
  6411 ;;		On entry : 0/0
  6412 ;;		On exit  : 0/0
  6413 ;;		Unchanged: 0/0
  6414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;Total ram usage:        0 bytes
  6420 ;; Hardware stack levels used:    1
  6421 ;; Hardware stack levels required when called:    5
  6422 ;; This function calls:
  6423 ;;		_write_command
  6424 ;;		_write_data
  6425 ;; This function is called by:
  6426 ;;		_TFT_GreenTab_Initialize
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text24
  6431  00181E                     __ptext24:
  6432                           	opt stack 0
  6433  00181E                     _Rcmd2red:
  6434                           	opt stack 23
  6435                           
  6436                           ;ST7735_TFT.c: 330: write_command(0x2A);
  6437                           
  6438                           ;incstack = 0
  6439  00181E  0E2A               	movlw	42
  6440  001820  EC8F  F00D         	call	_write_command
  6441                           
  6442                           ;ST7735_TFT.c: 331: write_data(0x00); write_data(0x00);
  6443  001824  0E00               	movlw	0
  6444  001826  EC87  F00D         	call	_write_data
  6445  00182A  0E00               	movlw	0
  6446  00182C  EC87  F00D         	call	_write_data
  6447                           
  6448                           ;ST7735_TFT.c: 332: write_data(0x00); write_data(0x7F);
  6449  001830  0E00               	movlw	0
  6450  001832  EC87  F00D         	call	_write_data
  6451  001836  0E7F               	movlw	127
  6452  001838  EC87  F00D         	call	_write_data
  6453                           
  6454                           ;ST7735_TFT.c: 333: write_command(0x2B);
  6455  00183C  0E2B               	movlw	43
  6456  00183E  EC8F  F00D         	call	_write_command
  6457                           
  6458                           ;ST7735_TFT.c: 334: write_data(0x00); write_data(0x00);
  6459  001842  0E00               	movlw	0
  6460  001844  EC87  F00D         	call	_write_data
  6461  001848  0E00               	movlw	0
  6462  00184A  EC87  F00D         	call	_write_data
  6463                           
  6464                           ;ST7735_TFT.c: 335: write_data(0x00); write_data(0x9F);
  6465  00184E  0E00               	movlw	0
  6466  001850  EC87  F00D         	call	_write_data
  6467  001854  0E9F               	movlw	159
  6468  001856  EC87  F00D         	call	_write_data
  6469  00185A  0012               	return		;funcret
  6470  00185C                     __end_of_Rcmd2red:
  6471                           	opt stack 0
  6472                           tblptru	equ	0xFF8
  6473                           tblptrh	equ	0xFF7
  6474                           tblptrl	equ	0xFF6
  6475                           tablat	equ	0xFF5
  6476                           prodh	equ	0xFF4
  6477                           prodl	equ	0xFF3
  6478                           intcon	equ	0xFF2
  6479                           intcon2	equ	0xFF1
  6480                           postinc0	equ	0xFEE
  6481                           wreg	equ	0xFE8
  6482                           postdec1	equ	0xFE5
  6483                           fsr1l	equ	0xFE1
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491 ;; *************** function _Rcmd1 *****************
  6492 ;; Defined at:
  6493 ;;		line 281 in file "ST7735_TFT.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;		None
  6496 ;; Auto vars:     Size  Location     Type
  6497 ;;		None
  6498 ;; Return value:  Size  Location     Type
  6499 ;;		None               void
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;Total ram usage:        0 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    5
  6514 ;; This function calls:
  6515 ;;		_delay_ms
  6516 ;;		_write_command
  6517 ;;		_write_data
  6518 ;; This function is called by:
  6519 ;;		_TFT_GreenTab_Initialize
  6520 ;;		_TFT_BlackTab_Initialize
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text25
  6525  000CD4                     __ptext25:
  6526                           	opt stack 0
  6527  000CD4                     _Rcmd1:
  6528                           	opt stack 23
  6529                           
  6530                           ;ST7735_TFT.c: 283: write_command(0x01);
  6531                           
  6532                           ;incstack = 0
  6533  000CD4  0E01               	movlw	1
  6534  000CD6  EC8F  F00D         	call	_write_command
  6535                           
  6536                           ;ST7735_TFT.c: 284: delay_ms(150);
  6537  000CDA  0E00               	movlw	0
  6538  000CDC  6E18               	movwf	delay_ms@ms+1,c
  6539  000CDE  0E96               	movlw	150
  6540  000CE0  6E17               	movwf	delay_ms@ms,c
  6541  000CE2  EC57  F00B         	call	_delay_ms	;wreg free
  6542                           
  6543                           ;ST7735_TFT.c: 285: write_command(0x11);
  6544  000CE6  0E11               	movlw	17
  6545  000CE8  EC8F  F00D         	call	_write_command
  6546                           
  6547                           ;ST7735_TFT.c: 286: delay_ms(500);
  6548  000CEC  0E01               	movlw	1
  6549  000CEE  6E18               	movwf	delay_ms@ms+1,c
  6550  000CF0  0EF4               	movlw	244
  6551  000CF2  6E17               	movwf	delay_ms@ms,c
  6552  000CF4  EC57  F00B         	call	_delay_ms	;wreg free
  6553                           
  6554                           ;ST7735_TFT.c: 287: write_command(0xB1);
  6555  000CF8  0EB1               	movlw	177
  6556  000CFA  EC8F  F00D         	call	_write_command
  6557                           
  6558                           ;ST7735_TFT.c: 288: write_data(0x01);
  6559  000CFE  0E01               	movlw	1
  6560  000D00  EC87  F00D         	call	_write_data
  6561                           
  6562                           ;ST7735_TFT.c: 289: write_data(0x2C);
  6563  000D04  0E2C               	movlw	44
  6564  000D06  EC87  F00D         	call	_write_data
  6565                           
  6566                           ;ST7735_TFT.c: 290: write_data(0x2D);
  6567  000D0A  0E2D               	movlw	45
  6568  000D0C  EC87  F00D         	call	_write_data
  6569                           
  6570                           ;ST7735_TFT.c: 291: write_command(0xB2);
  6571  000D10  0EB2               	movlw	178
  6572  000D12  EC8F  F00D         	call	_write_command
  6573                           
  6574                           ;ST7735_TFT.c: 292: write_data(0x01);
  6575  000D16  0E01               	movlw	1
  6576  000D18  EC87  F00D         	call	_write_data
  6577                           
  6578                           ;ST7735_TFT.c: 293: write_data(0x2C);
  6579  000D1C  0E2C               	movlw	44
  6580  000D1E  EC87  F00D         	call	_write_data
  6581                           
  6582                           ;ST7735_TFT.c: 294: write_data(0x2D);
  6583  000D22  0E2D               	movlw	45
  6584  000D24  EC87  F00D         	call	_write_data
  6585                           
  6586                           ;ST7735_TFT.c: 295: write_command(0xB3);
  6587  000D28  0EB3               	movlw	179
  6588  000D2A  EC8F  F00D         	call	_write_command
  6589                           
  6590                           ;ST7735_TFT.c: 296: write_data(0x01);
  6591  000D2E  0E01               	movlw	1
  6592  000D30  EC87  F00D         	call	_write_data
  6593                           
  6594                           ;ST7735_TFT.c: 297: write_data(0x2C);
  6595  000D34  0E2C               	movlw	44
  6596  000D36  EC87  F00D         	call	_write_data
  6597                           
  6598                           ;ST7735_TFT.c: 298: write_data(0x2D);
  6599  000D3A  0E2D               	movlw	45
  6600  000D3C  EC87  F00D         	call	_write_data
  6601                           
  6602                           ;ST7735_TFT.c: 299: write_data(0x01);
  6603  000D40  0E01               	movlw	1
  6604  000D42  EC87  F00D         	call	_write_data
  6605                           
  6606                           ;ST7735_TFT.c: 300: write_data(0x2C);
  6607  000D46  0E2C               	movlw	44
  6608  000D48  EC87  F00D         	call	_write_data
  6609                           
  6610                           ;ST7735_TFT.c: 301: write_data(0x2D);
  6611  000D4C  0E2D               	movlw	45
  6612  000D4E  EC87  F00D         	call	_write_data
  6613                           
  6614                           ;ST7735_TFT.c: 302: write_command(0xB4);
  6615  000D52  0EB4               	movlw	180
  6616  000D54  EC8F  F00D         	call	_write_command
  6617                           
  6618                           ;ST7735_TFT.c: 303: write_data(0x07);
  6619  000D58  0E07               	movlw	7
  6620  000D5A  EC87  F00D         	call	_write_data
  6621                           
  6622                           ;ST7735_TFT.c: 304: write_command(0xC0);
  6623  000D5E  0EC0               	movlw	192
  6624  000D60  EC8F  F00D         	call	_write_command
  6625                           
  6626                           ;ST7735_TFT.c: 305: write_data(0xA2);
  6627  000D64  0EA2               	movlw	162
  6628  000D66  EC87  F00D         	call	_write_data
  6629                           
  6630                           ;ST7735_TFT.c: 306: write_data(0x02);
  6631  000D6A  0E02               	movlw	2
  6632  000D6C  EC87  F00D         	call	_write_data
  6633                           
  6634                           ;ST7735_TFT.c: 307: write_data(0x84);
  6635  000D70  0E84               	movlw	132
  6636  000D72  EC87  F00D         	call	_write_data
  6637                           
  6638                           ;ST7735_TFT.c: 308: write_command(0xC1);
  6639  000D76  0EC1               	movlw	193
  6640  000D78  EC8F  F00D         	call	_write_command
  6641                           
  6642                           ;ST7735_TFT.c: 309: write_data(0xC5);
  6643  000D7C  0EC5               	movlw	197
  6644  000D7E  EC87  F00D         	call	_write_data
  6645                           
  6646                           ;ST7735_TFT.c: 310: write_command(0xC2);
  6647  000D82  0EC2               	movlw	194
  6648  000D84  EC8F  F00D         	call	_write_command
  6649                           
  6650                           ;ST7735_TFT.c: 311: write_data(0x0A);
  6651  000D88  0E0A               	movlw	10
  6652  000D8A  EC87  F00D         	call	_write_data
  6653                           
  6654                           ;ST7735_TFT.c: 312: write_data(0x00);
  6655  000D8E  0E00               	movlw	0
  6656  000D90  EC87  F00D         	call	_write_data
  6657                           
  6658                           ;ST7735_TFT.c: 313: write_command(0xC3);
  6659  000D94  0EC3               	movlw	195
  6660  000D96  EC8F  F00D         	call	_write_command
  6661                           
  6662                           ;ST7735_TFT.c: 314: write_data(0x8A);
  6663  000D9A  0E8A               	movlw	138
  6664  000D9C  EC87  F00D         	call	_write_data
  6665                           
  6666                           ;ST7735_TFT.c: 315: write_data(0x2A);
  6667  000DA0  0E2A               	movlw	42
  6668  000DA2  EC87  F00D         	call	_write_data
  6669                           
  6670                           ;ST7735_TFT.c: 316: write_command(0xC4);
  6671  000DA6  0EC4               	movlw	196
  6672  000DA8  EC8F  F00D         	call	_write_command
  6673                           
  6674                           ;ST7735_TFT.c: 317: write_data(0x8A);
  6675  000DAC  0E8A               	movlw	138
  6676  000DAE  EC87  F00D         	call	_write_data
  6677                           
  6678                           ;ST7735_TFT.c: 318: write_data(0xEE);
  6679  000DB2  0EEE               	movlw	238
  6680  000DB4  EC87  F00D         	call	_write_data
  6681                           
  6682                           ;ST7735_TFT.c: 319: write_command(0xC5);
  6683  000DB8  0EC5               	movlw	197
  6684  000DBA  EC8F  F00D         	call	_write_command
  6685                           
  6686                           ;ST7735_TFT.c: 320: write_data(0x0E);
  6687  000DBE  0E0E               	movlw	14
  6688  000DC0  EC87  F00D         	call	_write_data
  6689                           
  6690                           ;ST7735_TFT.c: 321: write_command(0x20);
  6691  000DC4  0E20               	movlw	32
  6692  000DC6  EC8F  F00D         	call	_write_command
  6693                           
  6694                           ;ST7735_TFT.c: 322: write_command(0x36);
  6695  000DCA  0E36               	movlw	54
  6696  000DCC  EC8F  F00D         	call	_write_command
  6697                           
  6698                           ;ST7735_TFT.c: 323: write_data(0xC8);
  6699  000DD0  0EC8               	movlw	200
  6700  000DD2  EC87  F00D         	call	_write_data
  6701                           
  6702                           ;ST7735_TFT.c: 324: write_command(0x3A);
  6703  000DD6  0E3A               	movlw	58
  6704  000DD8  EC8F  F00D         	call	_write_command
  6705                           
  6706                           ;ST7735_TFT.c: 325: write_data(0x05);
  6707  000DDC  0E05               	movlw	5
  6708  000DDE  EC87  F00D         	call	_write_data
  6709  000DE2  0012               	return		;funcret
  6710  000DE4                     __end_of_Rcmd1:
  6711                           	opt stack 0
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           intcon	equ	0xFF2
  6719                           intcon2	equ	0xFF1
  6720                           postinc0	equ	0xFEE
  6721                           wreg	equ	0xFE8
  6722                           postdec1	equ	0xFE5
  6723                           fsr1l	equ	0xFE1
  6724                           indf2	equ	0xFDF
  6725                           postinc2	equ	0xFDE
  6726                           postdec2	equ	0xFDD
  6727                           fsr2h	equ	0xFDA
  6728                           fsr2l	equ	0xFD9
  6729                           status	equ	0xFD8
  6730                           
  6731 ;; *************** function _write_data *****************
  6732 ;; Defined at:
  6733 ;;		line 209 in file "ST7735_TFT.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;  data_           1    wreg     unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  data_           1   18[COMRAM] unsigned char 
  6738 ;; Return value:  Size  Location     Type
  6739 ;;		None               void
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;Total ram usage:        1 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    4
  6754 ;; This function calls:
  6755 ;;		_spiwrite
  6756 ;; This function is called by:
  6757 ;;		_Rcmd1
  6758 ;;		_Rcmd2red
  6759 ;;		_Rcmd3
  6760 ;;		_setAddrWindow
  6761 ;;		_drawPixel
  6762 ;;		_TFT_GreenTab_Initialize
  6763 ;;		_Bcmd
  6764 ;;		_setScrollDefinition
  6765 ;;		_Rcmd2green
  6766 ;;		_VerticalScroll
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text26
  6771  001B0E                     __ptext26:
  6772                           	opt stack 0
  6773  001B0E                     _write_data:
  6774                           	opt stack 22
  6775                           
  6776                           ;incstack = 0
  6777                           ;write_data@data_ stored from wreg
  6778  001B0E  6E13               	movwf	write_data@data_,c
  6779                           
  6780                           ;ST7735_TFT.c: 211: PORTDbits.RD1 = 0;
  6781  001B10  9283               	bcf	3971,1,c	;volatile
  6782                           
  6783                           ;ST7735_TFT.c: 212: PORTDbits.RD0 = 1;
  6784  001B12  8083               	bsf	3971,0,c	;volatile
  6785                           
  6786                           ;ST7735_TFT.c: 213: spiwrite(data_);
  6787  001B14  5013               	movf	write_data@data_,w,c
  6788  001B16  EC46  F00D         	call	_spiwrite
  6789                           
  6790                           ;ST7735_TFT.c: 214: PORTDbits.RD1 = 1;
  6791  001B1A  8283               	bsf	3971,1,c	;volatile
  6792  001B1C  0012               	return		;funcret
  6793  001B1E                     __end_of_write_data:
  6794                           	opt stack 0
  6795                           tblptru	equ	0xFF8
  6796                           tblptrh	equ	0xFF7
  6797                           tblptrl	equ	0xFF6
  6798                           tablat	equ	0xFF5
  6799                           prodh	equ	0xFF4
  6800                           prodl	equ	0xFF3
  6801                           intcon	equ	0xFF2
  6802                           intcon2	equ	0xFF1
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           postdec1	equ	0xFE5
  6806                           fsr1l	equ	0xFE1
  6807                           indf2	equ	0xFDF
  6808                           postinc2	equ	0xFDE
  6809                           postdec2	equ	0xFDD
  6810                           fsr2h	equ	0xFDA
  6811                           fsr2l	equ	0xFD9
  6812                           status	equ	0xFD8
  6813                           
  6814 ;; *************** function _write_command *****************
  6815 ;; Defined at:
  6816 ;;		line 198 in file "ST7735_TFT.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  cmd_            1    wreg     unsigned char 
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  cmd_            1   18[COMRAM] unsigned char 
  6821 ;; Return value:  Size  Location     Type
  6822 ;;		None               void
  6823 ;; Registers used:
  6824 ;;		wreg, status,2, cstack
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;Total ram usage:        1 bytes
  6835 ;; Hardware stack levels used:    1
  6836 ;; Hardware stack levels required when called:    4
  6837 ;; This function calls:
  6838 ;;		_spiwrite
  6839 ;; This function is called by:
  6840 ;;		_Rcmd1
  6841 ;;		_Rcmd2red
  6842 ;;		_Rcmd3
  6843 ;;		_setAddrWindow
  6844 ;;		_TFT_GreenTab_Initialize
  6845 ;;		_Bcmd
  6846 ;;		_setScrollDefinition
  6847 ;;		_Rcmd2green
  6848 ;;		_VerticalScroll
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text27
  6853  001B1E                     __ptext27:
  6854                           	opt stack 0
  6855  001B1E                     _write_command:
  6856                           	opt stack 22
  6857                           
  6858                           ;incstack = 0
  6859                           ;write_command@cmd_ stored from wreg
  6860  001B1E  6E13               	movwf	write_command@cmd_,c
  6861                           
  6862                           ;ST7735_TFT.c: 200: PORTDbits.RD1 = 0;
  6863  001B20  9283               	bcf	3971,1,c	;volatile
  6864                           
  6865                           ;ST7735_TFT.c: 202: PORTDbits.RD0 = 0;
  6866  001B22  9083               	bcf	3971,0,c	;volatile
  6867                           
  6868                           ;ST7735_TFT.c: 203: spiwrite(cmd_);
  6869  001B24  5013               	movf	write_command@cmd_,w,c
  6870  001B26  EC46  F00D         	call	_spiwrite
  6871                           
  6872                           ;ST7735_TFT.c: 205: PORTDbits.RD1 = 1;
  6873  001B2A  8283               	bsf	3971,1,c	;volatile
  6874  001B2C  0012               	return		;funcret
  6875  001B2E                     __end_of_write_command:
  6876                           	opt stack 0
  6877                           tblptru	equ	0xFF8
  6878                           tblptrh	equ	0xFF7
  6879                           tblptrl	equ	0xFF6
  6880                           tablat	equ	0xFF5
  6881                           prodh	equ	0xFF4
  6882                           prodl	equ	0xFF3
  6883                           intcon	equ	0xFF2
  6884                           intcon2	equ	0xFF1
  6885                           postinc0	equ	0xFEE
  6886                           wreg	equ	0xFE8
  6887                           postdec1	equ	0xFE5
  6888                           fsr1l	equ	0xFE1
  6889                           indf2	equ	0xFDF
  6890                           postinc2	equ	0xFDE
  6891                           postdec2	equ	0xFDD
  6892                           fsr2h	equ	0xFDA
  6893                           fsr2l	equ	0xFD9
  6894                           status	equ	0xFD8
  6895                           
  6896 ;; *************** function _spiwrite *****************
  6897 ;; Defined at:
  6898 ;;		line 189 in file "ST7735_TFT.c"
  6899 ;; Parameters:    Size  Location     Type
  6900 ;;  spidata         1    wreg     unsigned char 
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;  spidata         1   17[COMRAM] unsigned char 
  6903 ;;  x               1   16[COMRAM] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;		None               void
  6906 ;; Registers used:
  6907 ;;		wreg
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6916 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;Total ram usage:        2 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    3
  6920 ;; This function calls:
  6921 ;;		Nothing
  6922 ;; This function is called by:
  6923 ;;		_write_command
  6924 ;;		_write_data
  6925 ;;		_drawFastVLine
  6926 ;;		_fillRectangle
  6927 ;;		_drawFastHLine
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text28
  6932  001A8C                     __ptext28:
  6933                           	opt stack 0
  6934  001A8C                     _spiwrite:
  6935                           	opt stack 24
  6936                           
  6937                           ;incstack = 0
  6938                           ;spiwrite@spidata stored from wreg
  6939  001A8C  6E12               	movwf	spiwrite@spidata,c
  6940                           
  6941                           ;ST7735_TFT.c: 191: char x;
  6942                           ;ST7735_TFT.c: 192: PIR1bits.SSPIF = 0;
  6943  001A8E  969E               	bcf	3998,3,c	;volatile
  6944                           
  6945                           ;ST7735_TFT.c: 193: x = SSPBUF;
  6946  001A90  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6947                           
  6948                           ;ST7735_TFT.c: 194: SSPBUF = spidata;
  6949  001A94  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6950                           
  6951                           ;ST7735_TFT.c: 195: while (!SSPSTATbits.BF);
  6952  001A98  D000               	goto	l234
  6953  001A9A                     l234:
  6954  001A9A  A0C7               	btfss	4039,0,c	;volatile
  6955  001A9C  D7FE               	goto	l234
  6956  001A9E  0012               	return		;funcret
  6957  001AA0                     __end_of_spiwrite:
  6958                           	opt stack 0
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           intcon	equ	0xFF2
  6966                           intcon2	equ	0xFF1
  6967                           postinc0	equ	0xFEE
  6968                           wreg	equ	0xFE8
  6969                           postdec1	equ	0xFE5
  6970                           fsr1l	equ	0xFE1
  6971                           indf2	equ	0xFDF
  6972                           postinc2	equ	0xFDE
  6973                           postdec2	equ	0xFDD
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function _LCD_Reset *****************
  6979 ;; Defined at:
  6980 ;;		line 217 in file "ST7735_TFT.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;		None
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;		None
  6985 ;; Return value:  Size  Location     Type
  6986 ;;		None               void
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;Total ram usage:        0 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    5
  7001 ;; This function calls:
  7002 ;;		_delay_ms
  7003 ;; This function is called by:
  7004 ;;		_Initialize_Screen
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text29
  7009  001AB4                     __ptext29:
  7010                           	opt stack 0
  7011  001AB4                     _LCD_Reset:
  7012                           	opt stack 24
  7013                           
  7014                           ;ST7735_TFT.c: 219: PORTDbits.RD2 = 0;
  7015                           
  7016                           ;incstack = 0
  7017  001AB4  9483               	bcf	3971,2,c	;volatile
  7018                           
  7019                           ;ST7735_TFT.c: 220: delay_ms(100);
  7020  001AB6  0E00               	movlw	0
  7021  001AB8  6E18               	movwf	delay_ms@ms+1,c
  7022  001ABA  0E64               	movlw	100
  7023  001ABC  6E17               	movwf	delay_ms@ms,c
  7024  001ABE  EC57  F00B         	call	_delay_ms	;wreg free
  7025                           
  7026                           ;ST7735_TFT.c: 221: PORTDbits.RD2 = 1;
  7027  001AC2  8483               	bsf	3971,2,c	;volatile
  7028  001AC4  0012               	return		;funcret
  7029  001AC6                     __end_of_LCD_Reset:
  7030                           	opt stack 0
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           intcon	equ	0xFF2
  7038                           intcon2	equ	0xFF1
  7039                           postinc0	equ	0xFEE
  7040                           wreg	equ	0xFE8
  7041                           postdec1	equ	0xFE5
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           fsr2h	equ	0xFDA
  7047                           fsr2l	equ	0xFD9
  7048                           status	equ	0xFD8
  7049                           
  7050 ;; *************** function _delay_ms *****************
  7051 ;; Defined at:
  7052 ;;		line 64 in file "ST7735_TFT.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;  ms              2   22[COMRAM] int 
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;  count           2   26[COMRAM] int 
  7057 ;; Return value:  Size  Location     Type
  7058 ;;		None               void
  7059 ;; Registers used:
  7060 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7066 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7068 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7069 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;Total ram usage:        6 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    4
  7073 ;; This function calls:
  7074 ;;		___wmul
  7075 ;; This function is called by:
  7076 ;;		_LCD_Reset
  7077 ;;		_Rcmd1
  7078 ;;		_Rcmd3
  7079 ;;		_Bcmd
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text30
  7084  0016AE                     __ptext30:
  7085                           	opt stack 0
  7086  0016AE                     _delay_ms:
  7087                           	opt stack 23
  7088                           
  7089                           ;ST7735_TFT.c: 70: int count;
  7090                           ;ST7735_TFT.c: 71: count = 8000000/4000/8 * ms;
  7091                           
  7092                           ;incstack = 0
  7093  0016AE  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  7094  0016B2  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  7095  0016B6  0E00               	movlw	0
  7096  0016B8  6E14               	movwf	___wmul@multiplicand+1,c
  7097  0016BA  0EFA               	movlw	250
  7098  0016BC  6E13               	movwf	___wmul@multiplicand,c
  7099  0016BE  ECCF  F00C         	call	___wmul	;wreg free
  7100  0016C2  C011  F01B         	movff	?___wmul,delay_ms@count
  7101  0016C6  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  7102                           
  7103                           ;ST7735_TFT.c: 72: count = (0xffff - count);
  7104  0016CA  C01B  F019         	movff	delay_ms@count,??_delay_ms
  7105  0016CE  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  7106  0016D2  1E19               	comf	??_delay_ms,f,c
  7107  0016D4  1E1A               	comf	??_delay_ms+1,f,c
  7108  0016D6  4A19               	infsnz	??_delay_ms,f,c
  7109  0016D8  2A1A               	incf	??_delay_ms+1,f,c
  7110  0016DA  0EFF               	movlw	255
  7111  0016DC  2419               	addwf	??_delay_ms,w,c
  7112  0016DE  6E1B               	movwf	delay_ms@count,c
  7113  0016E0  0EFF               	movlw	255
  7114  0016E2  201A               	addwfc	??_delay_ms+1,w,c
  7115  0016E4  6E1C               	movwf	delay_ms@count+1,c
  7116                           
  7117                           ;ST7735_TFT.c: 74: T3CON = 0xb8;
  7118  0016E6  0EB8               	movlw	184
  7119  0016E8  6EB1               	movwf	4017,c	;volatile
  7120                           
  7121                           ;ST7735_TFT.c: 76: TMR3L = count & 0x00ff;
  7122  0016EA  C01B  FFB2         	movff	delay_ms@count,4018	;volatile
  7123                           
  7124                           ;ST7735_TFT.c: 77: TMR3H = count >> 8;
  7125  0016EE  501C               	movf	delay_ms@count+1,w,c
  7126  0016F0  6EB3               	movwf	4019,c	;volatile
  7127                           
  7128                           ;ST7735_TFT.c: 79: PIR2bits.TMR3IF = 0;
  7129  0016F2  92A1               	bcf	4001,1,c	;volatile
  7130                           
  7131                           ;ST7735_TFT.c: 80: T3CONbits.TMR3ON = 1;
  7132  0016F4  80B1               	bsf	4017,0,c	;volatile
  7133                           
  7134                           ;ST7735_TFT.c: 82: while (PIR2bits.TMR3IF == 0);
  7135  0016F6  D000               	goto	l224
  7136  0016F8                     l224:
  7137  0016F8  A2A1               	btfss	4001,1,c	;volatile
  7138  0016FA  D7FE               	goto	l224
  7139                           
  7140                           ;ST7735_TFT.c: 83: T3CONbits.TMR3ON = 0;
  7141  0016FC  90B1               	bcf	4017,0,c	;volatile
  7142  0016FE  0012               	return		;funcret
  7143  001700                     __end_of_delay_ms:
  7144                           	opt stack 0
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           intcon	equ	0xFF2
  7152                           intcon2	equ	0xFF1
  7153                           postinc0	equ	0xFEE
  7154                           wreg	equ	0xFE8
  7155                           postdec1	equ	0xFE5
  7156                           fsr1l	equ	0xFE1
  7157                           indf2	equ	0xFDF
  7158                           postinc2	equ	0xFDE
  7159                           postdec2	equ	0xFDD
  7160                           fsr2h	equ	0xFDA
  7161                           fsr2l	equ	0xFD9
  7162                           status	equ	0xFD8
  7163                           
  7164 ;; *************** function ___wmul *****************
  7165 ;; Defined at:
  7166 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  multiplier      2   16[COMRAM] unsigned int 
  7169 ;;  multiplicand    2   18[COMRAM] unsigned int 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  product         2   20[COMRAM] unsigned int 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  2   16[COMRAM] unsigned int 
  7174 ;; Registers used:
  7175 ;;		wreg, status,2, status,0, prodl, prodh
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7181 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;Total ram usage:        6 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    3
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		_delay_ms
  7192 ;;		_drawChar
  7193 ;;		_printf
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           	psect	text31
  7198  00199E                     __ptext31:
  7199                           	opt stack 0
  7200  00199E                     ___wmul:
  7201                           	opt stack 26
  7202                           
  7203                           ;incstack = 0
  7204  00199E  5011               	movf	___wmul@multiplier,w,c
  7205  0019A0  0213               	mulwf	___wmul@multiplicand,c
  7206  0019A2  CFF3 F015          	movff	prodl,___wmul@product
  7207  0019A6  CFF4 F016          	movff	prodh,___wmul@product+1
  7208  0019AA  5011               	movf	___wmul@multiplier,w,c
  7209  0019AC  0214               	mulwf	___wmul@multiplicand+1,c
  7210  0019AE  50F3               	movf	prodl,w,c
  7211  0019B0  2616               	addwf	___wmul@product+1,f,c
  7212  0019B2  5012               	movf	___wmul@multiplier+1,w,c
  7213  0019B4  0213               	mulwf	___wmul@multiplicand,c
  7214  0019B6  50F3               	movf	prodl,w,c
  7215  0019B8  2616               	addwf	___wmul@product+1,f,c
  7216  0019BA  C015  F011         	movff	___wmul@product,?___wmul
  7217  0019BE  C016  F012         	movff	___wmul@product+1,?___wmul+1
  7218  0019C2  D000               	goto	l719
  7219  0019C4                     l719:
  7220  0019C4  0012               	return		;funcret
  7221  0019C6                     __end_of___wmul:
  7222                           	opt stack 0
  7223                           tblptru	equ	0xFF8
  7224                           tblptrh	equ	0xFF7
  7225                           tblptrl	equ	0xFF6
  7226                           tablat	equ	0xFF5
  7227                           prodh	equ	0xFF4
  7228                           prodl	equ	0xFF3
  7229                           intcon	equ	0xFF2
  7230                           intcon2	equ	0xFF1
  7231                           postinc0	equ	0xFEE
  7232                           wreg	equ	0xFE8
  7233                           postdec1	equ	0xFE5
  7234                           fsr1l	equ	0xFE1
  7235                           indf2	equ	0xFDF
  7236                           postinc2	equ	0xFDE
  7237                           postdec2	equ	0xFDD
  7238                           fsr2h	equ	0xFDA
  7239                           fsr2l	equ	0xFD9
  7240                           status	equ	0xFD8
  7241                           
  7242 ;; *************** function _Do_Init *****************
  7243 ;; Defined at:
  7244 ;;		line 191 in file "lab11t.c"
  7245 ;; Parameters:    Size  Location     Type
  7246 ;;		None
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;		None
  7249 ;; Return value:  Size  Location     Type
  7250 ;;		None               void
  7251 ;; Registers used:
  7252 ;;		wreg, status,2, status,0, cstack
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;Total ram usage:        0 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    7
  7265 ;; This function calls:
  7266 ;;		_DS1621_Init
  7267 ;;		_I2C_Init
  7268 ;;		_init_UART
  7269 ;; This function is called by:
  7270 ;;		_main
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text32
  7275  00189A                     __ptext32:
  7276                           	opt stack 0
  7277  00189A                     _Do_Init:
  7278                           	opt stack 23
  7279                           
  7280                           ;lab11t.c: 193: init_UART();
  7281                           
  7282                           ;incstack = 0
  7283  00189A  EC50  F00D         	call	_init_UART	;wreg free
  7284                           
  7285                           ;lab11t.c: 195: OSCCON=0x70;
  7286  00189E  0E70               	movlw	112
  7287  0018A0  6ED3               	movwf	4051,c	;volatile
  7288                           
  7289                           ;lab11t.c: 196: DS1621_Init();
  7290  0018A2  EC04  F00D         	call	_DS1621_Init	;wreg free
  7291                           
  7292                           ;lab11t.c: 198: ADCON1= 0x0F;
  7293  0018A6  0E0F               	movlw	15
  7294  0018A8  6EC1               	movwf	4033,c	;volatile
  7295                           
  7296                           ;lab11t.c: 199: TRISA = 0x00;
  7297  0018AA  0E00               	movlw	0
  7298  0018AC  6E92               	movwf	3986,c	;volatile
  7299                           
  7300                           ;lab11t.c: 200: TRISB = 0x11;
  7301  0018AE  0E11               	movlw	17
  7302  0018B0  6E93               	movwf	3987,c	;volatile
  7303                           
  7304                           ;lab11t.c: 201: TRISC = 0x00;
  7305  0018B2  0E00               	movlw	0
  7306  0018B4  6E94               	movwf	3988,c	;volatile
  7307                           
  7308                           ;lab11t.c: 202: TRISD = 0x40;
  7309  0018B6  0E40               	movlw	64
  7310  0018B8  6E95               	movwf	3989,c	;volatile
  7311                           
  7312                           ;lab11t.c: 203: TRISE = 0x00;
  7313  0018BA  0E00               	movlw	0
  7314  0018BC  6E96               	movwf	3990,c	;volatile
  7315                           
  7316                           ;lab11t.c: 204: RBPU=0;
  7317  0018BE  9EF1               	bcf	intcon2,7,c	;volatile
  7318                           
  7319                           ;lab11t.c: 205: I2C_Init(100000);
  7320  0018C0  0EA0               	movlw	160
  7321  0018C2  6E11               	movwf	I2C_Init@c,c
  7322  0018C4  0E86               	movlw	134
  7323  0018C6  6E12               	movwf	I2C_Init@c+1,c
  7324  0018C8  0E01               	movlw	1
  7325  0018CA  6E13               	movwf	I2C_Init@c+2,c
  7326  0018CC  0E00               	movlw	0
  7327  0018CE  6E14               	movwf	I2C_Init@c+3,c
  7328  0018D0  ECAA  F00D         	call	_I2C_Init	;wreg free
  7329  0018D4  0012               	return		;funcret
  7330  0018D6                     __end_of_Do_Init:
  7331                           	opt stack 0
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           intcon	equ	0xFF2
  7339                           intcon2	equ	0xFF1
  7340                           postinc0	equ	0xFEE
  7341                           wreg	equ	0xFE8
  7342                           postdec1	equ	0xFE5
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           fsr2h	equ	0xFDA
  7348                           fsr2l	equ	0xFD9
  7349                           status	equ	0xFD8
  7350                           
  7351 ;; *************** function _init_UART *****************
  7352 ;; Defined at:
  7353 ;;		line 214 in file "lab11t.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;		None               void
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;Total ram usage:        0 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    4
  7374 ;; This function calls:
  7375 ;;		_OpenUSART
  7376 ;; This function is called by:
  7377 ;;		_Do_Init
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text33
  7382  001AA0                     __ptext33:
  7383                           	opt stack 0
  7384  001AA0                     _init_UART:
  7385                           	opt stack 25
  7386                           
  7387                           ;lab11t.c: 216: OpenUSART (0b01111111 & 0b10111111 & 0b11111110 & 0b11111101 & 0b1111111
      +                          1 & 0b11111111, 25);
  7388                           
  7389                           ;incstack = 0
  7390  001AA0  0E00               	movlw	0
  7391  001AA2  6E12               	movwf	OpenUSART@spbrg+1,c
  7392  001AA4  0E19               	movlw	25
  7393  001AA6  6E11               	movwf	OpenUSART@spbrg,c
  7394  001AA8  0E3C               	movlw	60
  7395  001AAA  EC6C  F00A         	call	_OpenUSART
  7396                           
  7397                           ;lab11t.c: 217: OSCCON = 0x70;
  7398  001AAE  0E70               	movlw	112
  7399  001AB0  6ED3               	movwf	4051,c	;volatile
  7400  001AB2  0012               	return		;funcret
  7401  001AB4                     __end_of_init_UART:
  7402                           	opt stack 0
  7403                           tblptru	equ	0xFF8
  7404                           tblptrh	equ	0xFF7
  7405                           tblptrl	equ	0xFF6
  7406                           tablat	equ	0xFF5
  7407                           prodh	equ	0xFF4
  7408                           prodl	equ	0xFF3
  7409                           intcon	equ	0xFF2
  7410                           intcon2	equ	0xFF1
  7411                           postinc0	equ	0xFEE
  7412                           wreg	equ	0xFE8
  7413                           postdec1	equ	0xFE5
  7414                           fsr1l	equ	0xFE1
  7415                           indf2	equ	0xFDF
  7416                           postinc2	equ	0xFDE
  7417                           postdec2	equ	0xFDD
  7418                           fsr2h	equ	0xFDA
  7419                           fsr2l	equ	0xFD9
  7420                           status	equ	0xFD8
  7421                           
  7422 ;; *************** function _OpenUSART *****************
  7423 ;; Defined at:
  7424 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;  config          1    wreg     unsigned char 
  7427 ;;  spbrg           2   16[COMRAM] unsigned int 
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  config          1   18[COMRAM] unsigned char 
  7430 ;; Return value:  Size  Location     Type
  7431 ;;		None               void
  7432 ;; Registers used:
  7433 ;;		wreg, status,2
  7434 ;; Tracked objects:
  7435 ;;		On entry : 0/0
  7436 ;;		On exit  : 0/0
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7439 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;Total ram usage:        3 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; Hardware stack levels required when called:    3
  7446 ;; This function calls:
  7447 ;;		Nothing
  7448 ;; This function is called by:
  7449 ;;		_init_UART
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           	psect	text34
  7454  0014D8                     __ptext34:
  7455                           	opt stack 0
  7456  0014D8                     _OpenUSART:
  7457                           	opt stack 25
  7458                           
  7459                           ;incstack = 0
  7460                           ;OpenUSART@config stored from wreg
  7461  0014D8  6E13               	movwf	OpenUSART@config,c
  7462  0014DA  0E00               	movlw	0
  7463  0014DC  6EAC               	movwf	4012,c	;volatile
  7464  0014DE  0E00               	movlw	0
  7465  0014E0  6EAB               	movwf	4011,c	;volatile
  7466  0014E2  A013               	btfss	OpenUSART@config,0,c
  7467  0014E4  D002               	goto	l4485
  7468  0014E6  88AC               	bsf	4012,4,c	;volatile
  7469  0014E8  D000               	goto	l4485
  7470  0014EA                     l4485:
  7471  0014EA  A213               	btfss	OpenUSART@config,1,c
  7472  0014EC  D003               	goto	l4489
  7473  0014EE  8CAC               	bsf	4012,6,c	;volatile
  7474  0014F0  8CAB               	bsf	4011,6,c	;volatile
  7475  0014F2  D000               	goto	l4489
  7476  0014F4                     l4489:
  7477  0014F4  A413               	btfss	OpenUSART@config,2,c
  7478  0014F6  D002               	goto	l4493
  7479  0014F8  8EAC               	bsf	4012,7,c	;volatile
  7480  0014FA  D000               	goto	l4493
  7481  0014FC                     l4493:
  7482  0014FC  A613               	btfss	OpenUSART@config,3,c
  7483  0014FE  D002               	goto	l707
  7484  001500  88AB               	bsf	4011,4,c	;volatile
  7485  001502  D002               	goto	l4497
  7486  001504                     l707:
  7487  001504  8AAB               	bsf	4011,5,c	;volatile
  7488  001506  D000               	goto	l4497
  7489  001508                     l4497:
  7490  001508  B813               	btfsc	OpenUSART@config,4,c
  7491  00150A  84AC               	bsf	4012,2,c	;volatile
  7492  00150C  989E               	bcf	3998,4,c	;volatile
  7493  00150E  AA13               	btfss	OpenUSART@config,5,c
  7494  001510  D002               	goto	l4505
  7495  001512  86AB               	bsf	4011,3,c	;volatile
  7496  001514  D000               	goto	l4505
  7497  001516                     l4505:
  7498  001516  AC13               	btfss	OpenUSART@config,6,c
  7499  001518  D002               	goto	l711
  7500  00151A  8A9D               	bsf	3997,5,c	;volatile
  7501  00151C  D001               	goto	l712
  7502  00151E                     l711:
  7503  00151E  9A9D               	bcf	3997,5,c	;volatile
  7504  001520                     l712:
  7505  001520  9A9E               	bcf	3998,5,c	;volatile
  7506  001522  AE13               	btfss	OpenUSART@config,7,c
  7507  001524  D002               	goto	l713
  7508  001526  889D               	bsf	3997,4,c	;volatile
  7509  001528  D001               	goto	l714
  7510  00152A                     l713:
  7511  00152A  989D               	bcf	3997,4,c	;volatile
  7512  00152C                     l714:
  7513  00152C  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  7514  001530  5012               	movf	OpenUSART@spbrg+1,w,c
  7515  001532  6EB0               	movwf	4016,c	;volatile
  7516  001534  8AAC               	bsf	4012,5,c	;volatile
  7517  001536  8EAB               	bsf	4011,7,c	;volatile
  7518  001538  9C94               	bcf	3988,6,c	;volatile
  7519  00153A  8E94               	bsf	3988,7,c	;volatile
  7520  00153C  B8AC               	btfsc	4012,4,c	;volatile
  7521  00153E  BEAC               	btfsc	4012,7,c	;volatile
  7522  001540  D002               	goto	l716
  7523  001542  8C94               	bsf	3988,6,c	;volatile
  7524  001544  D000               	goto	l716
  7525  001546                     l716:
  7526  001546  0012               	return		;funcret
  7527  001548                     __end_of_OpenUSART:
  7528                           	opt stack 0
  7529                           tblptru	equ	0xFF8
  7530                           tblptrh	equ	0xFF7
  7531                           tblptrl	equ	0xFF6
  7532                           tablat	equ	0xFF5
  7533                           prodh	equ	0xFF4
  7534                           prodl	equ	0xFF3
  7535                           intcon	equ	0xFF2
  7536                           intcon2	equ	0xFF1
  7537                           postinc0	equ	0xFEE
  7538                           wreg	equ	0xFE8
  7539                           postdec1	equ	0xFE5
  7540                           fsr1l	equ	0xFE1
  7541                           indf2	equ	0xFDF
  7542                           postinc2	equ	0xFDE
  7543                           postdec2	equ	0xFDD
  7544                           fsr2h	equ	0xFDA
  7545                           fsr2l	equ	0xFD9
  7546                           status	equ	0xFD8
  7547                           
  7548 ;; *************** function _I2C_Init *****************
  7549 ;; Defined at:
  7550 ;;		line 14 in file "I2C_Soft.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  c               4   16[COMRAM] unsigned long 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;		None
  7555 ;; Return value:  Size  Location     Type
  7556 ;;		None               void
  7557 ;; Registers used:
  7558 ;;		wreg, cstack
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;Total ram usage:        4 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    4
  7571 ;; This function calls:
  7572 ;;		_i2cHighScl
  7573 ;;		_i2cHighSda
  7574 ;; This function is called by:
  7575 ;;		_Do_Init
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           	psect	text35
  7580  001B54                     __ptext35:
  7581                           	opt stack 0
  7582  001B54                     _I2C_Init:
  7583                           	opt stack 25
  7584                           
  7585                           ;I2C_Soft.c: 16: i2cHighScl();
  7586                           
  7587                           ;incstack = 0
  7588  001B54  EC9E  F00D         	call	_i2cHighScl	;wreg free
  7589                           
  7590                           ;I2C_Soft.c: 17: i2cHighSda();
  7591  001B58  ECC1  F00D         	call	_i2cHighSda	;wreg free
  7592  001B5C  0012               	return		;funcret
  7593  001B5E                     __end_of_I2C_Init:
  7594                           	opt stack 0
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           intcon2	equ	0xFF1
  7603                           postinc0	equ	0xFEE
  7604                           wreg	equ	0xFE8
  7605                           postdec1	equ	0xFE5
  7606                           fsr1l	equ	0xFE1
  7607                           indf2	equ	0xFDF
  7608                           postinc2	equ	0xFDE
  7609                           postdec2	equ	0xFDD
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _DS1621_Init *****************
  7615 ;; Defined at:
  7616 ;;		line 21 in file "I2C_Support.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;  Device          1   21[COMRAM] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;Total ram usage:        1 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    6
  7637 ;; This function calls:
  7638 ;;		_I2C_Write_Cmd_Only
  7639 ;;		_I2C_Write_Cmd_Write_Data
  7640 ;; This function is called by:
  7641 ;;		_Do_Init
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text36
  7646  001A08                     __ptext36:
  7647                           	opt stack 0
  7648  001A08                     _DS1621_Init:
  7649                           	opt stack 23
  7650                           
  7651                           ;I2C_Support.c: 23: char Device = 0x48;
  7652                           
  7653                           ;incstack = 0
  7654  001A08  0E48               	movlw	72
  7655  001A0A  6E16               	movwf	DS1621_Init@Device,c
  7656                           
  7657                           ;I2C_Support.c: 24: I2C_Write_Cmd_Write_Data (Device, 0xAC, 0x02);
  7658  001A0C  0EAC               	movlw	172
  7659  001A0E  6E13               	movwf	I2C_Write_Cmd_Write_Data@Cmd,c
  7660  001A10  0E02               	movlw	2
  7661  001A12  6E14               	movwf	I2C_Write_Cmd_Write_Data@Data_Out,c
  7662  001A14  5016               	movf	DS1621_Init@Device,w,c
  7663  001A16  ECF4  F00C         	call	_I2C_Write_Cmd_Write_Data
  7664                           
  7665                           ;I2C_Support.c: 25: I2C_Write_Cmd_Only(Device, 0xEE);
  7666  001A1A  0EEE               	movlw	238
  7667  001A1C  6E13               	movwf	I2C_Write_Cmd_Only@Cmd,c
  7668  001A1E  5016               	movf	DS1621_Init@Device,w,c
  7669  001A20  EC2E  F00D         	call	_I2C_Write_Cmd_Only
  7670  001A24  0012               	return		;funcret
  7671  001A26                     __end_of_DS1621_Init:
  7672                           	opt stack 0
  7673                           tblptru	equ	0xFF8
  7674                           tblptrh	equ	0xFF7
  7675                           tblptrl	equ	0xFF6
  7676                           tablat	equ	0xFF5
  7677                           prodh	equ	0xFF4
  7678                           prodl	equ	0xFF3
  7679                           intcon	equ	0xFF2
  7680                           intcon2	equ	0xFF1
  7681                           postinc0	equ	0xFEE
  7682                           wreg	equ	0xFE8
  7683                           postdec1	equ	0xFE5
  7684                           fsr1l	equ	0xFE1
  7685                           indf2	equ	0xFDF
  7686                           postinc2	equ	0xFDE
  7687                           postdec2	equ	0xFDD
  7688                           fsr2h	equ	0xFDA
  7689                           fsr2l	equ	0xFD9
  7690                           status	equ	0xFD8
  7691                           
  7692 ;; *************** function _I2C_Write_Cmd_Write_Data *****************
  7693 ;; Defined at:
  7694 ;;		line 152 in file "I2C_Soft.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;  Device          1    wreg     unsigned char 
  7697 ;;  Cmd             1   18[COMRAM] unsigned char 
  7698 ;;  Data_Out        1   19[COMRAM] unsigned char 
  7699 ;; Auto vars:     Size  Location     Type
  7700 ;;  Device          1   20[COMRAM] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;		None               void
  7703 ;; Registers used:
  7704 ;;		wreg, status,2, status,0, cstack
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7713 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;Total ram usage:        3 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    5
  7717 ;; This function calls:
  7718 ;;		_I2C_Start
  7719 ;;		_I2C_Stop
  7720 ;;		_I2C_Write
  7721 ;; This function is called by:
  7722 ;;		_DS1621_Init
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text37
  7727  0019E8                     __ptext37:
  7728                           	opt stack 0
  7729  0019E8                     _I2C_Write_Cmd_Write_Data:
  7730                           	opt stack 23
  7731                           
  7732                           ;incstack = 0
  7733                           ;I2C_Write_Cmd_Write_Data@Device stored from wreg
  7734  0019E8  6E15               	movwf	I2C_Write_Cmd_Write_Data@Device,c
  7735                           
  7736                           ;I2C_Soft.c: 154: I2C_Start();
  7737  0019EA  EC6C  F00D         	call	_I2C_Start	;wreg free
  7738                           
  7739                           ;I2C_Soft.c: 155: I2C_Write((Device << 1) | 0);
  7740  0019EE  5015               	movf	I2C_Write_Cmd_Write_Data@Device,w,c
  7741  0019F0  2415               	addwf	I2C_Write_Cmd_Write_Data@Device,w,c
  7742  0019F2  EC2E  F00C         	call	_I2C_Write
  7743                           
  7744                           ;I2C_Soft.c: 156: I2C_Write(Cmd);
  7745  0019F6  5013               	movf	I2C_Write_Cmd_Write_Data@Cmd,w,c
  7746  0019F8  EC2E  F00C         	call	_I2C_Write
  7747                           
  7748                           ;I2C_Soft.c: 157: I2C_Write(Data_Out);
  7749  0019FC  5014               	movf	I2C_Write_Cmd_Write_Data@Data_Out,w,c
  7750  0019FE  EC2E  F00C         	call	_I2C_Write
  7751                           
  7752                           ;I2C_Soft.c: 158: I2C_Stop();
  7753  001A02  EC63  F00D         	call	_I2C_Stop	;wreg free
  7754  001A06  0012               	return		;funcret
  7755  001A08                     __end_of_I2C_Write_Cmd_Write_Data:
  7756                           	opt stack 0
  7757                           tblptru	equ	0xFF8
  7758                           tblptrh	equ	0xFF7
  7759                           tblptrl	equ	0xFF6
  7760                           tablat	equ	0xFF5
  7761                           prodh	equ	0xFF4
  7762                           prodl	equ	0xFF3
  7763                           intcon	equ	0xFF2
  7764                           intcon2	equ	0xFF1
  7765                           postinc0	equ	0xFEE
  7766                           wreg	equ	0xFE8
  7767                           postdec1	equ	0xFE5
  7768                           fsr1l	equ	0xFE1
  7769                           indf2	equ	0xFDF
  7770                           postinc2	equ	0xFDE
  7771                           postdec2	equ	0xFDD
  7772                           fsr2h	equ	0xFDA
  7773                           fsr2l	equ	0xFD9
  7774                           status	equ	0xFD8
  7775                           
  7776 ;; *************** function _I2C_Write_Cmd_Only *****************
  7777 ;; Defined at:
  7778 ;;		line 144 in file "I2C_Soft.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;  Device          1    wreg     unsigned char 
  7781 ;;  Cmd             1   18[COMRAM] unsigned char 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;  Device          1   19[COMRAM] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;		None               void
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7793 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;Total ram usage:        2 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    5
  7800 ;; This function calls:
  7801 ;;		_I2C_Start
  7802 ;;		_I2C_Stop
  7803 ;;		_I2C_Write
  7804 ;; This function is called by:
  7805 ;;		_DS1621_Init
  7806 ;; This function uses a non-reentrant model
  7807 ;;
  7808                           
  7809                           	psect	text38
  7810  001A5C                     __ptext38:
  7811                           	opt stack 0
  7812  001A5C                     _I2C_Write_Cmd_Only:
  7813                           	opt stack 23
  7814                           
  7815                           ;incstack = 0
  7816                           ;I2C_Write_Cmd_Only@Device stored from wreg
  7817  001A5C  6E14               	movwf	I2C_Write_Cmd_Only@Device,c
  7818                           
  7819                           ;I2C_Soft.c: 146: I2C_Start();
  7820  001A5E  EC6C  F00D         	call	_I2C_Start	;wreg free
  7821                           
  7822                           ;I2C_Soft.c: 147: I2C_Write((Device << 1) | 0);
  7823  001A62  5014               	movf	I2C_Write_Cmd_Only@Device,w,c
  7824  001A64  2414               	addwf	I2C_Write_Cmd_Only@Device,w,c
  7825  001A66  EC2E  F00C         	call	_I2C_Write
  7826                           
  7827                           ;I2C_Soft.c: 148: I2C_Write(Cmd);
  7828  001A6A  5013               	movf	I2C_Write_Cmd_Only@Cmd,w,c
  7829  001A6C  EC2E  F00C         	call	_I2C_Write
  7830                           
  7831                           ;I2C_Soft.c: 149: I2C_Stop();
  7832  001A70  EC63  F00D         	call	_I2C_Stop	;wreg free
  7833  001A74  0012               	return		;funcret
  7834  001A76                     __end_of_I2C_Write_Cmd_Only:
  7835                           	opt stack 0
  7836                           tblptru	equ	0xFF8
  7837                           tblptrh	equ	0xFF7
  7838                           tblptrl	equ	0xFF6
  7839                           tablat	equ	0xFF5
  7840                           prodh	equ	0xFF4
  7841                           prodl	equ	0xFF3
  7842                           intcon	equ	0xFF2
  7843                           intcon2	equ	0xFF1
  7844                           postinc0	equ	0xFEE
  7845                           wreg	equ	0xFE8
  7846                           postdec1	equ	0xFE5
  7847                           fsr1l	equ	0xFE1
  7848                           indf2	equ	0xFDF
  7849                           postinc2	equ	0xFDE
  7850                           postdec2	equ	0xFDD
  7851                           fsr2h	equ	0xFDA
  7852                           fsr2l	equ	0xFD9
  7853                           status	equ	0xFD8
  7854                           
  7855 ;; *************** function _Deactivate_Buzzer *****************
  7856 ;; Defined at:
  7857 ;;		line 235 in file "lab11t.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;		None
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;		None               void
  7864 ;; Registers used:
  7865 ;;		wreg, status,2
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;Total ram usage:        0 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:    3
  7878 ;; This function calls:
  7879 ;;		Nothing
  7880 ;; This function is called by:
  7881 ;;		_main
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text39
  7886  001B72                     __ptext39:
  7887                           	opt stack 0
  7888  001B72                     _Deactivate_Buzzer:
  7889                           	opt stack 27
  7890                           
  7891                           ;lab11t.c: 237: CCP2CON = 0x0;
  7892                           
  7893                           ;incstack = 0
  7894  001B72  0E00               	movlw	0
  7895  001B74  6EBA               	movwf	4026,c	;volatile
  7896                           
  7897                           ;lab11t.c: 238: PORTBbits.RB3 = 0;
  7898  001B76  9681               	bcf	3969,3,c	;volatile
  7899  001B78  0012               	return		;funcret
  7900  001B7A                     __end_of_Deactivate_Buzzer:
  7901                           	opt stack 0
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           intcon2	equ	0xFF1
  7910                           postinc0	equ	0xFEE
  7911                           wreg	equ	0xFE8
  7912                           postdec1	equ	0xFE5
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function _DS3231_Setup_Time *****************
  7922 ;; Defined at:
  7923 ;;		line 64 in file "I2C_Support.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  Address         1   19[COMRAM] unsigned char 
  7928 ;;  Device          1   18[COMRAM] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;		None               void
  7931 ;; Registers used:
  7932 ;;		wreg, status,2, status,0, cstack
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;Total ram usage:        2 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    5
  7945 ;; This function calls:
  7946 ;;		_I2C_Start
  7947 ;;		_I2C_Stop
  7948 ;;		_I2C_Write
  7949 ;; This function is called by:
  7950 ;;		_main
  7951 ;; This function uses a non-reentrant model
  7952 ;;
  7953                           
  7954                           	psect	text40
  7955  0015AC                     __ptext40:
  7956                           	opt stack 0
  7957  0015AC                     _DS3231_Setup_Time:
  7958                           	opt stack 25
  7959                           
  7960                           ;I2C_Support.c: 66: char Device = 0x68;
  7961                           
  7962                           ;incstack = 0
  7963  0015AC  0E68               	movlw	104
  7964  0015AE  6E13               	movwf	DS3231_Setup_Time@Device,c
  7965                           
  7966                           ;I2C_Support.c: 67: char Address = 0x00;
  7967  0015B0  0E00               	movlw	0
  7968  0015B2  6E14               	movwf	DS3231_Setup_Time@Address,c
  7969                           
  7970                           ;I2C_Support.c: 68: second = 0x00;
  7971  0015B4  0E00               	movlw	0
  7972  0015B6  6E63               	movwf	_second,c
  7973                           
  7974                           ;I2C_Support.c: 69: hour = 0x00;
  7975  0015B8  0E00               	movlw	0
  7976  0015BA  6E5D               	movwf	_hour,c
  7977                           
  7978                           ;I2C_Support.c: 70: dow = 0x00;
  7979  0015BC  0E00               	movlw	0
  7980  0015BE  6E5B               	movwf	_dow,c
  7981                           
  7982                           ;I2C_Support.c: 71: day = 0x00;
  7983  0015C0  0E00               	movlw	0
  7984  0015C2  6E5A               	movwf	_day,c
  7985                           
  7986                           ;I2C_Support.c: 72: month = 0x00;
  7987  0015C4  0E00               	movlw	0
  7988  0015C6  6E60               	movwf	_month,c
  7989                           
  7990                           ;I2C_Support.c: 73: year = 0x00;
  7991  0015C8  0E00               	movlw	0
  7992  0015CA  6E6D               	movwf	_year,c
  7993                           
  7994                           ;I2C_Support.c: 75: I2C_Start();
  7995  0015CC  EC6C  F00D         	call	_I2C_Start	;wreg free
  7996                           
  7997                           ;I2C_Support.c: 76: I2C_Write((Device << 1) | 0);
  7998  0015D0  5013               	movf	DS3231_Setup_Time@Device,w,c
  7999  0015D2  2413               	addwf	DS3231_Setup_Time@Device,w,c
  8000  0015D4  EC2E  F00C         	call	_I2C_Write
  8001                           
  8002                           ;I2C_Support.c: 77: I2C_Write(Address);
  8003  0015D8  5014               	movf	DS3231_Setup_Time@Address,w,c
  8004  0015DA  EC2E  F00C         	call	_I2C_Write
  8005                           
  8006                           ;I2C_Support.c: 78: I2C_Write(second);
  8007  0015DE  5063               	movf	_second,w,c
  8008  0015E0  EC2E  F00C         	call	_I2C_Write
  8009                           
  8010                           ;I2C_Support.c: 79: I2C_Write(hour);
  8011  0015E4  505D               	movf	_hour,w,c
  8012  0015E6  EC2E  F00C         	call	_I2C_Write
  8013                           
  8014                           ;I2C_Support.c: 80: I2C_Write(dow);
  8015  0015EA  505B               	movf	_dow,w,c
  8016  0015EC  EC2E  F00C         	call	_I2C_Write
  8017                           
  8018                           ;I2C_Support.c: 81: I2C_Write(day);
  8019  0015F0  505A               	movf	_day,w,c
  8020  0015F2  EC2E  F00C         	call	_I2C_Write
  8021                           
  8022                           ;I2C_Support.c: 82: I2C_Write(month);
  8023  0015F6  5060               	movf	_month,w,c
  8024  0015F8  EC2E  F00C         	call	_I2C_Write
  8025                           
  8026                           ;I2C_Support.c: 83: I2C_Write(year);
  8027  0015FC  506D               	movf	_year,w,c
  8028  0015FE  EC2E  F00C         	call	_I2C_Write
  8029                           
  8030                           ;I2C_Support.c: 84: I2C_Stop();
  8031  001602  EC63  F00D         	call	_I2C_Stop	;wreg free
  8032  001606  0012               	return		;funcret
  8033  001608                     __end_of_DS3231_Setup_Time:
  8034                           	opt stack 0
  8035                           tblptru	equ	0xFF8
  8036                           tblptrh	equ	0xFF7
  8037                           tblptrl	equ	0xFF6
  8038                           tablat	equ	0xFF5
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           intcon	equ	0xFF2
  8042                           intcon2	equ	0xFF1
  8043                           postinc0	equ	0xFEE
  8044                           wreg	equ	0xFE8
  8045                           postdec1	equ	0xFE5
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _DS3231_Read_Time *****************
  8055 ;; Defined at:
  8056 ;;		line 44 in file "I2C_Support.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  Device          1   20[COMRAM] unsigned char 
  8061 ;;  Address         1   19[COMRAM] unsigned char 
  8062 ;;  Data_Ret        1    0        unsigned char 
  8063 ;; Return value:  Size  Location     Type
  8064 ;;		None               void
  8065 ;; Registers used:
  8066 ;;		wreg, status,2, status,0, cstack
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8073 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;Total ram usage:        2 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    6
  8079 ;; This function calls:
  8080 ;;		_I2C_ReStart
  8081 ;;		_I2C_Read
  8082 ;;		_I2C_Start
  8083 ;;		_I2C_Stop
  8084 ;;		_I2C_Write
  8085 ;; This function is called by:
  8086 ;;		_main
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text41
  8091  001548                     __ptext41:
  8092                           	opt stack 0
  8093  001548                     _DS3231_Read_Time:
  8094                           	opt stack 24
  8095                           
  8096                           ;I2C_Support.c: 46: char Device = 0x68;
  8097                           
  8098                           ;incstack = 0
  8099  001548  0E68               	movlw	104
  8100  00154A  6E15               	movwf	DS3231_Read_Time@Device,c
  8101                           
  8102                           ;I2C_Support.c: 47: char Address = 0x00;
  8103  00154C  0E00               	movlw	0
  8104  00154E  6E14               	movwf	DS3231_Read_Time@Address,c
  8105                           
  8106                           ;I2C_Support.c: 48: char Data_Ret;
  8107                           ;I2C_Support.c: 49: I2C_Start();
  8108  001550  EC6C  F00D         	call	_I2C_Start	;wreg free
  8109                           
  8110                           ;I2C_Support.c: 50: I2C_Write((Device << 1) | 0);
  8111  001554  5015               	movf	DS3231_Read_Time@Device,w,c
  8112  001556  2415               	addwf	DS3231_Read_Time@Device,w,c
  8113  001558  EC2E  F00C         	call	_I2C_Write
  8114                           
  8115                           ;I2C_Support.c: 51: I2C_Write(Address);
  8116  00155C  5014               	movf	DS3231_Read_Time@Address,w,c
  8117  00155E  EC2E  F00C         	call	_I2C_Write
  8118                           
  8119                           ;I2C_Support.c: 52: I2C_ReStart();
  8120  001562  EC3B  F00D         	call	_I2C_ReStart	;wreg free
  8121                           
  8122                           ;I2C_Support.c: 53: I2C_Write((Device << 1) | 1);
  8123  001566  80D8               	bsf	status,0,c
  8124  001568  3415               	rlcf	DS3231_Read_Time@Device,w,c
  8125  00156A  EC2E  F00C         	call	_I2C_Write
  8126                           
  8127                           ;I2C_Support.c: 54: second = I2C_Read(1);
  8128  00156E  0E01               	movlw	1
  8129  001570  ECCC  F00B         	call	_I2C_Read
  8130  001574  6E63               	movwf	_second,c
  8131                           
  8132                           ;I2C_Support.c: 55: minute = I2C_Read(1);
  8133  001576  0E01               	movlw	1
  8134  001578  ECCC  F00B         	call	_I2C_Read
  8135  00157C  6E5F               	movwf	_minute,c
  8136                           
  8137                           ;I2C_Support.c: 56: hour = I2C_Read(1);
  8138  00157E  0E01               	movlw	1
  8139  001580  ECCC  F00B         	call	_I2C_Read
  8140  001584  6E5D               	movwf	_hour,c
  8141                           
  8142                           ;I2C_Support.c: 57: dow = I2C_Read(1);
  8143  001586  0E01               	movlw	1
  8144  001588  ECCC  F00B         	call	_I2C_Read
  8145  00158C  6E5B               	movwf	_dow,c
  8146                           
  8147                           ;I2C_Support.c: 58: day = I2C_Read(1);
  8148  00158E  0E01               	movlw	1
  8149  001590  ECCC  F00B         	call	_I2C_Read
  8150  001594  6E5A               	movwf	_day,c
  8151                           
  8152                           ;I2C_Support.c: 59: month = I2C_Read(1);
  8153  001596  0E01               	movlw	1
  8154  001598  ECCC  F00B         	call	_I2C_Read
  8155  00159C  6E60               	movwf	_month,c
  8156                           
  8157                           ;I2C_Support.c: 60: year = I2C_Read(0);
  8158  00159E  0E00               	movlw	0
  8159  0015A0  ECCC  F00B         	call	_I2C_Read
  8160  0015A4  6E6D               	movwf	_year,c
  8161                           
  8162                           ;I2C_Support.c: 61: I2C_Stop();
  8163  0015A6  EC63  F00D         	call	_I2C_Stop	;wreg free
  8164  0015AA  0012               	return		;funcret
  8165  0015AC                     __end_of_DS3231_Read_Time:
  8166                           	opt stack 0
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           intcon2	equ	0xFF1
  8175                           postinc0	equ	0xFEE
  8176                           wreg	equ	0xFE8
  8177                           postdec1	equ	0xFE5
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           fsr2h	equ	0xFDA
  8183                           fsr2l	equ	0xFD9
  8184                           status	equ	0xFD8
  8185                           
  8186 ;; *************** function _DS1621_Read_Temp *****************
  8187 ;; Defined at:
  8188 ;;		line 29 in file "I2C_Support.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  Device          1   23[COMRAM] unsigned char 
  8193 ;;  Data_Ret        1   22[COMRAM] unsigned char 
  8194 ;;  Cmd             1   21[COMRAM] unsigned char 
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  2   19[COMRAM] int 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2, status,0, cstack
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;Total ram usage:        5 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; Hardware stack levels required when called:    6
  8211 ;; This function calls:
  8212 ;;		_I2C_ReStart
  8213 ;;		_I2C_Read
  8214 ;;		_I2C_Start
  8215 ;;		_I2C_Stop
  8216 ;;		_I2C_Write
  8217 ;; This function is called by:
  8218 ;;		_main
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text42
  8223  0018D6                     __ptext42:
  8224                           	opt stack 0
  8225  0018D6                     _DS1621_Read_Temp:
  8226                           	opt stack 24
  8227                           
  8228                           ;I2C_Support.c: 31: char Device = 0x48;
  8229                           
  8230                           ;incstack = 0
  8231  0018D6  0E48               	movlw	72
  8232  0018D8  6E18               	movwf	DS1621_Read_Temp@Device,c
  8233                           
  8234                           ;I2C_Support.c: 32: char Cmd = 0xAA;
  8235  0018DA  0EAA               	movlw	170
  8236  0018DC  6E16               	movwf	DS1621_Read_Temp@Cmd,c
  8237                           
  8238                           ;I2C_Support.c: 33: char Data_Ret;
  8239                           ;I2C_Support.c: 34: I2C_Start();
  8240  0018DE  EC6C  F00D         	call	_I2C_Start	;wreg free
  8241                           
  8242                           ;I2C_Support.c: 35: I2C_Write((Device << 1) | 0);
  8243  0018E2  5018               	movf	DS1621_Read_Temp@Device,w,c
  8244  0018E4  2418               	addwf	DS1621_Read_Temp@Device,w,c
  8245  0018E6  EC2E  F00C         	call	_I2C_Write
  8246                           
  8247                           ;I2C_Support.c: 36: I2C_Write(Cmd);
  8248  0018EA  5016               	movf	DS1621_Read_Temp@Cmd,w,c
  8249  0018EC  EC2E  F00C         	call	_I2C_Write
  8250                           
  8251                           ;I2C_Support.c: 37: I2C_ReStart();
  8252  0018F0  EC3B  F00D         	call	_I2C_ReStart	;wreg free
  8253                           
  8254                           ;I2C_Support.c: 38: I2C_Write((Device << 1) | 1);
  8255  0018F4  80D8               	bsf	status,0,c
  8256  0018F6  3418               	rlcf	DS1621_Read_Temp@Device,w,c
  8257  0018F8  EC2E  F00C         	call	_I2C_Write
  8258                           
  8259                           ;I2C_Support.c: 39: Data_Ret = I2C_Read(0);
  8260  0018FC  0E00               	movlw	0
  8261  0018FE  ECCC  F00B         	call	_I2C_Read
  8262  001902  6E17               	movwf	DS1621_Read_Temp@Data_Ret,c
  8263                           
  8264                           ;I2C_Support.c: 40: I2C_Stop();
  8265  001904  EC63  F00D         	call	_I2C_Stop	;wreg free
  8266                           
  8267                           ;I2C_Support.c: 41: return Data_Ret;
  8268  001908  C017  F014         	movff	DS1621_Read_Temp@Data_Ret,?_DS1621_Read_Temp
  8269  00190C  6A15               	clrf	?_DS1621_Read_Temp+1,c
  8270  00190E  D000               	goto	l117
  8271  001910                     l117:
  8272  001910  0012               	return		;funcret
  8273  001912                     __end_of_DS1621_Read_Temp:
  8274                           	opt stack 0
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           intcon2	equ	0xFF1
  8283                           postinc0	equ	0xFEE
  8284                           wreg	equ	0xFE8
  8285                           postdec1	equ	0xFE5
  8286                           fsr1l	equ	0xFE1
  8287                           indf2	equ	0xFDF
  8288                           postinc2	equ	0xFDE
  8289                           postdec2	equ	0xFDD
  8290                           fsr2h	equ	0xFDA
  8291                           fsr2l	equ	0xFD9
  8292                           status	equ	0xFD8
  8293                           
  8294 ;; *************** function _I2C_Write *****************
  8295 ;; Defined at:
  8296 ;;		line 41 in file "I2C_Soft.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;  outByte         1    wreg     unsigned char 
  8299 ;; Auto vars:     Size  Location     Type
  8300 ;;  outByte         1   16[COMRAM] unsigned char 
  8301 ;;  n               1   17[COMRAM] unsigned char 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;		None               void
  8304 ;; Registers used:
  8305 ;;		wreg, status,2, status,0, cstack
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8314 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8315 ;;Total ram usage:        2 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    4
  8318 ;; This function calls:
  8319 ;;		_i2cHighScl
  8320 ;;		_i2cHighSda
  8321 ;;		_i2cLowScl
  8322 ;;		_i2cLowSda
  8323 ;; This function is called by:
  8324 ;;		_I2C_Write_Cmd_Only
  8325 ;;		_I2C_Write_Cmd_Write_Data
  8326 ;;		_DS1621_Read_Temp
  8327 ;;		_DS3231_Read_Time
  8328 ;;		_DS3231_Setup_Time
  8329 ;;		_I2C_Write_Address_Read_One_Byte
  8330 ;;		_I2C_Write_Address_Write_One_Byte
  8331 ;;		_I2C_Write_Cmd_Read_One_Byte
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text43
  8336  00185C                     __ptext43:
  8337                           	opt stack 0
  8338  00185C                     _I2C_Write:
  8339                           	opt stack 23
  8340                           
  8341                           ;incstack = 0
  8342                           ;I2C_Write@outByte stored from wreg
  8343  00185C  6E11               	movwf	I2C_Write@outByte,c
  8344                           
  8345                           ;I2C_Soft.c: 43: unsigned char n;
  8346                           ;I2C_Soft.c: 44: for(n=0; n<8; n++)
  8347  00185E  0E00               	movlw	0
  8348  001860  6E12               	movwf	I2C_Write@n,c
  8349  001862                     l4185:
  8350  001862  0E07               	movlw	7
  8351  001864  6412               	cpfsgt	I2C_Write@n,c
  8352  001866  D001               	goto	l37
  8353  001868  D011               	goto	l4203
  8354  00186A                     l37:
  8355                           
  8356                           ;I2C_Soft.c: 45: {
  8357                           ;I2C_Soft.c: 46: if(outByte&0x80) i2cHighSda();
  8358  00186A  AE11               	btfss	I2C_Write@outByte,7,c
  8359  00186C  D003               	goto	l4191
  8360  00186E  ECC1  F00D         	call	_i2cHighSda	;wreg free
  8361  001872  D003               	goto	l4193
  8362  001874                     l4191:
  8363                           
  8364                           ;I2C_Soft.c: 47: else i2cLowSda();
  8365  001874  ECB4  F00D         	call	_i2cLowSda	;wreg free
  8366  001878  D000               	goto	l4193
  8367  00187A                     l4193:
  8368                           
  8369                           ;I2C_Soft.c: 48: i2cHighScl();
  8370  00187A  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8371                           
  8372                           ;I2C_Soft.c: 49: i2cLowScl();
  8373  00187E  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8374                           
  8375                           ;I2C_Soft.c: 50: outByte = outByte << 1;
  8376  001882  5011               	movf	I2C_Write@outByte,w,c
  8377  001884  2411               	addwf	I2C_Write@outByte,w,c
  8378  001886  6E11               	movwf	I2C_Write@outByte,c
  8379  001888  2A12               	incf	I2C_Write@n,f,c
  8380  00188A  D7EB               	goto	l4185
  8381  00188C                     l4203:
  8382                           
  8383                           ;I2C_Soft.c: 51: }
  8384                           ;I2C_Soft.c: 52: i2cHighSda();
  8385  00188C  ECC1  F00D         	call	_i2cHighSda	;wreg free
  8386                           
  8387                           ;I2C_Soft.c: 53: i2cHighScl();
  8388  001890  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8389                           
  8390                           ;I2C_Soft.c: 54: i2cLowScl();
  8391  001894  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8392  001898  0012               	return		;funcret
  8393  00189A                     __end_of_I2C_Write:
  8394                           	opt stack 0
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           prodh	equ	0xFF4
  8400                           prodl	equ	0xFF3
  8401                           intcon	equ	0xFF2
  8402                           intcon2	equ	0xFF1
  8403                           postinc0	equ	0xFEE
  8404                           wreg	equ	0xFE8
  8405                           postdec1	equ	0xFE5
  8406                           fsr1l	equ	0xFE1
  8407                           indf2	equ	0xFDF
  8408                           postinc2	equ	0xFDE
  8409                           postdec2	equ	0xFDD
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function _I2C_Stop *****************
  8415 ;; Defined at:
  8416 ;;		line 88 in file "I2C_Soft.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;		None
  8419 ;; Auto vars:     Size  Location     Type
  8420 ;;		None
  8421 ;; Return value:  Size  Location     Type
  8422 ;;		None               void
  8423 ;; Registers used:
  8424 ;;		wreg, cstack
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;Total ram usage:        0 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; Hardware stack levels required when called:    4
  8437 ;; This function calls:
  8438 ;;		_i2cHighScl
  8439 ;;		_i2cHighSda
  8440 ;;		_i2cLowScl
  8441 ;;		_i2cLowSda
  8442 ;; This function is called by:
  8443 ;;		_I2C_Write_Cmd_Only
  8444 ;;		_I2C_Write_Cmd_Write_Data
  8445 ;;		_DS1621_Read_Temp
  8446 ;;		_DS3231_Read_Time
  8447 ;;		_DS3231_Setup_Time
  8448 ;;		_I2C_Write_Address_Read_One_Byte
  8449 ;;		_I2C_Write_Address_Write_One_Byte
  8450 ;;		_I2C_Write_Cmd_Read_One_Byte
  8451 ;; This function uses a non-reentrant model
  8452 ;;
  8453                           
  8454                           	psect	text44
  8455  001AC6                     __ptext44:
  8456                           	opt stack 0
  8457  001AC6                     _I2C_Stop:
  8458                           	opt stack 23
  8459                           
  8460                           ;I2C_Soft.c: 90: i2cLowScl();
  8461                           
  8462                           ;incstack = 0
  8463  001AC6  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8464                           
  8465                           ;I2C_Soft.c: 91: i2cLowSda();
  8466  001ACA  ECB4  F00D         	call	_i2cLowSda	;wreg free
  8467                           
  8468                           ;I2C_Soft.c: 92: i2cHighScl();
  8469  001ACE  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8470                           
  8471                           ;I2C_Soft.c: 93: i2cHighSda();
  8472  001AD2  ECC1  F00D         	call	_i2cHighSda	;wreg free
  8473  001AD6  0012               	return		;funcret
  8474  001AD8                     __end_of_I2C_Stop:
  8475                           	opt stack 0
  8476                           tblptru	equ	0xFF8
  8477                           tblptrh	equ	0xFF7
  8478                           tblptrl	equ	0xFF6
  8479                           tablat	equ	0xFF5
  8480                           prodh	equ	0xFF4
  8481                           prodl	equ	0xFF3
  8482                           intcon	equ	0xFF2
  8483                           intcon2	equ	0xFF1
  8484                           postinc0	equ	0xFEE
  8485                           wreg	equ	0xFE8
  8486                           postdec1	equ	0xFE5
  8487                           fsr1l	equ	0xFE1
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           fsr2h	equ	0xFDA
  8492                           fsr2l	equ	0xFD9
  8493                           status	equ	0xFD8
  8494                           
  8495 ;; *************** function _I2C_Start *****************
  8496 ;; Defined at:
  8497 ;;		line 71 in file "I2C_Soft.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;		None
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;		None
  8502 ;; Return value:  Size  Location     Type
  8503 ;;		None               void
  8504 ;; Registers used:
  8505 ;;		wreg, cstack
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;Total ram usage:        0 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    4
  8518 ;; This function calls:
  8519 ;;		_i2cHighScl
  8520 ;;		_i2cHighSda
  8521 ;;		_i2cLowScl
  8522 ;;		_i2cLowSda
  8523 ;; This function is called by:
  8524 ;;		_I2C_Write_Cmd_Only
  8525 ;;		_I2C_Write_Cmd_Write_Data
  8526 ;;		_DS1621_Read_Temp
  8527 ;;		_DS3231_Read_Time
  8528 ;;		_DS3231_Setup_Time
  8529 ;;		_I2C_Write_Address_Read_One_Byte
  8530 ;;		_I2C_Write_Address_Write_One_Byte
  8531 ;;		_I2C_Write_Cmd_Read_One_Byte
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           	psect	text45
  8536  001AD8                     __ptext45:
  8537                           	opt stack 0
  8538  001AD8                     _I2C_Start:
  8539                           	opt stack 23
  8540                           
  8541                           ;I2C_Soft.c: 73: i2cHighSda();
  8542                           
  8543                           ;incstack = 0
  8544  001AD8  ECC1  F00D         	call	_i2cHighSda	;wreg free
  8545                           
  8546                           ;I2C_Soft.c: 74: i2cHighScl();
  8547  001ADC  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8548                           
  8549                           ;I2C_Soft.c: 75: i2cLowSda();
  8550  001AE0  ECB4  F00D         	call	_i2cLowSda	;wreg free
  8551                           
  8552                           ;I2C_Soft.c: 76: i2cLowScl();
  8553  001AE4  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8554  001AE8  0012               	return		;funcret
  8555  001AEA                     __end_of_I2C_Start:
  8556                           	opt stack 0
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           intcon2	equ	0xFF1
  8565                           postinc0	equ	0xFEE
  8566                           wreg	equ	0xFE8
  8567                           postdec1	equ	0xFE5
  8568                           fsr1l	equ	0xFE1
  8569                           indf2	equ	0xFDF
  8570                           postinc2	equ	0xFDE
  8571                           postdec2	equ	0xFDD
  8572                           fsr2h	equ	0xFDA
  8573                           fsr2l	equ	0xFD9
  8574                           status	equ	0xFD8
  8575                           
  8576 ;; *************** function _I2C_Read *****************
  8577 ;; Defined at:
  8578 ;;		line 20 in file "I2C_Soft.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  ack             1    wreg     unsigned char 
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  ack             1   16[COMRAM] unsigned char 
  8583 ;;  inByte          1   18[COMRAM] unsigned char 
  8584 ;;  n               1   17[COMRAM] unsigned char 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  1    wreg      unsigned char 
  8587 ;; Registers used:
  8588 ;;		wreg, status,2, status,0, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : 0/0
  8591 ;;		On exit  : 0/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;Total ram usage:        3 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    5
  8601 ;; This function calls:
  8602 ;;		_i2cAck
  8603 ;;		_i2cHighScl
  8604 ;;		_i2cHighSda
  8605 ;;		_i2cLowScl
  8606 ;;		_i2cNack
  8607 ;; This function is called by:
  8608 ;;		_DS1621_Read_Temp
  8609 ;;		_DS3231_Read_Time
  8610 ;;		_I2C_Write_Address_Read_One_Byte
  8611 ;;		_I2C_Write_Cmd_Read_One_Byte
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           	psect	text46
  8616  001798                     __ptext46:
  8617                           	opt stack 0
  8618  001798                     _I2C_Read:
  8619                           	opt stack 24
  8620                           
  8621                           ;incstack = 0
  8622                           ;I2C_Read@ack stored from wreg
  8623  001798  6E11               	movwf	I2C_Read@ack,c
  8624                           
  8625                           ;I2C_Soft.c: 22: unsigned char inByte, n;
  8626                           ;I2C_Soft.c: 23: i2cHighSda();
  8627  00179A  ECC1  F00D         	call	_i2cHighSda	;wreg free
  8628                           
  8629                           ;I2C_Soft.c: 24: for (n=0; n<8; n++)
  8630  00179E  0E00               	movlw	0
  8631  0017A0  6E12               	movwf	I2C_Read@n,c
  8632  0017A2                     l4537:
  8633  0017A2  0E07               	movlw	7
  8634  0017A4  6412               	cpfsgt	I2C_Read@n,c
  8635  0017A6  D001               	goto	l4541
  8636  0017A8  D00F               	goto	l4555
  8637  0017AA                     l4541:
  8638                           
  8639                           ;I2C_Soft.c: 25: {
  8640                           ;I2C_Soft.c: 26: i2cHighScl();
  8641  0017AA  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8642                           
  8643                           ;I2C_Soft.c: 28: if (PORTDbits.RD6)
  8644  0017AE  AC83               	btfss	3971,6,c	;volatile
  8645  0017B0  D003               	goto	l4547
  8646                           
  8647                           ;I2C_Soft.c: 29: inByte = (inByte << 1) | 0x01;
  8648  0017B2  80D8               	bsf	status,0,c
  8649  0017B4  3613               	rlcf	I2C_Read@inByte,f,c
  8650  0017B6  D004               	goto	l4549
  8651  0017B8                     l4547:
  8652                           
  8653                           ;I2C_Soft.c: 30: else
  8654                           ;I2C_Soft.c: 31: inByte = inByte << 1;
  8655  0017B8  5013               	movf	I2C_Read@inByte,w,c
  8656  0017BA  2413               	addwf	I2C_Read@inByte,w,c
  8657  0017BC  6E13               	movwf	I2C_Read@inByte,c
  8658  0017BE  D000               	goto	l4549
  8659  0017C0                     l4549:
  8660                           
  8661                           ;I2C_Soft.c: 32: i2cLowScl();
  8662  0017C0  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8663  0017C4  2A12               	incf	I2C_Read@n,f,c
  8664  0017C6  D7ED               	goto	l4537
  8665  0017C8                     l4555:
  8666                           
  8667                           ;I2C_Soft.c: 33: }
  8668                           ;I2C_Soft.c: 34: if (ack) i2cAck();
  8669  0017C8  5011               	movf	I2C_Read@ack,w,c
  8670  0017CA  B4D8               	btfsc	status,2,c
  8671  0017CC  D003               	goto	l4559
  8672  0017CE  EC75  F00D         	call	_i2cAck	;wreg free
  8673  0017D2  D003               	goto	l4561
  8674  0017D4                     l4559:
  8675                           
  8676                           ;I2C_Soft.c: 35: else i2cNack();
  8677  0017D4  ECAF  F00D         	call	_i2cNack	;wreg free
  8678  0017D8  D000               	goto	l4561
  8679  0017DA                     l4561:
  8680                           
  8681                           ;I2C_Soft.c: 38: return(inByte);
  8682  0017DA  5013               	movf	I2C_Read@inByte,w,c
  8683  0017DC  D000               	goto	l34
  8684  0017DE                     l34:
  8685  0017DE  0012               	return		;funcret
  8686  0017E0                     __end_of_I2C_Read:
  8687                           	opt stack 0
  8688                           tblptru	equ	0xFF8
  8689                           tblptrh	equ	0xFF7
  8690                           tblptrl	equ	0xFF6
  8691                           tablat	equ	0xFF5
  8692                           prodh	equ	0xFF4
  8693                           prodl	equ	0xFF3
  8694                           intcon	equ	0xFF2
  8695                           intcon2	equ	0xFF1
  8696                           postinc0	equ	0xFEE
  8697                           wreg	equ	0xFE8
  8698                           postdec1	equ	0xFE5
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function _i2cNack *****************
  8708 ;; Defined at:
  8709 ;;		line 57 in file "I2C_Soft.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;		None
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;		None
  8714 ;; Return value:  Size  Location     Type
  8715 ;;		None               void
  8716 ;; Registers used:
  8717 ;;		wreg, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;Total ram usage:        0 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    4
  8730 ;; This function calls:
  8731 ;;		_i2cHighScl
  8732 ;;		_i2cLowScl
  8733 ;; This function is called by:
  8734 ;;		_I2C_Read
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           	psect	text47
  8739  001B5E                     __ptext47:
  8740                           	opt stack 0
  8741  001B5E                     _i2cNack:
  8742                           	opt stack 24
  8743                           
  8744                           ;I2C_Soft.c: 59: i2cHighScl();
  8745                           
  8746                           ;incstack = 0
  8747  001B5E  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8748                           
  8749                           ;I2C_Soft.c: 60: i2cLowScl();
  8750  001B62  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8751  001B66  0012               	return		;funcret
  8752  001B68                     __end_of_i2cNack:
  8753                           	opt stack 0
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           intcon2	equ	0xFF1
  8762                           postinc0	equ	0xFEE
  8763                           wreg	equ	0xFE8
  8764                           postdec1	equ	0xFE5
  8765                           fsr1l	equ	0xFE1
  8766                           indf2	equ	0xFDF
  8767                           postinc2	equ	0xFDE
  8768                           postdec2	equ	0xFDD
  8769                           fsr2h	equ	0xFDA
  8770                           fsr2l	equ	0xFD9
  8771                           status	equ	0xFD8
  8772                           
  8773 ;; *************** function _i2cAck *****************
  8774 ;; Defined at:
  8775 ;;		line 63 in file "I2C_Soft.c"
  8776 ;; Parameters:    Size  Location     Type
  8777 ;;		None
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;		None
  8780 ;; Return value:  Size  Location     Type
  8781 ;;		None               void
  8782 ;; Registers used:
  8783 ;;		wreg, cstack
  8784 ;; Tracked objects:
  8785 ;;		On entry : 0/0
  8786 ;;		On exit  : 0/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8793 ;;Total ram usage:        0 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    4
  8796 ;; This function calls:
  8797 ;;		_i2cHighScl
  8798 ;;		_i2cHighSda
  8799 ;;		_i2cLowScl
  8800 ;;		_i2cLowSda
  8801 ;; This function is called by:
  8802 ;;		_I2C_Read
  8803 ;; This function uses a non-reentrant model
  8804 ;;
  8805                           
  8806                           	psect	text48
  8807  001AEA                     __ptext48:
  8808                           	opt stack 0
  8809  001AEA                     _i2cAck:
  8810                           	opt stack 24
  8811                           
  8812                           ;I2C_Soft.c: 65: i2cLowSda();
  8813                           
  8814                           ;incstack = 0
  8815  001AEA  ECB4  F00D         	call	_i2cLowSda	;wreg free
  8816                           
  8817                           ;I2C_Soft.c: 66: i2cHighScl();
  8818  001AEE  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8819                           
  8820                           ;I2C_Soft.c: 67: i2cLowScl();
  8821  001AF2  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8822                           
  8823                           ;I2C_Soft.c: 68: i2cHighSda();
  8824  001AF6  ECC1  F00D         	call	_i2cHighSda	;wreg free
  8825  001AFA  0012               	return		;funcret
  8826  001AFC                     __end_of_i2cAck:
  8827                           	opt stack 0
  8828                           tblptru	equ	0xFF8
  8829                           tblptrh	equ	0xFF7
  8830                           tblptrl	equ	0xFF6
  8831                           tablat	equ	0xFF5
  8832                           prodh	equ	0xFF4
  8833                           prodl	equ	0xFF3
  8834                           intcon	equ	0xFF2
  8835                           intcon2	equ	0xFF1
  8836                           postinc0	equ	0xFEE
  8837                           wreg	equ	0xFE8
  8838                           postdec1	equ	0xFE5
  8839                           fsr1l	equ	0xFE1
  8840                           indf2	equ	0xFDF
  8841                           postinc2	equ	0xFDE
  8842                           postdec2	equ	0xFDD
  8843                           fsr2h	equ	0xFDA
  8844                           fsr2l	equ	0xFD9
  8845                           status	equ	0xFD8
  8846                           
  8847 ;; *************** function _I2C_ReStart *****************
  8848 ;; Defined at:
  8849 ;;		line 79 in file "I2C_Soft.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;		None
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;		None
  8854 ;; Return value:  Size  Location     Type
  8855 ;;		None               void
  8856 ;; Registers used:
  8857 ;;		wreg, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;Total ram usage:        0 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    4
  8870 ;; This function calls:
  8871 ;;		_i2cHighScl
  8872 ;;		_i2cHighSda
  8873 ;;		_i2cLowScl
  8874 ;;		_i2cLowSda
  8875 ;; This function is called by:
  8876 ;;		_DS1621_Read_Temp
  8877 ;;		_DS3231_Read_Time
  8878 ;;		_I2C_Write_Address_Read_One_Byte
  8879 ;;		_I2C_Write_Cmd_Read_One_Byte
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           	psect	text49
  8884  001A76                     __ptext49:
  8885                           	opt stack 0
  8886  001A76                     _I2C_ReStart:
  8887                           	opt stack 25
  8888                           
  8889                           ;I2C_Soft.c: 81: i2cLowScl();
  8890                           
  8891                           ;incstack = 0
  8892  001A76  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8893                           
  8894                           ;I2C_Soft.c: 82: i2cHighSda();
  8895  001A7A  ECC1  F00D         	call	_i2cHighSda	;wreg free
  8896                           
  8897                           ;I2C_Soft.c: 83: i2cHighScl();
  8898  001A7E  EC9E  F00D         	call	_i2cHighScl	;wreg free
  8899                           
  8900                           ;I2C_Soft.c: 84: i2cLowSda();
  8901  001A82  ECB4  F00D         	call	_i2cLowSda	;wreg free
  8902                           
  8903                           ;I2C_Soft.c: 85: i2cLowScl();
  8904  001A86  ECBD  F00D         	call	_i2cLowScl	;wreg free
  8905  001A8A  0012               	return		;funcret
  8906  001A8C                     __end_of_I2C_ReStart:
  8907                           	opt stack 0
  8908                           tblptru	equ	0xFF8
  8909                           tblptrh	equ	0xFF7
  8910                           tblptrl	equ	0xFF6
  8911                           tablat	equ	0xFF5
  8912                           prodh	equ	0xFF4
  8913                           prodl	equ	0xFF3
  8914                           intcon	equ	0xFF2
  8915                           intcon2	equ	0xFF1
  8916                           postinc0	equ	0xFEE
  8917                           wreg	equ	0xFE8
  8918                           postdec1	equ	0xFE5
  8919                           fsr1l	equ	0xFE1
  8920                           indf2	equ	0xFDF
  8921                           postinc2	equ	0xFDE
  8922                           postdec2	equ	0xFDD
  8923                           fsr2h	equ	0xFDA
  8924                           fsr2l	equ	0xFD9
  8925                           status	equ	0xFD8
  8926                           
  8927 ;; *************** function _i2cLowSda *****************
  8928 ;; Defined at:
  8929 ;;		line 102 in file "I2C_Soft.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;		None
  8934 ;; Return value:  Size  Location     Type
  8935 ;;		None               void
  8936 ;; Registers used:
  8937 ;;		None
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;Total ram usage:        0 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    3
  8950 ;; This function calls:
  8951 ;;		Nothing
  8952 ;; This function is called by:
  8953 ;;		_I2C_Write
  8954 ;;		_i2cAck
  8955 ;;		_I2C_Start
  8956 ;;		_I2C_ReStart
  8957 ;;		_I2C_Stop
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text50
  8962  001B68                     __ptext50:
  8963                           	opt stack 0
  8964  001B68                     _i2cLowSda:
  8965                           	opt stack 23
  8966                           
  8967                           ;I2C_Soft.c: 104: PORTDbits.RD6 = 0;
  8968                           
  8969                           ;incstack = 0
  8970  001B68  9C83               	bcf	3971,6,c	;volatile
  8971                           
  8972                           ;I2C_Soft.c: 105: TRISDbits.RD6 = 0;
  8973  001B6A  9C95               	bcf	3989,6,c	;volatile
  8974                           
  8975                           ;I2C_Soft.c: 106: _delay((unsigned long)((2)*(8000000/4000000.0)));
  8976  001B6C  D000               	nop2		;2 cycle nop
  8977  001B6E  D000               	nop2		;2 cycle nop
  8978  001B70  0012               	return		;funcret
  8979  001B72                     __end_of_i2cLowSda:
  8980                           	opt stack 0
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodh	equ	0xFF4
  8986                           prodl	equ	0xFF3
  8987                           intcon	equ	0xFF2
  8988                           intcon2	equ	0xFF1
  8989                           postinc0	equ	0xFEE
  8990                           wreg	equ	0xFE8
  8991                           postdec1	equ	0xFE5
  8992                           fsr1l	equ	0xFE1
  8993                           indf2	equ	0xFDF
  8994                           postinc2	equ	0xFDE
  8995                           postdec2	equ	0xFDD
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _i2cLowScl *****************
  9001 ;; Defined at:
  9002 ;;		line 115 in file "I2C_Soft.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;		None
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;		None
  9007 ;; Return value:  Size  Location     Type
  9008 ;;		None               void
  9009 ;; Registers used:
  9010 ;;		None
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;Total ram usage:        0 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    3
  9023 ;; This function calls:
  9024 ;;		Nothing
  9025 ;; This function is called by:
  9026 ;;		_I2C_Read
  9027 ;;		_I2C_Write
  9028 ;;		_i2cNack
  9029 ;;		_i2cAck
  9030 ;;		_I2C_Start
  9031 ;;		_I2C_ReStart
  9032 ;;		_I2C_Stop
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text51
  9037  001B7A                     __ptext51:
  9038                           	opt stack 0
  9039  001B7A                     _i2cLowScl:
  9040                           	opt stack 23
  9041                           
  9042                           ;I2C_Soft.c: 117: PORTBbits.RB4 = 0;
  9043                           
  9044                           ;incstack = 0
  9045  001B7A  9881               	bcf	3969,4,c	;volatile
  9046                           
  9047                           ;I2C_Soft.c: 118: TRISBbits.RB4 = 0;
  9048  001B7C  9893               	bcf	3987,4,c	;volatile
  9049                           
  9050                           ;I2C_Soft.c: 119: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9051  001B7E  D000               	nop2		;2 cycle nop
  9052  001B80  0012               	return		;funcret
  9053  001B82                     __end_of_i2cLowScl:
  9054                           	opt stack 0
  9055                           tblptru	equ	0xFF8
  9056                           tblptrh	equ	0xFF7
  9057                           tblptrl	equ	0xFF6
  9058                           tablat	equ	0xFF5
  9059                           prodh	equ	0xFF4
  9060                           prodl	equ	0xFF3
  9061                           intcon	equ	0xFF2
  9062                           intcon2	equ	0xFF1
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           postdec1	equ	0xFE5
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function _i2cHighSda *****************
  9075 ;; Defined at:
  9076 ;;		line 96 in file "I2C_Soft.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;		None
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;		None               void
  9083 ;; Registers used:
  9084 ;;		None
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;Total ram usage:        0 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:    3
  9097 ;; This function calls:
  9098 ;;		Nothing
  9099 ;; This function is called by:
  9100 ;;		_I2C_Init
  9101 ;;		_I2C_Read
  9102 ;;		_I2C_Write
  9103 ;;		_i2cAck
  9104 ;;		_I2C_Start
  9105 ;;		_I2C_ReStart
  9106 ;;		_I2C_Stop
  9107 ;; This function uses a non-reentrant model
  9108 ;;
  9109                           
  9110                           	psect	text52
  9111  001B82                     __ptext52:
  9112                           	opt stack 0
  9113  001B82                     _i2cHighSda:
  9114                           	opt stack 25
  9115                           
  9116                           ;I2C_Soft.c: 98: TRISDbits.RD6 = 1;
  9117                           
  9118                           ;incstack = 0
  9119  001B82  8C95               	bsf	3989,6,c	;volatile
  9120                           
  9121                           ;I2C_Soft.c: 99: _delay((unsigned long)((2)*(8000000/4000000.0)));
  9122  001B84  D000               	nop2		;2 cycle nop
  9123  001B86  D000               	nop2		;2 cycle nop
  9124  001B88  0012               	return		;funcret
  9125  001B8A                     __end_of_i2cHighSda:
  9126                           	opt stack 0
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           intcon	equ	0xFF2
  9134                           intcon2	equ	0xFF1
  9135                           postinc0	equ	0xFEE
  9136                           wreg	equ	0xFE8
  9137                           postdec1	equ	0xFE5
  9138                           fsr1l	equ	0xFE1
  9139                           indf2	equ	0xFDF
  9140                           postinc2	equ	0xFDE
  9141                           postdec2	equ	0xFDD
  9142                           fsr2h	equ	0xFDA
  9143                           fsr2l	equ	0xFD9
  9144                           status	equ	0xFD8
  9145                           
  9146 ;; *************** function _i2cHighScl *****************
  9147 ;; Defined at:
  9148 ;;		line 109 in file "I2C_Soft.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;		None
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;		None
  9153 ;; Return value:  Size  Location     Type
  9154 ;;		None               void
  9155 ;; Registers used:
  9156 ;;		wreg
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;Total ram usage:        0 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    3
  9169 ;; This function calls:
  9170 ;;		Nothing
  9171 ;; This function is called by:
  9172 ;;		_I2C_Init
  9173 ;;		_I2C_Read
  9174 ;;		_I2C_Write
  9175 ;;		_i2cNack
  9176 ;;		_i2cAck
  9177 ;;		_I2C_Start
  9178 ;;		_I2C_ReStart
  9179 ;;		_I2C_Stop
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           	psect	text53
  9184  001B3C                     __ptext53:
  9185                           	opt stack 0
  9186  001B3C                     _i2cHighScl:
  9187                           	opt stack 25
  9188                           
  9189                           ;I2C_Soft.c: 111: TRISBbits.RB4 = 1;
  9190                           
  9191                           ;incstack = 0
  9192  001B3C  8893               	bsf	3987,4,c	;volatile
  9193                           
  9194                           ;I2C_Soft.c: 112: _delay((unsigned long)((10)*(8000000/4000000.0)));
  9195  001B3E  0E06               	movlw	6
  9196  001B40                     u3927:
  9197  001B40  2EE8               	decfsz	wreg,f,c
  9198  001B42  D7FE               	goto	u3927
  9199  001B44  D000               	nop2		;nop
  9200  001B46  0012               	return		;funcret
  9201  001B48                     __end_of_i2cHighScl:
  9202                           	opt stack 0
  9203                           tblptru	equ	0xFF8
  9204                           tblptrh	equ	0xFF7
  9205                           tblptrl	equ	0xFF6
  9206                           tablat	equ	0xFF5
  9207                           prodh	equ	0xFF4
  9208                           prodl	equ	0xFF3
  9209                           intcon	equ	0xFF2
  9210                           intcon2	equ	0xFF1
  9211                           postinc0	equ	0xFEE
  9212                           wreg	equ	0xFE8
  9213                           postdec1	equ	0xFE5
  9214                           fsr1l	equ	0xFE1
  9215                           indf2	equ	0xFDF
  9216                           postinc2	equ	0xFDE
  9217                           postdec2	equ	0xFDD
  9218                           fsr2h	equ	0xFDA
  9219                           fsr2l	equ	0xFD9
  9220                           status	equ	0xFD8
  9221                           
  9222 ;; *************** function _Activate_Buzzer *****************
  9223 ;; Defined at:
  9224 ;;		line 227 in file "lab11t.c"
  9225 ;; Parameters:    Size  Location     Type
  9226 ;;		None
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;		None
  9229 ;; Return value:  Size  Location     Type
  9230 ;;		None               void
  9231 ;; Registers used:
  9232 ;;		wreg, status,2
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;Total ram usage:        0 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; Hardware stack levels required when called:    3
  9245 ;; This function calls:
  9246 ;;		Nothing
  9247 ;; This function is called by:
  9248 ;;		_main
  9249 ;; This function uses a non-reentrant model
  9250 ;;
  9251                           
  9252                           	psect	text54
  9253  001AFC                     __ptext54:
  9254                           	opt stack 0
  9255  001AFC                     _Activate_Buzzer:
  9256                           	opt stack 27
  9257                           
  9258                           ;lab11t.c: 229: PR2 = 0b11111001;
  9259                           
  9260                           ;incstack = 0
  9261  001AFC  0EF9               	movlw	249
  9262  001AFE  6ECB               	movwf	4043,c	;volatile
  9263                           
  9264                           ;lab11t.c: 230: T2CON = 0b00000101;
  9265  001B00  0E05               	movlw	5
  9266  001B02  6ECA               	movwf	4042,c	;volatile
  9267                           
  9268                           ;lab11t.c: 231: CCPR2L = 0b01001010;
  9269  001B04  0E4A               	movlw	74
  9270  001B06  6EBB               	movwf	4027,c	;volatile
  9271                           
  9272                           ;lab11t.c: 232: CCP2CON = 0b00111100;
  9273  001B08  0E3C               	movlw	60
  9274  001B0A  6EBA               	movwf	4026,c	;volatile
  9275  001B0C  0012               	return		;funcret
  9276  001B0E                     __end_of_Activate_Buzzer:
  9277                           	opt stack 0
  9278                           tblptru	equ	0xFF8
  9279                           tblptrh	equ	0xFF7
  9280                           tblptrl	equ	0xFF6
  9281                           tablat	equ	0xFF5
  9282                           prodh	equ	0xFF4
  9283                           prodl	equ	0xFF3
  9284                           intcon	equ	0xFF2
  9285                           intcon2	equ	0xFF1
  9286                           postinc0	equ	0xFEE
  9287                           wreg	equ	0xFE8
  9288                           postdec1	equ	0xFE5
  9289                           fsr1l	equ	0xFE1
  9290                           indf2	equ	0xFDF
  9291                           postinc2	equ	0xFDE
  9292                           postdec2	equ	0xFDD
  9293                           fsr2h	equ	0xFDA
  9294                           fsr2l	equ	0xFD9
  9295                           status	equ	0xFD8
  9296                           
  9297 ;; *************** function _chkisr *****************
  9298 ;; Defined at:
  9299 ;;		line 14 in file "Interrupt.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;		None               void
  9306 ;; Registers used:
  9307 ;;		wreg, status,2, status,0, cstack
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9315 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9316 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9317 ;;Total ram usage:       14 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    2
  9320 ;; This function calls:
  9321 ;;		_INT0_isr
  9322 ;;		_TIMER1_isr
  9323 ;; This function is called by:
  9324 ;;		Interrupt level 2
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328                           	psect	intcode
  9329  000008                     __pintcode:
  9330                           	opt stack 0
  9331  000008                     _chkisr:
  9332                           	opt stack 20
  9333                           
  9334                           ;incstack = 0
  9335  000008  CFFA F003          	movff	pclath,??_chkisr
  9336  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  9337  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  9338  000014  EDB9  F009         	call	int_func,f	;refresh shadow registers
  9339                           pclatu	equ	0xFFB
  9340                           pclath	equ	0xFFA
  9341                           tblptru	equ	0xFF8
  9342                           tblptrh	equ	0xFF7
  9343                           tblptrl	equ	0xFF6
  9344                           tablat	equ	0xFF5
  9345                           prodh	equ	0xFF4
  9346                           prodl	equ	0xFF3
  9347                           intcon	equ	0xFF2
  9348                           intcon2	equ	0xFF1
  9349                           postinc0	equ	0xFEE
  9350                           fsr0l	equ	0xFE9
  9351                           wreg	equ	0xFE8
  9352                           postdec1	equ	0xFE5
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           postdec2	equ	0xFDD
  9357                           fsr2h	equ	0xFDA
  9358                           fsr2l	equ	0xFD9
  9359                           status	equ	0xFD8
  9360                           
  9361                           	psect	intcode_body
  9362  001372                     __pintcode_body:
  9363                           	opt stack 20
  9364  001372                     int_func:
  9365                           	opt stack 20
  9366  001372  0006               	pop		; remove dummy address from shadow register refresh
  9367  001374  CFEA F006          	movff	fsr0h,??_chkisr+3
  9368  001378  CFE1 F007          	movff	fsr1l,??_chkisr+4
  9369  00137C  CFE2 F008          	movff	fsr1h,??_chkisr+5
  9370  001380  CFD9 F009          	movff	fsr2l,??_chkisr+6
  9371  001384  CFDA F00A          	movff	fsr2h,??_chkisr+7
  9372  001388  CFF3 F00B          	movff	prodl,??_chkisr+8
  9373  00138C  CFF4 F00C          	movff	prodh,??_chkisr+9
  9374  001390  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  9375  001394  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  9376  001398  CFF8 F00F          	movff	tblptru,??_chkisr+12
  9377  00139C  CFF5 F010          	movff	tablat,??_chkisr+13
  9378                           
  9379                           ;Interrupt.c: 16: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  9380  0013A0  A09E               	btfss	3998,0,c	;volatile
  9381  0013A2  D003               	goto	i2l2455
  9382  0013A4  ECA4  F00D         	call	_TIMER1_isr	;wreg free
  9383  0013A8  D000               	goto	i2l2455
  9384  0013AA                     i2l2455:
  9385                           
  9386                           ;Interrupt.c: 17: if (INTCONbits.INT0IF == 1) INT0_isr();
  9387  0013AA  A2F2               	btfss	intcon,1,c	;volatile
  9388  0013AC  D003               	goto	i2l162
  9389  0013AE  EC77  F004         	call	_INT0_isr	;wreg free
  9390  0013B2  D000               	goto	i2l162
  9391  0013B4                     i2l162:
  9392  0013B4  C010  FFF5         	movff	??_chkisr+13,tablat
  9393  0013B8  C00F  FFF8         	movff	??_chkisr+12,tblptru
  9394  0013BC  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  9395  0013C0  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  9396  0013C4  C00C  FFF4         	movff	??_chkisr+9,prodh
  9397  0013C8  C00B  FFF3         	movff	??_chkisr+8,prodl
  9398  0013CC  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  9399  0013D0  C009  FFD9         	movff	??_chkisr+6,fsr2l
  9400  0013D4  C008  FFE2         	movff	??_chkisr+5,fsr1h
  9401  0013D8  C007  FFE1         	movff	??_chkisr+4,fsr1l
  9402  0013DC  C006  FFEA         	movff	??_chkisr+3,fsr0h
  9403  0013E0  C005  FFE9         	movff	??_chkisr+2,fsr0l
  9404  0013E4  C004  FFFB         	movff	??_chkisr+1,pclatu
  9405  0013E8  C003  FFFA         	movff	??_chkisr,pclath
  9406  0013EC  0011               	retfie		f
  9407  0013EE                     __end_of_chkisr:
  9408                           	opt stack 0
  9409                           pclatu	equ	0xFFB
  9410                           pclath	equ	0xFFA
  9411                           tblptru	equ	0xFF8
  9412                           tblptrh	equ	0xFF7
  9413                           tblptrl	equ	0xFF6
  9414                           tablat	equ	0xFF5
  9415                           prodh	equ	0xFF4
  9416                           prodl	equ	0xFF3
  9417                           intcon	equ	0xFF2
  9418                           intcon2	equ	0xFF1
  9419                           postinc0	equ	0xFEE
  9420                           fsr0h	equ	0xFEA
  9421                           fsr0l	equ	0xFE9
  9422                           wreg	equ	0xFE8
  9423                           postdec1	equ	0xFE5
  9424                           fsr1h	equ	0xFE2
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           postdec2	equ	0xFDD
  9429                           fsr2h	equ	0xFDA
  9430                           fsr2l	equ	0xFD9
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function _TIMER1_isr *****************
  9434 ;; Defined at:
  9435 ;;		line 20 in file "Interrupt.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, status,2
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_chkisr
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text56
  9463  001B48                     __ptext56:
  9464                           	opt stack 0
  9465  001B48                     _TIMER1_isr:
  9466                           	opt stack 21
  9467                           
  9468                           ;Interrupt.c: 22: Nec_state = 0;
  9469                           
  9470                           ;incstack = 0
  9471  001B48  0E00               	movlw	0
  9472  001B4A  6E51               	movwf	_Nec_state,c
  9473                           
  9474                           ;Interrupt.c: 23: INTCON2bits.INTEDG0 = 0;
  9475  001B4C  9CF1               	bcf	intcon2,6,c	;volatile
  9476                           
  9477                           ;Interrupt.c: 24: T1CONbits.TMR1ON = 0;
  9478  001B4E  90CD               	bcf	4045,0,c	;volatile
  9479                           
  9480                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  9481  001B50  909E               	bcf	3998,0,c	;volatile
  9482  001B52  0012               	return		;funcret
  9483  001B54                     __end_of_TIMER1_isr:
  9484                           	opt stack 0
  9485                           pclatu	equ	0xFFB
  9486                           pclath	equ	0xFFA
  9487                           tblptru	equ	0xFF8
  9488                           tblptrh	equ	0xFF7
  9489                           tblptrl	equ	0xFF6
  9490                           tablat	equ	0xFF5
  9491                           prodh	equ	0xFF4
  9492                           prodl	equ	0xFF3
  9493                           intcon	equ	0xFF2
  9494                           intcon2	equ	0xFF1
  9495                           postinc0	equ	0xFEE
  9496                           fsr0h	equ	0xFEA
  9497                           fsr0l	equ	0xFE9
  9498                           wreg	equ	0xFE8
  9499                           postdec1	equ	0xFE5
  9500                           fsr1h	equ	0xFE2
  9501                           fsr1l	equ	0xFE1
  9502                           indf2	equ	0xFDF
  9503                           postinc2	equ	0xFDE
  9504                           postdec2	equ	0xFDD
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function _INT0_isr *****************
  9510 ;; Defined at:
  9511 ;;		line 34 in file "Interrupt.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;		None
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;		None
  9516 ;; Return value:  Size  Location     Type
  9517 ;;		None               void
  9518 ;; Registers used:
  9519 ;;		wreg, status,2, status,0, cstack
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9527 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9528 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9529 ;;Total ram usage:        2 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    1
  9532 ;; This function calls:
  9533 ;;		_force_nec_state0
  9534 ;; This function is called by:
  9535 ;;		_chkisr
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           	psect	text57
  9540  0008EE                     __ptext57:
  9541                           	opt stack 0
  9542  0008EE                     _INT0_isr:
  9543                           	opt stack 20
  9544                           
  9545                           ;Interrupt.c: 36: INTCONbits.INT0IF = 0;
  9546                           
  9547                           ;incstack = 0
  9548  0008EE  92F2               	bcf	intcon,1,c	;volatile
  9549                           
  9550                           ;Interrupt.c: 37: if (Nec_state != 0)
  9551  0008F0  5051               	movf	_Nec_state,w,c
  9552  0008F2  B4D8               	btfsc	status,2,c
  9553  0008F4  D096               	goto	i2l2107
  9554                           
  9555                           ;Interrupt.c: 38: {
  9556                           ;Interrupt.c: 39: Time_Elapsed = (TMR1H << 8) | TMR1L;
  9557  0008F6  50CE               	movf	4046,w,c	;volatile
  9558  0008F8  CFCF F001          	movff	4047,??_INT0_isr	;volatile
  9559  0008FC  6A02               	clrf	(??_INT0_isr+1)& (0+255),c
  9560  0008FE  C001  F002         	movff	??_INT0_isr,??_INT0_isr+1
  9561  000902  6A01               	clrf	??_INT0_isr,c
  9562  000904  1001               	iorwf	??_INT0_isr,w,c
  9563  000906  6E48               	movwf	_Time_Elapsed,c
  9564  000908  5002               	movf	??_INT0_isr+1,w,c
  9565  00090A  6E49               	movwf	_Time_Elapsed+1,c
  9566                           
  9567                           ;Interrupt.c: 40: TMR1H = 0;
  9568  00090C  0E00               	movlw	0
  9569  00090E  6ECF               	movwf	4047,c	;volatile
  9570                           
  9571                           ;Interrupt.c: 41: TMR1L = 0;
  9572  000910  0E00               	movlw	0
  9573  000912  6ECE               	movwf	4046,c	;volatile
  9574                           
  9575                           ;Interrupt.c: 42: }
  9576                           ;Interrupt.c: 44: switch(Nec_state)
  9577  000914  D086               	goto	i2l2107
  9578  000916                     i2l2035:
  9579                           
  9580                           ;Interrupt.c: 47: {
  9581                           ;Interrupt.c: 49: TMR1H = 0;
  9582  000916  0E00               	movlw	0
  9583  000918  6ECF               	movwf	4047,c	;volatile
  9584                           
  9585                           ;Interrupt.c: 50: TMR1L = 0;
  9586  00091A  0E00               	movlw	0
  9587  00091C  6ECE               	movwf	4046,c	;volatile
  9588                           
  9589                           ;Interrupt.c: 51: PIR1bits.TMR1IF = 0;
  9590  00091E  909E               	bcf	3998,0,c	;volatile
  9591                           
  9592                           ;Interrupt.c: 52: T1CON= 0x90;
  9593  000920  0E90               	movlw	144
  9594  000922  6ECD               	movwf	4045,c	;volatile
  9595                           
  9596                           ;Interrupt.c: 53: T1CONbits.TMR1ON = 1;
  9597  000924  80CD               	bsf	4045,0,c	;volatile
  9598                           
  9599                           ;Interrupt.c: 54: bit_count = 0;
  9600  000926  0E00               	movlw	0
  9601  000928  6E58               	movwf	_bit_count,c
  9602                           
  9603                           ;Interrupt.c: 55: Nec_code = 0;
  9604  00092A  0E00               	movlw	0
  9605  00092C  6E44               	movwf	_Nec_code,c
  9606  00092E  0E00               	movlw	0
  9607  000930  6E45               	movwf	_Nec_code+1,c
  9608  000932  0E00               	movlw	0
  9609  000934  6E46               	movwf	_Nec_code+2,c
  9610  000936  0E00               	movlw	0
  9611  000938  6E47               	movwf	_Nec_code+3,c
  9612                           
  9613                           ;Interrupt.c: 56: Nec_state = 1;
  9614  00093A  0E01               	movlw	1
  9615  00093C  6E51               	movwf	_Nec_state,c
  9616  00093E  D06F               	goto	i2l2101
  9617                           
  9618                           ;Interrupt.c: 58: return;
  9619                           
  9620                           ;Interrupt.c: 57: INTCON2bits.INTEDG0 = 1;
  9621  000940  D081               	goto	i2l174
  9622  000942                     i2l2045:
  9623                           
  9624                           ;Interrupt.c: 62: {
  9625                           ;Interrupt.c: 63: if(Time_Elapsed > 8500 && Time_Elapsed < 9500)
  9626  000942  0E35               	movlw	53
  9627  000944  5C48               	subwf	_Time_Elapsed,w,c
  9628  000946  0E21               	movlw	33
  9629  000948  5849               	subwfb	_Time_Elapsed+1,w,c
  9630  00094A  A0D8               	btfss	status,0,c
  9631  00094C  D009               	goto	i2l2051
  9632  00094E  0E1C               	movlw	28
  9633  000950  5C48               	subwf	_Time_Elapsed,w,c
  9634  000952  0E25               	movlw	37
  9635  000954  5849               	subwfb	_Time_Elapsed+1,w,c
  9636  000956  B0D8               	btfsc	status,0,c
  9637  000958  D003               	goto	i2l2051
  9638                           
  9639                           ;Interrupt.c: 64: {
  9640                           ;Interrupt.c: 65: Nec_state = 2;
  9641  00095A  0E02               	movlw	2
  9642  00095C  6E51               	movwf	_Nec_state,c
  9643                           
  9644                           ;Interrupt.c: 66: }
  9645  00095E  D02A               	goto	i2l2077
  9646  000960                     i2l2051:
  9647                           
  9648                           ;Interrupt.c: 67: else
  9649                           ;Interrupt.c: 68: {
  9650                           ;Interrupt.c: 69: force_nec_state0();
  9651  000960  ECC5  F00D         	call	_force_nec_state0	;wreg free
  9652  000964  D027               	goto	i2l2077
  9653  000966  D026               	goto	i2l2077
  9654                           
  9655                           ;Interrupt.c: 72: return;
  9656                           
  9657                           ;Interrupt.c: 70: }
  9658                           ;Interrupt.c: 71: INTCON2bits.INTEDG0 = 0;
  9659  000968  D06D               	goto	i2l174
  9660  00096A                     i2l2057:
  9661                           
  9662                           ;Interrupt.c: 76: {
  9663                           ;Interrupt.c: 77: if(Time_Elapsed > 4000 && Time_Elapsed < 5000)
  9664  00096A  0EA1               	movlw	161
  9665  00096C  5C48               	subwf	_Time_Elapsed,w,c
  9666  00096E  0E0F               	movlw	15
  9667  000970  5849               	subwfb	_Time_Elapsed+1,w,c
  9668  000972  A0D8               	btfss	status,0,c
  9669  000974  D009               	goto	i2l2063
  9670  000976  0E88               	movlw	136
  9671  000978  5C48               	subwf	_Time_Elapsed,w,c
  9672  00097A  0E13               	movlw	19
  9673  00097C  5849               	subwfb	_Time_Elapsed+1,w,c
  9674  00097E  B0D8               	btfsc	status,0,c
  9675  000980  D003               	goto	i2l2063
  9676  000982                     
  9677                           ;Interrupt.c: 78: {
  9678                           ;Interrupt.c: 79: Nec_state = 3;
  9679  000982  0E03               	movlw	3
  9680  000984  6E51               	movwf	_Nec_state,c
  9681                           
  9682                           ;Interrupt.c: 80: }
  9683  000986  D04B               	goto	i2l2101
  9684  000988                     i2l2063:
  9685                           
  9686                           ;Interrupt.c: 81: else
  9687                           ;Interrupt.c: 82: {
  9688                           ;Interrupt.c: 83: force_nec_state0();
  9689  000988  ECC5  F00D         	call	_force_nec_state0	;wreg free
  9690  00098C  D048               	goto	i2l2101
  9691  00098E  D047               	goto	i2l2101
  9692                           
  9693                           ;Interrupt.c: 86: return;
  9694                           
  9695                           ;Interrupt.c: 84: }
  9696                           ;Interrupt.c: 85: INTCON2bits.INTEDG0 = 1;
  9697  000990  D059               	goto	i2l174
  9698  000992                     i2l2069:
  9699                           
  9700                           ;Interrupt.c: 90: {
  9701                           ;Interrupt.c: 91: if(Time_Elapsed > 400 && Time_Elapsed < 700)
  9702  000992  0E91               	movlw	145
  9703  000994  5C48               	subwf	_Time_Elapsed,w,c
  9704  000996  0E01               	movlw	1
  9705  000998  5849               	subwfb	_Time_Elapsed+1,w,c
  9706  00099A  A0D8               	btfss	status,0,c
  9707  00099C  D008               	goto	i2l2075
  9708  00099E  0EBC               	movlw	188
  9709  0009A0  5C48               	subwf	_Time_Elapsed,w,c
  9710  0009A2  0E02               	movlw	2
  9711  0009A4  5849               	subwfb	_Time_Elapsed+1,w,c
  9712  0009A6  B0D8               	btfsc	status,0,c
  9713  0009A8  D002               	goto	i2l2075
  9714                           
  9715                           ;Interrupt.c: 92: {
  9716                           ;Interrupt.c: 93: Nec_state = 4;
  9717  0009AA  0E04               	movlw	4
  9718  0009AC  D7D7               	goto	L4
  9719  0009AE                     i2l2075:
  9720                           
  9721                           ;Interrupt.c: 95: else
  9722                           ;Interrupt.c: 96: {
  9723                           ;Interrupt.c: 97: force_nec_state0();
  9724  0009AE  ECC5  F00D         	call	_force_nec_state0	;wreg free
  9725  0009B2  D000               	goto	i2l2077
  9726  0009B4                     i2l2077:
  9727                           
  9728                           ;Interrupt.c: 98: }
  9729                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 0;
  9730  0009B4  9CF1               	bcf	intcon2,6,c	;volatile
  9731                           
  9732                           ;Interrupt.c: 100: return;
  9733  0009B6  D046               	goto	i2l174
  9734  0009B8                     i2l2081:
  9735                           
  9736                           ;Interrupt.c: 104: {
  9737                           ;Interrupt.c: 105: if(Time_Elapsed > 400 && Time_Elapsed < 1800)
  9738  0009B8  0E91               	movlw	145
  9739  0009BA  5C48               	subwf	_Time_Elapsed,w,c
  9740  0009BC  0E01               	movlw	1
  9741  0009BE  5849               	subwfb	_Time_Elapsed+1,w,c
  9742  0009C0  A0D8               	btfss	status,0,c
  9743  0009C2  D02A               	goto	i2l2099
  9744  0009C4  0E08               	movlw	8
  9745  0009C6  5C48               	subwf	_Time_Elapsed,w,c
  9746  0009C8  0E07               	movlw	7
  9747  0009CA  5849               	subwfb	_Time_Elapsed+1,w,c
  9748  0009CC  B0D8               	btfsc	status,0,c
  9749  0009CE  D024               	goto	i2l2099
  9750                           
  9751                           ;Interrupt.c: 106: {
  9752                           ;Interrupt.c: 107: Nec_code = Nec_code << 1;
  9753  0009D0  90D8               	bcf	status,0,c
  9754  0009D2  3444               	rlcf	_Nec_code,w,c
  9755  0009D4  6E44               	movwf	_Nec_code,c
  9756  0009D6  3445               	rlcf	_Nec_code+1,w,c
  9757  0009D8  6E45               	movwf	_Nec_code+1,c
  9758  0009DA  3446               	rlcf	_Nec_code+2,w,c
  9759  0009DC  6E46               	movwf	_Nec_code+2,c
  9760  0009DE  3447               	rlcf	_Nec_code+3,w,c
  9761  0009E0  6E47               	movwf	_Nec_code+3,c
  9762                           
  9763                           ;Interrupt.c: 108: if(Time_Elapsed > 1000)
  9764  0009E2  0EE9               	movlw	233
  9765  0009E4  5C48               	subwf	_Time_Elapsed,w,c
  9766  0009E6  0E03               	movlw	3
  9767  0009E8  5849               	subwfb	_Time_Elapsed+1,w,c
  9768  0009EA  A0D8               	btfss	status,0,c
  9769  0009EC  D007               	goto	i2l2089
  9770                           
  9771                           ;Interrupt.c: 109: {
  9772                           ;Interrupt.c: 110: Nec_code++;
  9773  0009EE  0E01               	movlw	1
  9774  0009F0  2644               	addwf	_Nec_code,f,c
  9775  0009F2  0E00               	movlw	0
  9776  0009F4  2245               	addwfc	_Nec_code+1,f,c
  9777  0009F6  2246               	addwfc	_Nec_code+2,f,c
  9778  0009F8  2247               	addwfc	_Nec_code+3,f,c
  9779  0009FA  D000               	goto	i2l2089
  9780  0009FC                     i2l2089:
  9781                           
  9782                           ;Interrupt.c: 111: }
  9783                           ;Interrupt.c: 112: bit_count++;
  9784  0009FC  2A58               	incf	_bit_count,f,c
  9785                           
  9786                           ;Interrupt.c: 113: if(bit_count > 31)
  9787  0009FE  0E1F               	movlw	31
  9788  000A00  6458               	cpfsgt	_bit_count,c
  9789  000A02  D7BF               	goto	L5
  9790                           
  9791                           ;Interrupt.c: 114: {
  9792                           ;Interrupt.c: 115: nec_ok = 1;
  9793  000A04  0E00               	movlw	0
  9794  000A06  6E4D               	movwf	_nec_ok+1,c
  9795  000A08  0E01               	movlw	1
  9796  000A0A  6E4C               	movwf	_nec_ok,c
  9797                           
  9798                           ;Interrupt.c: 116: Nec_code1 = (char)((Nec_code >> 8));
  9799  000A0C  C045  F050         	movff	_Nec_code+1,_Nec_code1
  9800                           
  9801                           ;Interrupt.c: 117: INT0IE = 0;
  9802  000A10  98F2               	bcf	intcon,4,c	;volatile
  9803                           
  9804                           ;Interrupt.c: 118: Nec_state = 0;
  9805  000A12  0E00               	movlw	0
  9806  000A14  6E51               	movwf	_Nec_state,c
  9807  000A16  D7B5               	goto	L5
  9808  000A18                     i2l2099:
  9809                           
  9810                           ;Interrupt.c: 122: else
  9811                           ;Interrupt.c: 123: {
  9812                           ;Interrupt.c: 124: force_nec_state0();
  9813  000A18  ECC5  F00D         	call	_force_nec_state0	;wreg free
  9814  000A1C  D000               	goto	i2l2101
  9815  000A1E                     i2l2101:
  9816                           
  9817                           ;Interrupt.c: 125: }
  9818                           ;Interrupt.c: 126: INTCON2bits.INTEDG0 = 1;
  9819  000A1E  8CF1               	bsf	intcon2,6,c	;volatile
  9820                           
  9821                           ;Interrupt.c: 128: }
  9822                           ;Interrupt.c: 129: }
  9823                           
  9824                           ;Interrupt.c: 127: return;
  9825  000A20  D011               	goto	i2l174
  9826  000A22                     i2l2107:
  9827  000A22  5051               	movf	_Nec_state,w,c
  9828                           
  9829                           ; Switch size 1, requested type "space"
  9830                           ; Number of cases is 5, Range of values is 0 to 4
  9831                           ; switch strategies available:
  9832                           ; Name         Instructions Cycles
  9833                           ; simple_byte           16     9 (average)
  9834                           ;	Chosen strategy is simple_byte
  9835  000A24  0A00               	xorlw	0	; case 0
  9836  000A26  B4D8               	btfsc	status,2,c
  9837  000A28  D776               	goto	i2l2035
  9838  000A2A  0A01               	xorlw	1	; case 1
  9839  000A2C  B4D8               	btfsc	status,2,c
  9840  000A2E  D789               	goto	i2l2045
  9841  000A30  0A03               	xorlw	3	; case 2
  9842  000A32  B4D8               	btfsc	status,2,c
  9843  000A34  D79A               	goto	i2l2057
  9844  000A36  0A01               	xorlw	1	; case 3
  9845  000A38  B4D8               	btfsc	status,2,c
  9846  000A3A  D7AB               	goto	i2l2069
  9847  000A3C  0A07               	xorlw	7	; case 4
  9848  000A3E  B4D8               	btfsc	status,2,c
  9849  000A40  D7BB               	goto	i2l2081
  9850  000A42  D000               	goto	i2l174
  9851  000A44                     i2l174:
  9852  000A44  0012               	return		;funcret
  9853  000A46                     __end_of_INT0_isr:
  9854                           	opt stack 0
  9855                           pclatu	equ	0xFFB
  9856                           pclath	equ	0xFFA
  9857                           tblptru	equ	0xFF8
  9858                           tblptrh	equ	0xFF7
  9859                           tblptrl	equ	0xFF6
  9860                           tablat	equ	0xFF5
  9861                           prodh	equ	0xFF4
  9862                           prodl	equ	0xFF3
  9863                           intcon	equ	0xFF2
  9864                           intcon2	equ	0xFF1
  9865                           postinc0	equ	0xFEE
  9866                           fsr0h	equ	0xFEA
  9867                           fsr0l	equ	0xFE9
  9868                           wreg	equ	0xFE8
  9869                           postdec1	equ	0xFE5
  9870                           fsr1h	equ	0xFE2
  9871                           fsr1l	equ	0xFE1
  9872                           indf2	equ	0xFDF
  9873                           postinc2	equ	0xFDE
  9874                           postdec2	equ	0xFDD
  9875                           fsr2h	equ	0xFDA
  9876                           fsr2l	equ	0xFD9
  9877                           status	equ	0xFD8
  9878                           
  9879 ;; *************** function _force_nec_state0 *****************
  9880 ;; Defined at:
  9881 ;;		line 28 in file "Interrupt.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;		None
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;		None
  9886 ;; Return value:  Size  Location     Type
  9887 ;;		None               void
  9888 ;; Registers used:
  9889 ;;		wreg, status,2
  9890 ;; Tracked objects:
  9891 ;;		On entry : 0/0
  9892 ;;		On exit  : 0/0
  9893 ;;		Unchanged: 0/0
  9894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;Total ram usage:        0 bytes
  9900 ;; Hardware stack levels used:    1
  9901 ;; This function calls:
  9902 ;;		Nothing
  9903 ;; This function is called by:
  9904 ;;		_INT0_isr
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text58
  9909  001B8A                     __ptext58:
  9910                           	opt stack 0
  9911  001B8A                     _force_nec_state0:
  9912                           	opt stack 20
  9913                           
  9914                           ;Interrupt.c: 30: Nec_state=0;
  9915                           
  9916                           ;incstack = 0
  9917  001B8A  0E00               	movlw	0
  9918  001B8C  6E51               	movwf	_Nec_state,c
  9919                           
  9920                           ;Interrupt.c: 31: T1CONbits.TMR1ON = 0;
  9921  001B8E  90CD               	bcf	4045,0,c	;volatile
  9922  001B90  0012               	return		;funcret
  9923  001B92                     __end_of_force_nec_state0:
  9924                           	opt stack 0
  9925                           pclatu	equ	0xFFB
  9926                           pclath	equ	0xFFA
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           intcon	equ	0xFF2
  9934                           intcon2	equ	0xFF1
  9935                           postinc0	equ	0xFEE
  9936                           fsr0h	equ	0xFEA
  9937                           fsr0l	equ	0xFE9
  9938                           wreg	equ	0xFE8
  9939                           postdec1	equ	0xFE5
  9940                           fsr1h	equ	0xFE2
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           postdec2	equ	0xFDD
  9945                           fsr2h	equ	0xFDA
  9946                           fsr2l	equ	0xFD9
  9947                           status	equ	0xFD8
  9948                           pclatu	equ	0xFFB
  9949                           pclath	equ	0xFFA
  9950                           tblptru	equ	0xFF8
  9951                           tblptrh	equ	0xFF7
  9952                           tblptrl	equ	0xFF6
  9953                           tablat	equ	0xFF5
  9954                           prodh	equ	0xFF4
  9955                           prodl	equ	0xFF3
  9956                           intcon	equ	0xFF2
  9957                           intcon2	equ	0xFF1
  9958                           postinc0	equ	0xFEE
  9959                           fsr0h	equ	0xFEA
  9960                           fsr0l	equ	0xFE9
  9961                           wreg	equ	0xFE8
  9962                           postdec1	equ	0xFE5
  9963                           fsr1h	equ	0xFE2
  9964                           fsr1l	equ	0xFE1
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           postdec2	equ	0xFDD
  9968                           fsr2h	equ	0xFDA
  9969                           fsr2l	equ	0xFD9
  9970                           status	equ	0xFD8
  9971                           
  9972                           	psect	rparam
  9973  0000                     pclatu	equ	0xFFB
  9974                           pclath	equ	0xFFA
  9975                           tblptru	equ	0xFF8
  9976                           tblptrh	equ	0xFF7
  9977                           tblptrl	equ	0xFF6
  9978                           tablat	equ	0xFF5
  9979                           prodh	equ	0xFF4
  9980                           prodl	equ	0xFF3
  9981                           intcon	equ	0xFF2
  9982                           intcon2	equ	0xFF1
  9983                           postinc0	equ	0xFEE
  9984                           fsr0h	equ	0xFEA
  9985                           fsr0l	equ	0xFE9
  9986                           wreg	equ	0xFE8
  9987                           postdec1	equ	0xFE5
  9988                           fsr1h	equ	0xFE2
  9989                           fsr1l	equ	0xFE1
  9990                           indf2	equ	0xFDF
  9991                           postinc2	equ	0xFDE
  9992                           postdec2	equ	0xFDD
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8


Data Sizes:
    Strings     154
    Constant    547
    Data        212
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     111
    BANK0           128     13     128
    BANK1           256      5     131
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[8]), STR_6(CODE[22]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_5(CODE[13]), STR_4(CODE[21]), STR_3(CODE[43]), STR_2(CODE[30]), 
		 -> STR_1(CODE[43]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), buffer(BANK0[31]), txt1(BANK1[84]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___llmod
    ___llmod->___lldiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Do_Init->_DS1621_Init
    _init_UART->_OpenUSART
    _DS1621_Init->_I2C_Write_Cmd_Write_Data
    _I2C_Write_Cmd_Write_Data->_I2C_Write
    _I2C_Write_Cmd_Only->_I2C_Write
    _DS3231_Setup_Time->_I2C_Write
    _DS3231_Read_Time->_I2C_Read
    _DS1621_Read_Temp->_I2C_Read

Critical Paths under _chkisr in COMRAM

    _chkisr->_INT0_isr

Critical Paths under _main in BANK0

    _main->_printf
    _Initialize_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   55280
                                             66 COMRAM     1     1      0
                                              0 BANK1      5     5      0
                    _Activate_Buzzer
                   _DS1621_Read_Temp
                   _DS3231_Read_Time
                  _DS3231_Setup_Time
                  _Deactivate_Buzzer
                            _Do_Init
                  _Initialize_Screen
                   _Wait_Half_Second
                            ___awdiv
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              40    26     14    3660
                                             38 COMRAM    18     4     14
                                              0 BANK0     13    13      0
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     362
                                             29 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     501
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    8344
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    4703
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    6484
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     705
                                             16 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_Screen                                    0     0      0   20983
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     369
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   12526
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     195
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   10644
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    3876
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3102
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4207
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1034
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Do_Init                                              0     0      0    1121
                        _DS1621_Init
                           _I2C_Init
                          _init_UART
 ---------------------------------------------------------------------------------
 (2) _init_UART                                            0     0      0     375
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     375
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             4     0      4      65
                                             16 COMRAM     4     0      4
                         _i2cHighScl
                         _i2cHighSda
 ---------------------------------------------------------------------------------
 (2) _DS1621_Init                                          1     1      0     681
                                             21 COMRAM     1     1      0
                 _I2C_Write_Cmd_Only
           _I2C_Write_Cmd_Write_Data
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Write_Data                             3     1      2     356
                                             18 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Cmd_Only                                   2     1      1     260
                                             18 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DS3231_Setup_Time                                    2     2      0     201
                                             18 COMRAM     2     2      0
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS3231_Read_Time                                     3     3      0     430
                                             19 COMRAM     2     2      0
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (1) _DS1621_Read_Temp                                     5     3      2     464
                                             19 COMRAM     5     3      2
                        _I2C_ReStart
                           _I2C_Read
                          _I2C_Start
                           _I2C_Stop
                          _I2C_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Write                                            2     2      0     133
                                             16 COMRAM     2     2      0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_Read                                             3     3      0     198
                                             16 COMRAM     3     3      0
                             _i2cAck
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                            _i2cNack
 ---------------------------------------------------------------------------------
 (3) _i2cNack                                              0     0      0       0
                         _i2cHighScl
                          _i2cLowScl
 ---------------------------------------------------------------------------------
 (3) _i2cAck                                               0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (2) _I2C_ReStart                                          0     0      0       0
                         _i2cHighScl
                         _i2cHighSda
                          _i2cLowScl
                          _i2cLowSda
 ---------------------------------------------------------------------------------
 (5) _i2cLowSda                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2cLowScl                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighSda                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2cHighScl                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INT0_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INT0_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                   _force_nec_state0
 ---------------------------------------------------------------------------------
 (11) _force_nec_state0                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _DS1621_Read_Temp
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Read_Time
     _I2C_ReStart
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Read
       _i2cAck
         _i2cHighScl
         _i2cHighSda
         _i2cLowScl
         _i2cLowSda
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cNack
         _i2cHighScl
         _i2cLowScl
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _DS3231_Setup_Time
     _I2C_Start
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Stop
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
     _I2C_Write
       _i2cHighScl
       _i2cHighSda
       _i2cLowScl
       _i2cLowSda
   _Deactivate_Buzzer
   _Do_Init
     _DS1621_Init
       _I2C_Write_Cmd_Only
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
       _I2C_Write_Cmd_Write_Data
         _I2C_Start
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Stop
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
         _I2C_Write
           _i2cHighScl
           _i2cHighSda
           _i2cLowScl
           _i2cLowSda
     _I2C_Init
       _i2cHighScl
       _i2cHighSda
     _init_UART
       _OpenUSART
   _Initialize_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_Half_Second
   ___awdiv
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     _isdigit
     _putch

 _chkisr (ROOT)
   _INT0_isr
     _force_nec_state0
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5      83       7       51.2%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      80       5      100.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      6F       1       87.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     172      34        0.0%
DATA                 0      0     172       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun May 01 12:01:19 2022

                      drawCircle@f 002A                        drawCircle@r 0020  
                      drawCircle@x 002C                        drawCircle@y 002E  
                                _i 005E                 __size_of_I2C_Start 0012  
                      _SSPSTATbits 000FC7                 __size_of_I2C_Write 003E  
                     drawCircle@x0 001C                       drawCircle@y0 001E  
                               _D1 0080                                 _D2 0095  
                               _D3 00AA                                 l34 17DE  
                               l37 186A                       ___awdiv@sign 0016  
              ___wmul@multiplicand 0013                                l300 0B9A  
                              l117 1910                                l302 0A74  
                              l224 16F8                                l234 1A9A  
                              l340 1096                                l309 0AF0  
                              l341 10B8                                l337 10BA  
                              l338 1026                                l602 1A54  
                              l284 12F2                                l348 0802  
                              l278 1972                                l366 0C0A  
                              l711 151E                                l712 1520  
                              l713 152A                                l714 152C  
                              l642 0140                                l707 1504  
                              l716 1546                                l645 01B0  
                              l719 19C4                                l912 1150  
                              l584 1B32                                l683 04F0  
                ?_Wait_Half_Second 0001                                _PR2 000FCB  
                              _day 005A                  _Deactivate_Buzzer 1B72  
             __size_of_I2C_ReStart 0016                                _dow 005B  
                              _nbr 004A                                _txt 004E  
                              prod 000FF3                                wreg 000FE8  
               ??_Wait_Half_Second 0011                 ?_Deactivate_Buzzer 0001  
                  ??_fillRectangle 001D                       __CFG_LVP$OFF 000000  
          _TFT_GreenTab_Initialize 1974                       __CFG_WDT$OFF 000000  
                   drawFastVLine@h 0019                               l1150 19E6  
                             l1281 181C                               l1179 125A  
                   drawFastVLine@x 0022                               l1189 14C6  
                   drawFastVLine@y 0018                               l4203 188C  
                             l5011 02DE                               l5003 02A8  
                             l5101 112A                               l5005 02BC  
                             l5031 036E                               l5023 0338  
                             l5015 0312                               l4241 1954  
                             l4401 0AE8                               l5105 1136  
                             l5041 03B2                               l5025 0344  
                             l5017 031E                               l4163 12B4  
                             l4411 0B3A                               l5043 042C  
                             l5051 04AE                               l5035 038C  
                             l4173 12DA                               l4253 1774  
                             l5109 1146                               l5053 04B8  
                             l5029 0362                               l4191 1874  
                             l4175 12E8                               l4159 127C  
                             l4431 17EA                               l5039 03A0  
                             l5055 04D2                               l4193 187A  
                             l4185 1862                               l4505 1516  
                             l4249 1758                               l4417 0B66  
                             l4409 0B12                               l4425 0B96  
                             l4433 17F0                               l5049 049A  
                             l4419 0B8E                               l4443 0FF0  
                             l5091 1104                               l5083 10E4  
                             l5411 05CC                               l4541 17AA  
                             l4605 0E60                               l4461 108C  
                             l5093 110C                               l5077 10D2  
                             l4383 0A62                               l4631 0BF0  
                             l4703 1202                               l5431 0628  
                             l5423 05F0                               l4561 17DA  
                             l4537 17A2                               l4393 0A80  
                             l4617 0ED0                               l4609 0E7E  
                             l4465 109A                               l4449 105E  
                             l5089 10FA                               l4705 1210  
                             l4547 17B8                               l4555 17C8  
                             l4387 0A70                               l4379 0A56  
                             l4619 0ED8                               l4475 10B4  
                             l4651 0CBE                               l4715 124A  
                             l4707 1218                               l4731 14B6  
                             l4723 147A                               l5435 0632  
                             l5427 060A                               l4549 17C0  
                             l4493 14FC                               l4485 14EA  
                             l4397 0AB0                               l4389 0A78  
                             l4469 10A4                               l4725 1488  
   I2C_Write_Cmd_Write_Data@Device 0015                               l4559 17D4  
                             l4399 0AE4                               l4647 0C6C  
                             l4727 1490                               l5391 0500  
                             l4497 1508                               l4489 14F4  
                             l4593 0E10                               l4681 191C  
                             l4825 07E8                               l4921 003E  
                             l4683 1926                               l4923 0050  
                             l4853 08D8                               l4693 19DE  
                             l4941 00F8                               l4933 0092  
                             l4917 002A                               l4943 0100  
                             l4927 005C                               l4929 0072  
                             l4955 0168                               l4947 010A  
                             l4973 01FC                               l4983 024A  
                             l4975 0202                               l4959 0190  
                             l4993 0266                               l4969 01D2  
                             l4987 0252                               l4979 0210  
                             l4997 02A0                               l4989 0258  
                             STR_1 FF64                               STR_2 FF8F  
                             STR_3 FF64                               STR_4 FFC3  
                             STR_5 FFE9                               STR_6 FFAD  
                             STR_7 FFF6                               STR_8 FFD8  
                             u3160 0E3A                               u2690 12AA  
                             u2950 101E                               u2880 0B48  
                             u2960 1054                               u3927 1B40  
                             _RBPU 007F8F                               _TRMT 007D61  
              ??_Deactivate_Buzzer 0011                               _main 04F2  
                             _font FD41                               _hour 005D  
                 __end_of_I2C_Init 1B5E                   __end_of_I2C_Read 17E0  
                             _year 006D                               fsr0h 000FEA  
                             _txt1 012A                               fsr1h 000FE2  
                             fsr0l 000FE9                               fsr2h 000FDA  
                             fsr1l 000FE1                               indf2 000FDF  
                             fsr2l 000FD9                               _wrap 006F  
                 __end_of_I2C_Stop 1AD8                               pclat 000FFA  
               __size_of_LCD_Reset 0012                               prodh 000FF4  
                             prodl 000FF3                               start 0018  
      __size_of_I2C_Write_Cmd_Only 001A                    __end_of_Do_Init 18D6  
                  ??_drawFastVLine 001C                    __end_of_i2cNack 1B68  
                     ___param_bank 000010                        ?_TIMER1_isr 0001  
                 __end_of_INT0_isr 0A46          __end_of_Deactivate_Buzzer 1B7A  
                  drawFastVLine@hi 0020                    drawFastVLine@lo 0021  
                            ?_main 0001                    __end_of___awdiv 1152  
                  drawCircle@ddF_x 0026                    drawCircle@ddF_y 0028  
                  __end_of___lldiv 126C                              _T0CON 000FD5  
                  ___awdiv@divisor 0013                              _T1CON 000FCD  
                  __end_of___llmod 14D8                              _T2CON 000FCA  
                            _T3CON 000FB1                              i2l162 13B4  
                            i2l174 0A44                    ___awdiv@counter 0015  
                  drawCircle@color 0022                              _RCSTA 000FAB  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR3H 000FB3  
                            _TMR1L 000FCE                              _TMR3L 000FB2  
                            _SPBRG 000FAF                              _PORTA 000F80  
                            _PORTD 000F83                              _PORTE 000F84  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96                              _TXREG 000FAD  
                            _TXSTA 000FAC                              _Rcmd1 0CD4  
                            _Rcmd3 0EEE                         _i2cHighSda 1B82  
                       _i2cHighScl 1B3C                    __end_of_dpowers FF44  
                            _color 0100                              _font2 FE40  
            fillCircleHelper@ddF_x 0031              fillCircleHelper@ddF_y 0033  
                            _found 005C                    __end_of_isdigit 19E8  
                            _month 0060              fillCircleHelper@delta 002B  
                            _putch 1B2E              fillCircleHelper@color 002D  
                            main@i 0180                  __end_of_I2C_Start 1AEA  
                __end_of_I2C_Write 189A                     __CFG_BOREN$OFF 000000  
                            tablat 000FF5                              status 000FD8  
                ?_DS1621_Read_Temp 0014                    write_data@data_ 0013  
               ??_DS1621_Read_Temp 0016                    __initialization 13EE  
                     __end_of_main 0740                       __end_of_font FE40  
                 __end_of_Rcmd2red 185C                             ??_main 0043  
                    __activetblptr 000002                  ?_DS3231_Read_Time 0001  
                __end_of_LCD_Reset 1AC6          ??_TFT_GreenTab_Initialize 001D  
               ??_DS3231_Read_Time 0014                             ?_Rcmd1 0001  
                           ?_Rcmd3 0001                          I2C_Init@c 0011  
                        I2C_Read@n 0012                             _ADCON1 000FC1  
              DS1621_Read_Temp@Cmd 0016                   ___llmod@dividend 001E  
                           _CCPR2L 000FBB                   ___awdiv@dividend 0011  
               __size_of_i2cLowSda 000A                 __size_of_i2cLowScl 0008  
                           ?_putch 0001                             _INT0IE 007F94  
                           i2l2101 0A1E                             i2l2051 0960  
                           i2l2035 0916                             i2l2107 0A22  
                           i2l2045 0942                             i2l2063 0988  
                           i2l2081 09B8                             i2l2057 096A  
                           i2l2075 09AE                             i2l2077 09B4  
                           i2l2069 0992                             i2l2089 09FC  
                           i2l2099 0A18                             i2l2455 13AA  
                        ??_Do_Init 0017                             _OSCCON 000FD3  
              __size_of_TIMER1_isr 000C                             _SPBRGH 000FB0  
                           _SSPBUF 000FC9                          ??_i2cNack 0011  
                 _force_nec_state0 1B8A                   __end_of_delay_ms 1700  
                           _i2cAck 1AEA                         _TempSecond 0052  
                 __end_of_fillRect 1798                   __end_of_drawChar 0B9C  
               __size_of_OpenUSART 0070           __size_of_Activate_Buzzer 0012  
                           ___wmul 199E                          ??___awdiv 0015  
        __size_of_fillCircleHelper 0138                   __end_of_drawtext 0EEE  
                        ??___lldiv 0019                          ??___llmod 0026  
                           _chkisr 0008                             _array1 00BF  
                           _buffer 00D4                             _nec_ok 004C  
                           clear_0 13F4                             clear_1 1400  
                 ___awdiv@quotient 0017                             _minute 005F  
                           _second 0063            DS3231_Setup_Time@Device 0013  
       __size_of_Deactivate_Buzzer 0008                             _printf 001C  
                     drawtext@size 0040                             _strcpy 1912  
                           _strlen 17E0                       __pdataCOMRAM 006E  
                        ??_isdigit 0011                          ?_I2C_Init 0011  
                        ?_I2C_Read 0001                          ?_I2C_Stop 0001  
                     __mediumconst FD40                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
 __end_of_I2C_Write_Cmd_Write_Data 1A08                        ?_i2cHighSda 0001  
                      ?_i2cHighScl 0001                             putch@c 0011  
                 __end_of_spiwrite 1AA0                         __accesstop 0080  
          __end_of__initialization 145E                          ?_INT0_isr 0001  
               _setup_alarm_minute 0065                 _setup_alarm_second 0066  
                    ___rparam_used 000001                      __end_of_Rcmd1 0DE4  
                    __end_of_Rcmd3 0FE0                     __pcstackCOMRAM 0001  
                     __pidataBANK0 1608                       __pidataBANK1 12F4  
                    __end_of_font2 FF1C                  __end_of_i2cLowSda 1B72  
                __end_of_i2cLowScl 1B82                      __end_of_putch 1B3C  
                   drawPixel@color 0019             __size_of_write_command 0010  
                       ??_I2C_Init 0015                         ??_I2C_Read 0011  
                     _alarm_minute 0056                       _alarm_second 0057  
                       ??_I2C_Stop 0011         fillCircleHelper@cornername 0029  
                          ??_Rcmd1 001D                            ??_Rcmd3 001D  
               __size_of_drawPixel 0030                  __end_of_OpenUSART 1548  
                          ??_putch 0011                         __pbssBANK0 00D4  
                 _setup_alarm_hour 0064                      ??_DS1621_Init 0016  
                        ?_Rcmd2red 0001                 __size_of_init_UART 0014  
        __size_of_Wait_Half_Second 001A                 main@previousSecond 017E  
                  spiwrite@spidata 0012                         _alarm_date 0054  
                       ??_INT0_isr 0001                         _alarm_hour 0055  
                          ?_i2cAck 0001                 __CFG_CCP2MX$PORTBE 000000  
                   I2C_Read@inByte 0013                            ?___wmul 0011  
              __size_of_i2cHighSda 0008                __size_of_i2cHighScl 000C  
                          ?_chkisr 0001             __size_of_setAddrWindow 004E  
 I2C_Write_Cmd_Write_Data@Data_Out 0014                            _CCP2CON 000FBA  
                     ??_TIMER1_isr 0001                      ??_I2C_ReStart 0011  
                       _fillCircle 165C                         I2C_Write@n 0012  
                          ?_printf 0027                            ?_strcpy 0011  
                          ?_strlen 0011                  ??_Activate_Buzzer 0011  
                       _fillScreen 1A26                         _drawCircle 0740  
                        ?_delay_ms 0017                          ?_fillRect 0023  
                        ?_drawChar 002E                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7              __end_of_fillRectangle 10BC  
                        ?_drawtext 0039                  _DS3231_Setup_Time 15AC  
                          _Do_Init 189A           _I2C_Write_Cmd_Write_Data 19E8  
       __end_of_I2C_Write_Cmd_Only 1A76                         ??_Rcmd2red 0014  
           DS1621_Read_Temp@Device 0018                            _i2cNack 1B5E  
               __end_of_TIMER1_isr 1B54                 ?_DS3231_Setup_Time 0001  
                    _write_command 1B1E                          _I2C_Start 1AD8  
                        _I2C_Write 185C                    __size_of_i2cAck 0012  
                          __Hparam 0000                            __Lparam 0000  
              __end_of_DS1621_Init 1A26                  __end_of_drawPixel 1974  
              ??_DS3231_Setup_Time 0013              __end_of_drawFastVLine 12F4  
                 _fillCircleHelper 0B9C                            ___awdiv 10BC  
                          ___lldiv 11E0                    __size_of___wmul 0028  
                          ___llmod 1468                    __size_of_chkisr 13E6  
                        ?_spiwrite 0001                            __pcinit 13EE  
                          __ramtop 1000                            __ptext0 04F2  
                          __ptext1 001C                            __ptext2 1B2E  
                          __ptext3 19C6                            __ptext4 1468  
                          __ptext5 11E0          __size_of_DS1621_Read_Temp 003C  
                          __ptext6 165C                            __ptext7 0B9C  
                          __ptext8 0740                            __ptext9 10BC  
                  __size_of_printf 04D6                  __end_of_init_UART 1AB4  
                        _T0CONbits 000FD5                    __size_of_strcpy 0032  
                  __size_of_strlen 003E                  __end_of_hexpowers FF64  
         __end_of_force_nec_state0 1B92                          _T1CONbits 000FCD  
         DS3231_Setup_Time@Address 0014                            _dpowers FF1C  
                          _isdigit 19C6                          _T3CONbits 000FB1  
                       ??_delay_ms 0019                __end_of_I2C_ReStart 1A8C  
                    drawtext@_text 003A                      drawtext@color 003C  
                       ??_fillRect 0028          __end_of_DS3231_Setup_Time 1608  
                       ??_drawChar 0035                          _LCD_Reset 1AB4  
                    _setAddrWindow 1700                     __pintcode_body 1372  
                       delay_ms@ms 0017               end_of_initialization 145E  
                       ??_drawtext 0041                     ?_write_command 0001  
                    __Lmediumconst FD40          __size_of_DS3231_Read_Time 0064  
                          int_func 1372            DS3231_Read_Time@Address 0014  
                       ?_I2C_Start 0001                         ?_I2C_Write 0001  
                  ___lldiv@divisor 0015                    ___lldiv@counter 001D  
                       _tempSecond 006E                          _RCSTAbits 000FAB  
                          printf@c 00FF                            printf@f 0027  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                       ??_spiwrite 0011                            strlen@s 0011  
                  fillCircle@color 0041        I2C_Write_Cmd_Write_Data@Cmd 0013  
                      ?_fillCircle 003B                   drawtext@cursor_x 00F9  
                 drawtext@cursor_y 00F8                          _PORTBbits 000F81  
                        _PORTDbits 000F83                   I2C_Write@outByte 0011  
                      ?_fillScreen 0024                         _setup_hour 0068  
                       _setup_year 006C                        ?_drawCircle 001C  
                       drawChar@bg 0032                          _TRISBbits 000F93  
                        _TRISCbits 000F94                          _TRISDbits 000F95  
                     ??_i2cHighSda 0011                       ??_i2cHighScl 0011  
                __size_of_I2C_Init 000A                  __size_of_I2C_Read 0048  
                __size_of_I2C_Stop 0012                     ?_setAddrWindow 0014  
                       ?_LCD_Reset 0001                   drawtext@textsize 00F4  
                       drawPixel@x 001B                         drawPixel@y 0018  
                 _Wait_Half_Second 1A42                        _DS1621_Init 1A08  
                      printf@width 00FC                          _TXSTAbits 000FAC  
                __size_of_INT0_isr 0158                     __end_of_i2cAck 1AFC  
         DS1621_Read_Temp@Data_Ret 0017                 __end_of_i2cHighSda 1B8A  
               __end_of_i2cHighScl 1B48                     __end_of___wmul 19C6  
                    delay_ms@count 001B                         _write_data 1B0E  
                    __pidataCOMRAM 1B92                     __end_of_chkisr 13EE  
         ?_TFT_GreenTab_Initialize 0001                        _I2C_ReStart 1A76  
                       drawtext@bg 003E                          _Nec_code1 0050  
                        _i2cLowSda 1B68                          _i2cLowScl 1B7A  
                   __end_of_printf 04F2                     __end_of_strcpy 1944  
                   __end_of_strlen 181E                          _Nec_state 0051  
              start_initialization 13EE         __size_of_DS3231_Setup_Time 005C  
                  ??_write_command 0013                          _OpenUSART 14D8  
              __size_of_fillCircle 0052                    ___llmod@divisor 0022  
                 __CFG_OSC$INTIO67 000000                        ??_I2C_Start 0011  
                  ___llmod@counter 0026                        ??_I2C_Write 0011  
                         ??_i2cAck 0011                  __size_of_Rcmd2red 003E  
              __size_of_fillScreen 001C                __size_of_drawCircle 01AE  
                  _Activate_Buzzer 1AFC                           ??___wmul 0015  
                         ??_chkisr 0003                        __pdataBANK0 0080  
                      __pdataBANK1 0100                    setAddrWindow@x0 0017  
                  setAddrWindow@x1 0015                    setAddrWindow@y0 0014  
                  setAddrWindow@y1 0016                           ??_printf 0035  
                 _DS1621_Read_Temp 18D6                           ??_strcpy 0015  
                         ??_strlen 0013                         ?_i2cLowSda 0001  
                       ?_i2cLowScl 0001                        __pbssCOMRAM 0044  
       ??_I2C_Write_Cmd_Write_Data 0015                    ??_setAddrWindow 0017  
                    __pcstackBANK0 00F3                      __pcstackBANK1 017E  
                      ??_LCD_Reset 001D                       _isdigit$1978 0012  
         __end_of_fillCircleHelper 0CD4                  __size_of_delay_ms 0052  
                         ?_Do_Init 0001                  __size_of_fillRect 004A  
                __size_of_drawChar 0156                         ?_OpenUSART 0011  
                 _DS3231_Read_Time 1548                           ?_i2cNack 0001  
                __size_of_drawtext 010A                        I2C_Read@ack 0011  
                        _bit_count 0058                          __pintcode 0008  
  __end_of_TFT_GreenTab_Initialize 199E                      __pmediumconst FD40  
                         ?___awdiv 0011                           ?___lldiv 0011  
                         ?___llmod 001E                          __tft_type 0053  
               _I2C_Write_Cmd_Only 1A5C                 drawFastVLine@color 001A  
                      ?_write_data 0001                          _drawPixel 1944  
                __size_of_spiwrite 0014                ?_I2C_Write_Cmd_Only 0013  
                ?_force_nec_state0 0001                           ?_isdigit 0001  
                         _I2C_Init 1B54                           _I2C_Read 1798  
                         _I2C_Stop 1AC6                  _Initialize_Screen 1152  
                   __size_of_Rcmd1 0110                     __size_of_Rcmd3 00F2  
                        _init_UART 1AA0                 ??_force_nec_state0 0001  
         I2C_Write_Cmd_Only@Device 0014                          _hexpowers FF44  
               ?_Initialize_Screen 0001                     __size_of_putch 000E  
          __end_of_Activate_Buzzer 1B0E                     ___wmul@product 0015  
              ??_Initialize_Screen 0043                           _INT0_isr 08EE  
             ??_I2C_Write_Cmd_Only 0014                           _PIE1bits 000F9D  
           DS3231_Read_Time@Device 0015                           _PIR1bits 000F9E  
                         _PIR2bits 000FA1                          _setup_day 0067  
                DS1621_Init@Device 0016                          fillRect@h 0025  
                        fillRect@i 002C                          fillRect@w 0024  
                        fillRect@x 002B                          fillRect@y 0023  
                        drawChar@c 002F                          drawChar@i 0038  
                        drawChar@j 0037                       ??_fillCircle 0043  
                        drawChar@x 0036                          drawChar@y 002E  
                       ?_drawPixel 0018             __size_of_fillRectangle 00DC  
         __end_of_Wait_Half_Second 1A5C                  ___wmul@multiplier 0011  
        __end_of_Initialize_Screen 11E0                        ??_i2cLowSda 0011  
                      ??_i2cLowScl 0011                       ??_fillScreen 0026  
                     ??_drawCircle 0024                         printf@flag 00FE  
                       printf@prec 00F4                          main@tempC 0182  
                        main@tempF 017F                         ?_init_UART 0001  
                      _INTCON2bits 000FF1                          copy_data0 141A  
                        copy_data1 143A                          drawtext@i 00F6  
           __size_of_drawFastVLine 0088                          drawtext@x 00F3  
                        drawtext@y 0039                           _Nec_code 0044  
                write_command@cmd_ 0013                        ??_OpenUSART 0013  
                     ?_DS1621_Init 0001                           _Rcmd2red 181E  
                 __size_of_Do_Init 003C                __size_of_write_data 0010  
                  OpenUSART@config 0013                       _Time_Elapsed 0048  
               __end_of_fillCircle 16AE                   __size_of_i2cNack 000A  
                         __Hrparam 0000                 __end_of_fillScreen 1A42  
                         __Lrparam 0000                 __end_of_drawCircle 08EE  
                 __size_of___awdiv 0096                   __size_of___lldiv 008C  
                 __size_of___llmod 0070                       ?_I2C_ReStart 0001  
                 __size_of_isdigit 0022                           _delay_ms 16AE  
                         __ptext10 1A42                           __ptext11 1152  
                         __ptext20 1944                           __ptext12 1912  
                         __ptext21 1700                           __ptext13 1A26  
                         __ptext30 16AE                           __ptext22 1974  
                         __ptext14 0FE0                           __ptext31 199E  
                         __ptext23 0EEE                           __ptext15 0DE4  
                         __ptext40 15AC                           __ptext32 189A  
                         __ptext24 181E                           __ptext16 17E0  
                         __ptext41 1548                           __ptext33 1AA0  
                         __ptext25 0CD4                           __ptext17 0A46  
                         __ptext50 1B68                           __ptext42 18D6  
                         __ptext34 14D8                           __ptext26 1B0E  
                         __ptext18 174E                           __ptext51 1B7A  
                         __ptext43 185C                           __ptext35 1B54  
                         __ptext27 1B1E                           __ptext19 126C  
                         __ptext52 1B82                           __ptext44 1AC6  
                         __ptext36 1A08                           __ptext28 1A8C  
                         __ptext53 1B3C                           __ptext45 1AD8  
                         __ptext37 19E8                           __ptext29 1AB4  
                         __ptext54 1AFC                           __ptext46 1798  
                         __ptext38 1A5C                           __ptext47 1B5E  
                         __ptext39 1B72                           __ptext56 1B48  
                         __ptext48 1AEA                           __ptext57 08EE  
                         __ptext49 1A76                           __ptext58 1B8A  
                         _fillRect 174E                           _drawChar 0A46  
 __size_of_TFT_GreenTab_Initialize 002A                           _colstart 0059  
                         _nec_code 0061                           _drawtext 0DE4  
                       strcpy@from 0013                      _fillRectangle 0FE0  
         __end_of_DS1621_Read_Temp 1912                   ?_Activate_Buzzer 0001  
                    __size_of_main 024E                    fillRectangle@hi 0021  
                  fillRectangle@lo 0022                      _drawFastVLine 126C  
                        printf@idx 00F3                           _spiwrite 1A8C  
                        printf@val 00F8                        ??_drawPixel 001B  
                         _rowstart 0062           __end_of_DS3231_Read_Time 15AC  
               fillCircleHelper@x0 0023                 fillCircleHelper@y0 0025  
       __size_of_Initialize_Screen 008E                         _INTCONbits 000FF2  
                   OpenUSART@spbrg 0011                        ??_init_UART 0014  
                         isdigit@c 0013                  ?_fillCircleHelper 0023  
                        spiwrite@x 0011                           intlevel2 0000  
                   ?_fillRectangle 0018                 ??_fillCircleHelper 002F  
            __end_of_write_command 1B2E                   ___lldiv@dividend 0011  
                  fillScreen@color 0024                       fillCircle@x0 003B  
                     fillCircle@y0 003D                     fillRectangle@h 001A  
                   fillRectangle@w 0019                     fillRectangle@x 0023  
                   fillRectangle@y 0018                     ?_drawFastVLine 0018  
                         printf@ap 00F6                  fillCircleHelper@f 0035  
                fillCircleHelper@r 0027                  fillCircleHelper@x 0037  
                fillCircleHelper@y 0039                       ??_write_data 0013  
                       _TIMER1_isr 1B48                      fillRect@color 0026  
                 ___lldiv@quotient 0019                           strcpy@cp 0015  
                         strlen@cp 0015                           strcpy@to 0011  
            I2C_Write_Cmd_Only@Cmd 0013                       _setup_minute 0069  
                     _setup_second 006B                        fillCircle@r 003F  
            __end_of_setAddrWindow 174E                 fillRectangle@color 001B  
                    drawChar@color 0030                        _setup_month 006A  
               __end_of_write_data 1B1E          __size_of_force_nec_state0 0008  
                     drawChar@line 0035                       drawChar@size 0034  
__size_of_I2C_Write_Cmd_Write_Data 0020               __size_of_DS1621_Init 001E  
        ?_I2C_Write_Cmd_Write_Data 0013  
